(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class searchCollection_args =
object (self)
  val mutable _query : string option = None
  method get_query = _query
  method grab_query = match _query with None->raise (Field_empty "searchCollection_args.query") | Some _x7191 -> _x7191
  method set_query _x7191 = _query <- Some _x7191
  method unset_query = _query <- None
  method reset_query = _query <- None

  val mutable _param : searchPagingParameter option = None
  method get_param = _param
  method grab_param = match _param with None->raise (Field_empty "searchCollection_args.param") | Some _x7192 -> _x7192
  method set_param _x7192 = _param <- Some _x7192
  method unset_param = _param <- None
  method reset_param = _param <- None

  method copy =
      let _new = Oo.copy self in
      if _param <> None then
        _new#set_param self#grab_param#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "searchCollection_args";
    (match _query with None -> () | Some _v -> 
      oprot#writeFieldBegin("query",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _param with None -> () | Some _v -> 
      oprot#writeFieldBegin("param",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_searchCollection_args (iprot : Protocol.t) =
  let _str7195 = new searchCollection_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7196,_id7197) = iprot#readFieldBegin in
        if _t7196 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7197 with 
          | 1 -> (if _t7196 = Protocol.T_STRING then
              _str7195#set_query iprot#readString
            else
              iprot#skip _t7196)
          | 2 -> (if _t7196 = Protocol.T_STRUCT then
              _str7195#set_param (read_searchPagingParameter iprot)
            else
              iprot#skip _t7196)
          | _ -> iprot#skip _t7196);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7195

class searchCollection_result =
object (self)
  val mutable _success : searchResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "searchCollection_result.success") | Some _x7198 -> _x7198
  method set_success _x7198 = _success <- Some _x7198
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "searchCollection_result.e") | Some _x7199 -> _x7199
  method set_e _x7199 = _e <- Some _x7199
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "searchCollection_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_searchCollection_result (iprot : Protocol.t) =
  let _str7202 = new searchCollection_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7203,_id7204) = iprot#readFieldBegin in
        if _t7203 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7204 with 
          | 0 -> (if _t7203 = Protocol.T_STRUCT then
              _str7202#set_success (read_searchResult iprot)
            else
              iprot#skip _t7203)
          | 1 -> (if _t7203 = Protocol.T_STRUCT then
              _str7202#set_e (read_talkException iprot)
            else
              iprot#skip _t7203)
          | _ -> iprot#skip _t7203);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7202

class getChatRoomAnnouncementsBulk_args =
object (self)
  val mutable _chatRoomMids : string list option = None
  method get_chatRoomMids = _chatRoomMids
  method grab_chatRoomMids = match _chatRoomMids with None->raise (Field_empty "getChatRoomAnnouncementsBulk_args.chatRoomMids") | Some _x7205 -> _x7205
  method set_chatRoomMids _x7205 = _chatRoomMids <- Some _x7205
  method unset_chatRoomMids = _chatRoomMids <- None
  method reset_chatRoomMids = _chatRoomMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChatRoomAnnouncementsBulk_args";
    (match _chatRoomMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatRoomMids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7208 ->         oprot#writeString(_iter7208);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChatRoomAnnouncementsBulk_args (iprot : Protocol.t) =
  let _str7209 = new getChatRoomAnnouncementsBulk_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7210,_id7211) = iprot#readFieldBegin in
        if _t7210 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7211 with 
          | 2 -> (if _t7210 = Protocol.T_LIST then
              _str7209#set_chatRoomMids 
                (let (_etype7215,_size7212) = iprot#readListBegin in
                  let _con7216 = (Array.to_list (Array.init _size7212 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7216)
            else
              iprot#skip _t7210)
          | _ -> iprot#skip _t7210);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7209

class getChatRoomAnnouncementsBulk_result =
object (self)
  val mutable _success : (string,chatRoomAnnouncement list) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getChatRoomAnnouncementsBulk_result.success") | Some _x7217 -> _x7217
  method set_success _x7217 = _success <- Some _x7217
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getChatRoomAnnouncementsBulk_result.e") | Some _x7218 -> _x7218
  method set_e _x7218 = _e <- Some _x7218
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k (List.map (fun x -> x#copy) v)) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChatRoomAnnouncementsBulk_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_LIST,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter7221 -> fun _viter7222 -> 
        oprot#writeString(_kiter7221);
        oprot#writeListBegin(Protocol.T_STRUCT,List.length _viter7222);
        List.iter (fun _iter7223 ->           _iter7223#write(oprot);
        ) _viter7222;
        oprot#writeListEnd;
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChatRoomAnnouncementsBulk_result (iprot : Protocol.t) =
  let _str7224 = new getChatRoomAnnouncementsBulk_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7225,_id7226) = iprot#readFieldBegin in
        if _t7225 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7226 with 
          | 0 -> (if _t7225 = Protocol.T_MAP then
              _str7224#set_success 
                (let (_ktype7228,_vtype7229,_size7227) = iprot#readMapBegin in
                let _con7231 = Hashtbl.create _size7227 in
                  for i = 1 to _size7227 do
                    let _k = iprot#readString in
                    let _v = 
                      (let (_etype7235,_size7232) = iprot#readListBegin in
                        let _con7236 = (Array.to_list (Array.init _size7232 (fun _ -> (read_chatRoomAnnouncement iprot)))) in
                          iprot#readListEnd; _con7236) in
                      Hashtbl.add _con7231 _k _v
                  done; iprot#readMapEnd; _con7231)
            else
              iprot#skip _t7225)
          | 1 -> (if _t7225 = Protocol.T_STRUCT then
              _str7224#set_e (read_talkException iprot)
            else
              iprot#skip _t7225)
          | _ -> iprot#skip _t7225);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7224

class getChatRoomAnnouncements_args =
object (self)
  val mutable _chatRoomMid : string option = None
  method get_chatRoomMid = _chatRoomMid
  method grab_chatRoomMid = match _chatRoomMid with None->raise (Field_empty "getChatRoomAnnouncements_args.chatRoomMid") | Some _x7237 -> _x7237
  method set_chatRoomMid _x7237 = _chatRoomMid <- Some _x7237
  method unset_chatRoomMid = _chatRoomMid <- None
  method reset_chatRoomMid = _chatRoomMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChatRoomAnnouncements_args";
    (match _chatRoomMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatRoomMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChatRoomAnnouncements_args (iprot : Protocol.t) =
  let _str7240 = new getChatRoomAnnouncements_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7241,_id7242) = iprot#readFieldBegin in
        if _t7241 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7242 with 
          | 2 -> (if _t7241 = Protocol.T_STRING then
              _str7240#set_chatRoomMid iprot#readString
            else
              iprot#skip _t7241)
          | _ -> iprot#skip _t7241);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7240

class getChatRoomAnnouncements_result =
object (self)
  val mutable _success : chatRoomAnnouncement list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getChatRoomAnnouncements_result.success") | Some _x7243 -> _x7243
  method set_success _x7243 = _success <- Some _x7243
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getChatRoomAnnouncements_result.e") | Some _x7244 -> _x7244
  method set_e _x7244 = _e <- Some _x7244
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChatRoomAnnouncements_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter7247 ->         _iter7247#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChatRoomAnnouncements_result (iprot : Protocol.t) =
  let _str7248 = new getChatRoomAnnouncements_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7249,_id7250) = iprot#readFieldBegin in
        if _t7249 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7250 with 
          | 0 -> (if _t7249 = Protocol.T_LIST then
              _str7248#set_success 
                (let (_etype7254,_size7251) = iprot#readListBegin in
                  let _con7255 = (Array.to_list (Array.init _size7251 (fun _ -> (read_chatRoomAnnouncement iprot)))) in
                    iprot#readListEnd; _con7255)
            else
              iprot#skip _t7249)
          | 1 -> (if _t7249 = Protocol.T_STRUCT then
              _str7248#set_e (read_talkException iprot)
            else
              iprot#skip _t7249)
          | _ -> iprot#skip _t7249);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7248

class createChatRoomAnnouncement_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "createChatRoomAnnouncement_args.reqSeq") | Some _x7256 -> _x7256
  method set_reqSeq _x7256 = _reqSeq <- Some _x7256
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _chatRoomMid : string option = None
  method get_chatRoomMid = _chatRoomMid
  method grab_chatRoomMid = match _chatRoomMid with None->raise (Field_empty "createChatRoomAnnouncement_args.chatRoomMid") | Some _x7257 -> _x7257
  method set_chatRoomMid _x7257 = _chatRoomMid <- Some _x7257
  method unset_chatRoomMid = _chatRoomMid <- None
  method reset_chatRoomMid = _chatRoomMid <- None

  val mutable _type : ChatRoomAnnouncementType.t option = None
  method get_type = _type
  method grab_type = match _type with None->raise (Field_empty "createChatRoomAnnouncement_args.type") | Some _x7258 -> _x7258
  method set_type _x7258 = _type <- Some _x7258
  method unset_type = _type <- None
  method reset_type = _type <- None

  val mutable _contents : chatRoomAnnouncementContents option = None
  method get_contents = _contents
  method grab_contents = match _contents with None->raise (Field_empty "createChatRoomAnnouncement_args.contents") | Some _x7259 -> _x7259
  method set_contents _x7259 = _contents <- Some _x7259
  method unset_contents = _contents <- None
  method reset_contents = _contents <- None

  method copy =
      let _new = Oo.copy self in
      if _contents <> None then
        _new#set_contents self#grab_contents#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createChatRoomAnnouncement_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _chatRoomMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatRoomMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _type with None -> () | Some _v -> 
      oprot#writeFieldBegin("type",Protocol.T_I32,3);
      oprot#writeI32(ChatRoomAnnouncementType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _contents with None -> () | Some _v -> 
      oprot#writeFieldBegin("contents",Protocol.T_STRUCT,4);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createChatRoomAnnouncement_args (iprot : Protocol.t) =
  let _str7262 = new createChatRoomAnnouncement_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7263,_id7264) = iprot#readFieldBegin in
        if _t7263 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7264 with 
          | 1 -> (if _t7263 = Protocol.T_I32 then
              _str7262#set_reqSeq iprot#readI32
            else
              iprot#skip _t7263)
          | 2 -> (if _t7263 = Protocol.T_STRING then
              _str7262#set_chatRoomMid iprot#readString
            else
              iprot#skip _t7263)
          | 3 -> (if _t7263 = Protocol.T_I32 then
              _str7262#set_type (ChatRoomAnnouncementType.of_i iprot#readI32)
            else
              iprot#skip _t7263)
          | 4 -> (if _t7263 = Protocol.T_STRUCT then
              _str7262#set_contents (read_chatRoomAnnouncementContents iprot)
            else
              iprot#skip _t7263)
          | _ -> iprot#skip _t7263);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7262

class createChatRoomAnnouncement_result =
object (self)
  val mutable _success : chatRoomAnnouncement option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createChatRoomAnnouncement_result.success") | Some _x7265 -> _x7265
  method set_success _x7265 = _success <- Some _x7265
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createChatRoomAnnouncement_result.e") | Some _x7266 -> _x7266
  method set_e _x7266 = _e <- Some _x7266
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createChatRoomAnnouncement_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createChatRoomAnnouncement_result (iprot : Protocol.t) =
  let _str7269 = new createChatRoomAnnouncement_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7270,_id7271) = iprot#readFieldBegin in
        if _t7270 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7271 with 
          | 0 -> (if _t7270 = Protocol.T_STRUCT then
              _str7269#set_success (read_chatRoomAnnouncement iprot)
            else
              iprot#skip _t7270)
          | 1 -> (if _t7270 = Protocol.T_STRUCT then
              _str7269#set_e (read_talkException iprot)
            else
              iprot#skip _t7270)
          | _ -> iprot#skip _t7270);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7269

class removeChatRoomAnnouncement_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "removeChatRoomAnnouncement_args.reqSeq") | Some _x7272 -> _x7272
  method set_reqSeq _x7272 = _reqSeq <- Some _x7272
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _chatRoomMid : string option = None
  method get_chatRoomMid = _chatRoomMid
  method grab_chatRoomMid = match _chatRoomMid with None->raise (Field_empty "removeChatRoomAnnouncement_args.chatRoomMid") | Some _x7273 -> _x7273
  method set_chatRoomMid _x7273 = _chatRoomMid <- Some _x7273
  method unset_chatRoomMid = _chatRoomMid <- None
  method reset_chatRoomMid = _chatRoomMid <- None

  val mutable _announcementSeq : Int64.t option = None
  method get_announcementSeq = _announcementSeq
  method grab_announcementSeq = match _announcementSeq with None->raise (Field_empty "removeChatRoomAnnouncement_args.announcementSeq") | Some _x7274 -> _x7274
  method set_announcementSeq _x7274 = _announcementSeq <- Some _x7274
  method unset_announcementSeq = _announcementSeq <- None
  method reset_announcementSeq = _announcementSeq <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeChatRoomAnnouncement_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _chatRoomMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatRoomMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _announcementSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("announcementSeq",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeChatRoomAnnouncement_args (iprot : Protocol.t) =
  let _str7277 = new removeChatRoomAnnouncement_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7278,_id7279) = iprot#readFieldBegin in
        if _t7278 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7279 with 
          | 1 -> (if _t7278 = Protocol.T_I32 then
              _str7277#set_reqSeq iprot#readI32
            else
              iprot#skip _t7278)
          | 2 -> (if _t7278 = Protocol.T_STRING then
              _str7277#set_chatRoomMid iprot#readString
            else
              iprot#skip _t7278)
          | 3 -> (if _t7278 = Protocol.T_I64 then
              _str7277#set_announcementSeq iprot#readI64
            else
              iprot#skip _t7278)
          | _ -> iprot#skip _t7278);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7277

class removeChatRoomAnnouncement_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeChatRoomAnnouncement_result.e") | Some _x7280 -> _x7280
  method set_e _x7280 = _e <- Some _x7280
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeChatRoomAnnouncement_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeChatRoomAnnouncement_result (iprot : Protocol.t) =
  let _str7283 = new removeChatRoomAnnouncement_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7284,_id7285) = iprot#readFieldBegin in
        if _t7284 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7285 with 
          | 1 -> (if _t7284 = Protocol.T_STRUCT then
              _str7283#set_e (read_talkException iprot)
            else
              iprot#skip _t7284)
          | _ -> iprot#skip _t7284);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7283

class unsendMessage_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "unsendMessage_args.seq") | Some _x7286 -> _x7286
  method set_seq _x7286 = _seq <- Some _x7286
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "unsendMessage_args.messageId") | Some _x7287 -> _x7287
  method set_messageId _x7287 = _messageId <- Some _x7287
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unsendMessage_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unsendMessage_args (iprot : Protocol.t) =
  let _str7290 = new unsendMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7291,_id7292) = iprot#readFieldBegin in
        if _t7291 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7292 with 
          | 1 -> (if _t7291 = Protocol.T_I32 then
              _str7290#set_seq iprot#readI32
            else
              iprot#skip _t7291)
          | 2 -> (if _t7291 = Protocol.T_STRING then
              _str7290#set_messageId iprot#readString
            else
              iprot#skip _t7291)
          | _ -> iprot#skip _t7291);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7290

class unsendMessage_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "unsendMessage_result.e") | Some _x7293 -> _x7293
  method set_e _x7293 = _e <- Some _x7293
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unsendMessage_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unsendMessage_result (iprot : Protocol.t) =
  let _str7296 = new unsendMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7297,_id7298) = iprot#readFieldBegin in
        if _t7297 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7298 with 
          | 1 -> (if _t7297 = Protocol.T_STRUCT then
              _str7296#set_e (read_talkException iprot)
            else
              iprot#skip _t7297)
          | _ -> iprot#skip _t7297);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7296

class getGroupWithoutMembers_args =
object (self)
  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "getGroupWithoutMembers_args.groupId") | Some _x7299 -> _x7299
  method set_groupId _x7299 = _groupId <- Some _x7299
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupWithoutMembers_args";
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupWithoutMembers_args (iprot : Protocol.t) =
  let _str7302 = new getGroupWithoutMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7303,_id7304) = iprot#readFieldBegin in
        if _t7303 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7304 with 
          | 2 -> (if _t7303 = Protocol.T_STRING then
              _str7302#set_groupId iprot#readString
            else
              iprot#skip _t7303)
          | _ -> iprot#skip _t7303);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7302

class getGroupWithoutMembers_result =
object (self)
  val mutable _success : group option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupWithoutMembers_result.success") | Some _x7305 -> _x7305
  method set_success _x7305 = _success <- Some _x7305
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupWithoutMembers_result.e") | Some _x7306 -> _x7306
  method set_e _x7306 = _e <- Some _x7306
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupWithoutMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupWithoutMembers_result (iprot : Protocol.t) =
  let _str7309 = new getGroupWithoutMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7310,_id7311) = iprot#readFieldBegin in
        if _t7310 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7311 with 
          | 0 -> (if _t7310 = Protocol.T_STRUCT then
              _str7309#set_success (read_group iprot)
            else
              iprot#skip _t7310)
          | 1 -> (if _t7310 = Protocol.T_STRUCT then
              _str7309#set_e (read_talkException iprot)
            else
              iprot#skip _t7310)
          | _ -> iprot#skip _t7310);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7309

class requestResendMessage_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "requestResendMessage_args.reqSeq") | Some _x7312 -> _x7312
  method set_reqSeq _x7312 = _reqSeq <- Some _x7312
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _senderMid : string option = None
  method get_senderMid = _senderMid
  method grab_senderMid = match _senderMid with None->raise (Field_empty "requestResendMessage_args.senderMid") | Some _x7313 -> _x7313
  method set_senderMid _x7313 = _senderMid <- Some _x7313
  method unset_senderMid = _senderMid <- None
  method reset_senderMid = _senderMid <- None

  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "requestResendMessage_args.messageId") | Some _x7314 -> _x7314
  method set_messageId _x7314 = _messageId <- Some _x7314
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestResendMessage_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _senderMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("senderMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestResendMessage_args (iprot : Protocol.t) =
  let _str7317 = new requestResendMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7318,_id7319) = iprot#readFieldBegin in
        if _t7318 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7319 with 
          | 1 -> (if _t7318 = Protocol.T_I32 then
              _str7317#set_reqSeq iprot#readI32
            else
              iprot#skip _t7318)
          | 2 -> (if _t7318 = Protocol.T_STRING then
              _str7317#set_senderMid iprot#readString
            else
              iprot#skip _t7318)
          | 3 -> (if _t7318 = Protocol.T_STRING then
              _str7317#set_messageId iprot#readString
            else
              iprot#skip _t7318)
          | _ -> iprot#skip _t7318);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7317

class requestResendMessage_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "requestResendMessage_result.e") | Some _x7320 -> _x7320
  method set_e _x7320 = _e <- Some _x7320
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestResendMessage_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestResendMessage_result (iprot : Protocol.t) =
  let _str7323 = new requestResendMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7324,_id7325) = iprot#readFieldBegin in
        if _t7324 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7325 with 
          | 1 -> (if _t7324 = Protocol.T_STRUCT then
              _str7323#set_e (read_talkException iprot)
            else
              iprot#skip _t7324)
          | _ -> iprot#skip _t7324);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7323

class respondResendMessage_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "respondResendMessage_args.reqSeq") | Some _x7326 -> _x7326
  method set_reqSeq _x7326 = _reqSeq <- Some _x7326
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _receiverMid : string option = None
  method get_receiverMid = _receiverMid
  method grab_receiverMid = match _receiverMid with None->raise (Field_empty "respondResendMessage_args.receiverMid") | Some _x7327 -> _x7327
  method set_receiverMid _x7327 = _receiverMid <- Some _x7327
  method unset_receiverMid = _receiverMid <- None
  method reset_receiverMid = _receiverMid <- None

  val mutable _originalMessageId : string option = None
  method get_originalMessageId = _originalMessageId
  method grab_originalMessageId = match _originalMessageId with None->raise (Field_empty "respondResendMessage_args.originalMessageId") | Some _x7328 -> _x7328
  method set_originalMessageId _x7328 = _originalMessageId <- Some _x7328
  method unset_originalMessageId = _originalMessageId <- None
  method reset_originalMessageId = _originalMessageId <- None

  val mutable _resendMessage : message option = None
  method get_resendMessage = _resendMessage
  method grab_resendMessage = match _resendMessage with None->raise (Field_empty "respondResendMessage_args.resendMessage") | Some _x7329 -> _x7329
  method set_resendMessage _x7329 = _resendMessage <- Some _x7329
  method unset_resendMessage = _resendMessage <- None
  method reset_resendMessage = _resendMessage <- None

  val mutable _errorCode : ErrorCode.t option = None
  method get_errorCode = _errorCode
  method grab_errorCode = match _errorCode with None->raise (Field_empty "respondResendMessage_args.errorCode") | Some _x7330 -> _x7330
  method set_errorCode _x7330 = _errorCode <- Some _x7330
  method unset_errorCode = _errorCode <- None
  method reset_errorCode = _errorCode <- None

  method copy =
      let _new = Oo.copy self in
      if _resendMessage <> None then
        _new#set_resendMessage self#grab_resendMessage#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "respondResendMessage_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _receiverMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("receiverMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _originalMessageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("originalMessageId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _resendMessage with None -> () | Some _v -> 
      oprot#writeFieldBegin("resendMessage",Protocol.T_STRUCT,4);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _errorCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("errorCode",Protocol.T_I32,5);
      oprot#writeI32(ErrorCode.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_respondResendMessage_args (iprot : Protocol.t) =
  let _str7333 = new respondResendMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7334,_id7335) = iprot#readFieldBegin in
        if _t7334 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7335 with 
          | 1 -> (if _t7334 = Protocol.T_I32 then
              _str7333#set_reqSeq iprot#readI32
            else
              iprot#skip _t7334)
          | 2 -> (if _t7334 = Protocol.T_STRING then
              _str7333#set_receiverMid iprot#readString
            else
              iprot#skip _t7334)
          | 3 -> (if _t7334 = Protocol.T_STRING then
              _str7333#set_originalMessageId iprot#readString
            else
              iprot#skip _t7334)
          | 4 -> (if _t7334 = Protocol.T_STRUCT then
              _str7333#set_resendMessage (read_message iprot)
            else
              iprot#skip _t7334)
          | 5 -> (if _t7334 = Protocol.T_I32 then
              _str7333#set_errorCode (ErrorCode.of_i iprot#readI32)
            else
              iprot#skip _t7334)
          | _ -> iprot#skip _t7334);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7333

class respondResendMessage_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "respondResendMessage_result.e") | Some _x7336 -> _x7336
  method set_e _x7336 = _e <- Some _x7336
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "respondResendMessage_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_respondResendMessage_result (iprot : Protocol.t) =
  let _str7339 = new respondResendMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7340,_id7341) = iprot#readFieldBegin in
        if _t7340 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7341 with 
          | 1 -> (if _t7340 = Protocol.T_STRUCT then
              _str7339#set_e (read_talkException iprot)
            else
              iprot#skip _t7340)
          | _ -> iprot#skip _t7340);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7339

class acceptGroupInvitation_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "acceptGroupInvitation_args.reqSeq") | Some _x7342 -> _x7342
  method set_reqSeq _x7342 = _reqSeq <- Some _x7342
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "acceptGroupInvitation_args.groupId") | Some _x7343 -> _x7343
  method set_groupId _x7343 = _groupId <- Some _x7343
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acceptGroupInvitation_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acceptGroupInvitation_args (iprot : Protocol.t) =
  let _str7346 = new acceptGroupInvitation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7347,_id7348) = iprot#readFieldBegin in
        if _t7347 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7348 with 
          | 1 -> (if _t7347 = Protocol.T_I32 then
              _str7346#set_reqSeq iprot#readI32
            else
              iprot#skip _t7347)
          | 2 -> (if _t7347 = Protocol.T_STRING then
              _str7346#set_groupId iprot#readString
            else
              iprot#skip _t7347)
          | _ -> iprot#skip _t7347);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7346

class acceptGroupInvitation_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "acceptGroupInvitation_result.e") | Some _x7349 -> _x7349
  method set_e _x7349 = _e <- Some _x7349
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acceptGroupInvitation_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acceptGroupInvitation_result (iprot : Protocol.t) =
  let _str7352 = new acceptGroupInvitation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7353,_id7354) = iprot#readFieldBegin in
        if _t7353 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7354 with 
          | 1 -> (if _t7353 = Protocol.T_STRUCT then
              _str7352#set_e (read_talkException iprot)
            else
              iprot#skip _t7353)
          | _ -> iprot#skip _t7353);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7352

class acceptGroupInvitationByTicket_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "acceptGroupInvitationByTicket_args.reqSeq") | Some _x7355 -> _x7355
  method set_reqSeq _x7355 = _reqSeq <- Some _x7355
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _groupMid : string option = None
  method get_groupMid = _groupMid
  method grab_groupMid = match _groupMid with None->raise (Field_empty "acceptGroupInvitationByTicket_args.groupMid") | Some _x7356 -> _x7356
  method set_groupMid _x7356 = _groupMid <- Some _x7356
  method unset_groupMid = _groupMid <- None
  method reset_groupMid = _groupMid <- None

  val mutable _ticketId : string option = None
  method get_ticketId = _ticketId
  method grab_ticketId = match _ticketId with None->raise (Field_empty "acceptGroupInvitationByTicket_args.ticketId") | Some _x7357 -> _x7357
  method set_ticketId _x7357 = _ticketId <- Some _x7357
  method unset_ticketId = _ticketId <- None
  method reset_ticketId = _ticketId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acceptGroupInvitationByTicket_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _groupMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("GroupMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _ticketId with None -> () | Some _v -> 
      oprot#writeFieldBegin("ticketId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acceptGroupInvitationByTicket_args (iprot : Protocol.t) =
  let _str7360 = new acceptGroupInvitationByTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7361,_id7362) = iprot#readFieldBegin in
        if _t7361 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7362 with 
          | 1 -> (if _t7361 = Protocol.T_I32 then
              _str7360#set_reqSeq iprot#readI32
            else
              iprot#skip _t7361)
          | 2 -> (if _t7361 = Protocol.T_STRING then
              _str7360#set_groupMid iprot#readString
            else
              iprot#skip _t7361)
          | 3 -> (if _t7361 = Protocol.T_STRING then
              _str7360#set_ticketId iprot#readString
            else
              iprot#skip _t7361)
          | _ -> iprot#skip _t7361);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7360

class acceptGroupInvitationByTicket_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "acceptGroupInvitationByTicket_result.e") | Some _x7363 -> _x7363
  method set_e _x7363 = _e <- Some _x7363
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acceptGroupInvitationByTicket_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acceptGroupInvitationByTicket_result (iprot : Protocol.t) =
  let _str7366 = new acceptGroupInvitationByTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7367,_id7368) = iprot#readFieldBegin in
        if _t7367 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7368 with 
          | 1 -> (if _t7367 = Protocol.T_STRUCT then
              _str7366#set_e (read_talkException iprot)
            else
              iprot#skip _t7367)
          | _ -> iprot#skip _t7367);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7366

class acceptProximityMatches_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "acceptProximityMatches_args.sessionId") | Some _x7369 -> _x7369
  method set_sessionId _x7369 = _sessionId <- Some _x7369
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  val mutable _ids : (string,bool) Hashtbl.t option = None
  method get_ids = _ids
  method grab_ids = match _ids with None->raise (Field_empty "acceptProximityMatches_args.ids") | Some _x7370 -> _x7370
  method set_ids _x7370 = _ids <- Some _x7370
  method unset_ids = _ids <- None
  method reset_ids = _ids <- None

  method copy =
      let _new = Oo.copy self in
      if _ids <> None then
        _new#set_ids (Hashtbl.copy self#grab_ids);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acceptProximityMatches_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _ids with None -> () | Some _v -> 
      oprot#writeFieldBegin("ids",Protocol.T_SET,3);
      oprot#writeSetBegin(Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _iter7373 -> fun _ ->         oprot#writeString(_iter7373);
      ) _v;
      oprot#writeSetEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acceptProximityMatches_args (iprot : Protocol.t) =
  let _str7374 = new acceptProximityMatches_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7375,_id7376) = iprot#readFieldBegin in
        if _t7375 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7376 with 
          | 2 -> (if _t7375 = Protocol.T_STRING then
              _str7374#set_sessionId iprot#readString
            else
              iprot#skip _t7375)
          | 3 -> (if _t7375 = Protocol.T_SET then
              _str7374#set_ids 
                (let (_etype7380,_size7377) = iprot#readSetBegin in
                let _con7381 = Hashtbl.create _size7377 in
                  for i = 1 to _size7377 do
                    Hashtbl.add _con7381 iprot#readString true
                  done; iprot#readSetEnd; _con7381)
            else
              iprot#skip _t7375)
          | _ -> iprot#skip _t7375);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7374

class acceptProximityMatches_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "acceptProximityMatches_result.e") | Some _x7382 -> _x7382
  method set_e _x7382 = _e <- Some _x7382
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acceptProximityMatches_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acceptProximityMatches_result (iprot : Protocol.t) =
  let _str7385 = new acceptProximityMatches_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7386,_id7387) = iprot#readFieldBegin in
        if _t7386 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7387 with 
          | 1 -> (if _t7386 = Protocol.T_STRUCT then
              _str7385#set_e (read_talkException iprot)
            else
              iprot#skip _t7386)
          | _ -> iprot#skip _t7386);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7385

class acquireCallRoute_args =
object (self)
  val mutable _to : string option = None
  method get_to = _to
  method grab_to = match _to with None->raise (Field_empty "acquireCallRoute_args.to") | Some _x7388 -> _x7388
  method set_to _x7388 = _to <- Some _x7388
  method unset_to = _to <- None
  method reset_to = _to <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquireCallRoute_args";
    (match _to with None -> () | Some _v -> 
      oprot#writeFieldBegin("to",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquireCallRoute_args (iprot : Protocol.t) =
  let _str7391 = new acquireCallRoute_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7392,_id7393) = iprot#readFieldBegin in
        if _t7392 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7393 with 
          | 2 -> (if _t7392 = Protocol.T_STRING then
              _str7391#set_to iprot#readString
            else
              iprot#skip _t7392)
          | _ -> iprot#skip _t7392);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7391

class acquireCallRoute_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "acquireCallRoute_result.success") | Some _x7394 -> _x7394
  method set_success _x7394 = _success <- Some _x7394
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "acquireCallRoute_result.e") | Some _x7395 -> _x7395
  method set_e _x7395 = _e <- Some _x7395
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquireCallRoute_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7398 ->         oprot#writeString(_iter7398);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquireCallRoute_result (iprot : Protocol.t) =
  let _str7399 = new acquireCallRoute_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7400,_id7401) = iprot#readFieldBegin in
        if _t7400 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7401 with 
          | 0 -> (if _t7400 = Protocol.T_LIST then
              _str7399#set_success 
                (let (_etype7405,_size7402) = iprot#readListBegin in
                  let _con7406 = (Array.to_list (Array.init _size7402 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7406)
            else
              iprot#skip _t7400)
          | 1 -> (if _t7400 = Protocol.T_STRUCT then
              _str7399#set_e (read_talkException iprot)
            else
              iprot#skip _t7400)
          | _ -> iprot#skip _t7400);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7399

class acquireCallTicket_args =
object (self)
  val mutable _to : string option = None
  method get_to = _to
  method grab_to = match _to with None->raise (Field_empty "acquireCallTicket_args.to") | Some _x7407 -> _x7407
  method set_to _x7407 = _to <- Some _x7407
  method unset_to = _to <- None
  method reset_to = _to <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquireCallTicket_args";
    (match _to with None -> () | Some _v -> 
      oprot#writeFieldBegin("to",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquireCallTicket_args (iprot : Protocol.t) =
  let _str7410 = new acquireCallTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7411,_id7412) = iprot#readFieldBegin in
        if _t7411 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7412 with 
          | 2 -> (if _t7411 = Protocol.T_STRING then
              _str7410#set_to iprot#readString
            else
              iprot#skip _t7411)
          | _ -> iprot#skip _t7411);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7410

class acquireCallTicket_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "acquireCallTicket_result.success") | Some _x7413 -> _x7413
  method set_success _x7413 = _success <- Some _x7413
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "acquireCallTicket_result.e") | Some _x7414 -> _x7414
  method set_e _x7414 = _e <- Some _x7414
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquireCallTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquireCallTicket_result (iprot : Protocol.t) =
  let _str7417 = new acquireCallTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7418,_id7419) = iprot#readFieldBegin in
        if _t7418 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7419 with 
          | 0 -> (if _t7418 = Protocol.T_STRING then
              _str7417#set_success iprot#readString
            else
              iprot#skip _t7418)
          | 1 -> (if _t7418 = Protocol.T_STRUCT then
              _str7417#set_e (read_talkException iprot)
            else
              iprot#skip _t7418)
          | _ -> iprot#skip _t7418);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7417

class acquireEncryptedAccessToken_args =
object (self)
  val mutable _featureType : FeatureType.t option = None
  method get_featureType = _featureType
  method grab_featureType = match _featureType with None->raise (Field_empty "acquireEncryptedAccessToken_args.featureType") | Some _x7420 -> _x7420
  method set_featureType _x7420 = _featureType <- Some _x7420
  method unset_featureType = _featureType <- None
  method reset_featureType = _featureType <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquireEncryptedAccessToken_args";
    (match _featureType with None -> () | Some _v -> 
      oprot#writeFieldBegin("featureType",Protocol.T_I32,2);
      oprot#writeI32(FeatureType.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquireEncryptedAccessToken_args (iprot : Protocol.t) =
  let _str7423 = new acquireEncryptedAccessToken_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7424,_id7425) = iprot#readFieldBegin in
        if _t7424 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7425 with 
          | 2 -> (if _t7424 = Protocol.T_I32 then
              _str7423#set_featureType (FeatureType.of_i iprot#readI32)
            else
              iprot#skip _t7424)
          | _ -> iprot#skip _t7424);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7423

class acquireEncryptedAccessToken_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "acquireEncryptedAccessToken_result.success") | Some _x7426 -> _x7426
  method set_success _x7426 = _success <- Some _x7426
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "acquireEncryptedAccessToken_result.e") | Some _x7427 -> _x7427
  method set_e _x7427 = _e <- Some _x7427
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquireEncryptedAccessToken_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquireEncryptedAccessToken_result (iprot : Protocol.t) =
  let _str7430 = new acquireEncryptedAccessToken_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7431,_id7432) = iprot#readFieldBegin in
        if _t7431 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7432 with 
          | 0 -> (if _t7431 = Protocol.T_STRING then
              _str7430#set_success iprot#readString
            else
              iprot#skip _t7431)
          | 1 -> (if _t7431 = Protocol.T_STRUCT then
              _str7430#set_e (read_talkException iprot)
            else
              iprot#skip _t7431)
          | _ -> iprot#skip _t7431);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7430

class addSnsId_args =
object (self)
  val mutable _snsIdType : SnsIdType.t option = None
  method get_snsIdType = _snsIdType
  method grab_snsIdType = match _snsIdType with None->raise (Field_empty "addSnsId_args.snsIdType") | Some _x7433 -> _x7433
  method set_snsIdType _x7433 = _snsIdType <- Some _x7433
  method unset_snsIdType = _snsIdType <- None
  method reset_snsIdType = _snsIdType <- None

  val mutable _snsAccessToken : string option = None
  method get_snsAccessToken = _snsAccessToken
  method grab_snsAccessToken = match _snsAccessToken with None->raise (Field_empty "addSnsId_args.snsAccessToken") | Some _x7434 -> _x7434
  method set_snsAccessToken _x7434 = _snsAccessToken <- Some _x7434
  method unset_snsAccessToken = _snsAccessToken <- None
  method reset_snsAccessToken = _snsAccessToken <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addSnsId_args";
    (match _snsIdType with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsIdType",Protocol.T_I32,2);
      oprot#writeI32(SnsIdType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _snsAccessToken with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsAccessToken",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addSnsId_args (iprot : Protocol.t) =
  let _str7437 = new addSnsId_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7438,_id7439) = iprot#readFieldBegin in
        if _t7438 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7439 with 
          | 2 -> (if _t7438 = Protocol.T_I32 then
              _str7437#set_snsIdType (SnsIdType.of_i iprot#readI32)
            else
              iprot#skip _t7438)
          | 3 -> (if _t7438 = Protocol.T_STRING then
              _str7437#set_snsAccessToken iprot#readString
            else
              iprot#skip _t7438)
          | _ -> iprot#skip _t7438);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7437

class addSnsId_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "addSnsId_result.success") | Some _x7440 -> _x7440
  method set_success _x7440 = _success <- Some _x7440
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "addSnsId_result.e") | Some _x7441 -> _x7441
  method set_e _x7441 = _e <- Some _x7441
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addSnsId_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addSnsId_result (iprot : Protocol.t) =
  let _str7444 = new addSnsId_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7445,_id7446) = iprot#readFieldBegin in
        if _t7445 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7446 with 
          | 0 -> (if _t7445 = Protocol.T_STRING then
              _str7444#set_success iprot#readString
            else
              iprot#skip _t7445)
          | 1 -> (if _t7445 = Protocol.T_STRUCT then
              _str7444#set_e (read_talkException iprot)
            else
              iprot#skip _t7445)
          | _ -> iprot#skip _t7445);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7444

class blockContact_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "blockContact_args.reqSeq") | Some _x7447 -> _x7447
  method set_reqSeq _x7447 = _reqSeq <- Some _x7447
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _id : string option = None
  method get_id = _id
  method grab_id = match _id with None->raise (Field_empty "blockContact_args.id") | Some _x7448 -> _x7448
  method set_id _x7448 = _id <- Some _x7448
  method unset_id = _id <- None
  method reset_id = _id <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "blockContact_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _id with None -> () | Some _v -> 
      oprot#writeFieldBegin("id",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_blockContact_args (iprot : Protocol.t) =
  let _str7451 = new blockContact_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7452,_id7453) = iprot#readFieldBegin in
        if _t7452 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7453 with 
          | 1 -> (if _t7452 = Protocol.T_I32 then
              _str7451#set_reqSeq iprot#readI32
            else
              iprot#skip _t7452)
          | 2 -> (if _t7452 = Protocol.T_STRING then
              _str7451#set_id iprot#readString
            else
              iprot#skip _t7452)
          | _ -> iprot#skip _t7452);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7451

class blockContact_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "blockContact_result.e") | Some _x7454 -> _x7454
  method set_e _x7454 = _e <- Some _x7454
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "blockContact_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_blockContact_result (iprot : Protocol.t) =
  let _str7457 = new blockContact_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7458,_id7459) = iprot#readFieldBegin in
        if _t7458 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7459 with 
          | 1 -> (if _t7458 = Protocol.T_STRUCT then
              _str7457#set_e (read_talkException iprot)
            else
              iprot#skip _t7458)
          | _ -> iprot#skip _t7458);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7457

class blockRecommendation_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "blockRecommendation_args.reqSeq") | Some _x7460 -> _x7460
  method set_reqSeq _x7460 = _reqSeq <- Some _x7460
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _id : string option = None
  method get_id = _id
  method grab_id = match _id with None->raise (Field_empty "blockRecommendation_args.id") | Some _x7461 -> _x7461
  method set_id _x7461 = _id <- Some _x7461
  method unset_id = _id <- None
  method reset_id = _id <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "blockRecommendation_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _id with None -> () | Some _v -> 
      oprot#writeFieldBegin("id",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_blockRecommendation_args (iprot : Protocol.t) =
  let _str7464 = new blockRecommendation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7465,_id7466) = iprot#readFieldBegin in
        if _t7465 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7466 with 
          | 1 -> (if _t7465 = Protocol.T_I32 then
              _str7464#set_reqSeq iprot#readI32
            else
              iprot#skip _t7465)
          | 2 -> (if _t7465 = Protocol.T_STRING then
              _str7464#set_id iprot#readString
            else
              iprot#skip _t7465)
          | _ -> iprot#skip _t7465);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7464

class blockRecommendation_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "blockRecommendation_result.e") | Some _x7467 -> _x7467
  method set_e _x7467 = _e <- Some _x7467
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "blockRecommendation_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_blockRecommendation_result (iprot : Protocol.t) =
  let _str7470 = new blockRecommendation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7471,_id7472) = iprot#readFieldBegin in
        if _t7471 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7472 with 
          | 1 -> (if _t7471 = Protocol.T_STRUCT then
              _str7470#set_e (read_talkException iprot)
            else
              iprot#skip _t7471)
          | _ -> iprot#skip _t7471);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7470

class cancelGroupInvitation_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "cancelGroupInvitation_args.reqSeq") | Some _x7473 -> _x7473
  method set_reqSeq _x7473 = _reqSeq <- Some _x7473
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "cancelGroupInvitation_args.groupId") | Some _x7474 -> _x7474
  method set_groupId _x7474 = _groupId <- Some _x7474
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  val mutable _contactIds : string list option = None
  method get_contactIds = _contactIds
  method grab_contactIds = match _contactIds with None->raise (Field_empty "cancelGroupInvitation_args.contactIds") | Some _x7475 -> _x7475
  method set_contactIds _x7475 = _contactIds <- Some _x7475
  method unset_contactIds = _contactIds <- None
  method reset_contactIds = _contactIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "cancelGroupInvitation_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _contactIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactIds",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7478 ->         oprot#writeString(_iter7478);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_cancelGroupInvitation_args (iprot : Protocol.t) =
  let _str7479 = new cancelGroupInvitation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7480,_id7481) = iprot#readFieldBegin in
        if _t7480 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7481 with 
          | 1 -> (if _t7480 = Protocol.T_I32 then
              _str7479#set_reqSeq iprot#readI32
            else
              iprot#skip _t7480)
          | 2 -> (if _t7480 = Protocol.T_STRING then
              _str7479#set_groupId iprot#readString
            else
              iprot#skip _t7480)
          | 3 -> (if _t7480 = Protocol.T_LIST then
              _str7479#set_contactIds 
                (let (_etype7485,_size7482) = iprot#readListBegin in
                  let _con7486 = (Array.to_list (Array.init _size7482 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7486)
            else
              iprot#skip _t7480)
          | _ -> iprot#skip _t7480);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7479

class cancelGroupInvitation_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "cancelGroupInvitation_result.e") | Some _x7487 -> _x7487
  method set_e _x7487 = _e <- Some _x7487
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "cancelGroupInvitation_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_cancelGroupInvitation_result (iprot : Protocol.t) =
  let _str7490 = new cancelGroupInvitation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7491,_id7492) = iprot#readFieldBegin in
        if _t7491 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7492 with 
          | 1 -> (if _t7491 = Protocol.T_STRUCT then
              _str7490#set_e (read_talkException iprot)
            else
              iprot#skip _t7491)
          | _ -> iprot#skip _t7491);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7490

class changeVerificationMethod_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "changeVerificationMethod_args.sessionId") | Some _x7493 -> _x7493
  method set_sessionId _x7493 = _sessionId <- Some _x7493
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  val mutable _method : VerificationMethod.t option = None
  method get_method = _method
  method grab_method = match _method with None->raise (Field_empty "changeVerificationMethod_args.method") | Some _x7494 -> _x7494
  method set_method _x7494 = _method <- Some _x7494
  method unset_method = _method <- None
  method reset_method = _method <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "changeVerificationMethod_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _method with None -> () | Some _v -> 
      oprot#writeFieldBegin("method",Protocol.T_I32,3);
      oprot#writeI32(VerificationMethod.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_changeVerificationMethod_args (iprot : Protocol.t) =
  let _str7497 = new changeVerificationMethod_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7498,_id7499) = iprot#readFieldBegin in
        if _t7498 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7499 with 
          | 2 -> (if _t7498 = Protocol.T_STRING then
              _str7497#set_sessionId iprot#readString
            else
              iprot#skip _t7498)
          | 3 -> (if _t7498 = Protocol.T_I32 then
              _str7497#set_method (VerificationMethod.of_i iprot#readI32)
            else
              iprot#skip _t7498)
          | _ -> iprot#skip _t7498);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7497

class changeVerificationMethod_result =
object (self)
  val mutable _success : verificationSessionData option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "changeVerificationMethod_result.success") | Some _x7500 -> _x7500
  method set_success _x7500 = _success <- Some _x7500
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "changeVerificationMethod_result.e") | Some _x7501 -> _x7501
  method set_e _x7501 = _e <- Some _x7501
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "changeVerificationMethod_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_changeVerificationMethod_result (iprot : Protocol.t) =
  let _str7504 = new changeVerificationMethod_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7505,_id7506) = iprot#readFieldBegin in
        if _t7505 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7506 with 
          | 0 -> (if _t7505 = Protocol.T_STRUCT then
              _str7504#set_success (read_verificationSessionData iprot)
            else
              iprot#skip _t7505)
          | 1 -> (if _t7505 = Protocol.T_STRUCT then
              _str7504#set_e (read_talkException iprot)
            else
              iprot#skip _t7505)
          | _ -> iprot#skip _t7505);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7504

class clearIdentityCredential_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "clearIdentityCredential_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_clearIdentityCredential_args (iprot : Protocol.t) =
  let _str7509 = new clearIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7510,_id7511) = iprot#readFieldBegin in
        if _t7510 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7511 with 
          | _ -> iprot#skip _t7510);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7509

class clearIdentityCredential_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "clearIdentityCredential_result.e") | Some _x7512 -> _x7512
  method set_e _x7512 = _e <- Some _x7512
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "clearIdentityCredential_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_clearIdentityCredential_result (iprot : Protocol.t) =
  let _str7515 = new clearIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7516,_id7517) = iprot#readFieldBegin in
        if _t7516 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7517 with 
          | 1 -> (if _t7516 = Protocol.T_STRUCT then
              _str7515#set_e (read_talkException iprot)
            else
              iprot#skip _t7516)
          | _ -> iprot#skip _t7516);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7515

class clearMessageBox_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "clearMessageBox_args.channelId") | Some _x7518 -> _x7518
  method set_channelId _x7518 = _channelId <- Some _x7518
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "clearMessageBox_args.messageBoxId") | Some _x7519 -> _x7519
  method set_messageBoxId _x7519 = _messageBoxId <- Some _x7519
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "clearMessageBox_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_clearMessageBox_args (iprot : Protocol.t) =
  let _str7522 = new clearMessageBox_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7523,_id7524) = iprot#readFieldBegin in
        if _t7523 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7524 with 
          | 2 -> (if _t7523 = Protocol.T_STRING then
              _str7522#set_channelId iprot#readString
            else
              iprot#skip _t7523)
          | 3 -> (if _t7523 = Protocol.T_STRING then
              _str7522#set_messageBoxId iprot#readString
            else
              iprot#skip _t7523)
          | _ -> iprot#skip _t7523);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7522

class clearMessageBox_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "clearMessageBox_result.e") | Some _x7525 -> _x7525
  method set_e _x7525 = _e <- Some _x7525
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "clearMessageBox_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_clearMessageBox_result (iprot : Protocol.t) =
  let _str7528 = new clearMessageBox_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7529,_id7530) = iprot#readFieldBegin in
        if _t7529 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7530 with 
          | 1 -> (if _t7529 = Protocol.T_STRUCT then
              _str7528#set_e (read_talkException iprot)
            else
              iprot#skip _t7529)
          | _ -> iprot#skip _t7529);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7528

class closeProximityMatch_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "closeProximityMatch_args.sessionId") | Some _x7531 -> _x7531
  method set_sessionId _x7531 = _sessionId <- Some _x7531
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "closeProximityMatch_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_closeProximityMatch_args (iprot : Protocol.t) =
  let _str7534 = new closeProximityMatch_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7535,_id7536) = iprot#readFieldBegin in
        if _t7535 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7536 with 
          | 2 -> (if _t7535 = Protocol.T_STRING then
              _str7534#set_sessionId iprot#readString
            else
              iprot#skip _t7535)
          | _ -> iprot#skip _t7535);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7534

class closeProximityMatch_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "closeProximityMatch_result.e") | Some _x7537 -> _x7537
  method set_e _x7537 = _e <- Some _x7537
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "closeProximityMatch_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_closeProximityMatch_result (iprot : Protocol.t) =
  let _str7540 = new closeProximityMatch_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7541,_id7542) = iprot#readFieldBegin in
        if _t7541 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7542 with 
          | 1 -> (if _t7541 = Protocol.T_STRUCT then
              _str7540#set_e (read_talkException iprot)
            else
              iprot#skip _t7541)
          | _ -> iprot#skip _t7541);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7540

class commitSendMessage_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "commitSendMessage_args.seq") | Some _x7543 -> _x7543
  method set_seq _x7543 = _seq <- Some _x7543
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "commitSendMessage_args.messageId") | Some _x7544 -> _x7544
  method set_messageId _x7544 = _messageId <- Some _x7544
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  val mutable _receiverMids : string list option = None
  method get_receiverMids = _receiverMids
  method grab_receiverMids = match _receiverMids with None->raise (Field_empty "commitSendMessage_args.receiverMids") | Some _x7545 -> _x7545
  method set_receiverMids _x7545 = _receiverMids <- Some _x7545
  method unset_receiverMids = _receiverMids <- None
  method reset_receiverMids = _receiverMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitSendMessage_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _receiverMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("receiverMids",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7548 ->         oprot#writeString(_iter7548);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitSendMessage_args (iprot : Protocol.t) =
  let _str7549 = new commitSendMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7550,_id7551) = iprot#readFieldBegin in
        if _t7550 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7551 with 
          | 1 -> (if _t7550 = Protocol.T_I32 then
              _str7549#set_seq iprot#readI32
            else
              iprot#skip _t7550)
          | 2 -> (if _t7550 = Protocol.T_STRING then
              _str7549#set_messageId iprot#readString
            else
              iprot#skip _t7550)
          | 3 -> (if _t7550 = Protocol.T_LIST then
              _str7549#set_receiverMids 
                (let (_etype7555,_size7552) = iprot#readListBegin in
                  let _con7556 = (Array.to_list (Array.init _size7552 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7556)
            else
              iprot#skip _t7550)
          | _ -> iprot#skip _t7550);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7549

class commitSendMessage_result =
object (self)
  val mutable _success : (string,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "commitSendMessage_result.success") | Some _x7557 -> _x7557
  method set_success _x7557 = _success <- Some _x7557
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "commitSendMessage_result.e") | Some _x7558 -> _x7558
  method set_e _x7558 = _e <- Some _x7558
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitSendMessage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter7561 -> fun _viter7562 -> 
        oprot#writeString(_kiter7561);
        oprot#writeString(_viter7562);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitSendMessage_result (iprot : Protocol.t) =
  let _str7563 = new commitSendMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7564,_id7565) = iprot#readFieldBegin in
        if _t7564 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7565 with 
          | 0 -> (if _t7564 = Protocol.T_MAP then
              _str7563#set_success 
                (let (_ktype7567,_vtype7568,_size7566) = iprot#readMapBegin in
                let _con7570 = Hashtbl.create _size7566 in
                  for i = 1 to _size7566 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con7570 _k _v
                  done; iprot#readMapEnd; _con7570)
            else
              iprot#skip _t7564)
          | 1 -> (if _t7564 = Protocol.T_STRUCT then
              _str7563#set_e (read_talkException iprot)
            else
              iprot#skip _t7564)
          | _ -> iprot#skip _t7564);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7563

class commitSendMessages_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "commitSendMessages_args.seq") | Some _x7571 -> _x7571
  method set_seq _x7571 = _seq <- Some _x7571
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _messageIds : string list option = None
  method get_messageIds = _messageIds
  method grab_messageIds = match _messageIds with None->raise (Field_empty "commitSendMessages_args.messageIds") | Some _x7572 -> _x7572
  method set_messageIds _x7572 = _messageIds <- Some _x7572
  method unset_messageIds = _messageIds <- None
  method reset_messageIds = _messageIds <- None

  val mutable _receiverMids : string list option = None
  method get_receiverMids = _receiverMids
  method grab_receiverMids = match _receiverMids with None->raise (Field_empty "commitSendMessages_args.receiverMids") | Some _x7573 -> _x7573
  method set_receiverMids _x7573 = _receiverMids <- Some _x7573
  method unset_receiverMids = _receiverMids <- None
  method reset_receiverMids = _receiverMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitSendMessages_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _messageIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageIds",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7576 ->         oprot#writeString(_iter7576);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _receiverMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("receiverMids",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7577 ->         oprot#writeString(_iter7577);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitSendMessages_args (iprot : Protocol.t) =
  let _str7578 = new commitSendMessages_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7579,_id7580) = iprot#readFieldBegin in
        if _t7579 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7580 with 
          | 1 -> (if _t7579 = Protocol.T_I32 then
              _str7578#set_seq iprot#readI32
            else
              iprot#skip _t7579)
          | 2 -> (if _t7579 = Protocol.T_LIST then
              _str7578#set_messageIds 
                (let (_etype7584,_size7581) = iprot#readListBegin in
                  let _con7585 = (Array.to_list (Array.init _size7581 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7585)
            else
              iprot#skip _t7579)
          | 3 -> (if _t7579 = Protocol.T_LIST then
              _str7578#set_receiverMids 
                (let (_etype7589,_size7586) = iprot#readListBegin in
                  let _con7590 = (Array.to_list (Array.init _size7586 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7590)
            else
              iprot#skip _t7579)
          | _ -> iprot#skip _t7579);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7578

class commitSendMessages_result =
object (self)
  val mutable _success : (string,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "commitSendMessages_result.success") | Some _x7591 -> _x7591
  method set_success _x7591 = _success <- Some _x7591
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "commitSendMessages_result.e") | Some _x7592 -> _x7592
  method set_e _x7592 = _e <- Some _x7592
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitSendMessages_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter7595 -> fun _viter7596 -> 
        oprot#writeString(_kiter7595);
        oprot#writeString(_viter7596);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitSendMessages_result (iprot : Protocol.t) =
  let _str7597 = new commitSendMessages_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7598,_id7599) = iprot#readFieldBegin in
        if _t7598 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7599 with 
          | 0 -> (if _t7598 = Protocol.T_MAP then
              _str7597#set_success 
                (let (_ktype7601,_vtype7602,_size7600) = iprot#readMapBegin in
                let _con7604 = Hashtbl.create _size7600 in
                  for i = 1 to _size7600 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con7604 _k _v
                  done; iprot#readMapEnd; _con7604)
            else
              iprot#skip _t7598)
          | 1 -> (if _t7598 = Protocol.T_STRUCT then
              _str7597#set_e (read_talkException iprot)
            else
              iprot#skip _t7598)
          | _ -> iprot#skip _t7598);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7597

class commitUpdateProfile_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "commitUpdateProfile_args.seq") | Some _x7605 -> _x7605
  method set_seq _x7605 = _seq <- Some _x7605
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _attrs : ProfileAttribute.t list option = None
  method get_attrs = _attrs
  method grab_attrs = match _attrs with None->raise (Field_empty "commitUpdateProfile_args.attrs") | Some _x7606 -> _x7606
  method set_attrs _x7606 = _attrs <- Some _x7606
  method unset_attrs = _attrs <- None
  method reset_attrs = _attrs <- None

  val mutable _receiverMids : string list option = None
  method get_receiverMids = _receiverMids
  method grab_receiverMids = match _receiverMids with None->raise (Field_empty "commitUpdateProfile_args.receiverMids") | Some _x7607 -> _x7607
  method set_receiverMids _x7607 = _receiverMids <- Some _x7607
  method unset_receiverMids = _receiverMids <- None
  method reset_receiverMids = _receiverMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitUpdateProfile_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _attrs with None -> () | Some _v -> 
      oprot#writeFieldBegin("attrs",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_I32,List.length _v);
      List.iter (fun _iter7610 ->         oprot#writeI32(ProfileAttribute.to_i _iter7610);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _receiverMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("receiverMids",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7611 ->         oprot#writeString(_iter7611);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitUpdateProfile_args (iprot : Protocol.t) =
  let _str7612 = new commitUpdateProfile_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7613,_id7614) = iprot#readFieldBegin in
        if _t7613 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7614 with 
          | 1 -> (if _t7613 = Protocol.T_I32 then
              _str7612#set_seq iprot#readI32
            else
              iprot#skip _t7613)
          | 2 -> (if _t7613 = Protocol.T_LIST then
              _str7612#set_attrs 
                (let (_etype7618,_size7615) = iprot#readListBegin in
                  let _con7619 = (Array.to_list (Array.init _size7615 (fun _ -> (ProfileAttribute.of_i iprot#readI32)))) in
                    iprot#readListEnd; _con7619)
            else
              iprot#skip _t7613)
          | 3 -> (if _t7613 = Protocol.T_LIST then
              _str7612#set_receiverMids 
                (let (_etype7623,_size7620) = iprot#readListBegin in
                  let _con7624 = (Array.to_list (Array.init _size7620 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7624)
            else
              iprot#skip _t7613)
          | _ -> iprot#skip _t7613);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7612

class commitUpdateProfile_result =
object (self)
  val mutable _success : (string,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "commitUpdateProfile_result.success") | Some _x7625 -> _x7625
  method set_success _x7625 = _success <- Some _x7625
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "commitUpdateProfile_result.e") | Some _x7626 -> _x7626
  method set_e _x7626 = _e <- Some _x7626
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitUpdateProfile_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter7629 -> fun _viter7630 -> 
        oprot#writeString(_kiter7629);
        oprot#writeString(_viter7630);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitUpdateProfile_result (iprot : Protocol.t) =
  let _str7631 = new commitUpdateProfile_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7632,_id7633) = iprot#readFieldBegin in
        if _t7632 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7633 with 
          | 0 -> (if _t7632 = Protocol.T_MAP then
              _str7631#set_success 
                (let (_ktype7635,_vtype7636,_size7634) = iprot#readMapBegin in
                let _con7638 = Hashtbl.create _size7634 in
                  for i = 1 to _size7634 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con7638 _k _v
                  done; iprot#readMapEnd; _con7638)
            else
              iprot#skip _t7632)
          | 1 -> (if _t7632 = Protocol.T_STRUCT then
              _str7631#set_e (read_talkException iprot)
            else
              iprot#skip _t7632)
          | _ -> iprot#skip _t7632);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7631

class confirmEmail_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "confirmEmail_args.verifier") | Some _x7639 -> _x7639
  method set_verifier _x7639 = _verifier <- Some _x7639
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  val mutable _pinCode : string option = None
  method get_pinCode = _pinCode
  method grab_pinCode = match _pinCode with None->raise (Field_empty "confirmEmail_args.pinCode") | Some _x7640 -> _x7640
  method set_pinCode _x7640 = _pinCode <- Some _x7640
  method unset_pinCode = _pinCode <- None
  method reset_pinCode = _pinCode <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "confirmEmail_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _pinCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("pinCode",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_confirmEmail_args (iprot : Protocol.t) =
  let _str7643 = new confirmEmail_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7644,_id7645) = iprot#readFieldBegin in
        if _t7644 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7645 with 
          | 2 -> (if _t7644 = Protocol.T_STRING then
              _str7643#set_verifier iprot#readString
            else
              iprot#skip _t7644)
          | 3 -> (if _t7644 = Protocol.T_STRING then
              _str7643#set_pinCode iprot#readString
            else
              iprot#skip _t7644)
          | _ -> iprot#skip _t7644);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7643

class confirmEmail_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "confirmEmail_result.e") | Some _x7646 -> _x7646
  method set_e _x7646 = _e <- Some _x7646
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "confirmEmail_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_confirmEmail_result (iprot : Protocol.t) =
  let _str7649 = new confirmEmail_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7650,_id7651) = iprot#readFieldBegin in
        if _t7650 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7651 with 
          | 1 -> (if _t7650 = Protocol.T_STRUCT then
              _str7649#set_e (read_talkException iprot)
            else
              iprot#skip _t7650)
          | _ -> iprot#skip _t7650);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7649

class createGroup_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "createGroup_args.seq") | Some _x7652 -> _x7652
  method set_seq _x7652 = _seq <- Some _x7652
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _name : string option = None
  method get_name = _name
  method grab_name = match _name with None->raise (Field_empty "createGroup_args.name") | Some _x7653 -> _x7653
  method set_name _x7653 = _name <- Some _x7653
  method unset_name = _name <- None
  method reset_name = _name <- None

  val mutable _contactIds : string list option = None
  method get_contactIds = _contactIds
  method grab_contactIds = match _contactIds with None->raise (Field_empty "createGroup_args.contactIds") | Some _x7654 -> _x7654
  method set_contactIds _x7654 = _contactIds <- Some _x7654
  method unset_contactIds = _contactIds <- None
  method reset_contactIds = _contactIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createGroup_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _name with None -> () | Some _v -> 
      oprot#writeFieldBegin("name",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _contactIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactIds",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7657 ->         oprot#writeString(_iter7657);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createGroup_args (iprot : Protocol.t) =
  let _str7658 = new createGroup_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7659,_id7660) = iprot#readFieldBegin in
        if _t7659 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7660 with 
          | 1 -> (if _t7659 = Protocol.T_I32 then
              _str7658#set_seq iprot#readI32
            else
              iprot#skip _t7659)
          | 2 -> (if _t7659 = Protocol.T_STRING then
              _str7658#set_name iprot#readString
            else
              iprot#skip _t7659)
          | 3 -> (if _t7659 = Protocol.T_LIST then
              _str7658#set_contactIds 
                (let (_etype7664,_size7661) = iprot#readListBegin in
                  let _con7665 = (Array.to_list (Array.init _size7661 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7665)
            else
              iprot#skip _t7659)
          | _ -> iprot#skip _t7659);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7658

class createGroup_result =
object (self)
  val mutable _success : group option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createGroup_result.success") | Some _x7666 -> _x7666
  method set_success _x7666 = _success <- Some _x7666
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createGroup_result.e") | Some _x7667 -> _x7667
  method set_e _x7667 = _e <- Some _x7667
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createGroup_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createGroup_result (iprot : Protocol.t) =
  let _str7670 = new createGroup_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7671,_id7672) = iprot#readFieldBegin in
        if _t7671 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7672 with 
          | 0 -> (if _t7671 = Protocol.T_STRUCT then
              _str7670#set_success (read_group iprot)
            else
              iprot#skip _t7671)
          | 1 -> (if _t7671 = Protocol.T_STRUCT then
              _str7670#set_e (read_talkException iprot)
            else
              iprot#skip _t7671)
          | _ -> iprot#skip _t7671);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7670

class createQrcodeBase64Image_args =
object (self)
  val mutable _url : string option = None
  method get_url = _url
  method grab_url = match _url with None->raise (Field_empty "createQrcodeBase64Image_args.url") | Some _x7673 -> _x7673
  method set_url _x7673 = _url <- Some _x7673
  method unset_url = _url <- None
  method reset_url = _url <- None

  val mutable _characterSet : string option = None
  method get_characterSet = _characterSet
  method grab_characterSet = match _characterSet with None->raise (Field_empty "createQrcodeBase64Image_args.characterSet") | Some _x7674 -> _x7674
  method set_characterSet _x7674 = _characterSet <- Some _x7674
  method unset_characterSet = _characterSet <- None
  method reset_characterSet = _characterSet <- None

  val mutable _imageSize : Int32.t option = None
  method get_imageSize = _imageSize
  method grab_imageSize = match _imageSize with None->raise (Field_empty "createQrcodeBase64Image_args.imageSize") | Some _x7675 -> _x7675
  method set_imageSize _x7675 = _imageSize <- Some _x7675
  method unset_imageSize = _imageSize <- None
  method reset_imageSize = _imageSize <- None

  val mutable _x : Int32.t option = None
  method get_x = _x
  method grab_x = match _x with None->raise (Field_empty "createQrcodeBase64Image_args.x") | Some _x7676 -> _x7676
  method set_x _x7676 = _x <- Some _x7676
  method unset_x = _x <- None
  method reset_x = _x <- None

  val mutable _y : Int32.t option = None
  method get_y = _y
  method grab_y = match _y with None->raise (Field_empty "createQrcodeBase64Image_args.y") | Some _x7677 -> _x7677
  method set_y _x7677 = _y <- Some _x7677
  method unset_y = _y <- None
  method reset_y = _y <- None

  val mutable _width : Int32.t option = None
  method get_width = _width
  method grab_width = match _width with None->raise (Field_empty "createQrcodeBase64Image_args.width") | Some _x7678 -> _x7678
  method set_width _x7678 = _width <- Some _x7678
  method unset_width = _width <- None
  method reset_width = _width <- None

  val mutable _height : Int32.t option = None
  method get_height = _height
  method grab_height = match _height with None->raise (Field_empty "createQrcodeBase64Image_args.height") | Some _x7679 -> _x7679
  method set_height _x7679 = _height <- Some _x7679
  method unset_height = _height <- None
  method reset_height = _height <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createQrcodeBase64Image_args";
    (match _url with None -> () | Some _v -> 
      oprot#writeFieldBegin("url",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _characterSet with None -> () | Some _v -> 
      oprot#writeFieldBegin("characterSet",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _imageSize with None -> () | Some _v -> 
      oprot#writeFieldBegin("imageSize",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _x with None -> () | Some _v -> 
      oprot#writeFieldBegin("x",Protocol.T_I32,5);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _y with None -> () | Some _v -> 
      oprot#writeFieldBegin("y",Protocol.T_I32,6);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _width with None -> () | Some _v -> 
      oprot#writeFieldBegin("width",Protocol.T_I32,7);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _height with None -> () | Some _v -> 
      oprot#writeFieldBegin("height",Protocol.T_I32,8);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createQrcodeBase64Image_args (iprot : Protocol.t) =
  let _str7682 = new createQrcodeBase64Image_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7683,_id7684) = iprot#readFieldBegin in
        if _t7683 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7684 with 
          | 2 -> (if _t7683 = Protocol.T_STRING then
              _str7682#set_url iprot#readString
            else
              iprot#skip _t7683)
          | 3 -> (if _t7683 = Protocol.T_STRING then
              _str7682#set_characterSet iprot#readString
            else
              iprot#skip _t7683)
          | 4 -> (if _t7683 = Protocol.T_I32 then
              _str7682#set_imageSize iprot#readI32
            else
              iprot#skip _t7683)
          | 5 -> (if _t7683 = Protocol.T_I32 then
              _str7682#set_x iprot#readI32
            else
              iprot#skip _t7683)
          | 6 -> (if _t7683 = Protocol.T_I32 then
              _str7682#set_y iprot#readI32
            else
              iprot#skip _t7683)
          | 7 -> (if _t7683 = Protocol.T_I32 then
              _str7682#set_width iprot#readI32
            else
              iprot#skip _t7683)
          | 8 -> (if _t7683 = Protocol.T_I32 then
              _str7682#set_height iprot#readI32
            else
              iprot#skip _t7683)
          | _ -> iprot#skip _t7683);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7682

class createQrcodeBase64Image_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createQrcodeBase64Image_result.success") | Some _x7685 -> _x7685
  method set_success _x7685 = _success <- Some _x7685
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createQrcodeBase64Image_result.e") | Some _x7686 -> _x7686
  method set_e _x7686 = _e <- Some _x7686
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createQrcodeBase64Image_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createQrcodeBase64Image_result (iprot : Protocol.t) =
  let _str7689 = new createQrcodeBase64Image_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7690,_id7691) = iprot#readFieldBegin in
        if _t7690 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7691 with 
          | 0 -> (if _t7690 = Protocol.T_STRING then
              _str7689#set_success iprot#readString
            else
              iprot#skip _t7690)
          | 1 -> (if _t7690 = Protocol.T_STRUCT then
              _str7689#set_e (read_talkException iprot)
            else
              iprot#skip _t7690)
          | _ -> iprot#skip _t7690);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7689

class createRoom_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "createRoom_args.reqSeq") | Some _x7692 -> _x7692
  method set_reqSeq _x7692 = _reqSeq <- Some _x7692
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _contactIds : string list option = None
  method get_contactIds = _contactIds
  method grab_contactIds = match _contactIds with None->raise (Field_empty "createRoom_args.contactIds") | Some _x7693 -> _x7693
  method set_contactIds _x7693 = _contactIds <- Some _x7693
  method unset_contactIds = _contactIds <- None
  method reset_contactIds = _contactIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createRoom_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _contactIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactIds",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7696 ->         oprot#writeString(_iter7696);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createRoom_args (iprot : Protocol.t) =
  let _str7697 = new createRoom_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7698,_id7699) = iprot#readFieldBegin in
        if _t7698 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7699 with 
          | 1 -> (if _t7698 = Protocol.T_I32 then
              _str7697#set_reqSeq iprot#readI32
            else
              iprot#skip _t7698)
          | 2 -> (if _t7698 = Protocol.T_LIST then
              _str7697#set_contactIds 
                (let (_etype7703,_size7700) = iprot#readListBegin in
                  let _con7704 = (Array.to_list (Array.init _size7700 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7704)
            else
              iprot#skip _t7698)
          | _ -> iprot#skip _t7698);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7697

class createRoom_result =
object (self)
  val mutable _success : room option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createRoom_result.success") | Some _x7705 -> _x7705
  method set_success _x7705 = _success <- Some _x7705
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createRoom_result.e") | Some _x7706 -> _x7706
  method set_e _x7706 = _e <- Some _x7706
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createRoom_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createRoom_result (iprot : Protocol.t) =
  let _str7709 = new createRoom_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7710,_id7711) = iprot#readFieldBegin in
        if _t7710 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7711 with 
          | 0 -> (if _t7710 = Protocol.T_STRUCT then
              _str7709#set_success (read_room iprot)
            else
              iprot#skip _t7710)
          | 1 -> (if _t7710 = Protocol.T_STRUCT then
              _str7709#set_e (read_talkException iprot)
            else
              iprot#skip _t7710)
          | _ -> iprot#skip _t7710);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7709

class createSession_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createSession_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createSession_args (iprot : Protocol.t) =
  let _str7714 = new createSession_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7715,_id7716) = iprot#readFieldBegin in
        if _t7715 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7716 with 
          | _ -> iprot#skip _t7715);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7714

class createSession_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createSession_result.success") | Some _x7717 -> _x7717
  method set_success _x7717 = _success <- Some _x7717
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createSession_result.e") | Some _x7718 -> _x7718
  method set_e _x7718 = _e <- Some _x7718
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createSession_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createSession_result (iprot : Protocol.t) =
  let _str7721 = new createSession_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7722,_id7723) = iprot#readFieldBegin in
        if _t7722 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7723 with 
          | 0 -> (if _t7722 = Protocol.T_STRING then
              _str7721#set_success iprot#readString
            else
              iprot#skip _t7722)
          | 1 -> (if _t7722 = Protocol.T_STRUCT then
              _str7721#set_e (read_talkException iprot)
            else
              iprot#skip _t7722)
          | _ -> iprot#skip _t7722);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7721

class fetchAnnouncements_args =
object (self)
  val mutable _lastFetchedIndex : Int32.t option = None
  method get_lastFetchedIndex = _lastFetchedIndex
  method grab_lastFetchedIndex = match _lastFetchedIndex with None->raise (Field_empty "fetchAnnouncements_args.lastFetchedIndex") | Some _x7724 -> _x7724
  method set_lastFetchedIndex _x7724 = _lastFetchedIndex <- Some _x7724
  method unset_lastFetchedIndex = _lastFetchedIndex <- None
  method reset_lastFetchedIndex = _lastFetchedIndex <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchAnnouncements_args";
    (match _lastFetchedIndex with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastFetchedIndex",Protocol.T_I32,2);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchAnnouncements_args (iprot : Protocol.t) =
  let _str7727 = new fetchAnnouncements_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7728,_id7729) = iprot#readFieldBegin in
        if _t7728 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7729 with 
          | 2 -> (if _t7728 = Protocol.T_I32 then
              _str7727#set_lastFetchedIndex iprot#readI32
            else
              iprot#skip _t7728)
          | _ -> iprot#skip _t7728);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7727

class fetchAnnouncements_result =
object (self)
  val mutable _success : announcement list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "fetchAnnouncements_result.success") | Some _x7730 -> _x7730
  method set_success _x7730 = _success <- Some _x7730
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "fetchAnnouncements_result.e") | Some _x7731 -> _x7731
  method set_e _x7731 = _e <- Some _x7731
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchAnnouncements_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter7734 ->         _iter7734#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchAnnouncements_result (iprot : Protocol.t) =
  let _str7735 = new fetchAnnouncements_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7736,_id7737) = iprot#readFieldBegin in
        if _t7736 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7737 with 
          | 0 -> (if _t7736 = Protocol.T_LIST then
              _str7735#set_success 
                (let (_etype7741,_size7738) = iprot#readListBegin in
                  let _con7742 = (Array.to_list (Array.init _size7738 (fun _ -> (read_announcement iprot)))) in
                    iprot#readListEnd; _con7742)
            else
              iprot#skip _t7736)
          | 1 -> (if _t7736 = Protocol.T_STRUCT then
              _str7735#set_e (read_talkException iprot)
            else
              iprot#skip _t7736)
          | _ -> iprot#skip _t7736);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7735

class fetchMessages_args =
object (self)
  val mutable _localTs : Int64.t option = None
  method get_localTs = _localTs
  method grab_localTs = match _localTs with None->raise (Field_empty "fetchMessages_args.localTs") | Some _x7743 -> _x7743
  method set_localTs _x7743 = _localTs <- Some _x7743
  method unset_localTs = _localTs <- None
  method reset_localTs = _localTs <- None

  val mutable _count : Int32.t option = None
  method get_count = _count
  method grab_count = match _count with None->raise (Field_empty "fetchMessages_args.count") | Some _x7744 -> _x7744
  method set_count _x7744 = _count <- Some _x7744
  method unset_count = _count <- None
  method reset_count = _count <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchMessages_args";
    (match _localTs with None -> () | Some _v -> 
      oprot#writeFieldBegin("localTs",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _count with None -> () | Some _v -> 
      oprot#writeFieldBegin("count",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchMessages_args (iprot : Protocol.t) =
  let _str7747 = new fetchMessages_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7748,_id7749) = iprot#readFieldBegin in
        if _t7748 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7749 with 
          | 2 -> (if _t7748 = Protocol.T_I64 then
              _str7747#set_localTs iprot#readI64
            else
              iprot#skip _t7748)
          | 3 -> (if _t7748 = Protocol.T_I32 then
              _str7747#set_count iprot#readI32
            else
              iprot#skip _t7748)
          | _ -> iprot#skip _t7748);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7747

class fetchMessages_result =
object (self)
  val mutable _success : message list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "fetchMessages_result.success") | Some _x7750 -> _x7750
  method set_success _x7750 = _success <- Some _x7750
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "fetchMessages_result.e") | Some _x7751 -> _x7751
  method set_e _x7751 = _e <- Some _x7751
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchMessages_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter7754 ->         _iter7754#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchMessages_result (iprot : Protocol.t) =
  let _str7755 = new fetchMessages_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7756,_id7757) = iprot#readFieldBegin in
        if _t7756 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7757 with 
          | 0 -> (if _t7756 = Protocol.T_LIST then
              _str7755#set_success 
                (let (_etype7761,_size7758) = iprot#readListBegin in
                  let _con7762 = (Array.to_list (Array.init _size7758 (fun _ -> (read_message iprot)))) in
                    iprot#readListEnd; _con7762)
            else
              iprot#skip _t7756)
          | 1 -> (if _t7756 = Protocol.T_STRUCT then
              _str7755#set_e (read_talkException iprot)
            else
              iprot#skip _t7756)
          | _ -> iprot#skip _t7756);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7755

class fetchOperations_args =
object (self)
  val mutable _localRev : Int64.t option = None
  method get_localRev = _localRev
  method grab_localRev = match _localRev with None->raise (Field_empty "fetchOperations_args.localRev") | Some _x7763 -> _x7763
  method set_localRev _x7763 = _localRev <- Some _x7763
  method unset_localRev = _localRev <- None
  method reset_localRev = _localRev <- None

  val mutable _count : Int32.t option = None
  method get_count = _count
  method grab_count = match _count with None->raise (Field_empty "fetchOperations_args.count") | Some _x7764 -> _x7764
  method set_count _x7764 = _count <- Some _x7764
  method unset_count = _count <- None
  method reset_count = _count <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchOperations_args";
    (match _localRev with None -> () | Some _v -> 
      oprot#writeFieldBegin("localRev",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _count with None -> () | Some _v -> 
      oprot#writeFieldBegin("count",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchOperations_args (iprot : Protocol.t) =
  let _str7767 = new fetchOperations_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7768,_id7769) = iprot#readFieldBegin in
        if _t7768 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7769 with 
          | 2 -> (if _t7768 = Protocol.T_I64 then
              _str7767#set_localRev iprot#readI64
            else
              iprot#skip _t7768)
          | 3 -> (if _t7768 = Protocol.T_I32 then
              _str7767#set_count iprot#readI32
            else
              iprot#skip _t7768)
          | _ -> iprot#skip _t7768);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7767

class fetchOperations_result =
object (self)
  val mutable _success : operation list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "fetchOperations_result.success") | Some _x7770 -> _x7770
  method set_success _x7770 = _success <- Some _x7770
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : shouldSyncException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "fetchOperations_result.e") | Some _x7771 -> _x7771
  method set_e _x7771 = _e <- Some _x7771
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchOperations_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter7774 ->         _iter7774#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchOperations_result (iprot : Protocol.t) =
  let _str7775 = new fetchOperations_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7776,_id7777) = iprot#readFieldBegin in
        if _t7776 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7777 with 
          | 0 -> (if _t7776 = Protocol.T_LIST then
              _str7775#set_success 
                (let (_etype7781,_size7778) = iprot#readListBegin in
                  let _con7782 = (Array.to_list (Array.init _size7778 (fun _ -> (read_operation iprot)))) in
                    iprot#readListEnd; _con7782)
            else
              iprot#skip _t7776)
          | 1 -> (if _t7776 = Protocol.T_STRUCT then
              _str7775#set_e (read_shouldSyncException iprot)
            else
              iprot#skip _t7776)
          | _ -> iprot#skip _t7776);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7775

class fetchOps_args =
object (self)
  val mutable _localRev : Int64.t option = None
  method get_localRev = _localRev
  method grab_localRev = match _localRev with None->raise (Field_empty "fetchOps_args.localRev") | Some _x7783 -> _x7783
  method set_localRev _x7783 = _localRev <- Some _x7783
  method unset_localRev = _localRev <- None
  method reset_localRev = _localRev <- None

  val mutable _count : Int32.t option = None
  method get_count = _count
  method grab_count = match _count with None->raise (Field_empty "fetchOps_args.count") | Some _x7784 -> _x7784
  method set_count _x7784 = _count <- Some _x7784
  method unset_count = _count <- None
  method reset_count = _count <- None

  val mutable _globalRev : Int64.t option = None
  method get_globalRev = _globalRev
  method grab_globalRev = match _globalRev with None->raise (Field_empty "fetchOps_args.globalRev") | Some _x7785 -> _x7785
  method set_globalRev _x7785 = _globalRev <- Some _x7785
  method unset_globalRev = _globalRev <- None
  method reset_globalRev = _globalRev <- None

  val mutable _individualRev : Int64.t option = None
  method get_individualRev = _individualRev
  method grab_individualRev = match _individualRev with None->raise (Field_empty "fetchOps_args.individualRev") | Some _x7786 -> _x7786
  method set_individualRev _x7786 = _individualRev <- Some _x7786
  method unset_individualRev = _individualRev <- None
  method reset_individualRev = _individualRev <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchOps_args";
    (match _localRev with None -> () | Some _v -> 
      oprot#writeFieldBegin("localRev",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _count with None -> () | Some _v -> 
      oprot#writeFieldBegin("count",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _globalRev with None -> () | Some _v -> 
      oprot#writeFieldBegin("globalRev",Protocol.T_I64,4);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _individualRev with None -> () | Some _v -> 
      oprot#writeFieldBegin("individualRev",Protocol.T_I64,5);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchOps_args (iprot : Protocol.t) =
  let _str7789 = new fetchOps_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7790,_id7791) = iprot#readFieldBegin in
        if _t7790 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7791 with 
          | 2 -> (if _t7790 = Protocol.T_I64 then
              _str7789#set_localRev iprot#readI64
            else
              iprot#skip _t7790)
          | 3 -> (if _t7790 = Protocol.T_I32 then
              _str7789#set_count iprot#readI32
            else
              iprot#skip _t7790)
          | 4 -> (if _t7790 = Protocol.T_I64 then
              _str7789#set_globalRev iprot#readI64
            else
              iprot#skip _t7790)
          | 5 -> (if _t7790 = Protocol.T_I64 then
              _str7789#set_individualRev iprot#readI64
            else
              iprot#skip _t7790)
          | _ -> iprot#skip _t7790);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7789

class fetchOps_result =
object (self)
  val mutable _success : operation list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "fetchOps_result.success") | Some _x7792 -> _x7792
  method set_success _x7792 = _success <- Some _x7792
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : shouldSyncException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "fetchOps_result.e") | Some _x7793 -> _x7793
  method set_e _x7793 = _e <- Some _x7793
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchOps_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter7796 ->         _iter7796#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchOps_result (iprot : Protocol.t) =
  let _str7797 = new fetchOps_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7798,_id7799) = iprot#readFieldBegin in
        if _t7798 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7799 with 
          | 0 -> (if _t7798 = Protocol.T_LIST then
              _str7797#set_success 
                (let (_etype7803,_size7800) = iprot#readListBegin in
                  let _con7804 = (Array.to_list (Array.init _size7800 (fun _ -> (read_operation iprot)))) in
                    iprot#readListEnd; _con7804)
            else
              iprot#skip _t7798)
          | 1 -> (if _t7798 = Protocol.T_STRUCT then
              _str7797#set_e (read_shouldSyncException iprot)
            else
              iprot#skip _t7798)
          | _ -> iprot#skip _t7798);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7797

class findAndAddContactsByEmail_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "findAndAddContactsByEmail_args.reqSeq") | Some _x7805 -> _x7805
  method set_reqSeq _x7805 = _reqSeq <- Some _x7805
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _emails : (string,bool) Hashtbl.t option = None
  method get_emails = _emails
  method grab_emails = match _emails with None->raise (Field_empty "findAndAddContactsByEmail_args.emails") | Some _x7806 -> _x7806
  method set_emails _x7806 = _emails <- Some _x7806
  method unset_emails = _emails <- None
  method reset_emails = _emails <- None

  method copy =
      let _new = Oo.copy self in
      if _emails <> None then
        _new#set_emails (Hashtbl.copy self#grab_emails);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactsByEmail_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _emails with None -> () | Some _v -> 
      oprot#writeFieldBegin("emails",Protocol.T_SET,2);
      oprot#writeSetBegin(Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _iter7809 -> fun _ ->         oprot#writeString(_iter7809);
      ) _v;
      oprot#writeSetEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactsByEmail_args (iprot : Protocol.t) =
  let _str7810 = new findAndAddContactsByEmail_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7811,_id7812) = iprot#readFieldBegin in
        if _t7811 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7812 with 
          | 1 -> (if _t7811 = Protocol.T_I32 then
              _str7810#set_reqSeq iprot#readI32
            else
              iprot#skip _t7811)
          | 2 -> (if _t7811 = Protocol.T_SET then
              _str7810#set_emails 
                (let (_etype7816,_size7813) = iprot#readSetBegin in
                let _con7817 = Hashtbl.create _size7813 in
                  for i = 1 to _size7813 do
                    Hashtbl.add _con7817 iprot#readString true
                  done; iprot#readSetEnd; _con7817)
            else
              iprot#skip _t7811)
          | _ -> iprot#skip _t7811);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7810

class findAndAddContactsByEmail_result =
object (self)
  val mutable _success : (string,contact) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findAndAddContactsByEmail_result.success") | Some _x7818 -> _x7818
  method set_success _x7818 = _success <- Some _x7818
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findAndAddContactsByEmail_result.e") | Some _x7819 -> _x7819
  method set_e _x7819 = _e <- Some _x7819
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k v#copy) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactsByEmail_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter7822 -> fun _viter7823 -> 
        oprot#writeString(_kiter7822);
        _viter7823#write(oprot);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactsByEmail_result (iprot : Protocol.t) =
  let _str7824 = new findAndAddContactsByEmail_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7825,_id7826) = iprot#readFieldBegin in
        if _t7825 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7826 with 
          | 0 -> (if _t7825 = Protocol.T_MAP then
              _str7824#set_success 
                (let (_ktype7828,_vtype7829,_size7827) = iprot#readMapBegin in
                let _con7831 = Hashtbl.create _size7827 in
                  for i = 1 to _size7827 do
                    let _k = iprot#readString in
                    let _v = (read_contact iprot) in
                      Hashtbl.add _con7831 _k _v
                  done; iprot#readMapEnd; _con7831)
            else
              iprot#skip _t7825)
          | 1 -> (if _t7825 = Protocol.T_STRUCT then
              _str7824#set_e (read_talkException iprot)
            else
              iprot#skip _t7825)
          | _ -> iprot#skip _t7825);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7824

class findAndAddContactsByMid_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "findAndAddContactsByMid_args.reqSeq") | Some _x7832 -> _x7832
  method set_reqSeq _x7832 = _reqSeq <- Some _x7832
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "findAndAddContactsByMid_args.mid") | Some _x7833 -> _x7833
  method set_mid _x7833 = _mid <- Some _x7833
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  val mutable _type : ContactType.t option = None
  method get_type = _type
  method grab_type = match _type with None->raise (Field_empty "findAndAddContactsByMid_args.type") | Some _x7834 -> _x7834
  method set_type _x7834 = _type <- Some _x7834
  method unset_type = _type <- None
  method reset_type = _type <- None

  val mutable _reference : string option = None
  method get_reference = _reference
  method grab_reference = match _reference with None->raise (Field_empty "findAndAddContactsByMid_args.reference") | Some _x7835 -> _x7835
  method set_reference _x7835 = _reference <- Some _x7835
  method unset_reference = _reference <- None
  method reset_reference = _reference <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactsByMid_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _type with None -> () | Some _v -> 
      oprot#writeFieldBegin("type",Protocol.T_I32,3);
      oprot#writeI32(ContactType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _reference with None -> () | Some _v -> 
      oprot#writeFieldBegin("reference",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactsByMid_args (iprot : Protocol.t) =
  let _str7838 = new findAndAddContactsByMid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7839,_id7840) = iprot#readFieldBegin in
        if _t7839 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7840 with 
          | 1 -> (if _t7839 = Protocol.T_I32 then
              _str7838#set_reqSeq iprot#readI32
            else
              iprot#skip _t7839)
          | 2 -> (if _t7839 = Protocol.T_STRING then
              _str7838#set_mid iprot#readString
            else
              iprot#skip _t7839)
          | 3 -> (if _t7839 = Protocol.T_I32 then
              _str7838#set_type (ContactType.of_i iprot#readI32)
            else
              iprot#skip _t7839)
          | 4 -> (if _t7839 = Protocol.T_STRING then
              _str7838#set_reference iprot#readString
            else
              iprot#skip _t7839)
          | _ -> iprot#skip _t7839);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7838

class findAndAddContactsByMid_result =
object (self)
  val mutable _success : (string,contact) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findAndAddContactsByMid_result.success") | Some _x7841 -> _x7841
  method set_success _x7841 = _success <- Some _x7841
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findAndAddContactsByMid_result.e") | Some _x7842 -> _x7842
  method set_e _x7842 = _e <- Some _x7842
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k v#copy) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactsByMid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter7845 -> fun _viter7846 -> 
        oprot#writeString(_kiter7845);
        _viter7846#write(oprot);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactsByMid_result (iprot : Protocol.t) =
  let _str7847 = new findAndAddContactsByMid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7848,_id7849) = iprot#readFieldBegin in
        if _t7848 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7849 with 
          | 0 -> (if _t7848 = Protocol.T_MAP then
              _str7847#set_success 
                (let (_ktype7851,_vtype7852,_size7850) = iprot#readMapBegin in
                let _con7854 = Hashtbl.create _size7850 in
                  for i = 1 to _size7850 do
                    let _k = iprot#readString in
                    let _v = (read_contact iprot) in
                      Hashtbl.add _con7854 _k _v
                  done; iprot#readMapEnd; _con7854)
            else
              iprot#skip _t7848)
          | 1 -> (if _t7848 = Protocol.T_STRUCT then
              _str7847#set_e (read_talkException iprot)
            else
              iprot#skip _t7848)
          | _ -> iprot#skip _t7848);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7847

class findGroupByTicketV2_args =
object (self)
  val mutable _ticketId : string option = None
  method get_ticketId = _ticketId
  method grab_ticketId = match _ticketId with None->raise (Field_empty "findGroupByTicketV2_args.ticketId") | Some _x7855 -> _x7855
  method set_ticketId _x7855 = _ticketId <- Some _x7855
  method unset_ticketId = _ticketId <- None
  method reset_ticketId = _ticketId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findGroupByTicketV2_args";
    (match _ticketId with None -> () | Some _v -> 
      oprot#writeFieldBegin("ticketId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findGroupByTicketV2_args (iprot : Protocol.t) =
  let _str7858 = new findGroupByTicketV2_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7859,_id7860) = iprot#readFieldBegin in
        if _t7859 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7860 with 
          | 1 -> (if _t7859 = Protocol.T_STRING then
              _str7858#set_ticketId iprot#readString
            else
              iprot#skip _t7859)
          | _ -> iprot#skip _t7859);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7858

class findGroupByTicketV2_result =
object (self)
  val mutable _success : group option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findGroupByTicketV2_result.success") | Some _x7861 -> _x7861
  method set_success _x7861 = _success <- Some _x7861
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findGroupByTicketV2_result.e") | Some _x7862 -> _x7862
  method set_e _x7862 = _e <- Some _x7862
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findGroupByTicketV2_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findGroupByTicketV2_result (iprot : Protocol.t) =
  let _str7865 = new findGroupByTicketV2_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7866,_id7867) = iprot#readFieldBegin in
        if _t7866 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7867 with 
          | 0 -> (if _t7866 = Protocol.T_STRUCT then
              _str7865#set_success (read_group iprot)
            else
              iprot#skip _t7866)
          | 1 -> (if _t7866 = Protocol.T_STRUCT then
              _str7865#set_e (read_talkException iprot)
            else
              iprot#skip _t7866)
          | _ -> iprot#skip _t7866);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7865

class findAndAddContactsByPhone_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "findAndAddContactsByPhone_args.reqSeq") | Some _x7868 -> _x7868
  method set_reqSeq _x7868 = _reqSeq <- Some _x7868
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _phones : (string,bool) Hashtbl.t option = None
  method get_phones = _phones
  method grab_phones = match _phones with None->raise (Field_empty "findAndAddContactsByPhone_args.phones") | Some _x7869 -> _x7869
  method set_phones _x7869 = _phones <- Some _x7869
  method unset_phones = _phones <- None
  method reset_phones = _phones <- None

  method copy =
      let _new = Oo.copy self in
      if _phones <> None then
        _new#set_phones (Hashtbl.copy self#grab_phones);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactsByPhone_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _phones with None -> () | Some _v -> 
      oprot#writeFieldBegin("phones",Protocol.T_SET,2);
      oprot#writeSetBegin(Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _iter7872 -> fun _ ->         oprot#writeString(_iter7872);
      ) _v;
      oprot#writeSetEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactsByPhone_args (iprot : Protocol.t) =
  let _str7873 = new findAndAddContactsByPhone_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7874,_id7875) = iprot#readFieldBegin in
        if _t7874 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7875 with 
          | 1 -> (if _t7874 = Protocol.T_I32 then
              _str7873#set_reqSeq iprot#readI32
            else
              iprot#skip _t7874)
          | 2 -> (if _t7874 = Protocol.T_SET then
              _str7873#set_phones 
                (let (_etype7879,_size7876) = iprot#readSetBegin in
                let _con7880 = Hashtbl.create _size7876 in
                  for i = 1 to _size7876 do
                    Hashtbl.add _con7880 iprot#readString true
                  done; iprot#readSetEnd; _con7880)
            else
              iprot#skip _t7874)
          | _ -> iprot#skip _t7874);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7873

class findAndAddContactsByPhone_result =
object (self)
  val mutable _success : (string,contact) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findAndAddContactsByPhone_result.success") | Some _x7881 -> _x7881
  method set_success _x7881 = _success <- Some _x7881
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findAndAddContactsByPhone_result.e") | Some _x7882 -> _x7882
  method set_e _x7882 = _e <- Some _x7882
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k v#copy) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactsByPhone_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter7885 -> fun _viter7886 -> 
        oprot#writeString(_kiter7885);
        _viter7886#write(oprot);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactsByPhone_result (iprot : Protocol.t) =
  let _str7887 = new findAndAddContactsByPhone_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7888,_id7889) = iprot#readFieldBegin in
        if _t7888 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7889 with 
          | 0 -> (if _t7888 = Protocol.T_MAP then
              _str7887#set_success 
                (let (_ktype7891,_vtype7892,_size7890) = iprot#readMapBegin in
                let _con7894 = Hashtbl.create _size7890 in
                  for i = 1 to _size7890 do
                    let _k = iprot#readString in
                    let _v = (read_contact iprot) in
                      Hashtbl.add _con7894 _k _v
                  done; iprot#readMapEnd; _con7894)
            else
              iprot#skip _t7888)
          | 1 -> (if _t7888 = Protocol.T_STRUCT then
              _str7887#set_e (read_talkException iprot)
            else
              iprot#skip _t7888)
          | _ -> iprot#skip _t7888);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7887

class getFriendRequests_args =
object (self)
  val mutable _direction : FriendRequestDirection.t option = None
  method get_direction = _direction
  method grab_direction = match _direction with None->raise (Field_empty "getFriendRequests_args.direction") | Some _x7895 -> _x7895
  method set_direction _x7895 = _direction <- Some _x7895
  method unset_direction = _direction <- None
  method reset_direction = _direction <- None

  val mutable _lastSeenSeqId : Int64.t option = None
  method get_lastSeenSeqId = _lastSeenSeqId
  method grab_lastSeenSeqId = match _lastSeenSeqId with None->raise (Field_empty "getFriendRequests_args.lastSeenSeqId") | Some _x7896 -> _x7896
  method set_lastSeenSeqId _x7896 = _lastSeenSeqId <- Some _x7896
  method unset_lastSeenSeqId = _lastSeenSeqId <- None
  method reset_lastSeenSeqId = _lastSeenSeqId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFriendRequests_args";
    (match _direction with None -> () | Some _v -> 
      oprot#writeFieldBegin("direction",Protocol.T_I32,1);
      oprot#writeI32(FriendRequestDirection.to_i _v);
      oprot#writeFieldEnd
    );
    (match _lastSeenSeqId with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastSeenSeqId",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFriendRequests_args (iprot : Protocol.t) =
  let _str7899 = new getFriendRequests_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7900,_id7901) = iprot#readFieldBegin in
        if _t7900 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7901 with 
          | 1 -> (if _t7900 = Protocol.T_I32 then
              _str7899#set_direction (FriendRequestDirection.of_i iprot#readI32)
            else
              iprot#skip _t7900)
          | 2 -> (if _t7900 = Protocol.T_I64 then
              _str7899#set_lastSeenSeqId iprot#readI64
            else
              iprot#skip _t7900)
          | _ -> iprot#skip _t7900);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7899

class getFriendRequests_result =
object (self)
  val mutable _success : friendRequest list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getFriendRequests_result.success") | Some _x7902 -> _x7902
  method set_success _x7902 = _success <- Some _x7902
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getFriendRequests_result.e") | Some _x7903 -> _x7903
  method set_e _x7903 = _e <- Some _x7903
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFriendRequests_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter7906 ->         _iter7906#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFriendRequests_result (iprot : Protocol.t) =
  let _str7907 = new getFriendRequests_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7908,_id7909) = iprot#readFieldBegin in
        if _t7908 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7909 with 
          | 0 -> (if _t7908 = Protocol.T_LIST then
              _str7907#set_success 
                (let (_etype7913,_size7910) = iprot#readListBegin in
                  let _con7914 = (Array.to_list (Array.init _size7910 (fun _ -> (read_friendRequest iprot)))) in
                    iprot#readListEnd; _con7914)
            else
              iprot#skip _t7908)
          | 1 -> (if _t7908 = Protocol.T_STRUCT then
              _str7907#set_e (read_talkException iprot)
            else
              iprot#skip _t7908)
          | _ -> iprot#skip _t7908);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7907

class removeFriendRequest_args =
object (self)
  val mutable _direction : FriendRequestDirection.t option = None
  method get_direction = _direction
  method grab_direction = match _direction with None->raise (Field_empty "removeFriendRequest_args.direction") | Some _x7915 -> _x7915
  method set_direction _x7915 = _direction <- Some _x7915
  method unset_direction = _direction <- None
  method reset_direction = _direction <- None

  val mutable _midOrEMid : string option = None
  method get_midOrEMid = _midOrEMid
  method grab_midOrEMid = match _midOrEMid with None->raise (Field_empty "removeFriendRequest_args.midOrEMid") | Some _x7916 -> _x7916
  method set_midOrEMid _x7916 = _midOrEMid <- Some _x7916
  method unset_midOrEMid = _midOrEMid <- None
  method reset_midOrEMid = _midOrEMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeFriendRequest_args";
    (match _direction with None -> () | Some _v -> 
      oprot#writeFieldBegin("direction",Protocol.T_I32,1);
      oprot#writeI32(FriendRequestDirection.to_i _v);
      oprot#writeFieldEnd
    );
    (match _midOrEMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("midOrEMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeFriendRequest_args (iprot : Protocol.t) =
  let _str7919 = new removeFriendRequest_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7920,_id7921) = iprot#readFieldBegin in
        if _t7920 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7921 with 
          | 1 -> (if _t7920 = Protocol.T_I32 then
              _str7919#set_direction (FriendRequestDirection.of_i iprot#readI32)
            else
              iprot#skip _t7920)
          | 2 -> (if _t7920 = Protocol.T_STRING then
              _str7919#set_midOrEMid iprot#readString
            else
              iprot#skip _t7920)
          | _ -> iprot#skip _t7920);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7919

class removeFriendRequest_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeFriendRequest_result.e") | Some _x7922 -> _x7922
  method set_e _x7922 = _e <- Some _x7922
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeFriendRequest_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeFriendRequest_result (iprot : Protocol.t) =
  let _str7925 = new removeFriendRequest_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7926,_id7927) = iprot#readFieldBegin in
        if _t7926 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7927 with 
          | 1 -> (if _t7926 = Protocol.T_STRUCT then
              _str7925#set_e (read_talkException iprot)
            else
              iprot#skip _t7926)
          | _ -> iprot#skip _t7926);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7925

class findAndAddContactsByUserid_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "findAndAddContactsByUserid_args.reqSeq") | Some _x7928 -> _x7928
  method set_reqSeq _x7928 = _reqSeq <- Some _x7928
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _userid : string option = None
  method get_userid = _userid
  method grab_userid = match _userid with None->raise (Field_empty "findAndAddContactsByUserid_args.userid") | Some _x7929 -> _x7929
  method set_userid _x7929 = _userid <- Some _x7929
  method unset_userid = _userid <- None
  method reset_userid = _userid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactsByUserid_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _userid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactsByUserid_args (iprot : Protocol.t) =
  let _str7932 = new findAndAddContactsByUserid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7933,_id7934) = iprot#readFieldBegin in
        if _t7933 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7934 with 
          | 1 -> (if _t7933 = Protocol.T_I32 then
              _str7932#set_reqSeq iprot#readI32
            else
              iprot#skip _t7933)
          | 2 -> (if _t7933 = Protocol.T_STRING then
              _str7932#set_userid iprot#readString
            else
              iprot#skip _t7933)
          | _ -> iprot#skip _t7933);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7932

class findAndAddContactsByUserid_result =
object (self)
  val mutable _success : (string,contact) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findAndAddContactsByUserid_result.success") | Some _x7935 -> _x7935
  method set_success _x7935 = _success <- Some _x7935
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findAndAddContactsByUserid_result.e") | Some _x7936 -> _x7936
  method set_e _x7936 = _e <- Some _x7936
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k v#copy) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactsByUserid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter7939 -> fun _viter7940 -> 
        oprot#writeString(_kiter7939);
        _viter7940#write(oprot);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactsByUserid_result (iprot : Protocol.t) =
  let _str7941 = new findAndAddContactsByUserid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7942,_id7943) = iprot#readFieldBegin in
        if _t7942 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7943 with 
          | 0 -> (if _t7942 = Protocol.T_MAP then
              _str7941#set_success 
                (let (_ktype7945,_vtype7946,_size7944) = iprot#readMapBegin in
                let _con7948 = Hashtbl.create _size7944 in
                  for i = 1 to _size7944 do
                    let _k = iprot#readString in
                    let _v = (read_contact iprot) in
                      Hashtbl.add _con7948 _k _v
                  done; iprot#readMapEnd; _con7948)
            else
              iprot#skip _t7942)
          | 1 -> (if _t7942 = Protocol.T_STRUCT then
              _str7941#set_e (read_talkException iprot)
            else
              iprot#skip _t7942)
          | _ -> iprot#skip _t7942);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7941

class findContactByUserid_args =
object (self)
  val mutable _userid : string option = None
  method get_userid = _userid
  method grab_userid = match _userid with None->raise (Field_empty "findContactByUserid_args.userid") | Some _x7949 -> _x7949
  method set_userid _x7949 = _userid <- Some _x7949
  method unset_userid = _userid <- None
  method reset_userid = _userid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByUserid_args";
    (match _userid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByUserid_args (iprot : Protocol.t) =
  let _str7952 = new findContactByUserid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7953,_id7954) = iprot#readFieldBegin in
        if _t7953 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7954 with 
          | 2 -> (if _t7953 = Protocol.T_STRING then
              _str7952#set_userid iprot#readString
            else
              iprot#skip _t7953)
          | _ -> iprot#skip _t7953);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7952

class findContactByUserid_result =
object (self)
  val mutable _success : contact option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findContactByUserid_result.success") | Some _x7955 -> _x7955
  method set_success _x7955 = _success <- Some _x7955
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findContactByUserid_result.e") | Some _x7956 -> _x7956
  method set_e _x7956 = _e <- Some _x7956
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByUserid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByUserid_result (iprot : Protocol.t) =
  let _str7959 = new findContactByUserid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7960,_id7961) = iprot#readFieldBegin in
        if _t7960 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7961 with 
          | 0 -> (if _t7960 = Protocol.T_STRUCT then
              _str7959#set_success (read_contact iprot)
            else
              iprot#skip _t7960)
          | 1 -> (if _t7960 = Protocol.T_STRUCT then
              _str7959#set_e (read_talkException iprot)
            else
              iprot#skip _t7960)
          | _ -> iprot#skip _t7960);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7959

class findContactByUserTicket_args =
object (self)
  val mutable _ticketIdWithTag : string option = None
  method get_ticketIdWithTag = _ticketIdWithTag
  method grab_ticketIdWithTag = match _ticketIdWithTag with None->raise (Field_empty "findContactByUserTicket_args.ticketIdWithTag") | Some _x7962 -> _x7962
  method set_ticketIdWithTag _x7962 = _ticketIdWithTag <- Some _x7962
  method unset_ticketIdWithTag = _ticketIdWithTag <- None
  method reset_ticketIdWithTag = _ticketIdWithTag <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByUserTicket_args";
    (match _ticketIdWithTag with None -> () | Some _v -> 
      oprot#writeFieldBegin("ticketIdWithTag",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByUserTicket_args (iprot : Protocol.t) =
  let _str7965 = new findContactByUserTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7966,_id7967) = iprot#readFieldBegin in
        if _t7966 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7967 with 
          | 2 -> (if _t7966 = Protocol.T_STRING then
              _str7965#set_ticketIdWithTag iprot#readString
            else
              iprot#skip _t7966)
          | _ -> iprot#skip _t7966);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7965

class findContactByUserTicket_result =
object (self)
  val mutable _success : contact option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findContactByUserTicket_result.success") | Some _x7968 -> _x7968
  method set_success _x7968 = _success <- Some _x7968
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findContactByUserTicket_result.e") | Some _x7969 -> _x7969
  method set_e _x7969 = _e <- Some _x7969
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByUserTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByUserTicket_result (iprot : Protocol.t) =
  let _str7972 = new findContactByUserTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7973,_id7974) = iprot#readFieldBegin in
        if _t7973 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7974 with 
          | 0 -> (if _t7973 = Protocol.T_STRUCT then
              _str7972#set_success (read_contact iprot)
            else
              iprot#skip _t7973)
          | 1 -> (if _t7973 = Protocol.T_STRUCT then
              _str7972#set_e (read_talkException iprot)
            else
              iprot#skip _t7973)
          | _ -> iprot#skip _t7973);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7972

class findContactsByEmail_args =
object (self)
  val mutable _emails : (string,bool) Hashtbl.t option = None
  method get_emails = _emails
  method grab_emails = match _emails with None->raise (Field_empty "findContactsByEmail_args.emails") | Some _x7975 -> _x7975
  method set_emails _x7975 = _emails <- Some _x7975
  method unset_emails = _emails <- None
  method reset_emails = _emails <- None

  method copy =
      let _new = Oo.copy self in
      if _emails <> None then
        _new#set_emails (Hashtbl.copy self#grab_emails);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactsByEmail_args";
    (match _emails with None -> () | Some _v -> 
      oprot#writeFieldBegin("emails",Protocol.T_SET,2);
      oprot#writeSetBegin(Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _iter7978 -> fun _ ->         oprot#writeString(_iter7978);
      ) _v;
      oprot#writeSetEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactsByEmail_args (iprot : Protocol.t) =
  let _str7979 = new findContactsByEmail_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7980,_id7981) = iprot#readFieldBegin in
        if _t7980 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7981 with 
          | 2 -> (if _t7980 = Protocol.T_SET then
              _str7979#set_emails 
                (let (_etype7985,_size7982) = iprot#readSetBegin in
                let _con7986 = Hashtbl.create _size7982 in
                  for i = 1 to _size7982 do
                    Hashtbl.add _con7986 iprot#readString true
                  done; iprot#readSetEnd; _con7986)
            else
              iprot#skip _t7980)
          | _ -> iprot#skip _t7980);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7979

class findContactsByEmail_result =
object (self)
  val mutable _success : (string,contact) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findContactsByEmail_result.success") | Some _x7987 -> _x7987
  method set_success _x7987 = _success <- Some _x7987
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findContactsByEmail_result.e") | Some _x7988 -> _x7988
  method set_e _x7988 = _e <- Some _x7988
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k v#copy) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactsByEmail_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter7991 -> fun _viter7992 -> 
        oprot#writeString(_kiter7991);
        _viter7992#write(oprot);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactsByEmail_result (iprot : Protocol.t) =
  let _str7993 = new findContactsByEmail_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7994,_id7995) = iprot#readFieldBegin in
        if _t7994 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7995 with 
          | 0 -> (if _t7994 = Protocol.T_MAP then
              _str7993#set_success 
                (let (_ktype7997,_vtype7998,_size7996) = iprot#readMapBegin in
                let _con8000 = Hashtbl.create _size7996 in
                  for i = 1 to _size7996 do
                    let _k = iprot#readString in
                    let _v = (read_contact iprot) in
                      Hashtbl.add _con8000 _k _v
                  done; iprot#readMapEnd; _con8000)
            else
              iprot#skip _t7994)
          | 1 -> (if _t7994 = Protocol.T_STRUCT then
              _str7993#set_e (read_talkException iprot)
            else
              iprot#skip _t7994)
          | _ -> iprot#skip _t7994);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7993

class findContactsByPhone_args =
object (self)
  val mutable _phones : (string,bool) Hashtbl.t option = None
  method get_phones = _phones
  method grab_phones = match _phones with None->raise (Field_empty "findContactsByPhone_args.phones") | Some _x8001 -> _x8001
  method set_phones _x8001 = _phones <- Some _x8001
  method unset_phones = _phones <- None
  method reset_phones = _phones <- None

  method copy =
      let _new = Oo.copy self in
      if _phones <> None then
        _new#set_phones (Hashtbl.copy self#grab_phones);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactsByPhone_args";
    (match _phones with None -> () | Some _v -> 
      oprot#writeFieldBegin("phones",Protocol.T_SET,2);
      oprot#writeSetBegin(Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _iter8004 -> fun _ ->         oprot#writeString(_iter8004);
      ) _v;
      oprot#writeSetEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactsByPhone_args (iprot : Protocol.t) =
  let _str8005 = new findContactsByPhone_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8006,_id8007) = iprot#readFieldBegin in
        if _t8006 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8007 with 
          | 2 -> (if _t8006 = Protocol.T_SET then
              _str8005#set_phones 
                (let (_etype8011,_size8008) = iprot#readSetBegin in
                let _con8012 = Hashtbl.create _size8008 in
                  for i = 1 to _size8008 do
                    Hashtbl.add _con8012 iprot#readString true
                  done; iprot#readSetEnd; _con8012)
            else
              iprot#skip _t8006)
          | _ -> iprot#skip _t8006);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8005

class findContactsByPhone_result =
object (self)
  val mutable _success : (string,contact) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findContactsByPhone_result.success") | Some _x8013 -> _x8013
  method set_success _x8013 = _success <- Some _x8013
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findContactsByPhone_result.e") | Some _x8014 -> _x8014
  method set_e _x8014 = _e <- Some _x8014
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k v#copy) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactsByPhone_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter8017 -> fun _viter8018 -> 
        oprot#writeString(_kiter8017);
        _viter8018#write(oprot);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactsByPhone_result (iprot : Protocol.t) =
  let _str8019 = new findContactsByPhone_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8020,_id8021) = iprot#readFieldBegin in
        if _t8020 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8021 with 
          | 0 -> (if _t8020 = Protocol.T_MAP then
              _str8019#set_success 
                (let (_ktype8023,_vtype8024,_size8022) = iprot#readMapBegin in
                let _con8026 = Hashtbl.create _size8022 in
                  for i = 1 to _size8022 do
                    let _k = iprot#readString in
                    let _v = (read_contact iprot) in
                      Hashtbl.add _con8026 _k _v
                  done; iprot#readMapEnd; _con8026)
            else
              iprot#skip _t8020)
          | 1 -> (if _t8020 = Protocol.T_STRUCT then
              _str8019#set_e (read_talkException iprot)
            else
              iprot#skip _t8020)
          | _ -> iprot#skip _t8020);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8019

class findSnsIdUserStatus_args =
object (self)
  val mutable _snsIdType : SnsIdType.t option = None
  method get_snsIdType = _snsIdType
  method grab_snsIdType = match _snsIdType with None->raise (Field_empty "findSnsIdUserStatus_args.snsIdType") | Some _x8027 -> _x8027
  method set_snsIdType _x8027 = _snsIdType <- Some _x8027
  method unset_snsIdType = _snsIdType <- None
  method reset_snsIdType = _snsIdType <- None

  val mutable _snsAccessToken : string option = None
  method get_snsAccessToken = _snsAccessToken
  method grab_snsAccessToken = match _snsAccessToken with None->raise (Field_empty "findSnsIdUserStatus_args.snsAccessToken") | Some _x8028 -> _x8028
  method set_snsAccessToken _x8028 = _snsAccessToken <- Some _x8028
  method unset_snsAccessToken = _snsAccessToken <- None
  method reset_snsAccessToken = _snsAccessToken <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "findSnsIdUserStatus_args.udidHash") | Some _x8029 -> _x8029
  method set_udidHash _x8029 = _udidHash <- Some _x8029
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findSnsIdUserStatus_args";
    (match _snsIdType with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsIdType",Protocol.T_I32,2);
      oprot#writeI32(SnsIdType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _snsAccessToken with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsAccessToken",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findSnsIdUserStatus_args (iprot : Protocol.t) =
  let _str8032 = new findSnsIdUserStatus_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8033,_id8034) = iprot#readFieldBegin in
        if _t8033 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8034 with 
          | 2 -> (if _t8033 = Protocol.T_I32 then
              _str8032#set_snsIdType (SnsIdType.of_i iprot#readI32)
            else
              iprot#skip _t8033)
          | 3 -> (if _t8033 = Protocol.T_STRING then
              _str8032#set_snsAccessToken iprot#readString
            else
              iprot#skip _t8033)
          | 4 -> (if _t8033 = Protocol.T_STRING then
              _str8032#set_udidHash iprot#readString
            else
              iprot#skip _t8033)
          | _ -> iprot#skip _t8033);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8032

class findSnsIdUserStatus_result =
object (self)
  val mutable _success : snsIdUserStatus option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findSnsIdUserStatus_result.success") | Some _x8035 -> _x8035
  method set_success _x8035 = _success <- Some _x8035
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findSnsIdUserStatus_result.e") | Some _x8036 -> _x8036
  method set_e _x8036 = _e <- Some _x8036
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findSnsIdUserStatus_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findSnsIdUserStatus_result (iprot : Protocol.t) =
  let _str8039 = new findSnsIdUserStatus_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8040,_id8041) = iprot#readFieldBegin in
        if _t8040 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8041 with 
          | 0 -> (if _t8040 = Protocol.T_STRUCT then
              _str8039#set_success (read_snsIdUserStatus iprot)
            else
              iprot#skip _t8040)
          | 1 -> (if _t8040 = Protocol.T_STRUCT then
              _str8039#set_e (read_talkException iprot)
            else
              iprot#skip _t8040)
          | _ -> iprot#skip _t8040);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8039

class finishUpdateVerification_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "finishUpdateVerification_args.sessionId") | Some _x8042 -> _x8042
  method set_sessionId _x8042 = _sessionId <- Some _x8042
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "finishUpdateVerification_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_finishUpdateVerification_args (iprot : Protocol.t) =
  let _str8045 = new finishUpdateVerification_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8046,_id8047) = iprot#readFieldBegin in
        if _t8046 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8047 with 
          | 2 -> (if _t8046 = Protocol.T_STRING then
              _str8045#set_sessionId iprot#readString
            else
              iprot#skip _t8046)
          | _ -> iprot#skip _t8046);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8045

class finishUpdateVerification_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "finishUpdateVerification_result.e") | Some _x8048 -> _x8048
  method set_e _x8048 = _e <- Some _x8048
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "finishUpdateVerification_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_finishUpdateVerification_result (iprot : Protocol.t) =
  let _str8051 = new finishUpdateVerification_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8052,_id8053) = iprot#readFieldBegin in
        if _t8052 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8053 with 
          | 1 -> (if _t8052 = Protocol.T_STRUCT then
              _str8051#set_e (read_talkException iprot)
            else
              iprot#skip _t8052)
          | _ -> iprot#skip _t8052);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8051

class generateUserTicket_args =
object (self)
  val mutable _expirationTime : Int64.t option = None
  method get_expirationTime = _expirationTime
  method grab_expirationTime = match _expirationTime with None->raise (Field_empty "generateUserTicket_args.expirationTime") | Some _x8054 -> _x8054
  method set_expirationTime _x8054 = _expirationTime <- Some _x8054
  method unset_expirationTime = _expirationTime <- None
  method reset_expirationTime = _expirationTime <- None

  val mutable _maxUseCount : Int32.t option = None
  method get_maxUseCount = _maxUseCount
  method grab_maxUseCount = match _maxUseCount with None->raise (Field_empty "generateUserTicket_args.maxUseCount") | Some _x8055 -> _x8055
  method set_maxUseCount _x8055 = _maxUseCount <- Some _x8055
  method unset_maxUseCount = _maxUseCount <- None
  method reset_maxUseCount = _maxUseCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "generateUserTicket_args";
    (match _expirationTime with None -> () | Some _v -> 
      oprot#writeFieldBegin("expirationTime",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _maxUseCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("maxUseCount",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_generateUserTicket_args (iprot : Protocol.t) =
  let _str8058 = new generateUserTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8059,_id8060) = iprot#readFieldBegin in
        if _t8059 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8060 with 
          | 3 -> (if _t8059 = Protocol.T_I64 then
              _str8058#set_expirationTime iprot#readI64
            else
              iprot#skip _t8059)
          | 4 -> (if _t8059 = Protocol.T_I32 then
              _str8058#set_maxUseCount iprot#readI32
            else
              iprot#skip _t8059)
          | _ -> iprot#skip _t8059);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8058

class generateUserTicket_result =
object (self)
  val mutable _success : ticket option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "generateUserTicket_result.success") | Some _x8061 -> _x8061
  method set_success _x8061 = _success <- Some _x8061
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "generateUserTicket_result.e") | Some _x8062 -> _x8062
  method set_e _x8062 = _e <- Some _x8062
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "generateUserTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_generateUserTicket_result (iprot : Protocol.t) =
  let _str8065 = new generateUserTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8066,_id8067) = iprot#readFieldBegin in
        if _t8066 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8067 with 
          | 0 -> (if _t8066 = Protocol.T_STRUCT then
              _str8065#set_success (read_ticket iprot)
            else
              iprot#skip _t8066)
          | 1 -> (if _t8066 = Protocol.T_STRUCT then
              _str8065#set_e (read_talkException iprot)
            else
              iprot#skip _t8066)
          | _ -> iprot#skip _t8066);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8065

class destroyMessage_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "destroyMessage_args.seq") | Some _x8068 -> _x8068
  method set_seq _x8068 = _seq <- Some _x8068
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _chatId : string option = None
  method get_chatId = _chatId
  method grab_chatId = match _chatId with None->raise (Field_empty "destroyMessage_args.chatId") | Some _x8069 -> _x8069
  method set_chatId _x8069 = _chatId <- Some _x8069
  method unset_chatId = _chatId <- None
  method reset_chatId = _chatId <- None

  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "destroyMessage_args.messageId") | Some _x8070 -> _x8070
  method set_messageId _x8070 = _messageId <- Some _x8070
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  val mutable _sessionId : Int32.t option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "destroyMessage_args.sessionId") | Some _x8071 -> _x8071
  method set_sessionId _x8071 = _sessionId <- Some _x8071
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "destroyMessage_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _chatId with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_destroyMessage_args (iprot : Protocol.t) =
  let _str8074 = new destroyMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8075,_id8076) = iprot#readFieldBegin in
        if _t8075 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8076 with 
          | 1 -> (if _t8075 = Protocol.T_I32 then
              _str8074#set_seq iprot#readI32
            else
              iprot#skip _t8075)
          | 2 -> (if _t8075 = Protocol.T_STRING then
              _str8074#set_chatId iprot#readString
            else
              iprot#skip _t8075)
          | 3 -> (if _t8075 = Protocol.T_STRING then
              _str8074#set_messageId iprot#readString
            else
              iprot#skip _t8075)
          | 4 -> (if _t8075 = Protocol.T_I32 then
              _str8074#set_sessionId iprot#readI32
            else
              iprot#skip _t8075)
          | _ -> iprot#skip _t8075);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8074

class destroyMessage_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "destroyMessage_result.e") | Some _x8077 -> _x8077
  method set_e _x8077 = _e <- Some _x8077
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "destroyMessage_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_destroyMessage_result (iprot : Protocol.t) =
  let _str8080 = new destroyMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8081,_id8082) = iprot#readFieldBegin in
        if _t8081 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8082 with 
          | 1 -> (if _t8081 = Protocol.T_STRUCT then
              _str8080#set_e (read_talkException iprot)
            else
              iprot#skip _t8081)
          | _ -> iprot#skip _t8081);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8080

class getAcceptedProximityMatches_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "getAcceptedProximityMatches_args.sessionId") | Some _x8083 -> _x8083
  method set_sessionId _x8083 = _sessionId <- Some _x8083
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAcceptedProximityMatches_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAcceptedProximityMatches_args (iprot : Protocol.t) =
  let _str8086 = new getAcceptedProximityMatches_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8087,_id8088) = iprot#readFieldBegin in
        if _t8087 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8088 with 
          | 2 -> (if _t8087 = Protocol.T_STRING then
              _str8086#set_sessionId iprot#readString
            else
              iprot#skip _t8087)
          | _ -> iprot#skip _t8087);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8086

class getAcceptedProximityMatches_result =
object (self)
  val mutable _success : (string,bool) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getAcceptedProximityMatches_result.success") | Some _x8089 -> _x8089
  method set_success _x8089 = _success <- Some _x8089
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getAcceptedProximityMatches_result.e") | Some _x8090 -> _x8090
  method set_e _x8090 = _e <- Some _x8090
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAcceptedProximityMatches_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_SET,0);
      oprot#writeSetBegin(Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _iter8093 -> fun _ ->         oprot#writeString(_iter8093);
      ) _v;
      oprot#writeSetEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAcceptedProximityMatches_result (iprot : Protocol.t) =
  let _str8094 = new getAcceptedProximityMatches_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8095,_id8096) = iprot#readFieldBegin in
        if _t8095 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8096 with 
          | 0 -> (if _t8095 = Protocol.T_SET then
              _str8094#set_success 
                (let (_etype8100,_size8097) = iprot#readSetBegin in
                let _con8101 = Hashtbl.create _size8097 in
                  for i = 1 to _size8097 do
                    Hashtbl.add _con8101 iprot#readString true
                  done; iprot#readSetEnd; _con8101)
            else
              iprot#skip _t8095)
          | 1 -> (if _t8095 = Protocol.T_STRUCT then
              _str8094#set_e (read_talkException iprot)
            else
              iprot#skip _t8095)
          | _ -> iprot#skip _t8095);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8094

class getActiveBuddySubscriberIds_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActiveBuddySubscriberIds_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActiveBuddySubscriberIds_args (iprot : Protocol.t) =
  let _str8104 = new getActiveBuddySubscriberIds_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8105,_id8106) = iprot#readFieldBegin in
        if _t8105 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8106 with 
          | _ -> iprot#skip _t8105);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8104

class getActiveBuddySubscriberIds_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getActiveBuddySubscriberIds_result.success") | Some _x8107 -> _x8107
  method set_success _x8107 = _success <- Some _x8107
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getActiveBuddySubscriberIds_result.e") | Some _x8108 -> _x8108
  method set_e _x8108 = _e <- Some _x8108
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActiveBuddySubscriberIds_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8111 ->         oprot#writeString(_iter8111);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActiveBuddySubscriberIds_result (iprot : Protocol.t) =
  let _str8112 = new getActiveBuddySubscriberIds_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8113,_id8114) = iprot#readFieldBegin in
        if _t8113 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8114 with 
          | 0 -> (if _t8113 = Protocol.T_LIST then
              _str8112#set_success 
                (let (_etype8118,_size8115) = iprot#readListBegin in
                  let _con8119 = (Array.to_list (Array.init _size8115 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8119)
            else
              iprot#skip _t8113)
          | 1 -> (if _t8113 = Protocol.T_STRUCT then
              _str8112#set_e (read_talkException iprot)
            else
              iprot#skip _t8113)
          | _ -> iprot#skip _t8113);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8112

class getAllContactIds_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllContactIds_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllContactIds_args (iprot : Protocol.t) =
  let _str8122 = new getAllContactIds_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8123,_id8124) = iprot#readFieldBegin in
        if _t8123 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8124 with 
          | _ -> iprot#skip _t8123);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8122

class getAllContactIds_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getAllContactIds_result.success") | Some _x8125 -> _x8125
  method set_success _x8125 = _success <- Some _x8125
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getAllContactIds_result.e") | Some _x8126 -> _x8126
  method set_e _x8126 = _e <- Some _x8126
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllContactIds_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8129 ->         oprot#writeString(_iter8129);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllContactIds_result (iprot : Protocol.t) =
  let _str8130 = new getAllContactIds_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8131,_id8132) = iprot#readFieldBegin in
        if _t8131 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8132 with 
          | 0 -> (if _t8131 = Protocol.T_LIST then
              _str8130#set_success 
                (let (_etype8136,_size8133) = iprot#readListBegin in
                  let _con8137 = (Array.to_list (Array.init _size8133 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8137)
            else
              iprot#skip _t8131)
          | 1 -> (if _t8131 = Protocol.T_STRUCT then
              _str8130#set_e (read_talkException iprot)
            else
              iprot#skip _t8131)
          | _ -> iprot#skip _t8131);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8130

class getAuthQrcode_args =
object (self)
  val mutable _keepLoggedIn : bool option = None
  method get_keepLoggedIn = _keepLoggedIn
  method grab_keepLoggedIn = match _keepLoggedIn with None->raise (Field_empty "getAuthQrcode_args.keepLoggedIn") | Some _x8138 -> _x8138
  method set_keepLoggedIn _x8138 = _keepLoggedIn <- Some _x8138
  method unset_keepLoggedIn = _keepLoggedIn <- None
  method reset_keepLoggedIn = _keepLoggedIn <- None

  val mutable _systemName : string option = None
  method get_systemName = _systemName
  method grab_systemName = match _systemName with None->raise (Field_empty "getAuthQrcode_args.systemName") | Some _x8139 -> _x8139
  method set_systemName _x8139 = _systemName <- Some _x8139
  method unset_systemName = _systemName <- None
  method reset_systemName = _systemName <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAuthQrcode_args";
    (match _keepLoggedIn with None -> () | Some _v -> 
      oprot#writeFieldBegin("keepLoggedIn",Protocol.T_BOOL,2);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _systemName with None -> () | Some _v -> 
      oprot#writeFieldBegin("systemName",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAuthQrcode_args (iprot : Protocol.t) =
  let _str8142 = new getAuthQrcode_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8143,_id8144) = iprot#readFieldBegin in
        if _t8143 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8144 with 
          | 2 -> (if _t8143 = Protocol.T_BOOL then
              _str8142#set_keepLoggedIn iprot#readBool
            else
              iprot#skip _t8143)
          | 3 -> (if _t8143 = Protocol.T_STRING then
              _str8142#set_systemName iprot#readString
            else
              iprot#skip _t8143)
          | _ -> iprot#skip _t8143);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8142

class getAuthQrcode_result =
object (self)
  val mutable _success : authQrcode option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getAuthQrcode_result.success") | Some _x8145 -> _x8145
  method set_success _x8145 = _success <- Some _x8145
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getAuthQrcode_result.e") | Some _x8146 -> _x8146
  method set_e _x8146 = _e <- Some _x8146
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAuthQrcode_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAuthQrcode_result (iprot : Protocol.t) =
  let _str8149 = new getAuthQrcode_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8150,_id8151) = iprot#readFieldBegin in
        if _t8150 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8151 with 
          | 0 -> (if _t8150 = Protocol.T_STRUCT then
              _str8149#set_success (read_authQrcode iprot)
            else
              iprot#skip _t8150)
          | 1 -> (if _t8150 = Protocol.T_STRUCT then
              _str8149#set_e (read_talkException iprot)
            else
              iprot#skip _t8150)
          | _ -> iprot#skip _t8150);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8149

class getBlockedContactIds_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockedContactIds_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockedContactIds_args (iprot : Protocol.t) =
  let _str8154 = new getBlockedContactIds_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8155,_id8156) = iprot#readFieldBegin in
        if _t8155 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8156 with 
          | _ -> iprot#skip _t8155);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8154

class getBlockedContactIds_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBlockedContactIds_result.success") | Some _x8157 -> _x8157
  method set_success _x8157 = _success <- Some _x8157
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBlockedContactIds_result.e") | Some _x8158 -> _x8158
  method set_e _x8158 = _e <- Some _x8158
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockedContactIds_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8161 ->         oprot#writeString(_iter8161);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockedContactIds_result (iprot : Protocol.t) =
  let _str8162 = new getBlockedContactIds_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8163,_id8164) = iprot#readFieldBegin in
        if _t8163 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8164 with 
          | 0 -> (if _t8163 = Protocol.T_LIST then
              _str8162#set_success 
                (let (_etype8168,_size8165) = iprot#readListBegin in
                  let _con8169 = (Array.to_list (Array.init _size8165 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8169)
            else
              iprot#skip _t8163)
          | 1 -> (if _t8163 = Protocol.T_STRUCT then
              _str8162#set_e (read_talkException iprot)
            else
              iprot#skip _t8163)
          | _ -> iprot#skip _t8163);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8162

class registerWithPhoneNumber_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "registerWithPhoneNumber_args.sessionId") | Some _x8170 -> _x8170
  method set_sessionId _x8170 = _sessionId <- Some _x8170
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  val mutable _migrationPincodeSessionId : string option = None
  method get_migrationPincodeSessionId = _migrationPincodeSessionId
  method grab_migrationPincodeSessionId = match _migrationPincodeSessionId with None->raise (Field_empty "registerWithPhoneNumber_args.migrationPincodeSessionId") | Some _x8171 -> _x8171
  method set_migrationPincodeSessionId _x8171 = _migrationPincodeSessionId <- Some _x8171
  method unset_migrationPincodeSessionId = _migrationPincodeSessionId <- None
  method reset_migrationPincodeSessionId = _migrationPincodeSessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithPhoneNumber_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _migrationPincodeSessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("migrationPincodeSessionId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithPhoneNumber_args (iprot : Protocol.t) =
  let _str8174 = new registerWithPhoneNumber_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8175,_id8176) = iprot#readFieldBegin in
        if _t8175 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8176 with 
          | 2 -> (if _t8175 = Protocol.T_STRING then
              _str8174#set_sessionId iprot#readString
            else
              iprot#skip _t8175)
          | 3 -> (if _t8175 = Protocol.T_STRING then
              _str8174#set_migrationPincodeSessionId iprot#readString
            else
              iprot#skip _t8175)
          | _ -> iprot#skip _t8175);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8174

class registerWithPhoneNumber_result =
object (self)
  val mutable _success : registerWithPhoneNumberResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerWithPhoneNumber_result.success") | Some _x8177 -> _x8177
  method set_success _x8177 = _success <- Some _x8177
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerWithPhoneNumber_result.e") | Some _x8178 -> _x8178
  method set_e _x8178 = _e <- Some _x8178
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithPhoneNumber_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithPhoneNumber_result (iprot : Protocol.t) =
  let _str8181 = new registerWithPhoneNumber_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8182,_id8183) = iprot#readFieldBegin in
        if _t8182 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8183 with 
          | 0 -> (if _t8182 = Protocol.T_STRUCT then
              _str8181#set_success (read_registerWithPhoneNumberResult iprot)
            else
              iprot#skip _t8182)
          | 1 -> (if _t8182 = Protocol.T_STRUCT then
              _str8181#set_e (read_talkException iprot)
            else
              iprot#skip _t8182)
          | _ -> iprot#skip _t8182);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8181

class registerWithPhoneNumberAndPassword_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "registerWithPhoneNumberAndPassword_args.sessionId") | Some _x8184 -> _x8184
  method set_sessionId _x8184 = _sessionId <- Some _x8184
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  val mutable _keynm : string option = None
  method get_keynm = _keynm
  method grab_keynm = match _keynm with None->raise (Field_empty "registerWithPhoneNumberAndPassword_args.keynm") | Some _x8185 -> _x8185
  method set_keynm _x8185 = _keynm <- Some _x8185
  method unset_keynm = _keynm <- None
  method reset_keynm = _keynm <- None

  val mutable _encrypted : string option = None
  method get_encrypted = _encrypted
  method grab_encrypted = match _encrypted with None->raise (Field_empty "registerWithPhoneNumberAndPassword_args.encrypted") | Some _x8186 -> _x8186
  method set_encrypted _x8186 = _encrypted <- Some _x8186
  method unset_encrypted = _encrypted <- None
  method reset_encrypted = _encrypted <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithPhoneNumberAndPassword_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _keynm with None -> () | Some _v -> 
      oprot#writeFieldBegin("keynm",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _encrypted with None -> () | Some _v -> 
      oprot#writeFieldBegin("encrypted",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithPhoneNumberAndPassword_args (iprot : Protocol.t) =
  let _str8189 = new registerWithPhoneNumberAndPassword_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8190,_id8191) = iprot#readFieldBegin in
        if _t8190 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8191 with 
          | 2 -> (if _t8190 = Protocol.T_STRING then
              _str8189#set_sessionId iprot#readString
            else
              iprot#skip _t8190)
          | 3 -> (if _t8190 = Protocol.T_STRING then
              _str8189#set_keynm iprot#readString
            else
              iprot#skip _t8190)
          | 4 -> (if _t8190 = Protocol.T_STRING then
              _str8189#set_encrypted iprot#readString
            else
              iprot#skip _t8190)
          | _ -> iprot#skip _t8190);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8189

class registerWithPhoneNumberAndPassword_result =
object (self)
  val mutable _success : registerWithPhoneNumberResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerWithPhoneNumberAndPassword_result.success") | Some _x8192 -> _x8192
  method set_success _x8192 = _success <- Some _x8192
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerWithPhoneNumberAndPassword_result.e") | Some _x8193 -> _x8193
  method set_e _x8193 = _e <- Some _x8193
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithPhoneNumberAndPassword_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithPhoneNumberAndPassword_result (iprot : Protocol.t) =
  let _str8196 = new registerWithPhoneNumberAndPassword_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8197,_id8198) = iprot#readFieldBegin in
        if _t8197 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8198 with 
          | 0 -> (if _t8197 = Protocol.T_STRUCT then
              _str8196#set_success (read_registerWithPhoneNumberResult iprot)
            else
              iprot#skip _t8197)
          | 1 -> (if _t8197 = Protocol.T_STRUCT then
              _str8196#set_e (read_talkException iprot)
            else
              iprot#skip _t8197)
          | _ -> iprot#skip _t8197);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8196

class getAnalyticsInfo_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAnalyticsInfo_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAnalyticsInfo_args (iprot : Protocol.t) =
  let _str8201 = new getAnalyticsInfo_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8202,_id8203) = iprot#readFieldBegin in
        if _t8202 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8203 with 
          | _ -> iprot#skip _t8202);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8201

class getAnalyticsInfo_result =
object (self)
  val mutable _success : analyticsInfo option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getAnalyticsInfo_result.success") | Some _x8204 -> _x8204
  method set_success _x8204 = _success <- Some _x8204
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getAnalyticsInfo_result.e") | Some _x8205 -> _x8205
  method set_e _x8205 = _e <- Some _x8205
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAnalyticsInfo_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAnalyticsInfo_result (iprot : Protocol.t) =
  let _str8208 = new getAnalyticsInfo_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8209,_id8210) = iprot#readFieldBegin in
        if _t8209 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8210 with 
          | 0 -> (if _t8209 = Protocol.T_STRUCT then
              _str8208#set_success (read_analyticsInfo iprot)
            else
              iprot#skip _t8209)
          | 1 -> (if _t8209 = Protocol.T_STRUCT then
              _str8208#set_e (read_talkException iprot)
            else
              iprot#skip _t8209)
          | _ -> iprot#skip _t8209);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8208

class reportClientStatistics_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "reportClientStatistics_args.reqSeq") | Some _x8211 -> _x8211
  method set_reqSeq _x8211 = _reqSeq <- Some _x8211
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _category : ReportCategory.t option = None
  method get_category = _category
  method grab_category = match _category with None->raise (Field_empty "reportClientStatistics_args.category") | Some _x8212 -> _x8212
  method set_category _x8212 = _category <- Some _x8212
  method unset_category = _category <- None
  method reset_category = _category <- None

  val mutable _count : Int32.t option = None
  method get_count = _count
  method grab_count = match _count with None->raise (Field_empty "reportClientStatistics_args.count") | Some _x8213 -> _x8213
  method set_count _x8213 = _count <- Some _x8213
  method unset_count = _count <- None
  method reset_count = _count <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportClientStatistics_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _category with None -> () | Some _v -> 
      oprot#writeFieldBegin("category",Protocol.T_I32,2);
      oprot#writeI32(ReportCategory.to_i _v);
      oprot#writeFieldEnd
    );
    (match _count with None -> () | Some _v -> 
      oprot#writeFieldBegin("count",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportClientStatistics_args (iprot : Protocol.t) =
  let _str8216 = new reportClientStatistics_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8217,_id8218) = iprot#readFieldBegin in
        if _t8217 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8218 with 
          | 1 -> (if _t8217 = Protocol.T_I32 then
              _str8216#set_reqSeq iprot#readI32
            else
              iprot#skip _t8217)
          | 2 -> (if _t8217 = Protocol.T_I32 then
              _str8216#set_category (ReportCategory.of_i iprot#readI32)
            else
              iprot#skip _t8217)
          | 3 -> (if _t8217 = Protocol.T_I32 then
              _str8216#set_count iprot#readI32
            else
              iprot#skip _t8217)
          | _ -> iprot#skip _t8217);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8216

class reportClientStatistics_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportClientStatistics_result.e") | Some _x8219 -> _x8219
  method set_e _x8219 = _e <- Some _x8219
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportClientStatistics_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportClientStatistics_result (iprot : Protocol.t) =
  let _str8222 = new reportClientStatistics_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8223,_id8224) = iprot#readFieldBegin in
        if _t8223 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8224 with 
          | 1 -> (if _t8223 = Protocol.T_STRUCT then
              _str8222#set_e (read_talkException iprot)
            else
              iprot#skip _t8223)
          | _ -> iprot#skip _t8223);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8222

class verifyPhoneNumberForLogin_args =
object (self)
  val mutable _verifierFromPhone : string option = None
  method get_verifierFromPhone = _verifierFromPhone
  method grab_verifierFromPhone = match _verifierFromPhone with None->raise (Field_empty "verifyPhoneNumberForLogin_args.verifierFromPhone") | Some _x8225 -> _x8225
  method set_verifierFromPhone _x8225 = _verifierFromPhone <- Some _x8225
  method unset_verifierFromPhone = _verifierFromPhone <- None
  method reset_verifierFromPhone = _verifierFromPhone <- None

  val mutable _pinCodeForPhone : string option = None
  method get_pinCodeForPhone = _pinCodeForPhone
  method grab_pinCodeForPhone = match _pinCodeForPhone with None->raise (Field_empty "verifyPhoneNumberForLogin_args.pinCodeForPhone") | Some _x8226 -> _x8226
  method set_pinCodeForPhone _x8226 = _pinCodeForPhone <- Some _x8226
  method unset_pinCodeForPhone = _pinCodeForPhone <- None
  method reset_pinCodeForPhone = _pinCodeForPhone <- None

  val mutable _verifierFromLogin : string option = None
  method get_verifierFromLogin = _verifierFromLogin
  method grab_verifierFromLogin = match _verifierFromLogin with None->raise (Field_empty "verifyPhoneNumberForLogin_args.verifierFromLogin") | Some _x8227 -> _x8227
  method set_verifierFromLogin _x8227 = _verifierFromLogin <- Some _x8227
  method unset_verifierFromLogin = _verifierFromLogin <- None
  method reset_verifierFromLogin = _verifierFromLogin <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyPhoneNumberForLogin_args";
    (match _verifierFromPhone with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifierFromPhone",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _pinCodeForPhone with None -> () | Some _v -> 
      oprot#writeFieldBegin("pinCodeForPhone",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _verifierFromLogin with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifierFromLogin",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyPhoneNumberForLogin_args (iprot : Protocol.t) =
  let _str8230 = new verifyPhoneNumberForLogin_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8231,_id8232) = iprot#readFieldBegin in
        if _t8231 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8232 with 
          | 2 -> (if _t8231 = Protocol.T_STRING then
              _str8230#set_verifierFromPhone iprot#readString
            else
              iprot#skip _t8231)
          | 3 -> (if _t8231 = Protocol.T_STRING then
              _str8230#set_pinCodeForPhone iprot#readString
            else
              iprot#skip _t8231)
          | 4 -> (if _t8231 = Protocol.T_STRING then
              _str8230#set_verifierFromLogin iprot#readString
            else
              iprot#skip _t8231)
          | _ -> iprot#skip _t8231);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8230

class verifyPhoneNumberForLogin_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "verifyPhoneNumberForLogin_result.success") | Some _x8233 -> _x8233
  method set_success _x8233 = _success <- Some _x8233
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "verifyPhoneNumberForLogin_result.e") | Some _x8234 -> _x8234
  method set_e _x8234 = _e <- Some _x8234
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyPhoneNumberForLogin_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyPhoneNumberForLogin_result (iprot : Protocol.t) =
  let _str8237 = new verifyPhoneNumberForLogin_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8238,_id8239) = iprot#readFieldBegin in
        if _t8238 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8239 with 
          | 0 -> (if _t8238 = Protocol.T_STRING then
              _str8237#set_success iprot#readString
            else
              iprot#skip _t8238)
          | 1 -> (if _t8238 = Protocol.T_STRUCT then
              _str8237#set_e (read_talkException iprot)
            else
              iprot#skip _t8238)
          | _ -> iprot#skip _t8238);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8237

class verifyPhoneNumber_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "verifyPhoneNumber_args.sessionId") | Some _x8240 -> _x8240
  method set_sessionId _x8240 = _sessionId <- Some _x8240
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  val mutable _pinCode : string option = None
  method get_pinCode = _pinCode
  method grab_pinCode = match _pinCode with None->raise (Field_empty "verifyPhoneNumber_args.pinCode") | Some _x8241 -> _x8241
  method set_pinCode _x8241 = _pinCode <- Some _x8241
  method unset_pinCode = _pinCode <- None
  method reset_pinCode = _pinCode <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "verifyPhoneNumber_args.udidHash") | Some _x8242 -> _x8242
  method set_udidHash _x8242 = _udidHash <- Some _x8242
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _migrationPincodeSessionId : string option = None
  method get_migrationPincodeSessionId = _migrationPincodeSessionId
  method grab_migrationPincodeSessionId = match _migrationPincodeSessionId with None->raise (Field_empty "verifyPhoneNumber_args.migrationPincodeSessionId") | Some _x8243 -> _x8243
  method set_migrationPincodeSessionId _x8243 = _migrationPincodeSessionId <- Some _x8243
  method unset_migrationPincodeSessionId = _migrationPincodeSessionId <- None
  method reset_migrationPincodeSessionId = _migrationPincodeSessionId <- None

  val mutable _oldUdidHash : string option = None
  method get_oldUdidHash = _oldUdidHash
  method grab_oldUdidHash = match _oldUdidHash with None->raise (Field_empty "verifyPhoneNumber_args.oldUdidHash") | Some _x8244 -> _x8244
  method set_oldUdidHash _x8244 = _oldUdidHash <- Some _x8244
  method unset_oldUdidHash = _oldUdidHash <- None
  method reset_oldUdidHash = _oldUdidHash <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyPhoneNumber_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _pinCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("pinCode",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _migrationPincodeSessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("migrationPincodeSessionId",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _oldUdidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("oldUdidHash",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyPhoneNumber_args (iprot : Protocol.t) =
  let _str8247 = new verifyPhoneNumber_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8248,_id8249) = iprot#readFieldBegin in
        if _t8248 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8249 with 
          | 2 -> (if _t8248 = Protocol.T_STRING then
              _str8247#set_sessionId iprot#readString
            else
              iprot#skip _t8248)
          | 3 -> (if _t8248 = Protocol.T_STRING then
              _str8247#set_pinCode iprot#readString
            else
              iprot#skip _t8248)
          | 4 -> (if _t8248 = Protocol.T_STRING then
              _str8247#set_udidHash iprot#readString
            else
              iprot#skip _t8248)
          | 5 -> (if _t8248 = Protocol.T_STRING then
              _str8247#set_migrationPincodeSessionId iprot#readString
            else
              iprot#skip _t8248)
          | 6 -> (if _t8248 = Protocol.T_STRING then
              _str8247#set_oldUdidHash iprot#readString
            else
              iprot#skip _t8248)
          | _ -> iprot#skip _t8248);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8247

class verifyPhoneNumber_result =
object (self)
  val mutable _success : phoneVerificationResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "verifyPhoneNumber_result.success") | Some _x8250 -> _x8250
  method set_success _x8250 = _success <- Some _x8250
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "verifyPhoneNumber_result.e") | Some _x8251 -> _x8251
  method set_e _x8251 = _e <- Some _x8251
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyPhoneNumber_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyPhoneNumber_result (iprot : Protocol.t) =
  let _str8254 = new verifyPhoneNumber_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8255,_id8256) = iprot#readFieldBegin in
        if _t8255 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8256 with 
          | 0 -> (if _t8255 = Protocol.T_STRUCT then
              _str8254#set_success (read_phoneVerificationResult iprot)
            else
              iprot#skip _t8255)
          | 1 -> (if _t8255 = Protocol.T_STRUCT then
              _str8254#set_e (read_talkException iprot)
            else
              iprot#skip _t8255)
          | _ -> iprot#skip _t8255);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8254

class getBlockedContactIdsByRange_args =
object (self)
  val mutable _start : Int32.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getBlockedContactIdsByRange_args.start") | Some _x8257 -> _x8257
  method set_start _x8257 = _start <- Some _x8257
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _count : Int32.t option = None
  method get_count = _count
  method grab_count = match _count with None->raise (Field_empty "getBlockedContactIdsByRange_args.count") | Some _x8258 -> _x8258
  method set_count _x8258 = _count <- Some _x8258
  method unset_count = _count <- None
  method reset_count = _count <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockedContactIdsByRange_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I32,2);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _count with None -> () | Some _v -> 
      oprot#writeFieldBegin("count",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockedContactIdsByRange_args (iprot : Protocol.t) =
  let _str8261 = new getBlockedContactIdsByRange_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8262,_id8263) = iprot#readFieldBegin in
        if _t8262 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8263 with 
          | 2 -> (if _t8262 = Protocol.T_I32 then
              _str8261#set_start iprot#readI32
            else
              iprot#skip _t8262)
          | 3 -> (if _t8262 = Protocol.T_I32 then
              _str8261#set_count iprot#readI32
            else
              iprot#skip _t8262)
          | _ -> iprot#skip _t8262);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8261

class getBlockedContactIdsByRange_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBlockedContactIdsByRange_result.success") | Some _x8264 -> _x8264
  method set_success _x8264 = _success <- Some _x8264
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBlockedContactIdsByRange_result.e") | Some _x8265 -> _x8265
  method set_e _x8265 = _e <- Some _x8265
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockedContactIdsByRange_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8268 ->         oprot#writeString(_iter8268);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockedContactIdsByRange_result (iprot : Protocol.t) =
  let _str8269 = new getBlockedContactIdsByRange_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8270,_id8271) = iprot#readFieldBegin in
        if _t8270 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8271 with 
          | 0 -> (if _t8270 = Protocol.T_LIST then
              _str8269#set_success 
                (let (_etype8275,_size8272) = iprot#readListBegin in
                  let _con8276 = (Array.to_list (Array.init _size8272 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8276)
            else
              iprot#skip _t8270)
          | 1 -> (if _t8270 = Protocol.T_STRUCT then
              _str8269#set_e (read_talkException iprot)
            else
              iprot#skip _t8270)
          | _ -> iprot#skip _t8270);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8269

class getBlockedRecommendationIds_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockedRecommendationIds_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockedRecommendationIds_args (iprot : Protocol.t) =
  let _str8279 = new getBlockedRecommendationIds_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8280,_id8281) = iprot#readFieldBegin in
        if _t8280 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8281 with 
          | _ -> iprot#skip _t8280);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8279

class getBlockedRecommendationIds_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBlockedRecommendationIds_result.success") | Some _x8282 -> _x8282
  method set_success _x8282 = _success <- Some _x8282
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBlockedRecommendationIds_result.e") | Some _x8283 -> _x8283
  method set_e _x8283 = _e <- Some _x8283
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockedRecommendationIds_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8286 ->         oprot#writeString(_iter8286);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockedRecommendationIds_result (iprot : Protocol.t) =
  let _str8287 = new getBlockedRecommendationIds_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8288,_id8289) = iprot#readFieldBegin in
        if _t8288 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8289 with 
          | 0 -> (if _t8288 = Protocol.T_LIST then
              _str8287#set_success 
                (let (_etype8293,_size8290) = iprot#readListBegin in
                  let _con8294 = (Array.to_list (Array.init _size8290 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8294)
            else
              iprot#skip _t8288)
          | 1 -> (if _t8288 = Protocol.T_STRUCT then
              _str8287#set_e (read_talkException iprot)
            else
              iprot#skip _t8288)
          | _ -> iprot#skip _t8288);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8287

class getBuddyBlockerIds_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyBlockerIds_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyBlockerIds_args (iprot : Protocol.t) =
  let _str8297 = new getBuddyBlockerIds_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8298,_id8299) = iprot#readFieldBegin in
        if _t8298 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8299 with 
          | _ -> iprot#skip _t8298);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8297

class getBuddyBlockerIds_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBuddyBlockerIds_result.success") | Some _x8300 -> _x8300
  method set_success _x8300 = _success <- Some _x8300
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBuddyBlockerIds_result.e") | Some _x8301 -> _x8301
  method set_e _x8301 = _e <- Some _x8301
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyBlockerIds_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8304 ->         oprot#writeString(_iter8304);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyBlockerIds_result (iprot : Protocol.t) =
  let _str8305 = new getBuddyBlockerIds_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8306,_id8307) = iprot#readFieldBegin in
        if _t8306 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8307 with 
          | 0 -> (if _t8306 = Protocol.T_LIST then
              _str8305#set_success 
                (let (_etype8311,_size8308) = iprot#readListBegin in
                  let _con8312 = (Array.to_list (Array.init _size8308 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8312)
            else
              iprot#skip _t8306)
          | 1 -> (if _t8306 = Protocol.T_STRUCT then
              _str8305#set_e (read_talkException iprot)
            else
              iprot#skip _t8306)
          | _ -> iprot#skip _t8306);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8305

class getBuddyLocation_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "getBuddyLocation_args.mid") | Some _x8313 -> _x8313
  method set_mid _x8313 = _mid <- Some _x8313
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  val mutable _index : Int32.t option = None
  method get_index = _index
  method grab_index = match _index with None->raise (Field_empty "getBuddyLocation_args.index") | Some _x8314 -> _x8314
  method set_index _x8314 = _index <- Some _x8314
  method unset_index = _index <- None
  method reset_index = _index <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyLocation_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _index with None -> () | Some _v -> 
      oprot#writeFieldBegin("index",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyLocation_args (iprot : Protocol.t) =
  let _str8317 = new getBuddyLocation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8318,_id8319) = iprot#readFieldBegin in
        if _t8318 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8319 with 
          | 2 -> (if _t8318 = Protocol.T_STRING then
              _str8317#set_mid iprot#readString
            else
              iprot#skip _t8318)
          | 3 -> (if _t8318 = Protocol.T_I32 then
              _str8317#set_index iprot#readI32
            else
              iprot#skip _t8318)
          | _ -> iprot#skip _t8318);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8317

class getBuddyLocation_result =
object (self)
  val mutable _success : geolocation option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBuddyLocation_result.success") | Some _x8320 -> _x8320
  method set_success _x8320 = _success <- Some _x8320
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBuddyLocation_result.e") | Some _x8321 -> _x8321
  method set_e _x8321 = _e <- Some _x8321
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyLocation_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyLocation_result (iprot : Protocol.t) =
  let _str8324 = new getBuddyLocation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8325,_id8326) = iprot#readFieldBegin in
        if _t8325 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8326 with 
          | 0 -> (if _t8325 = Protocol.T_STRUCT then
              _str8324#set_success (read_geolocation iprot)
            else
              iprot#skip _t8325)
          | 1 -> (if _t8325 = Protocol.T_STRUCT then
              _str8324#set_e (read_talkException iprot)
            else
              iprot#skip _t8325)
          | _ -> iprot#skip _t8325);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8324

class getCompactContactsModifiedSince_args =
object (self)
  val mutable _timestamp : Int64.t option = None
  method get_timestamp = _timestamp
  method grab_timestamp = match _timestamp with None->raise (Field_empty "getCompactContactsModifiedSince_args.timestamp") | Some _x8327 -> _x8327
  method set_timestamp _x8327 = _timestamp <- Some _x8327
  method unset_timestamp = _timestamp <- None
  method reset_timestamp = _timestamp <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactContactsModifiedSince_args";
    (match _timestamp with None -> () | Some _v -> 
      oprot#writeFieldBegin("timestamp",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactContactsModifiedSince_args (iprot : Protocol.t) =
  let _str8330 = new getCompactContactsModifiedSince_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8331,_id8332) = iprot#readFieldBegin in
        if _t8331 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8332 with 
          | 2 -> (if _t8331 = Protocol.T_I64 then
              _str8330#set_timestamp iprot#readI64
            else
              iprot#skip _t8331)
          | _ -> iprot#skip _t8331);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8330

class getCompactContactsModifiedSince_result =
object (self)
  val mutable _success : compactContact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCompactContactsModifiedSince_result.success") | Some _x8333 -> _x8333
  method set_success _x8333 = _success <- Some _x8333
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCompactContactsModifiedSince_result.e") | Some _x8334 -> _x8334
  method set_e _x8334 = _e <- Some _x8334
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactContactsModifiedSince_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8337 ->         _iter8337#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactContactsModifiedSince_result (iprot : Protocol.t) =
  let _str8338 = new getCompactContactsModifiedSince_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8339,_id8340) = iprot#readFieldBegin in
        if _t8339 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8340 with 
          | 0 -> (if _t8339 = Protocol.T_LIST then
              _str8338#set_success 
                (let (_etype8344,_size8341) = iprot#readListBegin in
                  let _con8345 = (Array.to_list (Array.init _size8341 (fun _ -> (read_compactContact iprot)))) in
                    iprot#readListEnd; _con8345)
            else
              iprot#skip _t8339)
          | 1 -> (if _t8339 = Protocol.T_STRUCT then
              _str8338#set_e (read_talkException iprot)
            else
              iprot#skip _t8339)
          | _ -> iprot#skip _t8339);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8338

class getCompactGroup_args =
object (self)
  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "getCompactGroup_args.groupId") | Some _x8346 -> _x8346
  method set_groupId _x8346 = _groupId <- Some _x8346
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactGroup_args";
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactGroup_args (iprot : Protocol.t) =
  let _str8349 = new getCompactGroup_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8350,_id8351) = iprot#readFieldBegin in
        if _t8350 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8351 with 
          | 2 -> (if _t8350 = Protocol.T_STRING then
              _str8349#set_groupId iprot#readString
            else
              iprot#skip _t8350)
          | _ -> iprot#skip _t8350);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8349

class getCompactGroup_result =
object (self)
  val mutable _success : group option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCompactGroup_result.success") | Some _x8352 -> _x8352
  method set_success _x8352 = _success <- Some _x8352
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCompactGroup_result.e") | Some _x8353 -> _x8353
  method set_e _x8353 = _e <- Some _x8353
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactGroup_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactGroup_result (iprot : Protocol.t) =
  let _str8356 = new getCompactGroup_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8357,_id8358) = iprot#readFieldBegin in
        if _t8357 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8358 with 
          | 0 -> (if _t8357 = Protocol.T_STRUCT then
              _str8356#set_success (read_group iprot)
            else
              iprot#skip _t8357)
          | 1 -> (if _t8357 = Protocol.T_STRUCT then
              _str8356#set_e (read_talkException iprot)
            else
              iprot#skip _t8357)
          | _ -> iprot#skip _t8357);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8356

class getCompactRoom_args =
object (self)
  val mutable _roomId : string option = None
  method get_roomId = _roomId
  method grab_roomId = match _roomId with None->raise (Field_empty "getCompactRoom_args.roomId") | Some _x8359 -> _x8359
  method set_roomId _x8359 = _roomId <- Some _x8359
  method unset_roomId = _roomId <- None
  method reset_roomId = _roomId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactRoom_args";
    (match _roomId with None -> () | Some _v -> 
      oprot#writeFieldBegin("roomId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactRoom_args (iprot : Protocol.t) =
  let _str8362 = new getCompactRoom_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8363,_id8364) = iprot#readFieldBegin in
        if _t8363 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8364 with 
          | 2 -> (if _t8363 = Protocol.T_STRING then
              _str8362#set_roomId iprot#readString
            else
              iprot#skip _t8363)
          | _ -> iprot#skip _t8363);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8362

class getCompactRoom_result =
object (self)
  val mutable _success : room option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCompactRoom_result.success") | Some _x8365 -> _x8365
  method set_success _x8365 = _success <- Some _x8365
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCompactRoom_result.e") | Some _x8366 -> _x8366
  method set_e _x8366 = _e <- Some _x8366
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactRoom_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactRoom_result (iprot : Protocol.t) =
  let _str8369 = new getCompactRoom_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8370,_id8371) = iprot#readFieldBegin in
        if _t8370 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8371 with 
          | 0 -> (if _t8370 = Protocol.T_STRUCT then
              _str8369#set_success (read_room iprot)
            else
              iprot#skip _t8370)
          | 1 -> (if _t8370 = Protocol.T_STRUCT then
              _str8369#set_e (read_talkException iprot)
            else
              iprot#skip _t8370)
          | _ -> iprot#skip _t8370);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8369

class getContact_args =
object (self)
  val mutable _id : string option = None
  method get_id = _id
  method grab_id = match _id with None->raise (Field_empty "getContact_args.id") | Some _x8372 -> _x8372
  method set_id _x8372 = _id <- Some _x8372
  method unset_id = _id <- None
  method reset_id = _id <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContact_args";
    (match _id with None -> () | Some _v -> 
      oprot#writeFieldBegin("id",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContact_args (iprot : Protocol.t) =
  let _str8375 = new getContact_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8376,_id8377) = iprot#readFieldBegin in
        if _t8376 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8377 with 
          | 2 -> (if _t8376 = Protocol.T_STRING then
              _str8375#set_id iprot#readString
            else
              iprot#skip _t8376)
          | _ -> iprot#skip _t8376);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8375

class getContact_result =
object (self)
  val mutable _success : contact option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getContact_result.success") | Some _x8378 -> _x8378
  method set_success _x8378 = _success <- Some _x8378
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getContact_result.e") | Some _x8379 -> _x8379
  method set_e _x8379 = _e <- Some _x8379
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContact_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContact_result (iprot : Protocol.t) =
  let _str8382 = new getContact_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8383,_id8384) = iprot#readFieldBegin in
        if _t8383 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8384 with 
          | 0 -> (if _t8383 = Protocol.T_STRUCT then
              _str8382#set_success (read_contact iprot)
            else
              iprot#skip _t8383)
          | 1 -> (if _t8383 = Protocol.T_STRUCT then
              _str8382#set_e (read_talkException iprot)
            else
              iprot#skip _t8383)
          | _ -> iprot#skip _t8383);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8382

class getContacts_args =
object (self)
  val mutable _ids : string list option = None
  method get_ids = _ids
  method grab_ids = match _ids with None->raise (Field_empty "getContacts_args.ids") | Some _x8385 -> _x8385
  method set_ids _x8385 = _ids <- Some _x8385
  method unset_ids = _ids <- None
  method reset_ids = _ids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContacts_args";
    (match _ids with None -> () | Some _v -> 
      oprot#writeFieldBegin("ids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8388 ->         oprot#writeString(_iter8388);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContacts_args (iprot : Protocol.t) =
  let _str8389 = new getContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8390,_id8391) = iprot#readFieldBegin in
        if _t8390 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8391 with 
          | 2 -> (if _t8390 = Protocol.T_LIST then
              _str8389#set_ids 
                (let (_etype8395,_size8392) = iprot#readListBegin in
                  let _con8396 = (Array.to_list (Array.init _size8392 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8396)
            else
              iprot#skip _t8390)
          | _ -> iprot#skip _t8390);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8389

class getContacts_result =
object (self)
  val mutable _success : contact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getContacts_result.success") | Some _x8397 -> _x8397
  method set_success _x8397 = _success <- Some _x8397
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getContacts_result.e") | Some _x8398 -> _x8398
  method set_e _x8398 = _e <- Some _x8398
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8401 ->         _iter8401#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContacts_result (iprot : Protocol.t) =
  let _str8402 = new getContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8403,_id8404) = iprot#readFieldBegin in
        if _t8403 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8404 with 
          | 0 -> (if _t8403 = Protocol.T_LIST then
              _str8402#set_success 
                (let (_etype8408,_size8405) = iprot#readListBegin in
                  let _con8409 = (Array.to_list (Array.init _size8405 (fun _ -> (read_contact iprot)))) in
                    iprot#readListEnd; _con8409)
            else
              iprot#skip _t8403)
          | 1 -> (if _t8403 = Protocol.T_STRUCT then
              _str8402#set_e (read_talkException iprot)
            else
              iprot#skip _t8403)
          | _ -> iprot#skip _t8403);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8402

class getContactWithFriendRequestStatus_args =
object (self)
  val mutable _id : string option = None
  method get_id = _id
  method grab_id = match _id with None->raise (Field_empty "getContactWithFriendRequestStatus_args.id") | Some _x8410 -> _x8410
  method set_id _x8410 = _id <- Some _x8410
  method unset_id = _id <- None
  method reset_id = _id <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContactWithFriendRequestStatus_args";
    (match _id with None -> () | Some _v -> 
      oprot#writeFieldBegin("id",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContactWithFriendRequestStatus_args (iprot : Protocol.t) =
  let _str8413 = new getContactWithFriendRequestStatus_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8414,_id8415) = iprot#readFieldBegin in
        if _t8414 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8415 with 
          | 2 -> (if _t8414 = Protocol.T_STRING then
              _str8413#set_id iprot#readString
            else
              iprot#skip _t8414)
          | _ -> iprot#skip _t8414);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8413

class getContactWithFriendRequestStatus_result =
object (self)
  val mutable _success : contact option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getContactWithFriendRequestStatus_result.success") | Some _x8416 -> _x8416
  method set_success _x8416 = _success <- Some _x8416
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getContactWithFriendRequestStatus_result.e") | Some _x8417 -> _x8417
  method set_e _x8417 = _e <- Some _x8417
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContactWithFriendRequestStatus_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContactWithFriendRequestStatus_result (iprot : Protocol.t) =
  let _str8420 = new getContactWithFriendRequestStatus_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8421,_id8422) = iprot#readFieldBegin in
        if _t8421 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8422 with 
          | 0 -> (if _t8421 = Protocol.T_STRUCT then
              _str8420#set_success (read_contact iprot)
            else
              iprot#skip _t8421)
          | 1 -> (if _t8421 = Protocol.T_STRUCT then
              _str8420#set_e (read_talkException iprot)
            else
              iprot#skip _t8421)
          | _ -> iprot#skip _t8421);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8420

class getCountryWithRequestIp_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCountryWithRequestIp_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCountryWithRequestIp_args (iprot : Protocol.t) =
  let _str8425 = new getCountryWithRequestIp_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8426,_id8427) = iprot#readFieldBegin in
        if _t8426 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8427 with 
          | _ -> iprot#skip _t8426);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8425

class getCountryWithRequestIp_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCountryWithRequestIp_result.success") | Some _x8428 -> _x8428
  method set_success _x8428 = _success <- Some _x8428
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCountryWithRequestIp_result.e") | Some _x8429 -> _x8429
  method set_e _x8429 = _e <- Some _x8429
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCountryWithRequestIp_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCountryWithRequestIp_result (iprot : Protocol.t) =
  let _str8432 = new getCountryWithRequestIp_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8433,_id8434) = iprot#readFieldBegin in
        if _t8433 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8434 with 
          | 0 -> (if _t8433 = Protocol.T_STRING then
              _str8432#set_success iprot#readString
            else
              iprot#skip _t8433)
          | 1 -> (if _t8433 = Protocol.T_STRUCT then
              _str8432#set_e (read_talkException iprot)
            else
              iprot#skip _t8433)
          | _ -> iprot#skip _t8433);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8432

class getFavoriteMids_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFavoriteMids_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFavoriteMids_args (iprot : Protocol.t) =
  let _str8437 = new getFavoriteMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8438,_id8439) = iprot#readFieldBegin in
        if _t8438 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8439 with 
          | _ -> iprot#skip _t8438);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8437

class getFavoriteMids_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getFavoriteMids_result.success") | Some _x8440 -> _x8440
  method set_success _x8440 = _success <- Some _x8440
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getFavoriteMids_result.e") | Some _x8441 -> _x8441
  method set_e _x8441 = _e <- Some _x8441
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFavoriteMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8444 ->         oprot#writeString(_iter8444);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFavoriteMids_result (iprot : Protocol.t) =
  let _str8445 = new getFavoriteMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8446,_id8447) = iprot#readFieldBegin in
        if _t8446 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8447 with 
          | 0 -> (if _t8446 = Protocol.T_LIST then
              _str8445#set_success 
                (let (_etype8451,_size8448) = iprot#readListBegin in
                  let _con8452 = (Array.to_list (Array.init _size8448 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8452)
            else
              iprot#skip _t8446)
          | 1 -> (if _t8446 = Protocol.T_STRUCT then
              _str8445#set_e (read_talkException iprot)
            else
              iprot#skip _t8446)
          | _ -> iprot#skip _t8446);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8445

class getGroup_args =
object (self)
  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "getGroup_args.groupId") | Some _x8453 -> _x8453
  method set_groupId _x8453 = _groupId <- Some _x8453
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroup_args";
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroup_args (iprot : Protocol.t) =
  let _str8456 = new getGroup_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8457,_id8458) = iprot#readFieldBegin in
        if _t8457 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8458 with 
          | 2 -> (if _t8457 = Protocol.T_STRING then
              _str8456#set_groupId iprot#readString
            else
              iprot#skip _t8457)
          | _ -> iprot#skip _t8457);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8456

class getGroup_result =
object (self)
  val mutable _success : group option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroup_result.success") | Some _x8459 -> _x8459
  method set_success _x8459 = _success <- Some _x8459
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroup_result.e") | Some _x8460 -> _x8460
  method set_e _x8460 = _e <- Some _x8460
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroup_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroup_result (iprot : Protocol.t) =
  let _str8463 = new getGroup_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8464,_id8465) = iprot#readFieldBegin in
        if _t8464 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8465 with 
          | 0 -> (if _t8464 = Protocol.T_STRUCT then
              _str8463#set_success (read_group iprot)
            else
              iprot#skip _t8464)
          | 1 -> (if _t8464 = Protocol.T_STRUCT then
              _str8463#set_e (read_talkException iprot)
            else
              iprot#skip _t8464)
          | _ -> iprot#skip _t8464);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8463

class getGroupIdsInvited_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupIdsInvited_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupIdsInvited_args (iprot : Protocol.t) =
  let _str8468 = new getGroupIdsInvited_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8469,_id8470) = iprot#readFieldBegin in
        if _t8469 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8470 with 
          | _ -> iprot#skip _t8469);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8468

class getGroupIdsInvited_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupIdsInvited_result.success") | Some _x8471 -> _x8471
  method set_success _x8471 = _success <- Some _x8471
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupIdsInvited_result.e") | Some _x8472 -> _x8472
  method set_e _x8472 = _e <- Some _x8472
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupIdsInvited_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8475 ->         oprot#writeString(_iter8475);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupIdsInvited_result (iprot : Protocol.t) =
  let _str8476 = new getGroupIdsInvited_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8477,_id8478) = iprot#readFieldBegin in
        if _t8477 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8478 with 
          | 0 -> (if _t8477 = Protocol.T_LIST then
              _str8476#set_success 
                (let (_etype8482,_size8479) = iprot#readListBegin in
                  let _con8483 = (Array.to_list (Array.init _size8479 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8483)
            else
              iprot#skip _t8477)
          | 1 -> (if _t8477 = Protocol.T_STRUCT then
              _str8476#set_e (read_talkException iprot)
            else
              iprot#skip _t8477)
          | _ -> iprot#skip _t8477);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8476

class getGroupIdsJoined_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupIdsJoined_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupIdsJoined_args (iprot : Protocol.t) =
  let _str8486 = new getGroupIdsJoined_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8487,_id8488) = iprot#readFieldBegin in
        if _t8487 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8488 with 
          | _ -> iprot#skip _t8487);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8486

class getGroupIdsJoined_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupIdsJoined_result.success") | Some _x8489 -> _x8489
  method set_success _x8489 = _success <- Some _x8489
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupIdsJoined_result.e") | Some _x8490 -> _x8490
  method set_e _x8490 = _e <- Some _x8490
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupIdsJoined_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8493 ->         oprot#writeString(_iter8493);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupIdsJoined_result (iprot : Protocol.t) =
  let _str8494 = new getGroupIdsJoined_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8495,_id8496) = iprot#readFieldBegin in
        if _t8495 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8496 with 
          | 0 -> (if _t8495 = Protocol.T_LIST then
              _str8494#set_success 
                (let (_etype8500,_size8497) = iprot#readListBegin in
                  let _con8501 = (Array.to_list (Array.init _size8497 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8501)
            else
              iprot#skip _t8495)
          | 1 -> (if _t8495 = Protocol.T_STRUCT then
              _str8494#set_e (read_talkException iprot)
            else
              iprot#skip _t8495)
          | _ -> iprot#skip _t8495);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8494

class getGroups_args =
object (self)
  val mutable _groupIds : string list option = None
  method get_groupIds = _groupIds
  method grab_groupIds = match _groupIds with None->raise (Field_empty "getGroups_args.groupIds") | Some _x8502 -> _x8502
  method set_groupIds _x8502 = _groupIds <- Some _x8502
  method unset_groupIds = _groupIds <- None
  method reset_groupIds = _groupIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroups_args";
    (match _groupIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupIds",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8505 ->         oprot#writeString(_iter8505);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroups_args (iprot : Protocol.t) =
  let _str8506 = new getGroups_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8507,_id8508) = iprot#readFieldBegin in
        if _t8507 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8508 with 
          | 2 -> (if _t8507 = Protocol.T_LIST then
              _str8506#set_groupIds 
                (let (_etype8512,_size8509) = iprot#readListBegin in
                  let _con8513 = (Array.to_list (Array.init _size8509 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8513)
            else
              iprot#skip _t8507)
          | _ -> iprot#skip _t8507);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8506

class getGroups_result =
object (self)
  val mutable _success : group list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroups_result.success") | Some _x8514 -> _x8514
  method set_success _x8514 = _success <- Some _x8514
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroups_result.e") | Some _x8515 -> _x8515
  method set_e _x8515 = _e <- Some _x8515
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroups_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8518 ->         _iter8518#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroups_result (iprot : Protocol.t) =
  let _str8519 = new getGroups_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8520,_id8521) = iprot#readFieldBegin in
        if _t8520 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8521 with 
          | 0 -> (if _t8520 = Protocol.T_LIST then
              _str8519#set_success 
                (let (_etype8525,_size8522) = iprot#readListBegin in
                  let _con8526 = (Array.to_list (Array.init _size8522 (fun _ -> (read_group iprot)))) in
                    iprot#readListEnd; _con8526)
            else
              iprot#skip _t8520)
          | 1 -> (if _t8520 = Protocol.T_STRUCT then
              _str8519#set_e (read_talkException iprot)
            else
              iprot#skip _t8520)
          | _ -> iprot#skip _t8520);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8519

class getHiddenContactMids_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getHiddenContactMids_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getHiddenContactMids_args (iprot : Protocol.t) =
  let _str8529 = new getHiddenContactMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8530,_id8531) = iprot#readFieldBegin in
        if _t8530 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8531 with 
          | _ -> iprot#skip _t8530);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8529

class getHiddenContactMids_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getHiddenContactMids_result.success") | Some _x8532 -> _x8532
  method set_success _x8532 = _success <- Some _x8532
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getHiddenContactMids_result.e") | Some _x8533 -> _x8533
  method set_e _x8533 = _e <- Some _x8533
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getHiddenContactMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8536 ->         oprot#writeString(_iter8536);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getHiddenContactMids_result (iprot : Protocol.t) =
  let _str8537 = new getHiddenContactMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8538,_id8539) = iprot#readFieldBegin in
        if _t8538 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8539 with 
          | 0 -> (if _t8538 = Protocol.T_LIST then
              _str8537#set_success 
                (let (_etype8543,_size8540) = iprot#readListBegin in
                  let _con8544 = (Array.to_list (Array.init _size8540 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8544)
            else
              iprot#skip _t8538)
          | 1 -> (if _t8538 = Protocol.T_STRUCT then
              _str8537#set_e (read_talkException iprot)
            else
              iprot#skip _t8538)
          | _ -> iprot#skip _t8538);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8537

class getIdentityIdentifier_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getIdentityIdentifier_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getIdentityIdentifier_args (iprot : Protocol.t) =
  let _str8547 = new getIdentityIdentifier_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8548,_id8549) = iprot#readFieldBegin in
        if _t8548 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8549 with 
          | _ -> iprot#skip _t8548);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8547

class getIdentityIdentifier_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getIdentityIdentifier_result.success") | Some _x8550 -> _x8550
  method set_success _x8550 = _success <- Some _x8550
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getIdentityIdentifier_result.e") | Some _x8551 -> _x8551
  method set_e _x8551 = _e <- Some _x8551
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getIdentityIdentifier_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getIdentityIdentifier_result (iprot : Protocol.t) =
  let _str8554 = new getIdentityIdentifier_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8555,_id8556) = iprot#readFieldBegin in
        if _t8555 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8556 with 
          | 0 -> (if _t8555 = Protocol.T_STRING then
              _str8554#set_success iprot#readString
            else
              iprot#skip _t8555)
          | 1 -> (if _t8555 = Protocol.T_STRUCT then
              _str8554#set_e (read_talkException iprot)
            else
              iprot#skip _t8555)
          | _ -> iprot#skip _t8555);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8554

class getLastAnnouncementIndex_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getLastAnnouncementIndex_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getLastAnnouncementIndex_args (iprot : Protocol.t) =
  let _str8559 = new getLastAnnouncementIndex_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8560,_id8561) = iprot#readFieldBegin in
        if _t8560 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8561 with 
          | _ -> iprot#skip _t8560);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8559

class getLastAnnouncementIndex_result =
object (self)
  val mutable _success : Int32.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getLastAnnouncementIndex_result.success") | Some _x8562 -> _x8562
  method set_success _x8562 = _success <- Some _x8562
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getLastAnnouncementIndex_result.e") | Some _x8563 -> _x8563
  method set_e _x8563 = _e <- Some _x8563
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getLastAnnouncementIndex_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I32,0);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getLastAnnouncementIndex_result (iprot : Protocol.t) =
  let _str8566 = new getLastAnnouncementIndex_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8567,_id8568) = iprot#readFieldBegin in
        if _t8567 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8568 with 
          | 0 -> (if _t8567 = Protocol.T_I32 then
              _str8566#set_success iprot#readI32
            else
              iprot#skip _t8567)
          | 1 -> (if _t8567 = Protocol.T_STRUCT then
              _str8566#set_e (read_talkException iprot)
            else
              iprot#skip _t8567)
          | _ -> iprot#skip _t8567);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8566

class getLastOpRevision_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getLastOpRevision_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getLastOpRevision_args (iprot : Protocol.t) =
  let _str8571 = new getLastOpRevision_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8572,_id8573) = iprot#readFieldBegin in
        if _t8572 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8573 with 
          | _ -> iprot#skip _t8572);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8571

class getLastOpRevision_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getLastOpRevision_result.success") | Some _x8574 -> _x8574
  method set_success _x8574 = _success <- Some _x8574
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getLastOpRevision_result.e") | Some _x8575 -> _x8575
  method set_e _x8575 = _e <- Some _x8575
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getLastOpRevision_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getLastOpRevision_result (iprot : Protocol.t) =
  let _str8578 = new getLastOpRevision_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8579,_id8580) = iprot#readFieldBegin in
        if _t8579 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8580 with 
          | 0 -> (if _t8579 = Protocol.T_I64 then
              _str8578#set_success iprot#readI64
            else
              iprot#skip _t8579)
          | 1 -> (if _t8579 = Protocol.T_STRUCT then
              _str8578#set_e (read_talkException iprot)
            else
              iprot#skip _t8579)
          | _ -> iprot#skip _t8579);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8578

class getSuggestRevisions_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSuggestRevisions_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSuggestRevisions_args (iprot : Protocol.t) =
  let _str8583 = new getSuggestRevisions_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8584,_id8585) = iprot#readFieldBegin in
        if _t8584 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8585 with 
          | _ -> iprot#skip _t8584);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8583

class getSuggestRevisions_result =
object (self)
  val mutable _success : suggestDictionaryRevisions option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSuggestRevisions_result.success") | Some _x8586 -> _x8586
  method set_success _x8586 = _success <- Some _x8586
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSuggestRevisions_result.e") | Some _x8587 -> _x8587
  method set_e _x8587 = _e <- Some _x8587
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSuggestRevisions_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSuggestRevisions_result (iprot : Protocol.t) =
  let _str8590 = new getSuggestRevisions_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8591,_id8592) = iprot#readFieldBegin in
        if _t8591 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8592 with 
          | 0 -> (if _t8591 = Protocol.T_STRUCT then
              _str8590#set_success (read_suggestDictionaryRevisions iprot)
            else
              iprot#skip _t8591)
          | 1 -> (if _t8591 = Protocol.T_STRUCT then
              _str8590#set_e (read_talkException iprot)
            else
              iprot#skip _t8591)
          | _ -> iprot#skip _t8591);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8590

class getPreviousMessagesV2WithReadCount_args =
object (self)
  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "getPreviousMessagesV2WithReadCount_args.messageBoxId") | Some _x8593 -> _x8593
  method set_messageBoxId _x8593 = _messageBoxId <- Some _x8593
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  val mutable _endMessageId : messageBoxV2MessageId option = None
  method get_endMessageId = _endMessageId
  method grab_endMessageId = match _endMessageId with None->raise (Field_empty "getPreviousMessagesV2WithReadCount_args.endMessageId") | Some _x8594 -> _x8594
  method set_endMessageId _x8594 = _endMessageId <- Some _x8594
  method unset_endMessageId = _endMessageId <- None
  method reset_endMessageId = _endMessageId <- None

  val mutable _messagesCount : Int32.t option = None
  method get_messagesCount = _messagesCount
  method grab_messagesCount = match _messagesCount with None->raise (Field_empty "getPreviousMessagesV2WithReadCount_args.messagesCount") | Some _x8595 -> _x8595
  method set_messagesCount _x8595 = _messagesCount <- Some _x8595
  method unset_messagesCount = _messagesCount <- None
  method reset_messagesCount = _messagesCount <- None

  method copy =
      let _new = Oo.copy self in
      if _endMessageId <> None then
        _new#set_endMessageId self#grab_endMessageId#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPreviousMessagesV2WithReadCount_args";
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _endMessageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("endMessageId",Protocol.T_STRUCT,3);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _messagesCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("messagesCount",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPreviousMessagesV2WithReadCount_args (iprot : Protocol.t) =
  let _str8598 = new getPreviousMessagesV2WithReadCount_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8599,_id8600) = iprot#readFieldBegin in
        if _t8599 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8600 with 
          | 2 -> (if _t8599 = Protocol.T_STRING then
              _str8598#set_messageBoxId iprot#readString
            else
              iprot#skip _t8599)
          | 3 -> (if _t8599 = Protocol.T_STRUCT then
              _str8598#set_endMessageId (read_messageBoxV2MessageId iprot)
            else
              iprot#skip _t8599)
          | 4 -> (if _t8599 = Protocol.T_I32 then
              _str8598#set_messagesCount iprot#readI32
            else
              iprot#skip _t8599)
          | _ -> iprot#skip _t8599);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8598

class getPreviousMessagesV2WithReadCount_result =
object (self)
  val mutable _success : message list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPreviousMessagesV2WithReadCount_result.success") | Some _x8601 -> _x8601
  method set_success _x8601 = _success <- Some _x8601
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPreviousMessagesV2WithReadCount_result.e") | Some _x8602 -> _x8602
  method set_e _x8602 = _e <- Some _x8602
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPreviousMessagesV2WithReadCount_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8605 ->         _iter8605#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPreviousMessagesV2WithReadCount_result (iprot : Protocol.t) =
  let _str8606 = new getPreviousMessagesV2WithReadCount_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8607,_id8608) = iprot#readFieldBegin in
        if _t8607 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8608 with 
          | 0 -> (if _t8607 = Protocol.T_LIST then
              _str8606#set_success 
                (let (_etype8612,_size8609) = iprot#readListBegin in
                  let _con8613 = (Array.to_list (Array.init _size8609 (fun _ -> (read_message iprot)))) in
                    iprot#readListEnd; _con8613)
            else
              iprot#skip _t8607)
          | 1 -> (if _t8607 = Protocol.T_STRUCT then
              _str8606#set_e (read_talkException iprot)
            else
              iprot#skip _t8607)
          | _ -> iprot#skip _t8607);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8606

class getMessageBox_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "getMessageBox_args.channelId") | Some _x8614 -> _x8614
  method set_channelId _x8614 = _channelId <- Some _x8614
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "getMessageBox_args.messageBoxId") | Some _x8615 -> _x8615
  method set_messageBoxId _x8615 = _messageBoxId <- Some _x8615
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  val mutable _lastMessagesCount : Int32.t option = None
  method get_lastMessagesCount = _lastMessagesCount
  method grab_lastMessagesCount = match _lastMessagesCount with None->raise (Field_empty "getMessageBox_args.lastMessagesCount") | Some _x8616 -> _x8616
  method set_lastMessagesCount _x8616 = _lastMessagesCount <- Some _x8616
  method unset_lastMessagesCount = _lastMessagesCount <- None
  method reset_lastMessagesCount = _lastMessagesCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBox_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _lastMessagesCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastMessagesCount",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBox_args (iprot : Protocol.t) =
  let _str8619 = new getMessageBox_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8620,_id8621) = iprot#readFieldBegin in
        if _t8620 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8621 with 
          | 2 -> (if _t8620 = Protocol.T_STRING then
              _str8619#set_channelId iprot#readString
            else
              iprot#skip _t8620)
          | 3 -> (if _t8620 = Protocol.T_STRING then
              _str8619#set_messageBoxId iprot#readString
            else
              iprot#skip _t8620)
          | 4 -> (if _t8620 = Protocol.T_I32 then
              _str8619#set_lastMessagesCount iprot#readI32
            else
              iprot#skip _t8620)
          | _ -> iprot#skip _t8620);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8619

class getMessageBox_result =
object (self)
  val mutable _success : tMessageBox option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessageBox_result.success") | Some _x8622 -> _x8622
  method set_success _x8622 = _success <- Some _x8622
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessageBox_result.e") | Some _x8623 -> _x8623
  method set_e _x8623 = _e <- Some _x8623
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBox_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBox_result (iprot : Protocol.t) =
  let _str8626 = new getMessageBox_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8627,_id8628) = iprot#readFieldBegin in
        if _t8627 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8628 with 
          | 0 -> (if _t8627 = Protocol.T_STRUCT then
              _str8626#set_success (read_tMessageBox iprot)
            else
              iprot#skip _t8627)
          | 1 -> (if _t8627 = Protocol.T_STRUCT then
              _str8626#set_e (read_talkException iprot)
            else
              iprot#skip _t8627)
          | _ -> iprot#skip _t8627);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8626

class getMessageBoxCompactWrapUp_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "getMessageBoxCompactWrapUp_args.mid") | Some _x8629 -> _x8629
  method set_mid _x8629 = _mid <- Some _x8629
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxCompactWrapUp_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxCompactWrapUp_args (iprot : Protocol.t) =
  let _str8632 = new getMessageBoxCompactWrapUp_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8633,_id8634) = iprot#readFieldBegin in
        if _t8633 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8634 with 
          | 2 -> (if _t8633 = Protocol.T_STRING then
              _str8632#set_mid iprot#readString
            else
              iprot#skip _t8633)
          | _ -> iprot#skip _t8633);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8632

class getMessageBoxCompactWrapUp_result =
object (self)
  val mutable _success : tMessageBoxWrapUp option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessageBoxCompactWrapUp_result.success") | Some _x8635 -> _x8635
  method set_success _x8635 = _success <- Some _x8635
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessageBoxCompactWrapUp_result.e") | Some _x8636 -> _x8636
  method set_e _x8636 = _e <- Some _x8636
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxCompactWrapUp_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxCompactWrapUp_result (iprot : Protocol.t) =
  let _str8639 = new getMessageBoxCompactWrapUp_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8640,_id8641) = iprot#readFieldBegin in
        if _t8640 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8641 with 
          | 0 -> (if _t8640 = Protocol.T_STRUCT then
              _str8639#set_success (read_tMessageBoxWrapUp iprot)
            else
              iprot#skip _t8640)
          | 1 -> (if _t8640 = Protocol.T_STRUCT then
              _str8639#set_e (read_talkException iprot)
            else
              iprot#skip _t8640)
          | _ -> iprot#skip _t8640);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8639

class getMessageBoxCompactWrapUpList_args =
object (self)
  val mutable _start : Int32.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getMessageBoxCompactWrapUpList_args.start") | Some _x8642 -> _x8642
  method set_start _x8642 = _start <- Some _x8642
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _messageBoxCount : Int32.t option = None
  method get_messageBoxCount = _messageBoxCount
  method grab_messageBoxCount = match _messageBoxCount with None->raise (Field_empty "getMessageBoxCompactWrapUpList_args.messageBoxCount") | Some _x8643 -> _x8643
  method set_messageBoxCount _x8643 = _messageBoxCount <- Some _x8643
  method unset_messageBoxCount = _messageBoxCount <- None
  method reset_messageBoxCount = _messageBoxCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxCompactWrapUpList_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I32,2);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _messageBoxCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxCount",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxCompactWrapUpList_args (iprot : Protocol.t) =
  let _str8646 = new getMessageBoxCompactWrapUpList_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8647,_id8648) = iprot#readFieldBegin in
        if _t8647 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8648 with 
          | 2 -> (if _t8647 = Protocol.T_I32 then
              _str8646#set_start iprot#readI32
            else
              iprot#skip _t8647)
          | 3 -> (if _t8647 = Protocol.T_I32 then
              _str8646#set_messageBoxCount iprot#readI32
            else
              iprot#skip _t8647)
          | _ -> iprot#skip _t8647);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8646

class getMessageBoxCompactWrapUpList_result =
object (self)
  val mutable _success : tMessageBoxWrapUpResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessageBoxCompactWrapUpList_result.success") | Some _x8649 -> _x8649
  method set_success _x8649 = _success <- Some _x8649
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessageBoxCompactWrapUpList_result.e") | Some _x8650 -> _x8650
  method set_e _x8650 = _e <- Some _x8650
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxCompactWrapUpList_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxCompactWrapUpList_result (iprot : Protocol.t) =
  let _str8653 = new getMessageBoxCompactWrapUpList_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8654,_id8655) = iprot#readFieldBegin in
        if _t8654 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8655 with 
          | 0 -> (if _t8654 = Protocol.T_STRUCT then
              _str8653#set_success (read_tMessageBoxWrapUpResponse iprot)
            else
              iprot#skip _t8654)
          | 1 -> (if _t8654 = Protocol.T_STRUCT then
              _str8653#set_e (read_talkException iprot)
            else
              iprot#skip _t8654)
          | _ -> iprot#skip _t8654);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8653

class getMessageBoxList_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "getMessageBoxList_args.channelId") | Some _x8656 -> _x8656
  method set_channelId _x8656 = _channelId <- Some _x8656
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _lastMessagesCount : Int32.t option = None
  method get_lastMessagesCount = _lastMessagesCount
  method grab_lastMessagesCount = match _lastMessagesCount with None->raise (Field_empty "getMessageBoxList_args.lastMessagesCount") | Some _x8657 -> _x8657
  method set_lastMessagesCount _x8657 = _lastMessagesCount <- Some _x8657
  method unset_lastMessagesCount = _lastMessagesCount <- None
  method reset_lastMessagesCount = _lastMessagesCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxList_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _lastMessagesCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastMessagesCount",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxList_args (iprot : Protocol.t) =
  let _str8660 = new getMessageBoxList_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8661,_id8662) = iprot#readFieldBegin in
        if _t8661 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8662 with 
          | 2 -> (if _t8661 = Protocol.T_STRING then
              _str8660#set_channelId iprot#readString
            else
              iprot#skip _t8661)
          | 3 -> (if _t8661 = Protocol.T_I32 then
              _str8660#set_lastMessagesCount iprot#readI32
            else
              iprot#skip _t8661)
          | _ -> iprot#skip _t8661);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8660

class getMessageBoxList_result =
object (self)
  val mutable _success : tMessageBox list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessageBoxList_result.success") | Some _x8663 -> _x8663
  method set_success _x8663 = _success <- Some _x8663
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessageBoxList_result.e") | Some _x8664 -> _x8664
  method set_e _x8664 = _e <- Some _x8664
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxList_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8667 ->         _iter8667#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxList_result (iprot : Protocol.t) =
  let _str8668 = new getMessageBoxList_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8669,_id8670) = iprot#readFieldBegin in
        if _t8669 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8670 with 
          | 0 -> (if _t8669 = Protocol.T_LIST then
              _str8668#set_success 
                (let (_etype8674,_size8671) = iprot#readListBegin in
                  let _con8675 = (Array.to_list (Array.init _size8671 (fun _ -> (read_tMessageBox iprot)))) in
                    iprot#readListEnd; _con8675)
            else
              iprot#skip _t8669)
          | 1 -> (if _t8669 = Protocol.T_STRUCT then
              _str8668#set_e (read_talkException iprot)
            else
              iprot#skip _t8669)
          | _ -> iprot#skip _t8669);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8668

class getMessageBoxListByStatus_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "getMessageBoxListByStatus_args.channelId") | Some _x8676 -> _x8676
  method set_channelId _x8676 = _channelId <- Some _x8676
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _lastMessagesCount : Int32.t option = None
  method get_lastMessagesCount = _lastMessagesCount
  method grab_lastMessagesCount = match _lastMessagesCount with None->raise (Field_empty "getMessageBoxListByStatus_args.lastMessagesCount") | Some _x8677 -> _x8677
  method set_lastMessagesCount _x8677 = _lastMessagesCount <- Some _x8677
  method unset_lastMessagesCount = _lastMessagesCount <- None
  method reset_lastMessagesCount = _lastMessagesCount <- None

  val mutable _status : Int32.t option = None
  method get_status = _status
  method grab_status = match _status with None->raise (Field_empty "getMessageBoxListByStatus_args.status") | Some _x8678 -> _x8678
  method set_status _x8678 = _status <- Some _x8678
  method unset_status = _status <- None
  method reset_status = _status <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxListByStatus_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _lastMessagesCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastMessagesCount",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _status with None -> () | Some _v -> 
      oprot#writeFieldBegin("status",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxListByStatus_args (iprot : Protocol.t) =
  let _str8681 = new getMessageBoxListByStatus_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8682,_id8683) = iprot#readFieldBegin in
        if _t8682 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8683 with 
          | 2 -> (if _t8682 = Protocol.T_STRING then
              _str8681#set_channelId iprot#readString
            else
              iprot#skip _t8682)
          | 3 -> (if _t8682 = Protocol.T_I32 then
              _str8681#set_lastMessagesCount iprot#readI32
            else
              iprot#skip _t8682)
          | 4 -> (if _t8682 = Protocol.T_I32 then
              _str8681#set_status iprot#readI32
            else
              iprot#skip _t8682)
          | _ -> iprot#skip _t8682);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8681

class getMessageBoxListByStatus_result =
object (self)
  val mutable _success : tMessageBox list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessageBoxListByStatus_result.success") | Some _x8684 -> _x8684
  method set_success _x8684 = _success <- Some _x8684
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessageBoxListByStatus_result.e") | Some _x8685 -> _x8685
  method set_e _x8685 = _e <- Some _x8685
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxListByStatus_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8688 ->         _iter8688#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxListByStatus_result (iprot : Protocol.t) =
  let _str8689 = new getMessageBoxListByStatus_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8690,_id8691) = iprot#readFieldBegin in
        if _t8690 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8691 with 
          | 0 -> (if _t8690 = Protocol.T_LIST then
              _str8689#set_success 
                (let (_etype8695,_size8692) = iprot#readListBegin in
                  let _con8696 = (Array.to_list (Array.init _size8692 (fun _ -> (read_tMessageBox iprot)))) in
                    iprot#readListEnd; _con8696)
            else
              iprot#skip _t8690)
          | 1 -> (if _t8690 = Protocol.T_STRUCT then
              _str8689#set_e (read_talkException iprot)
            else
              iprot#skip _t8690)
          | _ -> iprot#skip _t8690);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8689

class getMessageBoxWrapUp_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "getMessageBoxWrapUp_args.mid") | Some _x8697 -> _x8697
  method set_mid _x8697 = _mid <- Some _x8697
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxWrapUp_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxWrapUp_args (iprot : Protocol.t) =
  let _str8700 = new getMessageBoxWrapUp_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8701,_id8702) = iprot#readFieldBegin in
        if _t8701 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8702 with 
          | 2 -> (if _t8701 = Protocol.T_STRING then
              _str8700#set_mid iprot#readString
            else
              iprot#skip _t8701)
          | _ -> iprot#skip _t8701);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8700

class getMessageBoxWrapUp_result =
object (self)
  val mutable _success : tMessageBoxWrapUp option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessageBoxWrapUp_result.success") | Some _x8703 -> _x8703
  method set_success _x8703 = _success <- Some _x8703
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessageBoxWrapUp_result.e") | Some _x8704 -> _x8704
  method set_e _x8704 = _e <- Some _x8704
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxWrapUp_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxWrapUp_result (iprot : Protocol.t) =
  let _str8707 = new getMessageBoxWrapUp_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8708,_id8709) = iprot#readFieldBegin in
        if _t8708 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8709 with 
          | 0 -> (if _t8708 = Protocol.T_STRUCT then
              _str8707#set_success (read_tMessageBoxWrapUp iprot)
            else
              iprot#skip _t8708)
          | 1 -> (if _t8708 = Protocol.T_STRUCT then
              _str8707#set_e (read_talkException iprot)
            else
              iprot#skip _t8708)
          | _ -> iprot#skip _t8708);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8707

class getMessageBoxWrapUpList_args =
object (self)
  val mutable _start : Int32.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getMessageBoxWrapUpList_args.start") | Some _x8710 -> _x8710
  method set_start _x8710 = _start <- Some _x8710
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _messageBoxCount : Int32.t option = None
  method get_messageBoxCount = _messageBoxCount
  method grab_messageBoxCount = match _messageBoxCount with None->raise (Field_empty "getMessageBoxWrapUpList_args.messageBoxCount") | Some _x8711 -> _x8711
  method set_messageBoxCount _x8711 = _messageBoxCount <- Some _x8711
  method unset_messageBoxCount = _messageBoxCount <- None
  method reset_messageBoxCount = _messageBoxCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxWrapUpList_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I32,2);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _messageBoxCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxCount",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxWrapUpList_args (iprot : Protocol.t) =
  let _str8714 = new getMessageBoxWrapUpList_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8715,_id8716) = iprot#readFieldBegin in
        if _t8715 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8716 with 
          | 2 -> (if _t8715 = Protocol.T_I32 then
              _str8714#set_start iprot#readI32
            else
              iprot#skip _t8715)
          | 3 -> (if _t8715 = Protocol.T_I32 then
              _str8714#set_messageBoxCount iprot#readI32
            else
              iprot#skip _t8715)
          | _ -> iprot#skip _t8715);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8714

class getMessageBoxWrapUpList_result =
object (self)
  val mutable _success : tMessageBoxWrapUpResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessageBoxWrapUpList_result.success") | Some _x8717 -> _x8717
  method set_success _x8717 = _success <- Some _x8717
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessageBoxWrapUpList_result.e") | Some _x8718 -> _x8718
  method set_e _x8718 = _e <- Some _x8718
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxWrapUpList_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxWrapUpList_result (iprot : Protocol.t) =
  let _str8721 = new getMessageBoxWrapUpList_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8722,_id8723) = iprot#readFieldBegin in
        if _t8722 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8723 with 
          | 0 -> (if _t8722 = Protocol.T_STRUCT then
              _str8721#set_success (read_tMessageBoxWrapUpResponse iprot)
            else
              iprot#skip _t8722)
          | 1 -> (if _t8722 = Protocol.T_STRUCT then
              _str8721#set_e (read_talkException iprot)
            else
              iprot#skip _t8722)
          | _ -> iprot#skip _t8722);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8721

class getMessagesBySequenceNumber_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "getMessagesBySequenceNumber_args.channelId") | Some _x8724 -> _x8724
  method set_channelId _x8724 = _channelId <- Some _x8724
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "getMessagesBySequenceNumber_args.messageBoxId") | Some _x8725 -> _x8725
  method set_messageBoxId _x8725 = _messageBoxId <- Some _x8725
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  val mutable _startSeq : Int64.t option = None
  method get_startSeq = _startSeq
  method grab_startSeq = match _startSeq with None->raise (Field_empty "getMessagesBySequenceNumber_args.startSeq") | Some _x8726 -> _x8726
  method set_startSeq _x8726 = _startSeq <- Some _x8726
  method unset_startSeq = _startSeq <- None
  method reset_startSeq = _startSeq <- None

  val mutable _endSeq : Int64.t option = None
  method get_endSeq = _endSeq
  method grab_endSeq = match _endSeq with None->raise (Field_empty "getMessagesBySequenceNumber_args.endSeq") | Some _x8727 -> _x8727
  method set_endSeq _x8727 = _endSeq <- Some _x8727
  method unset_endSeq = _endSeq <- None
  method reset_endSeq = _endSeq <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessagesBySequenceNumber_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _startSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("startSeq",Protocol.T_I64,4);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _endSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("endSeq",Protocol.T_I64,5);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessagesBySequenceNumber_args (iprot : Protocol.t) =
  let _str8730 = new getMessagesBySequenceNumber_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8731,_id8732) = iprot#readFieldBegin in
        if _t8731 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8732 with 
          | 2 -> (if _t8731 = Protocol.T_STRING then
              _str8730#set_channelId iprot#readString
            else
              iprot#skip _t8731)
          | 3 -> (if _t8731 = Protocol.T_STRING then
              _str8730#set_messageBoxId iprot#readString
            else
              iprot#skip _t8731)
          | 4 -> (if _t8731 = Protocol.T_I64 then
              _str8730#set_startSeq iprot#readI64
            else
              iprot#skip _t8731)
          | 5 -> (if _t8731 = Protocol.T_I64 then
              _str8730#set_endSeq iprot#readI64
            else
              iprot#skip _t8731)
          | _ -> iprot#skip _t8731);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8730

class getMessagesBySequenceNumber_result =
object (self)
  val mutable _success : message list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessagesBySequenceNumber_result.success") | Some _x8733 -> _x8733
  method set_success _x8733 = _success <- Some _x8733
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessagesBySequenceNumber_result.e") | Some _x8734 -> _x8734
  method set_e _x8734 = _e <- Some _x8734
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessagesBySequenceNumber_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8737 ->         _iter8737#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessagesBySequenceNumber_result (iprot : Protocol.t) =
  let _str8738 = new getMessagesBySequenceNumber_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8739,_id8740) = iprot#readFieldBegin in
        if _t8739 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8740 with 
          | 0 -> (if _t8739 = Protocol.T_LIST then
              _str8738#set_success 
                (let (_etype8744,_size8741) = iprot#readListBegin in
                  let _con8745 = (Array.to_list (Array.init _size8741 (fun _ -> (read_message iprot)))) in
                    iprot#readListEnd; _con8745)
            else
              iprot#skip _t8739)
          | 1 -> (if _t8739 = Protocol.T_STRUCT then
              _str8738#set_e (read_talkException iprot)
            else
              iprot#skip _t8739)
          | _ -> iprot#skip _t8739);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8738

class getNextMessages_args =
object (self)
  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "getNextMessages_args.messageBoxId") | Some _x8746 -> _x8746
  method set_messageBoxId _x8746 = _messageBoxId <- Some _x8746
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  val mutable _startSeq : Int64.t option = None
  method get_startSeq = _startSeq
  method grab_startSeq = match _startSeq with None->raise (Field_empty "getNextMessages_args.startSeq") | Some _x8747 -> _x8747
  method set_startSeq _x8747 = _startSeq <- Some _x8747
  method unset_startSeq = _startSeq <- None
  method reset_startSeq = _startSeq <- None

  val mutable _messagesCount : Int32.t option = None
  method get_messagesCount = _messagesCount
  method grab_messagesCount = match _messagesCount with None->raise (Field_empty "getNextMessages_args.messagesCount") | Some _x8748 -> _x8748
  method set_messagesCount _x8748 = _messagesCount <- Some _x8748
  method unset_messagesCount = _messagesCount <- None
  method reset_messagesCount = _messagesCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNextMessages_args";
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _startSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("startSeq",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _messagesCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("messagesCount",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNextMessages_args (iprot : Protocol.t) =
  let _str8751 = new getNextMessages_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8752,_id8753) = iprot#readFieldBegin in
        if _t8752 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8753 with 
          | 2 -> (if _t8752 = Protocol.T_STRING then
              _str8751#set_messageBoxId iprot#readString
            else
              iprot#skip _t8752)
          | 3 -> (if _t8752 = Protocol.T_I64 then
              _str8751#set_startSeq iprot#readI64
            else
              iprot#skip _t8752)
          | 4 -> (if _t8752 = Protocol.T_I32 then
              _str8751#set_messagesCount iprot#readI32
            else
              iprot#skip _t8752)
          | _ -> iprot#skip _t8752);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8751

class getNextMessages_result =
object (self)
  val mutable _success : message list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getNextMessages_result.success") | Some _x8754 -> _x8754
  method set_success _x8754 = _success <- Some _x8754
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getNextMessages_result.e") | Some _x8755 -> _x8755
  method set_e _x8755 = _e <- Some _x8755
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNextMessages_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8758 ->         _iter8758#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNextMessages_result (iprot : Protocol.t) =
  let _str8759 = new getNextMessages_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8760,_id8761) = iprot#readFieldBegin in
        if _t8760 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8761 with 
          | 0 -> (if _t8760 = Protocol.T_LIST then
              _str8759#set_success 
                (let (_etype8765,_size8762) = iprot#readListBegin in
                  let _con8766 = (Array.to_list (Array.init _size8762 (fun _ -> (read_message iprot)))) in
                    iprot#readListEnd; _con8766)
            else
              iprot#skip _t8760)
          | 1 -> (if _t8760 = Protocol.T_STRUCT then
              _str8759#set_e (read_talkException iprot)
            else
              iprot#skip _t8760)
          | _ -> iprot#skip _t8760);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8759

class getNotificationPolicy_args =
object (self)
  val mutable _carrier : CarrierCode.t option = None
  method get_carrier = _carrier
  method grab_carrier = match _carrier with None->raise (Field_empty "getNotificationPolicy_args.carrier") | Some _x8767 -> _x8767
  method set_carrier _x8767 = _carrier <- Some _x8767
  method unset_carrier = _carrier <- None
  method reset_carrier = _carrier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNotificationPolicy_args";
    (match _carrier with None -> () | Some _v -> 
      oprot#writeFieldBegin("carrier",Protocol.T_I32,2);
      oprot#writeI32(CarrierCode.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNotificationPolicy_args (iprot : Protocol.t) =
  let _str8770 = new getNotificationPolicy_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8771,_id8772) = iprot#readFieldBegin in
        if _t8771 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8772 with 
          | 2 -> (if _t8771 = Protocol.T_I32 then
              _str8770#set_carrier (CarrierCode.of_i iprot#readI32)
            else
              iprot#skip _t8771)
          | _ -> iprot#skip _t8771);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8770

class getNotificationPolicy_result =
object (self)
  val mutable _success : NotificationType.t list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getNotificationPolicy_result.success") | Some _x8773 -> _x8773
  method set_success _x8773 = _success <- Some _x8773
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getNotificationPolicy_result.e") | Some _x8774 -> _x8774
  method set_e _x8774 = _e <- Some _x8774
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNotificationPolicy_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_I32,List.length _v);
      List.iter (fun _iter8777 ->         oprot#writeI32(NotificationType.to_i _iter8777);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNotificationPolicy_result (iprot : Protocol.t) =
  let _str8778 = new getNotificationPolicy_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8779,_id8780) = iprot#readFieldBegin in
        if _t8779 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8780 with 
          | 0 -> (if _t8779 = Protocol.T_LIST then
              _str8778#set_success 
                (let (_etype8784,_size8781) = iprot#readListBegin in
                  let _con8785 = (Array.to_list (Array.init _size8781 (fun _ -> (NotificationType.of_i iprot#readI32)))) in
                    iprot#readListEnd; _con8785)
            else
              iprot#skip _t8779)
          | 1 -> (if _t8779 = Protocol.T_STRUCT then
              _str8778#set_e (read_talkException iprot)
            else
              iprot#skip _t8779)
          | _ -> iprot#skip _t8779);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8778

class getPreviousMessages_args =
object (self)
  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "getPreviousMessages_args.messageBoxId") | Some _x8786 -> _x8786
  method set_messageBoxId _x8786 = _messageBoxId <- Some _x8786
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  val mutable _endSeq : Int64.t option = None
  method get_endSeq = _endSeq
  method grab_endSeq = match _endSeq with None->raise (Field_empty "getPreviousMessages_args.endSeq") | Some _x8787 -> _x8787
  method set_endSeq _x8787 = _endSeq <- Some _x8787
  method unset_endSeq = _endSeq <- None
  method reset_endSeq = _endSeq <- None

  val mutable _messagesCount : Int32.t option = None
  method get_messagesCount = _messagesCount
  method grab_messagesCount = match _messagesCount with None->raise (Field_empty "getPreviousMessages_args.messagesCount") | Some _x8788 -> _x8788
  method set_messagesCount _x8788 = _messagesCount <- Some _x8788
  method unset_messagesCount = _messagesCount <- None
  method reset_messagesCount = _messagesCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPreviousMessages_args";
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _endSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("endSeq",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _messagesCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("messagesCount",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPreviousMessages_args (iprot : Protocol.t) =
  let _str8791 = new getPreviousMessages_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8792,_id8793) = iprot#readFieldBegin in
        if _t8792 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8793 with 
          | 2 -> (if _t8792 = Protocol.T_STRING then
              _str8791#set_messageBoxId iprot#readString
            else
              iprot#skip _t8792)
          | 3 -> (if _t8792 = Protocol.T_I64 then
              _str8791#set_endSeq iprot#readI64
            else
              iprot#skip _t8792)
          | 4 -> (if _t8792 = Protocol.T_I32 then
              _str8791#set_messagesCount iprot#readI32
            else
              iprot#skip _t8792)
          | _ -> iprot#skip _t8792);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8791

class getPreviousMessages_result =
object (self)
  val mutable _success : message list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPreviousMessages_result.success") | Some _x8794 -> _x8794
  method set_success _x8794 = _success <- Some _x8794
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPreviousMessages_result.e") | Some _x8795 -> _x8795
  method set_e _x8795 = _e <- Some _x8795
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPreviousMessages_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8798 ->         _iter8798#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPreviousMessages_result (iprot : Protocol.t) =
  let _str8799 = new getPreviousMessages_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8800,_id8801) = iprot#readFieldBegin in
        if _t8800 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8801 with 
          | 0 -> (if _t8800 = Protocol.T_LIST then
              _str8799#set_success 
                (let (_etype8805,_size8802) = iprot#readListBegin in
                  let _con8806 = (Array.to_list (Array.init _size8802 (fun _ -> (read_message iprot)))) in
                    iprot#readListEnd; _con8806)
            else
              iprot#skip _t8800)
          | 1 -> (if _t8800 = Protocol.T_STRUCT then
              _str8799#set_e (read_talkException iprot)
            else
              iprot#skip _t8800)
          | _ -> iprot#skip _t8800);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8799

class getProfile_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProfile_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProfile_args (iprot : Protocol.t) =
  let _str8809 = new getProfile_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8810,_id8811) = iprot#readFieldBegin in
        if _t8810 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8811 with 
          | _ -> iprot#skip _t8810);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8809

class getProfile_result =
object (self)
  val mutable _success : profile option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProfile_result.success") | Some _x8812 -> _x8812
  method set_success _x8812 = _success <- Some _x8812
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getProfile_result.e") | Some _x8813 -> _x8813
  method set_e _x8813 = _e <- Some _x8813
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProfile_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProfile_result (iprot : Protocol.t) =
  let _str8816 = new getProfile_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8817,_id8818) = iprot#readFieldBegin in
        if _t8817 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8818 with 
          | 0 -> (if _t8817 = Protocol.T_STRUCT then
              _str8816#set_success (read_profile iprot)
            else
              iprot#skip _t8817)
          | 1 -> (if _t8817 = Protocol.T_STRUCT then
              _str8816#set_e (read_talkException iprot)
            else
              iprot#skip _t8817)
          | _ -> iprot#skip _t8817);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8816

class getProximityMatchCandidateList_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "getProximityMatchCandidateList_args.sessionId") | Some _x8819 -> _x8819
  method set_sessionId _x8819 = _sessionId <- Some _x8819
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProximityMatchCandidateList_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProximityMatchCandidateList_args (iprot : Protocol.t) =
  let _str8822 = new getProximityMatchCandidateList_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8823,_id8824) = iprot#readFieldBegin in
        if _t8823 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8824 with 
          | 2 -> (if _t8823 = Protocol.T_STRING then
              _str8822#set_sessionId iprot#readString
            else
              iprot#skip _t8823)
          | _ -> iprot#skip _t8823);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8822

class getProximityMatchCandidateList_result =
object (self)
  val mutable _success : proximityMatchCandidateResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProximityMatchCandidateList_result.success") | Some _x8825 -> _x8825
  method set_success _x8825 = _success <- Some _x8825
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getProximityMatchCandidateList_result.e") | Some _x8826 -> _x8826
  method set_e _x8826 = _e <- Some _x8826
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProximityMatchCandidateList_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProximityMatchCandidateList_result (iprot : Protocol.t) =
  let _str8829 = new getProximityMatchCandidateList_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8830,_id8831) = iprot#readFieldBegin in
        if _t8830 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8831 with 
          | 0 -> (if _t8830 = Protocol.T_STRUCT then
              _str8829#set_success (read_proximityMatchCandidateResult iprot)
            else
              iprot#skip _t8830)
          | 1 -> (if _t8830 = Protocol.T_STRUCT then
              _str8829#set_e (read_talkException iprot)
            else
              iprot#skip _t8830)
          | _ -> iprot#skip _t8830);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8829

class getProximityMatchCandidates_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "getProximityMatchCandidates_args.sessionId") | Some _x8832 -> _x8832
  method set_sessionId _x8832 = _sessionId <- Some _x8832
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProximityMatchCandidates_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProximityMatchCandidates_args (iprot : Protocol.t) =
  let _str8835 = new getProximityMatchCandidates_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8836,_id8837) = iprot#readFieldBegin in
        if _t8836 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8837 with 
          | 2 -> (if _t8836 = Protocol.T_STRING then
              _str8835#set_sessionId iprot#readString
            else
              iprot#skip _t8836)
          | _ -> iprot#skip _t8836);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8835

class getProximityMatchCandidates_result =
object (self)
  val mutable _success : (contact,bool) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProximityMatchCandidates_result.success") | Some _x8838 -> _x8838
  method set_success _x8838 = _success <- Some _x8838
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getProximityMatchCandidates_result.e") | Some _x8839 -> _x8839
  method set_e _x8839 = _e <- Some _x8839
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k#copy true) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProximityMatchCandidates_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_SET,0);
      oprot#writeSetBegin(Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _iter8842 -> fun _ ->         _iter8842#write(oprot);
      ) _v;
      oprot#writeSetEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProximityMatchCandidates_result (iprot : Protocol.t) =
  let _str8843 = new getProximityMatchCandidates_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8844,_id8845) = iprot#readFieldBegin in
        if _t8844 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8845 with 
          | 0 -> (if _t8844 = Protocol.T_SET then
              _str8843#set_success 
                (let (_etype8849,_size8846) = iprot#readSetBegin in
                let _con8850 = Hashtbl.create _size8846 in
                  for i = 1 to _size8846 do
                    Hashtbl.add _con8850 (read_contact iprot) true
                  done; iprot#readSetEnd; _con8850)
            else
              iprot#skip _t8844)
          | 1 -> (if _t8844 = Protocol.T_STRUCT then
              _str8843#set_e (read_talkException iprot)
            else
              iprot#skip _t8844)
          | _ -> iprot#skip _t8844);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8843

class getRecentMessages_args =
object (self)
  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "getRecentMessages_args.messageBoxId") | Some _x8851 -> _x8851
  method set_messageBoxId _x8851 = _messageBoxId <- Some _x8851
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  val mutable _messagesCount : Int32.t option = None
  method get_messagesCount = _messagesCount
  method grab_messagesCount = match _messagesCount with None->raise (Field_empty "getRecentMessages_args.messagesCount") | Some _x8852 -> _x8852
  method set_messagesCount _x8852 = _messagesCount <- Some _x8852
  method unset_messagesCount = _messagesCount <- None
  method reset_messagesCount = _messagesCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRecentMessages_args";
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messagesCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("messagesCount",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRecentMessages_args (iprot : Protocol.t) =
  let _str8855 = new getRecentMessages_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8856,_id8857) = iprot#readFieldBegin in
        if _t8856 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8857 with 
          | 2 -> (if _t8856 = Protocol.T_STRING then
              _str8855#set_messageBoxId iprot#readString
            else
              iprot#skip _t8856)
          | 3 -> (if _t8856 = Protocol.T_I32 then
              _str8855#set_messagesCount iprot#readI32
            else
              iprot#skip _t8856)
          | _ -> iprot#skip _t8856);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8855

class getRecentMessages_result =
object (self)
  val mutable _success : message list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getRecentMessages_result.success") | Some _x8858 -> _x8858
  method set_success _x8858 = _success <- Some _x8858
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getRecentMessages_result.e") | Some _x8859 -> _x8859
  method set_e _x8859 = _e <- Some _x8859
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRecentMessages_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8862 ->         _iter8862#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRecentMessages_result (iprot : Protocol.t) =
  let _str8863 = new getRecentMessages_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8864,_id8865) = iprot#readFieldBegin in
        if _t8864 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8865 with 
          | 0 -> (if _t8864 = Protocol.T_LIST then
              _str8863#set_success 
                (let (_etype8869,_size8866) = iprot#readListBegin in
                  let _con8870 = (Array.to_list (Array.init _size8866 (fun _ -> (read_message iprot)))) in
                    iprot#readListEnd; _con8870)
            else
              iprot#skip _t8864)
          | 1 -> (if _t8864 = Protocol.T_STRUCT then
              _str8863#set_e (read_talkException iprot)
            else
              iprot#skip _t8864)
          | _ -> iprot#skip _t8864);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8863

class getRecommendationIds_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRecommendationIds_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRecommendationIds_args (iprot : Protocol.t) =
  let _str8873 = new getRecommendationIds_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8874,_id8875) = iprot#readFieldBegin in
        if _t8874 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8875 with 
          | _ -> iprot#skip _t8874);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8873

class getRecommendationIds_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getRecommendationIds_result.success") | Some _x8876 -> _x8876
  method set_success _x8876 = _success <- Some _x8876
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getRecommendationIds_result.e") | Some _x8877 -> _x8877
  method set_e _x8877 = _e <- Some _x8877
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRecommendationIds_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8880 ->         oprot#writeString(_iter8880);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRecommendationIds_result (iprot : Protocol.t) =
  let _str8881 = new getRecommendationIds_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8882,_id8883) = iprot#readFieldBegin in
        if _t8882 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8883 with 
          | 0 -> (if _t8882 = Protocol.T_LIST then
              _str8881#set_success 
                (let (_etype8887,_size8884) = iprot#readListBegin in
                  let _con8888 = (Array.to_list (Array.init _size8884 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8888)
            else
              iprot#skip _t8882)
          | 1 -> (if _t8882 = Protocol.T_STRUCT then
              _str8881#set_e (read_talkException iprot)
            else
              iprot#skip _t8882)
          | _ -> iprot#skip _t8882);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8881

class getRoom_args =
object (self)
  val mutable _roomId : string option = None
  method get_roomId = _roomId
  method grab_roomId = match _roomId with None->raise (Field_empty "getRoom_args.roomId") | Some _x8889 -> _x8889
  method set_roomId _x8889 = _roomId <- Some _x8889
  method unset_roomId = _roomId <- None
  method reset_roomId = _roomId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRoom_args";
    (match _roomId with None -> () | Some _v -> 
      oprot#writeFieldBegin("roomId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRoom_args (iprot : Protocol.t) =
  let _str8892 = new getRoom_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8893,_id8894) = iprot#readFieldBegin in
        if _t8893 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8894 with 
          | 2 -> (if _t8893 = Protocol.T_STRING then
              _str8892#set_roomId iprot#readString
            else
              iprot#skip _t8893)
          | _ -> iprot#skip _t8893);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8892

class getRoom_result =
object (self)
  val mutable _success : room option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getRoom_result.success") | Some _x8895 -> _x8895
  method set_success _x8895 = _success <- Some _x8895
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getRoom_result.e") | Some _x8896 -> _x8896
  method set_e _x8896 = _e <- Some _x8896
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRoom_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRoom_result (iprot : Protocol.t) =
  let _str8899 = new getRoom_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8900,_id8901) = iprot#readFieldBegin in
        if _t8900 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8901 with 
          | 0 -> (if _t8900 = Protocol.T_STRUCT then
              _str8899#set_success (read_room iprot)
            else
              iprot#skip _t8900)
          | 1 -> (if _t8900 = Protocol.T_STRUCT then
              _str8899#set_e (read_talkException iprot)
            else
              iprot#skip _t8900)
          | _ -> iprot#skip _t8900);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8899

class getRSAKeyInfo_args =
object (self)
  val mutable _provider : IdentityProvider.t option = None
  method get_provider = _provider
  method grab_provider = match _provider with None->raise (Field_empty "getRSAKeyInfo_args.provider") | Some _x8902 -> _x8902
  method set_provider _x8902 = _provider <- Some _x8902
  method unset_provider = _provider <- None
  method reset_provider = _provider <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRSAKeyInfo_args";
    (match _provider with None -> () | Some _v -> 
      oprot#writeFieldBegin("provider",Protocol.T_I32,2);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRSAKeyInfo_args (iprot : Protocol.t) =
  let _str8905 = new getRSAKeyInfo_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8906,_id8907) = iprot#readFieldBegin in
        if _t8906 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8907 with 
          | 2 -> (if _t8906 = Protocol.T_I32 then
              _str8905#set_provider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t8906)
          | _ -> iprot#skip _t8906);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8905

class getRSAKeyInfo_result =
object (self)
  val mutable _success : rSAKey option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getRSAKeyInfo_result.success") | Some _x8908 -> _x8908
  method set_success _x8908 = _success <- Some _x8908
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getRSAKeyInfo_result.e") | Some _x8909 -> _x8909
  method set_e _x8909 = _e <- Some _x8909
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRSAKeyInfo_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRSAKeyInfo_result (iprot : Protocol.t) =
  let _str8912 = new getRSAKeyInfo_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8913,_id8914) = iprot#readFieldBegin in
        if _t8913 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8914 with 
          | 0 -> (if _t8913 = Protocol.T_STRUCT then
              _str8912#set_success (read_rSAKey iprot)
            else
              iprot#skip _t8913)
          | 1 -> (if _t8913 = Protocol.T_STRUCT then
              _str8912#set_e (read_talkException iprot)
            else
              iprot#skip _t8913)
          | _ -> iprot#skip _t8913);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8912

class getServerTime_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getServerTime_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getServerTime_args (iprot : Protocol.t) =
  let _str8917 = new getServerTime_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8918,_id8919) = iprot#readFieldBegin in
        if _t8918 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8919 with 
          | _ -> iprot#skip _t8918);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8917

class getServerTime_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getServerTime_result.success") | Some _x8920 -> _x8920
  method set_success _x8920 = _success <- Some _x8920
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getServerTime_result.e") | Some _x8921 -> _x8921
  method set_e _x8921 = _e <- Some _x8921
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getServerTime_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getServerTime_result (iprot : Protocol.t) =
  let _str8924 = new getServerTime_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8925,_id8926) = iprot#readFieldBegin in
        if _t8925 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8926 with 
          | 0 -> (if _t8925 = Protocol.T_I64 then
              _str8924#set_success iprot#readI64
            else
              iprot#skip _t8925)
          | 1 -> (if _t8925 = Protocol.T_STRUCT then
              _str8924#set_e (read_talkException iprot)
            else
              iprot#skip _t8925)
          | _ -> iprot#skip _t8925);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8924

class getSessions_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSessions_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSessions_args (iprot : Protocol.t) =
  let _str8929 = new getSessions_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8930,_id8931) = iprot#readFieldBegin in
        if _t8930 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8931 with 
          | _ -> iprot#skip _t8930);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8929

class getSessions_result =
object (self)
  val mutable _success : loginSession list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSessions_result.success") | Some _x8932 -> _x8932
  method set_success _x8932 = _success <- Some _x8932
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSessions_result.e") | Some _x8933 -> _x8933
  method set_e _x8933 = _e <- Some _x8933
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSessions_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8936 ->         _iter8936#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSessions_result (iprot : Protocol.t) =
  let _str8937 = new getSessions_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8938,_id8939) = iprot#readFieldBegin in
        if _t8938 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8939 with 
          | 0 -> (if _t8938 = Protocol.T_LIST then
              _str8937#set_success 
                (let (_etype8943,_size8940) = iprot#readListBegin in
                  let _con8944 = (Array.to_list (Array.init _size8940 (fun _ -> (read_loginSession iprot)))) in
                    iprot#readListEnd; _con8944)
            else
              iprot#skip _t8938)
          | 1 -> (if _t8938 = Protocol.T_STRUCT then
              _str8937#set_e (read_talkException iprot)
            else
              iprot#skip _t8938)
          | _ -> iprot#skip _t8938);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8937

class getSettings_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSettings_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSettings_args (iprot : Protocol.t) =
  let _str8947 = new getSettings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8948,_id8949) = iprot#readFieldBegin in
        if _t8948 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8949 with 
          | _ -> iprot#skip _t8948);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8947

class getSettings_result =
object (self)
  val mutable _success : settings option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSettings_result.success") | Some _x8950 -> _x8950
  method set_success _x8950 = _success <- Some _x8950
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSettings_result.e") | Some _x8951 -> _x8951
  method set_e _x8951 = _e <- Some _x8951
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSettings_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSettings_result (iprot : Protocol.t) =
  let _str8954 = new getSettings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8955,_id8956) = iprot#readFieldBegin in
        if _t8955 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8956 with 
          | 0 -> (if _t8955 = Protocol.T_STRUCT then
              _str8954#set_success (read_settings iprot)
            else
              iprot#skip _t8955)
          | 1 -> (if _t8955 = Protocol.T_STRUCT then
              _str8954#set_e (read_talkException iprot)
            else
              iprot#skip _t8955)
          | _ -> iprot#skip _t8955);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8954

class getGroupsV2_args =
object (self)
  val mutable _groupIds : string list option = None
  method get_groupIds = _groupIds
  method grab_groupIds = match _groupIds with None->raise (Field_empty "getGroupsV2_args.groupIds") | Some _x8957 -> _x8957
  method set_groupIds _x8957 = _groupIds <- Some _x8957
  method unset_groupIds = _groupIds <- None
  method reset_groupIds = _groupIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupsV2_args";
    (match _groupIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupIds",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8960 ->         oprot#writeString(_iter8960);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupsV2_args (iprot : Protocol.t) =
  let _str8961 = new getGroupsV2_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8962,_id8963) = iprot#readFieldBegin in
        if _t8962 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8963 with 
          | 2 -> (if _t8962 = Protocol.T_LIST then
              _str8961#set_groupIds 
                (let (_etype8967,_size8964) = iprot#readListBegin in
                  let _con8968 = (Array.to_list (Array.init _size8964 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8968)
            else
              iprot#skip _t8962)
          | _ -> iprot#skip _t8962);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8961

class getGroupsV2_result =
object (self)
  val mutable _success : group list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupsV2_result.success") | Some _x8969 -> _x8969
  method set_success _x8969 = _success <- Some _x8969
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupsV2_result.e") | Some _x8970 -> _x8970
  method set_e _x8970 = _e <- Some _x8970
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupsV2_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8973 ->         _iter8973#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupsV2_result (iprot : Protocol.t) =
  let _str8974 = new getGroupsV2_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8975,_id8976) = iprot#readFieldBegin in
        if _t8975 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8976 with 
          | 0 -> (if _t8975 = Protocol.T_LIST then
              _str8974#set_success 
                (let (_etype8980,_size8977) = iprot#readListBegin in
                  let _con8981 = (Array.to_list (Array.init _size8977 (fun _ -> (read_group iprot)))) in
                    iprot#readListEnd; _con8981)
            else
              iprot#skip _t8975)
          | 1 -> (if _t8975 = Protocol.T_STRUCT then
              _str8974#set_e (read_talkException iprot)
            else
              iprot#skip _t8975)
          | _ -> iprot#skip _t8975);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8974

class getSettingsAttributes_args =
object (self)
  val mutable _attrBitset : Int32.t option = None
  method get_attrBitset = _attrBitset
  method grab_attrBitset = match _attrBitset with None->raise (Field_empty "getSettingsAttributes_args.attrBitset") | Some _x8982 -> _x8982
  method set_attrBitset _x8982 = _attrBitset <- Some _x8982
  method unset_attrBitset = _attrBitset <- None
  method reset_attrBitset = _attrBitset <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSettingsAttributes_args";
    (match _attrBitset with None -> () | Some _v -> 
      oprot#writeFieldBegin("attrBitset",Protocol.T_I32,2);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSettingsAttributes_args (iprot : Protocol.t) =
  let _str8985 = new getSettingsAttributes_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8986,_id8987) = iprot#readFieldBegin in
        if _t8986 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8987 with 
          | 2 -> (if _t8986 = Protocol.T_I32 then
              _str8985#set_attrBitset iprot#readI32
            else
              iprot#skip _t8986)
          | _ -> iprot#skip _t8986);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8985

class getSettingsAttributes_result =
object (self)
  val mutable _success : settings option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSettingsAttributes_result.success") | Some _x8988 -> _x8988
  method set_success _x8988 = _success <- Some _x8988
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSettingsAttributes_result.e") | Some _x8989 -> _x8989
  method set_e _x8989 = _e <- Some _x8989
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSettingsAttributes_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSettingsAttributes_result (iprot : Protocol.t) =
  let _str8992 = new getSettingsAttributes_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8993,_id8994) = iprot#readFieldBegin in
        if _t8993 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8994 with 
          | 0 -> (if _t8993 = Protocol.T_STRUCT then
              _str8992#set_success (read_settings iprot)
            else
              iprot#skip _t8993)
          | 1 -> (if _t8993 = Protocol.T_STRUCT then
              _str8992#set_e (read_talkException iprot)
            else
              iprot#skip _t8993)
          | _ -> iprot#skip _t8993);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8992

class getSystemConfiguration_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSystemConfiguration_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSystemConfiguration_args (iprot : Protocol.t) =
  let _str8997 = new getSystemConfiguration_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8998,_id8999) = iprot#readFieldBegin in
        if _t8998 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8999 with 
          | _ -> iprot#skip _t8998);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8997

class getSystemConfiguration_result =
object (self)
  val mutable _success : systemConfiguration option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSystemConfiguration_result.success") | Some _x9000 -> _x9000
  method set_success _x9000 = _success <- Some _x9000
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSystemConfiguration_result.e") | Some _x9001 -> _x9001
  method set_e _x9001 = _e <- Some _x9001
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSystemConfiguration_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSystemConfiguration_result (iprot : Protocol.t) =
  let _str9004 = new getSystemConfiguration_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9005,_id9006) = iprot#readFieldBegin in
        if _t9005 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9006 with 
          | 0 -> (if _t9005 = Protocol.T_STRUCT then
              _str9004#set_success (read_systemConfiguration iprot)
            else
              iprot#skip _t9005)
          | 1 -> (if _t9005 = Protocol.T_STRUCT then
              _str9004#set_e (read_talkException iprot)
            else
              iprot#skip _t9005)
          | _ -> iprot#skip _t9005);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9004

class getUserTicket_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserTicket_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserTicket_args (iprot : Protocol.t) =
  let _str9009 = new getUserTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9010,_id9011) = iprot#readFieldBegin in
        if _t9010 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9011 with 
          | _ -> iprot#skip _t9010);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9009

class getUserTicket_result =
object (self)
  val mutable _success : ticket option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserTicket_result.success") | Some _x9012 -> _x9012
  method set_success _x9012 = _success <- Some _x9012
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserTicket_result.e") | Some _x9013 -> _x9013
  method set_e _x9013 = _e <- Some _x9013
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserTicket_result (iprot : Protocol.t) =
  let _str9016 = new getUserTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9017,_id9018) = iprot#readFieldBegin in
        if _t9017 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9018 with 
          | 0 -> (if _t9017 = Protocol.T_STRUCT then
              _str9016#set_success (read_ticket iprot)
            else
              iprot#skip _t9017)
          | 1 -> (if _t9017 = Protocol.T_STRUCT then
              _str9016#set_e (read_talkException iprot)
            else
              iprot#skip _t9017)
          | _ -> iprot#skip _t9017);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9016

class getWapInvitation_args =
object (self)
  val mutable _invitationHash : string option = None
  method get_invitationHash = _invitationHash
  method grab_invitationHash = match _invitationHash with None->raise (Field_empty "getWapInvitation_args.invitationHash") | Some _x9019 -> _x9019
  method set_invitationHash _x9019 = _invitationHash <- Some _x9019
  method unset_invitationHash = _invitationHash <- None
  method reset_invitationHash = _invitationHash <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getWapInvitation_args";
    (match _invitationHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("invitationHash",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getWapInvitation_args (iprot : Protocol.t) =
  let _str9022 = new getWapInvitation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9023,_id9024) = iprot#readFieldBegin in
        if _t9023 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9024 with 
          | 2 -> (if _t9023 = Protocol.T_STRING then
              _str9022#set_invitationHash iprot#readString
            else
              iprot#skip _t9023)
          | _ -> iprot#skip _t9023);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9022

class getWapInvitation_result =
object (self)
  val mutable _success : wapInvitation option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getWapInvitation_result.success") | Some _x9025 -> _x9025
  method set_success _x9025 = _success <- Some _x9025
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getWapInvitation_result.e") | Some _x9026 -> _x9026
  method set_e _x9026 = _e <- Some _x9026
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getWapInvitation_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getWapInvitation_result (iprot : Protocol.t) =
  let _str9029 = new getWapInvitation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9030,_id9031) = iprot#readFieldBegin in
        if _t9030 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9031 with 
          | 0 -> (if _t9030 = Protocol.T_STRUCT then
              _str9029#set_success (read_wapInvitation iprot)
            else
              iprot#skip _t9030)
          | 1 -> (if _t9030 = Protocol.T_STRUCT then
              _str9029#set_e (read_talkException iprot)
            else
              iprot#skip _t9030)
          | _ -> iprot#skip _t9030);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9029

class invalidateUserTicket_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "invalidateUserTicket_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_invalidateUserTicket_args (iprot : Protocol.t) =
  let _str9034 = new invalidateUserTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9035,_id9036) = iprot#readFieldBegin in
        if _t9035 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9036 with 
          | _ -> iprot#skip _t9035);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9034

class invalidateUserTicket_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "invalidateUserTicket_result.e") | Some _x9037 -> _x9037
  method set_e _x9037 = _e <- Some _x9037
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "invalidateUserTicket_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_invalidateUserTicket_result (iprot : Protocol.t) =
  let _str9040 = new invalidateUserTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9041,_id9042) = iprot#readFieldBegin in
        if _t9041 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9042 with 
          | 1 -> (if _t9041 = Protocol.T_STRUCT then
              _str9040#set_e (read_talkException iprot)
            else
              iprot#skip _t9041)
          | _ -> iprot#skip _t9041);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9040

class inviteFriendsBySms_args =
object (self)
  val mutable _phoneNumberList : string list option = None
  method get_phoneNumberList = _phoneNumberList
  method grab_phoneNumberList = match _phoneNumberList with None->raise (Field_empty "inviteFriendsBySms_args.phoneNumberList") | Some _x9043 -> _x9043
  method set_phoneNumberList _x9043 = _phoneNumberList <- Some _x9043
  method unset_phoneNumberList = _phoneNumberList <- None
  method reset_phoneNumberList = _phoneNumberList <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteFriendsBySms_args";
    (match _phoneNumberList with None -> () | Some _v -> 
      oprot#writeFieldBegin("phoneNumberList",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9046 ->         oprot#writeString(_iter9046);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteFriendsBySms_args (iprot : Protocol.t) =
  let _str9047 = new inviteFriendsBySms_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9048,_id9049) = iprot#readFieldBegin in
        if _t9048 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9049 with 
          | 2 -> (if _t9048 = Protocol.T_LIST then
              _str9047#set_phoneNumberList 
                (let (_etype9053,_size9050) = iprot#readListBegin in
                  let _con9054 = (Array.to_list (Array.init _size9050 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9054)
            else
              iprot#skip _t9048)
          | _ -> iprot#skip _t9048);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9047

class inviteFriendsBySms_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "inviteFriendsBySms_result.e") | Some _x9055 -> _x9055
  method set_e _x9055 = _e <- Some _x9055
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteFriendsBySms_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteFriendsBySms_result (iprot : Protocol.t) =
  let _str9058 = new inviteFriendsBySms_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9059,_id9060) = iprot#readFieldBegin in
        if _t9059 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9060 with 
          | 1 -> (if _t9059 = Protocol.T_STRUCT then
              _str9058#set_e (read_talkException iprot)
            else
              iprot#skip _t9059)
          | _ -> iprot#skip _t9059);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9058

class inviteIntoGroup_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "inviteIntoGroup_args.reqSeq") | Some _x9061 -> _x9061
  method set_reqSeq _x9061 = _reqSeq <- Some _x9061
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "inviteIntoGroup_args.groupId") | Some _x9062 -> _x9062
  method set_groupId _x9062 = _groupId <- Some _x9062
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  val mutable _contactIds : string list option = None
  method get_contactIds = _contactIds
  method grab_contactIds = match _contactIds with None->raise (Field_empty "inviteIntoGroup_args.contactIds") | Some _x9063 -> _x9063
  method set_contactIds _x9063 = _contactIds <- Some _x9063
  method unset_contactIds = _contactIds <- None
  method reset_contactIds = _contactIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteIntoGroup_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _contactIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactIds",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9066 ->         oprot#writeString(_iter9066);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteIntoGroup_args (iprot : Protocol.t) =
  let _str9067 = new inviteIntoGroup_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9068,_id9069) = iprot#readFieldBegin in
        if _t9068 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9069 with 
          | 1 -> (if _t9068 = Protocol.T_I32 then
              _str9067#set_reqSeq iprot#readI32
            else
              iprot#skip _t9068)
          | 2 -> (if _t9068 = Protocol.T_STRING then
              _str9067#set_groupId iprot#readString
            else
              iprot#skip _t9068)
          | 3 -> (if _t9068 = Protocol.T_LIST then
              _str9067#set_contactIds 
                (let (_etype9073,_size9070) = iprot#readListBegin in
                  let _con9074 = (Array.to_list (Array.init _size9070 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9074)
            else
              iprot#skip _t9068)
          | _ -> iprot#skip _t9068);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9067

class inviteIntoGroup_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "inviteIntoGroup_result.e") | Some _x9075 -> _x9075
  method set_e _x9075 = _e <- Some _x9075
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteIntoGroup_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteIntoGroup_result (iprot : Protocol.t) =
  let _str9078 = new inviteIntoGroup_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9079,_id9080) = iprot#readFieldBegin in
        if _t9079 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9080 with 
          | 1 -> (if _t9079 = Protocol.T_STRUCT then
              _str9078#set_e (read_talkException iprot)
            else
              iprot#skip _t9079)
          | _ -> iprot#skip _t9079);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9078

class inviteIntoRoom_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "inviteIntoRoom_args.reqSeq") | Some _x9081 -> _x9081
  method set_reqSeq _x9081 = _reqSeq <- Some _x9081
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _roomId : string option = None
  method get_roomId = _roomId
  method grab_roomId = match _roomId with None->raise (Field_empty "inviteIntoRoom_args.roomId") | Some _x9082 -> _x9082
  method set_roomId _x9082 = _roomId <- Some _x9082
  method unset_roomId = _roomId <- None
  method reset_roomId = _roomId <- None

  val mutable _contactIds : string list option = None
  method get_contactIds = _contactIds
  method grab_contactIds = match _contactIds with None->raise (Field_empty "inviteIntoRoom_args.contactIds") | Some _x9083 -> _x9083
  method set_contactIds _x9083 = _contactIds <- Some _x9083
  method unset_contactIds = _contactIds <- None
  method reset_contactIds = _contactIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteIntoRoom_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _roomId with None -> () | Some _v -> 
      oprot#writeFieldBegin("roomId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _contactIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactIds",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9086 ->         oprot#writeString(_iter9086);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteIntoRoom_args (iprot : Protocol.t) =
  let _str9087 = new inviteIntoRoom_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9088,_id9089) = iprot#readFieldBegin in
        if _t9088 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9089 with 
          | 1 -> (if _t9088 = Protocol.T_I32 then
              _str9087#set_reqSeq iprot#readI32
            else
              iprot#skip _t9088)
          | 2 -> (if _t9088 = Protocol.T_STRING then
              _str9087#set_roomId iprot#readString
            else
              iprot#skip _t9088)
          | 3 -> (if _t9088 = Protocol.T_LIST then
              _str9087#set_contactIds 
                (let (_etype9093,_size9090) = iprot#readListBegin in
                  let _con9094 = (Array.to_list (Array.init _size9090 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9094)
            else
              iprot#skip _t9088)
          | _ -> iprot#skip _t9088);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9087

class inviteIntoRoom_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "inviteIntoRoom_result.e") | Some _x9095 -> _x9095
  method set_e _x9095 = _e <- Some _x9095
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteIntoRoom_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteIntoRoom_result (iprot : Protocol.t) =
  let _str9098 = new inviteIntoRoom_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9099,_id9100) = iprot#readFieldBegin in
        if _t9099 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9100 with 
          | 1 -> (if _t9099 = Protocol.T_STRUCT then
              _str9098#set_e (read_talkException iprot)
            else
              iprot#skip _t9099)
          | _ -> iprot#skip _t9099);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9098

class inviteViaEmail_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "inviteViaEmail_args.reqSeq") | Some _x9101 -> _x9101
  method set_reqSeq _x9101 = _reqSeq <- Some _x9101
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _email : string option = None
  method get_email = _email
  method grab_email = match _email with None->raise (Field_empty "inviteViaEmail_args.email") | Some _x9102 -> _x9102
  method set_email _x9102 = _email <- Some _x9102
  method unset_email = _email <- None
  method reset_email = _email <- None

  val mutable _name : string option = None
  method get_name = _name
  method grab_name = match _name with None->raise (Field_empty "inviteViaEmail_args.name") | Some _x9103 -> _x9103
  method set_name _x9103 = _name <- Some _x9103
  method unset_name = _name <- None
  method reset_name = _name <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteViaEmail_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _email with None -> () | Some _v -> 
      oprot#writeFieldBegin("email",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _name with None -> () | Some _v -> 
      oprot#writeFieldBegin("name",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteViaEmail_args (iprot : Protocol.t) =
  let _str9106 = new inviteViaEmail_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9107,_id9108) = iprot#readFieldBegin in
        if _t9107 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9108 with 
          | 1 -> (if _t9107 = Protocol.T_I32 then
              _str9106#set_reqSeq iprot#readI32
            else
              iprot#skip _t9107)
          | 2 -> (if _t9107 = Protocol.T_STRING then
              _str9106#set_email iprot#readString
            else
              iprot#skip _t9107)
          | 3 -> (if _t9107 = Protocol.T_STRING then
              _str9106#set_name iprot#readString
            else
              iprot#skip _t9107)
          | _ -> iprot#skip _t9107);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9106

class inviteViaEmail_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "inviteViaEmail_result.e") | Some _x9109 -> _x9109
  method set_e _x9109 = _e <- Some _x9109
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteViaEmail_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteViaEmail_result (iprot : Protocol.t) =
  let _str9112 = new inviteViaEmail_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9113,_id9114) = iprot#readFieldBegin in
        if _t9113 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9114 with 
          | 1 -> (if _t9113 = Protocol.T_STRUCT then
              _str9112#set_e (read_talkException iprot)
            else
              iprot#skip _t9113)
          | _ -> iprot#skip _t9113);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9112

class isIdentityIdentifierAvailable_args =
object (self)
  val mutable _provider : IdentityProvider.t option = None
  method get_provider = _provider
  method grab_provider = match _provider with None->raise (Field_empty "isIdentityIdentifierAvailable_args.provider") | Some _x9115 -> _x9115
  method set_provider _x9115 = _provider <- Some _x9115
  method unset_provider = _provider <- None
  method reset_provider = _provider <- None

  val mutable _identifier : string option = None
  method get_identifier = _identifier
  method grab_identifier = match _identifier with None->raise (Field_empty "isIdentityIdentifierAvailable_args.identifier") | Some _x9116 -> _x9116
  method set_identifier _x9116 = _identifier <- Some _x9116
  method unset_identifier = _identifier <- None
  method reset_identifier = _identifier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isIdentityIdentifierAvailable_args";
    (match _identifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("identifier",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _provider with None -> () | Some _v -> 
      oprot#writeFieldBegin("provider",Protocol.T_I32,3);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isIdentityIdentifierAvailable_args (iprot : Protocol.t) =
  let _str9119 = new isIdentityIdentifierAvailable_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9120,_id9121) = iprot#readFieldBegin in
        if _t9120 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9121 with 
          | 3 -> (if _t9120 = Protocol.T_I32 then
              _str9119#set_provider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t9120)
          | 2 -> (if _t9120 = Protocol.T_STRING then
              _str9119#set_identifier iprot#readString
            else
              iprot#skip _t9120)
          | _ -> iprot#skip _t9120);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9119

class isIdentityIdentifierAvailable_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "isIdentityIdentifierAvailable_result.success") | Some _x9122 -> _x9122
  method set_success _x9122 = _success <- Some _x9122
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "isIdentityIdentifierAvailable_result.e") | Some _x9123 -> _x9123
  method set_e _x9123 = _e <- Some _x9123
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isIdentityIdentifierAvailable_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isIdentityIdentifierAvailable_result (iprot : Protocol.t) =
  let _str9126 = new isIdentityIdentifierAvailable_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9127,_id9128) = iprot#readFieldBegin in
        if _t9127 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9128 with 
          | 0 -> (if _t9127 = Protocol.T_BOOL then
              _str9126#set_success iprot#readBool
            else
              iprot#skip _t9127)
          | 1 -> (if _t9127 = Protocol.T_STRUCT then
              _str9126#set_e (read_talkException iprot)
            else
              iprot#skip _t9127)
          | _ -> iprot#skip _t9127);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9126

class isUseridAvailable_args =
object (self)
  val mutable _userid : string option = None
  method get_userid = _userid
  method grab_userid = match _userid with None->raise (Field_empty "isUseridAvailable_args.userid") | Some _x9129 -> _x9129
  method set_userid _x9129 = _userid <- Some _x9129
  method unset_userid = _userid <- None
  method reset_userid = _userid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isUseridAvailable_args";
    (match _userid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isUseridAvailable_args (iprot : Protocol.t) =
  let _str9132 = new isUseridAvailable_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9133,_id9134) = iprot#readFieldBegin in
        if _t9133 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9134 with 
          | 2 -> (if _t9133 = Protocol.T_STRING then
              _str9132#set_userid iprot#readString
            else
              iprot#skip _t9133)
          | _ -> iprot#skip _t9133);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9132

class isUseridAvailable_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "isUseridAvailable_result.success") | Some _x9135 -> _x9135
  method set_success _x9135 = _success <- Some _x9135
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "isUseridAvailable_result.e") | Some _x9136 -> _x9136
  method set_e _x9136 = _e <- Some _x9136
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isUseridAvailable_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isUseridAvailable_result (iprot : Protocol.t) =
  let _str9139 = new isUseridAvailable_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9140,_id9141) = iprot#readFieldBegin in
        if _t9140 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9141 with 
          | 0 -> (if _t9140 = Protocol.T_BOOL then
              _str9139#set_success iprot#readBool
            else
              iprot#skip _t9140)
          | 1 -> (if _t9140 = Protocol.T_STRUCT then
              _str9139#set_e (read_talkException iprot)
            else
              iprot#skip _t9140)
          | _ -> iprot#skip _t9140);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9139

class kickoutFromGroup_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "kickoutFromGroup_args.reqSeq") | Some _x9142 -> _x9142
  method set_reqSeq _x9142 = _reqSeq <- Some _x9142
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "kickoutFromGroup_args.groupId") | Some _x9143 -> _x9143
  method set_groupId _x9143 = _groupId <- Some _x9143
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  val mutable _contactIds : string list option = None
  method get_contactIds = _contactIds
  method grab_contactIds = match _contactIds with None->raise (Field_empty "kickoutFromGroup_args.contactIds") | Some _x9144 -> _x9144
  method set_contactIds _x9144 = _contactIds <- Some _x9144
  method unset_contactIds = _contactIds <- None
  method reset_contactIds = _contactIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "kickoutFromGroup_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _contactIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactIds",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9147 ->         oprot#writeString(_iter9147);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_kickoutFromGroup_args (iprot : Protocol.t) =
  let _str9148 = new kickoutFromGroup_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9149,_id9150) = iprot#readFieldBegin in
        if _t9149 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9150 with 
          | 1 -> (if _t9149 = Protocol.T_I32 then
              _str9148#set_reqSeq iprot#readI32
            else
              iprot#skip _t9149)
          | 2 -> (if _t9149 = Protocol.T_STRING then
              _str9148#set_groupId iprot#readString
            else
              iprot#skip _t9149)
          | 3 -> (if _t9149 = Protocol.T_LIST then
              _str9148#set_contactIds 
                (let (_etype9154,_size9151) = iprot#readListBegin in
                  let _con9155 = (Array.to_list (Array.init _size9151 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9155)
            else
              iprot#skip _t9149)
          | _ -> iprot#skip _t9149);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9148

class kickoutFromGroup_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "kickoutFromGroup_result.e") | Some _x9156 -> _x9156
  method set_e _x9156 = _e <- Some _x9156
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "kickoutFromGroup_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_kickoutFromGroup_result (iprot : Protocol.t) =
  let _str9159 = new kickoutFromGroup_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9160,_id9161) = iprot#readFieldBegin in
        if _t9160 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9161 with 
          | 1 -> (if _t9160 = Protocol.T_STRUCT then
              _str9159#set_e (read_talkException iprot)
            else
              iprot#skip _t9160)
          | _ -> iprot#skip _t9160);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9159

class reissueGroupTicket_args =
object (self)
  val mutable _groupMid : string option = None
  method get_groupMid = _groupMid
  method grab_groupMid = match _groupMid with None->raise (Field_empty "reissueGroupTicket_args.groupMid") | Some _x9162 -> _x9162
  method set_groupMid _x9162 = _groupMid <- Some _x9162
  method unset_groupMid = _groupMid <- None
  method reset_groupMid = _groupMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reissueGroupTicket_args";
    (match _groupMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupMid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reissueGroupTicket_args (iprot : Protocol.t) =
  let _str9165 = new reissueGroupTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9166,_id9167) = iprot#readFieldBegin in
        if _t9166 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9167 with 
          | 1 -> (if _t9166 = Protocol.T_STRING then
              _str9165#set_groupMid iprot#readString
            else
              iprot#skip _t9166)
          | _ -> iprot#skip _t9166);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9165

class reissueGroupTicket_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reissueGroupTicket_result.success") | Some _x9168 -> _x9168
  method set_success _x9168 = _success <- Some _x9168
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reissueGroupTicket_result.e") | Some _x9169 -> _x9169
  method set_e _x9169 = _e <- Some _x9169
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reissueGroupTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reissueGroupTicket_result (iprot : Protocol.t) =
  let _str9172 = new reissueGroupTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9173,_id9174) = iprot#readFieldBegin in
        if _t9173 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9174 with 
          | 0 -> (if _t9173 = Protocol.T_STRING then
              _str9172#set_success iprot#readString
            else
              iprot#skip _t9173)
          | 1 -> (if _t9173 = Protocol.T_STRUCT then
              _str9172#set_e (read_talkException iprot)
            else
              iprot#skip _t9173)
          | _ -> iprot#skip _t9173);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9172

class findGroupByTicket_args =
object (self)
  val mutable _ticketId : string option = None
  method get_ticketId = _ticketId
  method grab_ticketId = match _ticketId with None->raise (Field_empty "findGroupByTicket_args.ticketId") | Some _x9175 -> _x9175
  method set_ticketId _x9175 = _ticketId <- Some _x9175
  method unset_ticketId = _ticketId <- None
  method reset_ticketId = _ticketId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findGroupByTicket_args";
    (match _ticketId with None -> () | Some _v -> 
      oprot#writeFieldBegin("ticketId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findGroupByTicket_args (iprot : Protocol.t) =
  let _str9178 = new findGroupByTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9179,_id9180) = iprot#readFieldBegin in
        if _t9179 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9180 with 
          | 1 -> (if _t9179 = Protocol.T_STRING then
              _str9178#set_ticketId iprot#readString
            else
              iprot#skip _t9179)
          | _ -> iprot#skip _t9179);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9178

class findGroupByTicket_result =
object (self)
  val mutable _success : group option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findGroupByTicket_result.success") | Some _x9181 -> _x9181
  method set_success _x9181 = _success <- Some _x9181
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findGroupByTicket_result.e") | Some _x9182 -> _x9182
  method set_e _x9182 = _e <- Some _x9182
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findGroupByTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findGroupByTicket_result (iprot : Protocol.t) =
  let _str9185 = new findGroupByTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9186,_id9187) = iprot#readFieldBegin in
        if _t9186 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9187 with 
          | 0 -> (if _t9186 = Protocol.T_STRUCT then
              _str9185#set_success (read_group iprot)
            else
              iprot#skip _t9186)
          | 1 -> (if _t9186 = Protocol.T_STRUCT then
              _str9185#set_e (read_talkException iprot)
            else
              iprot#skip _t9186)
          | _ -> iprot#skip _t9186);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9185

class leaveGroup_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "leaveGroup_args.reqSeq") | Some _x9188 -> _x9188
  method set_reqSeq _x9188 = _reqSeq <- Some _x9188
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "leaveGroup_args.groupId") | Some _x9189 -> _x9189
  method set_groupId _x9189 = _groupId <- Some _x9189
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "leaveGroup_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_leaveGroup_args (iprot : Protocol.t) =
  let _str9192 = new leaveGroup_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9193,_id9194) = iprot#readFieldBegin in
        if _t9193 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9194 with 
          | 1 -> (if _t9193 = Protocol.T_I32 then
              _str9192#set_reqSeq iprot#readI32
            else
              iprot#skip _t9193)
          | 2 -> (if _t9193 = Protocol.T_STRING then
              _str9192#set_groupId iprot#readString
            else
              iprot#skip _t9193)
          | _ -> iprot#skip _t9193);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9192

class leaveGroup_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "leaveGroup_result.e") | Some _x9195 -> _x9195
  method set_e _x9195 = _e <- Some _x9195
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "leaveGroup_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_leaveGroup_result (iprot : Protocol.t) =
  let _str9198 = new leaveGroup_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9199,_id9200) = iprot#readFieldBegin in
        if _t9199 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9200 with 
          | 1 -> (if _t9199 = Protocol.T_STRUCT then
              _str9198#set_e (read_talkException iprot)
            else
              iprot#skip _t9199)
          | _ -> iprot#skip _t9199);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9198

class leaveRoom_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "leaveRoom_args.reqSeq") | Some _x9201 -> _x9201
  method set_reqSeq _x9201 = _reqSeq <- Some _x9201
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _roomId : string option = None
  method get_roomId = _roomId
  method grab_roomId = match _roomId with None->raise (Field_empty "leaveRoom_args.roomId") | Some _x9202 -> _x9202
  method set_roomId _x9202 = _roomId <- Some _x9202
  method unset_roomId = _roomId <- None
  method reset_roomId = _roomId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "leaveRoom_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _roomId with None -> () | Some _v -> 
      oprot#writeFieldBegin("roomId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_leaveRoom_args (iprot : Protocol.t) =
  let _str9205 = new leaveRoom_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9206,_id9207) = iprot#readFieldBegin in
        if _t9206 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9207 with 
          | 1 -> (if _t9206 = Protocol.T_I32 then
              _str9205#set_reqSeq iprot#readI32
            else
              iprot#skip _t9206)
          | 2 -> (if _t9206 = Protocol.T_STRING then
              _str9205#set_roomId iprot#readString
            else
              iprot#skip _t9206)
          | _ -> iprot#skip _t9206);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9205

class leaveRoom_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "leaveRoom_result.e") | Some _x9208 -> _x9208
  method set_e _x9208 = _e <- Some _x9208
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "leaveRoom_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_leaveRoom_result (iprot : Protocol.t) =
  let _str9211 = new leaveRoom_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9212,_id9213) = iprot#readFieldBegin in
        if _t9212 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9213 with 
          | 1 -> (if _t9212 = Protocol.T_STRUCT then
              _str9211#set_e (read_talkException iprot)
            else
              iprot#skip _t9212)
          | _ -> iprot#skip _t9212);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9211

class loginWithIdentityCredential_args =
object (self)
  val mutable _identityProvider : IdentityProvider.t option = None
  method get_identityProvider = _identityProvider
  method grab_identityProvider = match _identityProvider with None->raise (Field_empty "loginWithIdentityCredential_args.identityProvider") | Some _x9214 -> _x9214
  method set_identityProvider _x9214 = _identityProvider <- Some _x9214
  method unset_identityProvider = _identityProvider <- None
  method reset_identityProvider = _identityProvider <- None

  val mutable _identifier : string option = None
  method get_identifier = _identifier
  method grab_identifier = match _identifier with None->raise (Field_empty "loginWithIdentityCredential_args.identifier") | Some _x9215 -> _x9215
  method set_identifier _x9215 = _identifier <- Some _x9215
  method unset_identifier = _identifier <- None
  method reset_identifier = _identifier <- None

  val mutable _password : string option = None
  method get_password = _password
  method grab_password = match _password with None->raise (Field_empty "loginWithIdentityCredential_args.password") | Some _x9216 -> _x9216
  method set_password _x9216 = _password <- Some _x9216
  method unset_password = _password <- None
  method reset_password = _password <- None

  val mutable _keepLoggedIn : bool option = None
  method get_keepLoggedIn = _keepLoggedIn
  method grab_keepLoggedIn = match _keepLoggedIn with None->raise (Field_empty "loginWithIdentityCredential_args.keepLoggedIn") | Some _x9217 -> _x9217
  method set_keepLoggedIn _x9217 = _keepLoggedIn <- Some _x9217
  method unset_keepLoggedIn = _keepLoggedIn <- None
  method reset_keepLoggedIn = _keepLoggedIn <- None

  val mutable _accessLocation : string option = None
  method get_accessLocation = _accessLocation
  method grab_accessLocation = match _accessLocation with None->raise (Field_empty "loginWithIdentityCredential_args.accessLocation") | Some _x9218 -> _x9218
  method set_accessLocation _x9218 = _accessLocation <- Some _x9218
  method unset_accessLocation = _accessLocation <- None
  method reset_accessLocation = _accessLocation <- None

  val mutable _systemName : string option = None
  method get_systemName = _systemName
  method grab_systemName = match _systemName with None->raise (Field_empty "loginWithIdentityCredential_args.systemName") | Some _x9219 -> _x9219
  method set_systemName _x9219 = _systemName <- Some _x9219
  method unset_systemName = _systemName <- None
  method reset_systemName = _systemName <- None

  val mutable _certificate : string option = None
  method get_certificate = _certificate
  method grab_certificate = match _certificate with None->raise (Field_empty "loginWithIdentityCredential_args.certificate") | Some _x9220 -> _x9220
  method set_certificate _x9220 = _certificate <- Some _x9220
  method unset_certificate = _certificate <- None
  method reset_certificate = _certificate <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithIdentityCredential_args";
    (match _identifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("identifier",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _password with None -> () | Some _v -> 
      oprot#writeFieldBegin("password",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _keepLoggedIn with None -> () | Some _v -> 
      oprot#writeFieldBegin("keepLoggedIn",Protocol.T_BOOL,5);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _accessLocation with None -> () | Some _v -> 
      oprot#writeFieldBegin("accessLocation",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _systemName with None -> () | Some _v -> 
      oprot#writeFieldBegin("systemName",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _identityProvider with None -> () | Some _v -> 
      oprot#writeFieldBegin("identityProvider",Protocol.T_I32,8);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    (match _certificate with None -> () | Some _v -> 
      oprot#writeFieldBegin("certificate",Protocol.T_STRING,9);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithIdentityCredential_args (iprot : Protocol.t) =
  let _str9223 = new loginWithIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9224,_id9225) = iprot#readFieldBegin in
        if _t9224 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9225 with 
          | 8 -> (if _t9224 = Protocol.T_I32 then
              _str9223#set_identityProvider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t9224)
          | 3 -> (if _t9224 = Protocol.T_STRING then
              _str9223#set_identifier iprot#readString
            else
              iprot#skip _t9224)
          | 4 -> (if _t9224 = Protocol.T_STRING then
              _str9223#set_password iprot#readString
            else
              iprot#skip _t9224)
          | 5 -> (if _t9224 = Protocol.T_BOOL then
              _str9223#set_keepLoggedIn iprot#readBool
            else
              iprot#skip _t9224)
          | 6 -> (if _t9224 = Protocol.T_STRING then
              _str9223#set_accessLocation iprot#readString
            else
              iprot#skip _t9224)
          | 7 -> (if _t9224 = Protocol.T_STRING then
              _str9223#set_systemName iprot#readString
            else
              iprot#skip _t9224)
          | 9 -> (if _t9224 = Protocol.T_STRING then
              _str9223#set_certificate iprot#readString
            else
              iprot#skip _t9224)
          | _ -> iprot#skip _t9224);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9223

class loginWithIdentityCredential_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "loginWithIdentityCredential_result.success") | Some _x9226 -> _x9226
  method set_success _x9226 = _success <- Some _x9226
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "loginWithIdentityCredential_result.e") | Some _x9227 -> _x9227
  method set_e _x9227 = _e <- Some _x9227
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithIdentityCredential_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithIdentityCredential_result (iprot : Protocol.t) =
  let _str9230 = new loginWithIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9231,_id9232) = iprot#readFieldBegin in
        if _t9231 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9232 with 
          | 0 -> (if _t9231 = Protocol.T_STRING then
              _str9230#set_success iprot#readString
            else
              iprot#skip _t9231)
          | 1 -> (if _t9231 = Protocol.T_STRUCT then
              _str9230#set_e (read_talkException iprot)
            else
              iprot#skip _t9231)
          | _ -> iprot#skip _t9231);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9230

class loginWithIdentityCredentialForCertificate_args =
object (self)
  val mutable _identityProvider : IdentityProvider.t option = None
  method get_identityProvider = _identityProvider
  method grab_identityProvider = match _identityProvider with None->raise (Field_empty "loginWithIdentityCredentialForCertificate_args.identityProvider") | Some _x9233 -> _x9233
  method set_identityProvider _x9233 = _identityProvider <- Some _x9233
  method unset_identityProvider = _identityProvider <- None
  method reset_identityProvider = _identityProvider <- None

  val mutable _identifier : string option = None
  method get_identifier = _identifier
  method grab_identifier = match _identifier with None->raise (Field_empty "loginWithIdentityCredentialForCertificate_args.identifier") | Some _x9234 -> _x9234
  method set_identifier _x9234 = _identifier <- Some _x9234
  method unset_identifier = _identifier <- None
  method reset_identifier = _identifier <- None

  val mutable _password : string option = None
  method get_password = _password
  method grab_password = match _password with None->raise (Field_empty "loginWithIdentityCredentialForCertificate_args.password") | Some _x9235 -> _x9235
  method set_password _x9235 = _password <- Some _x9235
  method unset_password = _password <- None
  method reset_password = _password <- None

  val mutable _keepLoggedIn : bool option = None
  method get_keepLoggedIn = _keepLoggedIn
  method grab_keepLoggedIn = match _keepLoggedIn with None->raise (Field_empty "loginWithIdentityCredentialForCertificate_args.keepLoggedIn") | Some _x9236 -> _x9236
  method set_keepLoggedIn _x9236 = _keepLoggedIn <- Some _x9236
  method unset_keepLoggedIn = _keepLoggedIn <- None
  method reset_keepLoggedIn = _keepLoggedIn <- None

  val mutable _accessLocation : string option = None
  method get_accessLocation = _accessLocation
  method grab_accessLocation = match _accessLocation with None->raise (Field_empty "loginWithIdentityCredentialForCertificate_args.accessLocation") | Some _x9237 -> _x9237
  method set_accessLocation _x9237 = _accessLocation <- Some _x9237
  method unset_accessLocation = _accessLocation <- None
  method reset_accessLocation = _accessLocation <- None

  val mutable _systemName : string option = None
  method get_systemName = _systemName
  method grab_systemName = match _systemName with None->raise (Field_empty "loginWithIdentityCredentialForCertificate_args.systemName") | Some _x9238 -> _x9238
  method set_systemName _x9238 = _systemName <- Some _x9238
  method unset_systemName = _systemName <- None
  method reset_systemName = _systemName <- None

  val mutable _certificate : string option = None
  method get_certificate = _certificate
  method grab_certificate = match _certificate with None->raise (Field_empty "loginWithIdentityCredentialForCertificate_args.certificate") | Some _x9239 -> _x9239
  method set_certificate _x9239 = _certificate <- Some _x9239
  method unset_certificate = _certificate <- None
  method reset_certificate = _certificate <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithIdentityCredentialForCertificate_args";
    (match _identifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("identifier",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _password with None -> () | Some _v -> 
      oprot#writeFieldBegin("password",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _keepLoggedIn with None -> () | Some _v -> 
      oprot#writeFieldBegin("keepLoggedIn",Protocol.T_BOOL,5);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _accessLocation with None -> () | Some _v -> 
      oprot#writeFieldBegin("accessLocation",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _systemName with None -> () | Some _v -> 
      oprot#writeFieldBegin("systemName",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _identityProvider with None -> () | Some _v -> 
      oprot#writeFieldBegin("identityProvider",Protocol.T_I32,8);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    (match _certificate with None -> () | Some _v -> 
      oprot#writeFieldBegin("certificate",Protocol.T_STRING,9);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithIdentityCredentialForCertificate_args (iprot : Protocol.t) =
  let _str9242 = new loginWithIdentityCredentialForCertificate_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9243,_id9244) = iprot#readFieldBegin in
        if _t9243 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9244 with 
          | 8 -> (if _t9243 = Protocol.T_I32 then
              _str9242#set_identityProvider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t9243)
          | 3 -> (if _t9243 = Protocol.T_STRING then
              _str9242#set_identifier iprot#readString
            else
              iprot#skip _t9243)
          | 4 -> (if _t9243 = Protocol.T_STRING then
              _str9242#set_password iprot#readString
            else
              iprot#skip _t9243)
          | 5 -> (if _t9243 = Protocol.T_BOOL then
              _str9242#set_keepLoggedIn iprot#readBool
            else
              iprot#skip _t9243)
          | 6 -> (if _t9243 = Protocol.T_STRING then
              _str9242#set_accessLocation iprot#readString
            else
              iprot#skip _t9243)
          | 7 -> (if _t9243 = Protocol.T_STRING then
              _str9242#set_systemName iprot#readString
            else
              iprot#skip _t9243)
          | 9 -> (if _t9243 = Protocol.T_STRING then
              _str9242#set_certificate iprot#readString
            else
              iprot#skip _t9243)
          | _ -> iprot#skip _t9243);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9242

class loginWithIdentityCredentialForCertificate_result =
object (self)
  val mutable _success : loginResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "loginWithIdentityCredentialForCertificate_result.success") | Some _x9245 -> _x9245
  method set_success _x9245 = _success <- Some _x9245
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "loginWithIdentityCredentialForCertificate_result.e") | Some _x9246 -> _x9246
  method set_e _x9246 = _e <- Some _x9246
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithIdentityCredentialForCertificate_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithIdentityCredentialForCertificate_result (iprot : Protocol.t) =
  let _str9249 = new loginWithIdentityCredentialForCertificate_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9250,_id9251) = iprot#readFieldBegin in
        if _t9250 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9251 with 
          | 0 -> (if _t9250 = Protocol.T_STRUCT then
              _str9249#set_success (read_loginResult iprot)
            else
              iprot#skip _t9250)
          | 1 -> (if _t9250 = Protocol.T_STRUCT then
              _str9249#set_e (read_talkException iprot)
            else
              iprot#skip _t9250)
          | _ -> iprot#skip _t9250);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9249

class loginWithVerifier_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "loginWithVerifier_args.verifier") | Some _x9252 -> _x9252
  method set_verifier _x9252 = _verifier <- Some _x9252
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithVerifier_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithVerifier_args (iprot : Protocol.t) =
  let _str9255 = new loginWithVerifier_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9256,_id9257) = iprot#readFieldBegin in
        if _t9256 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9257 with 
          | 3 -> (if _t9256 = Protocol.T_STRING then
              _str9255#set_verifier iprot#readString
            else
              iprot#skip _t9256)
          | _ -> iprot#skip _t9256);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9255

class loginWithVerifier_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "loginWithVerifier_result.success") | Some _x9258 -> _x9258
  method set_success _x9258 = _success <- Some _x9258
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "loginWithVerifier_result.e") | Some _x9259 -> _x9259
  method set_e _x9259 = _e <- Some _x9259
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithVerifier_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithVerifier_result (iprot : Protocol.t) =
  let _str9262 = new loginWithVerifier_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9263,_id9264) = iprot#readFieldBegin in
        if _t9263 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9264 with 
          | 0 -> (if _t9263 = Protocol.T_STRING then
              _str9262#set_success iprot#readString
            else
              iprot#skip _t9263)
          | 1 -> (if _t9263 = Protocol.T_STRUCT then
              _str9262#set_e (read_talkException iprot)
            else
              iprot#skip _t9263)
          | _ -> iprot#skip _t9263);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9262

class loginWithVerifierForCerificate_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "loginWithVerifierForCerificate_args.verifier") | Some _x9265 -> _x9265
  method set_verifier _x9265 = _verifier <- Some _x9265
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithVerifierForCerificate_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithVerifierForCerificate_args (iprot : Protocol.t) =
  let _str9268 = new loginWithVerifierForCerificate_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9269,_id9270) = iprot#readFieldBegin in
        if _t9269 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9270 with 
          | 3 -> (if _t9269 = Protocol.T_STRING then
              _str9268#set_verifier iprot#readString
            else
              iprot#skip _t9269)
          | _ -> iprot#skip _t9269);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9268

class loginWithVerifierForCerificate_result =
object (self)
  val mutable _success : loginResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "loginWithVerifierForCerificate_result.success") | Some _x9271 -> _x9271
  method set_success _x9271 = _success <- Some _x9271
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "loginWithVerifierForCerificate_result.e") | Some _x9272 -> _x9272
  method set_e _x9272 = _e <- Some _x9272
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithVerifierForCerificate_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithVerifierForCerificate_result (iprot : Protocol.t) =
  let _str9275 = new loginWithVerifierForCerificate_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9276,_id9277) = iprot#readFieldBegin in
        if _t9276 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9277 with 
          | 0 -> (if _t9276 = Protocol.T_STRUCT then
              _str9275#set_success (read_loginResult iprot)
            else
              iprot#skip _t9276)
          | 1 -> (if _t9276 = Protocol.T_STRUCT then
              _str9275#set_e (read_talkException iprot)
            else
              iprot#skip _t9276)
          | _ -> iprot#skip _t9276);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9275

class loginWithVerifierForCertificate_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "loginWithVerifierForCertificate_args.verifier") | Some _x9278 -> _x9278
  method set_verifier _x9278 = _verifier <- Some _x9278
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithVerifierForCertificate_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithVerifierForCertificate_args (iprot : Protocol.t) =
  let _str9281 = new loginWithVerifierForCertificate_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9282,_id9283) = iprot#readFieldBegin in
        if _t9282 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9283 with 
          | 3 -> (if _t9282 = Protocol.T_STRING then
              _str9281#set_verifier iprot#readString
            else
              iprot#skip _t9282)
          | _ -> iprot#skip _t9282);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9281

class loginWithVerifierForCertificate_result =
object (self)
  val mutable _success : loginResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "loginWithVerifierForCertificate_result.success") | Some _x9284 -> _x9284
  method set_success _x9284 = _success <- Some _x9284
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "loginWithVerifierForCertificate_result.e") | Some _x9285 -> _x9285
  method set_e _x9285 = _e <- Some _x9285
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithVerifierForCertificate_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithVerifierForCertificate_result (iprot : Protocol.t) =
  let _str9288 = new loginWithVerifierForCertificate_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9289,_id9290) = iprot#readFieldBegin in
        if _t9289 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9290 with 
          | 0 -> (if _t9289 = Protocol.T_STRUCT then
              _str9288#set_success (read_loginResult iprot)
            else
              iprot#skip _t9289)
          | 1 -> (if _t9289 = Protocol.T_STRUCT then
              _str9288#set_e (read_talkException iprot)
            else
              iprot#skip _t9289)
          | _ -> iprot#skip _t9289);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9288

class logout_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "logout_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_logout_args (iprot : Protocol.t) =
  let _str9293 = new logout_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9294,_id9295) = iprot#readFieldBegin in
        if _t9294 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9295 with 
          | _ -> iprot#skip _t9294);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9293

class logout_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "logout_result.e") | Some _x9296 -> _x9296
  method set_e _x9296 = _e <- Some _x9296
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "logout_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_logout_result (iprot : Protocol.t) =
  let _str9299 = new logout_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9300,_id9301) = iprot#readFieldBegin in
        if _t9300 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9301 with 
          | 1 -> (if _t9300 = Protocol.T_STRUCT then
              _str9299#set_e (read_talkException iprot)
            else
              iprot#skip _t9300)
          | _ -> iprot#skip _t9300);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9299

class logoutSession_args =
object (self)
  val mutable _tokenKey : string option = None
  method get_tokenKey = _tokenKey
  method grab_tokenKey = match _tokenKey with None->raise (Field_empty "logoutSession_args.tokenKey") | Some _x9302 -> _x9302
  method set_tokenKey _x9302 = _tokenKey <- Some _x9302
  method unset_tokenKey = _tokenKey <- None
  method reset_tokenKey = _tokenKey <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "logoutSession_args";
    (match _tokenKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("tokenKey",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_logoutSession_args (iprot : Protocol.t) =
  let _str9305 = new logoutSession_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9306,_id9307) = iprot#readFieldBegin in
        if _t9306 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9307 with 
          | 2 -> (if _t9306 = Protocol.T_STRING then
              _str9305#set_tokenKey iprot#readString
            else
              iprot#skip _t9306)
          | _ -> iprot#skip _t9306);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9305

class logoutSession_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "logoutSession_result.e") | Some _x9308 -> _x9308
  method set_e _x9308 = _e <- Some _x9308
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "logoutSession_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_logoutSession_result (iprot : Protocol.t) =
  let _str9311 = new logoutSession_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9312,_id9313) = iprot#readFieldBegin in
        if _t9312 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9313 with 
          | 1 -> (if _t9312 = Protocol.T_STRUCT then
              _str9311#set_e (read_talkException iprot)
            else
              iprot#skip _t9312)
          | _ -> iprot#skip _t9312);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9311

class noop_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "noop_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_noop_args (iprot : Protocol.t) =
  let _str9316 = new noop_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9317,_id9318) = iprot#readFieldBegin in
        if _t9317 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9318 with 
          | _ -> iprot#skip _t9317);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9316

class noop_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "noop_result.e") | Some _x9319 -> _x9319
  method set_e _x9319 = _e <- Some _x9319
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "noop_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_noop_result (iprot : Protocol.t) =
  let _str9322 = new noop_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9323,_id9324) = iprot#readFieldBegin in
        if _t9323 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9324 with 
          | 1 -> (if _t9323 = Protocol.T_STRUCT then
              _str9322#set_e (read_talkException iprot)
            else
              iprot#skip _t9323)
          | _ -> iprot#skip _t9323);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9322

class notifiedRedirect_args =
object (self)
  val mutable _paramMap : (string,string) Hashtbl.t option = None
  method get_paramMap = _paramMap
  method grab_paramMap = match _paramMap with None->raise (Field_empty "notifiedRedirect_args.paramMap") | Some _x9325 -> _x9325
  method set_paramMap _x9325 = _paramMap <- Some _x9325
  method unset_paramMap = _paramMap <- None
  method reset_paramMap = _paramMap <- None

  method copy =
      let _new = Oo.copy self in
      if _paramMap <> None then
        _new#set_paramMap (Hashtbl.copy self#grab_paramMap);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifiedRedirect_args";
    (match _paramMap with None -> () | Some _v -> 
      oprot#writeFieldBegin("paramMap",Protocol.T_MAP,2);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter9328 -> fun _viter9329 -> 
        oprot#writeString(_kiter9328);
        oprot#writeString(_viter9329);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifiedRedirect_args (iprot : Protocol.t) =
  let _str9330 = new notifiedRedirect_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9331,_id9332) = iprot#readFieldBegin in
        if _t9331 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9332 with 
          | 2 -> (if _t9331 = Protocol.T_MAP then
              _str9330#set_paramMap 
                (let (_ktype9334,_vtype9335,_size9333) = iprot#readMapBegin in
                let _con9337 = Hashtbl.create _size9333 in
                  for i = 1 to _size9333 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con9337 _k _v
                  done; iprot#readMapEnd; _con9337)
            else
              iprot#skip _t9331)
          | _ -> iprot#skip _t9331);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9330

class notifiedRedirect_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifiedRedirect_result.e") | Some _x9338 -> _x9338
  method set_e _x9338 = _e <- Some _x9338
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifiedRedirect_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifiedRedirect_result (iprot : Protocol.t) =
  let _str9341 = new notifiedRedirect_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9342,_id9343) = iprot#readFieldBegin in
        if _t9342 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9343 with 
          | 1 -> (if _t9342 = Protocol.T_STRUCT then
              _str9341#set_e (read_talkException iprot)
            else
              iprot#skip _t9342)
          | _ -> iprot#skip _t9342);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9341

class notifyBuddyOnAir_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "notifyBuddyOnAir_args.seq") | Some _x9344 -> _x9344
  method set_seq _x9344 = _seq <- Some _x9344
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _receiverMids : string list option = None
  method get_receiverMids = _receiverMids
  method grab_receiverMids = match _receiverMids with None->raise (Field_empty "notifyBuddyOnAir_args.receiverMids") | Some _x9345 -> _x9345
  method set_receiverMids _x9345 = _receiverMids <- Some _x9345
  method unset_receiverMids = _receiverMids <- None
  method reset_receiverMids = _receiverMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyBuddyOnAir_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _receiverMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("receiverMids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9348 ->         oprot#writeString(_iter9348);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyBuddyOnAir_args (iprot : Protocol.t) =
  let _str9349 = new notifyBuddyOnAir_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9350,_id9351) = iprot#readFieldBegin in
        if _t9350 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9351 with 
          | 1 -> (if _t9350 = Protocol.T_I32 then
              _str9349#set_seq iprot#readI32
            else
              iprot#skip _t9350)
          | 2 -> (if _t9350 = Protocol.T_LIST then
              _str9349#set_receiverMids 
                (let (_etype9355,_size9352) = iprot#readListBegin in
                  let _con9356 = (Array.to_list (Array.init _size9352 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9356)
            else
              iprot#skip _t9350)
          | _ -> iprot#skip _t9350);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9349

class notifyBuddyOnAir_result =
object (self)
  val mutable _success : (string,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "notifyBuddyOnAir_result.success") | Some _x9357 -> _x9357
  method set_success _x9357 = _success <- Some _x9357
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyBuddyOnAir_result.e") | Some _x9358 -> _x9358
  method set_e _x9358 = _e <- Some _x9358
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyBuddyOnAir_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter9361 -> fun _viter9362 -> 
        oprot#writeString(_kiter9361);
        oprot#writeString(_viter9362);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyBuddyOnAir_result (iprot : Protocol.t) =
  let _str9363 = new notifyBuddyOnAir_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9364,_id9365) = iprot#readFieldBegin in
        if _t9364 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9365 with 
          | 0 -> (if _t9364 = Protocol.T_MAP then
              _str9363#set_success 
                (let (_ktype9367,_vtype9368,_size9366) = iprot#readMapBegin in
                let _con9370 = Hashtbl.create _size9366 in
                  for i = 1 to _size9366 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con9370 _k _v
                  done; iprot#readMapEnd; _con9370)
            else
              iprot#skip _t9364)
          | 1 -> (if _t9364 = Protocol.T_STRUCT then
              _str9363#set_e (read_talkException iprot)
            else
              iprot#skip _t9364)
          | _ -> iprot#skip _t9364);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9363

class notifyIndividualEvent_args =
object (self)
  val mutable _notificationStatus : NotificationStatus.t option = None
  method get_notificationStatus = _notificationStatus
  method grab_notificationStatus = match _notificationStatus with None->raise (Field_empty "notifyIndividualEvent_args.notificationStatus") | Some _x9371 -> _x9371
  method set_notificationStatus _x9371 = _notificationStatus <- Some _x9371
  method unset_notificationStatus = _notificationStatus <- None
  method reset_notificationStatus = _notificationStatus <- None

  val mutable _receiverMids : string list option = None
  method get_receiverMids = _receiverMids
  method grab_receiverMids = match _receiverMids with None->raise (Field_empty "notifyIndividualEvent_args.receiverMids") | Some _x9372 -> _x9372
  method set_receiverMids _x9372 = _receiverMids <- Some _x9372
  method unset_receiverMids = _receiverMids <- None
  method reset_receiverMids = _receiverMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyIndividualEvent_args";
    (match _notificationStatus with None -> () | Some _v -> 
      oprot#writeFieldBegin("notificationStatus",Protocol.T_I32,2);
      oprot#writeI32(NotificationStatus.to_i _v);
      oprot#writeFieldEnd
    );
    (match _receiverMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("receiverMids",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9375 ->         oprot#writeString(_iter9375);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyIndividualEvent_args (iprot : Protocol.t) =
  let _str9376 = new notifyIndividualEvent_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9377,_id9378) = iprot#readFieldBegin in
        if _t9377 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9378 with 
          | 2 -> (if _t9377 = Protocol.T_I32 then
              _str9376#set_notificationStatus (NotificationStatus.of_i iprot#readI32)
            else
              iprot#skip _t9377)
          | 3 -> (if _t9377 = Protocol.T_LIST then
              _str9376#set_receiverMids 
                (let (_etype9382,_size9379) = iprot#readListBegin in
                  let _con9383 = (Array.to_list (Array.init _size9379 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9383)
            else
              iprot#skip _t9377)
          | _ -> iprot#skip _t9377);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9376

class notifyIndividualEvent_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyIndividualEvent_result.e") | Some _x9384 -> _x9384
  method set_e _x9384 = _e <- Some _x9384
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyIndividualEvent_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyIndividualEvent_result (iprot : Protocol.t) =
  let _str9387 = new notifyIndividualEvent_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9388,_id9389) = iprot#readFieldBegin in
        if _t9388 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9389 with 
          | 1 -> (if _t9388 = Protocol.T_STRUCT then
              _str9387#set_e (read_talkException iprot)
            else
              iprot#skip _t9388)
          | _ -> iprot#skip _t9388);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9387

class notifyInstalled_args =
object (self)
  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "notifyInstalled_args.udidHash") | Some _x9390 -> _x9390
  method set_udidHash _x9390 = _udidHash <- Some _x9390
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _applicationTypeWithExtensions : string option = None
  method get_applicationTypeWithExtensions = _applicationTypeWithExtensions
  method grab_applicationTypeWithExtensions = match _applicationTypeWithExtensions with None->raise (Field_empty "notifyInstalled_args.applicationTypeWithExtensions") | Some _x9391 -> _x9391
  method set_applicationTypeWithExtensions _x9391 = _applicationTypeWithExtensions <- Some _x9391
  method unset_applicationTypeWithExtensions = _applicationTypeWithExtensions <- None
  method reset_applicationTypeWithExtensions = _applicationTypeWithExtensions <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyInstalled_args";
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _applicationTypeWithExtensions with None -> () | Some _v -> 
      oprot#writeFieldBegin("applicationTypeWithExtensions",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyInstalled_args (iprot : Protocol.t) =
  let _str9394 = new notifyInstalled_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9395,_id9396) = iprot#readFieldBegin in
        if _t9395 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9396 with 
          | 2 -> (if _t9395 = Protocol.T_STRING then
              _str9394#set_udidHash iprot#readString
            else
              iprot#skip _t9395)
          | 3 -> (if _t9395 = Protocol.T_STRING then
              _str9394#set_applicationTypeWithExtensions iprot#readString
            else
              iprot#skip _t9395)
          | _ -> iprot#skip _t9395);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9394

class notifyInstalled_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyInstalled_result.e") | Some _x9397 -> _x9397
  method set_e _x9397 = _e <- Some _x9397
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyInstalled_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyInstalled_result (iprot : Protocol.t) =
  let _str9400 = new notifyInstalled_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9401,_id9402) = iprot#readFieldBegin in
        if _t9401 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9402 with 
          | 1 -> (if _t9401 = Protocol.T_STRUCT then
              _str9400#set_e (read_talkException iprot)
            else
              iprot#skip _t9401)
          | _ -> iprot#skip _t9401);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9400

class notifyRegistrationComplete_args =
object (self)
  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "notifyRegistrationComplete_args.udidHash") | Some _x9403 -> _x9403
  method set_udidHash _x9403 = _udidHash <- Some _x9403
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _applicationTypeWithExtensions : string option = None
  method get_applicationTypeWithExtensions = _applicationTypeWithExtensions
  method grab_applicationTypeWithExtensions = match _applicationTypeWithExtensions with None->raise (Field_empty "notifyRegistrationComplete_args.applicationTypeWithExtensions") | Some _x9404 -> _x9404
  method set_applicationTypeWithExtensions _x9404 = _applicationTypeWithExtensions <- Some _x9404
  method unset_applicationTypeWithExtensions = _applicationTypeWithExtensions <- None
  method reset_applicationTypeWithExtensions = _applicationTypeWithExtensions <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyRegistrationComplete_args";
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _applicationTypeWithExtensions with None -> () | Some _v -> 
      oprot#writeFieldBegin("applicationTypeWithExtensions",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyRegistrationComplete_args (iprot : Protocol.t) =
  let _str9407 = new notifyRegistrationComplete_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9408,_id9409) = iprot#readFieldBegin in
        if _t9408 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9409 with 
          | 2 -> (if _t9408 = Protocol.T_STRING then
              _str9407#set_udidHash iprot#readString
            else
              iprot#skip _t9408)
          | 3 -> (if _t9408 = Protocol.T_STRING then
              _str9407#set_applicationTypeWithExtensions iprot#readString
            else
              iprot#skip _t9408)
          | _ -> iprot#skip _t9408);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9407

class notifyRegistrationComplete_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyRegistrationComplete_result.e") | Some _x9410 -> _x9410
  method set_e _x9410 = _e <- Some _x9410
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyRegistrationComplete_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyRegistrationComplete_result (iprot : Protocol.t) =
  let _str9413 = new notifyRegistrationComplete_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9414,_id9415) = iprot#readFieldBegin in
        if _t9414 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9415 with 
          | 1 -> (if _t9414 = Protocol.T_STRUCT then
              _str9413#set_e (read_talkException iprot)
            else
              iprot#skip _t9414)
          | _ -> iprot#skip _t9414);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9413

class notifySleep_args =
object (self)
  val mutable _lastRev : Int64.t option = None
  method get_lastRev = _lastRev
  method grab_lastRev = match _lastRev with None->raise (Field_empty "notifySleep_args.lastRev") | Some _x9416 -> _x9416
  method set_lastRev _x9416 = _lastRev <- Some _x9416
  method unset_lastRev = _lastRev <- None
  method reset_lastRev = _lastRev <- None

  val mutable _badge : Int32.t option = None
  method get_badge = _badge
  method grab_badge = match _badge with None->raise (Field_empty "notifySleep_args.badge") | Some _x9417 -> _x9417
  method set_badge _x9417 = _badge <- Some _x9417
  method unset_badge = _badge <- None
  method reset_badge = _badge <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifySleep_args";
    (match _lastRev with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastRev",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _badge with None -> () | Some _v -> 
      oprot#writeFieldBegin("badge",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifySleep_args (iprot : Protocol.t) =
  let _str9420 = new notifySleep_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9421,_id9422) = iprot#readFieldBegin in
        if _t9421 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9422 with 
          | 2 -> (if _t9421 = Protocol.T_I64 then
              _str9420#set_lastRev iprot#readI64
            else
              iprot#skip _t9421)
          | 3 -> (if _t9421 = Protocol.T_I32 then
              _str9420#set_badge iprot#readI32
            else
              iprot#skip _t9421)
          | _ -> iprot#skip _t9421);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9420

class notifySleep_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifySleep_result.e") | Some _x9423 -> _x9423
  method set_e _x9423 = _e <- Some _x9423
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifySleep_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifySleep_result (iprot : Protocol.t) =
  let _str9426 = new notifySleep_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9427,_id9428) = iprot#readFieldBegin in
        if _t9427 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9428 with 
          | 1 -> (if _t9427 = Protocol.T_STRUCT then
              _str9426#set_e (read_talkException iprot)
            else
              iprot#skip _t9427)
          | _ -> iprot#skip _t9427);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9426

class notifyUpdated_args =
object (self)
  val mutable _lastRev : Int64.t option = None
  method get_lastRev = _lastRev
  method grab_lastRev = match _lastRev with None->raise (Field_empty "notifyUpdated_args.lastRev") | Some _x9429 -> _x9429
  method set_lastRev _x9429 = _lastRev <- Some _x9429
  method unset_lastRev = _lastRev <- None
  method reset_lastRev = _lastRev <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "notifyUpdated_args.deviceInfo") | Some _x9430 -> _x9430
  method set_deviceInfo _x9430 = _deviceInfo <- Some _x9430
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  method copy =
      let _new = Oo.copy self in
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyUpdated_args";
    (match _lastRev with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastRev",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,3);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyUpdated_args (iprot : Protocol.t) =
  let _str9433 = new notifyUpdated_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9434,_id9435) = iprot#readFieldBegin in
        if _t9434 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9435 with 
          | 2 -> (if _t9434 = Protocol.T_I64 then
              _str9433#set_lastRev iprot#readI64
            else
              iprot#skip _t9434)
          | 3 -> (if _t9434 = Protocol.T_STRUCT then
              _str9433#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t9434)
          | _ -> iprot#skip _t9434);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9433

class notifyUpdated_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyUpdated_result.e") | Some _x9436 -> _x9436
  method set_e _x9436 = _e <- Some _x9436
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyUpdated_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyUpdated_result (iprot : Protocol.t) =
  let _str9439 = new notifyUpdated_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9440,_id9441) = iprot#readFieldBegin in
        if _t9440 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9441 with 
          | 1 -> (if _t9440 = Protocol.T_STRUCT then
              _str9439#set_e (read_talkException iprot)
            else
              iprot#skip _t9440)
          | _ -> iprot#skip _t9440);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9439

class openProximityMatch_args =
object (self)
  val mutable _location : location option = None
  method get_location = _location
  method grab_location = match _location with None->raise (Field_empty "openProximityMatch_args.location") | Some _x9442 -> _x9442
  method set_location _x9442 = _location <- Some _x9442
  method unset_location = _location <- None
  method reset_location = _location <- None

  method copy =
      let _new = Oo.copy self in
      if _location <> None then
        _new#set_location self#grab_location#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "openProximityMatch_args";
    (match _location with None -> () | Some _v -> 
      oprot#writeFieldBegin("location",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_openProximityMatch_args (iprot : Protocol.t) =
  let _str9445 = new openProximityMatch_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9446,_id9447) = iprot#readFieldBegin in
        if _t9446 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9447 with 
          | 2 -> (if _t9446 = Protocol.T_STRUCT then
              _str9445#set_location (read_location iprot)
            else
              iprot#skip _t9446)
          | _ -> iprot#skip _t9446);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9445

class openProximityMatch_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "openProximityMatch_result.success") | Some _x9448 -> _x9448
  method set_success _x9448 = _success <- Some _x9448
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "openProximityMatch_result.e") | Some _x9449 -> _x9449
  method set_e _x9449 = _e <- Some _x9449
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "openProximityMatch_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_openProximityMatch_result (iprot : Protocol.t) =
  let _str9452 = new openProximityMatch_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9453,_id9454) = iprot#readFieldBegin in
        if _t9453 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9454 with 
          | 0 -> (if _t9453 = Protocol.T_STRING then
              _str9452#set_success iprot#readString
            else
              iprot#skip _t9453)
          | 1 -> (if _t9453 = Protocol.T_STRUCT then
              _str9452#set_e (read_talkException iprot)
            else
              iprot#skip _t9453)
          | _ -> iprot#skip _t9453);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9452

class registerBuddyUser_args =
object (self)
  val mutable _buddyId : string option = None
  method get_buddyId = _buddyId
  method grab_buddyId = match _buddyId with None->raise (Field_empty "registerBuddyUser_args.buddyId") | Some _x9455 -> _x9455
  method set_buddyId _x9455 = _buddyId <- Some _x9455
  method unset_buddyId = _buddyId <- None
  method reset_buddyId = _buddyId <- None

  val mutable _registrarPassword : string option = None
  method get_registrarPassword = _registrarPassword
  method grab_registrarPassword = match _registrarPassword with None->raise (Field_empty "registerBuddyUser_args.registrarPassword") | Some _x9456 -> _x9456
  method set_registrarPassword _x9456 = _registrarPassword <- Some _x9456
  method unset_registrarPassword = _registrarPassword <- None
  method reset_registrarPassword = _registrarPassword <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerBuddyUser_args";
    (match _buddyId with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _registrarPassword with None -> () | Some _v -> 
      oprot#writeFieldBegin("registrarPassword",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerBuddyUser_args (iprot : Protocol.t) =
  let _str9459 = new registerBuddyUser_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9460,_id9461) = iprot#readFieldBegin in
        if _t9460 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9461 with 
          | 2 -> (if _t9460 = Protocol.T_STRING then
              _str9459#set_buddyId iprot#readString
            else
              iprot#skip _t9460)
          | 3 -> (if _t9460 = Protocol.T_STRING then
              _str9459#set_registrarPassword iprot#readString
            else
              iprot#skip _t9460)
          | _ -> iprot#skip _t9460);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9459

class registerBuddyUser_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerBuddyUser_result.success") | Some _x9462 -> _x9462
  method set_success _x9462 = _success <- Some _x9462
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerBuddyUser_result.e") | Some _x9463 -> _x9463
  method set_e _x9463 = _e <- Some _x9463
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerBuddyUser_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerBuddyUser_result (iprot : Protocol.t) =
  let _str9466 = new registerBuddyUser_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9467,_id9468) = iprot#readFieldBegin in
        if _t9467 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9468 with 
          | 0 -> (if _t9467 = Protocol.T_STRING then
              _str9466#set_success iprot#readString
            else
              iprot#skip _t9467)
          | 1 -> (if _t9467 = Protocol.T_STRUCT then
              _str9466#set_e (read_talkException iprot)
            else
              iprot#skip _t9467)
          | _ -> iprot#skip _t9467);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9466

class registerBuddyUserid_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "registerBuddyUserid_args.seq") | Some _x9469 -> _x9469
  method set_seq _x9469 = _seq <- Some _x9469
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _userid : string option = None
  method get_userid = _userid
  method grab_userid = match _userid with None->raise (Field_empty "registerBuddyUserid_args.userid") | Some _x9470 -> _x9470
  method set_userid _x9470 = _userid <- Some _x9470
  method unset_userid = _userid <- None
  method reset_userid = _userid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerBuddyUserid_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,2);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _userid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userid",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerBuddyUserid_args (iprot : Protocol.t) =
  let _str9473 = new registerBuddyUserid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9474,_id9475) = iprot#readFieldBegin in
        if _t9474 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9475 with 
          | 2 -> (if _t9474 = Protocol.T_I32 then
              _str9473#set_seq iprot#readI32
            else
              iprot#skip _t9474)
          | 3 -> (if _t9474 = Protocol.T_STRING then
              _str9473#set_userid iprot#readString
            else
              iprot#skip _t9474)
          | _ -> iprot#skip _t9474);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9473

class registerBuddyUserid_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerBuddyUserid_result.e") | Some _x9476 -> _x9476
  method set_e _x9476 = _e <- Some _x9476
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerBuddyUserid_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerBuddyUserid_result (iprot : Protocol.t) =
  let _str9479 = new registerBuddyUserid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9480,_id9481) = iprot#readFieldBegin in
        if _t9480 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9481 with 
          | 1 -> (if _t9480 = Protocol.T_STRUCT then
              _str9479#set_e (read_talkException iprot)
            else
              iprot#skip _t9480)
          | _ -> iprot#skip _t9480);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9479

class registerDevice_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "registerDevice_args.sessionId") | Some _x9482 -> _x9482
  method set_sessionId _x9482 = _sessionId <- Some _x9482
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerDevice_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerDevice_args (iprot : Protocol.t) =
  let _str9485 = new registerDevice_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9486,_id9487) = iprot#readFieldBegin in
        if _t9486 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9487 with 
          | 2 -> (if _t9486 = Protocol.T_STRING then
              _str9485#set_sessionId iprot#readString
            else
              iprot#skip _t9486)
          | _ -> iprot#skip _t9486);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9485

class registerDevice_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerDevice_result.success") | Some _x9488 -> _x9488
  method set_success _x9488 = _success <- Some _x9488
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerDevice_result.e") | Some _x9489 -> _x9489
  method set_e _x9489 = _e <- Some _x9489
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerDevice_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerDevice_result (iprot : Protocol.t) =
  let _str9492 = new registerDevice_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9493,_id9494) = iprot#readFieldBegin in
        if _t9493 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9494 with 
          | 0 -> (if _t9493 = Protocol.T_STRING then
              _str9492#set_success iprot#readString
            else
              iprot#skip _t9493)
          | 1 -> (if _t9493 = Protocol.T_STRUCT then
              _str9492#set_e (read_talkException iprot)
            else
              iprot#skip _t9493)
          | _ -> iprot#skip _t9493);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9492

class registerDeviceWithIdentityCredential_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "registerDeviceWithIdentityCredential_args.sessionId") | Some _x9495 -> _x9495
  method set_sessionId _x9495 = _sessionId <- Some _x9495
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  val mutable _provider : IdentityProvider.t option = None
  method get_provider = _provider
  method grab_provider = match _provider with None->raise (Field_empty "registerDeviceWithIdentityCredential_args.provider") | Some _x9496 -> _x9496
  method set_provider _x9496 = _provider <- Some _x9496
  method unset_provider = _provider <- None
  method reset_provider = _provider <- None

  val mutable _identifier : string option = None
  method get_identifier = _identifier
  method grab_identifier = match _identifier with None->raise (Field_empty "registerDeviceWithIdentityCredential_args.identifier") | Some _x9497 -> _x9497
  method set_identifier _x9497 = _identifier <- Some _x9497
  method unset_identifier = _identifier <- None
  method reset_identifier = _identifier <- None

  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "registerDeviceWithIdentityCredential_args.verifier") | Some _x9498 -> _x9498
  method set_verifier _x9498 = _verifier <- Some _x9498
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerDeviceWithIdentityCredential_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _identifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("identifier",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _provider with None -> () | Some _v -> 
      oprot#writeFieldBegin("provider",Protocol.T_I32,5);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerDeviceWithIdentityCredential_args (iprot : Protocol.t) =
  let _str9501 = new registerDeviceWithIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9502,_id9503) = iprot#readFieldBegin in
        if _t9502 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9503 with 
          | 2 -> (if _t9502 = Protocol.T_STRING then
              _str9501#set_sessionId iprot#readString
            else
              iprot#skip _t9502)
          | 5 -> (if _t9502 = Protocol.T_I32 then
              _str9501#set_provider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t9502)
          | 3 -> (if _t9502 = Protocol.T_STRING then
              _str9501#set_identifier iprot#readString
            else
              iprot#skip _t9502)
          | 4 -> (if _t9502 = Protocol.T_STRING then
              _str9501#set_verifier iprot#readString
            else
              iprot#skip _t9502)
          | _ -> iprot#skip _t9502);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9501

class registerDeviceWithIdentityCredential_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerDeviceWithIdentityCredential_result.success") | Some _x9504 -> _x9504
  method set_success _x9504 = _success <- Some _x9504
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerDeviceWithIdentityCredential_result.e") | Some _x9505 -> _x9505
  method set_e _x9505 = _e <- Some _x9505
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerDeviceWithIdentityCredential_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerDeviceWithIdentityCredential_result (iprot : Protocol.t) =
  let _str9508 = new registerDeviceWithIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9509,_id9510) = iprot#readFieldBegin in
        if _t9509 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9510 with 
          | 0 -> (if _t9509 = Protocol.T_STRING then
              _str9508#set_success iprot#readString
            else
              iprot#skip _t9509)
          | 1 -> (if _t9509 = Protocol.T_STRUCT then
              _str9508#set_e (read_talkException iprot)
            else
              iprot#skip _t9509)
          | _ -> iprot#skip _t9509);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9508

class registerDeviceWithoutPhoneNumber_args =
object (self)
  val mutable _region : string option = None
  method get_region = _region
  method grab_region = match _region with None->raise (Field_empty "registerDeviceWithoutPhoneNumber_args.region") | Some _x9511 -> _x9511
  method set_region _x9511 = _region <- Some _x9511
  method unset_region = _region <- None
  method reset_region = _region <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "registerDeviceWithoutPhoneNumber_args.udidHash") | Some _x9512 -> _x9512
  method set_udidHash _x9512 = _udidHash <- Some _x9512
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "registerDeviceWithoutPhoneNumber_args.deviceInfo") | Some _x9513 -> _x9513
  method set_deviceInfo _x9513 = _deviceInfo <- Some _x9513
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  method copy =
      let _new = Oo.copy self in
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerDeviceWithoutPhoneNumber_args";
    (match _region with None -> () | Some _v -> 
      oprot#writeFieldBegin("region",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,4);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerDeviceWithoutPhoneNumber_args (iprot : Protocol.t) =
  let _str9516 = new registerDeviceWithoutPhoneNumber_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9517,_id9518) = iprot#readFieldBegin in
        if _t9517 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9518 with 
          | 2 -> (if _t9517 = Protocol.T_STRING then
              _str9516#set_region iprot#readString
            else
              iprot#skip _t9517)
          | 3 -> (if _t9517 = Protocol.T_STRING then
              _str9516#set_udidHash iprot#readString
            else
              iprot#skip _t9517)
          | 4 -> (if _t9517 = Protocol.T_STRUCT then
              _str9516#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t9517)
          | _ -> iprot#skip _t9517);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9516

class registerDeviceWithoutPhoneNumber_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerDeviceWithoutPhoneNumber_result.success") | Some _x9519 -> _x9519
  method set_success _x9519 = _success <- Some _x9519
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerDeviceWithoutPhoneNumber_result.e") | Some _x9520 -> _x9520
  method set_e _x9520 = _e <- Some _x9520
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerDeviceWithoutPhoneNumber_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerDeviceWithoutPhoneNumber_result (iprot : Protocol.t) =
  let _str9523 = new registerDeviceWithoutPhoneNumber_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9524,_id9525) = iprot#readFieldBegin in
        if _t9524 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9525 with 
          | 0 -> (if _t9524 = Protocol.T_STRING then
              _str9523#set_success iprot#readString
            else
              iprot#skip _t9524)
          | 1 -> (if _t9524 = Protocol.T_STRUCT then
              _str9523#set_e (read_talkException iprot)
            else
              iprot#skip _t9524)
          | _ -> iprot#skip _t9524);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9523

class registerDeviceWithoutPhoneNumberWithIdentityCredential_args =
object (self)
  val mutable _region : string option = None
  method get_region = _region
  method grab_region = match _region with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_args.region") | Some _x9526 -> _x9526
  method set_region _x9526 = _region <- Some _x9526
  method unset_region = _region <- None
  method reset_region = _region <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_args.udidHash") | Some _x9527 -> _x9527
  method set_udidHash _x9527 = _udidHash <- Some _x9527
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_args.deviceInfo") | Some _x9528 -> _x9528
  method set_deviceInfo _x9528 = _deviceInfo <- Some _x9528
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  val mutable _provider : IdentityProvider.t option = None
  method get_provider = _provider
  method grab_provider = match _provider with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_args.provider") | Some _x9529 -> _x9529
  method set_provider _x9529 = _provider <- Some _x9529
  method unset_provider = _provider <- None
  method reset_provider = _provider <- None

  val mutable _identifier : string option = None
  method get_identifier = _identifier
  method grab_identifier = match _identifier with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_args.identifier") | Some _x9530 -> _x9530
  method set_identifier _x9530 = _identifier <- Some _x9530
  method unset_identifier = _identifier <- None
  method reset_identifier = _identifier <- None

  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_args.verifier") | Some _x9531 -> _x9531
  method set_verifier _x9531 = _verifier <- Some _x9531
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_args.mid") | Some _x9532 -> _x9532
  method set_mid _x9532 = _mid <- Some _x9532
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  val mutable _migrationPincodeSessionId : string option = None
  method get_migrationPincodeSessionId = _migrationPincodeSessionId
  method grab_migrationPincodeSessionId = match _migrationPincodeSessionId with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_args.migrationPincodeSessionId") | Some _x9533 -> _x9533
  method set_migrationPincodeSessionId _x9533 = _migrationPincodeSessionId <- Some _x9533
  method unset_migrationPincodeSessionId = _migrationPincodeSessionId <- None
  method reset_migrationPincodeSessionId = _migrationPincodeSessionId <- None

  method copy =
      let _new = Oo.copy self in
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerDeviceWithoutPhoneNumberWithIdentityCredential_args";
    (match _region with None -> () | Some _v -> 
      oprot#writeFieldBegin("region",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,4);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _provider with None -> () | Some _v -> 
      oprot#writeFieldBegin("provider",Protocol.T_I32,5);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    (match _identifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("identifier",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,8);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _migrationPincodeSessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("migrationPincodeSessionId",Protocol.T_STRING,9);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerDeviceWithoutPhoneNumberWithIdentityCredential_args (iprot : Protocol.t) =
  let _str9536 = new registerDeviceWithoutPhoneNumberWithIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9537,_id9538) = iprot#readFieldBegin in
        if _t9537 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9538 with 
          | 2 -> (if _t9537 = Protocol.T_STRING then
              _str9536#set_region iprot#readString
            else
              iprot#skip _t9537)
          | 3 -> (if _t9537 = Protocol.T_STRING then
              _str9536#set_udidHash iprot#readString
            else
              iprot#skip _t9537)
          | 4 -> (if _t9537 = Protocol.T_STRUCT then
              _str9536#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t9537)
          | 5 -> (if _t9537 = Protocol.T_I32 then
              _str9536#set_provider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t9537)
          | 6 -> (if _t9537 = Protocol.T_STRING then
              _str9536#set_identifier iprot#readString
            else
              iprot#skip _t9537)
          | 7 -> (if _t9537 = Protocol.T_STRING then
              _str9536#set_verifier iprot#readString
            else
              iprot#skip _t9537)
          | 8 -> (if _t9537 = Protocol.T_STRING then
              _str9536#set_mid iprot#readString
            else
              iprot#skip _t9537)
          | 9 -> (if _t9537 = Protocol.T_STRING then
              _str9536#set_migrationPincodeSessionId iprot#readString
            else
              iprot#skip _t9537)
          | _ -> iprot#skip _t9537);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9536

class registerDeviceWithoutPhoneNumberWithIdentityCredential_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_result.success") | Some _x9539 -> _x9539
  method set_success _x9539 = _success <- Some _x9539
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_result.e") | Some _x9540 -> _x9540
  method set_e _x9540 = _e <- Some _x9540
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerDeviceWithoutPhoneNumberWithIdentityCredential_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerDeviceWithoutPhoneNumberWithIdentityCredential_result (iprot : Protocol.t) =
  let _str9543 = new registerDeviceWithoutPhoneNumberWithIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9544,_id9545) = iprot#readFieldBegin in
        if _t9544 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9545 with 
          | 0 -> (if _t9544 = Protocol.T_STRING then
              _str9543#set_success iprot#readString
            else
              iprot#skip _t9544)
          | 1 -> (if _t9544 = Protocol.T_STRUCT then
              _str9543#set_e (read_talkException iprot)
            else
              iprot#skip _t9544)
          | _ -> iprot#skip _t9544);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9543

class registerUserid_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "registerUserid_args.reqSeq") | Some _x9546 -> _x9546
  method set_reqSeq _x9546 = _reqSeq <- Some _x9546
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _userid : string option = None
  method get_userid = _userid
  method grab_userid = match _userid with None->raise (Field_empty "registerUserid_args.userid") | Some _x9547 -> _x9547
  method set_userid _x9547 = _userid <- Some _x9547
  method unset_userid = _userid <- None
  method reset_userid = _userid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerUserid_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _userid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerUserid_args (iprot : Protocol.t) =
  let _str9550 = new registerUserid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9551,_id9552) = iprot#readFieldBegin in
        if _t9551 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9552 with 
          | 1 -> (if _t9551 = Protocol.T_I32 then
              _str9550#set_reqSeq iprot#readI32
            else
              iprot#skip _t9551)
          | 2 -> (if _t9551 = Protocol.T_STRING then
              _str9550#set_userid iprot#readString
            else
              iprot#skip _t9551)
          | _ -> iprot#skip _t9551);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9550

class registerUserid_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerUserid_result.success") | Some _x9553 -> _x9553
  method set_success _x9553 = _success <- Some _x9553
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerUserid_result.e") | Some _x9554 -> _x9554
  method set_e _x9554 = _e <- Some _x9554
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerUserid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerUserid_result (iprot : Protocol.t) =
  let _str9557 = new registerUserid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9558,_id9559) = iprot#readFieldBegin in
        if _t9558 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9559 with 
          | 0 -> (if _t9558 = Protocol.T_BOOL then
              _str9557#set_success iprot#readBool
            else
              iprot#skip _t9558)
          | 1 -> (if _t9558 = Protocol.T_STRUCT then
              _str9557#set_e (read_talkException iprot)
            else
              iprot#skip _t9558)
          | _ -> iprot#skip _t9558);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9557

class registerWapDevice_args =
object (self)
  val mutable _invitationHash : string option = None
  method get_invitationHash = _invitationHash
  method grab_invitationHash = match _invitationHash with None->raise (Field_empty "registerWapDevice_args.invitationHash") | Some _x9560 -> _x9560
  method set_invitationHash _x9560 = _invitationHash <- Some _x9560
  method unset_invitationHash = _invitationHash <- None
  method reset_invitationHash = _invitationHash <- None

  val mutable _guidHash : string option = None
  method get_guidHash = _guidHash
  method grab_guidHash = match _guidHash with None->raise (Field_empty "registerWapDevice_args.guidHash") | Some _x9561 -> _x9561
  method set_guidHash _x9561 = _guidHash <- Some _x9561
  method unset_guidHash = _guidHash <- None
  method reset_guidHash = _guidHash <- None

  val mutable _email : string option = None
  method get_email = _email
  method grab_email = match _email with None->raise (Field_empty "registerWapDevice_args.email") | Some _x9562 -> _x9562
  method set_email _x9562 = _email <- Some _x9562
  method unset_email = _email <- None
  method reset_email = _email <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "registerWapDevice_args.deviceInfo") | Some _x9563 -> _x9563
  method set_deviceInfo _x9563 = _deviceInfo <- Some _x9563
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  method copy =
      let _new = Oo.copy self in
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWapDevice_args";
    (match _invitationHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("invitationHash",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _guidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("guidHash",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _email with None -> () | Some _v -> 
      oprot#writeFieldBegin("email",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,5);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWapDevice_args (iprot : Protocol.t) =
  let _str9566 = new registerWapDevice_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9567,_id9568) = iprot#readFieldBegin in
        if _t9567 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9568 with 
          | 2 -> (if _t9567 = Protocol.T_STRING then
              _str9566#set_invitationHash iprot#readString
            else
              iprot#skip _t9567)
          | 3 -> (if _t9567 = Protocol.T_STRING then
              _str9566#set_guidHash iprot#readString
            else
              iprot#skip _t9567)
          | 4 -> (if _t9567 = Protocol.T_STRING then
              _str9566#set_email iprot#readString
            else
              iprot#skip _t9567)
          | 5 -> (if _t9567 = Protocol.T_STRUCT then
              _str9566#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t9567)
          | _ -> iprot#skip _t9567);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9566

class registerWapDevice_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerWapDevice_result.success") | Some _x9569 -> _x9569
  method set_success _x9569 = _success <- Some _x9569
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerWapDevice_result.e") | Some _x9570 -> _x9570
  method set_e _x9570 = _e <- Some _x9570
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWapDevice_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWapDevice_result (iprot : Protocol.t) =
  let _str9573 = new registerWapDevice_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9574,_id9575) = iprot#readFieldBegin in
        if _t9574 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9575 with 
          | 0 -> (if _t9574 = Protocol.T_STRING then
              _str9573#set_success iprot#readString
            else
              iprot#skip _t9574)
          | 1 -> (if _t9574 = Protocol.T_STRUCT then
              _str9573#set_e (read_talkException iprot)
            else
              iprot#skip _t9574)
          | _ -> iprot#skip _t9574);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9573

class registerWithExistingSnsIdAndIdentityCredential_args =
object (self)
  val mutable _identityCredential : identityCredential option = None
  method get_identityCredential = _identityCredential
  method grab_identityCredential = match _identityCredential with None->raise (Field_empty "registerWithExistingSnsIdAndIdentityCredential_args.identityCredential") | Some _x9576 -> _x9576
  method set_identityCredential _x9576 = _identityCredential <- Some _x9576
  method unset_identityCredential = _identityCredential <- None
  method reset_identityCredential = _identityCredential <- None

  val mutable _region : string option = None
  method get_region = _region
  method grab_region = match _region with None->raise (Field_empty "registerWithExistingSnsIdAndIdentityCredential_args.region") | Some _x9577 -> _x9577
  method set_region _x9577 = _region <- Some _x9577
  method unset_region = _region <- None
  method reset_region = _region <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "registerWithExistingSnsIdAndIdentityCredential_args.udidHash") | Some _x9578 -> _x9578
  method set_udidHash _x9578 = _udidHash <- Some _x9578
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "registerWithExistingSnsIdAndIdentityCredential_args.deviceInfo") | Some _x9579 -> _x9579
  method set_deviceInfo _x9579 = _deviceInfo <- Some _x9579
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  method copy =
      let _new = Oo.copy self in
      if _identityCredential <> None then
        _new#set_identityCredential self#grab_identityCredential#copy;
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithExistingSnsIdAndIdentityCredential_args";
    (match _identityCredential with None -> () | Some _v -> 
      oprot#writeFieldBegin("identityCredential",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _region with None -> () | Some _v -> 
      oprot#writeFieldBegin("region",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,5);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithExistingSnsIdAndIdentityCredential_args (iprot : Protocol.t) =
  let _str9582 = new registerWithExistingSnsIdAndIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9583,_id9584) = iprot#readFieldBegin in
        if _t9583 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9584 with 
          | 2 -> (if _t9583 = Protocol.T_STRUCT then
              _str9582#set_identityCredential (read_identityCredential iprot)
            else
              iprot#skip _t9583)
          | 3 -> (if _t9583 = Protocol.T_STRING then
              _str9582#set_region iprot#readString
            else
              iprot#skip _t9583)
          | 4 -> (if _t9583 = Protocol.T_STRING then
              _str9582#set_udidHash iprot#readString
            else
              iprot#skip _t9583)
          | 5 -> (if _t9583 = Protocol.T_STRUCT then
              _str9582#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t9583)
          | _ -> iprot#skip _t9583);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9582

class registerWithExistingSnsIdAndIdentityCredential_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerWithExistingSnsIdAndIdentityCredential_result.success") | Some _x9585 -> _x9585
  method set_success _x9585 = _success <- Some _x9585
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerWithExistingSnsIdAndIdentityCredential_result.e") | Some _x9586 -> _x9586
  method set_e _x9586 = _e <- Some _x9586
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithExistingSnsIdAndIdentityCredential_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithExistingSnsIdAndIdentityCredential_result (iprot : Protocol.t) =
  let _str9589 = new registerWithExistingSnsIdAndIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9590,_id9591) = iprot#readFieldBegin in
        if _t9590 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9591 with 
          | 0 -> (if _t9590 = Protocol.T_STRING then
              _str9589#set_success iprot#readString
            else
              iprot#skip _t9590)
          | 1 -> (if _t9590 = Protocol.T_STRUCT then
              _str9589#set_e (read_talkException iprot)
            else
              iprot#skip _t9590)
          | _ -> iprot#skip _t9590);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9589

class registerWithSnsId_args =
object (self)
  val mutable _snsIdType : SnsIdType.t option = None
  method get_snsIdType = _snsIdType
  method grab_snsIdType = match _snsIdType with None->raise (Field_empty "registerWithSnsId_args.snsIdType") | Some _x9592 -> _x9592
  method set_snsIdType _x9592 = _snsIdType <- Some _x9592
  method unset_snsIdType = _snsIdType <- None
  method reset_snsIdType = _snsIdType <- None

  val mutable _snsAccessToken : string option = None
  method get_snsAccessToken = _snsAccessToken
  method grab_snsAccessToken = match _snsAccessToken with None->raise (Field_empty "registerWithSnsId_args.snsAccessToken") | Some _x9593 -> _x9593
  method set_snsAccessToken _x9593 = _snsAccessToken <- Some _x9593
  method unset_snsAccessToken = _snsAccessToken <- None
  method reset_snsAccessToken = _snsAccessToken <- None

  val mutable _region : string option = None
  method get_region = _region
  method grab_region = match _region with None->raise (Field_empty "registerWithSnsId_args.region") | Some _x9594 -> _x9594
  method set_region _x9594 = _region <- Some _x9594
  method unset_region = _region <- None
  method reset_region = _region <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "registerWithSnsId_args.udidHash") | Some _x9595 -> _x9595
  method set_udidHash _x9595 = _udidHash <- Some _x9595
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "registerWithSnsId_args.deviceInfo") | Some _x9596 -> _x9596
  method set_deviceInfo _x9596 = _deviceInfo <- Some _x9596
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "registerWithSnsId_args.mid") | Some _x9597 -> _x9597
  method set_mid _x9597 = _mid <- Some _x9597
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithSnsId_args";
    (match _snsIdType with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsIdType",Protocol.T_I32,2);
      oprot#writeI32(SnsIdType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _snsAccessToken with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsAccessToken",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _region with None -> () | Some _v -> 
      oprot#writeFieldBegin("region",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,6);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithSnsId_args (iprot : Protocol.t) =
  let _str9600 = new registerWithSnsId_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9601,_id9602) = iprot#readFieldBegin in
        if _t9601 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9602 with 
          | 2 -> (if _t9601 = Protocol.T_I32 then
              _str9600#set_snsIdType (SnsIdType.of_i iprot#readI32)
            else
              iprot#skip _t9601)
          | 3 -> (if _t9601 = Protocol.T_STRING then
              _str9600#set_snsAccessToken iprot#readString
            else
              iprot#skip _t9601)
          | 4 -> (if _t9601 = Protocol.T_STRING then
              _str9600#set_region iprot#readString
            else
              iprot#skip _t9601)
          | 5 -> (if _t9601 = Protocol.T_STRING then
              _str9600#set_udidHash iprot#readString
            else
              iprot#skip _t9601)
          | 6 -> (if _t9601 = Protocol.T_STRUCT then
              _str9600#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t9601)
          | 7 -> (if _t9601 = Protocol.T_STRING then
              _str9600#set_mid iprot#readString
            else
              iprot#skip _t9601)
          | _ -> iprot#skip _t9601);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9600

class registerWithSnsId_result =
object (self)
  val mutable _success : registerWithSnsIdResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerWithSnsId_result.success") | Some _x9603 -> _x9603
  method set_success _x9603 = _success <- Some _x9603
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerWithSnsId_result.e") | Some _x9604 -> _x9604
  method set_e _x9604 = _e <- Some _x9604
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithSnsId_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithSnsId_result (iprot : Protocol.t) =
  let _str9607 = new registerWithSnsId_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9608,_id9609) = iprot#readFieldBegin in
        if _t9608 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9609 with 
          | 0 -> (if _t9608 = Protocol.T_STRUCT then
              _str9607#set_success (read_registerWithSnsIdResult iprot)
            else
              iprot#skip _t9608)
          | 1 -> (if _t9608 = Protocol.T_STRUCT then
              _str9607#set_e (read_talkException iprot)
            else
              iprot#skip _t9608)
          | _ -> iprot#skip _t9608);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9607

class registerWithSnsIdAndIdentityCredential_args =
object (self)
  val mutable _snsIdType : SnsIdType.t option = None
  method get_snsIdType = _snsIdType
  method grab_snsIdType = match _snsIdType with None->raise (Field_empty "registerWithSnsIdAndIdentityCredential_args.snsIdType") | Some _x9610 -> _x9610
  method set_snsIdType _x9610 = _snsIdType <- Some _x9610
  method unset_snsIdType = _snsIdType <- None
  method reset_snsIdType = _snsIdType <- None

  val mutable _snsAccessToken : string option = None
  method get_snsAccessToken = _snsAccessToken
  method grab_snsAccessToken = match _snsAccessToken with None->raise (Field_empty "registerWithSnsIdAndIdentityCredential_args.snsAccessToken") | Some _x9611 -> _x9611
  method set_snsAccessToken _x9611 = _snsAccessToken <- Some _x9611
  method unset_snsAccessToken = _snsAccessToken <- None
  method reset_snsAccessToken = _snsAccessToken <- None

  val mutable _identityCredential : identityCredential option = None
  method get_identityCredential = _identityCredential
  method grab_identityCredential = match _identityCredential with None->raise (Field_empty "registerWithSnsIdAndIdentityCredential_args.identityCredential") | Some _x9612 -> _x9612
  method set_identityCredential _x9612 = _identityCredential <- Some _x9612
  method unset_identityCredential = _identityCredential <- None
  method reset_identityCredential = _identityCredential <- None

  val mutable _region : string option = None
  method get_region = _region
  method grab_region = match _region with None->raise (Field_empty "registerWithSnsIdAndIdentityCredential_args.region") | Some _x9613 -> _x9613
  method set_region _x9613 = _region <- Some _x9613
  method unset_region = _region <- None
  method reset_region = _region <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "registerWithSnsIdAndIdentityCredential_args.udidHash") | Some _x9614 -> _x9614
  method set_udidHash _x9614 = _udidHash <- Some _x9614
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "registerWithSnsIdAndIdentityCredential_args.deviceInfo") | Some _x9615 -> _x9615
  method set_deviceInfo _x9615 = _deviceInfo <- Some _x9615
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  method copy =
      let _new = Oo.copy self in
      if _identityCredential <> None then
        _new#set_identityCredential self#grab_identityCredential#copy;
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithSnsIdAndIdentityCredential_args";
    (match _snsIdType with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsIdType",Protocol.T_I32,2);
      oprot#writeI32(SnsIdType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _snsAccessToken with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsAccessToken",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _identityCredential with None -> () | Some _v -> 
      oprot#writeFieldBegin("identityCredential",Protocol.T_STRUCT,4);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _region with None -> () | Some _v -> 
      oprot#writeFieldBegin("region",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,7);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithSnsIdAndIdentityCredential_args (iprot : Protocol.t) =
  let _str9618 = new registerWithSnsIdAndIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9619,_id9620) = iprot#readFieldBegin in
        if _t9619 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9620 with 
          | 2 -> (if _t9619 = Protocol.T_I32 then
              _str9618#set_snsIdType (SnsIdType.of_i iprot#readI32)
            else
              iprot#skip _t9619)
          | 3 -> (if _t9619 = Protocol.T_STRING then
              _str9618#set_snsAccessToken iprot#readString
            else
              iprot#skip _t9619)
          | 4 -> (if _t9619 = Protocol.T_STRUCT then
              _str9618#set_identityCredential (read_identityCredential iprot)
            else
              iprot#skip _t9619)
          | 5 -> (if _t9619 = Protocol.T_STRING then
              _str9618#set_region iprot#readString
            else
              iprot#skip _t9619)
          | 6 -> (if _t9619 = Protocol.T_STRING then
              _str9618#set_udidHash iprot#readString
            else
              iprot#skip _t9619)
          | 7 -> (if _t9619 = Protocol.T_STRUCT then
              _str9618#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t9619)
          | _ -> iprot#skip _t9619);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9618

class registerWithSnsIdAndIdentityCredential_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerWithSnsIdAndIdentityCredential_result.success") | Some _x9621 -> _x9621
  method set_success _x9621 = _success <- Some _x9621
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerWithSnsIdAndIdentityCredential_result.e") | Some _x9622 -> _x9622
  method set_e _x9622 = _e <- Some _x9622
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithSnsIdAndIdentityCredential_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithSnsIdAndIdentityCredential_result (iprot : Protocol.t) =
  let _str9625 = new registerWithSnsIdAndIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9626,_id9627) = iprot#readFieldBegin in
        if _t9626 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9627 with 
          | 0 -> (if _t9626 = Protocol.T_STRING then
              _str9625#set_success iprot#readString
            else
              iprot#skip _t9626)
          | 1 -> (if _t9626 = Protocol.T_STRUCT then
              _str9625#set_e (read_talkException iprot)
            else
              iprot#skip _t9626)
          | _ -> iprot#skip _t9626);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9625

class reissueDeviceCredential_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reissueDeviceCredential_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reissueDeviceCredential_args (iprot : Protocol.t) =
  let _str9630 = new reissueDeviceCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9631,_id9632) = iprot#readFieldBegin in
        if _t9631 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9632 with 
          | _ -> iprot#skip _t9631);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9630

class reissueDeviceCredential_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reissueDeviceCredential_result.success") | Some _x9633 -> _x9633
  method set_success _x9633 = _success <- Some _x9633
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reissueDeviceCredential_result.e") | Some _x9634 -> _x9634
  method set_e _x9634 = _e <- Some _x9634
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reissueDeviceCredential_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reissueDeviceCredential_result (iprot : Protocol.t) =
  let _str9637 = new reissueDeviceCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9638,_id9639) = iprot#readFieldBegin in
        if _t9638 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9639 with 
          | 0 -> (if _t9638 = Protocol.T_STRING then
              _str9637#set_success iprot#readString
            else
              iprot#skip _t9638)
          | 1 -> (if _t9638 = Protocol.T_STRUCT then
              _str9637#set_e (read_talkException iprot)
            else
              iprot#skip _t9638)
          | _ -> iprot#skip _t9638);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9637

class reissueUserTicket_args =
object (self)
  val mutable _expirationTime : Int64.t option = None
  method get_expirationTime = _expirationTime
  method grab_expirationTime = match _expirationTime with None->raise (Field_empty "reissueUserTicket_args.expirationTime") | Some _x9640 -> _x9640
  method set_expirationTime _x9640 = _expirationTime <- Some _x9640
  method unset_expirationTime = _expirationTime <- None
  method reset_expirationTime = _expirationTime <- None

  val mutable _maxUseCount : Int32.t option = None
  method get_maxUseCount = _maxUseCount
  method grab_maxUseCount = match _maxUseCount with None->raise (Field_empty "reissueUserTicket_args.maxUseCount") | Some _x9641 -> _x9641
  method set_maxUseCount _x9641 = _maxUseCount <- Some _x9641
  method unset_maxUseCount = _maxUseCount <- None
  method reset_maxUseCount = _maxUseCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reissueUserTicket_args";
    (match _expirationTime with None -> () | Some _v -> 
      oprot#writeFieldBegin("expirationTime",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _maxUseCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("maxUseCount",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reissueUserTicket_args (iprot : Protocol.t) =
  let _str9644 = new reissueUserTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9645,_id9646) = iprot#readFieldBegin in
        if _t9645 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9646 with 
          | 3 -> (if _t9645 = Protocol.T_I64 then
              _str9644#set_expirationTime iprot#readI64
            else
              iprot#skip _t9645)
          | 4 -> (if _t9645 = Protocol.T_I32 then
              _str9644#set_maxUseCount iprot#readI32
            else
              iprot#skip _t9645)
          | _ -> iprot#skip _t9645);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9644

class reissueUserTicket_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reissueUserTicket_result.success") | Some _x9647 -> _x9647
  method set_success _x9647 = _success <- Some _x9647
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reissueUserTicket_result.e") | Some _x9648 -> _x9648
  method set_e _x9648 = _e <- Some _x9648
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reissueUserTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reissueUserTicket_result (iprot : Protocol.t) =
  let _str9651 = new reissueUserTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9652,_id9653) = iprot#readFieldBegin in
        if _t9652 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9653 with 
          | 0 -> (if _t9652 = Protocol.T_STRING then
              _str9651#set_success iprot#readString
            else
              iprot#skip _t9652)
          | 1 -> (if _t9652 = Protocol.T_STRUCT then
              _str9651#set_e (read_talkException iprot)
            else
              iprot#skip _t9652)
          | _ -> iprot#skip _t9652);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9651

class getMessageReadRange_args =
object (self)
  val mutable _chatIds : string list option = None
  method get_chatIds = _chatIds
  method grab_chatIds = match _chatIds with None->raise (Field_empty "getMessageReadRange_args.chatIds") | Some _x9654 -> _x9654
  method set_chatIds _x9654 = _chatIds <- Some _x9654
  method unset_chatIds = _chatIds <- None
  method reset_chatIds = _chatIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageReadRange_args";
    (match _chatIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatIds",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9657 ->         oprot#writeString(_iter9657);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageReadRange_args (iprot : Protocol.t) =
  let _str9658 = new getMessageReadRange_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9659,_id9660) = iprot#readFieldBegin in
        if _t9659 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9660 with 
          | 2 -> (if _t9659 = Protocol.T_LIST then
              _str9658#set_chatIds 
                (let (_etype9664,_size9661) = iprot#readListBegin in
                  let _con9665 = (Array.to_list (Array.init _size9661 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9665)
            else
              iprot#skip _t9659)
          | _ -> iprot#skip _t9659);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9658

class getMessageReadRange_result =
object (self)
  val mutable _success : tMessageReadRange list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessageReadRange_result.success") | Some _x9666 -> _x9666
  method set_success _x9666 = _success <- Some _x9666
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessageReadRange_result.e") | Some _x9667 -> _x9667
  method set_e _x9667 = _e <- Some _x9667
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageReadRange_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter9670 ->         _iter9670#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageReadRange_result (iprot : Protocol.t) =
  let _str9671 = new getMessageReadRange_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9672,_id9673) = iprot#readFieldBegin in
        if _t9672 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9673 with 
          | 0 -> (if _t9672 = Protocol.T_LIST then
              _str9671#set_success 
                (let (_etype9677,_size9674) = iprot#readListBegin in
                  let _con9678 = (Array.to_list (Array.init _size9674 (fun _ -> (read_tMessageReadRange iprot)))) in
                    iprot#readListEnd; _con9678)
            else
              iprot#skip _t9672)
          | 1 -> (if _t9672 = Protocol.T_STRUCT then
              _str9671#set_e (read_talkException iprot)
            else
              iprot#skip _t9672)
          | _ -> iprot#skip _t9672);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9671

class rejectGroupInvitation_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "rejectGroupInvitation_args.reqSeq") | Some _x9679 -> _x9679
  method set_reqSeq _x9679 = _reqSeq <- Some _x9679
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "rejectGroupInvitation_args.groupId") | Some _x9680 -> _x9680
  method set_groupId _x9680 = _groupId <- Some _x9680
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "rejectGroupInvitation_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_rejectGroupInvitation_args (iprot : Protocol.t) =
  let _str9683 = new rejectGroupInvitation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9684,_id9685) = iprot#readFieldBegin in
        if _t9684 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9685 with 
          | 1 -> (if _t9684 = Protocol.T_I32 then
              _str9683#set_reqSeq iprot#readI32
            else
              iprot#skip _t9684)
          | 2 -> (if _t9684 = Protocol.T_STRING then
              _str9683#set_groupId iprot#readString
            else
              iprot#skip _t9684)
          | _ -> iprot#skip _t9684);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9683

class rejectGroupInvitation_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "rejectGroupInvitation_result.e") | Some _x9686 -> _x9686
  method set_e _x9686 = _e <- Some _x9686
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "rejectGroupInvitation_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_rejectGroupInvitation_result (iprot : Protocol.t) =
  let _str9689 = new rejectGroupInvitation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9690,_id9691) = iprot#readFieldBegin in
        if _t9690 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9691 with 
          | 1 -> (if _t9690 = Protocol.T_STRUCT then
              _str9689#set_e (read_talkException iprot)
            else
              iprot#skip _t9690)
          | _ -> iprot#skip _t9690);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9689

class releaseSession_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "releaseSession_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_releaseSession_args (iprot : Protocol.t) =
  let _str9694 = new releaseSession_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9695,_id9696) = iprot#readFieldBegin in
        if _t9695 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9696 with 
          | _ -> iprot#skip _t9695);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9694

class releaseSession_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "releaseSession_result.e") | Some _x9697 -> _x9697
  method set_e _x9697 = _e <- Some _x9697
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "releaseSession_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_releaseSession_result (iprot : Protocol.t) =
  let _str9700 = new releaseSession_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9701,_id9702) = iprot#readFieldBegin in
        if _t9701 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9702 with 
          | 1 -> (if _t9701 = Protocol.T_STRUCT then
              _str9700#set_e (read_talkException iprot)
            else
              iprot#skip _t9701)
          | _ -> iprot#skip _t9701);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9700

class removeAllMessages_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "removeAllMessages_args.seq") | Some _x9703 -> _x9703
  method set_seq _x9703 = _seq <- Some _x9703
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _lastMessageId : string option = None
  method get_lastMessageId = _lastMessageId
  method grab_lastMessageId = match _lastMessageId with None->raise (Field_empty "removeAllMessages_args.lastMessageId") | Some _x9704 -> _x9704
  method set_lastMessageId _x9704 = _lastMessageId <- Some _x9704
  method unset_lastMessageId = _lastMessageId <- None
  method reset_lastMessageId = _lastMessageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeAllMessages_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _lastMessageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastMessageId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeAllMessages_args (iprot : Protocol.t) =
  let _str9707 = new removeAllMessages_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9708,_id9709) = iprot#readFieldBegin in
        if _t9708 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9709 with 
          | 1 -> (if _t9708 = Protocol.T_I32 then
              _str9707#set_seq iprot#readI32
            else
              iprot#skip _t9708)
          | 2 -> (if _t9708 = Protocol.T_STRING then
              _str9707#set_lastMessageId iprot#readString
            else
              iprot#skip _t9708)
          | _ -> iprot#skip _t9708);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9707

class removeAllMessages_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeAllMessages_result.e") | Some _x9710 -> _x9710
  method set_e _x9710 = _e <- Some _x9710
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeAllMessages_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeAllMessages_result (iprot : Protocol.t) =
  let _str9713 = new removeAllMessages_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9714,_id9715) = iprot#readFieldBegin in
        if _t9714 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9715 with 
          | 1 -> (if _t9714 = Protocol.T_STRUCT then
              _str9713#set_e (read_talkException iprot)
            else
              iprot#skip _t9714)
          | _ -> iprot#skip _t9714);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9713

class removeBuddyLocation_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "removeBuddyLocation_args.mid") | Some _x9716 -> _x9716
  method set_mid _x9716 = _mid <- Some _x9716
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  val mutable _index : Int32.t option = None
  method get_index = _index
  method grab_index = match _index with None->raise (Field_empty "removeBuddyLocation_args.index") | Some _x9717 -> _x9717
  method set_index _x9717 = _index <- Some _x9717
  method unset_index = _index <- None
  method reset_index = _index <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeBuddyLocation_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _index with None -> () | Some _v -> 
      oprot#writeFieldBegin("index",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeBuddyLocation_args (iprot : Protocol.t) =
  let _str9720 = new removeBuddyLocation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9721,_id9722) = iprot#readFieldBegin in
        if _t9721 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9722 with 
          | 2 -> (if _t9721 = Protocol.T_STRING then
              _str9720#set_mid iprot#readString
            else
              iprot#skip _t9721)
          | 3 -> (if _t9721 = Protocol.T_I32 then
              _str9720#set_index iprot#readI32
            else
              iprot#skip _t9721)
          | _ -> iprot#skip _t9721);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9720

class removeBuddyLocation_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeBuddyLocation_result.e") | Some _x9723 -> _x9723
  method set_e _x9723 = _e <- Some _x9723
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeBuddyLocation_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeBuddyLocation_result (iprot : Protocol.t) =
  let _str9726 = new removeBuddyLocation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9727,_id9728) = iprot#readFieldBegin in
        if _t9727 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9728 with 
          | 1 -> (if _t9727 = Protocol.T_STRUCT then
              _str9726#set_e (read_talkException iprot)
            else
              iprot#skip _t9727)
          | _ -> iprot#skip _t9727);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9726

class removeMessage_args =
object (self)
  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "removeMessage_args.messageId") | Some _x9729 -> _x9729
  method set_messageId _x9729 = _messageId <- Some _x9729
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeMessage_args";
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeMessage_args (iprot : Protocol.t) =
  let _str9732 = new removeMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9733,_id9734) = iprot#readFieldBegin in
        if _t9733 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9734 with 
          | 2 -> (if _t9733 = Protocol.T_STRING then
              _str9732#set_messageId iprot#readString
            else
              iprot#skip _t9733)
          | _ -> iprot#skip _t9733);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9732

class removeMessage_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "removeMessage_result.success") | Some _x9735 -> _x9735
  method set_success _x9735 = _success <- Some _x9735
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeMessage_result.e") | Some _x9736 -> _x9736
  method set_e _x9736 = _e <- Some _x9736
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeMessage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeMessage_result (iprot : Protocol.t) =
  let _str9739 = new removeMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9740,_id9741) = iprot#readFieldBegin in
        if _t9740 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9741 with 
          | 0 -> (if _t9740 = Protocol.T_BOOL then
              _str9739#set_success iprot#readBool
            else
              iprot#skip _t9740)
          | 1 -> (if _t9740 = Protocol.T_STRUCT then
              _str9739#set_e (read_talkException iprot)
            else
              iprot#skip _t9740)
          | _ -> iprot#skip _t9740);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9739

class makeUserAddMyselfAsContact_args =
object (self)
  val mutable _contactOwnerMid : string option = None
  method get_contactOwnerMid = _contactOwnerMid
  method grab_contactOwnerMid = match _contactOwnerMid with None->raise (Field_empty "makeUserAddMyselfAsContact_args.contactOwnerMid") | Some _x9742 -> _x9742
  method set_contactOwnerMid _x9742 = _contactOwnerMid <- Some _x9742
  method unset_contactOwnerMid = _contactOwnerMid <- None
  method reset_contactOwnerMid = _contactOwnerMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "makeUserAddMyselfAsContact_args";
    (match _contactOwnerMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactOwnerMid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_makeUserAddMyselfAsContact_args (iprot : Protocol.t) =
  let _str9745 = new makeUserAddMyselfAsContact_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9746,_id9747) = iprot#readFieldBegin in
        if _t9746 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9747 with 
          | 1 -> (if _t9746 = Protocol.T_STRING then
              _str9745#set_contactOwnerMid iprot#readString
            else
              iprot#skip _t9746)
          | _ -> iprot#skip _t9746);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9745

class makeUserAddMyselfAsContact_result =
object (self)
  val mutable _success : contactTransition option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "makeUserAddMyselfAsContact_result.success") | Some _x9748 -> _x9748
  method set_success _x9748 = _success <- Some _x9748
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "makeUserAddMyselfAsContact_result.e") | Some _x9749 -> _x9749
  method set_e _x9749 = _e <- Some _x9749
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "makeUserAddMyselfAsContact_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_makeUserAddMyselfAsContact_result (iprot : Protocol.t) =
  let _str9752 = new makeUserAddMyselfAsContact_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9753,_id9754) = iprot#readFieldBegin in
        if _t9753 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9754 with 
          | 0 -> (if _t9753 = Protocol.T_STRUCT then
              _str9752#set_success (read_contactTransition iprot)
            else
              iprot#skip _t9753)
          | 1 -> (if _t9753 = Protocol.T_STRUCT then
              _str9752#set_e (read_talkException iprot)
            else
              iprot#skip _t9753)
          | _ -> iprot#skip _t9753);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9752

class removeMessageFromMyHome_args =
object (self)
  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "removeMessageFromMyHome_args.messageId") | Some _x9755 -> _x9755
  method set_messageId _x9755 = _messageId <- Some _x9755
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeMessageFromMyHome_args";
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeMessageFromMyHome_args (iprot : Protocol.t) =
  let _str9758 = new removeMessageFromMyHome_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9759,_id9760) = iprot#readFieldBegin in
        if _t9759 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9760 with 
          | 2 -> (if _t9759 = Protocol.T_STRING then
              _str9758#set_messageId iprot#readString
            else
              iprot#skip _t9759)
          | _ -> iprot#skip _t9759);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9758

class removeMessageFromMyHome_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "removeMessageFromMyHome_result.success") | Some _x9761 -> _x9761
  method set_success _x9761 = _success <- Some _x9761
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeMessageFromMyHome_result.e") | Some _x9762 -> _x9762
  method set_e _x9762 = _e <- Some _x9762
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeMessageFromMyHome_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeMessageFromMyHome_result (iprot : Protocol.t) =
  let _str9765 = new removeMessageFromMyHome_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9766,_id9767) = iprot#readFieldBegin in
        if _t9766 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9767 with 
          | 0 -> (if _t9766 = Protocol.T_BOOL then
              _str9765#set_success iprot#readBool
            else
              iprot#skip _t9766)
          | 1 -> (if _t9766 = Protocol.T_STRUCT then
              _str9765#set_e (read_talkException iprot)
            else
              iprot#skip _t9766)
          | _ -> iprot#skip _t9766);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9765

class removeSnsId_args =
object (self)
  val mutable _snsIdType : SnsIdType.t option = None
  method get_snsIdType = _snsIdType
  method grab_snsIdType = match _snsIdType with None->raise (Field_empty "removeSnsId_args.snsIdType") | Some _x9768 -> _x9768
  method set_snsIdType _x9768 = _snsIdType <- Some _x9768
  method unset_snsIdType = _snsIdType <- None
  method reset_snsIdType = _snsIdType <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeSnsId_args";
    (match _snsIdType with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsIdType",Protocol.T_I32,2);
      oprot#writeI32(SnsIdType.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeSnsId_args (iprot : Protocol.t) =
  let _str9771 = new removeSnsId_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9772,_id9773) = iprot#readFieldBegin in
        if _t9772 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9773 with 
          | 2 -> (if _t9772 = Protocol.T_I32 then
              _str9771#set_snsIdType (SnsIdType.of_i iprot#readI32)
            else
              iprot#skip _t9772)
          | _ -> iprot#skip _t9772);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9771

class removeSnsId_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "removeSnsId_result.success") | Some _x9774 -> _x9774
  method set_success _x9774 = _success <- Some _x9774
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeSnsId_result.e") | Some _x9775 -> _x9775
  method set_e _x9775 = _e <- Some _x9775
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeSnsId_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeSnsId_result (iprot : Protocol.t) =
  let _str9778 = new removeSnsId_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9779,_id9780) = iprot#readFieldBegin in
        if _t9779 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9780 with 
          | 0 -> (if _t9779 = Protocol.T_STRING then
              _str9778#set_success iprot#readString
            else
              iprot#skip _t9779)
          | 1 -> (if _t9779 = Protocol.T_STRUCT then
              _str9778#set_e (read_talkException iprot)
            else
              iprot#skip _t9779)
          | _ -> iprot#skip _t9779);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9778

class report_args =
object (self)
  val mutable _syncOpRevision : Int64.t option = None
  method get_syncOpRevision = _syncOpRevision
  method grab_syncOpRevision = match _syncOpRevision with None->raise (Field_empty "report_args.syncOpRevision") | Some _x9781 -> _x9781
  method set_syncOpRevision _x9781 = _syncOpRevision <- Some _x9781
  method unset_syncOpRevision = _syncOpRevision <- None
  method reset_syncOpRevision = _syncOpRevision <- None

  val mutable _category : SyncCategory.t option = None
  method get_category = _category
  method grab_category = match _category with None->raise (Field_empty "report_args.category") | Some _x9782 -> _x9782
  method set_category _x9782 = _category <- Some _x9782
  method unset_category = _category <- None
  method reset_category = _category <- None

  val mutable _report : string option = None
  method get_report = _report
  method grab_report = match _report with None->raise (Field_empty "report_args.report") | Some _x9783 -> _x9783
  method set_report _x9783 = _report <- Some _x9783
  method unset_report = _report <- None
  method reset_report = _report <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "report_args";
    (match _syncOpRevision with None -> () | Some _v -> 
      oprot#writeFieldBegin("syncOpRevision",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _category with None -> () | Some _v -> 
      oprot#writeFieldBegin("category",Protocol.T_I32,3);
      oprot#writeI32(SyncCategory.to_i _v);
      oprot#writeFieldEnd
    );
    (match _report with None -> () | Some _v -> 
      oprot#writeFieldBegin("report",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_report_args (iprot : Protocol.t) =
  let _str9786 = new report_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9787,_id9788) = iprot#readFieldBegin in
        if _t9787 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9788 with 
          | 2 -> (if _t9787 = Protocol.T_I64 then
              _str9786#set_syncOpRevision iprot#readI64
            else
              iprot#skip _t9787)
          | 3 -> (if _t9787 = Protocol.T_I32 then
              _str9786#set_category (SyncCategory.of_i iprot#readI32)
            else
              iprot#skip _t9787)
          | 4 -> (if _t9787 = Protocol.T_STRING then
              _str9786#set_report iprot#readString
            else
              iprot#skip _t9787)
          | _ -> iprot#skip _t9787);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9786

class report_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "report_result.e") | Some _x9789 -> _x9789
  method set_e _x9789 = _e <- Some _x9789
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "report_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_report_result (iprot : Protocol.t) =
  let _str9792 = new report_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9793,_id9794) = iprot#readFieldBegin in
        if _t9793 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9794 with 
          | 1 -> (if _t9793 = Protocol.T_STRUCT then
              _str9792#set_e (read_talkException iprot)
            else
              iprot#skip _t9793)
          | _ -> iprot#skip _t9793);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9792

class reportContacts_args =
object (self)
  val mutable _syncOpRevision : Int64.t option = None
  method get_syncOpRevision = _syncOpRevision
  method grab_syncOpRevision = match _syncOpRevision with None->raise (Field_empty "reportContacts_args.syncOpRevision") | Some _x9795 -> _x9795
  method set_syncOpRevision _x9795 = _syncOpRevision <- Some _x9795
  method unset_syncOpRevision = _syncOpRevision <- None
  method reset_syncOpRevision = _syncOpRevision <- None

  val mutable _category : SyncCategory.t option = None
  method get_category = _category
  method grab_category = match _category with None->raise (Field_empty "reportContacts_args.category") | Some _x9796 -> _x9796
  method set_category _x9796 = _category <- Some _x9796
  method unset_category = _category <- None
  method reset_category = _category <- None

  val mutable _contactReports : contactReport list option = None
  method get_contactReports = _contactReports
  method grab_contactReports = match _contactReports with None->raise (Field_empty "reportContacts_args.contactReports") | Some _x9797 -> _x9797
  method set_contactReports _x9797 = _contactReports <- Some _x9797
  method unset_contactReports = _contactReports <- None
  method reset_contactReports = _contactReports <- None

  val mutable _actionType : SyncActionType.t option = None
  method get_actionType = _actionType
  method grab_actionType = match _actionType with None->raise (Field_empty "reportContacts_args.actionType") | Some _x9798 -> _x9798
  method set_actionType _x9798 = _actionType <- Some _x9798
  method unset_actionType = _actionType <- None
  method reset_actionType = _actionType <- None

  method copy =
      let _new = Oo.copy self in
      if _contactReports <> None then
        _new#set_contactReports (List.map (fun x -> x#copy) self#grab_contactReports);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportContacts_args";
    (match _syncOpRevision with None -> () | Some _v -> 
      oprot#writeFieldBegin("syncOpRevision",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _category with None -> () | Some _v -> 
      oprot#writeFieldBegin("category",Protocol.T_I32,3);
      oprot#writeI32(SyncCategory.to_i _v);
      oprot#writeFieldEnd
    );
    (match _contactReports with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactReports",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter9801 ->         _iter9801#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _actionType with None -> () | Some _v -> 
      oprot#writeFieldBegin("actionType",Protocol.T_I32,5);
      oprot#writeI32(SyncActionType.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportContacts_args (iprot : Protocol.t) =
  let _str9802 = new reportContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9803,_id9804) = iprot#readFieldBegin in
        if _t9803 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9804 with 
          | 2 -> (if _t9803 = Protocol.T_I64 then
              _str9802#set_syncOpRevision iprot#readI64
            else
              iprot#skip _t9803)
          | 3 -> (if _t9803 = Protocol.T_I32 then
              _str9802#set_category (SyncCategory.of_i iprot#readI32)
            else
              iprot#skip _t9803)
          | 4 -> (if _t9803 = Protocol.T_LIST then
              _str9802#set_contactReports 
                (let (_etype9808,_size9805) = iprot#readListBegin in
                  let _con9809 = (Array.to_list (Array.init _size9805 (fun _ -> (read_contactReport iprot)))) in
                    iprot#readListEnd; _con9809)
            else
              iprot#skip _t9803)
          | 5 -> (if _t9803 = Protocol.T_I32 then
              _str9802#set_actionType (SyncActionType.of_i iprot#readI32)
            else
              iprot#skip _t9803)
          | _ -> iprot#skip _t9803);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9802

class reportContacts_result =
object (self)
  val mutable _success : contactReportResult list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reportContacts_result.success") | Some _x9810 -> _x9810
  method set_success _x9810 = _success <- Some _x9810
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportContacts_result.e") | Some _x9811 -> _x9811
  method set_e _x9811 = _e <- Some _x9811
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter9814 ->         _iter9814#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportContacts_result (iprot : Protocol.t) =
  let _str9815 = new reportContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9816,_id9817) = iprot#readFieldBegin in
        if _t9816 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9817 with 
          | 0 -> (if _t9816 = Protocol.T_LIST then
              _str9815#set_success 
                (let (_etype9821,_size9818) = iprot#readListBegin in
                  let _con9822 = (Array.to_list (Array.init _size9818 (fun _ -> (read_contactReportResult iprot)))) in
                    iprot#readListEnd; _con9822)
            else
              iprot#skip _t9816)
          | 1 -> (if _t9816 = Protocol.T_STRUCT then
              _str9815#set_e (read_talkException iprot)
            else
              iprot#skip _t9816)
          | _ -> iprot#skip _t9816);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9815

class reportGroups_args =
object (self)
  val mutable _syncOpRevision : Int64.t option = None
  method get_syncOpRevision = _syncOpRevision
  method grab_syncOpRevision = match _syncOpRevision with None->raise (Field_empty "reportGroups_args.syncOpRevision") | Some _x9823 -> _x9823
  method set_syncOpRevision _x9823 = _syncOpRevision <- Some _x9823
  method unset_syncOpRevision = _syncOpRevision <- None
  method reset_syncOpRevision = _syncOpRevision <- None

  val mutable _groups : group list option = None
  method get_groups = _groups
  method grab_groups = match _groups with None->raise (Field_empty "reportGroups_args.groups") | Some _x9824 -> _x9824
  method set_groups _x9824 = _groups <- Some _x9824
  method unset_groups = _groups <- None
  method reset_groups = _groups <- None

  method copy =
      let _new = Oo.copy self in
      if _groups <> None then
        _new#set_groups (List.map (fun x -> x#copy) self#grab_groups);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportGroups_args";
    (match _syncOpRevision with None -> () | Some _v -> 
      oprot#writeFieldBegin("syncOpRevision",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _groups with None -> () | Some _v -> 
      oprot#writeFieldBegin("groups",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter9827 ->         _iter9827#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportGroups_args (iprot : Protocol.t) =
  let _str9828 = new reportGroups_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9829,_id9830) = iprot#readFieldBegin in
        if _t9829 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9830 with 
          | 2 -> (if _t9829 = Protocol.T_I64 then
              _str9828#set_syncOpRevision iprot#readI64
            else
              iprot#skip _t9829)
          | 3 -> (if _t9829 = Protocol.T_LIST then
              _str9828#set_groups 
                (let (_etype9834,_size9831) = iprot#readListBegin in
                  let _con9835 = (Array.to_list (Array.init _size9831 (fun _ -> (read_group iprot)))) in
                    iprot#readListEnd; _con9835)
            else
              iprot#skip _t9829)
          | _ -> iprot#skip _t9829);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9828

class reportGroups_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportGroups_result.e") | Some _x9836 -> _x9836
  method set_e _x9836 = _e <- Some _x9836
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportGroups_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportGroups_result (iprot : Protocol.t) =
  let _str9839 = new reportGroups_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9840,_id9841) = iprot#readFieldBegin in
        if _t9840 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9841 with 
          | 1 -> (if _t9840 = Protocol.T_STRUCT then
              _str9839#set_e (read_talkException iprot)
            else
              iprot#skip _t9840)
          | _ -> iprot#skip _t9840);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9839

class reportProfile_args =
object (self)
  val mutable _syncOpRevision : Int64.t option = None
  method get_syncOpRevision = _syncOpRevision
  method grab_syncOpRevision = match _syncOpRevision with None->raise (Field_empty "reportProfile_args.syncOpRevision") | Some _x9842 -> _x9842
  method set_syncOpRevision _x9842 = _syncOpRevision <- Some _x9842
  method unset_syncOpRevision = _syncOpRevision <- None
  method reset_syncOpRevision = _syncOpRevision <- None

  val mutable _profile : profile option = None
  method get_profile = _profile
  method grab_profile = match _profile with None->raise (Field_empty "reportProfile_args.profile") | Some _x9843 -> _x9843
  method set_profile _x9843 = _profile <- Some _x9843
  method unset_profile = _profile <- None
  method reset_profile = _profile <- None

  method copy =
      let _new = Oo.copy self in
      if _profile <> None then
        _new#set_profile self#grab_profile#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportProfile_args";
    (match _syncOpRevision with None -> () | Some _v -> 
      oprot#writeFieldBegin("syncOpRevision",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _profile with None -> () | Some _v -> 
      oprot#writeFieldBegin("profile",Protocol.T_STRUCT,3);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportProfile_args (iprot : Protocol.t) =
  let _str9846 = new reportProfile_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9847,_id9848) = iprot#readFieldBegin in
        if _t9847 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9848 with 
          | 2 -> (if _t9847 = Protocol.T_I64 then
              _str9846#set_syncOpRevision iprot#readI64
            else
              iprot#skip _t9847)
          | 3 -> (if _t9847 = Protocol.T_STRUCT then
              _str9846#set_profile (read_profile iprot)
            else
              iprot#skip _t9847)
          | _ -> iprot#skip _t9847);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9846

class reportProfile_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportProfile_result.e") | Some _x9849 -> _x9849
  method set_e _x9849 = _e <- Some _x9849
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportProfile_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportProfile_result (iprot : Protocol.t) =
  let _str9852 = new reportProfile_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9853,_id9854) = iprot#readFieldBegin in
        if _t9853 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9854 with 
          | 1 -> (if _t9853 = Protocol.T_STRUCT then
              _str9852#set_e (read_talkException iprot)
            else
              iprot#skip _t9853)
          | _ -> iprot#skip _t9853);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9852

class reportRooms_args =
object (self)
  val mutable _syncOpRevision : Int64.t option = None
  method get_syncOpRevision = _syncOpRevision
  method grab_syncOpRevision = match _syncOpRevision with None->raise (Field_empty "reportRooms_args.syncOpRevision") | Some _x9855 -> _x9855
  method set_syncOpRevision _x9855 = _syncOpRevision <- Some _x9855
  method unset_syncOpRevision = _syncOpRevision <- None
  method reset_syncOpRevision = _syncOpRevision <- None

  val mutable _rooms : room list option = None
  method get_rooms = _rooms
  method grab_rooms = match _rooms with None->raise (Field_empty "reportRooms_args.rooms") | Some _x9856 -> _x9856
  method set_rooms _x9856 = _rooms <- Some _x9856
  method unset_rooms = _rooms <- None
  method reset_rooms = _rooms <- None

  method copy =
      let _new = Oo.copy self in
      if _rooms <> None then
        _new#set_rooms (List.map (fun x -> x#copy) self#grab_rooms);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportRooms_args";
    (match _syncOpRevision with None -> () | Some _v -> 
      oprot#writeFieldBegin("syncOpRevision",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _rooms with None -> () | Some _v -> 
      oprot#writeFieldBegin("rooms",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter9859 ->         _iter9859#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportRooms_args (iprot : Protocol.t) =
  let _str9860 = new reportRooms_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9861,_id9862) = iprot#readFieldBegin in
        if _t9861 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9862 with 
          | 2 -> (if _t9861 = Protocol.T_I64 then
              _str9860#set_syncOpRevision iprot#readI64
            else
              iprot#skip _t9861)
          | 3 -> (if _t9861 = Protocol.T_LIST then
              _str9860#set_rooms 
                (let (_etype9866,_size9863) = iprot#readListBegin in
                  let _con9867 = (Array.to_list (Array.init _size9863 (fun _ -> (read_room iprot)))) in
                    iprot#readListEnd; _con9867)
            else
              iprot#skip _t9861)
          | _ -> iprot#skip _t9861);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9860

class reportRooms_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportRooms_result.e") | Some _x9868 -> _x9868
  method set_e _x9868 = _e <- Some _x9868
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportRooms_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportRooms_result (iprot : Protocol.t) =
  let _str9871 = new reportRooms_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9872,_id9873) = iprot#readFieldBegin in
        if _t9872 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9873 with 
          | 1 -> (if _t9872 = Protocol.T_STRUCT then
              _str9871#set_e (read_talkException iprot)
            else
              iprot#skip _t9872)
          | _ -> iprot#skip _t9872);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9871

class findAndAddContactByMetaTag_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "findAndAddContactByMetaTag_args.reqSeq") | Some _x9874 -> _x9874
  method set_reqSeq _x9874 = _reqSeq <- Some _x9874
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _userid : string option = None
  method get_userid = _userid
  method grab_userid = match _userid with None->raise (Field_empty "findAndAddContactByMetaTag_args.userid") | Some _x9875 -> _x9875
  method set_userid _x9875 = _userid <- Some _x9875
  method unset_userid = _userid <- None
  method reset_userid = _userid <- None

  val mutable _reference : string option = None
  method get_reference = _reference
  method grab_reference = match _reference with None->raise (Field_empty "findAndAddContactByMetaTag_args.reference") | Some _x9876 -> _x9876
  method set_reference _x9876 = _reference <- Some _x9876
  method unset_reference = _reference <- None
  method reset_reference = _reference <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactByMetaTag_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _userid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _reference with None -> () | Some _v -> 
      oprot#writeFieldBegin("reference",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactByMetaTag_args (iprot : Protocol.t) =
  let _str9879 = new findAndAddContactByMetaTag_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9880,_id9881) = iprot#readFieldBegin in
        if _t9880 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9881 with 
          | 1 -> (if _t9880 = Protocol.T_I32 then
              _str9879#set_reqSeq iprot#readI32
            else
              iprot#skip _t9880)
          | 2 -> (if _t9880 = Protocol.T_STRING then
              _str9879#set_userid iprot#readString
            else
              iprot#skip _t9880)
          | 3 -> (if _t9880 = Protocol.T_STRING then
              _str9879#set_reference iprot#readString
            else
              iprot#skip _t9880)
          | _ -> iprot#skip _t9880);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9879

class findAndAddContactByMetaTag_result =
object (self)
  val mutable _success : contact option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findAndAddContactByMetaTag_result.success") | Some _x9882 -> _x9882
  method set_success _x9882 = _success <- Some _x9882
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findAndAddContactByMetaTag_result.e") | Some _x9883 -> _x9883
  method set_e _x9883 = _e <- Some _x9883
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactByMetaTag_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactByMetaTag_result (iprot : Protocol.t) =
  let _str9886 = new findAndAddContactByMetaTag_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9887,_id9888) = iprot#readFieldBegin in
        if _t9887 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9888 with 
          | 0 -> (if _t9887 = Protocol.T_STRUCT then
              _str9886#set_success (read_contact iprot)
            else
              iprot#skip _t9887)
          | 1 -> (if _t9887 = Protocol.T_STRUCT then
              _str9886#set_e (read_talkException iprot)
            else
              iprot#skip _t9887)
          | _ -> iprot#skip _t9887);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9886

class reportSettings_args =
object (self)
  val mutable _syncOpRevision : Int64.t option = None
  method get_syncOpRevision = _syncOpRevision
  method grab_syncOpRevision = match _syncOpRevision with None->raise (Field_empty "reportSettings_args.syncOpRevision") | Some _x9889 -> _x9889
  method set_syncOpRevision _x9889 = _syncOpRevision <- Some _x9889
  method unset_syncOpRevision = _syncOpRevision <- None
  method reset_syncOpRevision = _syncOpRevision <- None

  val mutable _settings : settings option = None
  method get_settings = _settings
  method grab_settings = match _settings with None->raise (Field_empty "reportSettings_args.settings") | Some _x9890 -> _x9890
  method set_settings _x9890 = _settings <- Some _x9890
  method unset_settings = _settings <- None
  method reset_settings = _settings <- None

  method copy =
      let _new = Oo.copy self in
      if _settings <> None then
        _new#set_settings self#grab_settings#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSettings_args";
    (match _syncOpRevision with None -> () | Some _v -> 
      oprot#writeFieldBegin("syncOpRevision",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _settings with None -> () | Some _v -> 
      oprot#writeFieldBegin("settings",Protocol.T_STRUCT,3);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSettings_args (iprot : Protocol.t) =
  let _str9893 = new reportSettings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9894,_id9895) = iprot#readFieldBegin in
        if _t9894 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9895 with 
          | 2 -> (if _t9894 = Protocol.T_I64 then
              _str9893#set_syncOpRevision iprot#readI64
            else
              iprot#skip _t9894)
          | 3 -> (if _t9894 = Protocol.T_STRUCT then
              _str9893#set_settings (read_settings iprot)
            else
              iprot#skip _t9894)
          | _ -> iprot#skip _t9894);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9893

class reportSettings_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportSettings_result.e") | Some _x9896 -> _x9896
  method set_e _x9896 = _e <- Some _x9896
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSettings_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSettings_result (iprot : Protocol.t) =
  let _str9899 = new reportSettings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9900,_id9901) = iprot#readFieldBegin in
        if _t9900 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9901 with 
          | 1 -> (if _t9900 = Protocol.T_STRUCT then
              _str9899#set_e (read_talkException iprot)
            else
              iprot#skip _t9900)
          | _ -> iprot#skip _t9900);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9899

class reportSpam_args =
object (self)
  val mutable _chatMid : string option = None
  method get_chatMid = _chatMid
  method grab_chatMid = match _chatMid with None->raise (Field_empty "reportSpam_args.chatMid") | Some _x9902 -> _x9902
  method set_chatMid _x9902 = _chatMid <- Some _x9902
  method unset_chatMid = _chatMid <- None
  method reset_chatMid = _chatMid <- None

  val mutable _memberMids : string list option = None
  method get_memberMids = _memberMids
  method grab_memberMids = match _memberMids with None->raise (Field_empty "reportSpam_args.memberMids") | Some _x9903 -> _x9903
  method set_memberMids _x9903 = _memberMids <- Some _x9903
  method unset_memberMids = _memberMids <- None
  method reset_memberMids = _memberMids <- None

  val mutable _spammerReasons : SpammerReason.t list option = None
  method get_spammerReasons = _spammerReasons
  method grab_spammerReasons = match _spammerReasons with None->raise (Field_empty "reportSpam_args.spammerReasons") | Some _x9904 -> _x9904
  method set_spammerReasons _x9904 = _spammerReasons <- Some _x9904
  method unset_spammerReasons = _spammerReasons <- None
  method reset_spammerReasons = _spammerReasons <- None

  val mutable _senderMids : string list option = None
  method get_senderMids = _senderMids
  method grab_senderMids = match _senderMids with None->raise (Field_empty "reportSpam_args.senderMids") | Some _x9905 -> _x9905
  method set_senderMids _x9905 = _senderMids <- Some _x9905
  method unset_senderMids = _senderMids <- None
  method reset_senderMids = _senderMids <- None

  val mutable _spamMessageIds : string list option = None
  method get_spamMessageIds = _spamMessageIds
  method grab_spamMessageIds = match _spamMessageIds with None->raise (Field_empty "reportSpam_args.spamMessageIds") | Some _x9906 -> _x9906
  method set_spamMessageIds _x9906 = _spamMessageIds <- Some _x9906
  method unset_spamMessageIds = _spamMessageIds <- None
  method reset_spamMessageIds = _spamMessageIds <- None

  val mutable _spamMessages : string list option = None
  method get_spamMessages = _spamMessages
  method grab_spamMessages = match _spamMessages with None->raise (Field_empty "reportSpam_args.spamMessages") | Some _x9907 -> _x9907
  method set_spamMessages _x9907 = _spamMessages <- Some _x9907
  method unset_spamMessages = _spamMessages <- None
  method reset_spamMessages = _spamMessages <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSpam_args";
    (match _chatMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _memberMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("memberMids",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9910 ->         oprot#writeString(_iter9910);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _spammerReasons with None -> () | Some _v -> 
      oprot#writeFieldBegin("spammerReasons",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_I32,List.length _v);
      List.iter (fun _iter9911 ->         oprot#writeI32(SpammerReason.to_i _iter9911);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _senderMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("senderMids",Protocol.T_LIST,5);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9912 ->         oprot#writeString(_iter9912);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _spamMessageIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("spamMessageIds",Protocol.T_LIST,6);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9913 ->         oprot#writeString(_iter9913);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _spamMessages with None -> () | Some _v -> 
      oprot#writeFieldBegin("spamMessages",Protocol.T_LIST,7);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9914 ->         oprot#writeString(_iter9914);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSpam_args (iprot : Protocol.t) =
  let _str9915 = new reportSpam_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9916,_id9917) = iprot#readFieldBegin in
        if _t9916 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9917 with 
          | 2 -> (if _t9916 = Protocol.T_STRING then
              _str9915#set_chatMid iprot#readString
            else
              iprot#skip _t9916)
          | 3 -> (if _t9916 = Protocol.T_LIST then
              _str9915#set_memberMids 
                (let (_etype9921,_size9918) = iprot#readListBegin in
                  let _con9922 = (Array.to_list (Array.init _size9918 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9922)
            else
              iprot#skip _t9916)
          | 4 -> (if _t9916 = Protocol.T_LIST then
              _str9915#set_spammerReasons 
                (let (_etype9926,_size9923) = iprot#readListBegin in
                  let _con9927 = (Array.to_list (Array.init _size9923 (fun _ -> (SpammerReason.of_i iprot#readI32)))) in
                    iprot#readListEnd; _con9927)
            else
              iprot#skip _t9916)
          | 5 -> (if _t9916 = Protocol.T_LIST then
              _str9915#set_senderMids 
                (let (_etype9931,_size9928) = iprot#readListBegin in
                  let _con9932 = (Array.to_list (Array.init _size9928 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9932)
            else
              iprot#skip _t9916)
          | 6 -> (if _t9916 = Protocol.T_LIST then
              _str9915#set_spamMessageIds 
                (let (_etype9936,_size9933) = iprot#readListBegin in
                  let _con9937 = (Array.to_list (Array.init _size9933 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9937)
            else
              iprot#skip _t9916)
          | 7 -> (if _t9916 = Protocol.T_LIST then
              _str9915#set_spamMessages 
                (let (_etype9941,_size9938) = iprot#readListBegin in
                  let _con9942 = (Array.to_list (Array.init _size9938 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9942)
            else
              iprot#skip _t9916)
          | _ -> iprot#skip _t9916);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9915

class reportSpam_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportSpam_result.e") | Some _x9943 -> _x9943
  method set_e _x9943 = _e <- Some _x9943
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSpam_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSpam_result (iprot : Protocol.t) =
  let _str9946 = new reportSpam_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9947,_id9948) = iprot#readFieldBegin in
        if _t9947 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9948 with 
          | 1 -> (if _t9947 = Protocol.T_STRUCT then
              _str9946#set_e (read_talkException iprot)
            else
              iprot#skip _t9947)
          | _ -> iprot#skip _t9947);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9946

class reportSpammer_args =
object (self)
  val mutable _spammerMid : string option = None
  method get_spammerMid = _spammerMid
  method grab_spammerMid = match _spammerMid with None->raise (Field_empty "reportSpammer_args.spammerMid") | Some _x9949 -> _x9949
  method set_spammerMid _x9949 = _spammerMid <- Some _x9949
  method unset_spammerMid = _spammerMid <- None
  method reset_spammerMid = _spammerMid <- None

  val mutable _spammerReasons : SpammerReason.t list option = None
  method get_spammerReasons = _spammerReasons
  method grab_spammerReasons = match _spammerReasons with None->raise (Field_empty "reportSpammer_args.spammerReasons") | Some _x9950 -> _x9950
  method set_spammerReasons _x9950 = _spammerReasons <- Some _x9950
  method unset_spammerReasons = _spammerReasons <- None
  method reset_spammerReasons = _spammerReasons <- None

  val mutable _spamMessageIds : string list option = None
  method get_spamMessageIds = _spamMessageIds
  method grab_spamMessageIds = match _spamMessageIds with None->raise (Field_empty "reportSpammer_args.spamMessageIds") | Some _x9951 -> _x9951
  method set_spamMessageIds _x9951 = _spamMessageIds <- Some _x9951
  method unset_spamMessageIds = _spamMessageIds <- None
  method reset_spamMessageIds = _spamMessageIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSpammer_args";
    (match _spammerMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("spammerMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _spammerReasons with None -> () | Some _v -> 
      oprot#writeFieldBegin("spammerReasons",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_I32,List.length _v);
      List.iter (fun _iter9954 ->         oprot#writeI32(SpammerReason.to_i _iter9954);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _spamMessageIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("spamMessageIds",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9955 ->         oprot#writeString(_iter9955);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSpammer_args (iprot : Protocol.t) =
  let _str9956 = new reportSpammer_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9957,_id9958) = iprot#readFieldBegin in
        if _t9957 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9958 with 
          | 2 -> (if _t9957 = Protocol.T_STRING then
              _str9956#set_spammerMid iprot#readString
            else
              iprot#skip _t9957)
          | 3 -> (if _t9957 = Protocol.T_LIST then
              _str9956#set_spammerReasons 
                (let (_etype9962,_size9959) = iprot#readListBegin in
                  let _con9963 = (Array.to_list (Array.init _size9959 (fun _ -> (SpammerReason.of_i iprot#readI32)))) in
                    iprot#readListEnd; _con9963)
            else
              iprot#skip _t9957)
          | 4 -> (if _t9957 = Protocol.T_LIST then
              _str9956#set_spamMessageIds 
                (let (_etype9967,_size9964) = iprot#readListBegin in
                  let _con9968 = (Array.to_list (Array.init _size9964 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9968)
            else
              iprot#skip _t9957)
          | _ -> iprot#skip _t9957);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9956

class reportSpammer_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportSpammer_result.e") | Some _x9969 -> _x9969
  method set_e _x9969 = _e <- Some _x9969
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSpammer_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSpammer_result (iprot : Protocol.t) =
  let _str9972 = new reportSpammer_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9973,_id9974) = iprot#readFieldBegin in
        if _t9973 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9974 with 
          | 1 -> (if _t9973 = Protocol.T_STRUCT then
              _str9972#set_e (read_talkException iprot)
            else
              iprot#skip _t9973)
          | _ -> iprot#skip _t9973);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9972

class requestAccountPasswordReset_args =
object (self)
  val mutable _provider : IdentityProvider.t option = None
  method get_provider = _provider
  method grab_provider = match _provider with None->raise (Field_empty "requestAccountPasswordReset_args.provider") | Some _x9975 -> _x9975
  method set_provider _x9975 = _provider <- Some _x9975
  method unset_provider = _provider <- None
  method reset_provider = _provider <- None

  val mutable _identifier : string option = None
  method get_identifier = _identifier
  method grab_identifier = match _identifier with None->raise (Field_empty "requestAccountPasswordReset_args.identifier") | Some _x9976 -> _x9976
  method set_identifier _x9976 = _identifier <- Some _x9976
  method unset_identifier = _identifier <- None
  method reset_identifier = _identifier <- None

  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "requestAccountPasswordReset_args.locale") | Some _x9977 -> _x9977
  method set_locale _x9977 = _locale <- Some _x9977
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestAccountPasswordReset_args";
    (match _identifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("identifier",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _provider with None -> () | Some _v -> 
      oprot#writeFieldBegin("provider",Protocol.T_I32,4);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestAccountPasswordReset_args (iprot : Protocol.t) =
  let _str9980 = new requestAccountPasswordReset_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9981,_id9982) = iprot#readFieldBegin in
        if _t9981 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9982 with 
          | 4 -> (if _t9981 = Protocol.T_I32 then
              _str9980#set_provider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t9981)
          | 2 -> (if _t9981 = Protocol.T_STRING then
              _str9980#set_identifier iprot#readString
            else
              iprot#skip _t9981)
          | 5 -> (if _t9981 = Protocol.T_STRING then
              _str9980#set_locale iprot#readString
            else
              iprot#skip _t9981)
          | _ -> iprot#skip _t9981);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9980

class requestAccountPasswordReset_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "requestAccountPasswordReset_result.e") | Some _x9983 -> _x9983
  method set_e _x9983 = _e <- Some _x9983
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestAccountPasswordReset_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestAccountPasswordReset_result (iprot : Protocol.t) =
  let _str9986 = new requestAccountPasswordReset_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9987,_id9988) = iprot#readFieldBegin in
        if _t9987 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9988 with 
          | 1 -> (if _t9987 = Protocol.T_STRUCT then
              _str9986#set_e (read_talkException iprot)
            else
              iprot#skip _t9987)
          | _ -> iprot#skip _t9987);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9986

class requestEmailConfirmation_args =
object (self)
  val mutable _emailConfirmation : emailConfirmation option = None
  method get_emailConfirmation = _emailConfirmation
  method grab_emailConfirmation = match _emailConfirmation with None->raise (Field_empty "requestEmailConfirmation_args.emailConfirmation") | Some _x9989 -> _x9989
  method set_emailConfirmation _x9989 = _emailConfirmation <- Some _x9989
  method unset_emailConfirmation = _emailConfirmation <- None
  method reset_emailConfirmation = _emailConfirmation <- None

  method copy =
      let _new = Oo.copy self in
      if _emailConfirmation <> None then
        _new#set_emailConfirmation self#grab_emailConfirmation#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestEmailConfirmation_args";
    (match _emailConfirmation with None -> () | Some _v -> 
      oprot#writeFieldBegin("emailConfirmation",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestEmailConfirmation_args (iprot : Protocol.t) =
  let _str9992 = new requestEmailConfirmation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9993,_id9994) = iprot#readFieldBegin in
        if _t9993 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9994 with 
          | 2 -> (if _t9993 = Protocol.T_STRUCT then
              _str9992#set_emailConfirmation (read_emailConfirmation iprot)
            else
              iprot#skip _t9993)
          | _ -> iprot#skip _t9993);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9992

class requestEmailConfirmation_result =
object (self)
  val mutable _success : emailConfirmationSession option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "requestEmailConfirmation_result.success") | Some _x9995 -> _x9995
  method set_success _x9995 = _success <- Some _x9995
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "requestEmailConfirmation_result.e") | Some _x9996 -> _x9996
  method set_e _x9996 = _e <- Some _x9996
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestEmailConfirmation_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestEmailConfirmation_result (iprot : Protocol.t) =
  let _str9999 = new requestEmailConfirmation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10000,_id10001) = iprot#readFieldBegin in
        if _t10000 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10001 with 
          | 0 -> (if _t10000 = Protocol.T_STRUCT then
              _str9999#set_success (read_emailConfirmationSession iprot)
            else
              iprot#skip _t10000)
          | 1 -> (if _t10000 = Protocol.T_STRUCT then
              _str9999#set_e (read_talkException iprot)
            else
              iprot#skip _t10000)
          | _ -> iprot#skip _t10000);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9999

class requestIdentityUnbind_args =
object (self)
  val mutable _provider : IdentityProvider.t option = None
  method get_provider = _provider
  method grab_provider = match _provider with None->raise (Field_empty "requestIdentityUnbind_args.provider") | Some _x10002 -> _x10002
  method set_provider _x10002 = _provider <- Some _x10002
  method unset_provider = _provider <- None
  method reset_provider = _provider <- None

  val mutable _identifier : string option = None
  method get_identifier = _identifier
  method grab_identifier = match _identifier with None->raise (Field_empty "requestIdentityUnbind_args.identifier") | Some _x10003 -> _x10003
  method set_identifier _x10003 = _identifier <- Some _x10003
  method unset_identifier = _identifier <- None
  method reset_identifier = _identifier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestIdentityUnbind_args";
    (match _identifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("identifier",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _provider with None -> () | Some _v -> 
      oprot#writeFieldBegin("provider",Protocol.T_I32,4);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestIdentityUnbind_args (iprot : Protocol.t) =
  let _str10006 = new requestIdentityUnbind_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10007,_id10008) = iprot#readFieldBegin in
        if _t10007 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10008 with 
          | 4 -> (if _t10007 = Protocol.T_I32 then
              _str10006#set_provider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t10007)
          | 2 -> (if _t10007 = Protocol.T_STRING then
              _str10006#set_identifier iprot#readString
            else
              iprot#skip _t10007)
          | _ -> iprot#skip _t10007);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10006

class requestIdentityUnbind_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "requestIdentityUnbind_result.e") | Some _x10009 -> _x10009
  method set_e _x10009 = _e <- Some _x10009
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestIdentityUnbind_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestIdentityUnbind_result (iprot : Protocol.t) =
  let _str10012 = new requestIdentityUnbind_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10013,_id10014) = iprot#readFieldBegin in
        if _t10013 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10014 with 
          | 1 -> (if _t10013 = Protocol.T_STRUCT then
              _str10012#set_e (read_talkException iprot)
            else
              iprot#skip _t10013)
          | _ -> iprot#skip _t10013);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10012

class resendEmailConfirmation_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "resendEmailConfirmation_args.verifier") | Some _x10015 -> _x10015
  method set_verifier _x10015 = _verifier <- Some _x10015
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "resendEmailConfirmation_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_resendEmailConfirmation_args (iprot : Protocol.t) =
  let _str10018 = new resendEmailConfirmation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10019,_id10020) = iprot#readFieldBegin in
        if _t10019 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10020 with 
          | 2 -> (if _t10019 = Protocol.T_STRING then
              _str10018#set_verifier iprot#readString
            else
              iprot#skip _t10019)
          | _ -> iprot#skip _t10019);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10018

class resendEmailConfirmation_result =
object (self)
  val mutable _success : emailConfirmationSession option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "resendEmailConfirmation_result.success") | Some _x10021 -> _x10021
  method set_success _x10021 = _success <- Some _x10021
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "resendEmailConfirmation_result.e") | Some _x10022 -> _x10022
  method set_e _x10022 = _e <- Some _x10022
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "resendEmailConfirmation_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_resendEmailConfirmation_result (iprot : Protocol.t) =
  let _str10025 = new resendEmailConfirmation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10026,_id10027) = iprot#readFieldBegin in
        if _t10026 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10027 with 
          | 0 -> (if _t10026 = Protocol.T_STRUCT then
              _str10025#set_success (read_emailConfirmationSession iprot)
            else
              iprot#skip _t10026)
          | 1 -> (if _t10026 = Protocol.T_STRUCT then
              _str10025#set_e (read_talkException iprot)
            else
              iprot#skip _t10026)
          | _ -> iprot#skip _t10026);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10025

class resendPinCode_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "resendPinCode_args.sessionId") | Some _x10028 -> _x10028
  method set_sessionId _x10028 = _sessionId <- Some _x10028
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "resendPinCode_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_resendPinCode_args (iprot : Protocol.t) =
  let _str10031 = new resendPinCode_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10032,_id10033) = iprot#readFieldBegin in
        if _t10032 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10033 with 
          | 2 -> (if _t10032 = Protocol.T_STRING then
              _str10031#set_sessionId iprot#readString
            else
              iprot#skip _t10032)
          | _ -> iprot#skip _t10032);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10031

class resendPinCode_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "resendPinCode_result.e") | Some _x10034 -> _x10034
  method set_e _x10034 = _e <- Some _x10034
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "resendPinCode_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_resendPinCode_result (iprot : Protocol.t) =
  let _str10037 = new resendPinCode_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10038,_id10039) = iprot#readFieldBegin in
        if _t10038 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10039 with 
          | 1 -> (if _t10038 = Protocol.T_STRUCT then
              _str10037#set_e (read_talkException iprot)
            else
              iprot#skip _t10038)
          | _ -> iprot#skip _t10038);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10037

class resendPinCodeBySMS_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "resendPinCodeBySMS_args.sessionId") | Some _x10040 -> _x10040
  method set_sessionId _x10040 = _sessionId <- Some _x10040
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "resendPinCodeBySMS_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_resendPinCodeBySMS_args (iprot : Protocol.t) =
  let _str10043 = new resendPinCodeBySMS_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10044,_id10045) = iprot#readFieldBegin in
        if _t10044 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10045 with 
          | 2 -> (if _t10044 = Protocol.T_STRING then
              _str10043#set_sessionId iprot#readString
            else
              iprot#skip _t10044)
          | _ -> iprot#skip _t10044);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10043

class resendPinCodeBySMS_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "resendPinCodeBySMS_result.e") | Some _x10046 -> _x10046
  method set_e _x10046 = _e <- Some _x10046
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "resendPinCodeBySMS_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_resendPinCodeBySMS_result (iprot : Protocol.t) =
  let _str10049 = new resendPinCodeBySMS_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10050,_id10051) = iprot#readFieldBegin in
        if _t10050 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10051 with 
          | 1 -> (if _t10050 = Protocol.T_STRUCT then
              _str10049#set_e (read_talkException iprot)
            else
              iprot#skip _t10050)
          | _ -> iprot#skip _t10050);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10049

class sendChatChecked_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendChatChecked_args.seq") | Some _x10052 -> _x10052
  method set_seq _x10052 = _seq <- Some _x10052
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _consumer : string option = None
  method get_consumer = _consumer
  method grab_consumer = match _consumer with None->raise (Field_empty "sendChatChecked_args.consumer") | Some _x10053 -> _x10053
  method set_consumer _x10053 = _consumer <- Some _x10053
  method unset_consumer = _consumer <- None
  method reset_consumer = _consumer <- None

  val mutable _lastMessageId : string option = None
  method get_lastMessageId = _lastMessageId
  method grab_lastMessageId = match _lastMessageId with None->raise (Field_empty "sendChatChecked_args.lastMessageId") | Some _x10054 -> _x10054
  method set_lastMessageId _x10054 = _lastMessageId <- Some _x10054
  method unset_lastMessageId = _lastMessageId <- None
  method reset_lastMessageId = _lastMessageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendChatChecked_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _consumer with None -> () | Some _v -> 
      oprot#writeFieldBegin("consumer",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _lastMessageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastMessageId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendChatChecked_args (iprot : Protocol.t) =
  let _str10057 = new sendChatChecked_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10058,_id10059) = iprot#readFieldBegin in
        if _t10058 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10059 with 
          | 1 -> (if _t10058 = Protocol.T_I32 then
              _str10057#set_seq iprot#readI32
            else
              iprot#skip _t10058)
          | 2 -> (if _t10058 = Protocol.T_STRING then
              _str10057#set_consumer iprot#readString
            else
              iprot#skip _t10058)
          | 3 -> (if _t10058 = Protocol.T_STRING then
              _str10057#set_lastMessageId iprot#readString
            else
              iprot#skip _t10058)
          | _ -> iprot#skip _t10058);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10057

class sendChatChecked_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendChatChecked_result.e") | Some _x10060 -> _x10060
  method set_e _x10060 = _e <- Some _x10060
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendChatChecked_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendChatChecked_result (iprot : Protocol.t) =
  let _str10063 = new sendChatChecked_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10064,_id10065) = iprot#readFieldBegin in
        if _t10064 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10065 with 
          | 1 -> (if _t10064 = Protocol.T_STRUCT then
              _str10063#set_e (read_talkException iprot)
            else
              iprot#skip _t10064)
          | _ -> iprot#skip _t10064);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10063

class sendMessageAwaitCommit_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendMessageAwaitCommit_args.seq") | Some _x10066 -> _x10066
  method set_seq _x10066 = _seq <- Some _x10066
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _message : message option = None
  method get_message = _message
  method grab_message = match _message with None->raise (Field_empty "sendMessageAwaitCommit_args.message") | Some _x10067 -> _x10067
  method set_message _x10067 = _message <- Some _x10067
  method unset_message = _message <- None
  method reset_message = _message <- None

  method copy =
      let _new = Oo.copy self in
      if _message <> None then
        _new#set_message self#grab_message#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageAwaitCommit_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _message with None -> () | Some _v -> 
      oprot#writeFieldBegin("message",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageAwaitCommit_args (iprot : Protocol.t) =
  let _str10070 = new sendMessageAwaitCommit_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10071,_id10072) = iprot#readFieldBegin in
        if _t10071 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10072 with 
          | 1 -> (if _t10071 = Protocol.T_I32 then
              _str10070#set_seq iprot#readI32
            else
              iprot#skip _t10071)
          | 2 -> (if _t10071 = Protocol.T_STRUCT then
              _str10070#set_message (read_message iprot)
            else
              iprot#skip _t10071)
          | _ -> iprot#skip _t10071);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10070

class sendMessageAwaitCommit_result =
object (self)
  val mutable _success : commitMessageResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendMessageAwaitCommit_result.success") | Some _x10073 -> _x10073
  method set_success _x10073 = _success <- Some _x10073
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendMessageAwaitCommit_result.e") | Some _x10074 -> _x10074
  method set_e _x10074 = _e <- Some _x10074
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageAwaitCommit_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageAwaitCommit_result (iprot : Protocol.t) =
  let _str10077 = new sendMessageAwaitCommit_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10078,_id10079) = iprot#readFieldBegin in
        if _t10078 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10079 with 
          | 0 -> (if _t10078 = Protocol.T_STRUCT then
              _str10077#set_success (read_commitMessageResult iprot)
            else
              iprot#skip _t10078)
          | 1 -> (if _t10078 = Protocol.T_STRUCT then
              _str10077#set_e (read_talkException iprot)
            else
              iprot#skip _t10078)
          | _ -> iprot#skip _t10078);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10077

class sendChatRemoved_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendChatRemoved_args.seq") | Some _x10080 -> _x10080
  method set_seq _x10080 = _seq <- Some _x10080
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _consumer : string option = None
  method get_consumer = _consumer
  method grab_consumer = match _consumer with None->raise (Field_empty "sendChatRemoved_args.consumer") | Some _x10081 -> _x10081
  method set_consumer _x10081 = _consumer <- Some _x10081
  method unset_consumer = _consumer <- None
  method reset_consumer = _consumer <- None

  val mutable _lastMessageId : string option = None
  method get_lastMessageId = _lastMessageId
  method grab_lastMessageId = match _lastMessageId with None->raise (Field_empty "sendChatRemoved_args.lastMessageId") | Some _x10082 -> _x10082
  method set_lastMessageId _x10082 = _lastMessageId <- Some _x10082
  method unset_lastMessageId = _lastMessageId <- None
  method reset_lastMessageId = _lastMessageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendChatRemoved_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _consumer with None -> () | Some _v -> 
      oprot#writeFieldBegin("consumer",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _lastMessageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastMessageId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendChatRemoved_args (iprot : Protocol.t) =
  let _str10085 = new sendChatRemoved_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10086,_id10087) = iprot#readFieldBegin in
        if _t10086 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10087 with 
          | 1 -> (if _t10086 = Protocol.T_I32 then
              _str10085#set_seq iprot#readI32
            else
              iprot#skip _t10086)
          | 2 -> (if _t10086 = Protocol.T_STRING then
              _str10085#set_consumer iprot#readString
            else
              iprot#skip _t10086)
          | 3 -> (if _t10086 = Protocol.T_STRING then
              _str10085#set_lastMessageId iprot#readString
            else
              iprot#skip _t10086)
          | _ -> iprot#skip _t10086);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10085

class sendChatRemoved_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendChatRemoved_result.e") | Some _x10088 -> _x10088
  method set_e _x10088 = _e <- Some _x10088
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendChatRemoved_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendChatRemoved_result (iprot : Protocol.t) =
  let _str10091 = new sendChatRemoved_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10092,_id10093) = iprot#readFieldBegin in
        if _t10092 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10093 with 
          | 1 -> (if _t10092 = Protocol.T_STRUCT then
              _str10091#set_e (read_talkException iprot)
            else
              iprot#skip _t10092)
          | _ -> iprot#skip _t10092);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10091

class sendContentPreviewUpdated_args =
object (self)
  val mutable _esq : Int32.t option = None
  method get_esq = _esq
  method grab_esq = match _esq with None->raise (Field_empty "sendContentPreviewUpdated_args.esq") | Some _x10094 -> _x10094
  method set_esq _x10094 = _esq <- Some _x10094
  method unset_esq = _esq <- None
  method reset_esq = _esq <- None

  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "sendContentPreviewUpdated_args.messageId") | Some _x10095 -> _x10095
  method set_messageId _x10095 = _messageId <- Some _x10095
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  val mutable _receiverMids : string list option = None
  method get_receiverMids = _receiverMids
  method grab_receiverMids = match _receiverMids with None->raise (Field_empty "sendContentPreviewUpdated_args.receiverMids") | Some _x10096 -> _x10096
  method set_receiverMids _x10096 = _receiverMids <- Some _x10096
  method unset_receiverMids = _receiverMids <- None
  method reset_receiverMids = _receiverMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendContentPreviewUpdated_args";
    (match _esq with None -> () | Some _v -> 
      oprot#writeFieldBegin("esq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _receiverMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("receiverMids",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter10099 ->         oprot#writeString(_iter10099);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendContentPreviewUpdated_args (iprot : Protocol.t) =
  let _str10100 = new sendContentPreviewUpdated_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10101,_id10102) = iprot#readFieldBegin in
        if _t10101 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10102 with 
          | 1 -> (if _t10101 = Protocol.T_I32 then
              _str10100#set_esq iprot#readI32
            else
              iprot#skip _t10101)
          | 2 -> (if _t10101 = Protocol.T_STRING then
              _str10100#set_messageId iprot#readString
            else
              iprot#skip _t10101)
          | 3 -> (if _t10101 = Protocol.T_LIST then
              _str10100#set_receiverMids 
                (let (_etype10106,_size10103) = iprot#readListBegin in
                  let _con10107 = (Array.to_list (Array.init _size10103 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con10107)
            else
              iprot#skip _t10101)
          | _ -> iprot#skip _t10101);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10100

class sendContentPreviewUpdated_result =
object (self)
  val mutable _success : (string,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendContentPreviewUpdated_result.success") | Some _x10108 -> _x10108
  method set_success _x10108 = _success <- Some _x10108
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendContentPreviewUpdated_result.e") | Some _x10109 -> _x10109
  method set_e _x10109 = _e <- Some _x10109
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendContentPreviewUpdated_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter10112 -> fun _viter10113 -> 
        oprot#writeString(_kiter10112);
        oprot#writeString(_viter10113);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendContentPreviewUpdated_result (iprot : Protocol.t) =
  let _str10114 = new sendContentPreviewUpdated_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10115,_id10116) = iprot#readFieldBegin in
        if _t10115 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10116 with 
          | 0 -> (if _t10115 = Protocol.T_MAP then
              _str10114#set_success 
                (let (_ktype10118,_vtype10119,_size10117) = iprot#readMapBegin in
                let _con10121 = Hashtbl.create _size10117 in
                  for i = 1 to _size10117 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con10121 _k _v
                  done; iprot#readMapEnd; _con10121)
            else
              iprot#skip _t10115)
          | 1 -> (if _t10115 = Protocol.T_STRUCT then
              _str10114#set_e (read_talkException iprot)
            else
              iprot#skip _t10115)
          | _ -> iprot#skip _t10115);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10114

class sendContentReceipt_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendContentReceipt_args.seq") | Some _x10122 -> _x10122
  method set_seq _x10122 = _seq <- Some _x10122
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _consumer : string option = None
  method get_consumer = _consumer
  method grab_consumer = match _consumer with None->raise (Field_empty "sendContentReceipt_args.consumer") | Some _x10123 -> _x10123
  method set_consumer _x10123 = _consumer <- Some _x10123
  method unset_consumer = _consumer <- None
  method reset_consumer = _consumer <- None

  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "sendContentReceipt_args.messageId") | Some _x10124 -> _x10124
  method set_messageId _x10124 = _messageId <- Some _x10124
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendContentReceipt_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _consumer with None -> () | Some _v -> 
      oprot#writeFieldBegin("consumer",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendContentReceipt_args (iprot : Protocol.t) =
  let _str10127 = new sendContentReceipt_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10128,_id10129) = iprot#readFieldBegin in
        if _t10128 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10129 with 
          | 1 -> (if _t10128 = Protocol.T_I32 then
              _str10127#set_seq iprot#readI32
            else
              iprot#skip _t10128)
          | 2 -> (if _t10128 = Protocol.T_STRING then
              _str10127#set_consumer iprot#readString
            else
              iprot#skip _t10128)
          | 3 -> (if _t10128 = Protocol.T_STRING then
              _str10127#set_messageId iprot#readString
            else
              iprot#skip _t10128)
          | _ -> iprot#skip _t10128);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10127

class sendContentReceipt_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendContentReceipt_result.e") | Some _x10130 -> _x10130
  method set_e _x10130 = _e <- Some _x10130
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendContentReceipt_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendContentReceipt_result (iprot : Protocol.t) =
  let _str10133 = new sendContentReceipt_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10134,_id10135) = iprot#readFieldBegin in
        if _t10134 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10135 with 
          | 1 -> (if _t10134 = Protocol.T_STRUCT then
              _str10133#set_e (read_talkException iprot)
            else
              iprot#skip _t10134)
          | _ -> iprot#skip _t10134);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10133

class sendDummyPush_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendDummyPush_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendDummyPush_args (iprot : Protocol.t) =
  let _str10138 = new sendDummyPush_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10139,_id10140) = iprot#readFieldBegin in
        if _t10139 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10140 with 
          | _ -> iprot#skip _t10139);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10138

class sendDummyPush_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendDummyPush_result.e") | Some _x10141 -> _x10141
  method set_e _x10141 = _e <- Some _x10141
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendDummyPush_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendDummyPush_result (iprot : Protocol.t) =
  let _str10144 = new sendDummyPush_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10145,_id10146) = iprot#readFieldBegin in
        if _t10145 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10146 with 
          | 1 -> (if _t10145 = Protocol.T_STRUCT then
              _str10144#set_e (read_talkException iprot)
            else
              iprot#skip _t10145)
          | _ -> iprot#skip _t10145);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10144

class removeE2EEPublicKey_args =
object (self)
  val mutable _publicKey : e2EEPublicKey option = None
  method get_publicKey = _publicKey
  method grab_publicKey = match _publicKey with None->raise (Field_empty "removeE2EEPublicKey_args.publicKey") | Some _x10147 -> _x10147
  method set_publicKey _x10147 = _publicKey <- Some _x10147
  method unset_publicKey = _publicKey <- None
  method reset_publicKey = _publicKey <- None

  method copy =
      let _new = Oo.copy self in
      if _publicKey <> None then
        _new#set_publicKey self#grab_publicKey#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeE2EEPublicKey_args";
    (match _publicKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("publicKey",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeE2EEPublicKey_args (iprot : Protocol.t) =
  let _str10150 = new removeE2EEPublicKey_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10151,_id10152) = iprot#readFieldBegin in
        if _t10151 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10152 with 
          | 2 -> (if _t10151 = Protocol.T_STRUCT then
              _str10150#set_publicKey (read_e2EEPublicKey iprot)
            else
              iprot#skip _t10151)
          | _ -> iprot#skip _t10151);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10150

class removeE2EEPublicKey_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeE2EEPublicKey_result.e") | Some _x10153 -> _x10153
  method set_e _x10153 = _e <- Some _x10153
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeE2EEPublicKey_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeE2EEPublicKey_result (iprot : Protocol.t) =
  let _str10156 = new removeE2EEPublicKey_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10157,_id10158) = iprot#readFieldBegin in
        if _t10157 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10158 with 
          | 1 -> (if _t10157 = Protocol.T_STRUCT then
              _str10156#set_e (read_talkException iprot)
            else
              iprot#skip _t10157)
          | _ -> iprot#skip _t10157);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10156

class negotiateE2EEPublicKey_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "negotiateE2EEPublicKey_args.mid") | Some _x10159 -> _x10159
  method set_mid _x10159 = _mid <- Some _x10159
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "negotiateE2EEPublicKey_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_negotiateE2EEPublicKey_args (iprot : Protocol.t) =
  let _str10162 = new negotiateE2EEPublicKey_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10163,_id10164) = iprot#readFieldBegin in
        if _t10163 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10164 with 
          | 2 -> (if _t10163 = Protocol.T_STRING then
              _str10162#set_mid iprot#readString
            else
              iprot#skip _t10163)
          | _ -> iprot#skip _t10163);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10162

class negotiateE2EEPublicKey_result =
object (self)
  val mutable _success : e2EENegotiationResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "negotiateE2EEPublicKey_result.success") | Some _x10165 -> _x10165
  method set_success _x10165 = _success <- Some _x10165
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "negotiateE2EEPublicKey_result.e") | Some _x10166 -> _x10166
  method set_e _x10166 = _e <- Some _x10166
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "negotiateE2EEPublicKey_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_negotiateE2EEPublicKey_result (iprot : Protocol.t) =
  let _str10169 = new negotiateE2EEPublicKey_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10170,_id10171) = iprot#readFieldBegin in
        if _t10170 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10171 with 
          | 0 -> (if _t10170 = Protocol.T_STRUCT then
              _str10169#set_success (read_e2EENegotiationResult iprot)
            else
              iprot#skip _t10170)
          | 1 -> (if _t10170 = Protocol.T_STRUCT then
              _str10169#set_e (read_talkException iprot)
            else
              iprot#skip _t10170)
          | _ -> iprot#skip _t10170);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10169

class getE2EEPublicKey_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "getE2EEPublicKey_args.mid") | Some _x10172 -> _x10172
  method set_mid _x10172 = _mid <- Some _x10172
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  val mutable _version : Int32.t option = None
  method get_version = _version
  method grab_version = match _version with None->raise (Field_empty "getE2EEPublicKey_args.version") | Some _x10173 -> _x10173
  method set_version _x10173 = _version <- Some _x10173
  method unset_version = _version <- None
  method reset_version = _version <- None

  val mutable _keyId : Int32.t option = None
  method get_keyId = _keyId
  method grab_keyId = match _keyId with None->raise (Field_empty "getE2EEPublicKey_args.keyId") | Some _x10174 -> _x10174
  method set_keyId _x10174 = _keyId <- Some _x10174
  method unset_keyId = _keyId <- None
  method reset_keyId = _keyId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getE2EEPublicKey_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _version with None -> () | Some _v -> 
      oprot#writeFieldBegin("version",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _keyId with None -> () | Some _v -> 
      oprot#writeFieldBegin("keyId",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getE2EEPublicKey_args (iprot : Protocol.t) =
  let _str10177 = new getE2EEPublicKey_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10178,_id10179) = iprot#readFieldBegin in
        if _t10178 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10179 with 
          | 2 -> (if _t10178 = Protocol.T_STRING then
              _str10177#set_mid iprot#readString
            else
              iprot#skip _t10178)
          | 3 -> (if _t10178 = Protocol.T_I32 then
              _str10177#set_version iprot#readI32
            else
              iprot#skip _t10178)
          | 4 -> (if _t10178 = Protocol.T_I32 then
              _str10177#set_keyId iprot#readI32
            else
              iprot#skip _t10178)
          | _ -> iprot#skip _t10178);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10177

class getE2EEPublicKey_result =
object (self)
  val mutable _success : e2EEPublicKey option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getE2EEPublicKey_result.success") | Some _x10180 -> _x10180
  method set_success _x10180 = _success <- Some _x10180
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getE2EEPublicKey_result.e") | Some _x10181 -> _x10181
  method set_e _x10181 = _e <- Some _x10181
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getE2EEPublicKey_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getE2EEPublicKey_result (iprot : Protocol.t) =
  let _str10184 = new getE2EEPublicKey_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10185,_id10186) = iprot#readFieldBegin in
        if _t10185 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10186 with 
          | 0 -> (if _t10185 = Protocol.T_STRUCT then
              _str10184#set_success (read_e2EEPublicKey iprot)
            else
              iprot#skip _t10185)
          | 1 -> (if _t10185 = Protocol.T_STRUCT then
              _str10184#set_e (read_talkException iprot)
            else
              iprot#skip _t10185)
          | _ -> iprot#skip _t10185);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10184

class requestE2EEKeyExchange_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "requestE2EEKeyExchange_args.reqSeq") | Some _x10187 -> _x10187
  method set_reqSeq _x10187 = _reqSeq <- Some _x10187
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _temporalPublicKey : string option = None
  method get_temporalPublicKey = _temporalPublicKey
  method grab_temporalPublicKey = match _temporalPublicKey with None->raise (Field_empty "requestE2EEKeyExchange_args.temporalPublicKey") | Some _x10188 -> _x10188
  method set_temporalPublicKey _x10188 = _temporalPublicKey <- Some _x10188
  method unset_temporalPublicKey = _temporalPublicKey <- None
  method reset_temporalPublicKey = _temporalPublicKey <- None

  val mutable _publicKey : e2EEPublicKey option = None
  method get_publicKey = _publicKey
  method grab_publicKey = match _publicKey with None->raise (Field_empty "requestE2EEKeyExchange_args.publicKey") | Some _x10189 -> _x10189
  method set_publicKey _x10189 = _publicKey <- Some _x10189
  method unset_publicKey = _publicKey <- None
  method reset_publicKey = _publicKey <- None

  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "requestE2EEKeyExchange_args.verifier") | Some _x10190 -> _x10190
  method set_verifier _x10190 = _verifier <- Some _x10190
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  method copy =
      let _new = Oo.copy self in
      if _publicKey <> None then
        _new#set_publicKey self#grab_publicKey#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestE2EEKeyExchange_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _temporalPublicKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("temporalPublicKey",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _publicKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("publicKey",Protocol.T_STRUCT,3);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestE2EEKeyExchange_args (iprot : Protocol.t) =
  let _str10193 = new requestE2EEKeyExchange_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10194,_id10195) = iprot#readFieldBegin in
        if _t10194 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10195 with 
          | 1 -> (if _t10194 = Protocol.T_I32 then
              _str10193#set_reqSeq iprot#readI32
            else
              iprot#skip _t10194)
          | 2 -> (if _t10194 = Protocol.T_STRING then
              _str10193#set_temporalPublicKey iprot#readString
            else
              iprot#skip _t10194)
          | 3 -> (if _t10194 = Protocol.T_STRUCT then
              _str10193#set_publicKey (read_e2EEPublicKey iprot)
            else
              iprot#skip _t10194)
          | 4 -> (if _t10194 = Protocol.T_STRING then
              _str10193#set_verifier iprot#readString
            else
              iprot#skip _t10194)
          | _ -> iprot#skip _t10194);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10193

class requestE2EEKeyExchange_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "requestE2EEKeyExchange_result.e") | Some _x10196 -> _x10196
  method set_e _x10196 = _e <- Some _x10196
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestE2EEKeyExchange_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestE2EEKeyExchange_result (iprot : Protocol.t) =
  let _str10199 = new requestE2EEKeyExchange_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10200,_id10201) = iprot#readFieldBegin in
        if _t10200 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10201 with 
          | 1 -> (if _t10200 = Protocol.T_STRUCT then
              _str10199#set_e (read_talkException iprot)
            else
              iprot#skip _t10200)
          | _ -> iprot#skip _t10200);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10199

class getLastE2EEPublicKeys_args =
object (self)
  val mutable _chatMid : string option = None
  method get_chatMid = _chatMid
  method grab_chatMid = match _chatMid with None->raise (Field_empty "getLastE2EEPublicKeys_args.chatMid") | Some _x10202 -> _x10202
  method set_chatMid _x10202 = _chatMid <- Some _x10202
  method unset_chatMid = _chatMid <- None
  method reset_chatMid = _chatMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getLastE2EEPublicKeys_args";
    (match _chatMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getLastE2EEPublicKeys_args (iprot : Protocol.t) =
  let _str10205 = new getLastE2EEPublicKeys_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10206,_id10207) = iprot#readFieldBegin in
        if _t10206 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10207 with 
          | 2 -> (if _t10206 = Protocol.T_STRING then
              _str10205#set_chatMid iprot#readString
            else
              iprot#skip _t10206)
          | _ -> iprot#skip _t10206);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10205

class getLastE2EEPublicKeys_result =
object (self)
  val mutable _success : (string,e2EEPublicKey) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getLastE2EEPublicKeys_result.success") | Some _x10208 -> _x10208
  method set_success _x10208 = _success <- Some _x10208
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getLastE2EEPublicKeys_result.e") | Some _x10209 -> _x10209
  method set_e _x10209 = _e <- Some _x10209
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k v#copy) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getLastE2EEPublicKeys_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter10212 -> fun _viter10213 -> 
        oprot#writeString(_kiter10212);
        _viter10213#write(oprot);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getLastE2EEPublicKeys_result (iprot : Protocol.t) =
  let _str10214 = new getLastE2EEPublicKeys_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10215,_id10216) = iprot#readFieldBegin in
        if _t10215 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10216 with 
          | 0 -> (if _t10215 = Protocol.T_MAP then
              _str10214#set_success 
                (let (_ktype10218,_vtype10219,_size10217) = iprot#readMapBegin in
                let _con10221 = Hashtbl.create _size10217 in
                  for i = 1 to _size10217 do
                    let _k = iprot#readString in
                    let _v = (read_e2EEPublicKey iprot) in
                      Hashtbl.add _con10221 _k _v
                  done; iprot#readMapEnd; _con10221)
            else
              iprot#skip _t10215)
          | 1 -> (if _t10215 = Protocol.T_STRUCT then
              _str10214#set_e (read_talkException iprot)
            else
              iprot#skip _t10215)
          | _ -> iprot#skip _t10215);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10214

class registerE2EEPublicKey_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "registerE2EEPublicKey_args.reqSeq") | Some _x10222 -> _x10222
  method set_reqSeq _x10222 = _reqSeq <- Some _x10222
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _publicKey : e2EEPublicKey option = None
  method get_publicKey = _publicKey
  method grab_publicKey = match _publicKey with None->raise (Field_empty "registerE2EEPublicKey_args.publicKey") | Some _x10223 -> _x10223
  method set_publicKey _x10223 = _publicKey <- Some _x10223
  method unset_publicKey = _publicKey <- None
  method reset_publicKey = _publicKey <- None

  method copy =
      let _new = Oo.copy self in
      if _publicKey <> None then
        _new#set_publicKey self#grab_publicKey#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerE2EEPublicKey_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _publicKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("publicKey",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerE2EEPublicKey_args (iprot : Protocol.t) =
  let _str10226 = new registerE2EEPublicKey_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10227,_id10228) = iprot#readFieldBegin in
        if _t10227 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10228 with 
          | 1 -> (if _t10227 = Protocol.T_I32 then
              _str10226#set_reqSeq iprot#readI32
            else
              iprot#skip _t10227)
          | 2 -> (if _t10227 = Protocol.T_STRUCT then
              _str10226#set_publicKey (read_e2EEPublicKey iprot)
            else
              iprot#skip _t10227)
          | _ -> iprot#skip _t10227);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10226

class registerE2EEPublicKey_result =
object (self)
  val mutable _success : e2EEPublicKey option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerE2EEPublicKey_result.success") | Some _x10229 -> _x10229
  method set_success _x10229 = _success <- Some _x10229
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerE2EEPublicKey_result.e") | Some _x10230 -> _x10230
  method set_e _x10230 = _e <- Some _x10230
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerE2EEPublicKey_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerE2EEPublicKey_result (iprot : Protocol.t) =
  let _str10233 = new registerE2EEPublicKey_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10234,_id10235) = iprot#readFieldBegin in
        if _t10234 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10235 with 
          | 0 -> (if _t10234 = Protocol.T_STRUCT then
              _str10233#set_success (read_e2EEPublicKey iprot)
            else
              iprot#skip _t10234)
          | 1 -> (if _t10234 = Protocol.T_STRUCT then
              _str10233#set_e (read_talkException iprot)
            else
              iprot#skip _t10234)
          | _ -> iprot#skip _t10234);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10233

class getE2EEPublicKeys_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getE2EEPublicKeys_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getE2EEPublicKeys_args (iprot : Protocol.t) =
  let _str10238 = new getE2EEPublicKeys_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10239,_id10240) = iprot#readFieldBegin in
        if _t10239 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10240 with 
          | _ -> iprot#skip _t10239);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10238

class getE2EEPublicKeys_result =
object (self)
  val mutable _success : e2EEPublicKey list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getE2EEPublicKeys_result.success") | Some _x10241 -> _x10241
  method set_success _x10241 = _success <- Some _x10241
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getE2EEPublicKeys_result.e") | Some _x10242 -> _x10242
  method set_e _x10242 = _e <- Some _x10242
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getE2EEPublicKeys_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter10245 ->         _iter10245#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getE2EEPublicKeys_result (iprot : Protocol.t) =
  let _str10246 = new getE2EEPublicKeys_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10247,_id10248) = iprot#readFieldBegin in
        if _t10247 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10248 with 
          | 0 -> (if _t10247 = Protocol.T_LIST then
              _str10246#set_success 
                (let (_etype10252,_size10249) = iprot#readListBegin in
                  let _con10253 = (Array.to_list (Array.init _size10249 (fun _ -> (read_e2EEPublicKey iprot)))) in
                    iprot#readListEnd; _con10253)
            else
              iprot#skip _t10247)
          | 1 -> (if _t10247 = Protocol.T_STRUCT then
              _str10246#set_e (read_talkException iprot)
            else
              iprot#skip _t10247)
          | _ -> iprot#skip _t10247);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10246

class getE2EEPublicKeysEx_args =
object (self)
  val mutable _ignoreE2EEStatus : bool option = None
  method get_ignoreE2EEStatus = _ignoreE2EEStatus
  method grab_ignoreE2EEStatus = match _ignoreE2EEStatus with None->raise (Field_empty "getE2EEPublicKeysEx_args.ignoreE2EEStatus") | Some _x10254 -> _x10254
  method set_ignoreE2EEStatus _x10254 = _ignoreE2EEStatus <- Some _x10254
  method unset_ignoreE2EEStatus = _ignoreE2EEStatus <- None
  method reset_ignoreE2EEStatus = _ignoreE2EEStatus <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getE2EEPublicKeysEx_args";
    (match _ignoreE2EEStatus with None -> () | Some _v -> 
      oprot#writeFieldBegin("ignoreE2EEStatus",Protocol.T_BOOL,2);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getE2EEPublicKeysEx_args (iprot : Protocol.t) =
  let _str10257 = new getE2EEPublicKeysEx_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10258,_id10259) = iprot#readFieldBegin in
        if _t10258 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10259 with 
          | 2 -> (if _t10258 = Protocol.T_BOOL then
              _str10257#set_ignoreE2EEStatus iprot#readBool
            else
              iprot#skip _t10258)
          | _ -> iprot#skip _t10258);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10257

class getE2EEPublicKeysEx_result =
object (self)
  val mutable _success : e2EEPublicKey list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getE2EEPublicKeysEx_result.success") | Some _x10260 -> _x10260
  method set_success _x10260 = _success <- Some _x10260
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getE2EEPublicKeysEx_result.e") | Some _x10261 -> _x10261
  method set_e _x10261 = _e <- Some _x10261
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getE2EEPublicKeysEx_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter10264 ->         _iter10264#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getE2EEPublicKeysEx_result (iprot : Protocol.t) =
  let _str10265 = new getE2EEPublicKeysEx_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10266,_id10267) = iprot#readFieldBegin in
        if _t10266 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10267 with 
          | 0 -> (if _t10266 = Protocol.T_LIST then
              _str10265#set_success 
                (let (_etype10271,_size10268) = iprot#readListBegin in
                  let _con10272 = (Array.to_list (Array.init _size10268 (fun _ -> (read_e2EEPublicKey iprot)))) in
                    iprot#readListEnd; _con10272)
            else
              iprot#skip _t10266)
          | 1 -> (if _t10266 = Protocol.T_STRUCT then
              _str10265#set_e (read_talkException iprot)
            else
              iprot#skip _t10266)
          | _ -> iprot#skip _t10266);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10265

class getReadMessageOpsInBulk_args =
object (self)
  val mutable _chatIds : string list option = None
  method get_chatIds = _chatIds
  method grab_chatIds = match _chatIds with None->raise (Field_empty "getReadMessageOpsInBulk_args.chatIds") | Some _x10273 -> _x10273
  method set_chatIds _x10273 = _chatIds <- Some _x10273
  method unset_chatIds = _chatIds <- None
  method reset_chatIds = _chatIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getReadMessageOpsInBulk_args";
    (match _chatIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatIds",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter10276 ->         oprot#writeString(_iter10276);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getReadMessageOpsInBulk_args (iprot : Protocol.t) =
  let _str10277 = new getReadMessageOpsInBulk_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10278,_id10279) = iprot#readFieldBegin in
        if _t10278 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10279 with 
          | 2 -> (if _t10278 = Protocol.T_LIST then
              _str10277#set_chatIds 
                (let (_etype10283,_size10280) = iprot#readListBegin in
                  let _con10284 = (Array.to_list (Array.init _size10280 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con10284)
            else
              iprot#skip _t10278)
          | _ -> iprot#skip _t10278);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10277

class getReadMessageOpsInBulk_result =
object (self)
  val mutable _success : operation list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getReadMessageOpsInBulk_result.success") | Some _x10285 -> _x10285
  method set_success _x10285 = _success <- Some _x10285
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getReadMessageOpsInBulk_result.e") | Some _x10286 -> _x10286
  method set_e _x10286 = _e <- Some _x10286
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getReadMessageOpsInBulk_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter10289 ->         _iter10289#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getReadMessageOpsInBulk_result (iprot : Protocol.t) =
  let _str10290 = new getReadMessageOpsInBulk_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10291,_id10292) = iprot#readFieldBegin in
        if _t10291 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10292 with 
          | 0 -> (if _t10291 = Protocol.T_LIST then
              _str10290#set_success 
                (let (_etype10296,_size10293) = iprot#readListBegin in
                  let _con10297 = (Array.to_list (Array.init _size10293 (fun _ -> (read_operation iprot)))) in
                    iprot#readListEnd; _con10297)
            else
              iprot#skip _t10291)
          | 1 -> (if _t10291 = Protocol.T_STRUCT then
              _str10290#set_e (read_talkException iprot)
            else
              iprot#skip _t10291)
          | _ -> iprot#skip _t10291);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10290

class sendEvent_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendEvent_args.seq") | Some _x10298 -> _x10298
  method set_seq _x10298 = _seq <- Some _x10298
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _message : message option = None
  method get_message = _message
  method grab_message = match _message with None->raise (Field_empty "sendEvent_args.message") | Some _x10299 -> _x10299
  method set_message _x10299 = _message <- Some _x10299
  method unset_message = _message <- None
  method reset_message = _message <- None

  method copy =
      let _new = Oo.copy self in
      if _message <> None then
        _new#set_message self#grab_message#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendEvent_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _message with None -> () | Some _v -> 
      oprot#writeFieldBegin("message",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendEvent_args (iprot : Protocol.t) =
  let _str10302 = new sendEvent_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10303,_id10304) = iprot#readFieldBegin in
        if _t10303 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10304 with 
          | 1 -> (if _t10303 = Protocol.T_I32 then
              _str10302#set_seq iprot#readI32
            else
              iprot#skip _t10303)
          | 2 -> (if _t10303 = Protocol.T_STRUCT then
              _str10302#set_message (read_message iprot)
            else
              iprot#skip _t10303)
          | _ -> iprot#skip _t10303);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10302

class sendEvent_result =
object (self)
  val mutable _success : message option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendEvent_result.success") | Some _x10305 -> _x10305
  method set_success _x10305 = _success <- Some _x10305
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendEvent_result.e") | Some _x10306 -> _x10306
  method set_e _x10306 = _e <- Some _x10306
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendEvent_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendEvent_result (iprot : Protocol.t) =
  let _str10309 = new sendEvent_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10310,_id10311) = iprot#readFieldBegin in
        if _t10310 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10311 with 
          | 0 -> (if _t10310 = Protocol.T_STRUCT then
              _str10309#set_success (read_message iprot)
            else
              iprot#skip _t10310)
          | 1 -> (if _t10310 = Protocol.T_STRUCT then
              _str10309#set_e (read_talkException iprot)
            else
              iprot#skip _t10310)
          | _ -> iprot#skip _t10310);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10309

class sendMessage_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendMessage_args.seq") | Some _x10312 -> _x10312
  method set_seq _x10312 = _seq <- Some _x10312
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _message : message option = None
  method get_message = _message
  method grab_message = match _message with None->raise (Field_empty "sendMessage_args.message") | Some _x10313 -> _x10313
  method set_message _x10313 = _message <- Some _x10313
  method unset_message = _message <- None
  method reset_message = _message <- None

  method copy =
      let _new = Oo.copy self in
      if _message <> None then
        _new#set_message self#grab_message#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessage_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _message with None -> () | Some _v -> 
      oprot#writeFieldBegin("message",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessage_args (iprot : Protocol.t) =
  let _str10316 = new sendMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10317,_id10318) = iprot#readFieldBegin in
        if _t10317 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10318 with 
          | 1 -> (if _t10317 = Protocol.T_I32 then
              _str10316#set_seq iprot#readI32
            else
              iprot#skip _t10317)
          | 2 -> (if _t10317 = Protocol.T_STRUCT then
              _str10316#set_message (read_message iprot)
            else
              iprot#skip _t10317)
          | _ -> iprot#skip _t10317);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10316

class sendMessage_result =
object (self)
  val mutable _success : message option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendMessage_result.success") | Some _x10319 -> _x10319
  method set_success _x10319 = _success <- Some _x10319
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendMessage_result.e") | Some _x10320 -> _x10320
  method set_e _x10320 = _e <- Some _x10320
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessage_result (iprot : Protocol.t) =
  let _str10323 = new sendMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10324,_id10325) = iprot#readFieldBegin in
        if _t10324 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10325 with 
          | 0 -> (if _t10324 = Protocol.T_STRUCT then
              _str10323#set_success (read_message iprot)
            else
              iprot#skip _t10324)
          | 1 -> (if _t10324 = Protocol.T_STRUCT then
              _str10323#set_e (read_talkException iprot)
            else
              iprot#skip _t10324)
          | _ -> iprot#skip _t10324);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10323

class sendMessageIgnored_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendMessageIgnored_args.seq") | Some _x10326 -> _x10326
  method set_seq _x10326 = _seq <- Some _x10326
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _consumer : string option = None
  method get_consumer = _consumer
  method grab_consumer = match _consumer with None->raise (Field_empty "sendMessageIgnored_args.consumer") | Some _x10327 -> _x10327
  method set_consumer _x10327 = _consumer <- Some _x10327
  method unset_consumer = _consumer <- None
  method reset_consumer = _consumer <- None

  val mutable _messageIds : string list option = None
  method get_messageIds = _messageIds
  method grab_messageIds = match _messageIds with None->raise (Field_empty "sendMessageIgnored_args.messageIds") | Some _x10328 -> _x10328
  method set_messageIds _x10328 = _messageIds <- Some _x10328
  method unset_messageIds = _messageIds <- None
  method reset_messageIds = _messageIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageIgnored_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _consumer with None -> () | Some _v -> 
      oprot#writeFieldBegin("consumer",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageIds",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter10331 ->         oprot#writeString(_iter10331);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageIgnored_args (iprot : Protocol.t) =
  let _str10332 = new sendMessageIgnored_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10333,_id10334) = iprot#readFieldBegin in
        if _t10333 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10334 with 
          | 1 -> (if _t10333 = Protocol.T_I32 then
              _str10332#set_seq iprot#readI32
            else
              iprot#skip _t10333)
          | 2 -> (if _t10333 = Protocol.T_STRING then
              _str10332#set_consumer iprot#readString
            else
              iprot#skip _t10333)
          | 3 -> (if _t10333 = Protocol.T_LIST then
              _str10332#set_messageIds 
                (let (_etype10338,_size10335) = iprot#readListBegin in
                  let _con10339 = (Array.to_list (Array.init _size10335 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con10339)
            else
              iprot#skip _t10333)
          | _ -> iprot#skip _t10333);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10332

class sendMessageIgnored_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendMessageIgnored_result.e") | Some _x10340 -> _x10340
  method set_e _x10340 = _e <- Some _x10340
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageIgnored_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageIgnored_result (iprot : Protocol.t) =
  let _str10343 = new sendMessageIgnored_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10344,_id10345) = iprot#readFieldBegin in
        if _t10344 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10345 with 
          | 1 -> (if _t10344 = Protocol.T_STRUCT then
              _str10343#set_e (read_talkException iprot)
            else
              iprot#skip _t10344)
          | _ -> iprot#skip _t10344);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10343

class sendMessageReceipt_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendMessageReceipt_args.seq") | Some _x10346 -> _x10346
  method set_seq _x10346 = _seq <- Some _x10346
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _consumer : string option = None
  method get_consumer = _consumer
  method grab_consumer = match _consumer with None->raise (Field_empty "sendMessageReceipt_args.consumer") | Some _x10347 -> _x10347
  method set_consumer _x10347 = _consumer <- Some _x10347
  method unset_consumer = _consumer <- None
  method reset_consumer = _consumer <- None

  val mutable _messageIds : string list option = None
  method get_messageIds = _messageIds
  method grab_messageIds = match _messageIds with None->raise (Field_empty "sendMessageReceipt_args.messageIds") | Some _x10348 -> _x10348
  method set_messageIds _x10348 = _messageIds <- Some _x10348
  method unset_messageIds = _messageIds <- None
  method reset_messageIds = _messageIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageReceipt_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _consumer with None -> () | Some _v -> 
      oprot#writeFieldBegin("consumer",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageIds",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter10351 ->         oprot#writeString(_iter10351);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageReceipt_args (iprot : Protocol.t) =
  let _str10352 = new sendMessageReceipt_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10353,_id10354) = iprot#readFieldBegin in
        if _t10353 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10354 with 
          | 1 -> (if _t10353 = Protocol.T_I32 then
              _str10352#set_seq iprot#readI32
            else
              iprot#skip _t10353)
          | 2 -> (if _t10353 = Protocol.T_STRING then
              _str10352#set_consumer iprot#readString
            else
              iprot#skip _t10353)
          | 3 -> (if _t10353 = Protocol.T_LIST then
              _str10352#set_messageIds 
                (let (_etype10358,_size10355) = iprot#readListBegin in
                  let _con10359 = (Array.to_list (Array.init _size10355 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con10359)
            else
              iprot#skip _t10353)
          | _ -> iprot#skip _t10353);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10352

class sendMessageReceipt_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendMessageReceipt_result.e") | Some _x10360 -> _x10360
  method set_e _x10360 = _e <- Some _x10360
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageReceipt_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageReceipt_result (iprot : Protocol.t) =
  let _str10363 = new sendMessageReceipt_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10364,_id10365) = iprot#readFieldBegin in
        if _t10364 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10365 with 
          | 1 -> (if _t10364 = Protocol.T_STRUCT then
              _str10363#set_e (read_talkException iprot)
            else
              iprot#skip _t10364)
          | _ -> iprot#skip _t10364);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10363

class findContactByMetaTag_args =
object (self)
  val mutable _userid : string option = None
  method get_userid = _userid
  method grab_userid = match _userid with None->raise (Field_empty "findContactByMetaTag_args.userid") | Some _x10366 -> _x10366
  method set_userid _x10366 = _userid <- Some _x10366
  method unset_userid = _userid <- None
  method reset_userid = _userid <- None

  val mutable _reference : string option = None
  method get_reference = _reference
  method grab_reference = match _reference with None->raise (Field_empty "findContactByMetaTag_args.reference") | Some _x10367 -> _x10367
  method set_reference _x10367 = _reference <- Some _x10367
  method unset_reference = _reference <- None
  method reset_reference = _reference <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByMetaTag_args";
    (match _userid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _reference with None -> () | Some _v -> 
      oprot#writeFieldBegin("reference",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByMetaTag_args (iprot : Protocol.t) =
  let _str10370 = new findContactByMetaTag_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10371,_id10372) = iprot#readFieldBegin in
        if _t10371 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10372 with 
          | 2 -> (if _t10371 = Protocol.T_STRING then
              _str10370#set_userid iprot#readString
            else
              iprot#skip _t10371)
          | 3 -> (if _t10371 = Protocol.T_STRING then
              _str10370#set_reference iprot#readString
            else
              iprot#skip _t10371)
          | _ -> iprot#skip _t10371);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10370

class findContactByMetaTag_result =
object (self)
  val mutable _success : contact option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findContactByMetaTag_result.success") | Some _x10373 -> _x10373
  method set_success _x10373 = _success <- Some _x10373
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findContactByMetaTag_result.e") | Some _x10374 -> _x10374
  method set_e _x10374 = _e <- Some _x10374
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByMetaTag_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByMetaTag_result (iprot : Protocol.t) =
  let _str10377 = new findContactByMetaTag_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10378,_id10379) = iprot#readFieldBegin in
        if _t10378 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10379 with 
          | 0 -> (if _t10378 = Protocol.T_STRUCT then
              _str10377#set_success (read_contact iprot)
            else
              iprot#skip _t10378)
          | 1 -> (if _t10378 = Protocol.T_STRUCT then
              _str10377#set_e (read_talkException iprot)
            else
              iprot#skip _t10378)
          | _ -> iprot#skip _t10378);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10377

class sendMessageToMyHome_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendMessageToMyHome_args.seq") | Some _x10380 -> _x10380
  method set_seq _x10380 = _seq <- Some _x10380
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _message : message option = None
  method get_message = _message
  method grab_message = match _message with None->raise (Field_empty "sendMessageToMyHome_args.message") | Some _x10381 -> _x10381
  method set_message _x10381 = _message <- Some _x10381
  method unset_message = _message <- None
  method reset_message = _message <- None

  method copy =
      let _new = Oo.copy self in
      if _message <> None then
        _new#set_message self#grab_message#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageToMyHome_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _message with None -> () | Some _v -> 
      oprot#writeFieldBegin("message",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageToMyHome_args (iprot : Protocol.t) =
  let _str10384 = new sendMessageToMyHome_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10385,_id10386) = iprot#readFieldBegin in
        if _t10385 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10386 with 
          | 1 -> (if _t10385 = Protocol.T_I32 then
              _str10384#set_seq iprot#readI32
            else
              iprot#skip _t10385)
          | 2 -> (if _t10385 = Protocol.T_STRUCT then
              _str10384#set_message (read_message iprot)
            else
              iprot#skip _t10385)
          | _ -> iprot#skip _t10385);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10384

class sendMessageToMyHome_result =
object (self)
  val mutable _success : message option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendMessageToMyHome_result.success") | Some _x10387 -> _x10387
  method set_success _x10387 = _success <- Some _x10387
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendMessageToMyHome_result.e") | Some _x10388 -> _x10388
  method set_e _x10388 = _e <- Some _x10388
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageToMyHome_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageToMyHome_result (iprot : Protocol.t) =
  let _str10391 = new sendMessageToMyHome_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10392,_id10393) = iprot#readFieldBegin in
        if _t10392 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10393 with 
          | 0 -> (if _t10392 = Protocol.T_STRUCT then
              _str10391#set_success (read_message iprot)
            else
              iprot#skip _t10392)
          | 1 -> (if _t10392 = Protocol.T_STRUCT then
              _str10391#set_e (read_talkException iprot)
            else
              iprot#skip _t10392)
          | _ -> iprot#skip _t10392);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10391

class setBuddyLocation_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "setBuddyLocation_args.mid") | Some _x10394 -> _x10394
  method set_mid _x10394 = _mid <- Some _x10394
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  val mutable _index : Int32.t option = None
  method get_index = _index
  method grab_index = match _index with None->raise (Field_empty "setBuddyLocation_args.index") | Some _x10395 -> _x10395
  method set_index _x10395 = _index <- Some _x10395
  method unset_index = _index <- None
  method reset_index = _index <- None

  val mutable _location : geolocation option = None
  method get_location = _location
  method grab_location = match _location with None->raise (Field_empty "setBuddyLocation_args.location") | Some _x10396 -> _x10396
  method set_location _x10396 = _location <- Some _x10396
  method unset_location = _location <- None
  method reset_location = _location <- None

  method copy =
      let _new = Oo.copy self in
      if _location <> None then
        _new#set_location self#grab_location#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setBuddyLocation_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _index with None -> () | Some _v -> 
      oprot#writeFieldBegin("index",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _location with None -> () | Some _v -> 
      oprot#writeFieldBegin("location",Protocol.T_STRUCT,4);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setBuddyLocation_args (iprot : Protocol.t) =
  let _str10399 = new setBuddyLocation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10400,_id10401) = iprot#readFieldBegin in
        if _t10400 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10401 with 
          | 2 -> (if _t10400 = Protocol.T_STRING then
              _str10399#set_mid iprot#readString
            else
              iprot#skip _t10400)
          | 3 -> (if _t10400 = Protocol.T_I32 then
              _str10399#set_index iprot#readI32
            else
              iprot#skip _t10400)
          | 4 -> (if _t10400 = Protocol.T_STRUCT then
              _str10399#set_location (read_geolocation iprot)
            else
              iprot#skip _t10400)
          | _ -> iprot#skip _t10400);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10399

class setBuddyLocation_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "setBuddyLocation_result.e") | Some _x10402 -> _x10402
  method set_e _x10402 = _e <- Some _x10402
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setBuddyLocation_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setBuddyLocation_result (iprot : Protocol.t) =
  let _str10405 = new setBuddyLocation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10406,_id10407) = iprot#readFieldBegin in
        if _t10406 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10407 with 
          | 1 -> (if _t10406 = Protocol.T_STRUCT then
              _str10405#set_e (read_talkException iprot)
            else
              iprot#skip _t10406)
          | _ -> iprot#skip _t10406);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10405

class setIdentityCredential_args =
object (self)
  val mutable _identifier : string option = None
  method get_identifier = _identifier
  method grab_identifier = match _identifier with None->raise (Field_empty "setIdentityCredential_args.identifier") | Some _x10408 -> _x10408
  method set_identifier _x10408 = _identifier <- Some _x10408
  method unset_identifier = _identifier <- None
  method reset_identifier = _identifier <- None

  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "setIdentityCredential_args.verifier") | Some _x10409 -> _x10409
  method set_verifier _x10409 = _verifier <- Some _x10409
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  val mutable _provider : IdentityProvider.t option = None
  method get_provider = _provider
  method grab_provider = match _provider with None->raise (Field_empty "setIdentityCredential_args.provider") | Some _x10410 -> _x10410
  method set_provider _x10410 = _provider <- Some _x10410
  method unset_provider = _provider <- None
  method reset_provider = _provider <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setIdentityCredential_args";
    (match _identifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("identifier",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _provider with None -> () | Some _v -> 
      oprot#writeFieldBegin("provider",Protocol.T_I32,4);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setIdentityCredential_args (iprot : Protocol.t) =
  let _str10413 = new setIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10414,_id10415) = iprot#readFieldBegin in
        if _t10414 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10415 with 
          | 2 -> (if _t10414 = Protocol.T_STRING then
              _str10413#set_identifier iprot#readString
            else
              iprot#skip _t10414)
          | 3 -> (if _t10414 = Protocol.T_STRING then
              _str10413#set_verifier iprot#readString
            else
              iprot#skip _t10414)
          | 4 -> (if _t10414 = Protocol.T_I32 then
              _str10413#set_provider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t10414)
          | _ -> iprot#skip _t10414);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10413

class setIdentityCredential_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "setIdentityCredential_result.e") | Some _x10416 -> _x10416
  method set_e _x10416 = _e <- Some _x10416
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setIdentityCredential_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setIdentityCredential_result (iprot : Protocol.t) =
  let _str10419 = new setIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10420,_id10421) = iprot#readFieldBegin in
        if _t10420 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10421 with 
          | 1 -> (if _t10420 = Protocol.T_STRUCT then
              _str10419#set_e (read_talkException iprot)
            else
              iprot#skip _t10420)
          | _ -> iprot#skip _t10420);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10419

class setNotificationsEnabled_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "setNotificationsEnabled_args.reqSeq") | Some _x10422 -> _x10422
  method set_reqSeq _x10422 = _reqSeq <- Some _x10422
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _type : MIDType.t option = None
  method get_type = _type
  method grab_type = match _type with None->raise (Field_empty "setNotificationsEnabled_args.type") | Some _x10423 -> _x10423
  method set_type _x10423 = _type <- Some _x10423
  method unset_type = _type <- None
  method reset_type = _type <- None

  val mutable _target : string option = None
  method get_target = _target
  method grab_target = match _target with None->raise (Field_empty "setNotificationsEnabled_args.target") | Some _x10424 -> _x10424
  method set_target _x10424 = _target <- Some _x10424
  method unset_target = _target <- None
  method reset_target = _target <- None

  val mutable _enablement : bool option = None
  method get_enablement = _enablement
  method grab_enablement = match _enablement with None->raise (Field_empty "setNotificationsEnabled_args.enablement") | Some _x10425 -> _x10425
  method set_enablement _x10425 = _enablement <- Some _x10425
  method unset_enablement = _enablement <- None
  method reset_enablement = _enablement <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setNotificationsEnabled_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _type with None -> () | Some _v -> 
      oprot#writeFieldBegin("type",Protocol.T_I32,2);
      oprot#writeI32(MIDType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _target with None -> () | Some _v -> 
      oprot#writeFieldBegin("target",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _enablement with None -> () | Some _v -> 
      oprot#writeFieldBegin("enablement",Protocol.T_BOOL,4);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setNotificationsEnabled_args (iprot : Protocol.t) =
  let _str10428 = new setNotificationsEnabled_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10429,_id10430) = iprot#readFieldBegin in
        if _t10429 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10430 with 
          | 1 -> (if _t10429 = Protocol.T_I32 then
              _str10428#set_reqSeq iprot#readI32
            else
              iprot#skip _t10429)
          | 2 -> (if _t10429 = Protocol.T_I32 then
              _str10428#set_type (MIDType.of_i iprot#readI32)
            else
              iprot#skip _t10429)
          | 3 -> (if _t10429 = Protocol.T_STRING then
              _str10428#set_target iprot#readString
            else
              iprot#skip _t10429)
          | 4 -> (if _t10429 = Protocol.T_BOOL then
              _str10428#set_enablement iprot#readBool
            else
              iprot#skip _t10429)
          | _ -> iprot#skip _t10429);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10428

class setNotificationsEnabled_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "setNotificationsEnabled_result.e") | Some _x10431 -> _x10431
  method set_e _x10431 = _e <- Some _x10431
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setNotificationsEnabled_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setNotificationsEnabled_result (iprot : Protocol.t) =
  let _str10434 = new setNotificationsEnabled_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10435,_id10436) = iprot#readFieldBegin in
        if _t10435 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10436 with 
          | 1 -> (if _t10435 = Protocol.T_STRUCT then
              _str10434#set_e (read_talkException iprot)
            else
              iprot#skip _t10435)
          | _ -> iprot#skip _t10435);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10434

class startUpdateVerification_args =
object (self)
  val mutable _region : string option = None
  method get_region = _region
  method grab_region = match _region with None->raise (Field_empty "startUpdateVerification_args.region") | Some _x10437 -> _x10437
  method set_region _x10437 = _region <- Some _x10437
  method unset_region = _region <- None
  method reset_region = _region <- None

  val mutable _carrier : CarrierCode.t option = None
  method get_carrier = _carrier
  method grab_carrier = match _carrier with None->raise (Field_empty "startUpdateVerification_args.carrier") | Some _x10438 -> _x10438
  method set_carrier _x10438 = _carrier <- Some _x10438
  method unset_carrier = _carrier <- None
  method reset_carrier = _carrier <- None

  val mutable _phone : string option = None
  method get_phone = _phone
  method grab_phone = match _phone with None->raise (Field_empty "startUpdateVerification_args.phone") | Some _x10439 -> _x10439
  method set_phone _x10439 = _phone <- Some _x10439
  method unset_phone = _phone <- None
  method reset_phone = _phone <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "startUpdateVerification_args.udidHash") | Some _x10440 -> _x10440
  method set_udidHash _x10440 = _udidHash <- Some _x10440
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "startUpdateVerification_args.deviceInfo") | Some _x10441 -> _x10441
  method set_deviceInfo _x10441 = _deviceInfo <- Some _x10441
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  val mutable _networkCode : string option = None
  method get_networkCode = _networkCode
  method grab_networkCode = match _networkCode with None->raise (Field_empty "startUpdateVerification_args.networkCode") | Some _x10442 -> _x10442
  method set_networkCode _x10442 = _networkCode <- Some _x10442
  method unset_networkCode = _networkCode <- None
  method reset_networkCode = _networkCode <- None

  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "startUpdateVerification_args.locale") | Some _x10443 -> _x10443
  method set_locale _x10443 = _locale <- Some _x10443
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  method copy =
      let _new = Oo.copy self in
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "startUpdateVerification_args";
    (match _region with None -> () | Some _v -> 
      oprot#writeFieldBegin("region",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _carrier with None -> () | Some _v -> 
      oprot#writeFieldBegin("carrier",Protocol.T_I32,3);
      oprot#writeI32(CarrierCode.to_i _v);
      oprot#writeFieldEnd
    );
    (match _phone with None -> () | Some _v -> 
      oprot#writeFieldBegin("phone",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,6);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _networkCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("networkCode",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,8);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_startUpdateVerification_args (iprot : Protocol.t) =
  let _str10446 = new startUpdateVerification_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10447,_id10448) = iprot#readFieldBegin in
        if _t10447 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10448 with 
          | 2 -> (if _t10447 = Protocol.T_STRING then
              _str10446#set_region iprot#readString
            else
              iprot#skip _t10447)
          | 3 -> (if _t10447 = Protocol.T_I32 then
              _str10446#set_carrier (CarrierCode.of_i iprot#readI32)
            else
              iprot#skip _t10447)
          | 4 -> (if _t10447 = Protocol.T_STRING then
              _str10446#set_phone iprot#readString
            else
              iprot#skip _t10447)
          | 5 -> (if _t10447 = Protocol.T_STRING then
              _str10446#set_udidHash iprot#readString
            else
              iprot#skip _t10447)
          | 6 -> (if _t10447 = Protocol.T_STRUCT then
              _str10446#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t10447)
          | 7 -> (if _t10447 = Protocol.T_STRING then
              _str10446#set_networkCode iprot#readString
            else
              iprot#skip _t10447)
          | 8 -> (if _t10447 = Protocol.T_STRING then
              _str10446#set_locale iprot#readString
            else
              iprot#skip _t10447)
          | _ -> iprot#skip _t10447);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10446

class startUpdateVerification_result =
object (self)
  val mutable _success : verificationSessionData option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "startUpdateVerification_result.success") | Some _x10449 -> _x10449
  method set_success _x10449 = _success <- Some _x10449
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "startUpdateVerification_result.e") | Some _x10450 -> _x10450
  method set_e _x10450 = _e <- Some _x10450
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "startUpdateVerification_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_startUpdateVerification_result (iprot : Protocol.t) =
  let _str10453 = new startUpdateVerification_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10454,_id10455) = iprot#readFieldBegin in
        if _t10454 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10455 with 
          | 0 -> (if _t10454 = Protocol.T_STRUCT then
              _str10453#set_success (read_verificationSessionData iprot)
            else
              iprot#skip _t10454)
          | 1 -> (if _t10454 = Protocol.T_STRUCT then
              _str10453#set_e (read_talkException iprot)
            else
              iprot#skip _t10454)
          | _ -> iprot#skip _t10454);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10453

class startVerification_args =
object (self)
  val mutable _region : string option = None
  method get_region = _region
  method grab_region = match _region with None->raise (Field_empty "startVerification_args.region") | Some _x10456 -> _x10456
  method set_region _x10456 = _region <- Some _x10456
  method unset_region = _region <- None
  method reset_region = _region <- None

  val mutable _carrier : CarrierCode.t option = None
  method get_carrier = _carrier
  method grab_carrier = match _carrier with None->raise (Field_empty "startVerification_args.carrier") | Some _x10457 -> _x10457
  method set_carrier _x10457 = _carrier <- Some _x10457
  method unset_carrier = _carrier <- None
  method reset_carrier = _carrier <- None

  val mutable _phone : string option = None
  method get_phone = _phone
  method grab_phone = match _phone with None->raise (Field_empty "startVerification_args.phone") | Some _x10458 -> _x10458
  method set_phone _x10458 = _phone <- Some _x10458
  method unset_phone = _phone <- None
  method reset_phone = _phone <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "startVerification_args.udidHash") | Some _x10459 -> _x10459
  method set_udidHash _x10459 = _udidHash <- Some _x10459
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "startVerification_args.deviceInfo") | Some _x10460 -> _x10460
  method set_deviceInfo _x10460 = _deviceInfo <- Some _x10460
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  val mutable _networkCode : string option = None
  method get_networkCode = _networkCode
  method grab_networkCode = match _networkCode with None->raise (Field_empty "startVerification_args.networkCode") | Some _x10461 -> _x10461
  method set_networkCode _x10461 = _networkCode <- Some _x10461
  method unset_networkCode = _networkCode <- None
  method reset_networkCode = _networkCode <- None

  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "startVerification_args.mid") | Some _x10462 -> _x10462
  method set_mid _x10462 = _mid <- Some _x10462
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "startVerification_args.locale") | Some _x10463 -> _x10463
  method set_locale _x10463 = _locale <- Some _x10463
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  val mutable _simInfo : sIMInfo option = None
  method get_simInfo = _simInfo
  method grab_simInfo = match _simInfo with None->raise (Field_empty "startVerification_args.simInfo") | Some _x10464 -> _x10464
  method set_simInfo _x10464 = _simInfo <- Some _x10464
  method unset_simInfo = _simInfo <- None
  method reset_simInfo = _simInfo <- None

  val mutable _oldUdidHash : string option = None
  method get_oldUdidHash = _oldUdidHash
  method grab_oldUdidHash = match _oldUdidHash with None->raise (Field_empty "startVerification_args.oldUdidHash") | Some _x10465 -> _x10465
  method set_oldUdidHash _x10465 = _oldUdidHash <- Some _x10465
  method unset_oldUdidHash = _oldUdidHash <- None
  method reset_oldUdidHash = _oldUdidHash <- None

  method copy =
      let _new = Oo.copy self in
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
      if _simInfo <> None then
        _new#set_simInfo self#grab_simInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "startVerification_args";
    (match _region with None -> () | Some _v -> 
      oprot#writeFieldBegin("region",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _carrier with None -> () | Some _v -> 
      oprot#writeFieldBegin("carrier",Protocol.T_I32,3);
      oprot#writeI32(CarrierCode.to_i _v);
      oprot#writeFieldEnd
    );
    (match _phone with None -> () | Some _v -> 
      oprot#writeFieldBegin("phone",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,6);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _networkCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("networkCode",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,8);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,9);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _simInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("simInfo",Protocol.T_STRUCT,10);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _oldUdidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("oldUdidHash",Protocol.T_STRING,11);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_startVerification_args (iprot : Protocol.t) =
  let _str10468 = new startVerification_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10469,_id10470) = iprot#readFieldBegin in
        if _t10469 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10470 with 
          | 2 -> (if _t10469 = Protocol.T_STRING then
              _str10468#set_region iprot#readString
            else
              iprot#skip _t10469)
          | 3 -> (if _t10469 = Protocol.T_I32 then
              _str10468#set_carrier (CarrierCode.of_i iprot#readI32)
            else
              iprot#skip _t10469)
          | 4 -> (if _t10469 = Protocol.T_STRING then
              _str10468#set_phone iprot#readString
            else
              iprot#skip _t10469)
          | 5 -> (if _t10469 = Protocol.T_STRING then
              _str10468#set_udidHash iprot#readString
            else
              iprot#skip _t10469)
          | 6 -> (if _t10469 = Protocol.T_STRUCT then
              _str10468#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t10469)
          | 7 -> (if _t10469 = Protocol.T_STRING then
              _str10468#set_networkCode iprot#readString
            else
              iprot#skip _t10469)
          | 8 -> (if _t10469 = Protocol.T_STRING then
              _str10468#set_mid iprot#readString
            else
              iprot#skip _t10469)
          | 9 -> (if _t10469 = Protocol.T_STRING then
              _str10468#set_locale iprot#readString
            else
              iprot#skip _t10469)
          | 10 -> (if _t10469 = Protocol.T_STRUCT then
              _str10468#set_simInfo (read_sIMInfo iprot)
            else
              iprot#skip _t10469)
          | 11 -> (if _t10469 = Protocol.T_STRING then
              _str10468#set_oldUdidHash iprot#readString
            else
              iprot#skip _t10469)
          | _ -> iprot#skip _t10469);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10468

class startVerification_result =
object (self)
  val mutable _success : verificationSessionData option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "startVerification_result.success") | Some _x10471 -> _x10471
  method set_success _x10471 = _success <- Some _x10471
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "startVerification_result.e") | Some _x10472 -> _x10472
  method set_e _x10472 = _e <- Some _x10472
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "startVerification_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_startVerification_result (iprot : Protocol.t) =
  let _str10475 = new startVerification_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10476,_id10477) = iprot#readFieldBegin in
        if _t10476 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10477 with 
          | 0 -> (if _t10476 = Protocol.T_STRUCT then
              _str10475#set_success (read_verificationSessionData iprot)
            else
              iprot#skip _t10476)
          | 1 -> (if _t10476 = Protocol.T_STRUCT then
              _str10475#set_e (read_talkException iprot)
            else
              iprot#skip _t10476)
          | _ -> iprot#skip _t10476);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10475

class updateGroupPreferenceAttribute_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateGroupPreferenceAttribute_args.reqSeq") | Some _x10478 -> _x10478
  method set_reqSeq _x10478 = _reqSeq <- Some _x10478
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _groupMid : string option = None
  method get_groupMid = _groupMid
  method grab_groupMid = match _groupMid with None->raise (Field_empty "updateGroupPreferenceAttribute_args.groupMid") | Some _x10479 -> _x10479
  method set_groupMid _x10479 = _groupMid <- Some _x10479
  method unset_groupMid = _groupMid <- None
  method reset_groupMid = _groupMid <- None

  val mutable _updatedAttrs : (GroupPreferenceAttribute.t,string) Hashtbl.t option = None
  method get_updatedAttrs = _updatedAttrs
  method grab_updatedAttrs = match _updatedAttrs with None->raise (Field_empty "updateGroupPreferenceAttribute_args.updatedAttrs") | Some _x10480 -> _x10480
  method set_updatedAttrs _x10480 = _updatedAttrs <- Some _x10480
  method unset_updatedAttrs = _updatedAttrs <- None
  method reset_updatedAttrs = _updatedAttrs <- None

  method copy =
      let _new = Oo.copy self in
      if _updatedAttrs <> None then
        _new#set_updatedAttrs (Hashtbl.copy self#grab_updatedAttrs);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateGroupPreferenceAttribute_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _groupMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _updatedAttrs with None -> () | Some _v -> 
      oprot#writeFieldBegin("updatedAttrs",Protocol.T_MAP,3);
      oprot#writeMapBegin(Protocol.T_I32,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter10483 -> fun _viter10484 -> 
        oprot#writeI32(GroupPreferenceAttribute.to_i _kiter10483);
        oprot#writeString(_viter10484);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateGroupPreferenceAttribute_args (iprot : Protocol.t) =
  let _str10485 = new updateGroupPreferenceAttribute_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10486,_id10487) = iprot#readFieldBegin in
        if _t10486 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10487 with 
          | 1 -> (if _t10486 = Protocol.T_I32 then
              _str10485#set_reqSeq iprot#readI32
            else
              iprot#skip _t10486)
          | 2 -> (if _t10486 = Protocol.T_STRING then
              _str10485#set_groupMid iprot#readString
            else
              iprot#skip _t10486)
          | 3 -> (if _t10486 = Protocol.T_MAP then
              _str10485#set_updatedAttrs 
                (let (_ktype10489,_vtype10490,_size10488) = iprot#readMapBegin in
                let _con10492 = Hashtbl.create _size10488 in
                  for i = 1 to _size10488 do
                    let _k = (GroupPreferenceAttribute.of_i iprot#readI32) in
                    let _v = iprot#readString in
                      Hashtbl.add _con10492 _k _v
                  done; iprot#readMapEnd; _con10492)
            else
              iprot#skip _t10486)
          | _ -> iprot#skip _t10486);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10485

class updateGroupPreferenceAttribute_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateGroupPreferenceAttribute_result.e") | Some _x10493 -> _x10493
  method set_e _x10493 = _e <- Some _x10493
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateGroupPreferenceAttribute_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateGroupPreferenceAttribute_result (iprot : Protocol.t) =
  let _str10496 = new updateGroupPreferenceAttribute_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10497,_id10498) = iprot#readFieldBegin in
        if _t10497 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10498 with 
          | 1 -> (if _t10497 = Protocol.T_STRUCT then
              _str10496#set_e (read_talkException iprot)
            else
              iprot#skip _t10497)
          | _ -> iprot#skip _t10497);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10496

class createRoomV2_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "createRoomV2_args.reqSeq") | Some _x10499 -> _x10499
  method set_reqSeq _x10499 = _reqSeq <- Some _x10499
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _contactIds : string list option = None
  method get_contactIds = _contactIds
  method grab_contactIds = match _contactIds with None->raise (Field_empty "createRoomV2_args.contactIds") | Some _x10500 -> _x10500
  method set_contactIds _x10500 = _contactIds <- Some _x10500
  method unset_contactIds = _contactIds <- None
  method reset_contactIds = _contactIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createRoomV2_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _contactIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactIds",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter10503 ->         oprot#writeString(_iter10503);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createRoomV2_args (iprot : Protocol.t) =
  let _str10504 = new createRoomV2_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10505,_id10506) = iprot#readFieldBegin in
        if _t10505 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10506 with 
          | 1 -> (if _t10505 = Protocol.T_I32 then
              _str10504#set_reqSeq iprot#readI32
            else
              iprot#skip _t10505)
          | 2 -> (if _t10505 = Protocol.T_LIST then
              _str10504#set_contactIds 
                (let (_etype10510,_size10507) = iprot#readListBegin in
                  let _con10511 = (Array.to_list (Array.init _size10507 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con10511)
            else
              iprot#skip _t10505)
          | _ -> iprot#skip _t10505);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10504

class createRoomV2_result =
object (self)
  val mutable _success : room option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createRoomV2_result.success") | Some _x10512 -> _x10512
  method set_success _x10512 = _success <- Some _x10512
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createRoomV2_result.e") | Some _x10513 -> _x10513
  method set_e _x10513 = _e <- Some _x10513
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createRoomV2_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createRoomV2_result (iprot : Protocol.t) =
  let _str10516 = new createRoomV2_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10517,_id10518) = iprot#readFieldBegin in
        if _t10517 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10518 with 
          | 0 -> (if _t10517 = Protocol.T_STRUCT then
              _str10516#set_success (read_room iprot)
            else
              iprot#skip _t10517)
          | 1 -> (if _t10517 = Protocol.T_STRUCT then
              _str10516#set_e (read_talkException iprot)
            else
              iprot#skip _t10517)
          | _ -> iprot#skip _t10517);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10516

class storeUpdateProfileAttribute_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "storeUpdateProfileAttribute_args.seq") | Some _x10519 -> _x10519
  method set_seq _x10519 = _seq <- Some _x10519
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _profileAttribute : ProfileAttribute.t option = None
  method get_profileAttribute = _profileAttribute
  method grab_profileAttribute = match _profileAttribute with None->raise (Field_empty "storeUpdateProfileAttribute_args.profileAttribute") | Some _x10520 -> _x10520
  method set_profileAttribute _x10520 = _profileAttribute <- Some _x10520
  method unset_profileAttribute = _profileAttribute <- None
  method reset_profileAttribute = _profileAttribute <- None

  val mutable _value : string option = None
  method get_value = _value
  method grab_value = match _value with None->raise (Field_empty "storeUpdateProfileAttribute_args.value") | Some _x10521 -> _x10521
  method set_value _x10521 = _value <- Some _x10521
  method unset_value = _value <- None
  method reset_value = _value <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "storeUpdateProfileAttribute_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _profileAttribute with None -> () | Some _v -> 
      oprot#writeFieldBegin("profileAttribute",Protocol.T_I32,2);
      oprot#writeI32(ProfileAttribute.to_i _v);
      oprot#writeFieldEnd
    );
    (match _value with None -> () | Some _v -> 
      oprot#writeFieldBegin("value",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_storeUpdateProfileAttribute_args (iprot : Protocol.t) =
  let _str10524 = new storeUpdateProfileAttribute_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10525,_id10526) = iprot#readFieldBegin in
        if _t10525 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10526 with 
          | 1 -> (if _t10525 = Protocol.T_I32 then
              _str10524#set_seq iprot#readI32
            else
              iprot#skip _t10525)
          | 2 -> (if _t10525 = Protocol.T_I32 then
              _str10524#set_profileAttribute (ProfileAttribute.of_i iprot#readI32)
            else
              iprot#skip _t10525)
          | 3 -> (if _t10525 = Protocol.T_STRING then
              _str10524#set_value iprot#readString
            else
              iprot#skip _t10525)
          | _ -> iprot#skip _t10525);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10524

class storeUpdateProfileAttribute_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "storeUpdateProfileAttribute_result.e") | Some _x10527 -> _x10527
  method set_e _x10527 = _e <- Some _x10527
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "storeUpdateProfileAttribute_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_storeUpdateProfileAttribute_result (iprot : Protocol.t) =
  let _str10530 = new storeUpdateProfileAttribute_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10531,_id10532) = iprot#readFieldBegin in
        if _t10531 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10532 with 
          | 1 -> (if _t10531 = Protocol.T_STRUCT then
              _str10530#set_e (read_talkException iprot)
            else
              iprot#skip _t10531)
          | _ -> iprot#skip _t10531);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10530

class syncContactBySnsIds_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "syncContactBySnsIds_args.reqSeq") | Some _x10533 -> _x10533
  method set_reqSeq _x10533 = _reqSeq <- Some _x10533
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _modifications : snsFriendModification list option = None
  method get_modifications = _modifications
  method grab_modifications = match _modifications with None->raise (Field_empty "syncContactBySnsIds_args.modifications") | Some _x10534 -> _x10534
  method set_modifications _x10534 = _modifications <- Some _x10534
  method unset_modifications = _modifications <- None
  method reset_modifications = _modifications <- None

  method copy =
      let _new = Oo.copy self in
      if _modifications <> None then
        _new#set_modifications (List.map (fun x -> x#copy) self#grab_modifications);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "syncContactBySnsIds_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _modifications with None -> () | Some _v -> 
      oprot#writeFieldBegin("modifications",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter10537 ->         _iter10537#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_syncContactBySnsIds_args (iprot : Protocol.t) =
  let _str10538 = new syncContactBySnsIds_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10539,_id10540) = iprot#readFieldBegin in
        if _t10539 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10540 with 
          | 1 -> (if _t10539 = Protocol.T_I32 then
              _str10538#set_reqSeq iprot#readI32
            else
              iprot#skip _t10539)
          | 2 -> (if _t10539 = Protocol.T_LIST then
              _str10538#set_modifications 
                (let (_etype10544,_size10541) = iprot#readListBegin in
                  let _con10545 = (Array.to_list (Array.init _size10541 (fun _ -> (read_snsFriendModification iprot)))) in
                    iprot#readListEnd; _con10545)
            else
              iprot#skip _t10539)
          | _ -> iprot#skip _t10539);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10538

class syncContactBySnsIds_result =
object (self)
  val mutable _success : snsFriendContactRegistration list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "syncContactBySnsIds_result.success") | Some _x10546 -> _x10546
  method set_success _x10546 = _success <- Some _x10546
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "syncContactBySnsIds_result.e") | Some _x10547 -> _x10547
  method set_e _x10547 = _e <- Some _x10547
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "syncContactBySnsIds_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter10550 ->         _iter10550#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_syncContactBySnsIds_result (iprot : Protocol.t) =
  let _str10551 = new syncContactBySnsIds_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10552,_id10553) = iprot#readFieldBegin in
        if _t10552 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10553 with 
          | 0 -> (if _t10552 = Protocol.T_LIST then
              _str10551#set_success 
                (let (_etype10557,_size10554) = iprot#readListBegin in
                  let _con10558 = (Array.to_list (Array.init _size10554 (fun _ -> (read_snsFriendContactRegistration iprot)))) in
                    iprot#readListEnd; _con10558)
            else
              iprot#skip _t10552)
          | 1 -> (if _t10552 = Protocol.T_STRUCT then
              _str10551#set_e (read_talkException iprot)
            else
              iprot#skip _t10552)
          | _ -> iprot#skip _t10552);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10551

class syncContacts_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "syncContacts_args.reqSeq") | Some _x10559 -> _x10559
  method set_reqSeq _x10559 = _reqSeq <- Some _x10559
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _localContacts : contactModification list option = None
  method get_localContacts = _localContacts
  method grab_localContacts = match _localContacts with None->raise (Field_empty "syncContacts_args.localContacts") | Some _x10560 -> _x10560
  method set_localContacts _x10560 = _localContacts <- Some _x10560
  method unset_localContacts = _localContacts <- None
  method reset_localContacts = _localContacts <- None

  method copy =
      let _new = Oo.copy self in
      if _localContacts <> None then
        _new#set_localContacts (List.map (fun x -> x#copy) self#grab_localContacts);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "syncContacts_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _localContacts with None -> () | Some _v -> 
      oprot#writeFieldBegin("localContacts",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter10563 ->         _iter10563#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_syncContacts_args (iprot : Protocol.t) =
  let _str10564 = new syncContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10565,_id10566) = iprot#readFieldBegin in
        if _t10565 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10566 with 
          | 1 -> (if _t10565 = Protocol.T_I32 then
              _str10564#set_reqSeq iprot#readI32
            else
              iprot#skip _t10565)
          | 2 -> (if _t10565 = Protocol.T_LIST then
              _str10564#set_localContacts 
                (let (_etype10570,_size10567) = iprot#readListBegin in
                  let _con10571 = (Array.to_list (Array.init _size10567 (fun _ -> (read_contactModification iprot)))) in
                    iprot#readListEnd; _con10571)
            else
              iprot#skip _t10565)
          | _ -> iprot#skip _t10565);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10564

class syncContacts_result =
object (self)
  val mutable _success : (string,contactRegistration) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "syncContacts_result.success") | Some _x10572 -> _x10572
  method set_success _x10572 = _success <- Some _x10572
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "syncContacts_result.e") | Some _x10573 -> _x10573
  method set_e _x10573 = _e <- Some _x10573
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k v#copy) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "syncContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter10576 -> fun _viter10577 -> 
        oprot#writeString(_kiter10576);
        _viter10577#write(oprot);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_syncContacts_result (iprot : Protocol.t) =
  let _str10578 = new syncContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10579,_id10580) = iprot#readFieldBegin in
        if _t10579 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10580 with 
          | 0 -> (if _t10579 = Protocol.T_MAP then
              _str10578#set_success 
                (let (_ktype10582,_vtype10583,_size10581) = iprot#readMapBegin in
                let _con10585 = Hashtbl.create _size10581 in
                  for i = 1 to _size10581 do
                    let _k = iprot#readString in
                    let _v = (read_contactRegistration iprot) in
                      Hashtbl.add _con10585 _k _v
                  done; iprot#readMapEnd; _con10585)
            else
              iprot#skip _t10579)
          | 1 -> (if _t10579 = Protocol.T_STRUCT then
              _str10578#set_e (read_talkException iprot)
            else
              iprot#skip _t10579)
          | _ -> iprot#skip _t10579);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10578

class trySendMessage_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "trySendMessage_args.seq") | Some _x10586 -> _x10586
  method set_seq _x10586 = _seq <- Some _x10586
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _message : message option = None
  method get_message = _message
  method grab_message = match _message with None->raise (Field_empty "trySendMessage_args.message") | Some _x10587 -> _x10587
  method set_message _x10587 = _message <- Some _x10587
  method unset_message = _message <- None
  method reset_message = _message <- None

  method copy =
      let _new = Oo.copy self in
      if _message <> None then
        _new#set_message self#grab_message#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "trySendMessage_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _message with None -> () | Some _v -> 
      oprot#writeFieldBegin("message",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_trySendMessage_args (iprot : Protocol.t) =
  let _str10590 = new trySendMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10591,_id10592) = iprot#readFieldBegin in
        if _t10591 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10592 with 
          | 1 -> (if _t10591 = Protocol.T_I32 then
              _str10590#set_seq iprot#readI32
            else
              iprot#skip _t10591)
          | 2 -> (if _t10591 = Protocol.T_STRUCT then
              _str10590#set_message (read_message iprot)
            else
              iprot#skip _t10591)
          | _ -> iprot#skip _t10591);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10590

class trySendMessage_result =
object (self)
  val mutable _success : message option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "trySendMessage_result.success") | Some _x10593 -> _x10593
  method set_success _x10593 = _success <- Some _x10593
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "trySendMessage_result.e") | Some _x10594 -> _x10594
  method set_e _x10594 = _e <- Some _x10594
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "trySendMessage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_trySendMessage_result (iprot : Protocol.t) =
  let _str10597 = new trySendMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10598,_id10599) = iprot#readFieldBegin in
        if _t10598 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10599 with 
          | 0 -> (if _t10598 = Protocol.T_STRUCT then
              _str10597#set_success (read_message iprot)
            else
              iprot#skip _t10598)
          | 1 -> (if _t10598 = Protocol.T_STRUCT then
              _str10597#set_e (read_talkException iprot)
            else
              iprot#skip _t10598)
          | _ -> iprot#skip _t10598);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10597

class getNextMessagesV2_args =
object (self)
  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "getNextMessagesV2_args.messageBoxId") | Some _x10600 -> _x10600
  method set_messageBoxId _x10600 = _messageBoxId <- Some _x10600
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  val mutable _startMessageId : messageBoxV2MessageId option = None
  method get_startMessageId = _startMessageId
  method grab_startMessageId = match _startMessageId with None->raise (Field_empty "getNextMessagesV2_args.startMessageId") | Some _x10601 -> _x10601
  method set_startMessageId _x10601 = _startMessageId <- Some _x10601
  method unset_startMessageId = _startMessageId <- None
  method reset_startMessageId = _startMessageId <- None

  val mutable _messagesCount : Int32.t option = None
  method get_messagesCount = _messagesCount
  method grab_messagesCount = match _messagesCount with None->raise (Field_empty "getNextMessagesV2_args.messagesCount") | Some _x10602 -> _x10602
  method set_messagesCount _x10602 = _messagesCount <- Some _x10602
  method unset_messagesCount = _messagesCount <- None
  method reset_messagesCount = _messagesCount <- None

  method copy =
      let _new = Oo.copy self in
      if _startMessageId <> None then
        _new#set_startMessageId self#grab_startMessageId#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNextMessagesV2_args";
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _startMessageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("startMessageId",Protocol.T_STRUCT,3);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _messagesCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("messagesCount",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNextMessagesV2_args (iprot : Protocol.t) =
  let _str10605 = new getNextMessagesV2_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10606,_id10607) = iprot#readFieldBegin in
        if _t10606 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10607 with 
          | 2 -> (if _t10606 = Protocol.T_STRING then
              _str10605#set_messageBoxId iprot#readString
            else
              iprot#skip _t10606)
          | 3 -> (if _t10606 = Protocol.T_STRUCT then
              _str10605#set_startMessageId (read_messageBoxV2MessageId iprot)
            else
              iprot#skip _t10606)
          | 4 -> (if _t10606 = Protocol.T_I32 then
              _str10605#set_messagesCount iprot#readI32
            else
              iprot#skip _t10606)
          | _ -> iprot#skip _t10606);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10605

class getNextMessagesV2_result =
object (self)
  val mutable _success : message list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getNextMessagesV2_result.success") | Some _x10608 -> _x10608
  method set_success _x10608 = _success <- Some _x10608
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getNextMessagesV2_result.e") | Some _x10609 -> _x10609
  method set_e _x10609 = _e <- Some _x10609
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNextMessagesV2_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter10612 ->         _iter10612#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNextMessagesV2_result (iprot : Protocol.t) =
  let _str10613 = new getNextMessagesV2_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10614,_id10615) = iprot#readFieldBegin in
        if _t10614 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10615 with 
          | 0 -> (if _t10614 = Protocol.T_LIST then
              _str10613#set_success 
                (let (_etype10619,_size10616) = iprot#readListBegin in
                  let _con10620 = (Array.to_list (Array.init _size10616 (fun _ -> (read_message iprot)))) in
                    iprot#readListEnd; _con10620)
            else
              iprot#skip _t10614)
          | 1 -> (if _t10614 = Protocol.T_STRUCT then
              _str10613#set_e (read_talkException iprot)
            else
              iprot#skip _t10614)
          | _ -> iprot#skip _t10614);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10613

class getMessageBoxCompactWrapUpV2_args =
object (self)
  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "getMessageBoxCompactWrapUpV2_args.messageBoxId") | Some _x10621 -> _x10621
  method set_messageBoxId _x10621 = _messageBoxId <- Some _x10621
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxCompactWrapUpV2_args";
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxCompactWrapUpV2_args (iprot : Protocol.t) =
  let _str10624 = new getMessageBoxCompactWrapUpV2_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10625,_id10626) = iprot#readFieldBegin in
        if _t10625 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10626 with 
          | 2 -> (if _t10625 = Protocol.T_STRING then
              _str10624#set_messageBoxId iprot#readString
            else
              iprot#skip _t10625)
          | _ -> iprot#skip _t10625);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10624

class getMessageBoxCompactWrapUpV2_result =
object (self)
  val mutable _success : tMessageBoxWrapUp option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessageBoxCompactWrapUpV2_result.success") | Some _x10627 -> _x10627
  method set_success _x10627 = _success <- Some _x10627
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessageBoxCompactWrapUpV2_result.e") | Some _x10628 -> _x10628
  method set_e _x10628 = _e <- Some _x10628
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxCompactWrapUpV2_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxCompactWrapUpV2_result (iprot : Protocol.t) =
  let _str10631 = new getMessageBoxCompactWrapUpV2_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10632,_id10633) = iprot#readFieldBegin in
        if _t10632 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10633 with 
          | 0 -> (if _t10632 = Protocol.T_STRUCT then
              _str10631#set_success (read_tMessageBoxWrapUp iprot)
            else
              iprot#skip _t10632)
          | 1 -> (if _t10632 = Protocol.T_STRUCT then
              _str10631#set_e (read_talkException iprot)
            else
              iprot#skip _t10632)
          | _ -> iprot#skip _t10632);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10631

class getRecentMessagesV2_args =
object (self)
  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "getRecentMessagesV2_args.messageBoxId") | Some _x10634 -> _x10634
  method set_messageBoxId _x10634 = _messageBoxId <- Some _x10634
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  val mutable _messagesCount : Int32.t option = None
  method get_messagesCount = _messagesCount
  method grab_messagesCount = match _messagesCount with None->raise (Field_empty "getRecentMessagesV2_args.messagesCount") | Some _x10635 -> _x10635
  method set_messagesCount _x10635 = _messagesCount <- Some _x10635
  method unset_messagesCount = _messagesCount <- None
  method reset_messagesCount = _messagesCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRecentMessagesV2_args";
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messagesCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("messagesCount",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRecentMessagesV2_args (iprot : Protocol.t) =
  let _str10638 = new getRecentMessagesV2_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10639,_id10640) = iprot#readFieldBegin in
        if _t10639 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10640 with 
          | 2 -> (if _t10639 = Protocol.T_STRING then
              _str10638#set_messageBoxId iprot#readString
            else
              iprot#skip _t10639)
          | 3 -> (if _t10639 = Protocol.T_I32 then
              _str10638#set_messagesCount iprot#readI32
            else
              iprot#skip _t10639)
          | _ -> iprot#skip _t10639);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10638

class getRecentMessagesV2_result =
object (self)
  val mutable _success : message list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getRecentMessagesV2_result.success") | Some _x10641 -> _x10641
  method set_success _x10641 = _success <- Some _x10641
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getRecentMessagesV2_result.e") | Some _x10642 -> _x10642
  method set_e _x10642 = _e <- Some _x10642
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRecentMessagesV2_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter10645 ->         _iter10645#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRecentMessagesV2_result (iprot : Protocol.t) =
  let _str10646 = new getRecentMessagesV2_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10647,_id10648) = iprot#readFieldBegin in
        if _t10647 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10648 with 
          | 0 -> (if _t10647 = Protocol.T_LIST then
              _str10646#set_success 
                (let (_etype10652,_size10649) = iprot#readListBegin in
                  let _con10653 = (Array.to_list (Array.init _size10649 (fun _ -> (read_message iprot)))) in
                    iprot#readListEnd; _con10653)
            else
              iprot#skip _t10647)
          | 1 -> (if _t10647 = Protocol.T_STRUCT then
              _str10646#set_e (read_talkException iprot)
            else
              iprot#skip _t10647)
          | _ -> iprot#skip _t10647);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10646

class validateContactsOnBot_args =
object (self)
  val mutable _contacts : string list option = None
  method get_contacts = _contacts
  method grab_contacts = match _contacts with None->raise (Field_empty "validateContactsOnBot_args.contacts") | Some _x10654 -> _x10654
  method set_contacts _x10654 = _contacts <- Some _x10654
  method unset_contacts = _contacts <- None
  method reset_contacts = _contacts <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "validateContactsOnBot_args";
    (match _contacts with None -> () | Some _v -> 
      oprot#writeFieldBegin("contacts",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter10657 ->         oprot#writeString(_iter10657);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_validateContactsOnBot_args (iprot : Protocol.t) =
  let _str10658 = new validateContactsOnBot_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10659,_id10660) = iprot#readFieldBegin in
        if _t10659 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10660 with 
          | 2 -> (if _t10659 = Protocol.T_LIST then
              _str10658#set_contacts 
                (let (_etype10664,_size10661) = iprot#readListBegin in
                  let _con10665 = (Array.to_list (Array.init _size10661 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con10665)
            else
              iprot#skip _t10659)
          | _ -> iprot#skip _t10659);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10658

class validateContactsOnBot_result =
object (self)
  val mutable _success : (string,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "validateContactsOnBot_result.success") | Some _x10666 -> _x10666
  method set_success _x10666 = _success <- Some _x10666
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "validateContactsOnBot_result.e") | Some _x10667 -> _x10667
  method set_e _x10667 = _e <- Some _x10667
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "validateContactsOnBot_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter10670 -> fun _viter10671 -> 
        oprot#writeString(_kiter10670);
        oprot#writeString(_viter10671);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_validateContactsOnBot_result (iprot : Protocol.t) =
  let _str10672 = new validateContactsOnBot_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10673,_id10674) = iprot#readFieldBegin in
        if _t10673 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10674 with 
          | 0 -> (if _t10673 = Protocol.T_MAP then
              _str10672#set_success 
                (let (_ktype10676,_vtype10677,_size10675) = iprot#readMapBegin in
                let _con10679 = Hashtbl.create _size10675 in
                  for i = 1 to _size10675 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con10679 _k _v
                  done; iprot#readMapEnd; _con10679)
            else
              iprot#skip _t10673)
          | 1 -> (if _t10673 = Protocol.T_STRUCT then
              _str10672#set_e (read_talkException iprot)
            else
              iprot#skip _t10673)
          | _ -> iprot#skip _t10673);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10672

class tryFriendRequest_args =
object (self)
  val mutable _midOrEMid : string option = None
  method get_midOrEMid = _midOrEMid
  method grab_midOrEMid = match _midOrEMid with None->raise (Field_empty "tryFriendRequest_args.midOrEMid") | Some _x10680 -> _x10680
  method set_midOrEMid _x10680 = _midOrEMid <- Some _x10680
  method unset_midOrEMid = _midOrEMid <- None
  method reset_midOrEMid = _midOrEMid <- None

  val mutable _method : FriendRequestMethod.t option = None
  method get_method = _method
  method grab_method = match _method with None->raise (Field_empty "tryFriendRequest_args.method") | Some _x10681 -> _x10681
  method set_method _x10681 = _method <- Some _x10681
  method unset_method = _method <- None
  method reset_method = _method <- None

  val mutable _friendRequestParams : string option = None
  method get_friendRequestParams = _friendRequestParams
  method grab_friendRequestParams = match _friendRequestParams with None->raise (Field_empty "tryFriendRequest_args.friendRequestParams") | Some _x10682 -> _x10682
  method set_friendRequestParams _x10682 = _friendRequestParams <- Some _x10682
  method unset_friendRequestParams = _friendRequestParams <- None
  method reset_friendRequestParams = _friendRequestParams <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "tryFriendRequest_args";
    (match _midOrEMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("midOrEMid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _method with None -> () | Some _v -> 
      oprot#writeFieldBegin("method",Protocol.T_I32,2);
      oprot#writeI32(FriendRequestMethod.to_i _v);
      oprot#writeFieldEnd
    );
    (match _friendRequestParams with None -> () | Some _v -> 
      oprot#writeFieldBegin("friendRequestParams",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_tryFriendRequest_args (iprot : Protocol.t) =
  let _str10685 = new tryFriendRequest_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10686,_id10687) = iprot#readFieldBegin in
        if _t10686 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10687 with 
          | 1 -> (if _t10686 = Protocol.T_STRING then
              _str10685#set_midOrEMid iprot#readString
            else
              iprot#skip _t10686)
          | 2 -> (if _t10686 = Protocol.T_I32 then
              _str10685#set_method (FriendRequestMethod.of_i iprot#readI32)
            else
              iprot#skip _t10686)
          | 3 -> (if _t10686 = Protocol.T_STRING then
              _str10685#set_friendRequestParams iprot#readString
            else
              iprot#skip _t10686)
          | _ -> iprot#skip _t10686);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10685

class tryFriendRequest_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "tryFriendRequest_result.e") | Some _x10688 -> _x10688
  method set_e _x10688 = _e <- Some _x10688
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "tryFriendRequest_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_tryFriendRequest_result (iprot : Protocol.t) =
  let _str10691 = new tryFriendRequest_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10692,_id10693) = iprot#readFieldBegin in
        if _t10692 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10693 with 
          | 1 -> (if _t10692 = Protocol.T_STRUCT then
              _str10691#set_e (read_talkException iprot)
            else
              iprot#skip _t10692)
          | _ -> iprot#skip _t10692);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10691

class unblockContact_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "unblockContact_args.reqSeq") | Some _x10694 -> _x10694
  method set_reqSeq _x10694 = _reqSeq <- Some _x10694
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _id : string option = None
  method get_id = _id
  method grab_id = match _id with None->raise (Field_empty "unblockContact_args.id") | Some _x10695 -> _x10695
  method set_id _x10695 = _id <- Some _x10695
  method unset_id = _id <- None
  method reset_id = _id <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unblockContact_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _id with None -> () | Some _v -> 
      oprot#writeFieldBegin("id",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unblockContact_args (iprot : Protocol.t) =
  let _str10698 = new unblockContact_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10699,_id10700) = iprot#readFieldBegin in
        if _t10699 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10700 with 
          | 1 -> (if _t10699 = Protocol.T_I32 then
              _str10698#set_reqSeq iprot#readI32
            else
              iprot#skip _t10699)
          | 2 -> (if _t10699 = Protocol.T_STRING then
              _str10698#set_id iprot#readString
            else
              iprot#skip _t10699)
          | _ -> iprot#skip _t10699);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10698

class unblockContact_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "unblockContact_result.e") | Some _x10701 -> _x10701
  method set_e _x10701 = _e <- Some _x10701
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unblockContact_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unblockContact_result (iprot : Protocol.t) =
  let _str10704 = new unblockContact_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10705,_id10706) = iprot#readFieldBegin in
        if _t10705 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10706 with 
          | 1 -> (if _t10705 = Protocol.T_STRUCT then
              _str10704#set_e (read_talkException iprot)
            else
              iprot#skip _t10705)
          | _ -> iprot#skip _t10705);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10704

class unblockRecommendation_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "unblockRecommendation_args.reqSeq") | Some _x10707 -> _x10707
  method set_reqSeq _x10707 = _reqSeq <- Some _x10707
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _id : string option = None
  method get_id = _id
  method grab_id = match _id with None->raise (Field_empty "unblockRecommendation_args.id") | Some _x10708 -> _x10708
  method set_id _x10708 = _id <- Some _x10708
  method unset_id = _id <- None
  method reset_id = _id <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unblockRecommendation_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _id with None -> () | Some _v -> 
      oprot#writeFieldBegin("id",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unblockRecommendation_args (iprot : Protocol.t) =
  let _str10711 = new unblockRecommendation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10712,_id10713) = iprot#readFieldBegin in
        if _t10712 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10713 with 
          | 1 -> (if _t10712 = Protocol.T_I32 then
              _str10711#set_reqSeq iprot#readI32
            else
              iprot#skip _t10712)
          | 2 -> (if _t10712 = Protocol.T_STRING then
              _str10711#set_id iprot#readString
            else
              iprot#skip _t10712)
          | _ -> iprot#skip _t10712);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10711

class unblockRecommendation_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "unblockRecommendation_result.e") | Some _x10714 -> _x10714
  method set_e _x10714 = _e <- Some _x10714
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unblockRecommendation_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unblockRecommendation_result (iprot : Protocol.t) =
  let _str10717 = new unblockRecommendation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10718,_id10719) = iprot#readFieldBegin in
        if _t10718 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10719 with 
          | 1 -> (if _t10718 = Protocol.T_STRUCT then
              _str10717#set_e (read_talkException iprot)
            else
              iprot#skip _t10718)
          | _ -> iprot#skip _t10718);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10717

class unregisterUserAndDevice_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unregisterUserAndDevice_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unregisterUserAndDevice_args (iprot : Protocol.t) =
  let _str10722 = new unregisterUserAndDevice_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10723,_id10724) = iprot#readFieldBegin in
        if _t10723 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10724 with 
          | _ -> iprot#skip _t10723);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10722

class unregisterUserAndDevice_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "unregisterUserAndDevice_result.success") | Some _x10725 -> _x10725
  method set_success _x10725 = _success <- Some _x10725
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "unregisterUserAndDevice_result.e") | Some _x10726 -> _x10726
  method set_e _x10726 = _e <- Some _x10726
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unregisterUserAndDevice_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unregisterUserAndDevice_result (iprot : Protocol.t) =
  let _str10729 = new unregisterUserAndDevice_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10730,_id10731) = iprot#readFieldBegin in
        if _t10730 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10731 with 
          | 0 -> (if _t10730 = Protocol.T_STRING then
              _str10729#set_success iprot#readString
            else
              iprot#skip _t10730)
          | 1 -> (if _t10730 = Protocol.T_STRUCT then
              _str10729#set_e (read_talkException iprot)
            else
              iprot#skip _t10730)
          | _ -> iprot#skip _t10730);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10729

class updateApnsDeviceToken_args =
object (self)
  val mutable _apnsDeviceToken : string option = None
  method get_apnsDeviceToken = _apnsDeviceToken
  method grab_apnsDeviceToken = match _apnsDeviceToken with None->raise (Field_empty "updateApnsDeviceToken_args.apnsDeviceToken") | Some _x10732 -> _x10732
  method set_apnsDeviceToken _x10732 = _apnsDeviceToken <- Some _x10732
  method unset_apnsDeviceToken = _apnsDeviceToken <- None
  method reset_apnsDeviceToken = _apnsDeviceToken <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateApnsDeviceToken_args";
    (match _apnsDeviceToken with None -> () | Some _v -> 
      oprot#writeFieldBegin("apnsDeviceToken",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateApnsDeviceToken_args (iprot : Protocol.t) =
  let _str10735 = new updateApnsDeviceToken_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10736,_id10737) = iprot#readFieldBegin in
        if _t10736 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10737 with 
          | 2 -> (if _t10736 = Protocol.T_STRING then
              _str10735#set_apnsDeviceToken iprot#readString
            else
              iprot#skip _t10736)
          | _ -> iprot#skip _t10736);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10735

class updateApnsDeviceToken_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateApnsDeviceToken_result.e") | Some _x10738 -> _x10738
  method set_e _x10738 = _e <- Some _x10738
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateApnsDeviceToken_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateApnsDeviceToken_result (iprot : Protocol.t) =
  let _str10741 = new updateApnsDeviceToken_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10742,_id10743) = iprot#readFieldBegin in
        if _t10742 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10743 with 
          | 1 -> (if _t10742 = Protocol.T_STRUCT then
              _str10741#set_e (read_talkException iprot)
            else
              iprot#skip _t10742)
          | _ -> iprot#skip _t10742);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10741

class updateBuddySetting_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "updateBuddySetting_args.key") | Some _x10744 -> _x10744
  method set_key _x10744 = _key <- Some _x10744
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _value : string option = None
  method get_value = _value
  method grab_value = match _value with None->raise (Field_empty "updateBuddySetting_args.value") | Some _x10745 -> _x10745
  method set_value _x10745 = _value <- Some _x10745
  method unset_value = _value <- None
  method reset_value = _value <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddySetting_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _value with None -> () | Some _v -> 
      oprot#writeFieldBegin("value",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddySetting_args (iprot : Protocol.t) =
  let _str10748 = new updateBuddySetting_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10749,_id10750) = iprot#readFieldBegin in
        if _t10749 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10750 with 
          | 2 -> (if _t10749 = Protocol.T_STRING then
              _str10748#set_key iprot#readString
            else
              iprot#skip _t10749)
          | 3 -> (if _t10749 = Protocol.T_STRING then
              _str10748#set_value iprot#readString
            else
              iprot#skip _t10749)
          | _ -> iprot#skip _t10749);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10748

class updateBuddySetting_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateBuddySetting_result.e") | Some _x10751 -> _x10751
  method set_e _x10751 = _e <- Some _x10751
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddySetting_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddySetting_result (iprot : Protocol.t) =
  let _str10754 = new updateBuddySetting_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10755,_id10756) = iprot#readFieldBegin in
        if _t10755 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10756 with 
          | 1 -> (if _t10755 = Protocol.T_STRUCT then
              _str10754#set_e (read_talkException iprot)
            else
              iprot#skip _t10755)
          | _ -> iprot#skip _t10755);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10754

class updateC2DMRegistrationId_args =
object (self)
  val mutable _registrationId : string option = None
  method get_registrationId = _registrationId
  method grab_registrationId = match _registrationId with None->raise (Field_empty "updateC2DMRegistrationId_args.registrationId") | Some _x10757 -> _x10757
  method set_registrationId _x10757 = _registrationId <- Some _x10757
  method unset_registrationId = _registrationId <- None
  method reset_registrationId = _registrationId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateC2DMRegistrationId_args";
    (match _registrationId with None -> () | Some _v -> 
      oprot#writeFieldBegin("registrationId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateC2DMRegistrationId_args (iprot : Protocol.t) =
  let _str10760 = new updateC2DMRegistrationId_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10761,_id10762) = iprot#readFieldBegin in
        if _t10761 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10762 with 
          | 2 -> (if _t10761 = Protocol.T_STRING then
              _str10760#set_registrationId iprot#readString
            else
              iprot#skip _t10761)
          | _ -> iprot#skip _t10761);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10760

class updateC2DMRegistrationId_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateC2DMRegistrationId_result.e") | Some _x10763 -> _x10763
  method set_e _x10763 = _e <- Some _x10763
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateC2DMRegistrationId_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateC2DMRegistrationId_result (iprot : Protocol.t) =
  let _str10766 = new updateC2DMRegistrationId_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10767,_id10768) = iprot#readFieldBegin in
        if _t10767 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10768 with 
          | 1 -> (if _t10767 = Protocol.T_STRUCT then
              _str10766#set_e (read_talkException iprot)
            else
              iprot#skip _t10767)
          | _ -> iprot#skip _t10767);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10766

class updateContactSetting_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateContactSetting_args.reqSeq") | Some _x10769 -> _x10769
  method set_reqSeq _x10769 = _reqSeq <- Some _x10769
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "updateContactSetting_args.mid") | Some _x10770 -> _x10770
  method set_mid _x10770 = _mid <- Some _x10770
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  val mutable _flag : ContactSetting.t option = None
  method get_flag = _flag
  method grab_flag = match _flag with None->raise (Field_empty "updateContactSetting_args.flag") | Some _x10771 -> _x10771
  method set_flag _x10771 = _flag <- Some _x10771
  method unset_flag = _flag <- None
  method reset_flag = _flag <- None

  val mutable _value : string option = None
  method get_value = _value
  method grab_value = match _value with None->raise (Field_empty "updateContactSetting_args.value") | Some _x10772 -> _x10772
  method set_value _x10772 = _value <- Some _x10772
  method unset_value = _value <- None
  method reset_value = _value <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateContactSetting_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _flag with None -> () | Some _v -> 
      oprot#writeFieldBegin("flag",Protocol.T_I32,3);
      oprot#writeI32(ContactSetting.to_i _v);
      oprot#writeFieldEnd
    );
    (match _value with None -> () | Some _v -> 
      oprot#writeFieldBegin("value",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateContactSetting_args (iprot : Protocol.t) =
  let _str10775 = new updateContactSetting_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10776,_id10777) = iprot#readFieldBegin in
        if _t10776 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10777 with 
          | 1 -> (if _t10776 = Protocol.T_I32 then
              _str10775#set_reqSeq iprot#readI32
            else
              iprot#skip _t10776)
          | 2 -> (if _t10776 = Protocol.T_STRING then
              _str10775#set_mid iprot#readString
            else
              iprot#skip _t10776)
          | 3 -> (if _t10776 = Protocol.T_I32 then
              _str10775#set_flag (ContactSetting.of_i iprot#readI32)
            else
              iprot#skip _t10776)
          | 4 -> (if _t10776 = Protocol.T_STRING then
              _str10775#set_value iprot#readString
            else
              iprot#skip _t10776)
          | _ -> iprot#skip _t10776);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10775

class updateContactSetting_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateContactSetting_result.e") | Some _x10778 -> _x10778
  method set_e _x10778 = _e <- Some _x10778
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateContactSetting_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateContactSetting_result (iprot : Protocol.t) =
  let _str10781 = new updateContactSetting_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10782,_id10783) = iprot#readFieldBegin in
        if _t10782 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10783 with 
          | 1 -> (if _t10782 = Protocol.T_STRUCT then
              _str10781#set_e (read_talkException iprot)
            else
              iprot#skip _t10782)
          | _ -> iprot#skip _t10782);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10781

class updateCustomModeSettings_args =
object (self)
  val mutable _customMode : CustomMode.t option = None
  method get_customMode = _customMode
  method grab_customMode = match _customMode with None->raise (Field_empty "updateCustomModeSettings_args.customMode") | Some _x10784 -> _x10784
  method set_customMode _x10784 = _customMode <- Some _x10784
  method unset_customMode = _customMode <- None
  method reset_customMode = _customMode <- None

  val mutable _paramMap : (string,string) Hashtbl.t option = None
  method get_paramMap = _paramMap
  method grab_paramMap = match _paramMap with None->raise (Field_empty "updateCustomModeSettings_args.paramMap") | Some _x10785 -> _x10785
  method set_paramMap _x10785 = _paramMap <- Some _x10785
  method unset_paramMap = _paramMap <- None
  method reset_paramMap = _paramMap <- None

  method copy =
      let _new = Oo.copy self in
      if _paramMap <> None then
        _new#set_paramMap (Hashtbl.copy self#grab_paramMap);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateCustomModeSettings_args";
    (match _customMode with None -> () | Some _v -> 
      oprot#writeFieldBegin("customMode",Protocol.T_I32,2);
      oprot#writeI32(CustomMode.to_i _v);
      oprot#writeFieldEnd
    );
    (match _paramMap with None -> () | Some _v -> 
      oprot#writeFieldBegin("paramMap",Protocol.T_MAP,3);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter10788 -> fun _viter10789 -> 
        oprot#writeString(_kiter10788);
        oprot#writeString(_viter10789);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateCustomModeSettings_args (iprot : Protocol.t) =
  let _str10790 = new updateCustomModeSettings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10791,_id10792) = iprot#readFieldBegin in
        if _t10791 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10792 with 
          | 2 -> (if _t10791 = Protocol.T_I32 then
              _str10790#set_customMode (CustomMode.of_i iprot#readI32)
            else
              iprot#skip _t10791)
          | 3 -> (if _t10791 = Protocol.T_MAP then
              _str10790#set_paramMap 
                (let (_ktype10794,_vtype10795,_size10793) = iprot#readMapBegin in
                let _con10797 = Hashtbl.create _size10793 in
                  for i = 1 to _size10793 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con10797 _k _v
                  done; iprot#readMapEnd; _con10797)
            else
              iprot#skip _t10791)
          | _ -> iprot#skip _t10791);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10790

class updateCustomModeSettings_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateCustomModeSettings_result.e") | Some _x10798 -> _x10798
  method set_e _x10798 = _e <- Some _x10798
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateCustomModeSettings_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateCustomModeSettings_result (iprot : Protocol.t) =
  let _str10801 = new updateCustomModeSettings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10802,_id10803) = iprot#readFieldBegin in
        if _t10802 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10803 with 
          | 1 -> (if _t10802 = Protocol.T_STRUCT then
              _str10801#set_e (read_talkException iprot)
            else
              iprot#skip _t10802)
          | _ -> iprot#skip _t10802);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10801

class updateDeviceInfo_args =
object (self)
  val mutable _deviceUid : string option = None
  method get_deviceUid = _deviceUid
  method grab_deviceUid = match _deviceUid with None->raise (Field_empty "updateDeviceInfo_args.deviceUid") | Some _x10804 -> _x10804
  method set_deviceUid _x10804 = _deviceUid <- Some _x10804
  method unset_deviceUid = _deviceUid <- None
  method reset_deviceUid = _deviceUid <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "updateDeviceInfo_args.deviceInfo") | Some _x10805 -> _x10805
  method set_deviceInfo _x10805 = _deviceInfo <- Some _x10805
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  method copy =
      let _new = Oo.copy self in
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateDeviceInfo_args";
    (match _deviceUid with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceUid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,3);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateDeviceInfo_args (iprot : Protocol.t) =
  let _str10808 = new updateDeviceInfo_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10809,_id10810) = iprot#readFieldBegin in
        if _t10809 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10810 with 
          | 2 -> (if _t10809 = Protocol.T_STRING then
              _str10808#set_deviceUid iprot#readString
            else
              iprot#skip _t10809)
          | 3 -> (if _t10809 = Protocol.T_STRUCT then
              _str10808#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t10809)
          | _ -> iprot#skip _t10809);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10808

class updateDeviceInfo_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateDeviceInfo_result.e") | Some _x10811 -> _x10811
  method set_e _x10811 = _e <- Some _x10811
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateDeviceInfo_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateDeviceInfo_result (iprot : Protocol.t) =
  let _str10814 = new updateDeviceInfo_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10815,_id10816) = iprot#readFieldBegin in
        if _t10815 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10816 with 
          | 1 -> (if _t10815 = Protocol.T_STRUCT then
              _str10814#set_e (read_talkException iprot)
            else
              iprot#skip _t10815)
          | _ -> iprot#skip _t10815);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10814

class updateGroup_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateGroup_args.reqSeq") | Some _x10817 -> _x10817
  method set_reqSeq _x10817 = _reqSeq <- Some _x10817
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _group : group option = None
  method get_group = _group
  method grab_group = match _group with None->raise (Field_empty "updateGroup_args.group") | Some _x10818 -> _x10818
  method set_group _x10818 = _group <- Some _x10818
  method unset_group = _group <- None
  method reset_group = _group <- None

  method copy =
      let _new = Oo.copy self in
      if _group <> None then
        _new#set_group self#grab_group#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateGroup_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _group with None -> () | Some _v -> 
      oprot#writeFieldBegin("group",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateGroup_args (iprot : Protocol.t) =
  let _str10821 = new updateGroup_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10822,_id10823) = iprot#readFieldBegin in
        if _t10822 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10823 with 
          | 1 -> (if _t10822 = Protocol.T_I32 then
              _str10821#set_reqSeq iprot#readI32
            else
              iprot#skip _t10822)
          | 2 -> (if _t10822 = Protocol.T_STRUCT then
              _str10821#set_group (read_group iprot)
            else
              iprot#skip _t10822)
          | _ -> iprot#skip _t10822);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10821

class updateGroup_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateGroup_result.e") | Some _x10824 -> _x10824
  method set_e _x10824 = _e <- Some _x10824
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateGroup_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateGroup_result (iprot : Protocol.t) =
  let _str10827 = new updateGroup_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10828,_id10829) = iprot#readFieldBegin in
        if _t10828 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10829 with 
          | 1 -> (if _t10828 = Protocol.T_STRUCT then
              _str10827#set_e (read_talkException iprot)
            else
              iprot#skip _t10828)
          | _ -> iprot#skip _t10828);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10827

class updateNotificationToken_args =
object (self)
  val mutable _type : NotificationType.t option = None
  method get_type = _type
  method grab_type = match _type with None->raise (Field_empty "updateNotificationToken_args.type") | Some _x10830 -> _x10830
  method set_type _x10830 = _type <- Some _x10830
  method unset_type = _type <- None
  method reset_type = _type <- None

  val mutable _token : string option = None
  method get_token = _token
  method grab_token = match _token with None->raise (Field_empty "updateNotificationToken_args.token") | Some _x10831 -> _x10831
  method set_token _x10831 = _token <- Some _x10831
  method unset_token = _token <- None
  method reset_token = _token <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateNotificationToken_args";
    (match _token with None -> () | Some _v -> 
      oprot#writeFieldBegin("token",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _type with None -> () | Some _v -> 
      oprot#writeFieldBegin("type",Protocol.T_I32,3);
      oprot#writeI32(NotificationType.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateNotificationToken_args (iprot : Protocol.t) =
  let _str10834 = new updateNotificationToken_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10835,_id10836) = iprot#readFieldBegin in
        if _t10835 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10836 with 
          | 3 -> (if _t10835 = Protocol.T_I32 then
              _str10834#set_type (NotificationType.of_i iprot#readI32)
            else
              iprot#skip _t10835)
          | 2 -> (if _t10835 = Protocol.T_STRING then
              _str10834#set_token iprot#readString
            else
              iprot#skip _t10835)
          | _ -> iprot#skip _t10835);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10834

class updateNotificationToken_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateNotificationToken_result.e") | Some _x10837 -> _x10837
  method set_e _x10837 = _e <- Some _x10837
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateNotificationToken_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateNotificationToken_result (iprot : Protocol.t) =
  let _str10840 = new updateNotificationToken_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10841,_id10842) = iprot#readFieldBegin in
        if _t10841 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10842 with 
          | 1 -> (if _t10841 = Protocol.T_STRUCT then
              _str10840#set_e (read_talkException iprot)
            else
              iprot#skip _t10841)
          | _ -> iprot#skip _t10841);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10840

class updateNotificationTokenWithBytes_args =
object (self)
  val mutable _type : NotificationType.t option = None
  method get_type = _type
  method grab_type = match _type with None->raise (Field_empty "updateNotificationTokenWithBytes_args.type") | Some _x10843 -> _x10843
  method set_type _x10843 = _type <- Some _x10843
  method unset_type = _type <- None
  method reset_type = _type <- None

  val mutable _token : string option = None
  method get_token = _token
  method grab_token = match _token with None->raise (Field_empty "updateNotificationTokenWithBytes_args.token") | Some _x10844 -> _x10844
  method set_token _x10844 = _token <- Some _x10844
  method unset_token = _token <- None
  method reset_token = _token <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateNotificationTokenWithBytes_args";
    (match _token with None -> () | Some _v -> 
      oprot#writeFieldBegin("token",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _type with None -> () | Some _v -> 
      oprot#writeFieldBegin("type",Protocol.T_I32,3);
      oprot#writeI32(NotificationType.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateNotificationTokenWithBytes_args (iprot : Protocol.t) =
  let _str10847 = new updateNotificationTokenWithBytes_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10848,_id10849) = iprot#readFieldBegin in
        if _t10848 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10849 with 
          | 3 -> (if _t10848 = Protocol.T_I32 then
              _str10847#set_type (NotificationType.of_i iprot#readI32)
            else
              iprot#skip _t10848)
          | 2 -> (if _t10848 = Protocol.T_STRING then
              _str10847#set_token iprot#readString
            else
              iprot#skip _t10848)
          | _ -> iprot#skip _t10848);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10847

class updateNotificationTokenWithBytes_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateNotificationTokenWithBytes_result.e") | Some _x10850 -> _x10850
  method set_e _x10850 = _e <- Some _x10850
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateNotificationTokenWithBytes_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateNotificationTokenWithBytes_result (iprot : Protocol.t) =
  let _str10853 = new updateNotificationTokenWithBytes_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10854,_id10855) = iprot#readFieldBegin in
        if _t10854 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10855 with 
          | 1 -> (if _t10854 = Protocol.T_STRUCT then
              _str10853#set_e (read_talkException iprot)
            else
              iprot#skip _t10854)
          | _ -> iprot#skip _t10854);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10853

class updateProfile_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateProfile_args.reqSeq") | Some _x10856 -> _x10856
  method set_reqSeq _x10856 = _reqSeq <- Some _x10856
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _profile : profile option = None
  method get_profile = _profile
  method grab_profile = match _profile with None->raise (Field_empty "updateProfile_args.profile") | Some _x10857 -> _x10857
  method set_profile _x10857 = _profile <- Some _x10857
  method unset_profile = _profile <- None
  method reset_profile = _profile <- None

  method copy =
      let _new = Oo.copy self in
      if _profile <> None then
        _new#set_profile self#grab_profile#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateProfile_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _profile with None -> () | Some _v -> 
      oprot#writeFieldBegin("profile",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateProfile_args (iprot : Protocol.t) =
  let _str10860 = new updateProfile_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10861,_id10862) = iprot#readFieldBegin in
        if _t10861 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10862 with 
          | 1 -> (if _t10861 = Protocol.T_I32 then
              _str10860#set_reqSeq iprot#readI32
            else
              iprot#skip _t10861)
          | 2 -> (if _t10861 = Protocol.T_STRUCT then
              _str10860#set_profile (read_profile iprot)
            else
              iprot#skip _t10861)
          | _ -> iprot#skip _t10861);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10860

class updateProfile_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateProfile_result.e") | Some _x10863 -> _x10863
  method set_e _x10863 = _e <- Some _x10863
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateProfile_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateProfile_result (iprot : Protocol.t) =
  let _str10866 = new updateProfile_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10867,_id10868) = iprot#readFieldBegin in
        if _t10867 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10868 with 
          | 1 -> (if _t10867 = Protocol.T_STRUCT then
              _str10866#set_e (read_talkException iprot)
            else
              iprot#skip _t10867)
          | _ -> iprot#skip _t10867);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10866

class updateProfileAttribute_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateProfileAttribute_args.reqSeq") | Some _x10869 -> _x10869
  method set_reqSeq _x10869 = _reqSeq <- Some _x10869
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _attr : ProfileAttribute.t option = None
  method get_attr = _attr
  method grab_attr = match _attr with None->raise (Field_empty "updateProfileAttribute_args.attr") | Some _x10870 -> _x10870
  method set_attr _x10870 = _attr <- Some _x10870
  method unset_attr = _attr <- None
  method reset_attr = _attr <- None

  val mutable _value : string option = None
  method get_value = _value
  method grab_value = match _value with None->raise (Field_empty "updateProfileAttribute_args.value") | Some _x10871 -> _x10871
  method set_value _x10871 = _value <- Some _x10871
  method unset_value = _value <- None
  method reset_value = _value <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateProfileAttribute_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _attr with None -> () | Some _v -> 
      oprot#writeFieldBegin("attr",Protocol.T_I32,2);
      oprot#writeI32(ProfileAttribute.to_i _v);
      oprot#writeFieldEnd
    );
    (match _value with None -> () | Some _v -> 
      oprot#writeFieldBegin("value",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateProfileAttribute_args (iprot : Protocol.t) =
  let _str10874 = new updateProfileAttribute_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10875,_id10876) = iprot#readFieldBegin in
        if _t10875 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10876 with 
          | 1 -> (if _t10875 = Protocol.T_I32 then
              _str10874#set_reqSeq iprot#readI32
            else
              iprot#skip _t10875)
          | 2 -> (if _t10875 = Protocol.T_I32 then
              _str10874#set_attr (ProfileAttribute.of_i iprot#readI32)
            else
              iprot#skip _t10875)
          | 3 -> (if _t10875 = Protocol.T_STRING then
              _str10874#set_value iprot#readString
            else
              iprot#skip _t10875)
          | _ -> iprot#skip _t10875);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10874

class updateProfileAttribute_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateProfileAttribute_result.e") | Some _x10877 -> _x10877
  method set_e _x10877 = _e <- Some _x10877
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateProfileAttribute_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateProfileAttribute_result (iprot : Protocol.t) =
  let _str10880 = new updateProfileAttribute_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10881,_id10882) = iprot#readFieldBegin in
        if _t10881 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10882 with 
          | 1 -> (if _t10881 = Protocol.T_STRUCT then
              _str10880#set_e (read_talkException iprot)
            else
              iprot#skip _t10881)
          | _ -> iprot#skip _t10881);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10880

class updateProfileAttributes_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateProfileAttributes_args.reqSeq") | Some _x10883 -> _x10883
  method set_reqSeq _x10883 = _reqSeq <- Some _x10883
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _request : updateProfileAttributesRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "updateProfileAttributes_args.request") | Some _x10884 -> _x10884
  method set_request _x10884 = _request <- Some _x10884
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateProfileAttributes_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateProfileAttributes_args (iprot : Protocol.t) =
  let _str10887 = new updateProfileAttributes_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10888,_id10889) = iprot#readFieldBegin in
        if _t10888 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10889 with 
          | 1 -> (if _t10888 = Protocol.T_I32 then
              _str10887#set_reqSeq iprot#readI32
            else
              iprot#skip _t10888)
          | 2 -> (if _t10888 = Protocol.T_STRUCT then
              _str10887#set_request (read_updateProfileAttributesRequest iprot)
            else
              iprot#skip _t10888)
          | _ -> iprot#skip _t10888);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10887

class updateProfileAttributes_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateProfileAttributes_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateProfileAttributes_result (iprot : Protocol.t) =
  let _str10892 = new updateProfileAttributes_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10893,_id10894) = iprot#readFieldBegin in
        if _t10893 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10894 with 
          | _ -> iprot#skip _t10893);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10892

class updateRegion_args =
object (self)
  val mutable _region : string option = None
  method get_region = _region
  method grab_region = match _region with None->raise (Field_empty "updateRegion_args.region") | Some _x10895 -> _x10895
  method set_region _x10895 = _region <- Some _x10895
  method unset_region = _region <- None
  method reset_region = _region <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateRegion_args";
    (match _region with None -> () | Some _v -> 
      oprot#writeFieldBegin("region",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateRegion_args (iprot : Protocol.t) =
  let _str10898 = new updateRegion_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10899,_id10900) = iprot#readFieldBegin in
        if _t10899 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10900 with 
          | 2 -> (if _t10899 = Protocol.T_STRING then
              _str10898#set_region iprot#readString
            else
              iprot#skip _t10899)
          | _ -> iprot#skip _t10899);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10898

class updateRegion_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateRegion_result.e") | Some _x10901 -> _x10901
  method set_e _x10901 = _e <- Some _x10901
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateRegion_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateRegion_result (iprot : Protocol.t) =
  let _str10904 = new updateRegion_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10905,_id10906) = iprot#readFieldBegin in
        if _t10905 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10906 with 
          | 1 -> (if _t10905 = Protocol.T_STRUCT then
              _str10904#set_e (read_talkException iprot)
            else
              iprot#skip _t10905)
          | _ -> iprot#skip _t10905);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10904

class updateSettings_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateSettings_args.reqSeq") | Some _x10907 -> _x10907
  method set_reqSeq _x10907 = _reqSeq <- Some _x10907
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _settings : settings option = None
  method get_settings = _settings
  method grab_settings = match _settings with None->raise (Field_empty "updateSettings_args.settings") | Some _x10908 -> _x10908
  method set_settings _x10908 = _settings <- Some _x10908
  method unset_settings = _settings <- None
  method reset_settings = _settings <- None

  method copy =
      let _new = Oo.copy self in
      if _settings <> None then
        _new#set_settings self#grab_settings#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSettings_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _settings with None -> () | Some _v -> 
      oprot#writeFieldBegin("settings",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSettings_args (iprot : Protocol.t) =
  let _str10911 = new updateSettings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10912,_id10913) = iprot#readFieldBegin in
        if _t10912 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10913 with 
          | 1 -> (if _t10912 = Protocol.T_I32 then
              _str10911#set_reqSeq iprot#readI32
            else
              iprot#skip _t10912)
          | 2 -> (if _t10912 = Protocol.T_STRUCT then
              _str10911#set_settings (read_settings iprot)
            else
              iprot#skip _t10912)
          | _ -> iprot#skip _t10912);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10911

class updateSettings_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSettings_result.e") | Some _x10914 -> _x10914
  method set_e _x10914 = _e <- Some _x10914
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSettings_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSettings_result (iprot : Protocol.t) =
  let _str10917 = new updateSettings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10918,_id10919) = iprot#readFieldBegin in
        if _t10918 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10919 with 
          | 1 -> (if _t10918 = Protocol.T_STRUCT then
              _str10917#set_e (read_talkException iprot)
            else
              iprot#skip _t10918)
          | _ -> iprot#skip _t10918);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10917

class updateSettings2_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateSettings2_args.reqSeq") | Some _x10920 -> _x10920
  method set_reqSeq _x10920 = _reqSeq <- Some _x10920
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _settings : settings option = None
  method get_settings = _settings
  method grab_settings = match _settings with None->raise (Field_empty "updateSettings2_args.settings") | Some _x10921 -> _x10921
  method set_settings _x10921 = _settings <- Some _x10921
  method unset_settings = _settings <- None
  method reset_settings = _settings <- None

  method copy =
      let _new = Oo.copy self in
      if _settings <> None then
        _new#set_settings self#grab_settings#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSettings2_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _settings with None -> () | Some _v -> 
      oprot#writeFieldBegin("settings",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSettings2_args (iprot : Protocol.t) =
  let _str10924 = new updateSettings2_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10925,_id10926) = iprot#readFieldBegin in
        if _t10925 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10926 with 
          | 1 -> (if _t10925 = Protocol.T_I32 then
              _str10924#set_reqSeq iprot#readI32
            else
              iprot#skip _t10925)
          | 2 -> (if _t10925 = Protocol.T_STRUCT then
              _str10924#set_settings (read_settings iprot)
            else
              iprot#skip _t10925)
          | _ -> iprot#skip _t10925);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10924

class updateSettings2_result =
object (self)
  val mutable _success : Int32.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSettings2_result.success") | Some _x10927 -> _x10927
  method set_success _x10927 = _success <- Some _x10927
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSettings2_result.e") | Some _x10928 -> _x10928
  method set_e _x10928 = _e <- Some _x10928
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSettings2_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I32,0);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSettings2_result (iprot : Protocol.t) =
  let _str10931 = new updateSettings2_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10932,_id10933) = iprot#readFieldBegin in
        if _t10932 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10933 with 
          | 0 -> (if _t10932 = Protocol.T_I32 then
              _str10931#set_success iprot#readI32
            else
              iprot#skip _t10932)
          | 1 -> (if _t10932 = Protocol.T_STRUCT then
              _str10931#set_e (read_talkException iprot)
            else
              iprot#skip _t10932)
          | _ -> iprot#skip _t10932);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10931

class updateSettingsAttribute_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateSettingsAttribute_args.reqSeq") | Some _x10934 -> _x10934
  method set_reqSeq _x10934 = _reqSeq <- Some _x10934
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _attr : SettingsAttribute.t option = None
  method get_attr = _attr
  method grab_attr = match _attr with None->raise (Field_empty "updateSettingsAttribute_args.attr") | Some _x10935 -> _x10935
  method set_attr _x10935 = _attr <- Some _x10935
  method unset_attr = _attr <- None
  method reset_attr = _attr <- None

  val mutable _value : string option = None
  method get_value = _value
  method grab_value = match _value with None->raise (Field_empty "updateSettingsAttribute_args.value") | Some _x10936 -> _x10936
  method set_value _x10936 = _value <- Some _x10936
  method unset_value = _value <- None
  method reset_value = _value <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSettingsAttribute_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _attr with None -> () | Some _v -> 
      oprot#writeFieldBegin("attr",Protocol.T_I32,2);
      oprot#writeI32(SettingsAttribute.to_i _v);
      oprot#writeFieldEnd
    );
    (match _value with None -> () | Some _v -> 
      oprot#writeFieldBegin("value",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSettingsAttribute_args (iprot : Protocol.t) =
  let _str10939 = new updateSettingsAttribute_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10940,_id10941) = iprot#readFieldBegin in
        if _t10940 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10941 with 
          | 1 -> (if _t10940 = Protocol.T_I32 then
              _str10939#set_reqSeq iprot#readI32
            else
              iprot#skip _t10940)
          | 2 -> (if _t10940 = Protocol.T_I32 then
              _str10939#set_attr (SettingsAttribute.of_i iprot#readI32)
            else
              iprot#skip _t10940)
          | 3 -> (if _t10940 = Protocol.T_STRING then
              _str10939#set_value iprot#readString
            else
              iprot#skip _t10940)
          | _ -> iprot#skip _t10940);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10939

class updateSettingsAttribute_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSettingsAttribute_result.e") | Some _x10942 -> _x10942
  method set_e _x10942 = _e <- Some _x10942
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSettingsAttribute_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSettingsAttribute_result (iprot : Protocol.t) =
  let _str10945 = new updateSettingsAttribute_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10946,_id10947) = iprot#readFieldBegin in
        if _t10946 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10947 with 
          | 1 -> (if _t10946 = Protocol.T_STRUCT then
              _str10945#set_e (read_talkException iprot)
            else
              iprot#skip _t10946)
          | _ -> iprot#skip _t10946);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10945

class updateSettingsAttributes_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateSettingsAttributes_args.reqSeq") | Some _x10948 -> _x10948
  method set_reqSeq _x10948 = _reqSeq <- Some _x10948
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _attrBitset : Int32.t option = None
  method get_attrBitset = _attrBitset
  method grab_attrBitset = match _attrBitset with None->raise (Field_empty "updateSettingsAttributes_args.attrBitset") | Some _x10949 -> _x10949
  method set_attrBitset _x10949 = _attrBitset <- Some _x10949
  method unset_attrBitset = _attrBitset <- None
  method reset_attrBitset = _attrBitset <- None

  val mutable _settings : settings option = None
  method get_settings = _settings
  method grab_settings = match _settings with None->raise (Field_empty "updateSettingsAttributes_args.settings") | Some _x10950 -> _x10950
  method set_settings _x10950 = _settings <- Some _x10950
  method unset_settings = _settings <- None
  method reset_settings = _settings <- None

  method copy =
      let _new = Oo.copy self in
      if _settings <> None then
        _new#set_settings self#grab_settings#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSettingsAttributes_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _attrBitset with None -> () | Some _v -> 
      oprot#writeFieldBegin("attrBitset",Protocol.T_I32,2);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _settings with None -> () | Some _v -> 
      oprot#writeFieldBegin("settings",Protocol.T_STRUCT,3);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSettingsAttributes_args (iprot : Protocol.t) =
  let _str10953 = new updateSettingsAttributes_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10954,_id10955) = iprot#readFieldBegin in
        if _t10954 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10955 with 
          | 1 -> (if _t10954 = Protocol.T_I32 then
              _str10953#set_reqSeq iprot#readI32
            else
              iprot#skip _t10954)
          | 2 -> (if _t10954 = Protocol.T_I32 then
              _str10953#set_attrBitset iprot#readI32
            else
              iprot#skip _t10954)
          | 3 -> (if _t10954 = Protocol.T_STRUCT then
              _str10953#set_settings (read_settings iprot)
            else
              iprot#skip _t10954)
          | _ -> iprot#skip _t10954);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10953

class updateSettingsAttributes_result =
object (self)
  val mutable _success : Int32.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSettingsAttributes_result.success") | Some _x10956 -> _x10956
  method set_success _x10956 = _success <- Some _x10956
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSettingsAttributes_result.e") | Some _x10957 -> _x10957
  method set_e _x10957 = _e <- Some _x10957
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSettingsAttributes_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I32,0);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSettingsAttributes_result (iprot : Protocol.t) =
  let _str10960 = new updateSettingsAttributes_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10961,_id10962) = iprot#readFieldBegin in
        if _t10961 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10962 with 
          | 0 -> (if _t10961 = Protocol.T_I32 then
              _str10960#set_success iprot#readI32
            else
              iprot#skip _t10961)
          | 1 -> (if _t10961 = Protocol.T_STRUCT then
              _str10960#set_e (read_talkException iprot)
            else
              iprot#skip _t10961)
          | _ -> iprot#skip _t10961);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10960

class verifyIdentityCredential_args =
object (self)
  val mutable _identityProvider : IdentityProvider.t option = None
  method get_identityProvider = _identityProvider
  method grab_identityProvider = match _identityProvider with None->raise (Field_empty "verifyIdentityCredential_args.identityProvider") | Some _x10963 -> _x10963
  method set_identityProvider _x10963 = _identityProvider <- Some _x10963
  method unset_identityProvider = _identityProvider <- None
  method reset_identityProvider = _identityProvider <- None

  val mutable _identifier : string option = None
  method get_identifier = _identifier
  method grab_identifier = match _identifier with None->raise (Field_empty "verifyIdentityCredential_args.identifier") | Some _x10964 -> _x10964
  method set_identifier _x10964 = _identifier <- Some _x10964
  method unset_identifier = _identifier <- None
  method reset_identifier = _identifier <- None

  val mutable _password : string option = None
  method get_password = _password
  method grab_password = match _password with None->raise (Field_empty "verifyIdentityCredential_args.password") | Some _x10965 -> _x10965
  method set_password _x10965 = _password <- Some _x10965
  method unset_password = _password <- None
  method reset_password = _password <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyIdentityCredential_args";
    (match _identifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("identifier",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _password with None -> () | Some _v -> 
      oprot#writeFieldBegin("password",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _identityProvider with None -> () | Some _v -> 
      oprot#writeFieldBegin("identityProvider",Protocol.T_I32,8);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyIdentityCredential_args (iprot : Protocol.t) =
  let _str10968 = new verifyIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10969,_id10970) = iprot#readFieldBegin in
        if _t10969 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10970 with 
          | 8 -> (if _t10969 = Protocol.T_I32 then
              _str10968#set_identityProvider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t10969)
          | 3 -> (if _t10969 = Protocol.T_STRING then
              _str10968#set_identifier iprot#readString
            else
              iprot#skip _t10969)
          | 4 -> (if _t10969 = Protocol.T_STRING then
              _str10968#set_password iprot#readString
            else
              iprot#skip _t10969)
          | _ -> iprot#skip _t10969);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10968

class verifyIdentityCredential_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "verifyIdentityCredential_result.e") | Some _x10971 -> _x10971
  method set_e _x10971 = _e <- Some _x10971
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyIdentityCredential_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyIdentityCredential_result (iprot : Protocol.t) =
  let _str10974 = new verifyIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10975,_id10976) = iprot#readFieldBegin in
        if _t10975 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10976 with 
          | 1 -> (if _t10975 = Protocol.T_STRUCT then
              _str10974#set_e (read_talkException iprot)
            else
              iprot#skip _t10975)
          | _ -> iprot#skip _t10975);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10974

class verifyIdentityCredentialWithResult_args =
object (self)
  val mutable _identityCredential : identityCredential option = None
  method get_identityCredential = _identityCredential
  method grab_identityCredential = match _identityCredential with None->raise (Field_empty "verifyIdentityCredentialWithResult_args.identityCredential") | Some _x10977 -> _x10977
  method set_identityCredential _x10977 = _identityCredential <- Some _x10977
  method unset_identityCredential = _identityCredential <- None
  method reset_identityCredential = _identityCredential <- None

  method copy =
      let _new = Oo.copy self in
      if _identityCredential <> None then
        _new#set_identityCredential self#grab_identityCredential#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyIdentityCredentialWithResult_args";
    (match _identityCredential with None -> () | Some _v -> 
      oprot#writeFieldBegin("identityCredential",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyIdentityCredentialWithResult_args (iprot : Protocol.t) =
  let _str10980 = new verifyIdentityCredentialWithResult_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10981,_id10982) = iprot#readFieldBegin in
        if _t10981 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10982 with 
          | 2 -> (if _t10981 = Protocol.T_STRUCT then
              _str10980#set_identityCredential (read_identityCredential iprot)
            else
              iprot#skip _t10981)
          | _ -> iprot#skip _t10981);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10980

class verifyIdentityCredentialWithResult_result =
object (self)
  val mutable _success : userAuthStatus option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "verifyIdentityCredentialWithResult_result.success") | Some _x10983 -> _x10983
  method set_success _x10983 = _success <- Some _x10983
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "verifyIdentityCredentialWithResult_result.e") | Some _x10984 -> _x10984
  method set_e _x10984 = _e <- Some _x10984
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyIdentityCredentialWithResult_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyIdentityCredentialWithResult_result (iprot : Protocol.t) =
  let _str10987 = new verifyIdentityCredentialWithResult_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10988,_id10989) = iprot#readFieldBegin in
        if _t10988 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10989 with 
          | 0 -> (if _t10988 = Protocol.T_STRUCT then
              _str10987#set_success (read_userAuthStatus iprot)
            else
              iprot#skip _t10988)
          | 1 -> (if _t10988 = Protocol.T_STRUCT then
              _str10987#set_e (read_talkException iprot)
            else
              iprot#skip _t10988)
          | _ -> iprot#skip _t10988);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10987

class verifyPhone_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "verifyPhone_args.sessionId") | Some _x10990 -> _x10990
  method set_sessionId _x10990 = _sessionId <- Some _x10990
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  val mutable _pinCode : string option = None
  method get_pinCode = _pinCode
  method grab_pinCode = match _pinCode with None->raise (Field_empty "verifyPhone_args.pinCode") | Some _x10991 -> _x10991
  method set_pinCode _x10991 = _pinCode <- Some _x10991
  method unset_pinCode = _pinCode <- None
  method reset_pinCode = _pinCode <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "verifyPhone_args.udidHash") | Some _x10992 -> _x10992
  method set_udidHash _x10992 = _udidHash <- Some _x10992
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyPhone_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _pinCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("pinCode",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyPhone_args (iprot : Protocol.t) =
  let _str10995 = new verifyPhone_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10996,_id10997) = iprot#readFieldBegin in
        if _t10996 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10997 with 
          | 2 -> (if _t10996 = Protocol.T_STRING then
              _str10995#set_sessionId iprot#readString
            else
              iprot#skip _t10996)
          | 3 -> (if _t10996 = Protocol.T_STRING then
              _str10995#set_pinCode iprot#readString
            else
              iprot#skip _t10996)
          | 4 -> (if _t10996 = Protocol.T_STRING then
              _str10995#set_udidHash iprot#readString
            else
              iprot#skip _t10996)
          | _ -> iprot#skip _t10996);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10995

class verifyPhone_result =
object (self)
  val mutable _success : VerificationResult.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "verifyPhone_result.success") | Some _x10998 -> _x10998
  method set_success _x10998 = _success <- Some _x10998
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "verifyPhone_result.e") | Some _x10999 -> _x10999
  method set_e _x10999 = _e <- Some _x10999
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyPhone_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I32,0);
      oprot#writeI32(VerificationResult.to_i _v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyPhone_result (iprot : Protocol.t) =
  let _str11002 = new verifyPhone_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11003,_id11004) = iprot#readFieldBegin in
        if _t11003 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11004 with 
          | 0 -> (if _t11003 = Protocol.T_I32 then
              _str11002#set_success (VerificationResult.of_i iprot#readI32)
            else
              iprot#skip _t11003)
          | 1 -> (if _t11003 = Protocol.T_STRUCT then
              _str11002#set_e (read_talkException iprot)
            else
              iprot#skip _t11003)
          | _ -> iprot#skip _t11003);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11002

class verifyQrcode_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "verifyQrcode_args.verifier") | Some _x11005 -> _x11005
  method set_verifier _x11005 = _verifier <- Some _x11005
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  val mutable _pinCode : string option = None
  method get_pinCode = _pinCode
  method grab_pinCode = match _pinCode with None->raise (Field_empty "verifyQrcode_args.pinCode") | Some _x11006 -> _x11006
  method set_pinCode _x11006 = _pinCode <- Some _x11006
  method unset_pinCode = _pinCode <- None
  method reset_pinCode = _pinCode <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyQrcode_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _pinCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("pinCode",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyQrcode_args (iprot : Protocol.t) =
  let _str11009 = new verifyQrcode_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11010,_id11011) = iprot#readFieldBegin in
        if _t11010 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11011 with 
          | 2 -> (if _t11010 = Protocol.T_STRING then
              _str11009#set_verifier iprot#readString
            else
              iprot#skip _t11010)
          | 3 -> (if _t11010 = Protocol.T_STRING then
              _str11009#set_pinCode iprot#readString
            else
              iprot#skip _t11010)
          | _ -> iprot#skip _t11010);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11009

class verifyQrcode_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "verifyQrcode_result.success") | Some _x11012 -> _x11012
  method set_success _x11012 = _success <- Some _x11012
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "verifyQrcode_result.e") | Some _x11013 -> _x11013
  method set_e _x11013 = _e <- Some _x11013
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyQrcode_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyQrcode_result (iprot : Protocol.t) =
  let _str11016 = new verifyQrcode_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11017,_id11018) = iprot#readFieldBegin in
        if _t11017 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11018 with 
          | 0 -> (if _t11017 = Protocol.T_STRING then
              _str11016#set_success iprot#readString
            else
              iprot#skip _t11017)
          | 1 -> (if _t11017 = Protocol.T_STRUCT then
              _str11016#set_e (read_talkException iprot)
            else
              iprot#skip _t11017)
          | _ -> iprot#skip _t11017);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11016

class virtual iface =
object (self)
  method virtual searchCollection : string option -> searchPagingParameter option -> searchResult
  method virtual getChatRoomAnnouncementsBulk : string list option -> (string,chatRoomAnnouncement list) Hashtbl.t
  method virtual getChatRoomAnnouncements : string option -> chatRoomAnnouncement list
  method virtual createChatRoomAnnouncement : Int32.t option -> string option -> ChatRoomAnnouncementType.t option -> chatRoomAnnouncementContents option -> chatRoomAnnouncement
  method virtual removeChatRoomAnnouncement : Int32.t option -> string option -> Int64.t option -> unit
  method virtual unsendMessage : Int32.t option -> string option -> unit
  method virtual getGroupWithoutMembers : string option -> group
  method virtual requestResendMessage : Int32.t option -> string option -> string option -> unit
  method virtual respondResendMessage : Int32.t option -> string option -> string option -> message option -> ErrorCode.t option -> unit
  method virtual acceptGroupInvitation : Int32.t option -> string option -> unit
  method virtual acceptGroupInvitationByTicket : Int32.t option -> string option -> string option -> unit
  method virtual acceptProximityMatches : string option -> (string,bool) Hashtbl.t option -> unit
  method virtual acquireCallRoute : string option -> string list
  method virtual acquireCallTicket : string option -> string
  method virtual acquireEncryptedAccessToken : FeatureType.t option -> string
  method virtual addSnsId : SnsIdType.t option -> string option -> string
  method virtual blockContact : Int32.t option -> string option -> unit
  method virtual blockRecommendation : Int32.t option -> string option -> unit
  method virtual cancelGroupInvitation : Int32.t option -> string option -> string list option -> unit
  method virtual changeVerificationMethod : string option -> VerificationMethod.t option -> verificationSessionData
  method virtual clearIdentityCredential : unit
  method virtual clearMessageBox : string option -> string option -> unit
  method virtual closeProximityMatch : string option -> unit
  method virtual commitSendMessage : Int32.t option -> string option -> string list option -> (string,string) Hashtbl.t
  method virtual commitSendMessages : Int32.t option -> string list option -> string list option -> (string,string) Hashtbl.t
  method virtual commitUpdateProfile : Int32.t option -> ProfileAttribute.t list option -> string list option -> (string,string) Hashtbl.t
  method virtual confirmEmail : string option -> string option -> unit
  method virtual createGroup : Int32.t option -> string option -> string list option -> group
  method virtual createQrcodeBase64Image : string option -> string option -> Int32.t option -> Int32.t option -> Int32.t option -> Int32.t option -> Int32.t option -> string
  method virtual createRoom : Int32.t option -> string list option -> room
  method virtual createSession : string
  method virtual fetchAnnouncements : Int32.t option -> announcement list
  method virtual fetchMessages : Int64.t option -> Int32.t option -> message list
  method virtual fetchOperations : Int64.t option -> Int32.t option -> operation list
  method virtual fetchOps : Int64.t option -> Int32.t option -> Int64.t option -> Int64.t option -> operation list
  method virtual findAndAddContactsByEmail : Int32.t option -> (string,bool) Hashtbl.t option -> (string,contact) Hashtbl.t
  method virtual findAndAddContactsByMid : Int32.t option -> string option -> ContactType.t option -> string option -> (string,contact) Hashtbl.t
  method virtual findGroupByTicketV2 : string option -> group
  method virtual findAndAddContactsByPhone : Int32.t option -> (string,bool) Hashtbl.t option -> (string,contact) Hashtbl.t
  method virtual getFriendRequests : FriendRequestDirection.t option -> Int64.t option -> friendRequest list
  method virtual removeFriendRequest : FriendRequestDirection.t option -> string option -> unit
  method virtual findAndAddContactsByUserid : Int32.t option -> string option -> (string,contact) Hashtbl.t
  method virtual findContactByUserid : string option -> contact
  method virtual findContactByUserTicket : string option -> contact
  method virtual findContactsByEmail : (string,bool) Hashtbl.t option -> (string,contact) Hashtbl.t
  method virtual findContactsByPhone : (string,bool) Hashtbl.t option -> (string,contact) Hashtbl.t
  method virtual findSnsIdUserStatus : SnsIdType.t option -> string option -> string option -> snsIdUserStatus
  method virtual finishUpdateVerification : string option -> unit
  method virtual generateUserTicket : Int64.t option -> Int32.t option -> ticket
  method virtual destroyMessage : Int32.t option -> string option -> string option -> Int32.t option -> unit
  method virtual getAcceptedProximityMatches : string option -> (string,bool) Hashtbl.t
  method virtual getActiveBuddySubscriberIds : string list
  method virtual getAllContactIds : string list
  method virtual getAuthQrcode : bool option -> string option -> authQrcode
  method virtual getBlockedContactIds : string list
  method virtual registerWithPhoneNumber : string option -> string option -> registerWithPhoneNumberResult
  method virtual registerWithPhoneNumberAndPassword : string option -> string option -> string option -> registerWithPhoneNumberResult
  method virtual getAnalyticsInfo : analyticsInfo
  method virtual reportClientStatistics : Int32.t option -> ReportCategory.t option -> Int32.t option -> unit
  method virtual verifyPhoneNumberForLogin : string option -> string option -> string option -> string
  method virtual verifyPhoneNumber : string option -> string option -> string option -> string option -> string option -> phoneVerificationResult
  method virtual getBlockedContactIdsByRange : Int32.t option -> Int32.t option -> string list
  method virtual getBlockedRecommendationIds : string list
  method virtual getBuddyBlockerIds : string list
  method virtual getBuddyLocation : string option -> Int32.t option -> geolocation
  method virtual getCompactContactsModifiedSince : Int64.t option -> compactContact list
  method virtual getCompactGroup : string option -> group
  method virtual getCompactRoom : string option -> room
  method virtual getContact : string option -> contact
  method virtual getContacts : string list option -> contact list
  method virtual getContactWithFriendRequestStatus : string option -> contact
  method virtual getCountryWithRequestIp : string
  method virtual getFavoriteMids : string list
  method virtual getGroup : string option -> group
  method virtual getGroupIdsInvited : string list
  method virtual getGroupIdsJoined : string list
  method virtual getGroups : string list option -> group list
  method virtual getHiddenContactMids : string list
  method virtual getIdentityIdentifier : string
  method virtual getLastAnnouncementIndex : Int32.t
  method virtual getLastOpRevision : Int64.t
  method virtual getSuggestRevisions : suggestDictionaryRevisions
  method virtual getPreviousMessagesV2WithReadCount : string option -> messageBoxV2MessageId option -> Int32.t option -> message list
  method virtual getMessageBox : string option -> string option -> Int32.t option -> tMessageBox
  method virtual getMessageBoxCompactWrapUp : string option -> tMessageBoxWrapUp
  method virtual getMessageBoxCompactWrapUpList : Int32.t option -> Int32.t option -> tMessageBoxWrapUpResponse
  method virtual getMessageBoxList : string option -> Int32.t option -> tMessageBox list
  method virtual getMessageBoxListByStatus : string option -> Int32.t option -> Int32.t option -> tMessageBox list
  method virtual getMessageBoxWrapUp : string option -> tMessageBoxWrapUp
  method virtual getMessageBoxWrapUpList : Int32.t option -> Int32.t option -> tMessageBoxWrapUpResponse
  method virtual getMessagesBySequenceNumber : string option -> string option -> Int64.t option -> Int64.t option -> message list
  method virtual getNextMessages : string option -> Int64.t option -> Int32.t option -> message list
  method virtual getNotificationPolicy : CarrierCode.t option -> NotificationType.t list
  method virtual getPreviousMessages : string option -> Int64.t option -> Int32.t option -> message list
  method virtual getProfile : profile
  method virtual getProximityMatchCandidateList : string option -> proximityMatchCandidateResult
  method virtual getProximityMatchCandidates : string option -> (contact,bool) Hashtbl.t
  method virtual getRecentMessages : string option -> Int32.t option -> message list
  method virtual getRecommendationIds : string list
  method virtual getRoom : string option -> room
  method virtual getRSAKeyInfo : IdentityProvider.t option -> rSAKey
  method virtual getServerTime : Int64.t
  method virtual getSessions : loginSession list
  method virtual getSettings : settings
  method virtual getGroupsV2 : string list option -> group list
  method virtual getSettingsAttributes : Int32.t option -> settings
  method virtual getSystemConfiguration : systemConfiguration
  method virtual getUserTicket : ticket
  method virtual getWapInvitation : string option -> wapInvitation
  method virtual invalidateUserTicket : unit
  method virtual inviteFriendsBySms : string list option -> unit
  method virtual inviteIntoGroup : Int32.t option -> string option -> string list option -> unit
  method virtual inviteIntoRoom : Int32.t option -> string option -> string list option -> unit
  method virtual inviteViaEmail : Int32.t option -> string option -> string option -> unit
  method virtual isIdentityIdentifierAvailable : IdentityProvider.t option -> string option -> bool
  method virtual isUseridAvailable : string option -> bool
  method virtual kickoutFromGroup : Int32.t option -> string option -> string list option -> unit
  method virtual reissueGroupTicket : string option -> string
  method virtual findGroupByTicket : string option -> group
  method virtual leaveGroup : Int32.t option -> string option -> unit
  method virtual leaveRoom : Int32.t option -> string option -> unit
  method virtual loginWithIdentityCredential : IdentityProvider.t option -> string option -> string option -> bool option -> string option -> string option -> string option -> string
  method virtual loginWithIdentityCredentialForCertificate : IdentityProvider.t option -> string option -> string option -> bool option -> string option -> string option -> string option -> loginResult
  method virtual loginWithVerifier : string option -> string
  method virtual loginWithVerifierForCerificate : string option -> loginResult
  method virtual loginWithVerifierForCertificate : string option -> loginResult
  method virtual logout : unit
  method virtual logoutSession : string option -> unit
  method virtual noop : unit
  method virtual notifiedRedirect : (string,string) Hashtbl.t option -> unit
  method virtual notifyBuddyOnAir : Int32.t option -> string list option -> (string,string) Hashtbl.t
  method virtual notifyIndividualEvent : NotificationStatus.t option -> string list option -> unit
  method virtual notifyInstalled : string option -> string option -> unit
  method virtual notifyRegistrationComplete : string option -> string option -> unit
  method virtual notifySleep : Int64.t option -> Int32.t option -> unit
  method virtual notifyUpdated : Int64.t option -> deviceInfo option -> unit
  method virtual openProximityMatch : location option -> string
  method virtual registerBuddyUser : string option -> string option -> string
  method virtual registerBuddyUserid : Int32.t option -> string option -> unit
  method virtual registerDevice : string option -> string
  method virtual registerDeviceWithIdentityCredential : string option -> IdentityProvider.t option -> string option -> string option -> string
  method virtual registerDeviceWithoutPhoneNumber : string option -> string option -> deviceInfo option -> string
  method virtual registerDeviceWithoutPhoneNumberWithIdentityCredential : string option -> string option -> deviceInfo option -> IdentityProvider.t option -> string option -> string option -> string option -> string option -> string
  method virtual registerUserid : Int32.t option -> string option -> bool
  method virtual registerWapDevice : string option -> string option -> string option -> deviceInfo option -> string
  method virtual registerWithExistingSnsIdAndIdentityCredential : identityCredential option -> string option -> string option -> deviceInfo option -> string
  method virtual registerWithSnsId : SnsIdType.t option -> string option -> string option -> string option -> deviceInfo option -> string option -> registerWithSnsIdResult
  method virtual registerWithSnsIdAndIdentityCredential : SnsIdType.t option -> string option -> identityCredential option -> string option -> string option -> deviceInfo option -> string
  method virtual reissueDeviceCredential : string
  method virtual reissueUserTicket : Int64.t option -> Int32.t option -> string
  method virtual getMessageReadRange : string list option -> tMessageReadRange list
  method virtual rejectGroupInvitation : Int32.t option -> string option -> unit
  method virtual releaseSession : unit
  method virtual removeAllMessages : Int32.t option -> string option -> unit
  method virtual removeBuddyLocation : string option -> Int32.t option -> unit
  method virtual removeMessage : string option -> bool
  method virtual makeUserAddMyselfAsContact : string option -> contactTransition
  method virtual removeMessageFromMyHome : string option -> bool
  method virtual removeSnsId : SnsIdType.t option -> string
  method virtual report : Int64.t option -> SyncCategory.t option -> string option -> unit
  method virtual reportContacts : Int64.t option -> SyncCategory.t option -> contactReport list option -> SyncActionType.t option -> contactReportResult list
  method virtual reportGroups : Int64.t option -> group list option -> unit
  method virtual reportProfile : Int64.t option -> profile option -> unit
  method virtual reportRooms : Int64.t option -> room list option -> unit
  method virtual findAndAddContactByMetaTag : Int32.t option -> string option -> string option -> contact
  method virtual reportSettings : Int64.t option -> settings option -> unit
  method virtual reportSpam : string option -> string list option -> SpammerReason.t list option -> string list option -> string list option -> string list option -> unit
  method virtual reportSpammer : string option -> SpammerReason.t list option -> string list option -> unit
  method virtual requestAccountPasswordReset : IdentityProvider.t option -> string option -> string option -> unit
  method virtual requestEmailConfirmation : emailConfirmation option -> emailConfirmationSession
  method virtual requestIdentityUnbind : IdentityProvider.t option -> string option -> unit
  method virtual resendEmailConfirmation : string option -> emailConfirmationSession
  method virtual resendPinCode : string option -> unit
  method virtual resendPinCodeBySMS : string option -> unit
  method virtual sendChatChecked : Int32.t option -> string option -> string option -> unit
  method virtual sendMessageAwaitCommit : Int32.t option -> message option -> commitMessageResult
  method virtual sendChatRemoved : Int32.t option -> string option -> string option -> unit
  method virtual sendContentPreviewUpdated : Int32.t option -> string option -> string list option -> (string,string) Hashtbl.t
  method virtual sendContentReceipt : Int32.t option -> string option -> string option -> unit
  method virtual sendDummyPush : unit
  method virtual removeE2EEPublicKey : e2EEPublicKey option -> unit
  method virtual negotiateE2EEPublicKey : string option -> e2EENegotiationResult
  method virtual getE2EEPublicKey : string option -> Int32.t option -> Int32.t option -> e2EEPublicKey
  method virtual requestE2EEKeyExchange : Int32.t option -> string option -> e2EEPublicKey option -> string option -> unit
  method virtual getLastE2EEPublicKeys : string option -> (string,e2EEPublicKey) Hashtbl.t
  method virtual registerE2EEPublicKey : Int32.t option -> e2EEPublicKey option -> e2EEPublicKey
  method virtual getE2EEPublicKeys : e2EEPublicKey list
  method virtual getE2EEPublicKeysEx : bool option -> e2EEPublicKey list
  method virtual getReadMessageOpsInBulk : string list option -> operation list
  method virtual sendEvent : Int32.t option -> message option -> message
  method virtual sendMessage : Int32.t option -> message option -> message
  method virtual sendMessageIgnored : Int32.t option -> string option -> string list option -> unit
  method virtual sendMessageReceipt : Int32.t option -> string option -> string list option -> unit
  method virtual findContactByMetaTag : string option -> string option -> contact
  method virtual sendMessageToMyHome : Int32.t option -> message option -> message
  method virtual setBuddyLocation : string option -> Int32.t option -> geolocation option -> unit
  method virtual setIdentityCredential : string option -> string option -> IdentityProvider.t option -> unit
  method virtual setNotificationsEnabled : Int32.t option -> MIDType.t option -> string option -> bool option -> unit
  method virtual startUpdateVerification : string option -> CarrierCode.t option -> string option -> string option -> deviceInfo option -> string option -> string option -> verificationSessionData
  method virtual startVerification : string option -> CarrierCode.t option -> string option -> string option -> deviceInfo option -> string option -> string option -> string option -> sIMInfo option -> string option -> verificationSessionData
  method virtual updateGroupPreferenceAttribute : Int32.t option -> string option -> (GroupPreferenceAttribute.t,string) Hashtbl.t option -> unit
  method virtual createRoomV2 : Int32.t option -> string list option -> room
  method virtual storeUpdateProfileAttribute : Int32.t option -> ProfileAttribute.t option -> string option -> unit
  method virtual syncContactBySnsIds : Int32.t option -> snsFriendModification list option -> snsFriendContactRegistration list
  method virtual syncContacts : Int32.t option -> contactModification list option -> (string,contactRegistration) Hashtbl.t
  method virtual trySendMessage : Int32.t option -> message option -> message
  method virtual getNextMessagesV2 : string option -> messageBoxV2MessageId option -> Int32.t option -> message list
  method virtual getMessageBoxCompactWrapUpV2 : string option -> tMessageBoxWrapUp
  method virtual getRecentMessagesV2 : string option -> Int32.t option -> message list
  method virtual validateContactsOnBot : string list option -> (string,string) Hashtbl.t
  method virtual tryFriendRequest : string option -> FriendRequestMethod.t option -> string option -> unit
  method virtual unblockContact : Int32.t option -> string option -> unit
  method virtual unblockRecommendation : Int32.t option -> string option -> unit
  method virtual unregisterUserAndDevice : string
  method virtual updateApnsDeviceToken : string option -> unit
  method virtual updateBuddySetting : string option -> string option -> unit
  method virtual updateC2DMRegistrationId : string option -> unit
  method virtual updateContactSetting : Int32.t option -> string option -> ContactSetting.t option -> string option -> unit
  method virtual updateCustomModeSettings : CustomMode.t option -> (string,string) Hashtbl.t option -> unit
  method virtual updateDeviceInfo : string option -> deviceInfo option -> unit
  method virtual updateGroup : Int32.t option -> group option -> unit
  method virtual updateNotificationToken : NotificationType.t option -> string option -> unit
  method virtual updateNotificationTokenWithBytes : NotificationType.t option -> string option -> unit
  method virtual updateProfile : Int32.t option -> profile option -> unit
  method virtual updateProfileAttribute : Int32.t option -> ProfileAttribute.t option -> string option -> unit
  method virtual updateProfileAttributes : Int32.t option -> updateProfileAttributesRequest option -> unit
  method virtual updateRegion : string option -> unit
  method virtual updateSettings : Int32.t option -> settings option -> unit
  method virtual updateSettings2 : Int32.t option -> settings option -> Int32.t
  method virtual updateSettingsAttribute : Int32.t option -> SettingsAttribute.t option -> string option -> unit
  method virtual updateSettingsAttributes : Int32.t option -> Int32.t option -> settings option -> Int32.t
  method virtual verifyIdentityCredential : IdentityProvider.t option -> string option -> string option -> unit
  method virtual verifyIdentityCredentialWithResult : identityCredential option -> userAuthStatus
  method virtual verifyPhone : string option -> string option -> string option -> VerificationResult.t
  method virtual verifyQrcode : string option -> string option -> string
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method searchCollection query param = 
    self#send_searchCollection query param;
    self#recv_searchCollection
  method private send_searchCollection query param = 
    oprot#writeMessageBegin ("searchCollection", Protocol.CALL, seqid);
    let args = new searchCollection_args in
      args#set_query query;
      args#set_param param;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_searchCollection  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_searchCollection_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "searchCollection failed: unknown result")))
  method getChatRoomAnnouncementsBulk chatRoomMids = 
    self#send_getChatRoomAnnouncementsBulk chatRoomMids;
    self#recv_getChatRoomAnnouncementsBulk
  method private send_getChatRoomAnnouncementsBulk chatRoomMids = 
    oprot#writeMessageBegin ("getChatRoomAnnouncementsBulk", Protocol.CALL, seqid);
    let args = new getChatRoomAnnouncementsBulk_args in
      args#set_chatRoomMids chatRoomMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getChatRoomAnnouncementsBulk  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getChatRoomAnnouncementsBulk_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getChatRoomAnnouncementsBulk failed: unknown result")))
  method getChatRoomAnnouncements chatRoomMid = 
    self#send_getChatRoomAnnouncements chatRoomMid;
    self#recv_getChatRoomAnnouncements
  method private send_getChatRoomAnnouncements chatRoomMid = 
    oprot#writeMessageBegin ("getChatRoomAnnouncements", Protocol.CALL, seqid);
    let args = new getChatRoomAnnouncements_args in
      args#set_chatRoomMid chatRoomMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getChatRoomAnnouncements  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getChatRoomAnnouncements_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getChatRoomAnnouncements failed: unknown result")))
  method createChatRoomAnnouncement reqSeq chatRoomMid type contents = 
    self#send_createChatRoomAnnouncement reqSeq chatRoomMid type contents;
    self#recv_createChatRoomAnnouncement
  method private send_createChatRoomAnnouncement reqSeq chatRoomMid type contents = 
    oprot#writeMessageBegin ("createChatRoomAnnouncement", Protocol.CALL, seqid);
    let args = new createChatRoomAnnouncement_args in
      args#set_reqSeq reqSeq;
      args#set_chatRoomMid chatRoomMid;
      args#set_type type;
      args#set_contents contents;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createChatRoomAnnouncement  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createChatRoomAnnouncement_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createChatRoomAnnouncement failed: unknown result")))
  method removeChatRoomAnnouncement reqSeq chatRoomMid announcementSeq = 
    self#send_removeChatRoomAnnouncement reqSeq chatRoomMid announcementSeq;
    self#recv_removeChatRoomAnnouncement
  method private send_removeChatRoomAnnouncement reqSeq chatRoomMid announcementSeq = 
    oprot#writeMessageBegin ("removeChatRoomAnnouncement", Protocol.CALL, seqid);
    let args = new removeChatRoomAnnouncement_args in
      args#set_reqSeq reqSeq;
      args#set_chatRoomMid chatRoomMid;
      args#set_announcementSeq announcementSeq;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeChatRoomAnnouncement  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeChatRoomAnnouncement_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method unsendMessage seq messageId = 
    self#send_unsendMessage seq messageId;
    self#recv_unsendMessage
  method private send_unsendMessage seq messageId = 
    oprot#writeMessageBegin ("unsendMessage", Protocol.CALL, seqid);
    let args = new unsendMessage_args in
      args#set_seq seq;
      args#set_messageId messageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_unsendMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_unsendMessage_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method getGroupWithoutMembers groupId = 
    self#send_getGroupWithoutMembers groupId;
    self#recv_getGroupWithoutMembers
  method private send_getGroupWithoutMembers groupId = 
    oprot#writeMessageBegin ("getGroupWithoutMembers", Protocol.CALL, seqid);
    let args = new getGroupWithoutMembers_args in
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupWithoutMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupWithoutMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupWithoutMembers failed: unknown result")))
  method requestResendMessage reqSeq senderMid messageId = 
    self#send_requestResendMessage reqSeq senderMid messageId;
    self#recv_requestResendMessage
  method private send_requestResendMessage reqSeq senderMid messageId = 
    oprot#writeMessageBegin ("requestResendMessage", Protocol.CALL, seqid);
    let args = new requestResendMessage_args in
      args#set_reqSeq reqSeq;
      args#set_senderMid senderMid;
      args#set_messageId messageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_requestResendMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_requestResendMessage_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method respondResendMessage reqSeq receiverMid originalMessageId resendMessage errorCode = 
    self#send_respondResendMessage reqSeq receiverMid originalMessageId resendMessage errorCode;
    self#recv_respondResendMessage
  method private send_respondResendMessage reqSeq receiverMid originalMessageId resendMessage errorCode = 
    oprot#writeMessageBegin ("respondResendMessage", Protocol.CALL, seqid);
    let args = new respondResendMessage_args in
      args#set_reqSeq reqSeq;
      args#set_receiverMid receiverMid;
      args#set_originalMessageId originalMessageId;
      args#set_resendMessage resendMessage;
      args#set_errorCode errorCode;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_respondResendMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_respondResendMessage_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method acceptGroupInvitation reqSeq groupId = 
    self#send_acceptGroupInvitation reqSeq groupId;
    self#recv_acceptGroupInvitation
  method private send_acceptGroupInvitation reqSeq groupId = 
    oprot#writeMessageBegin ("acceptGroupInvitation", Protocol.CALL, seqid);
    let args = new acceptGroupInvitation_args in
      args#set_reqSeq reqSeq;
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_acceptGroupInvitation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_acceptGroupInvitation_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method acceptGroupInvitationByTicket reqSeq GroupMid ticketId = 
    self#send_acceptGroupInvitationByTicket reqSeq groupMid ticketId;
    self#recv_acceptGroupInvitationByTicket
  method private send_acceptGroupInvitationByTicket reqSeq GroupMid ticketId = 
    oprot#writeMessageBegin ("acceptGroupInvitationByTicket", Protocol.CALL, seqid);
    let args = new acceptGroupInvitationByTicket_args in
      args#set_reqSeq reqSeq;
      args#set_GroupMid GroupMid;
      args#set_ticketId ticketId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_acceptGroupInvitationByTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_acceptGroupInvitationByTicket_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method acceptProximityMatches sessionId ids = 
    self#send_acceptProximityMatches sessionId ids;
    self#recv_acceptProximityMatches
  method private send_acceptProximityMatches sessionId ids = 
    oprot#writeMessageBegin ("acceptProximityMatches", Protocol.CALL, seqid);
    let args = new acceptProximityMatches_args in
      args#set_sessionId sessionId;
      args#set_ids ids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_acceptProximityMatches  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_acceptProximityMatches_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method acquireCallRoute to = 
    self#send_acquireCallRoute to;
    self#recv_acquireCallRoute
  method private send_acquireCallRoute to = 
    oprot#writeMessageBegin ("acquireCallRoute", Protocol.CALL, seqid);
    let args = new acquireCallRoute_args in
      args#set_to to;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_acquireCallRoute  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_acquireCallRoute_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "acquireCallRoute failed: unknown result")))
  method acquireCallTicket to = 
    self#send_acquireCallTicket to;
    self#recv_acquireCallTicket
  method private send_acquireCallTicket to = 
    oprot#writeMessageBegin ("acquireCallTicket", Protocol.CALL, seqid);
    let args = new acquireCallTicket_args in
      args#set_to to;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_acquireCallTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_acquireCallTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "acquireCallTicket failed: unknown result")))
  method acquireEncryptedAccessToken featureType = 
    self#send_acquireEncryptedAccessToken featureType;
    self#recv_acquireEncryptedAccessToken
  method private send_acquireEncryptedAccessToken featureType = 
    oprot#writeMessageBegin ("acquireEncryptedAccessToken", Protocol.CALL, seqid);
    let args = new acquireEncryptedAccessToken_args in
      args#set_featureType featureType;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_acquireEncryptedAccessToken  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_acquireEncryptedAccessToken_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "acquireEncryptedAccessToken failed: unknown result")))
  method addSnsId snsIdType snsAccessToken = 
    self#send_addSnsId snsIdType snsAccessToken;
    self#recv_addSnsId
  method private send_addSnsId snsIdType snsAccessToken = 
    oprot#writeMessageBegin ("addSnsId", Protocol.CALL, seqid);
    let args = new addSnsId_args in
      args#set_snsIdType snsIdType;
      args#set_snsAccessToken snsAccessToken;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_addSnsId  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_addSnsId_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "addSnsId failed: unknown result")))
  method blockContact reqSeq id = 
    self#send_blockContact reqSeq id;
    self#recv_blockContact
  method private send_blockContact reqSeq id = 
    oprot#writeMessageBegin ("blockContact", Protocol.CALL, seqid);
    let args = new blockContact_args in
      args#set_reqSeq reqSeq;
      args#set_id id;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_blockContact  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_blockContact_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method blockRecommendation reqSeq id = 
    self#send_blockRecommendation reqSeq id;
    self#recv_blockRecommendation
  method private send_blockRecommendation reqSeq id = 
    oprot#writeMessageBegin ("blockRecommendation", Protocol.CALL, seqid);
    let args = new blockRecommendation_args in
      args#set_reqSeq reqSeq;
      args#set_id id;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_blockRecommendation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_blockRecommendation_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method cancelGroupInvitation reqSeq groupId contactIds = 
    self#send_cancelGroupInvitation reqSeq groupId contactIds;
    self#recv_cancelGroupInvitation
  method private send_cancelGroupInvitation reqSeq groupId contactIds = 
    oprot#writeMessageBegin ("cancelGroupInvitation", Protocol.CALL, seqid);
    let args = new cancelGroupInvitation_args in
      args#set_reqSeq reqSeq;
      args#set_groupId groupId;
      args#set_contactIds contactIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_cancelGroupInvitation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_cancelGroupInvitation_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method changeVerificationMethod sessionId method = 
    self#send_changeVerificationMethod sessionId method;
    self#recv_changeVerificationMethod
  method private send_changeVerificationMethod sessionId method = 
    oprot#writeMessageBegin ("changeVerificationMethod", Protocol.CALL, seqid);
    let args = new changeVerificationMethod_args in
      args#set_sessionId sessionId;
      args#set_method method;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_changeVerificationMethod  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_changeVerificationMethod_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "changeVerificationMethod failed: unknown result")))
  method clearIdentityCredential  = 
    self#send_clearIdentityCredential;
    self#recv_clearIdentityCredential
  method private send_clearIdentityCredential  = 
    oprot#writeMessageBegin ("clearIdentityCredential", Protocol.CALL, seqid);
    let args = new clearIdentityCredential_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_clearIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_clearIdentityCredential_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method clearMessageBox channelId messageBoxId = 
    self#send_clearMessageBox channelId messageBoxId;
    self#recv_clearMessageBox
  method private send_clearMessageBox channelId messageBoxId = 
    oprot#writeMessageBegin ("clearMessageBox", Protocol.CALL, seqid);
    let args = new clearMessageBox_args in
      args#set_channelId channelId;
      args#set_messageBoxId messageBoxId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_clearMessageBox  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_clearMessageBox_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method closeProximityMatch sessionId = 
    self#send_closeProximityMatch sessionId;
    self#recv_closeProximityMatch
  method private send_closeProximityMatch sessionId = 
    oprot#writeMessageBegin ("closeProximityMatch", Protocol.CALL, seqid);
    let args = new closeProximityMatch_args in
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_closeProximityMatch  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_closeProximityMatch_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method commitSendMessage seq messageId receiverMids = 
    self#send_commitSendMessage seq messageId receiverMids;
    self#recv_commitSendMessage
  method private send_commitSendMessage seq messageId receiverMids = 
    oprot#writeMessageBegin ("commitSendMessage", Protocol.CALL, seqid);
    let args = new commitSendMessage_args in
      args#set_seq seq;
      args#set_messageId messageId;
      args#set_receiverMids receiverMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_commitSendMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_commitSendMessage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "commitSendMessage failed: unknown result")))
  method commitSendMessages seq messageIds receiverMids = 
    self#send_commitSendMessages seq messageIds receiverMids;
    self#recv_commitSendMessages
  method private send_commitSendMessages seq messageIds receiverMids = 
    oprot#writeMessageBegin ("commitSendMessages", Protocol.CALL, seqid);
    let args = new commitSendMessages_args in
      args#set_seq seq;
      args#set_messageIds messageIds;
      args#set_receiverMids receiverMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_commitSendMessages  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_commitSendMessages_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "commitSendMessages failed: unknown result")))
  method commitUpdateProfile seq attrs receiverMids = 
    self#send_commitUpdateProfile seq attrs receiverMids;
    self#recv_commitUpdateProfile
  method private send_commitUpdateProfile seq attrs receiverMids = 
    oprot#writeMessageBegin ("commitUpdateProfile", Protocol.CALL, seqid);
    let args = new commitUpdateProfile_args in
      args#set_seq seq;
      args#set_attrs attrs;
      args#set_receiverMids receiverMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_commitUpdateProfile  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_commitUpdateProfile_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "commitUpdateProfile failed: unknown result")))
  method confirmEmail verifier pinCode = 
    self#send_confirmEmail verifier pinCode;
    self#recv_confirmEmail
  method private send_confirmEmail verifier pinCode = 
    oprot#writeMessageBegin ("confirmEmail", Protocol.CALL, seqid);
    let args = new confirmEmail_args in
      args#set_verifier verifier;
      args#set_pinCode pinCode;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_confirmEmail  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_confirmEmail_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method createGroup seq name contactIds = 
    self#send_createGroup seq name contactIds;
    self#recv_createGroup
  method private send_createGroup seq name contactIds = 
    oprot#writeMessageBegin ("createGroup", Protocol.CALL, seqid);
    let args = new createGroup_args in
      args#set_seq seq;
      args#set_name name;
      args#set_contactIds contactIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createGroup  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createGroup_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createGroup failed: unknown result")))
  method createQrcodeBase64Image url characterSet imageSize x y width height = 
    self#send_createQrcodeBase64Image url characterSet imageSize x y width height;
    self#recv_createQrcodeBase64Image
  method private send_createQrcodeBase64Image url characterSet imageSize x y width height = 
    oprot#writeMessageBegin ("createQrcodeBase64Image", Protocol.CALL, seqid);
    let args = new createQrcodeBase64Image_args in
      args#set_url url;
      args#set_characterSet characterSet;
      args#set_imageSize imageSize;
      args#set_x x;
      args#set_y y;
      args#set_width width;
      args#set_height height;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createQrcodeBase64Image  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createQrcodeBase64Image_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createQrcodeBase64Image failed: unknown result")))
  method createRoom reqSeq contactIds = 
    self#send_createRoom reqSeq contactIds;
    self#recv_createRoom
  method private send_createRoom reqSeq contactIds = 
    oprot#writeMessageBegin ("createRoom", Protocol.CALL, seqid);
    let args = new createRoom_args in
      args#set_reqSeq reqSeq;
      args#set_contactIds contactIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createRoom  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createRoom_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createRoom failed: unknown result")))
  method createSession  = 
    self#send_createSession;
    self#recv_createSession
  method private send_createSession  = 
    oprot#writeMessageBegin ("createSession", Protocol.CALL, seqid);
    let args = new createSession_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createSession  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createSession_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createSession failed: unknown result")))
  method fetchAnnouncements lastFetchedIndex = 
    self#send_fetchAnnouncements lastFetchedIndex;
    self#recv_fetchAnnouncements
  method private send_fetchAnnouncements lastFetchedIndex = 
    oprot#writeMessageBegin ("fetchAnnouncements", Protocol.CALL, seqid);
    let args = new fetchAnnouncements_args in
      args#set_lastFetchedIndex lastFetchedIndex;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_fetchAnnouncements  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_fetchAnnouncements_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "fetchAnnouncements failed: unknown result")))
  method fetchMessages localTs count = 
    self#send_fetchMessages localTs count;
    self#recv_fetchMessages
  method private send_fetchMessages localTs count = 
    oprot#writeMessageBegin ("fetchMessages", Protocol.CALL, seqid);
    let args = new fetchMessages_args in
      args#set_localTs localTs;
      args#set_count count;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_fetchMessages  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_fetchMessages_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "fetchMessages failed: unknown result")))
  method fetchOperations localRev count = 
    self#send_fetchOperations localRev count;
    self#recv_fetchOperations
  method private send_fetchOperations localRev count = 
    oprot#writeMessageBegin ("fetchOperations", Protocol.CALL, seqid);
    let args = new fetchOperations_args in
      args#set_localRev localRev;
      args#set_count count;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_fetchOperations  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_fetchOperations_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ShouldSyncException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "fetchOperations failed: unknown result")))
  method fetchOps localRev count globalRev individualRev = 
    self#send_fetchOps localRev count globalRev individualRev;
    self#recv_fetchOps
  method private send_fetchOps localRev count globalRev individualRev = 
    oprot#writeMessageBegin ("fetchOps", Protocol.CALL, seqid);
    let args = new fetchOps_args in
      args#set_localRev localRev;
      args#set_count count;
      args#set_globalRev globalRev;
      args#set_individualRev individualRev;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_fetchOps  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_fetchOps_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ShouldSyncException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "fetchOps failed: unknown result")))
  method findAndAddContactsByEmail reqSeq emails = 
    self#send_findAndAddContactsByEmail reqSeq emails;
    self#recv_findAndAddContactsByEmail
  method private send_findAndAddContactsByEmail reqSeq emails = 
    oprot#writeMessageBegin ("findAndAddContactsByEmail", Protocol.CALL, seqid);
    let args = new findAndAddContactsByEmail_args in
      args#set_reqSeq reqSeq;
      args#set_emails emails;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findAndAddContactsByEmail  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findAndAddContactsByEmail_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findAndAddContactsByEmail failed: unknown result")))
  method findAndAddContactsByMid reqSeq mid type reference = 
    self#send_findAndAddContactsByMid reqSeq mid type reference;
    self#recv_findAndAddContactsByMid
  method private send_findAndAddContactsByMid reqSeq mid type reference = 
    oprot#writeMessageBegin ("findAndAddContactsByMid", Protocol.CALL, seqid);
    let args = new findAndAddContactsByMid_args in
      args#set_reqSeq reqSeq;
      args#set_mid mid;
      args#set_type type;
      args#set_reference reference;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findAndAddContactsByMid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findAndAddContactsByMid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findAndAddContactsByMid failed: unknown result")))
  method findGroupByTicketV2 ticketId = 
    self#send_findGroupByTicketV2 ticketId;
    self#recv_findGroupByTicketV2
  method private send_findGroupByTicketV2 ticketId = 
    oprot#writeMessageBegin ("findGroupByTicketV2", Protocol.CALL, seqid);
    let args = new findGroupByTicketV2_args in
      args#set_ticketId ticketId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findGroupByTicketV2  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findGroupByTicketV2_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findGroupByTicketV2 failed: unknown result")))
  method findAndAddContactsByPhone reqSeq phones = 
    self#send_findAndAddContactsByPhone reqSeq phones;
    self#recv_findAndAddContactsByPhone
  method private send_findAndAddContactsByPhone reqSeq phones = 
    oprot#writeMessageBegin ("findAndAddContactsByPhone", Protocol.CALL, seqid);
    let args = new findAndAddContactsByPhone_args in
      args#set_reqSeq reqSeq;
      args#set_phones phones;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findAndAddContactsByPhone  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findAndAddContactsByPhone_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findAndAddContactsByPhone failed: unknown result")))
  method getFriendRequests direction lastSeenSeqId = 
    self#send_getFriendRequests direction lastSeenSeqId;
    self#recv_getFriendRequests
  method private send_getFriendRequests direction lastSeenSeqId = 
    oprot#writeMessageBegin ("getFriendRequests", Protocol.CALL, seqid);
    let args = new getFriendRequests_args in
      args#set_direction direction;
      args#set_lastSeenSeqId lastSeenSeqId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getFriendRequests  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getFriendRequests_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getFriendRequests failed: unknown result")))
  method removeFriendRequest direction midOrEMid = 
    self#send_removeFriendRequest direction midOrEMid;
    self#recv_removeFriendRequest
  method private send_removeFriendRequest direction midOrEMid = 
    oprot#writeMessageBegin ("removeFriendRequest", Protocol.CALL, seqid);
    let args = new removeFriendRequest_args in
      args#set_direction direction;
      args#set_midOrEMid midOrEMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeFriendRequest  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeFriendRequest_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method findAndAddContactsByUserid reqSeq userid = 
    self#send_findAndAddContactsByUserid reqSeq userid;
    self#recv_findAndAddContactsByUserid
  method private send_findAndAddContactsByUserid reqSeq userid = 
    oprot#writeMessageBegin ("findAndAddContactsByUserid", Protocol.CALL, seqid);
    let args = new findAndAddContactsByUserid_args in
      args#set_reqSeq reqSeq;
      args#set_userid userid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findAndAddContactsByUserid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findAndAddContactsByUserid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findAndAddContactsByUserid failed: unknown result")))
  method findContactByUserid userid = 
    self#send_findContactByUserid userid;
    self#recv_findContactByUserid
  method private send_findContactByUserid userid = 
    oprot#writeMessageBegin ("findContactByUserid", Protocol.CALL, seqid);
    let args = new findContactByUserid_args in
      args#set_userid userid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findContactByUserid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findContactByUserid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findContactByUserid failed: unknown result")))
  method findContactByUserTicket ticketIdWithTag = 
    self#send_findContactByUserTicket ticketIdWithTag;
    self#recv_findContactByUserTicket
  method private send_findContactByUserTicket ticketIdWithTag = 
    oprot#writeMessageBegin ("findContactByUserTicket", Protocol.CALL, seqid);
    let args = new findContactByUserTicket_args in
      args#set_ticketIdWithTag ticketIdWithTag;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findContactByUserTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findContactByUserTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findContactByUserTicket failed: unknown result")))
  method findContactsByEmail emails = 
    self#send_findContactsByEmail emails;
    self#recv_findContactsByEmail
  method private send_findContactsByEmail emails = 
    oprot#writeMessageBegin ("findContactsByEmail", Protocol.CALL, seqid);
    let args = new findContactsByEmail_args in
      args#set_emails emails;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findContactsByEmail  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findContactsByEmail_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findContactsByEmail failed: unknown result")))
  method findContactsByPhone phones = 
    self#send_findContactsByPhone phones;
    self#recv_findContactsByPhone
  method private send_findContactsByPhone phones = 
    oprot#writeMessageBegin ("findContactsByPhone", Protocol.CALL, seqid);
    let args = new findContactsByPhone_args in
      args#set_phones phones;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findContactsByPhone  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findContactsByPhone_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findContactsByPhone failed: unknown result")))
  method findSnsIdUserStatus snsIdType snsAccessToken udidHash = 
    self#send_findSnsIdUserStatus snsIdType snsAccessToken udidHash;
    self#recv_findSnsIdUserStatus
  method private send_findSnsIdUserStatus snsIdType snsAccessToken udidHash = 
    oprot#writeMessageBegin ("findSnsIdUserStatus", Protocol.CALL, seqid);
    let args = new findSnsIdUserStatus_args in
      args#set_snsIdType snsIdType;
      args#set_snsAccessToken snsAccessToken;
      args#set_udidHash udidHash;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findSnsIdUserStatus  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findSnsIdUserStatus_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findSnsIdUserStatus failed: unknown result")))
  method finishUpdateVerification sessionId = 
    self#send_finishUpdateVerification sessionId;
    self#recv_finishUpdateVerification
  method private send_finishUpdateVerification sessionId = 
    oprot#writeMessageBegin ("finishUpdateVerification", Protocol.CALL, seqid);
    let args = new finishUpdateVerification_args in
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_finishUpdateVerification  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_finishUpdateVerification_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method generateUserTicket expirationTime maxUseCount = 
    self#send_generateUserTicket expirationTime maxUseCount;
    self#recv_generateUserTicket
  method private send_generateUserTicket expirationTime maxUseCount = 
    oprot#writeMessageBegin ("generateUserTicket", Protocol.CALL, seqid);
    let args = new generateUserTicket_args in
      args#set_expirationTime expirationTime;
      args#set_maxUseCount maxUseCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_generateUserTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_generateUserTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "generateUserTicket failed: unknown result")))
  method destroyMessage seq chatId messageId sessionId = 
    self#send_destroyMessage seq chatId messageId sessionId;
    self#recv_destroyMessage
  method private send_destroyMessage seq chatId messageId sessionId = 
    oprot#writeMessageBegin ("destroyMessage", Protocol.CALL, seqid);
    let args = new destroyMessage_args in
      args#set_seq seq;
      args#set_chatId chatId;
      args#set_messageId messageId;
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_destroyMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_destroyMessage_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method getAcceptedProximityMatches sessionId = 
    self#send_getAcceptedProximityMatches sessionId;
    self#recv_getAcceptedProximityMatches
  method private send_getAcceptedProximityMatches sessionId = 
    oprot#writeMessageBegin ("getAcceptedProximityMatches", Protocol.CALL, seqid);
    let args = new getAcceptedProximityMatches_args in
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getAcceptedProximityMatches  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getAcceptedProximityMatches_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getAcceptedProximityMatches failed: unknown result")))
  method getActiveBuddySubscriberIds  = 
    self#send_getActiveBuddySubscriberIds;
    self#recv_getActiveBuddySubscriberIds
  method private send_getActiveBuddySubscriberIds  = 
    oprot#writeMessageBegin ("getActiveBuddySubscriberIds", Protocol.CALL, seqid);
    let args = new getActiveBuddySubscriberIds_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getActiveBuddySubscriberIds  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getActiveBuddySubscriberIds_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getActiveBuddySubscriberIds failed: unknown result")))
  method getAllContactIds  = 
    self#send_getAllContactIds;
    self#recv_getAllContactIds
  method private send_getAllContactIds  = 
    oprot#writeMessageBegin ("getAllContactIds", Protocol.CALL, seqid);
    let args = new getAllContactIds_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getAllContactIds  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getAllContactIds_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getAllContactIds failed: unknown result")))
  method getAuthQrcode keepLoggedIn systemName = 
    self#send_getAuthQrcode keepLoggedIn systemName;
    self#recv_getAuthQrcode
  method private send_getAuthQrcode keepLoggedIn systemName = 
    oprot#writeMessageBegin ("getAuthQrcode", Protocol.CALL, seqid);
    let args = new getAuthQrcode_args in
      args#set_keepLoggedIn keepLoggedIn;
      args#set_systemName systemName;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getAuthQrcode  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getAuthQrcode_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getAuthQrcode failed: unknown result")))
  method getBlockedContactIds  = 
    self#send_getBlockedContactIds;
    self#recv_getBlockedContactIds
  method private send_getBlockedContactIds  = 
    oprot#writeMessageBegin ("getBlockedContactIds", Protocol.CALL, seqid);
    let args = new getBlockedContactIds_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBlockedContactIds  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBlockedContactIds_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBlockedContactIds failed: unknown result")))
  method registerWithPhoneNumber sessionId migrationPincodeSessionId = 
    self#send_registerWithPhoneNumber sessionId migrationPincodeSessionId;
    self#recv_registerWithPhoneNumber
  method private send_registerWithPhoneNumber sessionId migrationPincodeSessionId = 
    oprot#writeMessageBegin ("registerWithPhoneNumber", Protocol.CALL, seqid);
    let args = new registerWithPhoneNumber_args in
      args#set_sessionId sessionId;
      args#set_migrationPincodeSessionId migrationPincodeSessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerWithPhoneNumber  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerWithPhoneNumber_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerWithPhoneNumber failed: unknown result")))
  method registerWithPhoneNumberAndPassword sessionId keynm encrypted = 
    self#send_registerWithPhoneNumberAndPassword sessionId keynm encrypted;
    self#recv_registerWithPhoneNumberAndPassword
  method private send_registerWithPhoneNumberAndPassword sessionId keynm encrypted = 
    oprot#writeMessageBegin ("registerWithPhoneNumberAndPassword", Protocol.CALL, seqid);
    let args = new registerWithPhoneNumberAndPassword_args in
      args#set_sessionId sessionId;
      args#set_keynm keynm;
      args#set_encrypted encrypted;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerWithPhoneNumberAndPassword  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerWithPhoneNumberAndPassword_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerWithPhoneNumberAndPassword failed: unknown result")))
  method getAnalyticsInfo  = 
    self#send_getAnalyticsInfo;
    self#recv_getAnalyticsInfo
  method private send_getAnalyticsInfo  = 
    oprot#writeMessageBegin ("getAnalyticsInfo", Protocol.CALL, seqid);
    let args = new getAnalyticsInfo_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getAnalyticsInfo  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getAnalyticsInfo_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getAnalyticsInfo failed: unknown result")))
  method reportClientStatistics reqSeq category count = 
    self#send_reportClientStatistics reqSeq category count;
    self#recv_reportClientStatistics
  method private send_reportClientStatistics reqSeq category count = 
    oprot#writeMessageBegin ("reportClientStatistics", Protocol.CALL, seqid);
    let args = new reportClientStatistics_args in
      args#set_reqSeq reqSeq;
      args#set_category category;
      args#set_count count;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportClientStatistics  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportClientStatistics_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method verifyPhoneNumberForLogin verifierFromPhone pinCodeForPhone verifierFromLogin = 
    self#send_verifyPhoneNumberForLogin verifierFromPhone pinCodeForPhone verifierFromLogin;
    self#recv_verifyPhoneNumberForLogin
  method private send_verifyPhoneNumberForLogin verifierFromPhone pinCodeForPhone verifierFromLogin = 
    oprot#writeMessageBegin ("verifyPhoneNumberForLogin", Protocol.CALL, seqid);
    let args = new verifyPhoneNumberForLogin_args in
      args#set_verifierFromPhone verifierFromPhone;
      args#set_pinCodeForPhone pinCodeForPhone;
      args#set_verifierFromLogin verifierFromLogin;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_verifyPhoneNumberForLogin  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_verifyPhoneNumberForLogin_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "verifyPhoneNumberForLogin failed: unknown result")))
  method verifyPhoneNumber sessionId pinCode udidHash migrationPincodeSessionId oldUdidHash = 
    self#send_verifyPhoneNumber sessionId pinCode udidHash migrationPincodeSessionId oldUdidHash;
    self#recv_verifyPhoneNumber
  method private send_verifyPhoneNumber sessionId pinCode udidHash migrationPincodeSessionId oldUdidHash = 
    oprot#writeMessageBegin ("verifyPhoneNumber", Protocol.CALL, seqid);
    let args = new verifyPhoneNumber_args in
      args#set_sessionId sessionId;
      args#set_pinCode pinCode;
      args#set_udidHash udidHash;
      args#set_migrationPincodeSessionId migrationPincodeSessionId;
      args#set_oldUdidHash oldUdidHash;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_verifyPhoneNumber  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_verifyPhoneNumber_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "verifyPhoneNumber failed: unknown result")))
  method getBlockedContactIdsByRange start count = 
    self#send_getBlockedContactIdsByRange start count;
    self#recv_getBlockedContactIdsByRange
  method private send_getBlockedContactIdsByRange start count = 
    oprot#writeMessageBegin ("getBlockedContactIdsByRange", Protocol.CALL, seqid);
    let args = new getBlockedContactIdsByRange_args in
      args#set_start start;
      args#set_count count;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBlockedContactIdsByRange  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBlockedContactIdsByRange_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBlockedContactIdsByRange failed: unknown result")))
  method getBlockedRecommendationIds  = 
    self#send_getBlockedRecommendationIds;
    self#recv_getBlockedRecommendationIds
  method private send_getBlockedRecommendationIds  = 
    oprot#writeMessageBegin ("getBlockedRecommendationIds", Protocol.CALL, seqid);
    let args = new getBlockedRecommendationIds_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBlockedRecommendationIds  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBlockedRecommendationIds_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBlockedRecommendationIds failed: unknown result")))
  method getBuddyBlockerIds  = 
    self#send_getBuddyBlockerIds;
    self#recv_getBuddyBlockerIds
  method private send_getBuddyBlockerIds  = 
    oprot#writeMessageBegin ("getBuddyBlockerIds", Protocol.CALL, seqid);
    let args = new getBuddyBlockerIds_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBuddyBlockerIds  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBuddyBlockerIds_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBuddyBlockerIds failed: unknown result")))
  method getBuddyLocation mid index = 
    self#send_getBuddyLocation mid index;
    self#recv_getBuddyLocation
  method private send_getBuddyLocation mid index = 
    oprot#writeMessageBegin ("getBuddyLocation", Protocol.CALL, seqid);
    let args = new getBuddyLocation_args in
      args#set_mid mid;
      args#set_index index;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBuddyLocation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBuddyLocation_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBuddyLocation failed: unknown result")))
  method getCompactContactsModifiedSince timestamp = 
    self#send_getCompactContactsModifiedSince timestamp;
    self#recv_getCompactContactsModifiedSince
  method private send_getCompactContactsModifiedSince timestamp = 
    oprot#writeMessageBegin ("getCompactContactsModifiedSince", Protocol.CALL, seqid);
    let args = new getCompactContactsModifiedSince_args in
      args#set_timestamp timestamp;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCompactContactsModifiedSince  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCompactContactsModifiedSince_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCompactContactsModifiedSince failed: unknown result")))
  method getCompactGroup groupId = 
    self#send_getCompactGroup groupId;
    self#recv_getCompactGroup
  method private send_getCompactGroup groupId = 
    oprot#writeMessageBegin ("getCompactGroup", Protocol.CALL, seqid);
    let args = new getCompactGroup_args in
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCompactGroup  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCompactGroup_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCompactGroup failed: unknown result")))
  method getCompactRoom roomId = 
    self#send_getCompactRoom roomId;
    self#recv_getCompactRoom
  method private send_getCompactRoom roomId = 
    oprot#writeMessageBegin ("getCompactRoom", Protocol.CALL, seqid);
    let args = new getCompactRoom_args in
      args#set_roomId roomId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCompactRoom  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCompactRoom_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCompactRoom failed: unknown result")))
  method getContact id = 
    self#send_getContact id;
    self#recv_getContact
  method private send_getContact id = 
    oprot#writeMessageBegin ("getContact", Protocol.CALL, seqid);
    let args = new getContact_args in
      args#set_id id;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getContact  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getContact_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getContact failed: unknown result")))
  method getContacts ids = 
    self#send_getContacts ids;
    self#recv_getContacts
  method private send_getContacts ids = 
    oprot#writeMessageBegin ("getContacts", Protocol.CALL, seqid);
    let args = new getContacts_args in
      args#set_ids ids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getContacts failed: unknown result")))
  method getContactWithFriendRequestStatus id = 
    self#send_getContactWithFriendRequestStatus id;
    self#recv_getContactWithFriendRequestStatus
  method private send_getContactWithFriendRequestStatus id = 
    oprot#writeMessageBegin ("getContactWithFriendRequestStatus", Protocol.CALL, seqid);
    let args = new getContactWithFriendRequestStatus_args in
      args#set_id id;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getContactWithFriendRequestStatus  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getContactWithFriendRequestStatus_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getContactWithFriendRequestStatus failed: unknown result")))
  method getCountryWithRequestIp  = 
    self#send_getCountryWithRequestIp;
    self#recv_getCountryWithRequestIp
  method private send_getCountryWithRequestIp  = 
    oprot#writeMessageBegin ("getCountryWithRequestIp", Protocol.CALL, seqid);
    let args = new getCountryWithRequestIp_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCountryWithRequestIp  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCountryWithRequestIp_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCountryWithRequestIp failed: unknown result")))
  method getFavoriteMids  = 
    self#send_getFavoriteMids;
    self#recv_getFavoriteMids
  method private send_getFavoriteMids  = 
    oprot#writeMessageBegin ("getFavoriteMids", Protocol.CALL, seqid);
    let args = new getFavoriteMids_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getFavoriteMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getFavoriteMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getFavoriteMids failed: unknown result")))
  method getGroup groupId = 
    self#send_getGroup groupId;
    self#recv_getGroup
  method private send_getGroup groupId = 
    oprot#writeMessageBegin ("getGroup", Protocol.CALL, seqid);
    let args = new getGroup_args in
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroup  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroup_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroup failed: unknown result")))
  method getGroupIdsInvited  = 
    self#send_getGroupIdsInvited;
    self#recv_getGroupIdsInvited
  method private send_getGroupIdsInvited  = 
    oprot#writeMessageBegin ("getGroupIdsInvited", Protocol.CALL, seqid);
    let args = new getGroupIdsInvited_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupIdsInvited  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupIdsInvited_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupIdsInvited failed: unknown result")))
  method getGroupIdsJoined  = 
    self#send_getGroupIdsJoined;
    self#recv_getGroupIdsJoined
  method private send_getGroupIdsJoined  = 
    oprot#writeMessageBegin ("getGroupIdsJoined", Protocol.CALL, seqid);
    let args = new getGroupIdsJoined_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupIdsJoined  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupIdsJoined_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupIdsJoined failed: unknown result")))
  method getGroups groupIds = 
    self#send_getGroups groupIds;
    self#recv_getGroups
  method private send_getGroups groupIds = 
    oprot#writeMessageBegin ("getGroups", Protocol.CALL, seqid);
    let args = new getGroups_args in
      args#set_groupIds groupIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroups  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroups_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroups failed: unknown result")))
  method getHiddenContactMids  = 
    self#send_getHiddenContactMids;
    self#recv_getHiddenContactMids
  method private send_getHiddenContactMids  = 
    oprot#writeMessageBegin ("getHiddenContactMids", Protocol.CALL, seqid);
    let args = new getHiddenContactMids_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getHiddenContactMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getHiddenContactMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getHiddenContactMids failed: unknown result")))
  method getIdentityIdentifier  = 
    self#send_getIdentityIdentifier;
    self#recv_getIdentityIdentifier
  method private send_getIdentityIdentifier  = 
    oprot#writeMessageBegin ("getIdentityIdentifier", Protocol.CALL, seqid);
    let args = new getIdentityIdentifier_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getIdentityIdentifier  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getIdentityIdentifier_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getIdentityIdentifier failed: unknown result")))
  method getLastAnnouncementIndex  = 
    self#send_getLastAnnouncementIndex;
    self#recv_getLastAnnouncementIndex
  method private send_getLastAnnouncementIndex  = 
    oprot#writeMessageBegin ("getLastAnnouncementIndex", Protocol.CALL, seqid);
    let args = new getLastAnnouncementIndex_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getLastAnnouncementIndex  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getLastAnnouncementIndex_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getLastAnnouncementIndex failed: unknown result")))
  method getLastOpRevision  = 
    self#send_getLastOpRevision;
    self#recv_getLastOpRevision
  method private send_getLastOpRevision  = 
    oprot#writeMessageBegin ("getLastOpRevision", Protocol.CALL, seqid);
    let args = new getLastOpRevision_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getLastOpRevision  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getLastOpRevision_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getLastOpRevision failed: unknown result")))
  method getSuggestRevisions  = 
    self#send_getSuggestRevisions;
    self#recv_getSuggestRevisions
  method private send_getSuggestRevisions  = 
    oprot#writeMessageBegin ("getSuggestRevisions", Protocol.CALL, seqid);
    let args = new getSuggestRevisions_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSuggestRevisions  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSuggestRevisions_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSuggestRevisions failed: unknown result")))
  method getPreviousMessagesV2WithReadCount messageBoxId endMessageId messagesCount = 
    self#send_getPreviousMessagesV2WithReadCount messageBoxId endMessageId messagesCount;
    self#recv_getPreviousMessagesV2WithReadCount
  method private send_getPreviousMessagesV2WithReadCount messageBoxId endMessageId messagesCount = 
    oprot#writeMessageBegin ("getPreviousMessagesV2WithReadCount", Protocol.CALL, seqid);
    let args = new getPreviousMessagesV2WithReadCount_args in
      args#set_messageBoxId messageBoxId;
      args#set_endMessageId endMessageId;
      args#set_messagesCount messagesCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPreviousMessagesV2WithReadCount  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPreviousMessagesV2WithReadCount_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPreviousMessagesV2WithReadCount failed: unknown result")))
  method getMessageBox channelId messageBoxId lastMessagesCount = 
    self#send_getMessageBox channelId messageBoxId lastMessagesCount;
    self#recv_getMessageBox
  method private send_getMessageBox channelId messageBoxId lastMessagesCount = 
    oprot#writeMessageBegin ("getMessageBox", Protocol.CALL, seqid);
    let args = new getMessageBox_args in
      args#set_channelId channelId;
      args#set_messageBoxId messageBoxId;
      args#set_lastMessagesCount lastMessagesCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessageBox  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessageBox_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessageBox failed: unknown result")))
  method getMessageBoxCompactWrapUp mid = 
    self#send_getMessageBoxCompactWrapUp mid;
    self#recv_getMessageBoxCompactWrapUp
  method private send_getMessageBoxCompactWrapUp mid = 
    oprot#writeMessageBegin ("getMessageBoxCompactWrapUp", Protocol.CALL, seqid);
    let args = new getMessageBoxCompactWrapUp_args in
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessageBoxCompactWrapUp  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessageBoxCompactWrapUp_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessageBoxCompactWrapUp failed: unknown result")))
  method getMessageBoxCompactWrapUpList start messageBoxCount = 
    self#send_getMessageBoxCompactWrapUpList start messageBoxCount;
    self#recv_getMessageBoxCompactWrapUpList
  method private send_getMessageBoxCompactWrapUpList start messageBoxCount = 
    oprot#writeMessageBegin ("getMessageBoxCompactWrapUpList", Protocol.CALL, seqid);
    let args = new getMessageBoxCompactWrapUpList_args in
      args#set_start start;
      args#set_messageBoxCount messageBoxCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessageBoxCompactWrapUpList  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessageBoxCompactWrapUpList_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessageBoxCompactWrapUpList failed: unknown result")))
  method getMessageBoxList channelId lastMessagesCount = 
    self#send_getMessageBoxList channelId lastMessagesCount;
    self#recv_getMessageBoxList
  method private send_getMessageBoxList channelId lastMessagesCount = 
    oprot#writeMessageBegin ("getMessageBoxList", Protocol.CALL, seqid);
    let args = new getMessageBoxList_args in
      args#set_channelId channelId;
      args#set_lastMessagesCount lastMessagesCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessageBoxList  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessageBoxList_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessageBoxList failed: unknown result")))
  method getMessageBoxListByStatus channelId lastMessagesCount status = 
    self#send_getMessageBoxListByStatus channelId lastMessagesCount status;
    self#recv_getMessageBoxListByStatus
  method private send_getMessageBoxListByStatus channelId lastMessagesCount status = 
    oprot#writeMessageBegin ("getMessageBoxListByStatus", Protocol.CALL, seqid);
    let args = new getMessageBoxListByStatus_args in
      args#set_channelId channelId;
      args#set_lastMessagesCount lastMessagesCount;
      args#set_status status;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessageBoxListByStatus  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessageBoxListByStatus_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessageBoxListByStatus failed: unknown result")))
  method getMessageBoxWrapUp mid = 
    self#send_getMessageBoxWrapUp mid;
    self#recv_getMessageBoxWrapUp
  method private send_getMessageBoxWrapUp mid = 
    oprot#writeMessageBegin ("getMessageBoxWrapUp", Protocol.CALL, seqid);
    let args = new getMessageBoxWrapUp_args in
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessageBoxWrapUp  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessageBoxWrapUp_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessageBoxWrapUp failed: unknown result")))
  method getMessageBoxWrapUpList start messageBoxCount = 
    self#send_getMessageBoxWrapUpList start messageBoxCount;
    self#recv_getMessageBoxWrapUpList
  method private send_getMessageBoxWrapUpList start messageBoxCount = 
    oprot#writeMessageBegin ("getMessageBoxWrapUpList", Protocol.CALL, seqid);
    let args = new getMessageBoxWrapUpList_args in
      args#set_start start;
      args#set_messageBoxCount messageBoxCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessageBoxWrapUpList  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessageBoxWrapUpList_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessageBoxWrapUpList failed: unknown result")))
  method getMessagesBySequenceNumber channelId messageBoxId startSeq endSeq = 
    self#send_getMessagesBySequenceNumber channelId messageBoxId startSeq endSeq;
    self#recv_getMessagesBySequenceNumber
  method private send_getMessagesBySequenceNumber channelId messageBoxId startSeq endSeq = 
    oprot#writeMessageBegin ("getMessagesBySequenceNumber", Protocol.CALL, seqid);
    let args = new getMessagesBySequenceNumber_args in
      args#set_channelId channelId;
      args#set_messageBoxId messageBoxId;
      args#set_startSeq startSeq;
      args#set_endSeq endSeq;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessagesBySequenceNumber  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessagesBySequenceNumber_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessagesBySequenceNumber failed: unknown result")))
  method getNextMessages messageBoxId startSeq messagesCount = 
    self#send_getNextMessages messageBoxId startSeq messagesCount;
    self#recv_getNextMessages
  method private send_getNextMessages messageBoxId startSeq messagesCount = 
    oprot#writeMessageBegin ("getNextMessages", Protocol.CALL, seqid);
    let args = new getNextMessages_args in
      args#set_messageBoxId messageBoxId;
      args#set_startSeq startSeq;
      args#set_messagesCount messagesCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getNextMessages  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getNextMessages_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getNextMessages failed: unknown result")))
  method getNotificationPolicy carrier = 
    self#send_getNotificationPolicy carrier;
    self#recv_getNotificationPolicy
  method private send_getNotificationPolicy carrier = 
    oprot#writeMessageBegin ("getNotificationPolicy", Protocol.CALL, seqid);
    let args = new getNotificationPolicy_args in
      args#set_carrier carrier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getNotificationPolicy  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getNotificationPolicy_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getNotificationPolicy failed: unknown result")))
  method getPreviousMessages messageBoxId endSeq messagesCount = 
    self#send_getPreviousMessages messageBoxId endSeq messagesCount;
    self#recv_getPreviousMessages
  method private send_getPreviousMessages messageBoxId endSeq messagesCount = 
    oprot#writeMessageBegin ("getPreviousMessages", Protocol.CALL, seqid);
    let args = new getPreviousMessages_args in
      args#set_messageBoxId messageBoxId;
      args#set_endSeq endSeq;
      args#set_messagesCount messagesCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPreviousMessages  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPreviousMessages_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPreviousMessages failed: unknown result")))
  method getProfile  = 
    self#send_getProfile;
    self#recv_getProfile
  method private send_getProfile  = 
    oprot#writeMessageBegin ("getProfile", Protocol.CALL, seqid);
    let args = new getProfile_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProfile  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProfile_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProfile failed: unknown result")))
  method getProximityMatchCandidateList sessionId = 
    self#send_getProximityMatchCandidateList sessionId;
    self#recv_getProximityMatchCandidateList
  method private send_getProximityMatchCandidateList sessionId = 
    oprot#writeMessageBegin ("getProximityMatchCandidateList", Protocol.CALL, seqid);
    let args = new getProximityMatchCandidateList_args in
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProximityMatchCandidateList  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProximityMatchCandidateList_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProximityMatchCandidateList failed: unknown result")))
  method getProximityMatchCandidates sessionId = 
    self#send_getProximityMatchCandidates sessionId;
    self#recv_getProximityMatchCandidates
  method private send_getProximityMatchCandidates sessionId = 
    oprot#writeMessageBegin ("getProximityMatchCandidates", Protocol.CALL, seqid);
    let args = new getProximityMatchCandidates_args in
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProximityMatchCandidates  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProximityMatchCandidates_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProximityMatchCandidates failed: unknown result")))
  method getRecentMessages messageBoxId messagesCount = 
    self#send_getRecentMessages messageBoxId messagesCount;
    self#recv_getRecentMessages
  method private send_getRecentMessages messageBoxId messagesCount = 
    oprot#writeMessageBegin ("getRecentMessages", Protocol.CALL, seqid);
    let args = new getRecentMessages_args in
      args#set_messageBoxId messageBoxId;
      args#set_messagesCount messagesCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getRecentMessages  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getRecentMessages_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getRecentMessages failed: unknown result")))
  method getRecommendationIds  = 
    self#send_getRecommendationIds;
    self#recv_getRecommendationIds
  method private send_getRecommendationIds  = 
    oprot#writeMessageBegin ("getRecommendationIds", Protocol.CALL, seqid);
    let args = new getRecommendationIds_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getRecommendationIds  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getRecommendationIds_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getRecommendationIds failed: unknown result")))
  method getRoom roomId = 
    self#send_getRoom roomId;
    self#recv_getRoom
  method private send_getRoom roomId = 
    oprot#writeMessageBegin ("getRoom", Protocol.CALL, seqid);
    let args = new getRoom_args in
      args#set_roomId roomId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getRoom  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getRoom_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getRoom failed: unknown result")))
  method getRSAKeyInfo provider = 
    self#send_getRSAKeyInfo provider;
    self#recv_getRSAKeyInfo
  method private send_getRSAKeyInfo provider = 
    oprot#writeMessageBegin ("getRSAKeyInfo", Protocol.CALL, seqid);
    let args = new getRSAKeyInfo_args in
      args#set_provider provider;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getRSAKeyInfo  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getRSAKeyInfo_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getRSAKeyInfo failed: unknown result")))
  method getServerTime  = 
    self#send_getServerTime;
    self#recv_getServerTime
  method private send_getServerTime  = 
    oprot#writeMessageBegin ("getServerTime", Protocol.CALL, seqid);
    let args = new getServerTime_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getServerTime  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getServerTime_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getServerTime failed: unknown result")))
  method getSessions  = 
    self#send_getSessions;
    self#recv_getSessions
  method private send_getSessions  = 
    oprot#writeMessageBegin ("getSessions", Protocol.CALL, seqid);
    let args = new getSessions_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSessions  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSessions_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSessions failed: unknown result")))
  method getSettings  = 
    self#send_getSettings;
    self#recv_getSettings
  method private send_getSettings  = 
    oprot#writeMessageBegin ("getSettings", Protocol.CALL, seqid);
    let args = new getSettings_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSettings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSettings_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSettings failed: unknown result")))
  method getGroupsV2 groupIds = 
    self#send_getGroupsV2 groupIds;
    self#recv_getGroupsV2
  method private send_getGroupsV2 groupIds = 
    oprot#writeMessageBegin ("getGroupsV2", Protocol.CALL, seqid);
    let args = new getGroupsV2_args in
      args#set_groupIds groupIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupsV2  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupsV2_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupsV2 failed: unknown result")))
  method getSettingsAttributes attrBitset = 
    self#send_getSettingsAttributes attrBitset;
    self#recv_getSettingsAttributes
  method private send_getSettingsAttributes attrBitset = 
    oprot#writeMessageBegin ("getSettingsAttributes", Protocol.CALL, seqid);
    let args = new getSettingsAttributes_args in
      args#set_attrBitset attrBitset;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSettingsAttributes  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSettingsAttributes_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSettingsAttributes failed: unknown result")))
  method getSystemConfiguration  = 
    self#send_getSystemConfiguration;
    self#recv_getSystemConfiguration
  method private send_getSystemConfiguration  = 
    oprot#writeMessageBegin ("getSystemConfiguration", Protocol.CALL, seqid);
    let args = new getSystemConfiguration_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSystemConfiguration  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSystemConfiguration_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSystemConfiguration failed: unknown result")))
  method getUserTicket  = 
    self#send_getUserTicket;
    self#recv_getUserTicket
  method private send_getUserTicket  = 
    oprot#writeMessageBegin ("getUserTicket", Protocol.CALL, seqid);
    let args = new getUserTicket_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserTicket failed: unknown result")))
  method getWapInvitation invitationHash = 
    self#send_getWapInvitation invitationHash;
    self#recv_getWapInvitation
  method private send_getWapInvitation invitationHash = 
    oprot#writeMessageBegin ("getWapInvitation", Protocol.CALL, seqid);
    let args = new getWapInvitation_args in
      args#set_invitationHash invitationHash;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getWapInvitation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getWapInvitation_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getWapInvitation failed: unknown result")))
  method invalidateUserTicket  = 
    self#send_invalidateUserTicket;
    self#recv_invalidateUserTicket
  method private send_invalidateUserTicket  = 
    oprot#writeMessageBegin ("invalidateUserTicket", Protocol.CALL, seqid);
    let args = new invalidateUserTicket_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_invalidateUserTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_invalidateUserTicket_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method inviteFriendsBySms phoneNumberList = 
    self#send_inviteFriendsBySms phoneNumberList;
    self#recv_inviteFriendsBySms
  method private send_inviteFriendsBySms phoneNumberList = 
    oprot#writeMessageBegin ("inviteFriendsBySms", Protocol.CALL, seqid);
    let args = new inviteFriendsBySms_args in
      args#set_phoneNumberList phoneNumberList;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_inviteFriendsBySms  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_inviteFriendsBySms_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method inviteIntoGroup reqSeq groupId contactIds = 
    self#send_inviteIntoGroup reqSeq groupId contactIds;
    self#recv_inviteIntoGroup
  method private send_inviteIntoGroup reqSeq groupId contactIds = 
    oprot#writeMessageBegin ("inviteIntoGroup", Protocol.CALL, seqid);
    let args = new inviteIntoGroup_args in
      args#set_reqSeq reqSeq;
      args#set_groupId groupId;
      args#set_contactIds contactIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_inviteIntoGroup  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_inviteIntoGroup_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method inviteIntoRoom reqSeq roomId contactIds = 
    self#send_inviteIntoRoom reqSeq roomId contactIds;
    self#recv_inviteIntoRoom
  method private send_inviteIntoRoom reqSeq roomId contactIds = 
    oprot#writeMessageBegin ("inviteIntoRoom", Protocol.CALL, seqid);
    let args = new inviteIntoRoom_args in
      args#set_reqSeq reqSeq;
      args#set_roomId roomId;
      args#set_contactIds contactIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_inviteIntoRoom  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_inviteIntoRoom_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method inviteViaEmail reqSeq email name = 
    self#send_inviteViaEmail reqSeq email name;
    self#recv_inviteViaEmail
  method private send_inviteViaEmail reqSeq email name = 
    oprot#writeMessageBegin ("inviteViaEmail", Protocol.CALL, seqid);
    let args = new inviteViaEmail_args in
      args#set_reqSeq reqSeq;
      args#set_email email;
      args#set_name name;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_inviteViaEmail  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_inviteViaEmail_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method isIdentityIdentifierAvailable provider identifier = 
    self#send_isIdentityIdentifierAvailable provider identifier;
    self#recv_isIdentityIdentifierAvailable
  method private send_isIdentityIdentifierAvailable provider identifier = 
    oprot#writeMessageBegin ("isIdentityIdentifierAvailable", Protocol.CALL, seqid);
    let args = new isIdentityIdentifierAvailable_args in
      args#set_provider provider;
      args#set_identifier identifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_isIdentityIdentifierAvailable  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_isIdentityIdentifierAvailable_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "isIdentityIdentifierAvailable failed: unknown result")))
  method isUseridAvailable userid = 
    self#send_isUseridAvailable userid;
    self#recv_isUseridAvailable
  method private send_isUseridAvailable userid = 
    oprot#writeMessageBegin ("isUseridAvailable", Protocol.CALL, seqid);
    let args = new isUseridAvailable_args in
      args#set_userid userid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_isUseridAvailable  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_isUseridAvailable_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "isUseridAvailable failed: unknown result")))
  method kickoutFromGroup reqSeq groupId contactIds = 
    self#send_kickoutFromGroup reqSeq groupId contactIds;
    self#recv_kickoutFromGroup
  method private send_kickoutFromGroup reqSeq groupId contactIds = 
    oprot#writeMessageBegin ("kickoutFromGroup", Protocol.CALL, seqid);
    let args = new kickoutFromGroup_args in
      args#set_reqSeq reqSeq;
      args#set_groupId groupId;
      args#set_contactIds contactIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_kickoutFromGroup  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_kickoutFromGroup_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method reissueGroupTicket groupMid = 
    self#send_reissueGroupTicket groupMid;
    self#recv_reissueGroupTicket
  method private send_reissueGroupTicket groupMid = 
    oprot#writeMessageBegin ("reissueGroupTicket", Protocol.CALL, seqid);
    let args = new reissueGroupTicket_args in
      args#set_groupMid groupMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reissueGroupTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reissueGroupTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reissueGroupTicket failed: unknown result")))
  method findGroupByTicket ticketId = 
    self#send_findGroupByTicket ticketId;
    self#recv_findGroupByTicket
  method private send_findGroupByTicket ticketId = 
    oprot#writeMessageBegin ("findGroupByTicket", Protocol.CALL, seqid);
    let args = new findGroupByTicket_args in
      args#set_ticketId ticketId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findGroupByTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findGroupByTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findGroupByTicket failed: unknown result")))
  method leaveGroup reqSeq groupId = 
    self#send_leaveGroup reqSeq groupId;
    self#recv_leaveGroup
  method private send_leaveGroup reqSeq groupId = 
    oprot#writeMessageBegin ("leaveGroup", Protocol.CALL, seqid);
    let args = new leaveGroup_args in
      args#set_reqSeq reqSeq;
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_leaveGroup  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_leaveGroup_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method leaveRoom reqSeq roomId = 
    self#send_leaveRoom reqSeq roomId;
    self#recv_leaveRoom
  method private send_leaveRoom reqSeq roomId = 
    oprot#writeMessageBegin ("leaveRoom", Protocol.CALL, seqid);
    let args = new leaveRoom_args in
      args#set_reqSeq reqSeq;
      args#set_roomId roomId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_leaveRoom  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_leaveRoom_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method loginWithIdentityCredential identityProvider identifier password keepLoggedIn accessLocation systemName certificate = 
    self#send_loginWithIdentityCredential identityProvider identifier password keepLoggedIn accessLocation systemName certificate;
    self#recv_loginWithIdentityCredential
  method private send_loginWithIdentityCredential identityProvider identifier password keepLoggedIn accessLocation systemName certificate = 
    oprot#writeMessageBegin ("loginWithIdentityCredential", Protocol.CALL, seqid);
    let args = new loginWithIdentityCredential_args in
      args#set_identityProvider identityProvider;
      args#set_identifier identifier;
      args#set_password password;
      args#set_keepLoggedIn keepLoggedIn;
      args#set_accessLocation accessLocation;
      args#set_systemName systemName;
      args#set_certificate certificate;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_loginWithIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_loginWithIdentityCredential_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "loginWithIdentityCredential failed: unknown result")))
  method loginWithIdentityCredentialForCertificate identityProvider identifier password keepLoggedIn accessLocation systemName certificate = 
    self#send_loginWithIdentityCredentialForCertificate identityProvider identifier password keepLoggedIn accessLocation systemName certificate;
    self#recv_loginWithIdentityCredentialForCertificate
  method private send_loginWithIdentityCredentialForCertificate identityProvider identifier password keepLoggedIn accessLocation systemName certificate = 
    oprot#writeMessageBegin ("loginWithIdentityCredentialForCertificate", Protocol.CALL, seqid);
    let args = new loginWithIdentityCredentialForCertificate_args in
      args#set_identityProvider identityProvider;
      args#set_identifier identifier;
      args#set_password password;
      args#set_keepLoggedIn keepLoggedIn;
      args#set_accessLocation accessLocation;
      args#set_systemName systemName;
      args#set_certificate certificate;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_loginWithIdentityCredentialForCertificate  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_loginWithIdentityCredentialForCertificate_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "loginWithIdentityCredentialForCertificate failed: unknown result")))
  method loginWithVerifier verifier = 
    self#send_loginWithVerifier verifier;
    self#recv_loginWithVerifier
  method private send_loginWithVerifier verifier = 
    oprot#writeMessageBegin ("loginWithVerifier", Protocol.CALL, seqid);
    let args = new loginWithVerifier_args in
      args#set_verifier verifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_loginWithVerifier  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_loginWithVerifier_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "loginWithVerifier failed: unknown result")))
  method loginWithVerifierForCerificate verifier = 
    self#send_loginWithVerifierForCerificate verifier;
    self#recv_loginWithVerifierForCerificate
  method private send_loginWithVerifierForCerificate verifier = 
    oprot#writeMessageBegin ("loginWithVerifierForCerificate", Protocol.CALL, seqid);
    let args = new loginWithVerifierForCerificate_args in
      args#set_verifier verifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_loginWithVerifierForCerificate  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_loginWithVerifierForCerificate_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "loginWithVerifierForCerificate failed: unknown result")))
  method loginWithVerifierForCertificate verifier = 
    self#send_loginWithVerifierForCertificate verifier;
    self#recv_loginWithVerifierForCertificate
  method private send_loginWithVerifierForCertificate verifier = 
    oprot#writeMessageBegin ("loginWithVerifierForCertificate", Protocol.CALL, seqid);
    let args = new loginWithVerifierForCertificate_args in
      args#set_verifier verifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_loginWithVerifierForCertificate  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_loginWithVerifierForCertificate_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "loginWithVerifierForCertificate failed: unknown result")))
  method logout  = 
    self#send_logout;
    self#recv_logout
  method private send_logout  = 
    oprot#writeMessageBegin ("logout", Protocol.CALL, seqid);
    let args = new logout_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_logout  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_logout_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method logoutSession tokenKey = 
    self#send_logoutSession tokenKey;
    self#recv_logoutSession
  method private send_logoutSession tokenKey = 
    oprot#writeMessageBegin ("logoutSession", Protocol.CALL, seqid);
    let args = new logoutSession_args in
      args#set_tokenKey tokenKey;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_logoutSession  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_logoutSession_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method noop  = 
    self#send_noop;
    self#recv_noop
  method private send_noop  = 
    oprot#writeMessageBegin ("noop", Protocol.CALL, seqid);
    let args = new noop_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_noop  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_noop_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method notifiedRedirect paramMap = 
    self#send_notifiedRedirect paramMap;
    self#recv_notifiedRedirect
  method private send_notifiedRedirect paramMap = 
    oprot#writeMessageBegin ("notifiedRedirect", Protocol.CALL, seqid);
    let args = new notifiedRedirect_args in
      args#set_paramMap paramMap;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifiedRedirect  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifiedRedirect_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method notifyBuddyOnAir seq receiverMids = 
    self#send_notifyBuddyOnAir seq receiverMids;
    self#recv_notifyBuddyOnAir
  method private send_notifyBuddyOnAir seq receiverMids = 
    oprot#writeMessageBegin ("notifyBuddyOnAir", Protocol.CALL, seqid);
    let args = new notifyBuddyOnAir_args in
      args#set_seq seq;
      args#set_receiverMids receiverMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyBuddyOnAir  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyBuddyOnAir_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "notifyBuddyOnAir failed: unknown result")))
  method notifyIndividualEvent notificationStatus receiverMids = 
    self#send_notifyIndividualEvent notificationStatus receiverMids;
    self#recv_notifyIndividualEvent
  method private send_notifyIndividualEvent notificationStatus receiverMids = 
    oprot#writeMessageBegin ("notifyIndividualEvent", Protocol.CALL, seqid);
    let args = new notifyIndividualEvent_args in
      args#set_notificationStatus notificationStatus;
      args#set_receiverMids receiverMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyIndividualEvent  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyIndividualEvent_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method notifyInstalled udidHash applicationTypeWithExtensions = 
    self#send_notifyInstalled udidHash applicationTypeWithExtensions;
    self#recv_notifyInstalled
  method private send_notifyInstalled udidHash applicationTypeWithExtensions = 
    oprot#writeMessageBegin ("notifyInstalled", Protocol.CALL, seqid);
    let args = new notifyInstalled_args in
      args#set_udidHash udidHash;
      args#set_applicationTypeWithExtensions applicationTypeWithExtensions;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyInstalled  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyInstalled_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method notifyRegistrationComplete udidHash applicationTypeWithExtensions = 
    self#send_notifyRegistrationComplete udidHash applicationTypeWithExtensions;
    self#recv_notifyRegistrationComplete
  method private send_notifyRegistrationComplete udidHash applicationTypeWithExtensions = 
    oprot#writeMessageBegin ("notifyRegistrationComplete", Protocol.CALL, seqid);
    let args = new notifyRegistrationComplete_args in
      args#set_udidHash udidHash;
      args#set_applicationTypeWithExtensions applicationTypeWithExtensions;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyRegistrationComplete  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyRegistrationComplete_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method notifySleep lastRev badge = 
    self#send_notifySleep lastRev badge;
    self#recv_notifySleep
  method private send_notifySleep lastRev badge = 
    oprot#writeMessageBegin ("notifySleep", Protocol.CALL, seqid);
    let args = new notifySleep_args in
      args#set_lastRev lastRev;
      args#set_badge badge;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifySleep  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifySleep_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method notifyUpdated lastRev deviceInfo = 
    self#send_notifyUpdated lastRev deviceInfo;
    self#recv_notifyUpdated
  method private send_notifyUpdated lastRev deviceInfo = 
    oprot#writeMessageBegin ("notifyUpdated", Protocol.CALL, seqid);
    let args = new notifyUpdated_args in
      args#set_lastRev lastRev;
      args#set_deviceInfo deviceInfo;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyUpdated  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyUpdated_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method openProximityMatch location = 
    self#send_openProximityMatch location;
    self#recv_openProximityMatch
  method private send_openProximityMatch location = 
    oprot#writeMessageBegin ("openProximityMatch", Protocol.CALL, seqid);
    let args = new openProximityMatch_args in
      args#set_location location;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_openProximityMatch  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_openProximityMatch_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "openProximityMatch failed: unknown result")))
  method registerBuddyUser buddyId registrarPassword = 
    self#send_registerBuddyUser buddyId registrarPassword;
    self#recv_registerBuddyUser
  method private send_registerBuddyUser buddyId registrarPassword = 
    oprot#writeMessageBegin ("registerBuddyUser", Protocol.CALL, seqid);
    let args = new registerBuddyUser_args in
      args#set_buddyId buddyId;
      args#set_registrarPassword registrarPassword;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerBuddyUser  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerBuddyUser_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerBuddyUser failed: unknown result")))
  method registerBuddyUserid seq userid = 
    self#send_registerBuddyUserid seq userid;
    self#recv_registerBuddyUserid
  method private send_registerBuddyUserid seq userid = 
    oprot#writeMessageBegin ("registerBuddyUserid", Protocol.CALL, seqid);
    let args = new registerBuddyUserid_args in
      args#set_seq seq;
      args#set_userid userid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerBuddyUserid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerBuddyUserid_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method registerDevice sessionId = 
    self#send_registerDevice sessionId;
    self#recv_registerDevice
  method private send_registerDevice sessionId = 
    oprot#writeMessageBegin ("registerDevice", Protocol.CALL, seqid);
    let args = new registerDevice_args in
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerDevice  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerDevice_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerDevice failed: unknown result")))
  method registerDeviceWithIdentityCredential sessionId provider identifier verifier = 
    self#send_registerDeviceWithIdentityCredential sessionId provider identifier verifier;
    self#recv_registerDeviceWithIdentityCredential
  method private send_registerDeviceWithIdentityCredential sessionId provider identifier verifier = 
    oprot#writeMessageBegin ("registerDeviceWithIdentityCredential", Protocol.CALL, seqid);
    let args = new registerDeviceWithIdentityCredential_args in
      args#set_sessionId sessionId;
      args#set_provider provider;
      args#set_identifier identifier;
      args#set_verifier verifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerDeviceWithIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerDeviceWithIdentityCredential_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerDeviceWithIdentityCredential failed: unknown result")))
  method registerDeviceWithoutPhoneNumber region udidHash deviceInfo = 
    self#send_registerDeviceWithoutPhoneNumber region udidHash deviceInfo;
    self#recv_registerDeviceWithoutPhoneNumber
  method private send_registerDeviceWithoutPhoneNumber region udidHash deviceInfo = 
    oprot#writeMessageBegin ("registerDeviceWithoutPhoneNumber", Protocol.CALL, seqid);
    let args = new registerDeviceWithoutPhoneNumber_args in
      args#set_region region;
      args#set_udidHash udidHash;
      args#set_deviceInfo deviceInfo;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerDeviceWithoutPhoneNumber  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerDeviceWithoutPhoneNumber_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerDeviceWithoutPhoneNumber failed: unknown result")))
  method registerDeviceWithoutPhoneNumberWithIdentityCredential region udidHash deviceInfo provider identifier verifier mid migrationPincodeSessionId = 
    self#send_registerDeviceWithoutPhoneNumberWithIdentityCredential region udidHash deviceInfo provider identifier verifier mid migrationPincodeSessionId;
    self#recv_registerDeviceWithoutPhoneNumberWithIdentityCredential
  method private send_registerDeviceWithoutPhoneNumberWithIdentityCredential region udidHash deviceInfo provider identifier verifier mid migrationPincodeSessionId = 
    oprot#writeMessageBegin ("registerDeviceWithoutPhoneNumberWithIdentityCredential", Protocol.CALL, seqid);
    let args = new registerDeviceWithoutPhoneNumberWithIdentityCredential_args in
      args#set_region region;
      args#set_udidHash udidHash;
      args#set_deviceInfo deviceInfo;
      args#set_provider provider;
      args#set_identifier identifier;
      args#set_verifier verifier;
      args#set_mid mid;
      args#set_migrationPincodeSessionId migrationPincodeSessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerDeviceWithoutPhoneNumberWithIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerDeviceWithoutPhoneNumberWithIdentityCredential_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerDeviceWithoutPhoneNumberWithIdentityCredential failed: unknown result")))
  method registerUserid reqSeq userid = 
    self#send_registerUserid reqSeq userid;
    self#recv_registerUserid
  method private send_registerUserid reqSeq userid = 
    oprot#writeMessageBegin ("registerUserid", Protocol.CALL, seqid);
    let args = new registerUserid_args in
      args#set_reqSeq reqSeq;
      args#set_userid userid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerUserid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerUserid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerUserid failed: unknown result")))
  method registerWapDevice invitationHash guidHash email deviceInfo = 
    self#send_registerWapDevice invitationHash guidHash email deviceInfo;
    self#recv_registerWapDevice
  method private send_registerWapDevice invitationHash guidHash email deviceInfo = 
    oprot#writeMessageBegin ("registerWapDevice", Protocol.CALL, seqid);
    let args = new registerWapDevice_args in
      args#set_invitationHash invitationHash;
      args#set_guidHash guidHash;
      args#set_email email;
      args#set_deviceInfo deviceInfo;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerWapDevice  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerWapDevice_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerWapDevice failed: unknown result")))
  method registerWithExistingSnsIdAndIdentityCredential identityCredential region udidHash deviceInfo = 
    self#send_registerWithExistingSnsIdAndIdentityCredential identityCredential region udidHash deviceInfo;
    self#recv_registerWithExistingSnsIdAndIdentityCredential
  method private send_registerWithExistingSnsIdAndIdentityCredential identityCredential region udidHash deviceInfo = 
    oprot#writeMessageBegin ("registerWithExistingSnsIdAndIdentityCredential", Protocol.CALL, seqid);
    let args = new registerWithExistingSnsIdAndIdentityCredential_args in
      args#set_identityCredential identityCredential;
      args#set_region region;
      args#set_udidHash udidHash;
      args#set_deviceInfo deviceInfo;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerWithExistingSnsIdAndIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerWithExistingSnsIdAndIdentityCredential_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerWithExistingSnsIdAndIdentityCredential failed: unknown result")))
  method registerWithSnsId snsIdType snsAccessToken region udidHash deviceInfo mid = 
    self#send_registerWithSnsId snsIdType snsAccessToken region udidHash deviceInfo mid;
    self#recv_registerWithSnsId
  method private send_registerWithSnsId snsIdType snsAccessToken region udidHash deviceInfo mid = 
    oprot#writeMessageBegin ("registerWithSnsId", Protocol.CALL, seqid);
    let args = new registerWithSnsId_args in
      args#set_snsIdType snsIdType;
      args#set_snsAccessToken snsAccessToken;
      args#set_region region;
      args#set_udidHash udidHash;
      args#set_deviceInfo deviceInfo;
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerWithSnsId  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerWithSnsId_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerWithSnsId failed: unknown result")))
  method registerWithSnsIdAndIdentityCredential snsIdType snsAccessToken identityCredential region udidHash deviceInfo = 
    self#send_registerWithSnsIdAndIdentityCredential snsIdType snsAccessToken identityCredential region udidHash deviceInfo;
    self#recv_registerWithSnsIdAndIdentityCredential
  method private send_registerWithSnsIdAndIdentityCredential snsIdType snsAccessToken identityCredential region udidHash deviceInfo = 
    oprot#writeMessageBegin ("registerWithSnsIdAndIdentityCredential", Protocol.CALL, seqid);
    let args = new registerWithSnsIdAndIdentityCredential_args in
      args#set_snsIdType snsIdType;
      args#set_snsAccessToken snsAccessToken;
      args#set_identityCredential identityCredential;
      args#set_region region;
      args#set_udidHash udidHash;
      args#set_deviceInfo deviceInfo;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerWithSnsIdAndIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerWithSnsIdAndIdentityCredential_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerWithSnsIdAndIdentityCredential failed: unknown result")))
  method reissueDeviceCredential  = 
    self#send_reissueDeviceCredential;
    self#recv_reissueDeviceCredential
  method private send_reissueDeviceCredential  = 
    oprot#writeMessageBegin ("reissueDeviceCredential", Protocol.CALL, seqid);
    let args = new reissueDeviceCredential_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reissueDeviceCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reissueDeviceCredential_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reissueDeviceCredential failed: unknown result")))
  method reissueUserTicket expirationTime maxUseCount = 
    self#send_reissueUserTicket expirationTime maxUseCount;
    self#recv_reissueUserTicket
  method private send_reissueUserTicket expirationTime maxUseCount = 
    oprot#writeMessageBegin ("reissueUserTicket", Protocol.CALL, seqid);
    let args = new reissueUserTicket_args in
      args#set_expirationTime expirationTime;
      args#set_maxUseCount maxUseCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reissueUserTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reissueUserTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reissueUserTicket failed: unknown result")))
  method getMessageReadRange chatIds = 
    self#send_getMessageReadRange chatIds;
    self#recv_getMessageReadRange
  method private send_getMessageReadRange chatIds = 
    oprot#writeMessageBegin ("getMessageReadRange", Protocol.CALL, seqid);
    let args = new getMessageReadRange_args in
      args#set_chatIds chatIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessageReadRange  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessageReadRange_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessageReadRange failed: unknown result")))
  method rejectGroupInvitation reqSeq groupId = 
    self#send_rejectGroupInvitation reqSeq groupId;
    self#recv_rejectGroupInvitation
  method private send_rejectGroupInvitation reqSeq groupId = 
    oprot#writeMessageBegin ("rejectGroupInvitation", Protocol.CALL, seqid);
    let args = new rejectGroupInvitation_args in
      args#set_reqSeq reqSeq;
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_rejectGroupInvitation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_rejectGroupInvitation_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method releaseSession  = 
    self#send_releaseSession;
    self#recv_releaseSession
  method private send_releaseSession  = 
    oprot#writeMessageBegin ("releaseSession", Protocol.CALL, seqid);
    let args = new releaseSession_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_releaseSession  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_releaseSession_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method removeAllMessages seq lastMessageId = 
    self#send_removeAllMessages seq lastMessageId;
    self#recv_removeAllMessages
  method private send_removeAllMessages seq lastMessageId = 
    oprot#writeMessageBegin ("removeAllMessages", Protocol.CALL, seqid);
    let args = new removeAllMessages_args in
      args#set_seq seq;
      args#set_lastMessageId lastMessageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeAllMessages  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeAllMessages_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method removeBuddyLocation mid index = 
    self#send_removeBuddyLocation mid index;
    self#recv_removeBuddyLocation
  method private send_removeBuddyLocation mid index = 
    oprot#writeMessageBegin ("removeBuddyLocation", Protocol.CALL, seqid);
    let args = new removeBuddyLocation_args in
      args#set_mid mid;
      args#set_index index;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeBuddyLocation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeBuddyLocation_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method removeMessage messageId = 
    self#send_removeMessage messageId;
    self#recv_removeMessage
  method private send_removeMessage messageId = 
    oprot#writeMessageBegin ("removeMessage", Protocol.CALL, seqid);
    let args = new removeMessage_args in
      args#set_messageId messageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeMessage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "removeMessage failed: unknown result")))
  method makeUserAddMyselfAsContact contactOwnerMid = 
    self#send_makeUserAddMyselfAsContact contactOwnerMid;
    self#recv_makeUserAddMyselfAsContact
  method private send_makeUserAddMyselfAsContact contactOwnerMid = 
    oprot#writeMessageBegin ("makeUserAddMyselfAsContact", Protocol.CALL, seqid);
    let args = new makeUserAddMyselfAsContact_args in
      args#set_contactOwnerMid contactOwnerMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_makeUserAddMyselfAsContact  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_makeUserAddMyselfAsContact_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "makeUserAddMyselfAsContact failed: unknown result")))
  method removeMessageFromMyHome messageId = 
    self#send_removeMessageFromMyHome messageId;
    self#recv_removeMessageFromMyHome
  method private send_removeMessageFromMyHome messageId = 
    oprot#writeMessageBegin ("removeMessageFromMyHome", Protocol.CALL, seqid);
    let args = new removeMessageFromMyHome_args in
      args#set_messageId messageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeMessageFromMyHome  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeMessageFromMyHome_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "removeMessageFromMyHome failed: unknown result")))
  method removeSnsId snsIdType = 
    self#send_removeSnsId snsIdType;
    self#recv_removeSnsId
  method private send_removeSnsId snsIdType = 
    oprot#writeMessageBegin ("removeSnsId", Protocol.CALL, seqid);
    let args = new removeSnsId_args in
      args#set_snsIdType snsIdType;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeSnsId  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeSnsId_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "removeSnsId failed: unknown result")))
  method report syncOpRevision category report = 
    self#send_report syncOpRevision category report;
    self#recv_report
  method private send_report syncOpRevision category report = 
    oprot#writeMessageBegin ("report", Protocol.CALL, seqid);
    let args = new report_args in
      args#set_syncOpRevision syncOpRevision;
      args#set_category category;
      args#set_report report;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_report  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_report_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method reportContacts syncOpRevision category contactReports actionType = 
    self#send_reportContacts syncOpRevision category contactReports actionType;
    self#recv_reportContacts
  method private send_reportContacts syncOpRevision category contactReports actionType = 
    oprot#writeMessageBegin ("reportContacts", Protocol.CALL, seqid);
    let args = new reportContacts_args in
      args#set_syncOpRevision syncOpRevision;
      args#set_category category;
      args#set_contactReports contactReports;
      args#set_actionType actionType;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reportContacts failed: unknown result")))
  method reportGroups syncOpRevision groups = 
    self#send_reportGroups syncOpRevision groups;
    self#recv_reportGroups
  method private send_reportGroups syncOpRevision groups = 
    oprot#writeMessageBegin ("reportGroups", Protocol.CALL, seqid);
    let args = new reportGroups_args in
      args#set_syncOpRevision syncOpRevision;
      args#set_groups groups;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportGroups  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportGroups_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method reportProfile syncOpRevision profile = 
    self#send_reportProfile syncOpRevision profile;
    self#recv_reportProfile
  method private send_reportProfile syncOpRevision profile = 
    oprot#writeMessageBegin ("reportProfile", Protocol.CALL, seqid);
    let args = new reportProfile_args in
      args#set_syncOpRevision syncOpRevision;
      args#set_profile profile;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportProfile  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportProfile_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method reportRooms syncOpRevision rooms = 
    self#send_reportRooms syncOpRevision rooms;
    self#recv_reportRooms
  method private send_reportRooms syncOpRevision rooms = 
    oprot#writeMessageBegin ("reportRooms", Protocol.CALL, seqid);
    let args = new reportRooms_args in
      args#set_syncOpRevision syncOpRevision;
      args#set_rooms rooms;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportRooms  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportRooms_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method findAndAddContactByMetaTag reqSeq userid reference = 
    self#send_findAndAddContactByMetaTag reqSeq userid reference;
    self#recv_findAndAddContactByMetaTag
  method private send_findAndAddContactByMetaTag reqSeq userid reference = 
    oprot#writeMessageBegin ("findAndAddContactByMetaTag", Protocol.CALL, seqid);
    let args = new findAndAddContactByMetaTag_args in
      args#set_reqSeq reqSeq;
      args#set_userid userid;
      args#set_reference reference;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findAndAddContactByMetaTag  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findAndAddContactByMetaTag_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findAndAddContactByMetaTag failed: unknown result")))
  method reportSettings syncOpRevision settings = 
    self#send_reportSettings syncOpRevision settings;
    self#recv_reportSettings
  method private send_reportSettings syncOpRevision settings = 
    oprot#writeMessageBegin ("reportSettings", Protocol.CALL, seqid);
    let args = new reportSettings_args in
      args#set_syncOpRevision syncOpRevision;
      args#set_settings settings;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportSettings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportSettings_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method reportSpam chatMid memberMids spammerReasons senderMids spamMessageIds spamMessages = 
    self#send_reportSpam chatMid memberMids spammerReasons senderMids spamMessageIds spamMessages;
    self#recv_reportSpam
  method private send_reportSpam chatMid memberMids spammerReasons senderMids spamMessageIds spamMessages = 
    oprot#writeMessageBegin ("reportSpam", Protocol.CALL, seqid);
    let args = new reportSpam_args in
      args#set_chatMid chatMid;
      args#set_memberMids memberMids;
      args#set_spammerReasons spammerReasons;
      args#set_senderMids senderMids;
      args#set_spamMessageIds spamMessageIds;
      args#set_spamMessages spamMessages;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportSpam  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportSpam_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method reportSpammer spammerMid spammerReasons spamMessageIds = 
    self#send_reportSpammer spammerMid spammerReasons spamMessageIds;
    self#recv_reportSpammer
  method private send_reportSpammer spammerMid spammerReasons spamMessageIds = 
    oprot#writeMessageBegin ("reportSpammer", Protocol.CALL, seqid);
    let args = new reportSpammer_args in
      args#set_spammerMid spammerMid;
      args#set_spammerReasons spammerReasons;
      args#set_spamMessageIds spamMessageIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportSpammer  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportSpammer_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method requestAccountPasswordReset provider identifier locale = 
    self#send_requestAccountPasswordReset provider identifier locale;
    self#recv_requestAccountPasswordReset
  method private send_requestAccountPasswordReset provider identifier locale = 
    oprot#writeMessageBegin ("requestAccountPasswordReset", Protocol.CALL, seqid);
    let args = new requestAccountPasswordReset_args in
      args#set_provider provider;
      args#set_identifier identifier;
      args#set_locale locale;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_requestAccountPasswordReset  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_requestAccountPasswordReset_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method requestEmailConfirmation emailConfirmation = 
    self#send_requestEmailConfirmation emailConfirmation;
    self#recv_requestEmailConfirmation
  method private send_requestEmailConfirmation emailConfirmation = 
    oprot#writeMessageBegin ("requestEmailConfirmation", Protocol.CALL, seqid);
    let args = new requestEmailConfirmation_args in
      args#set_emailConfirmation emailConfirmation;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_requestEmailConfirmation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_requestEmailConfirmation_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "requestEmailConfirmation failed: unknown result")))
  method requestIdentityUnbind provider identifier = 
    self#send_requestIdentityUnbind provider identifier;
    self#recv_requestIdentityUnbind
  method private send_requestIdentityUnbind provider identifier = 
    oprot#writeMessageBegin ("requestIdentityUnbind", Protocol.CALL, seqid);
    let args = new requestIdentityUnbind_args in
      args#set_provider provider;
      args#set_identifier identifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_requestIdentityUnbind  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_requestIdentityUnbind_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method resendEmailConfirmation verifier = 
    self#send_resendEmailConfirmation verifier;
    self#recv_resendEmailConfirmation
  method private send_resendEmailConfirmation verifier = 
    oprot#writeMessageBegin ("resendEmailConfirmation", Protocol.CALL, seqid);
    let args = new resendEmailConfirmation_args in
      args#set_verifier verifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_resendEmailConfirmation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_resendEmailConfirmation_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "resendEmailConfirmation failed: unknown result")))
  method resendPinCode sessionId = 
    self#send_resendPinCode sessionId;
    self#recv_resendPinCode
  method private send_resendPinCode sessionId = 
    oprot#writeMessageBegin ("resendPinCode", Protocol.CALL, seqid);
    let args = new resendPinCode_args in
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_resendPinCode  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_resendPinCode_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method resendPinCodeBySMS sessionId = 
    self#send_resendPinCodeBySMS sessionId;
    self#recv_resendPinCodeBySMS
  method private send_resendPinCodeBySMS sessionId = 
    oprot#writeMessageBegin ("resendPinCodeBySMS", Protocol.CALL, seqid);
    let args = new resendPinCodeBySMS_args in
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_resendPinCodeBySMS  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_resendPinCodeBySMS_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method sendChatChecked seq consumer lastMessageId = 
    self#send_sendChatChecked seq consumer lastMessageId;
    self#recv_sendChatChecked
  method private send_sendChatChecked seq consumer lastMessageId = 
    oprot#writeMessageBegin ("sendChatChecked", Protocol.CALL, seqid);
    let args = new sendChatChecked_args in
      args#set_seq seq;
      args#set_consumer consumer;
      args#set_lastMessageId lastMessageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendChatChecked  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendChatChecked_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method sendMessageAwaitCommit seq message = 
    self#send_sendMessageAwaitCommit seq message;
    self#recv_sendMessageAwaitCommit
  method private send_sendMessageAwaitCommit seq message = 
    oprot#writeMessageBegin ("sendMessageAwaitCommit", Protocol.CALL, seqid);
    let args = new sendMessageAwaitCommit_args in
      args#set_seq seq;
      args#set_message message;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendMessageAwaitCommit  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendMessageAwaitCommit_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendMessageAwaitCommit failed: unknown result")))
  method sendChatRemoved seq consumer lastMessageId = 
    self#send_sendChatRemoved seq consumer lastMessageId;
    self#recv_sendChatRemoved
  method private send_sendChatRemoved seq consumer lastMessageId = 
    oprot#writeMessageBegin ("sendChatRemoved", Protocol.CALL, seqid);
    let args = new sendChatRemoved_args in
      args#set_seq seq;
      args#set_consumer consumer;
      args#set_lastMessageId lastMessageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendChatRemoved  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendChatRemoved_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method sendContentPreviewUpdated esq messageId receiverMids = 
    self#send_sendContentPreviewUpdated esq messageId receiverMids;
    self#recv_sendContentPreviewUpdated
  method private send_sendContentPreviewUpdated esq messageId receiverMids = 
    oprot#writeMessageBegin ("sendContentPreviewUpdated", Protocol.CALL, seqid);
    let args = new sendContentPreviewUpdated_args in
      args#set_esq esq;
      args#set_messageId messageId;
      args#set_receiverMids receiverMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendContentPreviewUpdated  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendContentPreviewUpdated_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendContentPreviewUpdated failed: unknown result")))
  method sendContentReceipt seq consumer messageId = 
    self#send_sendContentReceipt seq consumer messageId;
    self#recv_sendContentReceipt
  method private send_sendContentReceipt seq consumer messageId = 
    oprot#writeMessageBegin ("sendContentReceipt", Protocol.CALL, seqid);
    let args = new sendContentReceipt_args in
      args#set_seq seq;
      args#set_consumer consumer;
      args#set_messageId messageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendContentReceipt  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendContentReceipt_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method sendDummyPush  = 
    self#send_sendDummyPush;
    self#recv_sendDummyPush
  method private send_sendDummyPush  = 
    oprot#writeMessageBegin ("sendDummyPush", Protocol.CALL, seqid);
    let args = new sendDummyPush_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendDummyPush  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendDummyPush_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method removeE2EEPublicKey publicKey = 
    self#send_removeE2EEPublicKey publicKey;
    self#recv_removeE2EEPublicKey
  method private send_removeE2EEPublicKey publicKey = 
    oprot#writeMessageBegin ("removeE2EEPublicKey", Protocol.CALL, seqid);
    let args = new removeE2EEPublicKey_args in
      args#set_publicKey publicKey;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeE2EEPublicKey  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeE2EEPublicKey_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method negotiateE2EEPublicKey mid = 
    self#send_negotiateE2EEPublicKey mid;
    self#recv_negotiateE2EEPublicKey
  method private send_negotiateE2EEPublicKey mid = 
    oprot#writeMessageBegin ("negotiateE2EEPublicKey", Protocol.CALL, seqid);
    let args = new negotiateE2EEPublicKey_args in
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_negotiateE2EEPublicKey  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_negotiateE2EEPublicKey_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "negotiateE2EEPublicKey failed: unknown result")))
  method getE2EEPublicKey mid version keyId = 
    self#send_getE2EEPublicKey mid version keyId;
    self#recv_getE2EEPublicKey
  method private send_getE2EEPublicKey mid version keyId = 
    oprot#writeMessageBegin ("getE2EEPublicKey", Protocol.CALL, seqid);
    let args = new getE2EEPublicKey_args in
      args#set_mid mid;
      args#set_version version;
      args#set_keyId keyId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getE2EEPublicKey  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getE2EEPublicKey_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getE2EEPublicKey failed: unknown result")))
  method requestE2EEKeyExchange reqSeq temporalPublicKey publicKey verifier = 
    self#send_requestE2EEKeyExchange reqSeq temporalPublicKey publicKey verifier;
    self#recv_requestE2EEKeyExchange
  method private send_requestE2EEKeyExchange reqSeq temporalPublicKey publicKey verifier = 
    oprot#writeMessageBegin ("requestE2EEKeyExchange", Protocol.CALL, seqid);
    let args = new requestE2EEKeyExchange_args in
      args#set_reqSeq reqSeq;
      args#set_temporalPublicKey temporalPublicKey;
      args#set_publicKey publicKey;
      args#set_verifier verifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_requestE2EEKeyExchange  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_requestE2EEKeyExchange_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method getLastE2EEPublicKeys chatMid = 
    self#send_getLastE2EEPublicKeys chatMid;
    self#recv_getLastE2EEPublicKeys
  method private send_getLastE2EEPublicKeys chatMid = 
    oprot#writeMessageBegin ("getLastE2EEPublicKeys", Protocol.CALL, seqid);
    let args = new getLastE2EEPublicKeys_args in
      args#set_chatMid chatMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getLastE2EEPublicKeys  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getLastE2EEPublicKeys_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getLastE2EEPublicKeys failed: unknown result")))
  method registerE2EEPublicKey reqSeq publicKey = 
    self#send_registerE2EEPublicKey reqSeq publicKey;
    self#recv_registerE2EEPublicKey
  method private send_registerE2EEPublicKey reqSeq publicKey = 
    oprot#writeMessageBegin ("registerE2EEPublicKey", Protocol.CALL, seqid);
    let args = new registerE2EEPublicKey_args in
      args#set_reqSeq reqSeq;
      args#set_publicKey publicKey;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerE2EEPublicKey  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerE2EEPublicKey_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerE2EEPublicKey failed: unknown result")))
  method getE2EEPublicKeys  = 
    self#send_getE2EEPublicKeys;
    self#recv_getE2EEPublicKeys
  method private send_getE2EEPublicKeys  = 
    oprot#writeMessageBegin ("getE2EEPublicKeys", Protocol.CALL, seqid);
    let args = new getE2EEPublicKeys_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getE2EEPublicKeys  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getE2EEPublicKeys_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getE2EEPublicKeys failed: unknown result")))
  method getE2EEPublicKeysEx ignoreE2EEStatus = 
    self#send_getE2EEPublicKeysEx ignoreE2EEStatus;
    self#recv_getE2EEPublicKeysEx
  method private send_getE2EEPublicKeysEx ignoreE2EEStatus = 
    oprot#writeMessageBegin ("getE2EEPublicKeysEx", Protocol.CALL, seqid);
    let args = new getE2EEPublicKeysEx_args in
      args#set_ignoreE2EEStatus ignoreE2EEStatus;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getE2EEPublicKeysEx  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getE2EEPublicKeysEx_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getE2EEPublicKeysEx failed: unknown result")))
  method getReadMessageOpsInBulk chatIds = 
    self#send_getReadMessageOpsInBulk chatIds;
    self#recv_getReadMessageOpsInBulk
  method private send_getReadMessageOpsInBulk chatIds = 
    oprot#writeMessageBegin ("getReadMessageOpsInBulk", Protocol.CALL, seqid);
    let args = new getReadMessageOpsInBulk_args in
      args#set_chatIds chatIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getReadMessageOpsInBulk  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getReadMessageOpsInBulk_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getReadMessageOpsInBulk failed: unknown result")))
  method sendEvent seq message = 
    self#send_sendEvent seq message;
    self#recv_sendEvent
  method private send_sendEvent seq message = 
    oprot#writeMessageBegin ("sendEvent", Protocol.CALL, seqid);
    let args = new sendEvent_args in
      args#set_seq seq;
      args#set_message message;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendEvent  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendEvent_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendEvent failed: unknown result")))
  method sendMessage seq message = 
    self#send_sendMessage seq message;
    self#recv_sendMessage
  method private send_sendMessage seq message = 
    oprot#writeMessageBegin ("sendMessage", Protocol.CALL, seqid);
    let args = new sendMessage_args in
      args#set_seq seq;
      args#set_message message;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendMessage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendMessage failed: unknown result")))
  method sendMessageIgnored seq consumer messageIds = 
    self#send_sendMessageIgnored seq consumer messageIds;
    self#recv_sendMessageIgnored
  method private send_sendMessageIgnored seq consumer messageIds = 
    oprot#writeMessageBegin ("sendMessageIgnored", Protocol.CALL, seqid);
    let args = new sendMessageIgnored_args in
      args#set_seq seq;
      args#set_consumer consumer;
      args#set_messageIds messageIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendMessageIgnored  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendMessageIgnored_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method sendMessageReceipt seq consumer messageIds = 
    self#send_sendMessageReceipt seq consumer messageIds;
    self#recv_sendMessageReceipt
  method private send_sendMessageReceipt seq consumer messageIds = 
    oprot#writeMessageBegin ("sendMessageReceipt", Protocol.CALL, seqid);
    let args = new sendMessageReceipt_args in
      args#set_seq seq;
      args#set_consumer consumer;
      args#set_messageIds messageIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendMessageReceipt  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendMessageReceipt_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method findContactByMetaTag userid reference = 
    self#send_findContactByMetaTag userid reference;
    self#recv_findContactByMetaTag
  method private send_findContactByMetaTag userid reference = 
    oprot#writeMessageBegin ("findContactByMetaTag", Protocol.CALL, seqid);
    let args = new findContactByMetaTag_args in
      args#set_userid userid;
      args#set_reference reference;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findContactByMetaTag  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findContactByMetaTag_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findContactByMetaTag failed: unknown result")))
  method sendMessageToMyHome seq message = 
    self#send_sendMessageToMyHome seq message;
    self#recv_sendMessageToMyHome
  method private send_sendMessageToMyHome seq message = 
    oprot#writeMessageBegin ("sendMessageToMyHome", Protocol.CALL, seqid);
    let args = new sendMessageToMyHome_args in
      args#set_seq seq;
      args#set_message message;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendMessageToMyHome  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendMessageToMyHome_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendMessageToMyHome failed: unknown result")))
  method setBuddyLocation mid index location = 
    self#send_setBuddyLocation mid index location;
    self#recv_setBuddyLocation
  method private send_setBuddyLocation mid index location = 
    oprot#writeMessageBegin ("setBuddyLocation", Protocol.CALL, seqid);
    let args = new setBuddyLocation_args in
      args#set_mid mid;
      args#set_index index;
      args#set_location location;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_setBuddyLocation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_setBuddyLocation_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method setIdentityCredential identifier verifier provider = 
    self#send_setIdentityCredential identifier verifier provider;
    self#recv_setIdentityCredential
  method private send_setIdentityCredential identifier verifier provider = 
    oprot#writeMessageBegin ("setIdentityCredential", Protocol.CALL, seqid);
    let args = new setIdentityCredential_args in
      args#set_identifier identifier;
      args#set_verifier verifier;
      args#set_provider provider;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_setIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_setIdentityCredential_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method setNotificationsEnabled reqSeq type target enablement = 
    self#send_setNotificationsEnabled reqSeq type target enablement;
    self#recv_setNotificationsEnabled
  method private send_setNotificationsEnabled reqSeq type target enablement = 
    oprot#writeMessageBegin ("setNotificationsEnabled", Protocol.CALL, seqid);
    let args = new setNotificationsEnabled_args in
      args#set_reqSeq reqSeq;
      args#set_type type;
      args#set_target target;
      args#set_enablement enablement;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_setNotificationsEnabled  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_setNotificationsEnabled_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method startUpdateVerification region carrier phone udidHash deviceInfo networkCode locale = 
    self#send_startUpdateVerification region carrier phone udidHash deviceInfo networkCode locale;
    self#recv_startUpdateVerification
  method private send_startUpdateVerification region carrier phone udidHash deviceInfo networkCode locale = 
    oprot#writeMessageBegin ("startUpdateVerification", Protocol.CALL, seqid);
    let args = new startUpdateVerification_args in
      args#set_region region;
      args#set_carrier carrier;
      args#set_phone phone;
      args#set_udidHash udidHash;
      args#set_deviceInfo deviceInfo;
      args#set_networkCode networkCode;
      args#set_locale locale;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_startUpdateVerification  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_startUpdateVerification_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "startUpdateVerification failed: unknown result")))
  method startVerification region carrier phone udidHash deviceInfo networkCode mid locale simInfo oldUdidHash = 
    self#send_startVerification region carrier phone udidHash deviceInfo networkCode mid locale simInfo oldUdidHash;
    self#recv_startVerification
  method private send_startVerification region carrier phone udidHash deviceInfo networkCode mid locale simInfo oldUdidHash = 
    oprot#writeMessageBegin ("startVerification", Protocol.CALL, seqid);
    let args = new startVerification_args in
      args#set_region region;
      args#set_carrier carrier;
      args#set_phone phone;
      args#set_udidHash udidHash;
      args#set_deviceInfo deviceInfo;
      args#set_networkCode networkCode;
      args#set_mid mid;
      args#set_locale locale;
      args#set_simInfo simInfo;
      args#set_oldUdidHash oldUdidHash;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_startVerification  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_startVerification_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "startVerification failed: unknown result")))
  method updateGroupPreferenceAttribute reqSeq groupMid updatedAttrs = 
    self#send_updateGroupPreferenceAttribute reqSeq groupMid updatedAttrs;
    self#recv_updateGroupPreferenceAttribute
  method private send_updateGroupPreferenceAttribute reqSeq groupMid updatedAttrs = 
    oprot#writeMessageBegin ("updateGroupPreferenceAttribute", Protocol.CALL, seqid);
    let args = new updateGroupPreferenceAttribute_args in
      args#set_reqSeq reqSeq;
      args#set_groupMid groupMid;
      args#set_updatedAttrs updatedAttrs;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateGroupPreferenceAttribute  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateGroupPreferenceAttribute_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method createRoomV2 reqSeq contactIds = 
    self#send_createRoomV2 reqSeq contactIds;
    self#recv_createRoomV2
  method private send_createRoomV2 reqSeq contactIds = 
    oprot#writeMessageBegin ("createRoomV2", Protocol.CALL, seqid);
    let args = new createRoomV2_args in
      args#set_reqSeq reqSeq;
      args#set_contactIds contactIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createRoomV2  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createRoomV2_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createRoomV2 failed: unknown result")))
  method storeUpdateProfileAttribute seq profileAttribute value = 
    self#send_storeUpdateProfileAttribute seq profileAttribute value;
    self#recv_storeUpdateProfileAttribute
  method private send_storeUpdateProfileAttribute seq profileAttribute value = 
    oprot#writeMessageBegin ("storeUpdateProfileAttribute", Protocol.CALL, seqid);
    let args = new storeUpdateProfileAttribute_args in
      args#set_seq seq;
      args#set_profileAttribute profileAttribute;
      args#set_value value;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_storeUpdateProfileAttribute  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_storeUpdateProfileAttribute_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method syncContactBySnsIds reqSeq modifications = 
    self#send_syncContactBySnsIds reqSeq modifications;
    self#recv_syncContactBySnsIds
  method private send_syncContactBySnsIds reqSeq modifications = 
    oprot#writeMessageBegin ("syncContactBySnsIds", Protocol.CALL, seqid);
    let args = new syncContactBySnsIds_args in
      args#set_reqSeq reqSeq;
      args#set_modifications modifications;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_syncContactBySnsIds  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_syncContactBySnsIds_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "syncContactBySnsIds failed: unknown result")))
  method syncContacts reqSeq localContacts = 
    self#send_syncContacts reqSeq localContacts;
    self#recv_syncContacts
  method private send_syncContacts reqSeq localContacts = 
    oprot#writeMessageBegin ("syncContacts", Protocol.CALL, seqid);
    let args = new syncContacts_args in
      args#set_reqSeq reqSeq;
      args#set_localContacts localContacts;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_syncContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_syncContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "syncContacts failed: unknown result")))
  method trySendMessage seq message = 
    self#send_trySendMessage seq message;
    self#recv_trySendMessage
  method private send_trySendMessage seq message = 
    oprot#writeMessageBegin ("trySendMessage", Protocol.CALL, seqid);
    let args = new trySendMessage_args in
      args#set_seq seq;
      args#set_message message;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_trySendMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_trySendMessage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "trySendMessage failed: unknown result")))
  method getNextMessagesV2 messageBoxId startMessageId messagesCount = 
    self#send_getNextMessagesV2 messageBoxId startMessageId messagesCount;
    self#recv_getNextMessagesV2
  method private send_getNextMessagesV2 messageBoxId startMessageId messagesCount = 
    oprot#writeMessageBegin ("getNextMessagesV2", Protocol.CALL, seqid);
    let args = new getNextMessagesV2_args in
      args#set_messageBoxId messageBoxId;
      args#set_startMessageId startMessageId;
      args#set_messagesCount messagesCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getNextMessagesV2  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getNextMessagesV2_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getNextMessagesV2 failed: unknown result")))
  method getMessageBoxCompactWrapUpV2 messageBoxId = 
    self#send_getMessageBoxCompactWrapUpV2 messageBoxId;
    self#recv_getMessageBoxCompactWrapUpV2
  method private send_getMessageBoxCompactWrapUpV2 messageBoxId = 
    oprot#writeMessageBegin ("getMessageBoxCompactWrapUpV2", Protocol.CALL, seqid);
    let args = new getMessageBoxCompactWrapUpV2_args in
      args#set_messageBoxId messageBoxId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessageBoxCompactWrapUpV2  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessageBoxCompactWrapUpV2_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessageBoxCompactWrapUpV2 failed: unknown result")))
  method getRecentMessagesV2 messageBoxId messagesCount = 
    self#send_getRecentMessagesV2 messageBoxId messagesCount;
    self#recv_getRecentMessagesV2
  method private send_getRecentMessagesV2 messageBoxId messagesCount = 
    oprot#writeMessageBegin ("getRecentMessagesV2", Protocol.CALL, seqid);
    let args = new getRecentMessagesV2_args in
      args#set_messageBoxId messageBoxId;
      args#set_messagesCount messagesCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getRecentMessagesV2  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getRecentMessagesV2_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getRecentMessagesV2 failed: unknown result")))
  method validateContactsOnBot contacts = 
    self#send_validateContactsOnBot contacts;
    self#recv_validateContactsOnBot
  method private send_validateContactsOnBot contacts = 
    oprot#writeMessageBegin ("validateContactsOnBot", Protocol.CALL, seqid);
    let args = new validateContactsOnBot_args in
      args#set_contacts contacts;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_validateContactsOnBot  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_validateContactsOnBot_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "validateContactsOnBot failed: unknown result")))
  method tryFriendRequest midOrEMid method friendRequestParams = 
    self#send_tryFriendRequest midOrEMid method friendRequestParams;
    self#recv_tryFriendRequest
  method private send_tryFriendRequest midOrEMid method friendRequestParams = 
    oprot#writeMessageBegin ("tryFriendRequest", Protocol.CALL, seqid);
    let args = new tryFriendRequest_args in
      args#set_midOrEMid midOrEMid;
      args#set_method method;
      args#set_friendRequestParams friendRequestParams;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_tryFriendRequest  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_tryFriendRequest_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method unblockContact reqSeq id = 
    self#send_unblockContact reqSeq id;
    self#recv_unblockContact
  method private send_unblockContact reqSeq id = 
    oprot#writeMessageBegin ("unblockContact", Protocol.CALL, seqid);
    let args = new unblockContact_args in
      args#set_reqSeq reqSeq;
      args#set_id id;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_unblockContact  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_unblockContact_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method unblockRecommendation reqSeq id = 
    self#send_unblockRecommendation reqSeq id;
    self#recv_unblockRecommendation
  method private send_unblockRecommendation reqSeq id = 
    oprot#writeMessageBegin ("unblockRecommendation", Protocol.CALL, seqid);
    let args = new unblockRecommendation_args in
      args#set_reqSeq reqSeq;
      args#set_id id;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_unblockRecommendation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_unblockRecommendation_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method unregisterUserAndDevice  = 
    self#send_unregisterUserAndDevice;
    self#recv_unregisterUserAndDevice
  method private send_unregisterUserAndDevice  = 
    oprot#writeMessageBegin ("unregisterUserAndDevice", Protocol.CALL, seqid);
    let args = new unregisterUserAndDevice_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_unregisterUserAndDevice  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_unregisterUserAndDevice_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "unregisterUserAndDevice failed: unknown result")))
  method updateApnsDeviceToken apnsDeviceToken = 
    self#send_updateApnsDeviceToken apnsDeviceToken;
    self#recv_updateApnsDeviceToken
  method private send_updateApnsDeviceToken apnsDeviceToken = 
    oprot#writeMessageBegin ("updateApnsDeviceToken", Protocol.CALL, seqid);
    let args = new updateApnsDeviceToken_args in
      args#set_apnsDeviceToken apnsDeviceToken;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateApnsDeviceToken  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateApnsDeviceToken_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateBuddySetting key value = 
    self#send_updateBuddySetting key value;
    self#recv_updateBuddySetting
  method private send_updateBuddySetting key value = 
    oprot#writeMessageBegin ("updateBuddySetting", Protocol.CALL, seqid);
    let args = new updateBuddySetting_args in
      args#set_key key;
      args#set_value value;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateBuddySetting  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateBuddySetting_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateC2DMRegistrationId registrationId = 
    self#send_updateC2DMRegistrationId registrationId;
    self#recv_updateC2DMRegistrationId
  method private send_updateC2DMRegistrationId registrationId = 
    oprot#writeMessageBegin ("updateC2DMRegistrationId", Protocol.CALL, seqid);
    let args = new updateC2DMRegistrationId_args in
      args#set_registrationId registrationId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateC2DMRegistrationId  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateC2DMRegistrationId_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateContactSetting reqSeq mid flag value = 
    self#send_updateContactSetting reqSeq mid flag value;
    self#recv_updateContactSetting
  method private send_updateContactSetting reqSeq mid flag value = 
    oprot#writeMessageBegin ("updateContactSetting", Protocol.CALL, seqid);
    let args = new updateContactSetting_args in
      args#set_reqSeq reqSeq;
      args#set_mid mid;
      args#set_flag flag;
      args#set_value value;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateContactSetting  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateContactSetting_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateCustomModeSettings customMode paramMap = 
    self#send_updateCustomModeSettings customMode paramMap;
    self#recv_updateCustomModeSettings
  method private send_updateCustomModeSettings customMode paramMap = 
    oprot#writeMessageBegin ("updateCustomModeSettings", Protocol.CALL, seqid);
    let args = new updateCustomModeSettings_args in
      args#set_customMode customMode;
      args#set_paramMap paramMap;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateCustomModeSettings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateCustomModeSettings_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateDeviceInfo deviceUid deviceInfo = 
    self#send_updateDeviceInfo deviceUid deviceInfo;
    self#recv_updateDeviceInfo
  method private send_updateDeviceInfo deviceUid deviceInfo = 
    oprot#writeMessageBegin ("updateDeviceInfo", Protocol.CALL, seqid);
    let args = new updateDeviceInfo_args in
      args#set_deviceUid deviceUid;
      args#set_deviceInfo deviceInfo;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateDeviceInfo  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateDeviceInfo_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateGroup reqSeq group = 
    self#send_updateGroup reqSeq group;
    self#recv_updateGroup
  method private send_updateGroup reqSeq group = 
    oprot#writeMessageBegin ("updateGroup", Protocol.CALL, seqid);
    let args = new updateGroup_args in
      args#set_reqSeq reqSeq;
      args#set_group group;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateGroup  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateGroup_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateNotificationToken type token = 
    self#send_updateNotificationToken type token;
    self#recv_updateNotificationToken
  method private send_updateNotificationToken type token = 
    oprot#writeMessageBegin ("updateNotificationToken", Protocol.CALL, seqid);
    let args = new updateNotificationToken_args in
      args#set_type type;
      args#set_token token;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateNotificationToken  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateNotificationToken_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateNotificationTokenWithBytes type token = 
    self#send_updateNotificationTokenWithBytes type token;
    self#recv_updateNotificationTokenWithBytes
  method private send_updateNotificationTokenWithBytes type token = 
    oprot#writeMessageBegin ("updateNotificationTokenWithBytes", Protocol.CALL, seqid);
    let args = new updateNotificationTokenWithBytes_args in
      args#set_type type;
      args#set_token token;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateNotificationTokenWithBytes  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateNotificationTokenWithBytes_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateProfile reqSeq profile = 
    self#send_updateProfile reqSeq profile;
    self#recv_updateProfile
  method private send_updateProfile reqSeq profile = 
    oprot#writeMessageBegin ("updateProfile", Protocol.CALL, seqid);
    let args = new updateProfile_args in
      args#set_reqSeq reqSeq;
      args#set_profile profile;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateProfile  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateProfile_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateProfileAttribute reqSeq attr value = 
    self#send_updateProfileAttribute reqSeq attr value;
    self#recv_updateProfileAttribute
  method private send_updateProfileAttribute reqSeq attr value = 
    oprot#writeMessageBegin ("updateProfileAttribute", Protocol.CALL, seqid);
    let args = new updateProfileAttribute_args in
      args#set_reqSeq reqSeq;
      args#set_attr attr;
      args#set_value value;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateProfileAttribute  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateProfileAttribute_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateProfileAttributes reqSeq request = 
    self#send_updateProfileAttributes reqSeq request;
    self#recv_updateProfileAttributes
  method private send_updateProfileAttributes reqSeq request = 
    oprot#writeMessageBegin ("updateProfileAttributes", Protocol.CALL, seqid);
    let args = new updateProfileAttributes_args in
      args#set_reqSeq reqSeq;
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateProfileAttributes  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_updateProfileAttributes_result iprot in
        iprot#readMessageEnd;
        ()
  method updateRegion region = 
    self#send_updateRegion region;
    self#recv_updateRegion
  method private send_updateRegion region = 
    oprot#writeMessageBegin ("updateRegion", Protocol.CALL, seqid);
    let args = new updateRegion_args in
      args#set_region region;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateRegion  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateRegion_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateSettings reqSeq settings = 
    self#send_updateSettings reqSeq settings;
    self#recv_updateSettings
  method private send_updateSettings reqSeq settings = 
    oprot#writeMessageBegin ("updateSettings", Protocol.CALL, seqid);
    let args = new updateSettings_args in
      args#set_reqSeq reqSeq;
      args#set_settings settings;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSettings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSettings_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateSettings2 reqSeq settings = 
    self#send_updateSettings2 reqSeq settings;
    self#recv_updateSettings2
  method private send_updateSettings2 reqSeq settings = 
    oprot#writeMessageBegin ("updateSettings2", Protocol.CALL, seqid);
    let args = new updateSettings2_args in
      args#set_reqSeq reqSeq;
      args#set_settings settings;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSettings2  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSettings2_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSettings2 failed: unknown result")))
  method updateSettingsAttribute reqSeq attr value = 
    self#send_updateSettingsAttribute reqSeq attr value;
    self#recv_updateSettingsAttribute
  method private send_updateSettingsAttribute reqSeq attr value = 
    oprot#writeMessageBegin ("updateSettingsAttribute", Protocol.CALL, seqid);
    let args = new updateSettingsAttribute_args in
      args#set_reqSeq reqSeq;
      args#set_attr attr;
      args#set_value value;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSettingsAttribute  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSettingsAttribute_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateSettingsAttributes reqSeq attrBitset settings = 
    self#send_updateSettingsAttributes reqSeq attrBitset settings;
    self#recv_updateSettingsAttributes
  method private send_updateSettingsAttributes reqSeq attrBitset settings = 
    oprot#writeMessageBegin ("updateSettingsAttributes", Protocol.CALL, seqid);
    let args = new updateSettingsAttributes_args in
      args#set_reqSeq reqSeq;
      args#set_attrBitset attrBitset;
      args#set_settings settings;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSettingsAttributes  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSettingsAttributes_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSettingsAttributes failed: unknown result")))
  method verifyIdentityCredential identityProvider identifier password = 
    self#send_verifyIdentityCredential identityProvider identifier password;
    self#recv_verifyIdentityCredential
  method private send_verifyIdentityCredential identityProvider identifier password = 
    oprot#writeMessageBegin ("verifyIdentityCredential", Protocol.CALL, seqid);
    let args = new verifyIdentityCredential_args in
      args#set_identityProvider identityProvider;
      args#set_identifier identifier;
      args#set_password password;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_verifyIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_verifyIdentityCredential_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method verifyIdentityCredentialWithResult identityCredential = 
    self#send_verifyIdentityCredentialWithResult identityCredential;
    self#recv_verifyIdentityCredentialWithResult
  method private send_verifyIdentityCredentialWithResult identityCredential = 
    oprot#writeMessageBegin ("verifyIdentityCredentialWithResult", Protocol.CALL, seqid);
    let args = new verifyIdentityCredentialWithResult_args in
      args#set_identityCredential identityCredential;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_verifyIdentityCredentialWithResult  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_verifyIdentityCredentialWithResult_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "verifyIdentityCredentialWithResult failed: unknown result")))
  method verifyPhone sessionId pinCode udidHash = 
    self#send_verifyPhone sessionId pinCode udidHash;
    self#recv_verifyPhone
  method private send_verifyPhone sessionId pinCode udidHash = 
    oprot#writeMessageBegin ("verifyPhone", Protocol.CALL, seqid);
    let args = new verifyPhone_args in
      args#set_sessionId sessionId;
      args#set_pinCode pinCode;
      args#set_udidHash udidHash;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_verifyPhone  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_verifyPhone_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "verifyPhone failed: unknown result")))
  method verifyQrcode verifier pinCode = 
    self#send_verifyQrcode verifier pinCode;
    self#recv_verifyQrcode
  method private send_verifyQrcode verifier pinCode = 
    oprot#writeMessageBegin ("verifyQrcode", Protocol.CALL, seqid);
    let args = new verifyQrcode_args in
      args#set_verifier verifier;
      args#set_pinCode pinCode;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_verifyQrcode  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_verifyQrcode_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "verifyQrcode failed: unknown result")))
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 235
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_searchCollection (seqid, iprot, oprot) =
    let args = read_searchCollection_args iprot in
      iprot#readMessageEnd;
      let result = new searchCollection_result in
        (try
          result#set_success (handler#searchCollection args#get_query args#get_param);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("searchCollection", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getChatRoomAnnouncementsBulk (seqid, iprot, oprot) =
    let args = read_getChatRoomAnnouncementsBulk_args iprot in
      iprot#readMessageEnd;
      let result = new getChatRoomAnnouncementsBulk_result in
        (try
          result#set_success (handler#getChatRoomAnnouncementsBulk args#get_chatRoomMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getChatRoomAnnouncementsBulk", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getChatRoomAnnouncements (seqid, iprot, oprot) =
    let args = read_getChatRoomAnnouncements_args iprot in
      iprot#readMessageEnd;
      let result = new getChatRoomAnnouncements_result in
        (try
          result#set_success (handler#getChatRoomAnnouncements args#get_chatRoomMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getChatRoomAnnouncements", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createChatRoomAnnouncement (seqid, iprot, oprot) =
    let args = read_createChatRoomAnnouncement_args iprot in
      iprot#readMessageEnd;
      let result = new createChatRoomAnnouncement_result in
        (try
          result#set_success (handler#createChatRoomAnnouncement args#get_reqSeq args#get_chatRoomMid args#get_type args#get_contents);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createChatRoomAnnouncement", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeChatRoomAnnouncement (seqid, iprot, oprot) =
    let args = read_removeChatRoomAnnouncement_args iprot in
      iprot#readMessageEnd;
      let result = new removeChatRoomAnnouncement_result in
        (try
          (handler#removeChatRoomAnnouncement args#get_reqSeq args#get_chatRoomMid args#get_announcementSeq);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeChatRoomAnnouncement", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_unsendMessage (seqid, iprot, oprot) =
    let args = read_unsendMessage_args iprot in
      iprot#readMessageEnd;
      let result = new unsendMessage_result in
        (try
          (handler#unsendMessage args#get_seq args#get_messageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("unsendMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupWithoutMembers (seqid, iprot, oprot) =
    let args = read_getGroupWithoutMembers_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupWithoutMembers_result in
        (try
          result#set_success (handler#getGroupWithoutMembers args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupWithoutMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_requestResendMessage (seqid, iprot, oprot) =
    let args = read_requestResendMessage_args iprot in
      iprot#readMessageEnd;
      let result = new requestResendMessage_result in
        (try
          (handler#requestResendMessage args#get_reqSeq args#get_senderMid args#get_messageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("requestResendMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_respondResendMessage (seqid, iprot, oprot) =
    let args = read_respondResendMessage_args iprot in
      iprot#readMessageEnd;
      let result = new respondResendMessage_result in
        (try
          (handler#respondResendMessage args#get_reqSeq args#get_receiverMid args#get_originalMessageId args#get_resendMessage args#get_errorCode);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("respondResendMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_acceptGroupInvitation (seqid, iprot, oprot) =
    let args = read_acceptGroupInvitation_args iprot in
      iprot#readMessageEnd;
      let result = new acceptGroupInvitation_result in
        (try
          (handler#acceptGroupInvitation args#get_reqSeq args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("acceptGroupInvitation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_acceptGroupInvitationByTicket (seqid, iprot, oprot) =
    let args = read_acceptGroupInvitationByTicket_args iprot in
      iprot#readMessageEnd;
      let result = new acceptGroupInvitationByTicket_result in
        (try
          (handler#acceptGroupInvitationByTicket args#get_reqSeq args#get_GroupMid args#get_ticketId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("acceptGroupInvitationByTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_acceptProximityMatches (seqid, iprot, oprot) =
    let args = read_acceptProximityMatches_args iprot in
      iprot#readMessageEnd;
      let result = new acceptProximityMatches_result in
        (try
          (handler#acceptProximityMatches args#get_sessionId args#get_ids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("acceptProximityMatches", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_acquireCallRoute (seqid, iprot, oprot) =
    let args = read_acquireCallRoute_args iprot in
      iprot#readMessageEnd;
      let result = new acquireCallRoute_result in
        (try
          result#set_success (handler#acquireCallRoute args#get_to);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("acquireCallRoute", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_acquireCallTicket (seqid, iprot, oprot) =
    let args = read_acquireCallTicket_args iprot in
      iprot#readMessageEnd;
      let result = new acquireCallTicket_result in
        (try
          result#set_success (handler#acquireCallTicket args#get_to);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("acquireCallTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_acquireEncryptedAccessToken (seqid, iprot, oprot) =
    let args = read_acquireEncryptedAccessToken_args iprot in
      iprot#readMessageEnd;
      let result = new acquireEncryptedAccessToken_result in
        (try
          result#set_success (handler#acquireEncryptedAccessToken args#get_featureType);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("acquireEncryptedAccessToken", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_addSnsId (seqid, iprot, oprot) =
    let args = read_addSnsId_args iprot in
      iprot#readMessageEnd;
      let result = new addSnsId_result in
        (try
          result#set_success (handler#addSnsId args#get_snsIdType args#get_snsAccessToken);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("addSnsId", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_blockContact (seqid, iprot, oprot) =
    let args = read_blockContact_args iprot in
      iprot#readMessageEnd;
      let result = new blockContact_result in
        (try
          (handler#blockContact args#get_reqSeq args#get_id);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("blockContact", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_blockRecommendation (seqid, iprot, oprot) =
    let args = read_blockRecommendation_args iprot in
      iprot#readMessageEnd;
      let result = new blockRecommendation_result in
        (try
          (handler#blockRecommendation args#get_reqSeq args#get_id);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("blockRecommendation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_cancelGroupInvitation (seqid, iprot, oprot) =
    let args = read_cancelGroupInvitation_args iprot in
      iprot#readMessageEnd;
      let result = new cancelGroupInvitation_result in
        (try
          (handler#cancelGroupInvitation args#get_reqSeq args#get_groupId args#get_contactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("cancelGroupInvitation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_changeVerificationMethod (seqid, iprot, oprot) =
    let args = read_changeVerificationMethod_args iprot in
      iprot#readMessageEnd;
      let result = new changeVerificationMethod_result in
        (try
          result#set_success (handler#changeVerificationMethod args#get_sessionId args#get_method);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("changeVerificationMethod", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_clearIdentityCredential (seqid, iprot, oprot) =
    let _ = read_clearIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new clearIdentityCredential_result in
        (try
          (handler#clearIdentityCredential);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("clearIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_clearMessageBox (seqid, iprot, oprot) =
    let args = read_clearMessageBox_args iprot in
      iprot#readMessageEnd;
      let result = new clearMessageBox_result in
        (try
          (handler#clearMessageBox args#get_channelId args#get_messageBoxId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("clearMessageBox", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_closeProximityMatch (seqid, iprot, oprot) =
    let args = read_closeProximityMatch_args iprot in
      iprot#readMessageEnd;
      let result = new closeProximityMatch_result in
        (try
          (handler#closeProximityMatch args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("closeProximityMatch", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_commitSendMessage (seqid, iprot, oprot) =
    let args = read_commitSendMessage_args iprot in
      iprot#readMessageEnd;
      let result = new commitSendMessage_result in
        (try
          result#set_success (handler#commitSendMessage args#get_seq args#get_messageId args#get_receiverMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("commitSendMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_commitSendMessages (seqid, iprot, oprot) =
    let args = read_commitSendMessages_args iprot in
      iprot#readMessageEnd;
      let result = new commitSendMessages_result in
        (try
          result#set_success (handler#commitSendMessages args#get_seq args#get_messageIds args#get_receiverMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("commitSendMessages", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_commitUpdateProfile (seqid, iprot, oprot) =
    let args = read_commitUpdateProfile_args iprot in
      iprot#readMessageEnd;
      let result = new commitUpdateProfile_result in
        (try
          result#set_success (handler#commitUpdateProfile args#get_seq args#get_attrs args#get_receiverMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("commitUpdateProfile", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_confirmEmail (seqid, iprot, oprot) =
    let args = read_confirmEmail_args iprot in
      iprot#readMessageEnd;
      let result = new confirmEmail_result in
        (try
          (handler#confirmEmail args#get_verifier args#get_pinCode);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("confirmEmail", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createGroup (seqid, iprot, oprot) =
    let args = read_createGroup_args iprot in
      iprot#readMessageEnd;
      let result = new createGroup_result in
        (try
          result#set_success (handler#createGroup args#get_seq args#get_name args#get_contactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createGroup", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createQrcodeBase64Image (seqid, iprot, oprot) =
    let args = read_createQrcodeBase64Image_args iprot in
      iprot#readMessageEnd;
      let result = new createQrcodeBase64Image_result in
        (try
          result#set_success (handler#createQrcodeBase64Image args#get_url args#get_characterSet args#get_imageSize args#get_x args#get_y args#get_width args#get_height);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createQrcodeBase64Image", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createRoom (seqid, iprot, oprot) =
    let args = read_createRoom_args iprot in
      iprot#readMessageEnd;
      let result = new createRoom_result in
        (try
          result#set_success (handler#createRoom args#get_reqSeq args#get_contactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createRoom", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createSession (seqid, iprot, oprot) =
    let _ = read_createSession_args iprot in
      iprot#readMessageEnd;
      let result = new createSession_result in
        (try
          result#set_success (handler#createSession);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createSession", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_fetchAnnouncements (seqid, iprot, oprot) =
    let args = read_fetchAnnouncements_args iprot in
      iprot#readMessageEnd;
      let result = new fetchAnnouncements_result in
        (try
          result#set_success (handler#fetchAnnouncements args#get_lastFetchedIndex);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("fetchAnnouncements", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_fetchMessages (seqid, iprot, oprot) =
    let args = read_fetchMessages_args iprot in
      iprot#readMessageEnd;
      let result = new fetchMessages_result in
        (try
          result#set_success (handler#fetchMessages args#get_localTs args#get_count);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("fetchMessages", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_fetchOperations (seqid, iprot, oprot) =
    let args = read_fetchOperations_args iprot in
      iprot#readMessageEnd;
      let result = new fetchOperations_result in
        (try
          result#set_success (handler#fetchOperations args#get_localRev args#get_count);
        with
          | ShouldSyncException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("fetchOperations", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_fetchOps (seqid, iprot, oprot) =
    let args = read_fetchOps_args iprot in
      iprot#readMessageEnd;
      let result = new fetchOps_result in
        (try
          result#set_success (handler#fetchOps args#get_localRev args#get_count args#get_globalRev args#get_individualRev);
        with
          | ShouldSyncException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("fetchOps", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findAndAddContactsByEmail (seqid, iprot, oprot) =
    let args = read_findAndAddContactsByEmail_args iprot in
      iprot#readMessageEnd;
      let result = new findAndAddContactsByEmail_result in
        (try
          result#set_success (handler#findAndAddContactsByEmail args#get_reqSeq args#get_emails);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findAndAddContactsByEmail", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findAndAddContactsByMid (seqid, iprot, oprot) =
    let args = read_findAndAddContactsByMid_args iprot in
      iprot#readMessageEnd;
      let result = new findAndAddContactsByMid_result in
        (try
          result#set_success (handler#findAndAddContactsByMid args#get_reqSeq args#get_mid args#get_type args#get_reference);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findAndAddContactsByMid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findGroupByTicketV2 (seqid, iprot, oprot) =
    let args = read_findGroupByTicketV2_args iprot in
      iprot#readMessageEnd;
      let result = new findGroupByTicketV2_result in
        (try
          result#set_success (handler#findGroupByTicketV2 args#get_ticketId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findGroupByTicketV2", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findAndAddContactsByPhone (seqid, iprot, oprot) =
    let args = read_findAndAddContactsByPhone_args iprot in
      iprot#readMessageEnd;
      let result = new findAndAddContactsByPhone_result in
        (try
          result#set_success (handler#findAndAddContactsByPhone args#get_reqSeq args#get_phones);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findAndAddContactsByPhone", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getFriendRequests (seqid, iprot, oprot) =
    let args = read_getFriendRequests_args iprot in
      iprot#readMessageEnd;
      let result = new getFriendRequests_result in
        (try
          result#set_success (handler#getFriendRequests args#get_direction args#get_lastSeenSeqId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getFriendRequests", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeFriendRequest (seqid, iprot, oprot) =
    let args = read_removeFriendRequest_args iprot in
      iprot#readMessageEnd;
      let result = new removeFriendRequest_result in
        (try
          (handler#removeFriendRequest args#get_direction args#get_midOrEMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeFriendRequest", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findAndAddContactsByUserid (seqid, iprot, oprot) =
    let args = read_findAndAddContactsByUserid_args iprot in
      iprot#readMessageEnd;
      let result = new findAndAddContactsByUserid_result in
        (try
          result#set_success (handler#findAndAddContactsByUserid args#get_reqSeq args#get_userid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findAndAddContactsByUserid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findContactByUserid (seqid, iprot, oprot) =
    let args = read_findContactByUserid_args iprot in
      iprot#readMessageEnd;
      let result = new findContactByUserid_result in
        (try
          result#set_success (handler#findContactByUserid args#get_userid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findContactByUserid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findContactByUserTicket (seqid, iprot, oprot) =
    let args = read_findContactByUserTicket_args iprot in
      iprot#readMessageEnd;
      let result = new findContactByUserTicket_result in
        (try
          result#set_success (handler#findContactByUserTicket args#get_ticketIdWithTag);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findContactByUserTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findContactsByEmail (seqid, iprot, oprot) =
    let args = read_findContactsByEmail_args iprot in
      iprot#readMessageEnd;
      let result = new findContactsByEmail_result in
        (try
          result#set_success (handler#findContactsByEmail args#get_emails);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findContactsByEmail", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findContactsByPhone (seqid, iprot, oprot) =
    let args = read_findContactsByPhone_args iprot in
      iprot#readMessageEnd;
      let result = new findContactsByPhone_result in
        (try
          result#set_success (handler#findContactsByPhone args#get_phones);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findContactsByPhone", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findSnsIdUserStatus (seqid, iprot, oprot) =
    let args = read_findSnsIdUserStatus_args iprot in
      iprot#readMessageEnd;
      let result = new findSnsIdUserStatus_result in
        (try
          result#set_success (handler#findSnsIdUserStatus args#get_snsIdType args#get_snsAccessToken args#get_udidHash);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findSnsIdUserStatus", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_finishUpdateVerification (seqid, iprot, oprot) =
    let args = read_finishUpdateVerification_args iprot in
      iprot#readMessageEnd;
      let result = new finishUpdateVerification_result in
        (try
          (handler#finishUpdateVerification args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("finishUpdateVerification", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_generateUserTicket (seqid, iprot, oprot) =
    let args = read_generateUserTicket_args iprot in
      iprot#readMessageEnd;
      let result = new generateUserTicket_result in
        (try
          result#set_success (handler#generateUserTicket args#get_expirationTime args#get_maxUseCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("generateUserTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_destroyMessage (seqid, iprot, oprot) =
    let args = read_destroyMessage_args iprot in
      iprot#readMessageEnd;
      let result = new destroyMessage_result in
        (try
          (handler#destroyMessage args#get_seq args#get_chatId args#get_messageId args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("destroyMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getAcceptedProximityMatches (seqid, iprot, oprot) =
    let args = read_getAcceptedProximityMatches_args iprot in
      iprot#readMessageEnd;
      let result = new getAcceptedProximityMatches_result in
        (try
          result#set_success (handler#getAcceptedProximityMatches args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getAcceptedProximityMatches", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getActiveBuddySubscriberIds (seqid, iprot, oprot) =
    let _ = read_getActiveBuddySubscriberIds_args iprot in
      iprot#readMessageEnd;
      let result = new getActiveBuddySubscriberIds_result in
        (try
          result#set_success (handler#getActiveBuddySubscriberIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getActiveBuddySubscriberIds", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getAllContactIds (seqid, iprot, oprot) =
    let _ = read_getAllContactIds_args iprot in
      iprot#readMessageEnd;
      let result = new getAllContactIds_result in
        (try
          result#set_success (handler#getAllContactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getAllContactIds", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getAuthQrcode (seqid, iprot, oprot) =
    let args = read_getAuthQrcode_args iprot in
      iprot#readMessageEnd;
      let result = new getAuthQrcode_result in
        (try
          result#set_success (handler#getAuthQrcode args#get_keepLoggedIn args#get_systemName);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getAuthQrcode", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBlockedContactIds (seqid, iprot, oprot) =
    let _ = read_getBlockedContactIds_args iprot in
      iprot#readMessageEnd;
      let result = new getBlockedContactIds_result in
        (try
          result#set_success (handler#getBlockedContactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBlockedContactIds", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerWithPhoneNumber (seqid, iprot, oprot) =
    let args = read_registerWithPhoneNumber_args iprot in
      iprot#readMessageEnd;
      let result = new registerWithPhoneNumber_result in
        (try
          result#set_success (handler#registerWithPhoneNumber args#get_sessionId args#get_migrationPincodeSessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerWithPhoneNumber", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerWithPhoneNumberAndPassword (seqid, iprot, oprot) =
    let args = read_registerWithPhoneNumberAndPassword_args iprot in
      iprot#readMessageEnd;
      let result = new registerWithPhoneNumberAndPassword_result in
        (try
          result#set_success (handler#registerWithPhoneNumberAndPassword args#get_sessionId args#get_keynm args#get_encrypted);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerWithPhoneNumberAndPassword", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getAnalyticsInfo (seqid, iprot, oprot) =
    let _ = read_getAnalyticsInfo_args iprot in
      iprot#readMessageEnd;
      let result = new getAnalyticsInfo_result in
        (try
          result#set_success (handler#getAnalyticsInfo);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getAnalyticsInfo", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportClientStatistics (seqid, iprot, oprot) =
    let args = read_reportClientStatistics_args iprot in
      iprot#readMessageEnd;
      let result = new reportClientStatistics_result in
        (try
          (handler#reportClientStatistics args#get_reqSeq args#get_category args#get_count);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportClientStatistics", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_verifyPhoneNumberForLogin (seqid, iprot, oprot) =
    let args = read_verifyPhoneNumberForLogin_args iprot in
      iprot#readMessageEnd;
      let result = new verifyPhoneNumberForLogin_result in
        (try
          result#set_success (handler#verifyPhoneNumberForLogin args#get_verifierFromPhone args#get_pinCodeForPhone args#get_verifierFromLogin);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("verifyPhoneNumberForLogin", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_verifyPhoneNumber (seqid, iprot, oprot) =
    let args = read_verifyPhoneNumber_args iprot in
      iprot#readMessageEnd;
      let result = new verifyPhoneNumber_result in
        (try
          result#set_success (handler#verifyPhoneNumber args#get_sessionId args#get_pinCode args#get_udidHash args#get_migrationPincodeSessionId args#get_oldUdidHash);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("verifyPhoneNumber", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBlockedContactIdsByRange (seqid, iprot, oprot) =
    let args = read_getBlockedContactIdsByRange_args iprot in
      iprot#readMessageEnd;
      let result = new getBlockedContactIdsByRange_result in
        (try
          result#set_success (handler#getBlockedContactIdsByRange args#get_start args#get_count);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBlockedContactIdsByRange", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBlockedRecommendationIds (seqid, iprot, oprot) =
    let _ = read_getBlockedRecommendationIds_args iprot in
      iprot#readMessageEnd;
      let result = new getBlockedRecommendationIds_result in
        (try
          result#set_success (handler#getBlockedRecommendationIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBlockedRecommendationIds", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBuddyBlockerIds (seqid, iprot, oprot) =
    let _ = read_getBuddyBlockerIds_args iprot in
      iprot#readMessageEnd;
      let result = new getBuddyBlockerIds_result in
        (try
          result#set_success (handler#getBuddyBlockerIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBuddyBlockerIds", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBuddyLocation (seqid, iprot, oprot) =
    let args = read_getBuddyLocation_args iprot in
      iprot#readMessageEnd;
      let result = new getBuddyLocation_result in
        (try
          result#set_success (handler#getBuddyLocation args#get_mid args#get_index);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBuddyLocation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCompactContactsModifiedSince (seqid, iprot, oprot) =
    let args = read_getCompactContactsModifiedSince_args iprot in
      iprot#readMessageEnd;
      let result = new getCompactContactsModifiedSince_result in
        (try
          result#set_success (handler#getCompactContactsModifiedSince args#get_timestamp);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCompactContactsModifiedSince", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCompactGroup (seqid, iprot, oprot) =
    let args = read_getCompactGroup_args iprot in
      iprot#readMessageEnd;
      let result = new getCompactGroup_result in
        (try
          result#set_success (handler#getCompactGroup args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCompactGroup", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCompactRoom (seqid, iprot, oprot) =
    let args = read_getCompactRoom_args iprot in
      iprot#readMessageEnd;
      let result = new getCompactRoom_result in
        (try
          result#set_success (handler#getCompactRoom args#get_roomId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCompactRoom", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getContact (seqid, iprot, oprot) =
    let args = read_getContact_args iprot in
      iprot#readMessageEnd;
      let result = new getContact_result in
        (try
          result#set_success (handler#getContact args#get_id);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getContact", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getContacts (seqid, iprot, oprot) =
    let args = read_getContacts_args iprot in
      iprot#readMessageEnd;
      let result = new getContacts_result in
        (try
          result#set_success (handler#getContacts args#get_ids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getContactWithFriendRequestStatus (seqid, iprot, oprot) =
    let args = read_getContactWithFriendRequestStatus_args iprot in
      iprot#readMessageEnd;
      let result = new getContactWithFriendRequestStatus_result in
        (try
          result#set_success (handler#getContactWithFriendRequestStatus args#get_id);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getContactWithFriendRequestStatus", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCountryWithRequestIp (seqid, iprot, oprot) =
    let _ = read_getCountryWithRequestIp_args iprot in
      iprot#readMessageEnd;
      let result = new getCountryWithRequestIp_result in
        (try
          result#set_success (handler#getCountryWithRequestIp);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCountryWithRequestIp", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getFavoriteMids (seqid, iprot, oprot) =
    let _ = read_getFavoriteMids_args iprot in
      iprot#readMessageEnd;
      let result = new getFavoriteMids_result in
        (try
          result#set_success (handler#getFavoriteMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getFavoriteMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroup (seqid, iprot, oprot) =
    let args = read_getGroup_args iprot in
      iprot#readMessageEnd;
      let result = new getGroup_result in
        (try
          result#set_success (handler#getGroup args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroup", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupIdsInvited (seqid, iprot, oprot) =
    let _ = read_getGroupIdsInvited_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupIdsInvited_result in
        (try
          result#set_success (handler#getGroupIdsInvited);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupIdsInvited", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupIdsJoined (seqid, iprot, oprot) =
    let _ = read_getGroupIdsJoined_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupIdsJoined_result in
        (try
          result#set_success (handler#getGroupIdsJoined);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupIdsJoined", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroups (seqid, iprot, oprot) =
    let args = read_getGroups_args iprot in
      iprot#readMessageEnd;
      let result = new getGroups_result in
        (try
          result#set_success (handler#getGroups args#get_groupIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroups", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getHiddenContactMids (seqid, iprot, oprot) =
    let _ = read_getHiddenContactMids_args iprot in
      iprot#readMessageEnd;
      let result = new getHiddenContactMids_result in
        (try
          result#set_success (handler#getHiddenContactMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getHiddenContactMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getIdentityIdentifier (seqid, iprot, oprot) =
    let _ = read_getIdentityIdentifier_args iprot in
      iprot#readMessageEnd;
      let result = new getIdentityIdentifier_result in
        (try
          result#set_success (handler#getIdentityIdentifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getIdentityIdentifier", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getLastAnnouncementIndex (seqid, iprot, oprot) =
    let _ = read_getLastAnnouncementIndex_args iprot in
      iprot#readMessageEnd;
      let result = new getLastAnnouncementIndex_result in
        (try
          result#set_success (handler#getLastAnnouncementIndex);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getLastAnnouncementIndex", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getLastOpRevision (seqid, iprot, oprot) =
    let _ = read_getLastOpRevision_args iprot in
      iprot#readMessageEnd;
      let result = new getLastOpRevision_result in
        (try
          result#set_success (handler#getLastOpRevision);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getLastOpRevision", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSuggestRevisions (seqid, iprot, oprot) =
    let _ = read_getSuggestRevisions_args iprot in
      iprot#readMessageEnd;
      let result = new getSuggestRevisions_result in
        (try
          result#set_success (handler#getSuggestRevisions);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSuggestRevisions", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPreviousMessagesV2WithReadCount (seqid, iprot, oprot) =
    let args = read_getPreviousMessagesV2WithReadCount_args iprot in
      iprot#readMessageEnd;
      let result = new getPreviousMessagesV2WithReadCount_result in
        (try
          result#set_success (handler#getPreviousMessagesV2WithReadCount args#get_messageBoxId args#get_endMessageId args#get_messagesCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPreviousMessagesV2WithReadCount", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessageBox (seqid, iprot, oprot) =
    let args = read_getMessageBox_args iprot in
      iprot#readMessageEnd;
      let result = new getMessageBox_result in
        (try
          result#set_success (handler#getMessageBox args#get_channelId args#get_messageBoxId args#get_lastMessagesCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessageBox", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessageBoxCompactWrapUp (seqid, iprot, oprot) =
    let args = read_getMessageBoxCompactWrapUp_args iprot in
      iprot#readMessageEnd;
      let result = new getMessageBoxCompactWrapUp_result in
        (try
          result#set_success (handler#getMessageBoxCompactWrapUp args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessageBoxCompactWrapUp", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessageBoxCompactWrapUpList (seqid, iprot, oprot) =
    let args = read_getMessageBoxCompactWrapUpList_args iprot in
      iprot#readMessageEnd;
      let result = new getMessageBoxCompactWrapUpList_result in
        (try
          result#set_success (handler#getMessageBoxCompactWrapUpList args#get_start args#get_messageBoxCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessageBoxCompactWrapUpList", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessageBoxList (seqid, iprot, oprot) =
    let args = read_getMessageBoxList_args iprot in
      iprot#readMessageEnd;
      let result = new getMessageBoxList_result in
        (try
          result#set_success (handler#getMessageBoxList args#get_channelId args#get_lastMessagesCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessageBoxList", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessageBoxListByStatus (seqid, iprot, oprot) =
    let args = read_getMessageBoxListByStatus_args iprot in
      iprot#readMessageEnd;
      let result = new getMessageBoxListByStatus_result in
        (try
          result#set_success (handler#getMessageBoxListByStatus args#get_channelId args#get_lastMessagesCount args#get_status);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessageBoxListByStatus", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessageBoxWrapUp (seqid, iprot, oprot) =
    let args = read_getMessageBoxWrapUp_args iprot in
      iprot#readMessageEnd;
      let result = new getMessageBoxWrapUp_result in
        (try
          result#set_success (handler#getMessageBoxWrapUp args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessageBoxWrapUp", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessageBoxWrapUpList (seqid, iprot, oprot) =
    let args = read_getMessageBoxWrapUpList_args iprot in
      iprot#readMessageEnd;
      let result = new getMessageBoxWrapUpList_result in
        (try
          result#set_success (handler#getMessageBoxWrapUpList args#get_start args#get_messageBoxCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessageBoxWrapUpList", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessagesBySequenceNumber (seqid, iprot, oprot) =
    let args = read_getMessagesBySequenceNumber_args iprot in
      iprot#readMessageEnd;
      let result = new getMessagesBySequenceNumber_result in
        (try
          result#set_success (handler#getMessagesBySequenceNumber args#get_channelId args#get_messageBoxId args#get_startSeq args#get_endSeq);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessagesBySequenceNumber", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getNextMessages (seqid, iprot, oprot) =
    let args = read_getNextMessages_args iprot in
      iprot#readMessageEnd;
      let result = new getNextMessages_result in
        (try
          result#set_success (handler#getNextMessages args#get_messageBoxId args#get_startSeq args#get_messagesCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getNextMessages", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getNotificationPolicy (seqid, iprot, oprot) =
    let args = read_getNotificationPolicy_args iprot in
      iprot#readMessageEnd;
      let result = new getNotificationPolicy_result in
        (try
          result#set_success (handler#getNotificationPolicy args#get_carrier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getNotificationPolicy", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPreviousMessages (seqid, iprot, oprot) =
    let args = read_getPreviousMessages_args iprot in
      iprot#readMessageEnd;
      let result = new getPreviousMessages_result in
        (try
          result#set_success (handler#getPreviousMessages args#get_messageBoxId args#get_endSeq args#get_messagesCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPreviousMessages", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProfile (seqid, iprot, oprot) =
    let _ = read_getProfile_args iprot in
      iprot#readMessageEnd;
      let result = new getProfile_result in
        (try
          result#set_success (handler#getProfile);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getProfile", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProximityMatchCandidateList (seqid, iprot, oprot) =
    let args = read_getProximityMatchCandidateList_args iprot in
      iprot#readMessageEnd;
      let result = new getProximityMatchCandidateList_result in
        (try
          result#set_success (handler#getProximityMatchCandidateList args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getProximityMatchCandidateList", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProximityMatchCandidates (seqid, iprot, oprot) =
    let args = read_getProximityMatchCandidates_args iprot in
      iprot#readMessageEnd;
      let result = new getProximityMatchCandidates_result in
        (try
          result#set_success (handler#getProximityMatchCandidates args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getProximityMatchCandidates", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getRecentMessages (seqid, iprot, oprot) =
    let args = read_getRecentMessages_args iprot in
      iprot#readMessageEnd;
      let result = new getRecentMessages_result in
        (try
          result#set_success (handler#getRecentMessages args#get_messageBoxId args#get_messagesCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getRecentMessages", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getRecommendationIds (seqid, iprot, oprot) =
    let _ = read_getRecommendationIds_args iprot in
      iprot#readMessageEnd;
      let result = new getRecommendationIds_result in
        (try
          result#set_success (handler#getRecommendationIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getRecommendationIds", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getRoom (seqid, iprot, oprot) =
    let args = read_getRoom_args iprot in
      iprot#readMessageEnd;
      let result = new getRoom_result in
        (try
          result#set_success (handler#getRoom args#get_roomId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getRoom", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getRSAKeyInfo (seqid, iprot, oprot) =
    let args = read_getRSAKeyInfo_args iprot in
      iprot#readMessageEnd;
      let result = new getRSAKeyInfo_result in
        (try
          result#set_success (handler#getRSAKeyInfo args#get_provider);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getRSAKeyInfo", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getServerTime (seqid, iprot, oprot) =
    let _ = read_getServerTime_args iprot in
      iprot#readMessageEnd;
      let result = new getServerTime_result in
        (try
          result#set_success (handler#getServerTime);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getServerTime", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSessions (seqid, iprot, oprot) =
    let _ = read_getSessions_args iprot in
      iprot#readMessageEnd;
      let result = new getSessions_result in
        (try
          result#set_success (handler#getSessions);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSessions", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSettings (seqid, iprot, oprot) =
    let _ = read_getSettings_args iprot in
      iprot#readMessageEnd;
      let result = new getSettings_result in
        (try
          result#set_success (handler#getSettings);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSettings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupsV2 (seqid, iprot, oprot) =
    let args = read_getGroupsV2_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupsV2_result in
        (try
          result#set_success (handler#getGroupsV2 args#get_groupIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupsV2", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSettingsAttributes (seqid, iprot, oprot) =
    let args = read_getSettingsAttributes_args iprot in
      iprot#readMessageEnd;
      let result = new getSettingsAttributes_result in
        (try
          result#set_success (handler#getSettingsAttributes args#get_attrBitset);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSettingsAttributes", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSystemConfiguration (seqid, iprot, oprot) =
    let _ = read_getSystemConfiguration_args iprot in
      iprot#readMessageEnd;
      let result = new getSystemConfiguration_result in
        (try
          result#set_success (handler#getSystemConfiguration);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSystemConfiguration", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserTicket (seqid, iprot, oprot) =
    let _ = read_getUserTicket_args iprot in
      iprot#readMessageEnd;
      let result = new getUserTicket_result in
        (try
          result#set_success (handler#getUserTicket);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getWapInvitation (seqid, iprot, oprot) =
    let args = read_getWapInvitation_args iprot in
      iprot#readMessageEnd;
      let result = new getWapInvitation_result in
        (try
          result#set_success (handler#getWapInvitation args#get_invitationHash);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getWapInvitation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_invalidateUserTicket (seqid, iprot, oprot) =
    let _ = read_invalidateUserTicket_args iprot in
      iprot#readMessageEnd;
      let result = new invalidateUserTicket_result in
        (try
          (handler#invalidateUserTicket);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("invalidateUserTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_inviteFriendsBySms (seqid, iprot, oprot) =
    let args = read_inviteFriendsBySms_args iprot in
      iprot#readMessageEnd;
      let result = new inviteFriendsBySms_result in
        (try
          (handler#inviteFriendsBySms args#get_phoneNumberList);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("inviteFriendsBySms", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_inviteIntoGroup (seqid, iprot, oprot) =
    let args = read_inviteIntoGroup_args iprot in
      iprot#readMessageEnd;
      let result = new inviteIntoGroup_result in
        (try
          (handler#inviteIntoGroup args#get_reqSeq args#get_groupId args#get_contactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("inviteIntoGroup", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_inviteIntoRoom (seqid, iprot, oprot) =
    let args = read_inviteIntoRoom_args iprot in
      iprot#readMessageEnd;
      let result = new inviteIntoRoom_result in
        (try
          (handler#inviteIntoRoom args#get_reqSeq args#get_roomId args#get_contactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("inviteIntoRoom", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_inviteViaEmail (seqid, iprot, oprot) =
    let args = read_inviteViaEmail_args iprot in
      iprot#readMessageEnd;
      let result = new inviteViaEmail_result in
        (try
          (handler#inviteViaEmail args#get_reqSeq args#get_email args#get_name);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("inviteViaEmail", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_isIdentityIdentifierAvailable (seqid, iprot, oprot) =
    let args = read_isIdentityIdentifierAvailable_args iprot in
      iprot#readMessageEnd;
      let result = new isIdentityIdentifierAvailable_result in
        (try
          result#set_success (handler#isIdentityIdentifierAvailable args#get_provider args#get_identifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("isIdentityIdentifierAvailable", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_isUseridAvailable (seqid, iprot, oprot) =
    let args = read_isUseridAvailable_args iprot in
      iprot#readMessageEnd;
      let result = new isUseridAvailable_result in
        (try
          result#set_success (handler#isUseridAvailable args#get_userid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("isUseridAvailable", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_kickoutFromGroup (seqid, iprot, oprot) =
    let args = read_kickoutFromGroup_args iprot in
      iprot#readMessageEnd;
      let result = new kickoutFromGroup_result in
        (try
          (handler#kickoutFromGroup args#get_reqSeq args#get_groupId args#get_contactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("kickoutFromGroup", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reissueGroupTicket (seqid, iprot, oprot) =
    let args = read_reissueGroupTicket_args iprot in
      iprot#readMessageEnd;
      let result = new reissueGroupTicket_result in
        (try
          result#set_success (handler#reissueGroupTicket args#get_groupMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reissueGroupTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findGroupByTicket (seqid, iprot, oprot) =
    let args = read_findGroupByTicket_args iprot in
      iprot#readMessageEnd;
      let result = new findGroupByTicket_result in
        (try
          result#set_success (handler#findGroupByTicket args#get_ticketId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findGroupByTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_leaveGroup (seqid, iprot, oprot) =
    let args = read_leaveGroup_args iprot in
      iprot#readMessageEnd;
      let result = new leaveGroup_result in
        (try
          (handler#leaveGroup args#get_reqSeq args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("leaveGroup", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_leaveRoom (seqid, iprot, oprot) =
    let args = read_leaveRoom_args iprot in
      iprot#readMessageEnd;
      let result = new leaveRoom_result in
        (try
          (handler#leaveRoom args#get_reqSeq args#get_roomId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("leaveRoom", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_loginWithIdentityCredential (seqid, iprot, oprot) =
    let args = read_loginWithIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new loginWithIdentityCredential_result in
        (try
          result#set_success (handler#loginWithIdentityCredential args#get_identityProvider args#get_identifier args#get_password args#get_keepLoggedIn args#get_accessLocation args#get_systemName args#get_certificate);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("loginWithIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_loginWithIdentityCredentialForCertificate (seqid, iprot, oprot) =
    let args = read_loginWithIdentityCredentialForCertificate_args iprot in
      iprot#readMessageEnd;
      let result = new loginWithIdentityCredentialForCertificate_result in
        (try
          result#set_success (handler#loginWithIdentityCredentialForCertificate args#get_identityProvider args#get_identifier args#get_password args#get_keepLoggedIn args#get_accessLocation args#get_systemName args#get_certificate);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("loginWithIdentityCredentialForCertificate", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_loginWithVerifier (seqid, iprot, oprot) =
    let args = read_loginWithVerifier_args iprot in
      iprot#readMessageEnd;
      let result = new loginWithVerifier_result in
        (try
          result#set_success (handler#loginWithVerifier args#get_verifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("loginWithVerifier", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_loginWithVerifierForCerificate (seqid, iprot, oprot) =
    let args = read_loginWithVerifierForCerificate_args iprot in
      iprot#readMessageEnd;
      let result = new loginWithVerifierForCerificate_result in
        (try
          result#set_success (handler#loginWithVerifierForCerificate args#get_verifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("loginWithVerifierForCerificate", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_loginWithVerifierForCertificate (seqid, iprot, oprot) =
    let args = read_loginWithVerifierForCertificate_args iprot in
      iprot#readMessageEnd;
      let result = new loginWithVerifierForCertificate_result in
        (try
          result#set_success (handler#loginWithVerifierForCertificate args#get_verifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("loginWithVerifierForCertificate", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_logout (seqid, iprot, oprot) =
    let _ = read_logout_args iprot in
      iprot#readMessageEnd;
      let result = new logout_result in
        (try
          (handler#logout);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("logout", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_logoutSession (seqid, iprot, oprot) =
    let args = read_logoutSession_args iprot in
      iprot#readMessageEnd;
      let result = new logoutSession_result in
        (try
          (handler#logoutSession args#get_tokenKey);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("logoutSession", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_noop (seqid, iprot, oprot) =
    let _ = read_noop_args iprot in
      iprot#readMessageEnd;
      let result = new noop_result in
        (try
          (handler#noop);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("noop", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifiedRedirect (seqid, iprot, oprot) =
    let args = read_notifiedRedirect_args iprot in
      iprot#readMessageEnd;
      let result = new notifiedRedirect_result in
        (try
          (handler#notifiedRedirect args#get_paramMap);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifiedRedirect", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyBuddyOnAir (seqid, iprot, oprot) =
    let args = read_notifyBuddyOnAir_args iprot in
      iprot#readMessageEnd;
      let result = new notifyBuddyOnAir_result in
        (try
          result#set_success (handler#notifyBuddyOnAir args#get_seq args#get_receiverMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyBuddyOnAir", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyIndividualEvent (seqid, iprot, oprot) =
    let args = read_notifyIndividualEvent_args iprot in
      iprot#readMessageEnd;
      let result = new notifyIndividualEvent_result in
        (try
          (handler#notifyIndividualEvent args#get_notificationStatus args#get_receiverMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyIndividualEvent", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyInstalled (seqid, iprot, oprot) =
    let args = read_notifyInstalled_args iprot in
      iprot#readMessageEnd;
      let result = new notifyInstalled_result in
        (try
          (handler#notifyInstalled args#get_udidHash args#get_applicationTypeWithExtensions);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyInstalled", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyRegistrationComplete (seqid, iprot, oprot) =
    let args = read_notifyRegistrationComplete_args iprot in
      iprot#readMessageEnd;
      let result = new notifyRegistrationComplete_result in
        (try
          (handler#notifyRegistrationComplete args#get_udidHash args#get_applicationTypeWithExtensions);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyRegistrationComplete", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifySleep (seqid, iprot, oprot) =
    let args = read_notifySleep_args iprot in
      iprot#readMessageEnd;
      let result = new notifySleep_result in
        (try
          (handler#notifySleep args#get_lastRev args#get_badge);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifySleep", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyUpdated (seqid, iprot, oprot) =
    let args = read_notifyUpdated_args iprot in
      iprot#readMessageEnd;
      let result = new notifyUpdated_result in
        (try
          (handler#notifyUpdated args#get_lastRev args#get_deviceInfo);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyUpdated", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_openProximityMatch (seqid, iprot, oprot) =
    let args = read_openProximityMatch_args iprot in
      iprot#readMessageEnd;
      let result = new openProximityMatch_result in
        (try
          result#set_success (handler#openProximityMatch args#get_location);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("openProximityMatch", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerBuddyUser (seqid, iprot, oprot) =
    let args = read_registerBuddyUser_args iprot in
      iprot#readMessageEnd;
      let result = new registerBuddyUser_result in
        (try
          result#set_success (handler#registerBuddyUser args#get_buddyId args#get_registrarPassword);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerBuddyUser", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerBuddyUserid (seqid, iprot, oprot) =
    let args = read_registerBuddyUserid_args iprot in
      iprot#readMessageEnd;
      let result = new registerBuddyUserid_result in
        (try
          (handler#registerBuddyUserid args#get_seq args#get_userid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerBuddyUserid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerDevice (seqid, iprot, oprot) =
    let args = read_registerDevice_args iprot in
      iprot#readMessageEnd;
      let result = new registerDevice_result in
        (try
          result#set_success (handler#registerDevice args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerDevice", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerDeviceWithIdentityCredential (seqid, iprot, oprot) =
    let args = read_registerDeviceWithIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new registerDeviceWithIdentityCredential_result in
        (try
          result#set_success (handler#registerDeviceWithIdentityCredential args#get_sessionId args#get_provider args#get_identifier args#get_verifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerDeviceWithIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerDeviceWithoutPhoneNumber (seqid, iprot, oprot) =
    let args = read_registerDeviceWithoutPhoneNumber_args iprot in
      iprot#readMessageEnd;
      let result = new registerDeviceWithoutPhoneNumber_result in
        (try
          result#set_success (handler#registerDeviceWithoutPhoneNumber args#get_region args#get_udidHash args#get_deviceInfo);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerDeviceWithoutPhoneNumber", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerDeviceWithoutPhoneNumberWithIdentityCredential (seqid, iprot, oprot) =
    let args = read_registerDeviceWithoutPhoneNumberWithIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new registerDeviceWithoutPhoneNumberWithIdentityCredential_result in
        (try
          result#set_success (handler#registerDeviceWithoutPhoneNumberWithIdentityCredential args#get_region args#get_udidHash args#get_deviceInfo args#get_provider args#get_identifier args#get_verifier args#get_mid args#get_migrationPincodeSessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerDeviceWithoutPhoneNumberWithIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerUserid (seqid, iprot, oprot) =
    let args = read_registerUserid_args iprot in
      iprot#readMessageEnd;
      let result = new registerUserid_result in
        (try
          result#set_success (handler#registerUserid args#get_reqSeq args#get_userid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerUserid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerWapDevice (seqid, iprot, oprot) =
    let args = read_registerWapDevice_args iprot in
      iprot#readMessageEnd;
      let result = new registerWapDevice_result in
        (try
          result#set_success (handler#registerWapDevice args#get_invitationHash args#get_guidHash args#get_email args#get_deviceInfo);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerWapDevice", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerWithExistingSnsIdAndIdentityCredential (seqid, iprot, oprot) =
    let args = read_registerWithExistingSnsIdAndIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new registerWithExistingSnsIdAndIdentityCredential_result in
        (try
          result#set_success (handler#registerWithExistingSnsIdAndIdentityCredential args#get_identityCredential args#get_region args#get_udidHash args#get_deviceInfo);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerWithExistingSnsIdAndIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerWithSnsId (seqid, iprot, oprot) =
    let args = read_registerWithSnsId_args iprot in
      iprot#readMessageEnd;
      let result = new registerWithSnsId_result in
        (try
          result#set_success (handler#registerWithSnsId args#get_snsIdType args#get_snsAccessToken args#get_region args#get_udidHash args#get_deviceInfo args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerWithSnsId", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerWithSnsIdAndIdentityCredential (seqid, iprot, oprot) =
    let args = read_registerWithSnsIdAndIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new registerWithSnsIdAndIdentityCredential_result in
        (try
          result#set_success (handler#registerWithSnsIdAndIdentityCredential args#get_snsIdType args#get_snsAccessToken args#get_identityCredential args#get_region args#get_udidHash args#get_deviceInfo);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerWithSnsIdAndIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reissueDeviceCredential (seqid, iprot, oprot) =
    let _ = read_reissueDeviceCredential_args iprot in
      iprot#readMessageEnd;
      let result = new reissueDeviceCredential_result in
        (try
          result#set_success (handler#reissueDeviceCredential);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reissueDeviceCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reissueUserTicket (seqid, iprot, oprot) =
    let args = read_reissueUserTicket_args iprot in
      iprot#readMessageEnd;
      let result = new reissueUserTicket_result in
        (try
          result#set_success (handler#reissueUserTicket args#get_expirationTime args#get_maxUseCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reissueUserTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessageReadRange (seqid, iprot, oprot) =
    let args = read_getMessageReadRange_args iprot in
      iprot#readMessageEnd;
      let result = new getMessageReadRange_result in
        (try
          result#set_success (handler#getMessageReadRange args#get_chatIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessageReadRange", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_rejectGroupInvitation (seqid, iprot, oprot) =
    let args = read_rejectGroupInvitation_args iprot in
      iprot#readMessageEnd;
      let result = new rejectGroupInvitation_result in
        (try
          (handler#rejectGroupInvitation args#get_reqSeq args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("rejectGroupInvitation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_releaseSession (seqid, iprot, oprot) =
    let _ = read_releaseSession_args iprot in
      iprot#readMessageEnd;
      let result = new releaseSession_result in
        (try
          (handler#releaseSession);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("releaseSession", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeAllMessages (seqid, iprot, oprot) =
    let args = read_removeAllMessages_args iprot in
      iprot#readMessageEnd;
      let result = new removeAllMessages_result in
        (try
          (handler#removeAllMessages args#get_seq args#get_lastMessageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeAllMessages", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeBuddyLocation (seqid, iprot, oprot) =
    let args = read_removeBuddyLocation_args iprot in
      iprot#readMessageEnd;
      let result = new removeBuddyLocation_result in
        (try
          (handler#removeBuddyLocation args#get_mid args#get_index);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeBuddyLocation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeMessage (seqid, iprot, oprot) =
    let args = read_removeMessage_args iprot in
      iprot#readMessageEnd;
      let result = new removeMessage_result in
        (try
          result#set_success (handler#removeMessage args#get_messageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_makeUserAddMyselfAsContact (seqid, iprot, oprot) =
    let args = read_makeUserAddMyselfAsContact_args iprot in
      iprot#readMessageEnd;
      let result = new makeUserAddMyselfAsContact_result in
        (try
          result#set_success (handler#makeUserAddMyselfAsContact args#get_contactOwnerMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("makeUserAddMyselfAsContact", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeMessageFromMyHome (seqid, iprot, oprot) =
    let args = read_removeMessageFromMyHome_args iprot in
      iprot#readMessageEnd;
      let result = new removeMessageFromMyHome_result in
        (try
          result#set_success (handler#removeMessageFromMyHome args#get_messageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeMessageFromMyHome", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeSnsId (seqid, iprot, oprot) =
    let args = read_removeSnsId_args iprot in
      iprot#readMessageEnd;
      let result = new removeSnsId_result in
        (try
          result#set_success (handler#removeSnsId args#get_snsIdType);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeSnsId", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_report (seqid, iprot, oprot) =
    let args = read_report_args iprot in
      iprot#readMessageEnd;
      let result = new report_result in
        (try
          (handler#report args#get_syncOpRevision args#get_category args#get_report);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("report", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportContacts (seqid, iprot, oprot) =
    let args = read_reportContacts_args iprot in
      iprot#readMessageEnd;
      let result = new reportContacts_result in
        (try
          result#set_success (handler#reportContacts args#get_syncOpRevision args#get_category args#get_contactReports args#get_actionType);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportGroups (seqid, iprot, oprot) =
    let args = read_reportGroups_args iprot in
      iprot#readMessageEnd;
      let result = new reportGroups_result in
        (try
          (handler#reportGroups args#get_syncOpRevision args#get_groups);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportGroups", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportProfile (seqid, iprot, oprot) =
    let args = read_reportProfile_args iprot in
      iprot#readMessageEnd;
      let result = new reportProfile_result in
        (try
          (handler#reportProfile args#get_syncOpRevision args#get_profile);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportProfile", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportRooms (seqid, iprot, oprot) =
    let args = read_reportRooms_args iprot in
      iprot#readMessageEnd;
      let result = new reportRooms_result in
        (try
          (handler#reportRooms args#get_syncOpRevision args#get_rooms);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportRooms", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findAndAddContactByMetaTag (seqid, iprot, oprot) =
    let args = read_findAndAddContactByMetaTag_args iprot in
      iprot#readMessageEnd;
      let result = new findAndAddContactByMetaTag_result in
        (try
          result#set_success (handler#findAndAddContactByMetaTag args#get_reqSeq args#get_userid args#get_reference);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findAndAddContactByMetaTag", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportSettings (seqid, iprot, oprot) =
    let args = read_reportSettings_args iprot in
      iprot#readMessageEnd;
      let result = new reportSettings_result in
        (try
          (handler#reportSettings args#get_syncOpRevision args#get_settings);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportSettings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportSpam (seqid, iprot, oprot) =
    let args = read_reportSpam_args iprot in
      iprot#readMessageEnd;
      let result = new reportSpam_result in
        (try
          (handler#reportSpam args#get_chatMid args#get_memberMids args#get_spammerReasons args#get_senderMids args#get_spamMessageIds args#get_spamMessages);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportSpam", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportSpammer (seqid, iprot, oprot) =
    let args = read_reportSpammer_args iprot in
      iprot#readMessageEnd;
      let result = new reportSpammer_result in
        (try
          (handler#reportSpammer args#get_spammerMid args#get_spammerReasons args#get_spamMessageIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportSpammer", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_requestAccountPasswordReset (seqid, iprot, oprot) =
    let args = read_requestAccountPasswordReset_args iprot in
      iprot#readMessageEnd;
      let result = new requestAccountPasswordReset_result in
        (try
          (handler#requestAccountPasswordReset args#get_provider args#get_identifier args#get_locale);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("requestAccountPasswordReset", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_requestEmailConfirmation (seqid, iprot, oprot) =
    let args = read_requestEmailConfirmation_args iprot in
      iprot#readMessageEnd;
      let result = new requestEmailConfirmation_result in
        (try
          result#set_success (handler#requestEmailConfirmation args#get_emailConfirmation);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("requestEmailConfirmation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_requestIdentityUnbind (seqid, iprot, oprot) =
    let args = read_requestIdentityUnbind_args iprot in
      iprot#readMessageEnd;
      let result = new requestIdentityUnbind_result in
        (try
          (handler#requestIdentityUnbind args#get_provider args#get_identifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("requestIdentityUnbind", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_resendEmailConfirmation (seqid, iprot, oprot) =
    let args = read_resendEmailConfirmation_args iprot in
      iprot#readMessageEnd;
      let result = new resendEmailConfirmation_result in
        (try
          result#set_success (handler#resendEmailConfirmation args#get_verifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("resendEmailConfirmation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_resendPinCode (seqid, iprot, oprot) =
    let args = read_resendPinCode_args iprot in
      iprot#readMessageEnd;
      let result = new resendPinCode_result in
        (try
          (handler#resendPinCode args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("resendPinCode", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_resendPinCodeBySMS (seqid, iprot, oprot) =
    let args = read_resendPinCodeBySMS_args iprot in
      iprot#readMessageEnd;
      let result = new resendPinCodeBySMS_result in
        (try
          (handler#resendPinCodeBySMS args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("resendPinCodeBySMS", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendChatChecked (seqid, iprot, oprot) =
    let args = read_sendChatChecked_args iprot in
      iprot#readMessageEnd;
      let result = new sendChatChecked_result in
        (try
          (handler#sendChatChecked args#get_seq args#get_consumer args#get_lastMessageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendChatChecked", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendMessageAwaitCommit (seqid, iprot, oprot) =
    let args = read_sendMessageAwaitCommit_args iprot in
      iprot#readMessageEnd;
      let result = new sendMessageAwaitCommit_result in
        (try
          result#set_success (handler#sendMessageAwaitCommit args#get_seq args#get_message);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendMessageAwaitCommit", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendChatRemoved (seqid, iprot, oprot) =
    let args = read_sendChatRemoved_args iprot in
      iprot#readMessageEnd;
      let result = new sendChatRemoved_result in
        (try
          (handler#sendChatRemoved args#get_seq args#get_consumer args#get_lastMessageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendChatRemoved", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendContentPreviewUpdated (seqid, iprot, oprot) =
    let args = read_sendContentPreviewUpdated_args iprot in
      iprot#readMessageEnd;
      let result = new sendContentPreviewUpdated_result in
        (try
          result#set_success (handler#sendContentPreviewUpdated args#get_esq args#get_messageId args#get_receiverMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendContentPreviewUpdated", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendContentReceipt (seqid, iprot, oprot) =
    let args = read_sendContentReceipt_args iprot in
      iprot#readMessageEnd;
      let result = new sendContentReceipt_result in
        (try
          (handler#sendContentReceipt args#get_seq args#get_consumer args#get_messageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendContentReceipt", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendDummyPush (seqid, iprot, oprot) =
    let _ = read_sendDummyPush_args iprot in
      iprot#readMessageEnd;
      let result = new sendDummyPush_result in
        (try
          (handler#sendDummyPush);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendDummyPush", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeE2EEPublicKey (seqid, iprot, oprot) =
    let args = read_removeE2EEPublicKey_args iprot in
      iprot#readMessageEnd;
      let result = new removeE2EEPublicKey_result in
        (try
          (handler#removeE2EEPublicKey args#get_publicKey);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeE2EEPublicKey", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_negotiateE2EEPublicKey (seqid, iprot, oprot) =
    let args = read_negotiateE2EEPublicKey_args iprot in
      iprot#readMessageEnd;
      let result = new negotiateE2EEPublicKey_result in
        (try
          result#set_success (handler#negotiateE2EEPublicKey args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("negotiateE2EEPublicKey", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getE2EEPublicKey (seqid, iprot, oprot) =
    let args = read_getE2EEPublicKey_args iprot in
      iprot#readMessageEnd;
      let result = new getE2EEPublicKey_result in
        (try
          result#set_success (handler#getE2EEPublicKey args#get_mid args#get_version args#get_keyId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getE2EEPublicKey", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_requestE2EEKeyExchange (seqid, iprot, oprot) =
    let args = read_requestE2EEKeyExchange_args iprot in
      iprot#readMessageEnd;
      let result = new requestE2EEKeyExchange_result in
        (try
          (handler#requestE2EEKeyExchange args#get_reqSeq args#get_temporalPublicKey args#get_publicKey args#get_verifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("requestE2EEKeyExchange", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getLastE2EEPublicKeys (seqid, iprot, oprot) =
    let args = read_getLastE2EEPublicKeys_args iprot in
      iprot#readMessageEnd;
      let result = new getLastE2EEPublicKeys_result in
        (try
          result#set_success (handler#getLastE2EEPublicKeys args#get_chatMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getLastE2EEPublicKeys", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerE2EEPublicKey (seqid, iprot, oprot) =
    let args = read_registerE2EEPublicKey_args iprot in
      iprot#readMessageEnd;
      let result = new registerE2EEPublicKey_result in
        (try
          result#set_success (handler#registerE2EEPublicKey args#get_reqSeq args#get_publicKey);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerE2EEPublicKey", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getE2EEPublicKeys (seqid, iprot, oprot) =
    let _ = read_getE2EEPublicKeys_args iprot in
      iprot#readMessageEnd;
      let result = new getE2EEPublicKeys_result in
        (try
          result#set_success (handler#getE2EEPublicKeys);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getE2EEPublicKeys", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getE2EEPublicKeysEx (seqid, iprot, oprot) =
    let args = read_getE2EEPublicKeysEx_args iprot in
      iprot#readMessageEnd;
      let result = new getE2EEPublicKeysEx_result in
        (try
          result#set_success (handler#getE2EEPublicKeysEx args#get_ignoreE2EEStatus);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getE2EEPublicKeysEx", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getReadMessageOpsInBulk (seqid, iprot, oprot) =
    let args = read_getReadMessageOpsInBulk_args iprot in
      iprot#readMessageEnd;
      let result = new getReadMessageOpsInBulk_result in
        (try
          result#set_success (handler#getReadMessageOpsInBulk args#get_chatIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getReadMessageOpsInBulk", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendEvent (seqid, iprot, oprot) =
    let args = read_sendEvent_args iprot in
      iprot#readMessageEnd;
      let result = new sendEvent_result in
        (try
          result#set_success (handler#sendEvent args#get_seq args#get_message);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendEvent", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendMessage (seqid, iprot, oprot) =
    let args = read_sendMessage_args iprot in
      iprot#readMessageEnd;
      let result = new sendMessage_result in
        (try
          result#set_success (handler#sendMessage args#get_seq args#get_message);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendMessageIgnored (seqid, iprot, oprot) =
    let args = read_sendMessageIgnored_args iprot in
      iprot#readMessageEnd;
      let result = new sendMessageIgnored_result in
        (try
          (handler#sendMessageIgnored args#get_seq args#get_consumer args#get_messageIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendMessageIgnored", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendMessageReceipt (seqid, iprot, oprot) =
    let args = read_sendMessageReceipt_args iprot in
      iprot#readMessageEnd;
      let result = new sendMessageReceipt_result in
        (try
          (handler#sendMessageReceipt args#get_seq args#get_consumer args#get_messageIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendMessageReceipt", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findContactByMetaTag (seqid, iprot, oprot) =
    let args = read_findContactByMetaTag_args iprot in
      iprot#readMessageEnd;
      let result = new findContactByMetaTag_result in
        (try
          result#set_success (handler#findContactByMetaTag args#get_userid args#get_reference);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findContactByMetaTag", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendMessageToMyHome (seqid, iprot, oprot) =
    let args = read_sendMessageToMyHome_args iprot in
      iprot#readMessageEnd;
      let result = new sendMessageToMyHome_result in
        (try
          result#set_success (handler#sendMessageToMyHome args#get_seq args#get_message);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendMessageToMyHome", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_setBuddyLocation (seqid, iprot, oprot) =
    let args = read_setBuddyLocation_args iprot in
      iprot#readMessageEnd;
      let result = new setBuddyLocation_result in
        (try
          (handler#setBuddyLocation args#get_mid args#get_index args#get_location);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("setBuddyLocation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_setIdentityCredential (seqid, iprot, oprot) =
    let args = read_setIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new setIdentityCredential_result in
        (try
          (handler#setIdentityCredential args#get_identifier args#get_verifier args#get_provider);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("setIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_setNotificationsEnabled (seqid, iprot, oprot) =
    let args = read_setNotificationsEnabled_args iprot in
      iprot#readMessageEnd;
      let result = new setNotificationsEnabled_result in
        (try
          (handler#setNotificationsEnabled args#get_reqSeq args#get_type args#get_target args#get_enablement);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("setNotificationsEnabled", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_startUpdateVerification (seqid, iprot, oprot) =
    let args = read_startUpdateVerification_args iprot in
      iprot#readMessageEnd;
      let result = new startUpdateVerification_result in
        (try
          result#set_success (handler#startUpdateVerification args#get_region args#get_carrier args#get_phone args#get_udidHash args#get_deviceInfo args#get_networkCode args#get_locale);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("startUpdateVerification", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_startVerification (seqid, iprot, oprot) =
    let args = read_startVerification_args iprot in
      iprot#readMessageEnd;
      let result = new startVerification_result in
        (try
          result#set_success (handler#startVerification args#get_region args#get_carrier args#get_phone args#get_udidHash args#get_deviceInfo args#get_networkCode args#get_mid args#get_locale args#get_simInfo args#get_oldUdidHash);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("startVerification", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateGroupPreferenceAttribute (seqid, iprot, oprot) =
    let args = read_updateGroupPreferenceAttribute_args iprot in
      iprot#readMessageEnd;
      let result = new updateGroupPreferenceAttribute_result in
        (try
          (handler#updateGroupPreferenceAttribute args#get_reqSeq args#get_groupMid args#get_updatedAttrs);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateGroupPreferenceAttribute", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createRoomV2 (seqid, iprot, oprot) =
    let args = read_createRoomV2_args iprot in
      iprot#readMessageEnd;
      let result = new createRoomV2_result in
        (try
          result#set_success (handler#createRoomV2 args#get_reqSeq args#get_contactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createRoomV2", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_storeUpdateProfileAttribute (seqid, iprot, oprot) =
    let args = read_storeUpdateProfileAttribute_args iprot in
      iprot#readMessageEnd;
      let result = new storeUpdateProfileAttribute_result in
        (try
          (handler#storeUpdateProfileAttribute args#get_seq args#get_profileAttribute args#get_value);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("storeUpdateProfileAttribute", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_syncContactBySnsIds (seqid, iprot, oprot) =
    let args = read_syncContactBySnsIds_args iprot in
      iprot#readMessageEnd;
      let result = new syncContactBySnsIds_result in
        (try
          result#set_success (handler#syncContactBySnsIds args#get_reqSeq args#get_modifications);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("syncContactBySnsIds", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_syncContacts (seqid, iprot, oprot) =
    let args = read_syncContacts_args iprot in
      iprot#readMessageEnd;
      let result = new syncContacts_result in
        (try
          result#set_success (handler#syncContacts args#get_reqSeq args#get_localContacts);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("syncContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_trySendMessage (seqid, iprot, oprot) =
    let args = read_trySendMessage_args iprot in
      iprot#readMessageEnd;
      let result = new trySendMessage_result in
        (try
          result#set_success (handler#trySendMessage args#get_seq args#get_message);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("trySendMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getNextMessagesV2 (seqid, iprot, oprot) =
    let args = read_getNextMessagesV2_args iprot in
      iprot#readMessageEnd;
      let result = new getNextMessagesV2_result in
        (try
          result#set_success (handler#getNextMessagesV2 args#get_messageBoxId args#get_startMessageId args#get_messagesCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getNextMessagesV2", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessageBoxCompactWrapUpV2 (seqid, iprot, oprot) =
    let args = read_getMessageBoxCompactWrapUpV2_args iprot in
      iprot#readMessageEnd;
      let result = new getMessageBoxCompactWrapUpV2_result in
        (try
          result#set_success (handler#getMessageBoxCompactWrapUpV2 args#get_messageBoxId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessageBoxCompactWrapUpV2", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getRecentMessagesV2 (seqid, iprot, oprot) =
    let args = read_getRecentMessagesV2_args iprot in
      iprot#readMessageEnd;
      let result = new getRecentMessagesV2_result in
        (try
          result#set_success (handler#getRecentMessagesV2 args#get_messageBoxId args#get_messagesCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getRecentMessagesV2", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_validateContactsOnBot (seqid, iprot, oprot) =
    let args = read_validateContactsOnBot_args iprot in
      iprot#readMessageEnd;
      let result = new validateContactsOnBot_result in
        (try
          result#set_success (handler#validateContactsOnBot args#get_contacts);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("validateContactsOnBot", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_tryFriendRequest (seqid, iprot, oprot) =
    let args = read_tryFriendRequest_args iprot in
      iprot#readMessageEnd;
      let result = new tryFriendRequest_result in
        (try
          (handler#tryFriendRequest args#get_midOrEMid args#get_method args#get_friendRequestParams);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("tryFriendRequest", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_unblockContact (seqid, iprot, oprot) =
    let args = read_unblockContact_args iprot in
      iprot#readMessageEnd;
      let result = new unblockContact_result in
        (try
          (handler#unblockContact args#get_reqSeq args#get_id);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("unblockContact", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_unblockRecommendation (seqid, iprot, oprot) =
    let args = read_unblockRecommendation_args iprot in
      iprot#readMessageEnd;
      let result = new unblockRecommendation_result in
        (try
          (handler#unblockRecommendation args#get_reqSeq args#get_id);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("unblockRecommendation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_unregisterUserAndDevice (seqid, iprot, oprot) =
    let _ = read_unregisterUserAndDevice_args iprot in
      iprot#readMessageEnd;
      let result = new unregisterUserAndDevice_result in
        (try
          result#set_success (handler#unregisterUserAndDevice);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("unregisterUserAndDevice", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateApnsDeviceToken (seqid, iprot, oprot) =
    let args = read_updateApnsDeviceToken_args iprot in
      iprot#readMessageEnd;
      let result = new updateApnsDeviceToken_result in
        (try
          (handler#updateApnsDeviceToken args#get_apnsDeviceToken);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateApnsDeviceToken", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateBuddySetting (seqid, iprot, oprot) =
    let args = read_updateBuddySetting_args iprot in
      iprot#readMessageEnd;
      let result = new updateBuddySetting_result in
        (try
          (handler#updateBuddySetting args#get_key args#get_value);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateBuddySetting", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateC2DMRegistrationId (seqid, iprot, oprot) =
    let args = read_updateC2DMRegistrationId_args iprot in
      iprot#readMessageEnd;
      let result = new updateC2DMRegistrationId_result in
        (try
          (handler#updateC2DMRegistrationId args#get_registrationId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateC2DMRegistrationId", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateContactSetting (seqid, iprot, oprot) =
    let args = read_updateContactSetting_args iprot in
      iprot#readMessageEnd;
      let result = new updateContactSetting_result in
        (try
          (handler#updateContactSetting args#get_reqSeq args#get_mid args#get_flag args#get_value);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateContactSetting", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateCustomModeSettings (seqid, iprot, oprot) =
    let args = read_updateCustomModeSettings_args iprot in
      iprot#readMessageEnd;
      let result = new updateCustomModeSettings_result in
        (try
          (handler#updateCustomModeSettings args#get_customMode args#get_paramMap);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateCustomModeSettings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateDeviceInfo (seqid, iprot, oprot) =
    let args = read_updateDeviceInfo_args iprot in
      iprot#readMessageEnd;
      let result = new updateDeviceInfo_result in
        (try
          (handler#updateDeviceInfo args#get_deviceUid args#get_deviceInfo);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateDeviceInfo", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateGroup (seqid, iprot, oprot) =
    let args = read_updateGroup_args iprot in
      iprot#readMessageEnd;
      let result = new updateGroup_result in
        (try
          (handler#updateGroup args#get_reqSeq args#get_group);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateGroup", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateNotificationToken (seqid, iprot, oprot) =
    let args = read_updateNotificationToken_args iprot in
      iprot#readMessageEnd;
      let result = new updateNotificationToken_result in
        (try
          (handler#updateNotificationToken args#get_type args#get_token);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateNotificationToken", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateNotificationTokenWithBytes (seqid, iprot, oprot) =
    let args = read_updateNotificationTokenWithBytes_args iprot in
      iprot#readMessageEnd;
      let result = new updateNotificationTokenWithBytes_result in
        (try
          (handler#updateNotificationTokenWithBytes args#get_type args#get_token);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateNotificationTokenWithBytes", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateProfile (seqid, iprot, oprot) =
    let args = read_updateProfile_args iprot in
      iprot#readMessageEnd;
      let result = new updateProfile_result in
        (try
          (handler#updateProfile args#get_reqSeq args#get_profile);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateProfile", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateProfileAttribute (seqid, iprot, oprot) =
    let args = read_updateProfileAttribute_args iprot in
      iprot#readMessageEnd;
      let result = new updateProfileAttribute_result in
        (try
          (handler#updateProfileAttribute args#get_reqSeq args#get_attr args#get_value);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateProfileAttribute", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateProfileAttributes (seqid, iprot, oprot) =
    let args = read_updateProfileAttributes_args iprot in
      iprot#readMessageEnd;
      let result = new updateProfileAttributes_result in
        (handler#updateProfileAttributes args#get_reqSeq args#get_request);
        oprot#writeMessageBegin ("updateProfileAttributes", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateRegion (seqid, iprot, oprot) =
    let args = read_updateRegion_args iprot in
      iprot#readMessageEnd;
      let result = new updateRegion_result in
        (try
          (handler#updateRegion args#get_region);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateRegion", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSettings (seqid, iprot, oprot) =
    let args = read_updateSettings_args iprot in
      iprot#readMessageEnd;
      let result = new updateSettings_result in
        (try
          (handler#updateSettings args#get_reqSeq args#get_settings);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSettings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSettings2 (seqid, iprot, oprot) =
    let args = read_updateSettings2_args iprot in
      iprot#readMessageEnd;
      let result = new updateSettings2_result in
        (try
          result#set_success (handler#updateSettings2 args#get_reqSeq args#get_settings);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSettings2", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSettingsAttribute (seqid, iprot, oprot) =
    let args = read_updateSettingsAttribute_args iprot in
      iprot#readMessageEnd;
      let result = new updateSettingsAttribute_result in
        (try
          (handler#updateSettingsAttribute args#get_reqSeq args#get_attr args#get_value);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSettingsAttribute", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSettingsAttributes (seqid, iprot, oprot) =
    let args = read_updateSettingsAttributes_args iprot in
      iprot#readMessageEnd;
      let result = new updateSettingsAttributes_result in
        (try
          result#set_success (handler#updateSettingsAttributes args#get_reqSeq args#get_attrBitset args#get_settings);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSettingsAttributes", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_verifyIdentityCredential (seqid, iprot, oprot) =
    let args = read_verifyIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new verifyIdentityCredential_result in
        (try
          (handler#verifyIdentityCredential args#get_identityProvider args#get_identifier args#get_password);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("verifyIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_verifyIdentityCredentialWithResult (seqid, iprot, oprot) =
    let args = read_verifyIdentityCredentialWithResult_args iprot in
      iprot#readMessageEnd;
      let result = new verifyIdentityCredentialWithResult_result in
        (try
          result#set_success (handler#verifyIdentityCredentialWithResult args#get_identityCredential);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("verifyIdentityCredentialWithResult", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_verifyPhone (seqid, iprot, oprot) =
    let args = read_verifyPhone_args iprot in
      iprot#readMessageEnd;
      let result = new verifyPhone_result in
        (try
          result#set_success (handler#verifyPhone args#get_sessionId args#get_pinCode args#get_udidHash);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("verifyPhone", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_verifyQrcode (seqid, iprot, oprot) =
    let args = read_verifyQrcode_args iprot in
      iprot#readMessageEnd;
      let result = new verifyQrcode_result in
        (try
          result#set_success (handler#verifyQrcode args#get_verifier args#get_pinCode);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("verifyQrcode", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "searchCollection" self#process_searchCollection;
    Hashtbl.add processMap "getChatRoomAnnouncementsBulk" self#process_getChatRoomAnnouncementsBulk;
    Hashtbl.add processMap "getChatRoomAnnouncements" self#process_getChatRoomAnnouncements;
    Hashtbl.add processMap "createChatRoomAnnouncement" self#process_createChatRoomAnnouncement;
    Hashtbl.add processMap "removeChatRoomAnnouncement" self#process_removeChatRoomAnnouncement;
    Hashtbl.add processMap "unsendMessage" self#process_unsendMessage;
    Hashtbl.add processMap "getGroupWithoutMembers" self#process_getGroupWithoutMembers;
    Hashtbl.add processMap "requestResendMessage" self#process_requestResendMessage;
    Hashtbl.add processMap "respondResendMessage" self#process_respondResendMessage;
    Hashtbl.add processMap "acceptGroupInvitation" self#process_acceptGroupInvitation;
    Hashtbl.add processMap "acceptGroupInvitationByTicket" self#process_acceptGroupInvitationByTicket;
    Hashtbl.add processMap "acceptProximityMatches" self#process_acceptProximityMatches;
    Hashtbl.add processMap "acquireCallRoute" self#process_acquireCallRoute;
    Hashtbl.add processMap "acquireCallTicket" self#process_acquireCallTicket;
    Hashtbl.add processMap "acquireEncryptedAccessToken" self#process_acquireEncryptedAccessToken;
    Hashtbl.add processMap "addSnsId" self#process_addSnsId;
    Hashtbl.add processMap "blockContact" self#process_blockContact;
    Hashtbl.add processMap "blockRecommendation" self#process_blockRecommendation;
    Hashtbl.add processMap "cancelGroupInvitation" self#process_cancelGroupInvitation;
    Hashtbl.add processMap "changeVerificationMethod" self#process_changeVerificationMethod;
    Hashtbl.add processMap "clearIdentityCredential" self#process_clearIdentityCredential;
    Hashtbl.add processMap "clearMessageBox" self#process_clearMessageBox;
    Hashtbl.add processMap "closeProximityMatch" self#process_closeProximityMatch;
    Hashtbl.add processMap "commitSendMessage" self#process_commitSendMessage;
    Hashtbl.add processMap "commitSendMessages" self#process_commitSendMessages;
    Hashtbl.add processMap "commitUpdateProfile" self#process_commitUpdateProfile;
    Hashtbl.add processMap "confirmEmail" self#process_confirmEmail;
    Hashtbl.add processMap "createGroup" self#process_createGroup;
    Hashtbl.add processMap "createQrcodeBase64Image" self#process_createQrcodeBase64Image;
    Hashtbl.add processMap "createRoom" self#process_createRoom;
    Hashtbl.add processMap "createSession" self#process_createSession;
    Hashtbl.add processMap "fetchAnnouncements" self#process_fetchAnnouncements;
    Hashtbl.add processMap "fetchMessages" self#process_fetchMessages;
    Hashtbl.add processMap "fetchOperations" self#process_fetchOperations;
    Hashtbl.add processMap "fetchOps" self#process_fetchOps;
    Hashtbl.add processMap "findAndAddContactsByEmail" self#process_findAndAddContactsByEmail;
    Hashtbl.add processMap "findAndAddContactsByMid" self#process_findAndAddContactsByMid;
    Hashtbl.add processMap "findGroupByTicketV2" self#process_findGroupByTicketV2;
    Hashtbl.add processMap "findAndAddContactsByPhone" self#process_findAndAddContactsByPhone;
    Hashtbl.add processMap "getFriendRequests" self#process_getFriendRequests;
    Hashtbl.add processMap "removeFriendRequest" self#process_removeFriendRequest;
    Hashtbl.add processMap "findAndAddContactsByUserid" self#process_findAndAddContactsByUserid;
    Hashtbl.add processMap "findContactByUserid" self#process_findContactByUserid;
    Hashtbl.add processMap "findContactByUserTicket" self#process_findContactByUserTicket;
    Hashtbl.add processMap "findContactsByEmail" self#process_findContactsByEmail;
    Hashtbl.add processMap "findContactsByPhone" self#process_findContactsByPhone;
    Hashtbl.add processMap "findSnsIdUserStatus" self#process_findSnsIdUserStatus;
    Hashtbl.add processMap "finishUpdateVerification" self#process_finishUpdateVerification;
    Hashtbl.add processMap "generateUserTicket" self#process_generateUserTicket;
    Hashtbl.add processMap "destroyMessage" self#process_destroyMessage;
    Hashtbl.add processMap "getAcceptedProximityMatches" self#process_getAcceptedProximityMatches;
    Hashtbl.add processMap "getActiveBuddySubscriberIds" self#process_getActiveBuddySubscriberIds;
    Hashtbl.add processMap "getAllContactIds" self#process_getAllContactIds;
    Hashtbl.add processMap "getAuthQrcode" self#process_getAuthQrcode;
    Hashtbl.add processMap "getBlockedContactIds" self#process_getBlockedContactIds;
    Hashtbl.add processMap "registerWithPhoneNumber" self#process_registerWithPhoneNumber;
    Hashtbl.add processMap "registerWithPhoneNumberAndPassword" self#process_registerWithPhoneNumberAndPassword;
    Hashtbl.add processMap "getAnalyticsInfo" self#process_getAnalyticsInfo;
    Hashtbl.add processMap "reportClientStatistics" self#process_reportClientStatistics;
    Hashtbl.add processMap "verifyPhoneNumberForLogin" self#process_verifyPhoneNumberForLogin;
    Hashtbl.add processMap "verifyPhoneNumber" self#process_verifyPhoneNumber;
    Hashtbl.add processMap "getBlockedContactIdsByRange" self#process_getBlockedContactIdsByRange;
    Hashtbl.add processMap "getBlockedRecommendationIds" self#process_getBlockedRecommendationIds;
    Hashtbl.add processMap "getBuddyBlockerIds" self#process_getBuddyBlockerIds;
    Hashtbl.add processMap "getBuddyLocation" self#process_getBuddyLocation;
    Hashtbl.add processMap "getCompactContactsModifiedSince" self#process_getCompactContactsModifiedSince;
    Hashtbl.add processMap "getCompactGroup" self#process_getCompactGroup;
    Hashtbl.add processMap "getCompactRoom" self#process_getCompactRoom;
    Hashtbl.add processMap "getContact" self#process_getContact;
    Hashtbl.add processMap "getContacts" self#process_getContacts;
    Hashtbl.add processMap "getContactWithFriendRequestStatus" self#process_getContactWithFriendRequestStatus;
    Hashtbl.add processMap "getCountryWithRequestIp" self#process_getCountryWithRequestIp;
    Hashtbl.add processMap "getFavoriteMids" self#process_getFavoriteMids;
    Hashtbl.add processMap "getGroup" self#process_getGroup;
    Hashtbl.add processMap "getGroupIdsInvited" self#process_getGroupIdsInvited;
    Hashtbl.add processMap "getGroupIdsJoined" self#process_getGroupIdsJoined;
    Hashtbl.add processMap "getGroups" self#process_getGroups;
    Hashtbl.add processMap "getHiddenContactMids" self#process_getHiddenContactMids;
    Hashtbl.add processMap "getIdentityIdentifier" self#process_getIdentityIdentifier;
    Hashtbl.add processMap "getLastAnnouncementIndex" self#process_getLastAnnouncementIndex;
    Hashtbl.add processMap "getLastOpRevision" self#process_getLastOpRevision;
    Hashtbl.add processMap "getSuggestRevisions" self#process_getSuggestRevisions;
    Hashtbl.add processMap "getPreviousMessagesV2WithReadCount" self#process_getPreviousMessagesV2WithReadCount;
    Hashtbl.add processMap "getMessageBox" self#process_getMessageBox;
    Hashtbl.add processMap "getMessageBoxCompactWrapUp" self#process_getMessageBoxCompactWrapUp;
    Hashtbl.add processMap "getMessageBoxCompactWrapUpList" self#process_getMessageBoxCompactWrapUpList;
    Hashtbl.add processMap "getMessageBoxList" self#process_getMessageBoxList;
    Hashtbl.add processMap "getMessageBoxListByStatus" self#process_getMessageBoxListByStatus;
    Hashtbl.add processMap "getMessageBoxWrapUp" self#process_getMessageBoxWrapUp;
    Hashtbl.add processMap "getMessageBoxWrapUpList" self#process_getMessageBoxWrapUpList;
    Hashtbl.add processMap "getMessagesBySequenceNumber" self#process_getMessagesBySequenceNumber;
    Hashtbl.add processMap "getNextMessages" self#process_getNextMessages;
    Hashtbl.add processMap "getNotificationPolicy" self#process_getNotificationPolicy;
    Hashtbl.add processMap "getPreviousMessages" self#process_getPreviousMessages;
    Hashtbl.add processMap "getProfile" self#process_getProfile;
    Hashtbl.add processMap "getProximityMatchCandidateList" self#process_getProximityMatchCandidateList;
    Hashtbl.add processMap "getProximityMatchCandidates" self#process_getProximityMatchCandidates;
    Hashtbl.add processMap "getRecentMessages" self#process_getRecentMessages;
    Hashtbl.add processMap "getRecommendationIds" self#process_getRecommendationIds;
    Hashtbl.add processMap "getRoom" self#process_getRoom;
    Hashtbl.add processMap "getRSAKeyInfo" self#process_getRSAKeyInfo;
    Hashtbl.add processMap "getServerTime" self#process_getServerTime;
    Hashtbl.add processMap "getSessions" self#process_getSessions;
    Hashtbl.add processMap "getSettings" self#process_getSettings;
    Hashtbl.add processMap "getGroupsV2" self#process_getGroupsV2;
    Hashtbl.add processMap "getSettingsAttributes" self#process_getSettingsAttributes;
    Hashtbl.add processMap "getSystemConfiguration" self#process_getSystemConfiguration;
    Hashtbl.add processMap "getUserTicket" self#process_getUserTicket;
    Hashtbl.add processMap "getWapInvitation" self#process_getWapInvitation;
    Hashtbl.add processMap "invalidateUserTicket" self#process_invalidateUserTicket;
    Hashtbl.add processMap "inviteFriendsBySms" self#process_inviteFriendsBySms;
    Hashtbl.add processMap "inviteIntoGroup" self#process_inviteIntoGroup;
    Hashtbl.add processMap "inviteIntoRoom" self#process_inviteIntoRoom;
    Hashtbl.add processMap "inviteViaEmail" self#process_inviteViaEmail;
    Hashtbl.add processMap "isIdentityIdentifierAvailable" self#process_isIdentityIdentifierAvailable;
    Hashtbl.add processMap "isUseridAvailable" self#process_isUseridAvailable;
    Hashtbl.add processMap "kickoutFromGroup" self#process_kickoutFromGroup;
    Hashtbl.add processMap "reissueGroupTicket" self#process_reissueGroupTicket;
    Hashtbl.add processMap "findGroupByTicket" self#process_findGroupByTicket;
    Hashtbl.add processMap "leaveGroup" self#process_leaveGroup;
    Hashtbl.add processMap "leaveRoom" self#process_leaveRoom;
    Hashtbl.add processMap "loginWithIdentityCredential" self#process_loginWithIdentityCredential;
    Hashtbl.add processMap "loginWithIdentityCredentialForCertificate" self#process_loginWithIdentityCredentialForCertificate;
    Hashtbl.add processMap "loginWithVerifier" self#process_loginWithVerifier;
    Hashtbl.add processMap "loginWithVerifierForCerificate" self#process_loginWithVerifierForCerificate;
    Hashtbl.add processMap "loginWithVerifierForCertificate" self#process_loginWithVerifierForCertificate;
    Hashtbl.add processMap "logout" self#process_logout;
    Hashtbl.add processMap "logoutSession" self#process_logoutSession;
    Hashtbl.add processMap "noop" self#process_noop;
    Hashtbl.add processMap "notifiedRedirect" self#process_notifiedRedirect;
    Hashtbl.add processMap "notifyBuddyOnAir" self#process_notifyBuddyOnAir;
    Hashtbl.add processMap "notifyIndividualEvent" self#process_notifyIndividualEvent;
    Hashtbl.add processMap "notifyInstalled" self#process_notifyInstalled;
    Hashtbl.add processMap "notifyRegistrationComplete" self#process_notifyRegistrationComplete;
    Hashtbl.add processMap "notifySleep" self#process_notifySleep;
    Hashtbl.add processMap "notifyUpdated" self#process_notifyUpdated;
    Hashtbl.add processMap "openProximityMatch" self#process_openProximityMatch;
    Hashtbl.add processMap "registerBuddyUser" self#process_registerBuddyUser;
    Hashtbl.add processMap "registerBuddyUserid" self#process_registerBuddyUserid;
    Hashtbl.add processMap "registerDevice" self#process_registerDevice;
    Hashtbl.add processMap "registerDeviceWithIdentityCredential" self#process_registerDeviceWithIdentityCredential;
    Hashtbl.add processMap "registerDeviceWithoutPhoneNumber" self#process_registerDeviceWithoutPhoneNumber;
    Hashtbl.add processMap "registerDeviceWithoutPhoneNumberWithIdentityCredential" self#process_registerDeviceWithoutPhoneNumberWithIdentityCredential;
    Hashtbl.add processMap "registerUserid" self#process_registerUserid;
    Hashtbl.add processMap "registerWapDevice" self#process_registerWapDevice;
    Hashtbl.add processMap "registerWithExistingSnsIdAndIdentityCredential" self#process_registerWithExistingSnsIdAndIdentityCredential;
    Hashtbl.add processMap "registerWithSnsId" self#process_registerWithSnsId;
    Hashtbl.add processMap "registerWithSnsIdAndIdentityCredential" self#process_registerWithSnsIdAndIdentityCredential;
    Hashtbl.add processMap "reissueDeviceCredential" self#process_reissueDeviceCredential;
    Hashtbl.add processMap "reissueUserTicket" self#process_reissueUserTicket;
    Hashtbl.add processMap "getMessageReadRange" self#process_getMessageReadRange;
    Hashtbl.add processMap "rejectGroupInvitation" self#process_rejectGroupInvitation;
    Hashtbl.add processMap "releaseSession" self#process_releaseSession;
    Hashtbl.add processMap "removeAllMessages" self#process_removeAllMessages;
    Hashtbl.add processMap "removeBuddyLocation" self#process_removeBuddyLocation;
    Hashtbl.add processMap "removeMessage" self#process_removeMessage;
    Hashtbl.add processMap "makeUserAddMyselfAsContact" self#process_makeUserAddMyselfAsContact;
    Hashtbl.add processMap "removeMessageFromMyHome" self#process_removeMessageFromMyHome;
    Hashtbl.add processMap "removeSnsId" self#process_removeSnsId;
    Hashtbl.add processMap "report" self#process_report;
    Hashtbl.add processMap "reportContacts" self#process_reportContacts;
    Hashtbl.add processMap "reportGroups" self#process_reportGroups;
    Hashtbl.add processMap "reportProfile" self#process_reportProfile;
    Hashtbl.add processMap "reportRooms" self#process_reportRooms;
    Hashtbl.add processMap "findAndAddContactByMetaTag" self#process_findAndAddContactByMetaTag;
    Hashtbl.add processMap "reportSettings" self#process_reportSettings;
    Hashtbl.add processMap "reportSpam" self#process_reportSpam;
    Hashtbl.add processMap "reportSpammer" self#process_reportSpammer;
    Hashtbl.add processMap "requestAccountPasswordReset" self#process_requestAccountPasswordReset;
    Hashtbl.add processMap "requestEmailConfirmation" self#process_requestEmailConfirmation;
    Hashtbl.add processMap "requestIdentityUnbind" self#process_requestIdentityUnbind;
    Hashtbl.add processMap "resendEmailConfirmation" self#process_resendEmailConfirmation;
    Hashtbl.add processMap "resendPinCode" self#process_resendPinCode;
    Hashtbl.add processMap "resendPinCodeBySMS" self#process_resendPinCodeBySMS;
    Hashtbl.add processMap "sendChatChecked" self#process_sendChatChecked;
    Hashtbl.add processMap "sendMessageAwaitCommit" self#process_sendMessageAwaitCommit;
    Hashtbl.add processMap "sendChatRemoved" self#process_sendChatRemoved;
    Hashtbl.add processMap "sendContentPreviewUpdated" self#process_sendContentPreviewUpdated;
    Hashtbl.add processMap "sendContentReceipt" self#process_sendContentReceipt;
    Hashtbl.add processMap "sendDummyPush" self#process_sendDummyPush;
    Hashtbl.add processMap "removeE2EEPublicKey" self#process_removeE2EEPublicKey;
    Hashtbl.add processMap "negotiateE2EEPublicKey" self#process_negotiateE2EEPublicKey;
    Hashtbl.add processMap "getE2EEPublicKey" self#process_getE2EEPublicKey;
    Hashtbl.add processMap "requestE2EEKeyExchange" self#process_requestE2EEKeyExchange;
    Hashtbl.add processMap "getLastE2EEPublicKeys" self#process_getLastE2EEPublicKeys;
    Hashtbl.add processMap "registerE2EEPublicKey" self#process_registerE2EEPublicKey;
    Hashtbl.add processMap "getE2EEPublicKeys" self#process_getE2EEPublicKeys;
    Hashtbl.add processMap "getE2EEPublicKeysEx" self#process_getE2EEPublicKeysEx;
    Hashtbl.add processMap "getReadMessageOpsInBulk" self#process_getReadMessageOpsInBulk;
    Hashtbl.add processMap "sendEvent" self#process_sendEvent;
    Hashtbl.add processMap "sendMessage" self#process_sendMessage;
    Hashtbl.add processMap "sendMessageIgnored" self#process_sendMessageIgnored;
    Hashtbl.add processMap "sendMessageReceipt" self#process_sendMessageReceipt;
    Hashtbl.add processMap "findContactByMetaTag" self#process_findContactByMetaTag;
    Hashtbl.add processMap "sendMessageToMyHome" self#process_sendMessageToMyHome;
    Hashtbl.add processMap "setBuddyLocation" self#process_setBuddyLocation;
    Hashtbl.add processMap "setIdentityCredential" self#process_setIdentityCredential;
    Hashtbl.add processMap "setNotificationsEnabled" self#process_setNotificationsEnabled;
    Hashtbl.add processMap "startUpdateVerification" self#process_startUpdateVerification;
    Hashtbl.add processMap "startVerification" self#process_startVerification;
    Hashtbl.add processMap "updateGroupPreferenceAttribute" self#process_updateGroupPreferenceAttribute;
    Hashtbl.add processMap "createRoomV2" self#process_createRoomV2;
    Hashtbl.add processMap "storeUpdateProfileAttribute" self#process_storeUpdateProfileAttribute;
    Hashtbl.add processMap "syncContactBySnsIds" self#process_syncContactBySnsIds;
    Hashtbl.add processMap "syncContacts" self#process_syncContacts;
    Hashtbl.add processMap "trySendMessage" self#process_trySendMessage;
    Hashtbl.add processMap "getNextMessagesV2" self#process_getNextMessagesV2;
    Hashtbl.add processMap "getMessageBoxCompactWrapUpV2" self#process_getMessageBoxCompactWrapUpV2;
    Hashtbl.add processMap "getRecentMessagesV2" self#process_getRecentMessagesV2;
    Hashtbl.add processMap "validateContactsOnBot" self#process_validateContactsOnBot;
    Hashtbl.add processMap "tryFriendRequest" self#process_tryFriendRequest;
    Hashtbl.add processMap "unblockContact" self#process_unblockContact;
    Hashtbl.add processMap "unblockRecommendation" self#process_unblockRecommendation;
    Hashtbl.add processMap "unregisterUserAndDevice" self#process_unregisterUserAndDevice;
    Hashtbl.add processMap "updateApnsDeviceToken" self#process_updateApnsDeviceToken;
    Hashtbl.add processMap "updateBuddySetting" self#process_updateBuddySetting;
    Hashtbl.add processMap "updateC2DMRegistrationId" self#process_updateC2DMRegistrationId;
    Hashtbl.add processMap "updateContactSetting" self#process_updateContactSetting;
    Hashtbl.add processMap "updateCustomModeSettings" self#process_updateCustomModeSettings;
    Hashtbl.add processMap "updateDeviceInfo" self#process_updateDeviceInfo;
    Hashtbl.add processMap "updateGroup" self#process_updateGroup;
    Hashtbl.add processMap "updateNotificationToken" self#process_updateNotificationToken;
    Hashtbl.add processMap "updateNotificationTokenWithBytes" self#process_updateNotificationTokenWithBytes;
    Hashtbl.add processMap "updateProfile" self#process_updateProfile;
    Hashtbl.add processMap "updateProfileAttribute" self#process_updateProfileAttribute;
    Hashtbl.add processMap "updateProfileAttributes" self#process_updateProfileAttributes;
    Hashtbl.add processMap "updateRegion" self#process_updateRegion;
    Hashtbl.add processMap "updateSettings" self#process_updateSettings;
    Hashtbl.add processMap "updateSettings2" self#process_updateSettings2;
    Hashtbl.add processMap "updateSettingsAttribute" self#process_updateSettingsAttribute;
    Hashtbl.add processMap "updateSettingsAttributes" self#process_updateSettingsAttributes;
    Hashtbl.add processMap "verifyIdentityCredential" self#process_verifyIdentityCredential;
    Hashtbl.add processMap "verifyIdentityCredentialWithResult" self#process_verifyIdentityCredentialWithResult;
    Hashtbl.add processMap "verifyPhone" self#process_verifyPhone;
    Hashtbl.add processMap "verifyQrcode" self#process_verifyQrcode;
end

