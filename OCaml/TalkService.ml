(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class getChatRoomAnnouncementsBulk_args =
object (self)
  val mutable _chatRoomMids : string list option = None
  method get_chatRoomMids = _chatRoomMids
  method grab_chatRoomMids = match _chatRoomMids with None->raise (Field_empty "getChatRoomAnnouncementsBulk_args.chatRoomMids") | Some _x6591 -> _x6591
  method set_chatRoomMids _x6591 = _chatRoomMids <- Some _x6591
  method unset_chatRoomMids = _chatRoomMids <- None
  method reset_chatRoomMids = _chatRoomMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChatRoomAnnouncementsBulk_args";
    (match _chatRoomMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatRoomMids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6594 ->         oprot#writeString(_iter6594);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChatRoomAnnouncementsBulk_args (iprot : Protocol.t) =
  let _str6595 = new getChatRoomAnnouncementsBulk_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6596,_id6597) = iprot#readFieldBegin in
        if _t6596 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6597 with 
          | 2 -> (if _t6596 = Protocol.T_LIST then
              _str6595#set_chatRoomMids 
                (let (_etype6601,_size6598) = iprot#readListBegin in
                  let _con6602 = (Array.to_list (Array.init _size6598 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6602)
            else
              iprot#skip _t6596)
          | _ -> iprot#skip _t6596);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6595

class getChatRoomAnnouncementsBulk_result =
object (self)
  val mutable _success : (string,chatRoomAnnouncement list) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getChatRoomAnnouncementsBulk_result.success") | Some _x6603 -> _x6603
  method set_success _x6603 = _success <- Some _x6603
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getChatRoomAnnouncementsBulk_result.e") | Some _x6604 -> _x6604
  method set_e _x6604 = _e <- Some _x6604
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k (List.map (fun x -> x#copy) v)) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChatRoomAnnouncementsBulk_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_LIST,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter6607 -> fun _viter6608 -> 
        oprot#writeString(_kiter6607);
        oprot#writeListBegin(Protocol.T_STRUCT,List.length _viter6608);
        List.iter (fun _iter6609 ->           _iter6609#write(oprot);
        ) _viter6608;
        oprot#writeListEnd;
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChatRoomAnnouncementsBulk_result (iprot : Protocol.t) =
  let _str6610 = new getChatRoomAnnouncementsBulk_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6611,_id6612) = iprot#readFieldBegin in
        if _t6611 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6612 with 
          | 0 -> (if _t6611 = Protocol.T_MAP then
              _str6610#set_success 
                (let (_ktype6614,_vtype6615,_size6613) = iprot#readMapBegin in
                let _con6617 = Hashtbl.create _size6613 in
                  for i = 1 to _size6613 do
                    let _k = iprot#readString in
                    let _v = 
                      (let (_etype6621,_size6618) = iprot#readListBegin in
                        let _con6622 = (Array.to_list (Array.init _size6618 (fun _ -> (read_chatRoomAnnouncement iprot)))) in
                          iprot#readListEnd; _con6622) in
                      Hashtbl.add _con6617 _k _v
                  done; iprot#readMapEnd; _con6617)
            else
              iprot#skip _t6611)
          | 1 -> (if _t6611 = Protocol.T_STRUCT then
              _str6610#set_e (read_talkException iprot)
            else
              iprot#skip _t6611)
          | _ -> iprot#skip _t6611);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6610

class getChatRoomAnnouncements_args =
object (self)
  val mutable _chatRoomMid : string option = None
  method get_chatRoomMid = _chatRoomMid
  method grab_chatRoomMid = match _chatRoomMid with None->raise (Field_empty "getChatRoomAnnouncements_args.chatRoomMid") | Some _x6623 -> _x6623
  method set_chatRoomMid _x6623 = _chatRoomMid <- Some _x6623
  method unset_chatRoomMid = _chatRoomMid <- None
  method reset_chatRoomMid = _chatRoomMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChatRoomAnnouncements_args";
    (match _chatRoomMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatRoomMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChatRoomAnnouncements_args (iprot : Protocol.t) =
  let _str6626 = new getChatRoomAnnouncements_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6627,_id6628) = iprot#readFieldBegin in
        if _t6627 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6628 with 
          | 2 -> (if _t6627 = Protocol.T_STRING then
              _str6626#set_chatRoomMid iprot#readString
            else
              iprot#skip _t6627)
          | _ -> iprot#skip _t6627);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6626

class getChatRoomAnnouncements_result =
object (self)
  val mutable _success : chatRoomAnnouncement list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getChatRoomAnnouncements_result.success") | Some _x6629 -> _x6629
  method set_success _x6629 = _success <- Some _x6629
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getChatRoomAnnouncements_result.e") | Some _x6630 -> _x6630
  method set_e _x6630 = _e <- Some _x6630
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChatRoomAnnouncements_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter6633 ->         _iter6633#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChatRoomAnnouncements_result (iprot : Protocol.t) =
  let _str6634 = new getChatRoomAnnouncements_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6635,_id6636) = iprot#readFieldBegin in
        if _t6635 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6636 with 
          | 0 -> (if _t6635 = Protocol.T_LIST then
              _str6634#set_success 
                (let (_etype6640,_size6637) = iprot#readListBegin in
                  let _con6641 = (Array.to_list (Array.init _size6637 (fun _ -> (read_chatRoomAnnouncement iprot)))) in
                    iprot#readListEnd; _con6641)
            else
              iprot#skip _t6635)
          | 1 -> (if _t6635 = Protocol.T_STRUCT then
              _str6634#set_e (read_talkException iprot)
            else
              iprot#skip _t6635)
          | _ -> iprot#skip _t6635);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6634

class createChatRoomAnnouncement_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "createChatRoomAnnouncement_args.reqSeq") | Some _x6642 -> _x6642
  method set_reqSeq _x6642 = _reqSeq <- Some _x6642
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _chatRoomMid : string option = None
  method get_chatRoomMid = _chatRoomMid
  method grab_chatRoomMid = match _chatRoomMid with None->raise (Field_empty "createChatRoomAnnouncement_args.chatRoomMid") | Some _x6643 -> _x6643
  method set_chatRoomMid _x6643 = _chatRoomMid <- Some _x6643
  method unset_chatRoomMid = _chatRoomMid <- None
  method reset_chatRoomMid = _chatRoomMid <- None

  val mutable _type : ChatRoomAnnouncementType.t option = None
  method get_type = _type
  method grab_type = match _type with None->raise (Field_empty "createChatRoomAnnouncement_args.type") | Some _x6644 -> _x6644
  method set_type _x6644 = _type <- Some _x6644
  method unset_type = _type <- None
  method reset_type = _type <- None

  val mutable _contents : chatRoomAnnouncementContents option = None
  method get_contents = _contents
  method grab_contents = match _contents with None->raise (Field_empty "createChatRoomAnnouncement_args.contents") | Some _x6645 -> _x6645
  method set_contents _x6645 = _contents <- Some _x6645
  method unset_contents = _contents <- None
  method reset_contents = _contents <- None

  method copy =
      let _new = Oo.copy self in
      if _contents <> None then
        _new#set_contents self#grab_contents#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createChatRoomAnnouncement_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _chatRoomMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatRoomMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _type with None -> () | Some _v -> 
      oprot#writeFieldBegin("type",Protocol.T_I32,3);
      oprot#writeI32(ChatRoomAnnouncementType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _contents with None -> () | Some _v -> 
      oprot#writeFieldBegin("contents",Protocol.T_STRUCT,4);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createChatRoomAnnouncement_args (iprot : Protocol.t) =
  let _str6648 = new createChatRoomAnnouncement_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6649,_id6650) = iprot#readFieldBegin in
        if _t6649 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6650 with 
          | 1 -> (if _t6649 = Protocol.T_I32 then
              _str6648#set_reqSeq iprot#readI32
            else
              iprot#skip _t6649)
          | 2 -> (if _t6649 = Protocol.T_STRING then
              _str6648#set_chatRoomMid iprot#readString
            else
              iprot#skip _t6649)
          | 3 -> (if _t6649 = Protocol.T_I32 then
              _str6648#set_type (ChatRoomAnnouncementType.of_i iprot#readI32)
            else
              iprot#skip _t6649)
          | 4 -> (if _t6649 = Protocol.T_STRUCT then
              _str6648#set_contents (read_chatRoomAnnouncementContents iprot)
            else
              iprot#skip _t6649)
          | _ -> iprot#skip _t6649);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6648

class createChatRoomAnnouncement_result =
object (self)
  val mutable _success : chatRoomAnnouncement option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createChatRoomAnnouncement_result.success") | Some _x6651 -> _x6651
  method set_success _x6651 = _success <- Some _x6651
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createChatRoomAnnouncement_result.e") | Some _x6652 -> _x6652
  method set_e _x6652 = _e <- Some _x6652
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createChatRoomAnnouncement_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createChatRoomAnnouncement_result (iprot : Protocol.t) =
  let _str6655 = new createChatRoomAnnouncement_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6656,_id6657) = iprot#readFieldBegin in
        if _t6656 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6657 with 
          | 0 -> (if _t6656 = Protocol.T_STRUCT then
              _str6655#set_success (read_chatRoomAnnouncement iprot)
            else
              iprot#skip _t6656)
          | 1 -> (if _t6656 = Protocol.T_STRUCT then
              _str6655#set_e (read_talkException iprot)
            else
              iprot#skip _t6656)
          | _ -> iprot#skip _t6656);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6655

class removeChatRoomAnnouncement_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "removeChatRoomAnnouncement_args.reqSeq") | Some _x6658 -> _x6658
  method set_reqSeq _x6658 = _reqSeq <- Some _x6658
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _chatRoomMid : string option = None
  method get_chatRoomMid = _chatRoomMid
  method grab_chatRoomMid = match _chatRoomMid with None->raise (Field_empty "removeChatRoomAnnouncement_args.chatRoomMid") | Some _x6659 -> _x6659
  method set_chatRoomMid _x6659 = _chatRoomMid <- Some _x6659
  method unset_chatRoomMid = _chatRoomMid <- None
  method reset_chatRoomMid = _chatRoomMid <- None

  val mutable _announcementSeq : Int64.t option = None
  method get_announcementSeq = _announcementSeq
  method grab_announcementSeq = match _announcementSeq with None->raise (Field_empty "removeChatRoomAnnouncement_args.announcementSeq") | Some _x6660 -> _x6660
  method set_announcementSeq _x6660 = _announcementSeq <- Some _x6660
  method unset_announcementSeq = _announcementSeq <- None
  method reset_announcementSeq = _announcementSeq <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeChatRoomAnnouncement_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _chatRoomMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatRoomMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _announcementSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("announcementSeq",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeChatRoomAnnouncement_args (iprot : Protocol.t) =
  let _str6663 = new removeChatRoomAnnouncement_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6664,_id6665) = iprot#readFieldBegin in
        if _t6664 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6665 with 
          | 1 -> (if _t6664 = Protocol.T_I32 then
              _str6663#set_reqSeq iprot#readI32
            else
              iprot#skip _t6664)
          | 2 -> (if _t6664 = Protocol.T_STRING then
              _str6663#set_chatRoomMid iprot#readString
            else
              iprot#skip _t6664)
          | 3 -> (if _t6664 = Protocol.T_I64 then
              _str6663#set_announcementSeq iprot#readI64
            else
              iprot#skip _t6664)
          | _ -> iprot#skip _t6664);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6663

class removeChatRoomAnnouncement_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeChatRoomAnnouncement_result.e") | Some _x6666 -> _x6666
  method set_e _x6666 = _e <- Some _x6666
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeChatRoomAnnouncement_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeChatRoomAnnouncement_result (iprot : Protocol.t) =
  let _str6669 = new removeChatRoomAnnouncement_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6670,_id6671) = iprot#readFieldBegin in
        if _t6670 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6671 with 
          | 1 -> (if _t6670 = Protocol.T_STRUCT then
              _str6669#set_e (read_talkException iprot)
            else
              iprot#skip _t6670)
          | _ -> iprot#skip _t6670);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6669

class unsendMessage_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "unsendMessage_args.seq") | Some _x6672 -> _x6672
  method set_seq _x6672 = _seq <- Some _x6672
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "unsendMessage_args.messageId") | Some _x6673 -> _x6673
  method set_messageId _x6673 = _messageId <- Some _x6673
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unsendMessage_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unsendMessage_args (iprot : Protocol.t) =
  let _str6676 = new unsendMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6677,_id6678) = iprot#readFieldBegin in
        if _t6677 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6678 with 
          | 1 -> (if _t6677 = Protocol.T_I32 then
              _str6676#set_seq iprot#readI32
            else
              iprot#skip _t6677)
          | 2 -> (if _t6677 = Protocol.T_STRING then
              _str6676#set_messageId iprot#readString
            else
              iprot#skip _t6677)
          | _ -> iprot#skip _t6677);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6676

class unsendMessage_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "unsendMessage_result.e") | Some _x6679 -> _x6679
  method set_e _x6679 = _e <- Some _x6679
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unsendMessage_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unsendMessage_result (iprot : Protocol.t) =
  let _str6682 = new unsendMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6683,_id6684) = iprot#readFieldBegin in
        if _t6683 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6684 with 
          | 1 -> (if _t6683 = Protocol.T_STRUCT then
              _str6682#set_e (read_talkException iprot)
            else
              iprot#skip _t6683)
          | _ -> iprot#skip _t6683);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6682

class getGroupWithoutMembers_args =
object (self)
  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "getGroupWithoutMembers_args.groupId") | Some _x6685 -> _x6685
  method set_groupId _x6685 = _groupId <- Some _x6685
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupWithoutMembers_args";
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupWithoutMembers_args (iprot : Protocol.t) =
  let _str6688 = new getGroupWithoutMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6689,_id6690) = iprot#readFieldBegin in
        if _t6689 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6690 with 
          | 2 -> (if _t6689 = Protocol.T_STRING then
              _str6688#set_groupId iprot#readString
            else
              iprot#skip _t6689)
          | _ -> iprot#skip _t6689);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6688

class getGroupWithoutMembers_result =
object (self)
  val mutable _success : group option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupWithoutMembers_result.success") | Some _x6691 -> _x6691
  method set_success _x6691 = _success <- Some _x6691
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupWithoutMembers_result.e") | Some _x6692 -> _x6692
  method set_e _x6692 = _e <- Some _x6692
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupWithoutMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupWithoutMembers_result (iprot : Protocol.t) =
  let _str6695 = new getGroupWithoutMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6696,_id6697) = iprot#readFieldBegin in
        if _t6696 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6697 with 
          | 0 -> (if _t6696 = Protocol.T_STRUCT then
              _str6695#set_success (read_group iprot)
            else
              iprot#skip _t6696)
          | 1 -> (if _t6696 = Protocol.T_STRUCT then
              _str6695#set_e (read_talkException iprot)
            else
              iprot#skip _t6696)
          | _ -> iprot#skip _t6696);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6695

class requestResendMessage_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "requestResendMessage_args.reqSeq") | Some _x6698 -> _x6698
  method set_reqSeq _x6698 = _reqSeq <- Some _x6698
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _senderMid : string option = None
  method get_senderMid = _senderMid
  method grab_senderMid = match _senderMid with None->raise (Field_empty "requestResendMessage_args.senderMid") | Some _x6699 -> _x6699
  method set_senderMid _x6699 = _senderMid <- Some _x6699
  method unset_senderMid = _senderMid <- None
  method reset_senderMid = _senderMid <- None

  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "requestResendMessage_args.messageId") | Some _x6700 -> _x6700
  method set_messageId _x6700 = _messageId <- Some _x6700
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestResendMessage_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _senderMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("senderMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestResendMessage_args (iprot : Protocol.t) =
  let _str6703 = new requestResendMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6704,_id6705) = iprot#readFieldBegin in
        if _t6704 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6705 with 
          | 1 -> (if _t6704 = Protocol.T_I32 then
              _str6703#set_reqSeq iprot#readI32
            else
              iprot#skip _t6704)
          | 2 -> (if _t6704 = Protocol.T_STRING then
              _str6703#set_senderMid iprot#readString
            else
              iprot#skip _t6704)
          | 3 -> (if _t6704 = Protocol.T_STRING then
              _str6703#set_messageId iprot#readString
            else
              iprot#skip _t6704)
          | _ -> iprot#skip _t6704);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6703

class requestResendMessage_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "requestResendMessage_result.e") | Some _x6706 -> _x6706
  method set_e _x6706 = _e <- Some _x6706
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestResendMessage_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestResendMessage_result (iprot : Protocol.t) =
  let _str6709 = new requestResendMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6710,_id6711) = iprot#readFieldBegin in
        if _t6710 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6711 with 
          | 1 -> (if _t6710 = Protocol.T_STRUCT then
              _str6709#set_e (read_talkException iprot)
            else
              iprot#skip _t6710)
          | _ -> iprot#skip _t6710);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6709

class respondResendMessage_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "respondResendMessage_args.reqSeq") | Some _x6712 -> _x6712
  method set_reqSeq _x6712 = _reqSeq <- Some _x6712
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _receiverMid : string option = None
  method get_receiverMid = _receiverMid
  method grab_receiverMid = match _receiverMid with None->raise (Field_empty "respondResendMessage_args.receiverMid") | Some _x6713 -> _x6713
  method set_receiverMid _x6713 = _receiverMid <- Some _x6713
  method unset_receiverMid = _receiverMid <- None
  method reset_receiverMid = _receiverMid <- None

  val mutable _originalMessageId : string option = None
  method get_originalMessageId = _originalMessageId
  method grab_originalMessageId = match _originalMessageId with None->raise (Field_empty "respondResendMessage_args.originalMessageId") | Some _x6714 -> _x6714
  method set_originalMessageId _x6714 = _originalMessageId <- Some _x6714
  method unset_originalMessageId = _originalMessageId <- None
  method reset_originalMessageId = _originalMessageId <- None

  val mutable _resendMessage : message option = None
  method get_resendMessage = _resendMessage
  method grab_resendMessage = match _resendMessage with None->raise (Field_empty "respondResendMessage_args.resendMessage") | Some _x6715 -> _x6715
  method set_resendMessage _x6715 = _resendMessage <- Some _x6715
  method unset_resendMessage = _resendMessage <- None
  method reset_resendMessage = _resendMessage <- None

  val mutable _errorCode : ErrorCode.t option = None
  method get_errorCode = _errorCode
  method grab_errorCode = match _errorCode with None->raise (Field_empty "respondResendMessage_args.errorCode") | Some _x6716 -> _x6716
  method set_errorCode _x6716 = _errorCode <- Some _x6716
  method unset_errorCode = _errorCode <- None
  method reset_errorCode = _errorCode <- None

  method copy =
      let _new = Oo.copy self in
      if _resendMessage <> None then
        _new#set_resendMessage self#grab_resendMessage#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "respondResendMessage_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _receiverMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("receiverMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _originalMessageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("originalMessageId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _resendMessage with None -> () | Some _v -> 
      oprot#writeFieldBegin("resendMessage",Protocol.T_STRUCT,4);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _errorCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("errorCode",Protocol.T_I32,5);
      oprot#writeI32(ErrorCode.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_respondResendMessage_args (iprot : Protocol.t) =
  let _str6719 = new respondResendMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6720,_id6721) = iprot#readFieldBegin in
        if _t6720 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6721 with 
          | 1 -> (if _t6720 = Protocol.T_I32 then
              _str6719#set_reqSeq iprot#readI32
            else
              iprot#skip _t6720)
          | 2 -> (if _t6720 = Protocol.T_STRING then
              _str6719#set_receiverMid iprot#readString
            else
              iprot#skip _t6720)
          | 3 -> (if _t6720 = Protocol.T_STRING then
              _str6719#set_originalMessageId iprot#readString
            else
              iprot#skip _t6720)
          | 4 -> (if _t6720 = Protocol.T_STRUCT then
              _str6719#set_resendMessage (read_message iprot)
            else
              iprot#skip _t6720)
          | 5 -> (if _t6720 = Protocol.T_I32 then
              _str6719#set_errorCode (ErrorCode.of_i iprot#readI32)
            else
              iprot#skip _t6720)
          | _ -> iprot#skip _t6720);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6719

class respondResendMessage_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "respondResendMessage_result.e") | Some _x6722 -> _x6722
  method set_e _x6722 = _e <- Some _x6722
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "respondResendMessage_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_respondResendMessage_result (iprot : Protocol.t) =
  let _str6725 = new respondResendMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6726,_id6727) = iprot#readFieldBegin in
        if _t6726 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6727 with 
          | 1 -> (if _t6726 = Protocol.T_STRUCT then
              _str6725#set_e (read_talkException iprot)
            else
              iprot#skip _t6726)
          | _ -> iprot#skip _t6726);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6725

class acceptGroupInvitation_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "acceptGroupInvitation_args.reqSeq") | Some _x6728 -> _x6728
  method set_reqSeq _x6728 = _reqSeq <- Some _x6728
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "acceptGroupInvitation_args.groupId") | Some _x6729 -> _x6729
  method set_groupId _x6729 = _groupId <- Some _x6729
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acceptGroupInvitation_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acceptGroupInvitation_args (iprot : Protocol.t) =
  let _str6732 = new acceptGroupInvitation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6733,_id6734) = iprot#readFieldBegin in
        if _t6733 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6734 with 
          | 1 -> (if _t6733 = Protocol.T_I32 then
              _str6732#set_reqSeq iprot#readI32
            else
              iprot#skip _t6733)
          | 2 -> (if _t6733 = Protocol.T_STRING then
              _str6732#set_groupId iprot#readString
            else
              iprot#skip _t6733)
          | _ -> iprot#skip _t6733);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6732

class acceptGroupInvitation_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "acceptGroupInvitation_result.e") | Some _x6735 -> _x6735
  method set_e _x6735 = _e <- Some _x6735
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acceptGroupInvitation_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acceptGroupInvitation_result (iprot : Protocol.t) =
  let _str6738 = new acceptGroupInvitation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6739,_id6740) = iprot#readFieldBegin in
        if _t6739 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6740 with 
          | 1 -> (if _t6739 = Protocol.T_STRUCT then
              _str6738#set_e (read_talkException iprot)
            else
              iprot#skip _t6739)
          | _ -> iprot#skip _t6739);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6738

class acceptGroupInvitationByTicket_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "acceptGroupInvitationByTicket_args.reqSeq") | Some _x6741 -> _x6741
  method set_reqSeq _x6741 = _reqSeq <- Some _x6741
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _groupMid : string option = None
  method get_groupMid = _groupMid
  method grab_groupMid = match _groupMid with None->raise (Field_empty "acceptGroupInvitationByTicket_args.groupMid") | Some _x6742 -> _x6742
  method set_groupMid _x6742 = _groupMid <- Some _x6742
  method unset_groupMid = _groupMid <- None
  method reset_groupMid = _groupMid <- None

  val mutable _ticketId : string option = None
  method get_ticketId = _ticketId
  method grab_ticketId = match _ticketId with None->raise (Field_empty "acceptGroupInvitationByTicket_args.ticketId") | Some _x6743 -> _x6743
  method set_ticketId _x6743 = _ticketId <- Some _x6743
  method unset_ticketId = _ticketId <- None
  method reset_ticketId = _ticketId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acceptGroupInvitationByTicket_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _groupMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("GroupMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _ticketId with None -> () | Some _v -> 
      oprot#writeFieldBegin("ticketId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acceptGroupInvitationByTicket_args (iprot : Protocol.t) =
  let _str6746 = new acceptGroupInvitationByTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6747,_id6748) = iprot#readFieldBegin in
        if _t6747 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6748 with 
          | 1 -> (if _t6747 = Protocol.T_I32 then
              _str6746#set_reqSeq iprot#readI32
            else
              iprot#skip _t6747)
          | 2 -> (if _t6747 = Protocol.T_STRING then
              _str6746#set_groupMid iprot#readString
            else
              iprot#skip _t6747)
          | 3 -> (if _t6747 = Protocol.T_STRING then
              _str6746#set_ticketId iprot#readString
            else
              iprot#skip _t6747)
          | _ -> iprot#skip _t6747);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6746

class acceptGroupInvitationByTicket_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "acceptGroupInvitationByTicket_result.e") | Some _x6749 -> _x6749
  method set_e _x6749 = _e <- Some _x6749
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acceptGroupInvitationByTicket_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acceptGroupInvitationByTicket_result (iprot : Protocol.t) =
  let _str6752 = new acceptGroupInvitationByTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6753,_id6754) = iprot#readFieldBegin in
        if _t6753 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6754 with 
          | 1 -> (if _t6753 = Protocol.T_STRUCT then
              _str6752#set_e (read_talkException iprot)
            else
              iprot#skip _t6753)
          | _ -> iprot#skip _t6753);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6752

class acceptProximityMatches_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "acceptProximityMatches_args.sessionId") | Some _x6755 -> _x6755
  method set_sessionId _x6755 = _sessionId <- Some _x6755
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  val mutable _ids : (string,bool) Hashtbl.t option = None
  method get_ids = _ids
  method grab_ids = match _ids with None->raise (Field_empty "acceptProximityMatches_args.ids") | Some _x6756 -> _x6756
  method set_ids _x6756 = _ids <- Some _x6756
  method unset_ids = _ids <- None
  method reset_ids = _ids <- None

  method copy =
      let _new = Oo.copy self in
      if _ids <> None then
        _new#set_ids (Hashtbl.copy self#grab_ids);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acceptProximityMatches_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _ids with None -> () | Some _v -> 
      oprot#writeFieldBegin("ids",Protocol.T_SET,3);
      oprot#writeSetBegin(Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _iter6759 -> fun _ ->         oprot#writeString(_iter6759);
      ) _v;
      oprot#writeSetEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acceptProximityMatches_args (iprot : Protocol.t) =
  let _str6760 = new acceptProximityMatches_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6761,_id6762) = iprot#readFieldBegin in
        if _t6761 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6762 with 
          | 2 -> (if _t6761 = Protocol.T_STRING then
              _str6760#set_sessionId iprot#readString
            else
              iprot#skip _t6761)
          | 3 -> (if _t6761 = Protocol.T_SET then
              _str6760#set_ids 
                (let (_etype6766,_size6763) = iprot#readSetBegin in
                let _con6767 = Hashtbl.create _size6763 in
                  for i = 1 to _size6763 do
                    Hashtbl.add _con6767 iprot#readString true
                  done; iprot#readSetEnd; _con6767)
            else
              iprot#skip _t6761)
          | _ -> iprot#skip _t6761);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6760

class acceptProximityMatches_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "acceptProximityMatches_result.e") | Some _x6768 -> _x6768
  method set_e _x6768 = _e <- Some _x6768
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acceptProximityMatches_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acceptProximityMatches_result (iprot : Protocol.t) =
  let _str6771 = new acceptProximityMatches_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6772,_id6773) = iprot#readFieldBegin in
        if _t6772 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6773 with 
          | 1 -> (if _t6772 = Protocol.T_STRUCT then
              _str6771#set_e (read_talkException iprot)
            else
              iprot#skip _t6772)
          | _ -> iprot#skip _t6772);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6771

class acquireCallRoute_args =
object (self)
  val mutable _to : string option = None
  method get_to = _to
  method grab_to = match _to with None->raise (Field_empty "acquireCallRoute_args.to") | Some _x6774 -> _x6774
  method set_to _x6774 = _to <- Some _x6774
  method unset_to = _to <- None
  method reset_to = _to <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquireCallRoute_args";
    (match _to with None -> () | Some _v -> 
      oprot#writeFieldBegin("to",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquireCallRoute_args (iprot : Protocol.t) =
  let _str6777 = new acquireCallRoute_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6778,_id6779) = iprot#readFieldBegin in
        if _t6778 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6779 with 
          | 2 -> (if _t6778 = Protocol.T_STRING then
              _str6777#set_to iprot#readString
            else
              iprot#skip _t6778)
          | _ -> iprot#skip _t6778);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6777

class acquireCallRoute_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "acquireCallRoute_result.success") | Some _x6780 -> _x6780
  method set_success _x6780 = _success <- Some _x6780
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "acquireCallRoute_result.e") | Some _x6781 -> _x6781
  method set_e _x6781 = _e <- Some _x6781
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquireCallRoute_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6784 ->         oprot#writeString(_iter6784);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquireCallRoute_result (iprot : Protocol.t) =
  let _str6785 = new acquireCallRoute_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6786,_id6787) = iprot#readFieldBegin in
        if _t6786 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6787 with 
          | 0 -> (if _t6786 = Protocol.T_LIST then
              _str6785#set_success 
                (let (_etype6791,_size6788) = iprot#readListBegin in
                  let _con6792 = (Array.to_list (Array.init _size6788 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6792)
            else
              iprot#skip _t6786)
          | 1 -> (if _t6786 = Protocol.T_STRUCT then
              _str6785#set_e (read_talkException iprot)
            else
              iprot#skip _t6786)
          | _ -> iprot#skip _t6786);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6785

class acquireCallTicket_args =
object (self)
  val mutable _to : string option = None
  method get_to = _to
  method grab_to = match _to with None->raise (Field_empty "acquireCallTicket_args.to") | Some _x6793 -> _x6793
  method set_to _x6793 = _to <- Some _x6793
  method unset_to = _to <- None
  method reset_to = _to <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquireCallTicket_args";
    (match _to with None -> () | Some _v -> 
      oprot#writeFieldBegin("to",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquireCallTicket_args (iprot : Protocol.t) =
  let _str6796 = new acquireCallTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6797,_id6798) = iprot#readFieldBegin in
        if _t6797 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6798 with 
          | 2 -> (if _t6797 = Protocol.T_STRING then
              _str6796#set_to iprot#readString
            else
              iprot#skip _t6797)
          | _ -> iprot#skip _t6797);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6796

class acquireCallTicket_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "acquireCallTicket_result.success") | Some _x6799 -> _x6799
  method set_success _x6799 = _success <- Some _x6799
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "acquireCallTicket_result.e") | Some _x6800 -> _x6800
  method set_e _x6800 = _e <- Some _x6800
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquireCallTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquireCallTicket_result (iprot : Protocol.t) =
  let _str6803 = new acquireCallTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6804,_id6805) = iprot#readFieldBegin in
        if _t6804 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6805 with 
          | 0 -> (if _t6804 = Protocol.T_STRING then
              _str6803#set_success iprot#readString
            else
              iprot#skip _t6804)
          | 1 -> (if _t6804 = Protocol.T_STRUCT then
              _str6803#set_e (read_talkException iprot)
            else
              iprot#skip _t6804)
          | _ -> iprot#skip _t6804);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6803

class acquireEncryptedAccessToken_args =
object (self)
  val mutable _featureType : FeatureType.t option = None
  method get_featureType = _featureType
  method grab_featureType = match _featureType with None->raise (Field_empty "acquireEncryptedAccessToken_args.featureType") | Some _x6806 -> _x6806
  method set_featureType _x6806 = _featureType <- Some _x6806
  method unset_featureType = _featureType <- None
  method reset_featureType = _featureType <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquireEncryptedAccessToken_args";
    (match _featureType with None -> () | Some _v -> 
      oprot#writeFieldBegin("featureType",Protocol.T_I32,2);
      oprot#writeI32(FeatureType.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquireEncryptedAccessToken_args (iprot : Protocol.t) =
  let _str6809 = new acquireEncryptedAccessToken_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6810,_id6811) = iprot#readFieldBegin in
        if _t6810 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6811 with 
          | 2 -> (if _t6810 = Protocol.T_I32 then
              _str6809#set_featureType (FeatureType.of_i iprot#readI32)
            else
              iprot#skip _t6810)
          | _ -> iprot#skip _t6810);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6809

class acquireEncryptedAccessToken_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "acquireEncryptedAccessToken_result.success") | Some _x6812 -> _x6812
  method set_success _x6812 = _success <- Some _x6812
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "acquireEncryptedAccessToken_result.e") | Some _x6813 -> _x6813
  method set_e _x6813 = _e <- Some _x6813
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquireEncryptedAccessToken_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquireEncryptedAccessToken_result (iprot : Protocol.t) =
  let _str6816 = new acquireEncryptedAccessToken_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6817,_id6818) = iprot#readFieldBegin in
        if _t6817 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6818 with 
          | 0 -> (if _t6817 = Protocol.T_STRING then
              _str6816#set_success iprot#readString
            else
              iprot#skip _t6817)
          | 1 -> (if _t6817 = Protocol.T_STRUCT then
              _str6816#set_e (read_talkException iprot)
            else
              iprot#skip _t6817)
          | _ -> iprot#skip _t6817);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6816

class addSnsId_args =
object (self)
  val mutable _snsIdType : SnsIdType.t option = None
  method get_snsIdType = _snsIdType
  method grab_snsIdType = match _snsIdType with None->raise (Field_empty "addSnsId_args.snsIdType") | Some _x6819 -> _x6819
  method set_snsIdType _x6819 = _snsIdType <- Some _x6819
  method unset_snsIdType = _snsIdType <- None
  method reset_snsIdType = _snsIdType <- None

  val mutable _snsAccessToken : string option = None
  method get_snsAccessToken = _snsAccessToken
  method grab_snsAccessToken = match _snsAccessToken with None->raise (Field_empty "addSnsId_args.snsAccessToken") | Some _x6820 -> _x6820
  method set_snsAccessToken _x6820 = _snsAccessToken <- Some _x6820
  method unset_snsAccessToken = _snsAccessToken <- None
  method reset_snsAccessToken = _snsAccessToken <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addSnsId_args";
    (match _snsIdType with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsIdType",Protocol.T_I32,2);
      oprot#writeI32(SnsIdType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _snsAccessToken with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsAccessToken",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addSnsId_args (iprot : Protocol.t) =
  let _str6823 = new addSnsId_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6824,_id6825) = iprot#readFieldBegin in
        if _t6824 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6825 with 
          | 2 -> (if _t6824 = Protocol.T_I32 then
              _str6823#set_snsIdType (SnsIdType.of_i iprot#readI32)
            else
              iprot#skip _t6824)
          | 3 -> (if _t6824 = Protocol.T_STRING then
              _str6823#set_snsAccessToken iprot#readString
            else
              iprot#skip _t6824)
          | _ -> iprot#skip _t6824);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6823

class addSnsId_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "addSnsId_result.success") | Some _x6826 -> _x6826
  method set_success _x6826 = _success <- Some _x6826
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "addSnsId_result.e") | Some _x6827 -> _x6827
  method set_e _x6827 = _e <- Some _x6827
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addSnsId_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addSnsId_result (iprot : Protocol.t) =
  let _str6830 = new addSnsId_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6831,_id6832) = iprot#readFieldBegin in
        if _t6831 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6832 with 
          | 0 -> (if _t6831 = Protocol.T_STRING then
              _str6830#set_success iprot#readString
            else
              iprot#skip _t6831)
          | 1 -> (if _t6831 = Protocol.T_STRUCT then
              _str6830#set_e (read_talkException iprot)
            else
              iprot#skip _t6831)
          | _ -> iprot#skip _t6831);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6830

class blockContact_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "blockContact_args.reqSeq") | Some _x6833 -> _x6833
  method set_reqSeq _x6833 = _reqSeq <- Some _x6833
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _id : string option = None
  method get_id = _id
  method grab_id = match _id with None->raise (Field_empty "blockContact_args.id") | Some _x6834 -> _x6834
  method set_id _x6834 = _id <- Some _x6834
  method unset_id = _id <- None
  method reset_id = _id <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "blockContact_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _id with None -> () | Some _v -> 
      oprot#writeFieldBegin("id",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_blockContact_args (iprot : Protocol.t) =
  let _str6837 = new blockContact_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6838,_id6839) = iprot#readFieldBegin in
        if _t6838 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6839 with 
          | 1 -> (if _t6838 = Protocol.T_I32 then
              _str6837#set_reqSeq iprot#readI32
            else
              iprot#skip _t6838)
          | 2 -> (if _t6838 = Protocol.T_STRING then
              _str6837#set_id iprot#readString
            else
              iprot#skip _t6838)
          | _ -> iprot#skip _t6838);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6837

class blockContact_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "blockContact_result.e") | Some _x6840 -> _x6840
  method set_e _x6840 = _e <- Some _x6840
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "blockContact_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_blockContact_result (iprot : Protocol.t) =
  let _str6843 = new blockContact_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6844,_id6845) = iprot#readFieldBegin in
        if _t6844 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6845 with 
          | 1 -> (if _t6844 = Protocol.T_STRUCT then
              _str6843#set_e (read_talkException iprot)
            else
              iprot#skip _t6844)
          | _ -> iprot#skip _t6844);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6843

class blockRecommendation_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "blockRecommendation_args.reqSeq") | Some _x6846 -> _x6846
  method set_reqSeq _x6846 = _reqSeq <- Some _x6846
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _id : string option = None
  method get_id = _id
  method grab_id = match _id with None->raise (Field_empty "blockRecommendation_args.id") | Some _x6847 -> _x6847
  method set_id _x6847 = _id <- Some _x6847
  method unset_id = _id <- None
  method reset_id = _id <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "blockRecommendation_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _id with None -> () | Some _v -> 
      oprot#writeFieldBegin("id",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_blockRecommendation_args (iprot : Protocol.t) =
  let _str6850 = new blockRecommendation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6851,_id6852) = iprot#readFieldBegin in
        if _t6851 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6852 with 
          | 1 -> (if _t6851 = Protocol.T_I32 then
              _str6850#set_reqSeq iprot#readI32
            else
              iprot#skip _t6851)
          | 2 -> (if _t6851 = Protocol.T_STRING then
              _str6850#set_id iprot#readString
            else
              iprot#skip _t6851)
          | _ -> iprot#skip _t6851);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6850

class blockRecommendation_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "blockRecommendation_result.e") | Some _x6853 -> _x6853
  method set_e _x6853 = _e <- Some _x6853
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "blockRecommendation_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_blockRecommendation_result (iprot : Protocol.t) =
  let _str6856 = new blockRecommendation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6857,_id6858) = iprot#readFieldBegin in
        if _t6857 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6858 with 
          | 1 -> (if _t6857 = Protocol.T_STRUCT then
              _str6856#set_e (read_talkException iprot)
            else
              iprot#skip _t6857)
          | _ -> iprot#skip _t6857);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6856

class cancelGroupInvitation_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "cancelGroupInvitation_args.reqSeq") | Some _x6859 -> _x6859
  method set_reqSeq _x6859 = _reqSeq <- Some _x6859
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "cancelGroupInvitation_args.groupId") | Some _x6860 -> _x6860
  method set_groupId _x6860 = _groupId <- Some _x6860
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  val mutable _contactIds : string list option = None
  method get_contactIds = _contactIds
  method grab_contactIds = match _contactIds with None->raise (Field_empty "cancelGroupInvitation_args.contactIds") | Some _x6861 -> _x6861
  method set_contactIds _x6861 = _contactIds <- Some _x6861
  method unset_contactIds = _contactIds <- None
  method reset_contactIds = _contactIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "cancelGroupInvitation_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _contactIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactIds",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6864 ->         oprot#writeString(_iter6864);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_cancelGroupInvitation_args (iprot : Protocol.t) =
  let _str6865 = new cancelGroupInvitation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6866,_id6867) = iprot#readFieldBegin in
        if _t6866 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6867 with 
          | 1 -> (if _t6866 = Protocol.T_I32 then
              _str6865#set_reqSeq iprot#readI32
            else
              iprot#skip _t6866)
          | 2 -> (if _t6866 = Protocol.T_STRING then
              _str6865#set_groupId iprot#readString
            else
              iprot#skip _t6866)
          | 3 -> (if _t6866 = Protocol.T_LIST then
              _str6865#set_contactIds 
                (let (_etype6871,_size6868) = iprot#readListBegin in
                  let _con6872 = (Array.to_list (Array.init _size6868 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6872)
            else
              iprot#skip _t6866)
          | _ -> iprot#skip _t6866);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6865

class cancelGroupInvitation_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "cancelGroupInvitation_result.e") | Some _x6873 -> _x6873
  method set_e _x6873 = _e <- Some _x6873
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "cancelGroupInvitation_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_cancelGroupInvitation_result (iprot : Protocol.t) =
  let _str6876 = new cancelGroupInvitation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6877,_id6878) = iprot#readFieldBegin in
        if _t6877 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6878 with 
          | 1 -> (if _t6877 = Protocol.T_STRUCT then
              _str6876#set_e (read_talkException iprot)
            else
              iprot#skip _t6877)
          | _ -> iprot#skip _t6877);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6876

class changeVerificationMethod_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "changeVerificationMethod_args.sessionId") | Some _x6879 -> _x6879
  method set_sessionId _x6879 = _sessionId <- Some _x6879
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  val mutable _method : VerificationMethod.t option = None
  method get_method = _method
  method grab_method = match _method with None->raise (Field_empty "changeVerificationMethod_args.method") | Some _x6880 -> _x6880
  method set_method _x6880 = _method <- Some _x6880
  method unset_method = _method <- None
  method reset_method = _method <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "changeVerificationMethod_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _method with None -> () | Some _v -> 
      oprot#writeFieldBegin("method",Protocol.T_I32,3);
      oprot#writeI32(VerificationMethod.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_changeVerificationMethod_args (iprot : Protocol.t) =
  let _str6883 = new changeVerificationMethod_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6884,_id6885) = iprot#readFieldBegin in
        if _t6884 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6885 with 
          | 2 -> (if _t6884 = Protocol.T_STRING then
              _str6883#set_sessionId iprot#readString
            else
              iprot#skip _t6884)
          | 3 -> (if _t6884 = Protocol.T_I32 then
              _str6883#set_method (VerificationMethod.of_i iprot#readI32)
            else
              iprot#skip _t6884)
          | _ -> iprot#skip _t6884);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6883

class changeVerificationMethod_result =
object (self)
  val mutable _success : verificationSessionData option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "changeVerificationMethod_result.success") | Some _x6886 -> _x6886
  method set_success _x6886 = _success <- Some _x6886
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "changeVerificationMethod_result.e") | Some _x6887 -> _x6887
  method set_e _x6887 = _e <- Some _x6887
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "changeVerificationMethod_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_changeVerificationMethod_result (iprot : Protocol.t) =
  let _str6890 = new changeVerificationMethod_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6891,_id6892) = iprot#readFieldBegin in
        if _t6891 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6892 with 
          | 0 -> (if _t6891 = Protocol.T_STRUCT then
              _str6890#set_success (read_verificationSessionData iprot)
            else
              iprot#skip _t6891)
          | 1 -> (if _t6891 = Protocol.T_STRUCT then
              _str6890#set_e (read_talkException iprot)
            else
              iprot#skip _t6891)
          | _ -> iprot#skip _t6891);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6890

class clearIdentityCredential_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "clearIdentityCredential_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_clearIdentityCredential_args (iprot : Protocol.t) =
  let _str6895 = new clearIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6896,_id6897) = iprot#readFieldBegin in
        if _t6896 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6897 with 
          | _ -> iprot#skip _t6896);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6895

class clearIdentityCredential_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "clearIdentityCredential_result.e") | Some _x6898 -> _x6898
  method set_e _x6898 = _e <- Some _x6898
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "clearIdentityCredential_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_clearIdentityCredential_result (iprot : Protocol.t) =
  let _str6901 = new clearIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6902,_id6903) = iprot#readFieldBegin in
        if _t6902 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6903 with 
          | 1 -> (if _t6902 = Protocol.T_STRUCT then
              _str6901#set_e (read_talkException iprot)
            else
              iprot#skip _t6902)
          | _ -> iprot#skip _t6902);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6901

class clearMessageBox_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "clearMessageBox_args.channelId") | Some _x6904 -> _x6904
  method set_channelId _x6904 = _channelId <- Some _x6904
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "clearMessageBox_args.messageBoxId") | Some _x6905 -> _x6905
  method set_messageBoxId _x6905 = _messageBoxId <- Some _x6905
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "clearMessageBox_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_clearMessageBox_args (iprot : Protocol.t) =
  let _str6908 = new clearMessageBox_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6909,_id6910) = iprot#readFieldBegin in
        if _t6909 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6910 with 
          | 2 -> (if _t6909 = Protocol.T_STRING then
              _str6908#set_channelId iprot#readString
            else
              iprot#skip _t6909)
          | 3 -> (if _t6909 = Protocol.T_STRING then
              _str6908#set_messageBoxId iprot#readString
            else
              iprot#skip _t6909)
          | _ -> iprot#skip _t6909);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6908

class clearMessageBox_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "clearMessageBox_result.e") | Some _x6911 -> _x6911
  method set_e _x6911 = _e <- Some _x6911
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "clearMessageBox_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_clearMessageBox_result (iprot : Protocol.t) =
  let _str6914 = new clearMessageBox_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6915,_id6916) = iprot#readFieldBegin in
        if _t6915 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6916 with 
          | 1 -> (if _t6915 = Protocol.T_STRUCT then
              _str6914#set_e (read_talkException iprot)
            else
              iprot#skip _t6915)
          | _ -> iprot#skip _t6915);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6914

class closeProximityMatch_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "closeProximityMatch_args.sessionId") | Some _x6917 -> _x6917
  method set_sessionId _x6917 = _sessionId <- Some _x6917
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "closeProximityMatch_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_closeProximityMatch_args (iprot : Protocol.t) =
  let _str6920 = new closeProximityMatch_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6921,_id6922) = iprot#readFieldBegin in
        if _t6921 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6922 with 
          | 2 -> (if _t6921 = Protocol.T_STRING then
              _str6920#set_sessionId iprot#readString
            else
              iprot#skip _t6921)
          | _ -> iprot#skip _t6921);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6920

class closeProximityMatch_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "closeProximityMatch_result.e") | Some _x6923 -> _x6923
  method set_e _x6923 = _e <- Some _x6923
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "closeProximityMatch_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_closeProximityMatch_result (iprot : Protocol.t) =
  let _str6926 = new closeProximityMatch_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6927,_id6928) = iprot#readFieldBegin in
        if _t6927 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6928 with 
          | 1 -> (if _t6927 = Protocol.T_STRUCT then
              _str6926#set_e (read_talkException iprot)
            else
              iprot#skip _t6927)
          | _ -> iprot#skip _t6927);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6926

class commitSendMessage_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "commitSendMessage_args.seq") | Some _x6929 -> _x6929
  method set_seq _x6929 = _seq <- Some _x6929
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "commitSendMessage_args.messageId") | Some _x6930 -> _x6930
  method set_messageId _x6930 = _messageId <- Some _x6930
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  val mutable _receiverMids : string list option = None
  method get_receiverMids = _receiverMids
  method grab_receiverMids = match _receiverMids with None->raise (Field_empty "commitSendMessage_args.receiverMids") | Some _x6931 -> _x6931
  method set_receiverMids _x6931 = _receiverMids <- Some _x6931
  method unset_receiverMids = _receiverMids <- None
  method reset_receiverMids = _receiverMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitSendMessage_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _receiverMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("receiverMids",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6934 ->         oprot#writeString(_iter6934);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitSendMessage_args (iprot : Protocol.t) =
  let _str6935 = new commitSendMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6936,_id6937) = iprot#readFieldBegin in
        if _t6936 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6937 with 
          | 1 -> (if _t6936 = Protocol.T_I32 then
              _str6935#set_seq iprot#readI32
            else
              iprot#skip _t6936)
          | 2 -> (if _t6936 = Protocol.T_STRING then
              _str6935#set_messageId iprot#readString
            else
              iprot#skip _t6936)
          | 3 -> (if _t6936 = Protocol.T_LIST then
              _str6935#set_receiverMids 
                (let (_etype6941,_size6938) = iprot#readListBegin in
                  let _con6942 = (Array.to_list (Array.init _size6938 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6942)
            else
              iprot#skip _t6936)
          | _ -> iprot#skip _t6936);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6935

class commitSendMessage_result =
object (self)
  val mutable _success : (string,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "commitSendMessage_result.success") | Some _x6943 -> _x6943
  method set_success _x6943 = _success <- Some _x6943
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "commitSendMessage_result.e") | Some _x6944 -> _x6944
  method set_e _x6944 = _e <- Some _x6944
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitSendMessage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter6947 -> fun _viter6948 -> 
        oprot#writeString(_kiter6947);
        oprot#writeString(_viter6948);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitSendMessage_result (iprot : Protocol.t) =
  let _str6949 = new commitSendMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6950,_id6951) = iprot#readFieldBegin in
        if _t6950 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6951 with 
          | 0 -> (if _t6950 = Protocol.T_MAP then
              _str6949#set_success 
                (let (_ktype6953,_vtype6954,_size6952) = iprot#readMapBegin in
                let _con6956 = Hashtbl.create _size6952 in
                  for i = 1 to _size6952 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con6956 _k _v
                  done; iprot#readMapEnd; _con6956)
            else
              iprot#skip _t6950)
          | 1 -> (if _t6950 = Protocol.T_STRUCT then
              _str6949#set_e (read_talkException iprot)
            else
              iprot#skip _t6950)
          | _ -> iprot#skip _t6950);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6949

class commitSendMessages_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "commitSendMessages_args.seq") | Some _x6957 -> _x6957
  method set_seq _x6957 = _seq <- Some _x6957
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _messageIds : string list option = None
  method get_messageIds = _messageIds
  method grab_messageIds = match _messageIds with None->raise (Field_empty "commitSendMessages_args.messageIds") | Some _x6958 -> _x6958
  method set_messageIds _x6958 = _messageIds <- Some _x6958
  method unset_messageIds = _messageIds <- None
  method reset_messageIds = _messageIds <- None

  val mutable _receiverMids : string list option = None
  method get_receiverMids = _receiverMids
  method grab_receiverMids = match _receiverMids with None->raise (Field_empty "commitSendMessages_args.receiverMids") | Some _x6959 -> _x6959
  method set_receiverMids _x6959 = _receiverMids <- Some _x6959
  method unset_receiverMids = _receiverMids <- None
  method reset_receiverMids = _receiverMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitSendMessages_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _messageIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageIds",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6962 ->         oprot#writeString(_iter6962);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _receiverMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("receiverMids",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6963 ->         oprot#writeString(_iter6963);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitSendMessages_args (iprot : Protocol.t) =
  let _str6964 = new commitSendMessages_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6965,_id6966) = iprot#readFieldBegin in
        if _t6965 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6966 with 
          | 1 -> (if _t6965 = Protocol.T_I32 then
              _str6964#set_seq iprot#readI32
            else
              iprot#skip _t6965)
          | 2 -> (if _t6965 = Protocol.T_LIST then
              _str6964#set_messageIds 
                (let (_etype6970,_size6967) = iprot#readListBegin in
                  let _con6971 = (Array.to_list (Array.init _size6967 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6971)
            else
              iprot#skip _t6965)
          | 3 -> (if _t6965 = Protocol.T_LIST then
              _str6964#set_receiverMids 
                (let (_etype6975,_size6972) = iprot#readListBegin in
                  let _con6976 = (Array.to_list (Array.init _size6972 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6976)
            else
              iprot#skip _t6965)
          | _ -> iprot#skip _t6965);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6964

class commitSendMessages_result =
object (self)
  val mutable _success : (string,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "commitSendMessages_result.success") | Some _x6977 -> _x6977
  method set_success _x6977 = _success <- Some _x6977
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "commitSendMessages_result.e") | Some _x6978 -> _x6978
  method set_e _x6978 = _e <- Some _x6978
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitSendMessages_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter6981 -> fun _viter6982 -> 
        oprot#writeString(_kiter6981);
        oprot#writeString(_viter6982);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitSendMessages_result (iprot : Protocol.t) =
  let _str6983 = new commitSendMessages_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6984,_id6985) = iprot#readFieldBegin in
        if _t6984 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6985 with 
          | 0 -> (if _t6984 = Protocol.T_MAP then
              _str6983#set_success 
                (let (_ktype6987,_vtype6988,_size6986) = iprot#readMapBegin in
                let _con6990 = Hashtbl.create _size6986 in
                  for i = 1 to _size6986 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con6990 _k _v
                  done; iprot#readMapEnd; _con6990)
            else
              iprot#skip _t6984)
          | 1 -> (if _t6984 = Protocol.T_STRUCT then
              _str6983#set_e (read_talkException iprot)
            else
              iprot#skip _t6984)
          | _ -> iprot#skip _t6984);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6983

class commitUpdateProfile_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "commitUpdateProfile_args.seq") | Some _x6991 -> _x6991
  method set_seq _x6991 = _seq <- Some _x6991
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _attrs : ProfileAttribute.t list option = None
  method get_attrs = _attrs
  method grab_attrs = match _attrs with None->raise (Field_empty "commitUpdateProfile_args.attrs") | Some _x6992 -> _x6992
  method set_attrs _x6992 = _attrs <- Some _x6992
  method unset_attrs = _attrs <- None
  method reset_attrs = _attrs <- None

  val mutable _receiverMids : string list option = None
  method get_receiverMids = _receiverMids
  method grab_receiverMids = match _receiverMids with None->raise (Field_empty "commitUpdateProfile_args.receiverMids") | Some _x6993 -> _x6993
  method set_receiverMids _x6993 = _receiverMids <- Some _x6993
  method unset_receiverMids = _receiverMids <- None
  method reset_receiverMids = _receiverMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitUpdateProfile_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _attrs with None -> () | Some _v -> 
      oprot#writeFieldBegin("attrs",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_I32,List.length _v);
      List.iter (fun _iter6996 ->         oprot#writeI32(ProfileAttribute.to_i _iter6996);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _receiverMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("receiverMids",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6997 ->         oprot#writeString(_iter6997);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitUpdateProfile_args (iprot : Protocol.t) =
  let _str6998 = new commitUpdateProfile_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6999,_id7000) = iprot#readFieldBegin in
        if _t6999 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7000 with 
          | 1 -> (if _t6999 = Protocol.T_I32 then
              _str6998#set_seq iprot#readI32
            else
              iprot#skip _t6999)
          | 2 -> (if _t6999 = Protocol.T_LIST then
              _str6998#set_attrs 
                (let (_etype7004,_size7001) = iprot#readListBegin in
                  let _con7005 = (Array.to_list (Array.init _size7001 (fun _ -> (ProfileAttribute.of_i iprot#readI32)))) in
                    iprot#readListEnd; _con7005)
            else
              iprot#skip _t6999)
          | 3 -> (if _t6999 = Protocol.T_LIST then
              _str6998#set_receiverMids 
                (let (_etype7009,_size7006) = iprot#readListBegin in
                  let _con7010 = (Array.to_list (Array.init _size7006 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7010)
            else
              iprot#skip _t6999)
          | _ -> iprot#skip _t6999);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6998

class commitUpdateProfile_result =
object (self)
  val mutable _success : (string,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "commitUpdateProfile_result.success") | Some _x7011 -> _x7011
  method set_success _x7011 = _success <- Some _x7011
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "commitUpdateProfile_result.e") | Some _x7012 -> _x7012
  method set_e _x7012 = _e <- Some _x7012
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitUpdateProfile_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter7015 -> fun _viter7016 -> 
        oprot#writeString(_kiter7015);
        oprot#writeString(_viter7016);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitUpdateProfile_result (iprot : Protocol.t) =
  let _str7017 = new commitUpdateProfile_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7018,_id7019) = iprot#readFieldBegin in
        if _t7018 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7019 with 
          | 0 -> (if _t7018 = Protocol.T_MAP then
              _str7017#set_success 
                (let (_ktype7021,_vtype7022,_size7020) = iprot#readMapBegin in
                let _con7024 = Hashtbl.create _size7020 in
                  for i = 1 to _size7020 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con7024 _k _v
                  done; iprot#readMapEnd; _con7024)
            else
              iprot#skip _t7018)
          | 1 -> (if _t7018 = Protocol.T_STRUCT then
              _str7017#set_e (read_talkException iprot)
            else
              iprot#skip _t7018)
          | _ -> iprot#skip _t7018);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7017

class confirmEmail_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "confirmEmail_args.verifier") | Some _x7025 -> _x7025
  method set_verifier _x7025 = _verifier <- Some _x7025
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  val mutable _pinCode : string option = None
  method get_pinCode = _pinCode
  method grab_pinCode = match _pinCode with None->raise (Field_empty "confirmEmail_args.pinCode") | Some _x7026 -> _x7026
  method set_pinCode _x7026 = _pinCode <- Some _x7026
  method unset_pinCode = _pinCode <- None
  method reset_pinCode = _pinCode <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "confirmEmail_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _pinCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("pinCode",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_confirmEmail_args (iprot : Protocol.t) =
  let _str7029 = new confirmEmail_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7030,_id7031) = iprot#readFieldBegin in
        if _t7030 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7031 with 
          | 2 -> (if _t7030 = Protocol.T_STRING then
              _str7029#set_verifier iprot#readString
            else
              iprot#skip _t7030)
          | 3 -> (if _t7030 = Protocol.T_STRING then
              _str7029#set_pinCode iprot#readString
            else
              iprot#skip _t7030)
          | _ -> iprot#skip _t7030);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7029

class confirmEmail_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "confirmEmail_result.e") | Some _x7032 -> _x7032
  method set_e _x7032 = _e <- Some _x7032
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "confirmEmail_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_confirmEmail_result (iprot : Protocol.t) =
  let _str7035 = new confirmEmail_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7036,_id7037) = iprot#readFieldBegin in
        if _t7036 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7037 with 
          | 1 -> (if _t7036 = Protocol.T_STRUCT then
              _str7035#set_e (read_talkException iprot)
            else
              iprot#skip _t7036)
          | _ -> iprot#skip _t7036);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7035

class createGroup_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "createGroup_args.seq") | Some _x7038 -> _x7038
  method set_seq _x7038 = _seq <- Some _x7038
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _name : string option = None
  method get_name = _name
  method grab_name = match _name with None->raise (Field_empty "createGroup_args.name") | Some _x7039 -> _x7039
  method set_name _x7039 = _name <- Some _x7039
  method unset_name = _name <- None
  method reset_name = _name <- None

  val mutable _contactIds : string list option = None
  method get_contactIds = _contactIds
  method grab_contactIds = match _contactIds with None->raise (Field_empty "createGroup_args.contactIds") | Some _x7040 -> _x7040
  method set_contactIds _x7040 = _contactIds <- Some _x7040
  method unset_contactIds = _contactIds <- None
  method reset_contactIds = _contactIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createGroup_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _name with None -> () | Some _v -> 
      oprot#writeFieldBegin("name",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _contactIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactIds",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7043 ->         oprot#writeString(_iter7043);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createGroup_args (iprot : Protocol.t) =
  let _str7044 = new createGroup_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7045,_id7046) = iprot#readFieldBegin in
        if _t7045 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7046 with 
          | 1 -> (if _t7045 = Protocol.T_I32 then
              _str7044#set_seq iprot#readI32
            else
              iprot#skip _t7045)
          | 2 -> (if _t7045 = Protocol.T_STRING then
              _str7044#set_name iprot#readString
            else
              iprot#skip _t7045)
          | 3 -> (if _t7045 = Protocol.T_LIST then
              _str7044#set_contactIds 
                (let (_etype7050,_size7047) = iprot#readListBegin in
                  let _con7051 = (Array.to_list (Array.init _size7047 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7051)
            else
              iprot#skip _t7045)
          | _ -> iprot#skip _t7045);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7044

class createGroup_result =
object (self)
  val mutable _success : group option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createGroup_result.success") | Some _x7052 -> _x7052
  method set_success _x7052 = _success <- Some _x7052
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createGroup_result.e") | Some _x7053 -> _x7053
  method set_e _x7053 = _e <- Some _x7053
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createGroup_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createGroup_result (iprot : Protocol.t) =
  let _str7056 = new createGroup_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7057,_id7058) = iprot#readFieldBegin in
        if _t7057 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7058 with 
          | 0 -> (if _t7057 = Protocol.T_STRUCT then
              _str7056#set_success (read_group iprot)
            else
              iprot#skip _t7057)
          | 1 -> (if _t7057 = Protocol.T_STRUCT then
              _str7056#set_e (read_talkException iprot)
            else
              iprot#skip _t7057)
          | _ -> iprot#skip _t7057);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7056

class createQrcodeBase64Image_args =
object (self)
  val mutable _url : string option = None
  method get_url = _url
  method grab_url = match _url with None->raise (Field_empty "createQrcodeBase64Image_args.url") | Some _x7059 -> _x7059
  method set_url _x7059 = _url <- Some _x7059
  method unset_url = _url <- None
  method reset_url = _url <- None

  val mutable _characterSet : string option = None
  method get_characterSet = _characterSet
  method grab_characterSet = match _characterSet with None->raise (Field_empty "createQrcodeBase64Image_args.characterSet") | Some _x7060 -> _x7060
  method set_characterSet _x7060 = _characterSet <- Some _x7060
  method unset_characterSet = _characterSet <- None
  method reset_characterSet = _characterSet <- None

  val mutable _imageSize : Int32.t option = None
  method get_imageSize = _imageSize
  method grab_imageSize = match _imageSize with None->raise (Field_empty "createQrcodeBase64Image_args.imageSize") | Some _x7061 -> _x7061
  method set_imageSize _x7061 = _imageSize <- Some _x7061
  method unset_imageSize = _imageSize <- None
  method reset_imageSize = _imageSize <- None

  val mutable _x : Int32.t option = None
  method get_x = _x
  method grab_x = match _x with None->raise (Field_empty "createQrcodeBase64Image_args.x") | Some _x7062 -> _x7062
  method set_x _x7062 = _x <- Some _x7062
  method unset_x = _x <- None
  method reset_x = _x <- None

  val mutable _y : Int32.t option = None
  method get_y = _y
  method grab_y = match _y with None->raise (Field_empty "createQrcodeBase64Image_args.y") | Some _x7063 -> _x7063
  method set_y _x7063 = _y <- Some _x7063
  method unset_y = _y <- None
  method reset_y = _y <- None

  val mutable _width : Int32.t option = None
  method get_width = _width
  method grab_width = match _width with None->raise (Field_empty "createQrcodeBase64Image_args.width") | Some _x7064 -> _x7064
  method set_width _x7064 = _width <- Some _x7064
  method unset_width = _width <- None
  method reset_width = _width <- None

  val mutable _height : Int32.t option = None
  method get_height = _height
  method grab_height = match _height with None->raise (Field_empty "createQrcodeBase64Image_args.height") | Some _x7065 -> _x7065
  method set_height _x7065 = _height <- Some _x7065
  method unset_height = _height <- None
  method reset_height = _height <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createQrcodeBase64Image_args";
    (match _url with None -> () | Some _v -> 
      oprot#writeFieldBegin("url",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _characterSet with None -> () | Some _v -> 
      oprot#writeFieldBegin("characterSet",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _imageSize with None -> () | Some _v -> 
      oprot#writeFieldBegin("imageSize",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _x with None -> () | Some _v -> 
      oprot#writeFieldBegin("x",Protocol.T_I32,5);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _y with None -> () | Some _v -> 
      oprot#writeFieldBegin("y",Protocol.T_I32,6);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _width with None -> () | Some _v -> 
      oprot#writeFieldBegin("width",Protocol.T_I32,7);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _height with None -> () | Some _v -> 
      oprot#writeFieldBegin("height",Protocol.T_I32,8);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createQrcodeBase64Image_args (iprot : Protocol.t) =
  let _str7068 = new createQrcodeBase64Image_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7069,_id7070) = iprot#readFieldBegin in
        if _t7069 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7070 with 
          | 2 -> (if _t7069 = Protocol.T_STRING then
              _str7068#set_url iprot#readString
            else
              iprot#skip _t7069)
          | 3 -> (if _t7069 = Protocol.T_STRING then
              _str7068#set_characterSet iprot#readString
            else
              iprot#skip _t7069)
          | 4 -> (if _t7069 = Protocol.T_I32 then
              _str7068#set_imageSize iprot#readI32
            else
              iprot#skip _t7069)
          | 5 -> (if _t7069 = Protocol.T_I32 then
              _str7068#set_x iprot#readI32
            else
              iprot#skip _t7069)
          | 6 -> (if _t7069 = Protocol.T_I32 then
              _str7068#set_y iprot#readI32
            else
              iprot#skip _t7069)
          | 7 -> (if _t7069 = Protocol.T_I32 then
              _str7068#set_width iprot#readI32
            else
              iprot#skip _t7069)
          | 8 -> (if _t7069 = Protocol.T_I32 then
              _str7068#set_height iprot#readI32
            else
              iprot#skip _t7069)
          | _ -> iprot#skip _t7069);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7068

class createQrcodeBase64Image_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createQrcodeBase64Image_result.success") | Some _x7071 -> _x7071
  method set_success _x7071 = _success <- Some _x7071
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createQrcodeBase64Image_result.e") | Some _x7072 -> _x7072
  method set_e _x7072 = _e <- Some _x7072
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createQrcodeBase64Image_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createQrcodeBase64Image_result (iprot : Protocol.t) =
  let _str7075 = new createQrcodeBase64Image_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7076,_id7077) = iprot#readFieldBegin in
        if _t7076 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7077 with 
          | 0 -> (if _t7076 = Protocol.T_STRING then
              _str7075#set_success iprot#readString
            else
              iprot#skip _t7076)
          | 1 -> (if _t7076 = Protocol.T_STRUCT then
              _str7075#set_e (read_talkException iprot)
            else
              iprot#skip _t7076)
          | _ -> iprot#skip _t7076);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7075

class createRoom_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "createRoom_args.reqSeq") | Some _x7078 -> _x7078
  method set_reqSeq _x7078 = _reqSeq <- Some _x7078
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _contactIds : string list option = None
  method get_contactIds = _contactIds
  method grab_contactIds = match _contactIds with None->raise (Field_empty "createRoom_args.contactIds") | Some _x7079 -> _x7079
  method set_contactIds _x7079 = _contactIds <- Some _x7079
  method unset_contactIds = _contactIds <- None
  method reset_contactIds = _contactIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createRoom_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _contactIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactIds",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7082 ->         oprot#writeString(_iter7082);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createRoom_args (iprot : Protocol.t) =
  let _str7083 = new createRoom_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7084,_id7085) = iprot#readFieldBegin in
        if _t7084 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7085 with 
          | 1 -> (if _t7084 = Protocol.T_I32 then
              _str7083#set_reqSeq iprot#readI32
            else
              iprot#skip _t7084)
          | 2 -> (if _t7084 = Protocol.T_LIST then
              _str7083#set_contactIds 
                (let (_etype7089,_size7086) = iprot#readListBegin in
                  let _con7090 = (Array.to_list (Array.init _size7086 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7090)
            else
              iprot#skip _t7084)
          | _ -> iprot#skip _t7084);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7083

class createRoom_result =
object (self)
  val mutable _success : room option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createRoom_result.success") | Some _x7091 -> _x7091
  method set_success _x7091 = _success <- Some _x7091
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createRoom_result.e") | Some _x7092 -> _x7092
  method set_e _x7092 = _e <- Some _x7092
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createRoom_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createRoom_result (iprot : Protocol.t) =
  let _str7095 = new createRoom_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7096,_id7097) = iprot#readFieldBegin in
        if _t7096 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7097 with 
          | 0 -> (if _t7096 = Protocol.T_STRUCT then
              _str7095#set_success (read_room iprot)
            else
              iprot#skip _t7096)
          | 1 -> (if _t7096 = Protocol.T_STRUCT then
              _str7095#set_e (read_talkException iprot)
            else
              iprot#skip _t7096)
          | _ -> iprot#skip _t7096);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7095

class createSession_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createSession_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createSession_args (iprot : Protocol.t) =
  let _str7100 = new createSession_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7101,_id7102) = iprot#readFieldBegin in
        if _t7101 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7102 with 
          | _ -> iprot#skip _t7101);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7100

class createSession_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createSession_result.success") | Some _x7103 -> _x7103
  method set_success _x7103 = _success <- Some _x7103
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createSession_result.e") | Some _x7104 -> _x7104
  method set_e _x7104 = _e <- Some _x7104
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createSession_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createSession_result (iprot : Protocol.t) =
  let _str7107 = new createSession_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7108,_id7109) = iprot#readFieldBegin in
        if _t7108 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7109 with 
          | 0 -> (if _t7108 = Protocol.T_STRING then
              _str7107#set_success iprot#readString
            else
              iprot#skip _t7108)
          | 1 -> (if _t7108 = Protocol.T_STRUCT then
              _str7107#set_e (read_talkException iprot)
            else
              iprot#skip _t7108)
          | _ -> iprot#skip _t7108);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7107

class fetchAnnouncements_args =
object (self)
  val mutable _lastFetchedIndex : Int32.t option = None
  method get_lastFetchedIndex = _lastFetchedIndex
  method grab_lastFetchedIndex = match _lastFetchedIndex with None->raise (Field_empty "fetchAnnouncements_args.lastFetchedIndex") | Some _x7110 -> _x7110
  method set_lastFetchedIndex _x7110 = _lastFetchedIndex <- Some _x7110
  method unset_lastFetchedIndex = _lastFetchedIndex <- None
  method reset_lastFetchedIndex = _lastFetchedIndex <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchAnnouncements_args";
    (match _lastFetchedIndex with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastFetchedIndex",Protocol.T_I32,2);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchAnnouncements_args (iprot : Protocol.t) =
  let _str7113 = new fetchAnnouncements_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7114,_id7115) = iprot#readFieldBegin in
        if _t7114 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7115 with 
          | 2 -> (if _t7114 = Protocol.T_I32 then
              _str7113#set_lastFetchedIndex iprot#readI32
            else
              iprot#skip _t7114)
          | _ -> iprot#skip _t7114);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7113

class fetchAnnouncements_result =
object (self)
  val mutable _success : announcement list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "fetchAnnouncements_result.success") | Some _x7116 -> _x7116
  method set_success _x7116 = _success <- Some _x7116
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "fetchAnnouncements_result.e") | Some _x7117 -> _x7117
  method set_e _x7117 = _e <- Some _x7117
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchAnnouncements_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter7120 ->         _iter7120#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchAnnouncements_result (iprot : Protocol.t) =
  let _str7121 = new fetchAnnouncements_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7122,_id7123) = iprot#readFieldBegin in
        if _t7122 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7123 with 
          | 0 -> (if _t7122 = Protocol.T_LIST then
              _str7121#set_success 
                (let (_etype7127,_size7124) = iprot#readListBegin in
                  let _con7128 = (Array.to_list (Array.init _size7124 (fun _ -> (read_announcement iprot)))) in
                    iprot#readListEnd; _con7128)
            else
              iprot#skip _t7122)
          | 1 -> (if _t7122 = Protocol.T_STRUCT then
              _str7121#set_e (read_talkException iprot)
            else
              iprot#skip _t7122)
          | _ -> iprot#skip _t7122);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7121

class fetchMessages_args =
object (self)
  val mutable _localTs : Int64.t option = None
  method get_localTs = _localTs
  method grab_localTs = match _localTs with None->raise (Field_empty "fetchMessages_args.localTs") | Some _x7129 -> _x7129
  method set_localTs _x7129 = _localTs <- Some _x7129
  method unset_localTs = _localTs <- None
  method reset_localTs = _localTs <- None

  val mutable _count : Int32.t option = None
  method get_count = _count
  method grab_count = match _count with None->raise (Field_empty "fetchMessages_args.count") | Some _x7130 -> _x7130
  method set_count _x7130 = _count <- Some _x7130
  method unset_count = _count <- None
  method reset_count = _count <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchMessages_args";
    (match _localTs with None -> () | Some _v -> 
      oprot#writeFieldBegin("localTs",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _count with None -> () | Some _v -> 
      oprot#writeFieldBegin("count",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchMessages_args (iprot : Protocol.t) =
  let _str7133 = new fetchMessages_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7134,_id7135) = iprot#readFieldBegin in
        if _t7134 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7135 with 
          | 2 -> (if _t7134 = Protocol.T_I64 then
              _str7133#set_localTs iprot#readI64
            else
              iprot#skip _t7134)
          | 3 -> (if _t7134 = Protocol.T_I32 then
              _str7133#set_count iprot#readI32
            else
              iprot#skip _t7134)
          | _ -> iprot#skip _t7134);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7133

class fetchMessages_result =
object (self)
  val mutable _success : message list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "fetchMessages_result.success") | Some _x7136 -> _x7136
  method set_success _x7136 = _success <- Some _x7136
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "fetchMessages_result.e") | Some _x7137 -> _x7137
  method set_e _x7137 = _e <- Some _x7137
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchMessages_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter7140 ->         _iter7140#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchMessages_result (iprot : Protocol.t) =
  let _str7141 = new fetchMessages_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7142,_id7143) = iprot#readFieldBegin in
        if _t7142 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7143 with 
          | 0 -> (if _t7142 = Protocol.T_LIST then
              _str7141#set_success 
                (let (_etype7147,_size7144) = iprot#readListBegin in
                  let _con7148 = (Array.to_list (Array.init _size7144 (fun _ -> (read_message iprot)))) in
                    iprot#readListEnd; _con7148)
            else
              iprot#skip _t7142)
          | 1 -> (if _t7142 = Protocol.T_STRUCT then
              _str7141#set_e (read_talkException iprot)
            else
              iprot#skip _t7142)
          | _ -> iprot#skip _t7142);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7141

class fetchOperations_args =
object (self)
  val mutable _localRev : Int64.t option = None
  method get_localRev = _localRev
  method grab_localRev = match _localRev with None->raise (Field_empty "fetchOperations_args.localRev") | Some _x7149 -> _x7149
  method set_localRev _x7149 = _localRev <- Some _x7149
  method unset_localRev = _localRev <- None
  method reset_localRev = _localRev <- None

  val mutable _count : Int32.t option = None
  method get_count = _count
  method grab_count = match _count with None->raise (Field_empty "fetchOperations_args.count") | Some _x7150 -> _x7150
  method set_count _x7150 = _count <- Some _x7150
  method unset_count = _count <- None
  method reset_count = _count <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchOperations_args";
    (match _localRev with None -> () | Some _v -> 
      oprot#writeFieldBegin("localRev",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _count with None -> () | Some _v -> 
      oprot#writeFieldBegin("count",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchOperations_args (iprot : Protocol.t) =
  let _str7153 = new fetchOperations_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7154,_id7155) = iprot#readFieldBegin in
        if _t7154 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7155 with 
          | 2 -> (if _t7154 = Protocol.T_I64 then
              _str7153#set_localRev iprot#readI64
            else
              iprot#skip _t7154)
          | 3 -> (if _t7154 = Protocol.T_I32 then
              _str7153#set_count iprot#readI32
            else
              iprot#skip _t7154)
          | _ -> iprot#skip _t7154);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7153

class fetchOperations_result =
object (self)
  val mutable _success : operation list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "fetchOperations_result.success") | Some _x7156 -> _x7156
  method set_success _x7156 = _success <- Some _x7156
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : shouldSyncException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "fetchOperations_result.e") | Some _x7157 -> _x7157
  method set_e _x7157 = _e <- Some _x7157
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchOperations_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter7160 ->         _iter7160#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchOperations_result (iprot : Protocol.t) =
  let _str7161 = new fetchOperations_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7162,_id7163) = iprot#readFieldBegin in
        if _t7162 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7163 with 
          | 0 -> (if _t7162 = Protocol.T_LIST then
              _str7161#set_success 
                (let (_etype7167,_size7164) = iprot#readListBegin in
                  let _con7168 = (Array.to_list (Array.init _size7164 (fun _ -> (read_operation iprot)))) in
                    iprot#readListEnd; _con7168)
            else
              iprot#skip _t7162)
          | 1 -> (if _t7162 = Protocol.T_STRUCT then
              _str7161#set_e (read_shouldSyncException iprot)
            else
              iprot#skip _t7162)
          | _ -> iprot#skip _t7162);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7161

class fetchOps_args =
object (self)
  val mutable _localRev : Int64.t option = None
  method get_localRev = _localRev
  method grab_localRev = match _localRev with None->raise (Field_empty "fetchOps_args.localRev") | Some _x7169 -> _x7169
  method set_localRev _x7169 = _localRev <- Some _x7169
  method unset_localRev = _localRev <- None
  method reset_localRev = _localRev <- None

  val mutable _count : Int32.t option = None
  method get_count = _count
  method grab_count = match _count with None->raise (Field_empty "fetchOps_args.count") | Some _x7170 -> _x7170
  method set_count _x7170 = _count <- Some _x7170
  method unset_count = _count <- None
  method reset_count = _count <- None

  val mutable _globalRev : Int64.t option = None
  method get_globalRev = _globalRev
  method grab_globalRev = match _globalRev with None->raise (Field_empty "fetchOps_args.globalRev") | Some _x7171 -> _x7171
  method set_globalRev _x7171 = _globalRev <- Some _x7171
  method unset_globalRev = _globalRev <- None
  method reset_globalRev = _globalRev <- None

  val mutable _individualRev : Int64.t option = None
  method get_individualRev = _individualRev
  method grab_individualRev = match _individualRev with None->raise (Field_empty "fetchOps_args.individualRev") | Some _x7172 -> _x7172
  method set_individualRev _x7172 = _individualRev <- Some _x7172
  method unset_individualRev = _individualRev <- None
  method reset_individualRev = _individualRev <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchOps_args";
    (match _localRev with None -> () | Some _v -> 
      oprot#writeFieldBegin("localRev",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _count with None -> () | Some _v -> 
      oprot#writeFieldBegin("count",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _globalRev with None -> () | Some _v -> 
      oprot#writeFieldBegin("globalRev",Protocol.T_I64,4);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _individualRev with None -> () | Some _v -> 
      oprot#writeFieldBegin("individualRev",Protocol.T_I64,5);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchOps_args (iprot : Protocol.t) =
  let _str7175 = new fetchOps_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7176,_id7177) = iprot#readFieldBegin in
        if _t7176 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7177 with 
          | 2 -> (if _t7176 = Protocol.T_I64 then
              _str7175#set_localRev iprot#readI64
            else
              iprot#skip _t7176)
          | 3 -> (if _t7176 = Protocol.T_I32 then
              _str7175#set_count iprot#readI32
            else
              iprot#skip _t7176)
          | 4 -> (if _t7176 = Protocol.T_I64 then
              _str7175#set_globalRev iprot#readI64
            else
              iprot#skip _t7176)
          | 5 -> (if _t7176 = Protocol.T_I64 then
              _str7175#set_individualRev iprot#readI64
            else
              iprot#skip _t7176)
          | _ -> iprot#skip _t7176);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7175

class fetchOps_result =
object (self)
  val mutable _success : operation list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "fetchOps_result.success") | Some _x7178 -> _x7178
  method set_success _x7178 = _success <- Some _x7178
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : shouldSyncException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "fetchOps_result.e") | Some _x7179 -> _x7179
  method set_e _x7179 = _e <- Some _x7179
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchOps_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter7182 ->         _iter7182#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchOps_result (iprot : Protocol.t) =
  let _str7183 = new fetchOps_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7184,_id7185) = iprot#readFieldBegin in
        if _t7184 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7185 with 
          | 0 -> (if _t7184 = Protocol.T_LIST then
              _str7183#set_success 
                (let (_etype7189,_size7186) = iprot#readListBegin in
                  let _con7190 = (Array.to_list (Array.init _size7186 (fun _ -> (read_operation iprot)))) in
                    iprot#readListEnd; _con7190)
            else
              iprot#skip _t7184)
          | 1 -> (if _t7184 = Protocol.T_STRUCT then
              _str7183#set_e (read_shouldSyncException iprot)
            else
              iprot#skip _t7184)
          | _ -> iprot#skip _t7184);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7183

class findAndAddContactsByEmail_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "findAndAddContactsByEmail_args.reqSeq") | Some _x7191 -> _x7191
  method set_reqSeq _x7191 = _reqSeq <- Some _x7191
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _emails : (string,bool) Hashtbl.t option = None
  method get_emails = _emails
  method grab_emails = match _emails with None->raise (Field_empty "findAndAddContactsByEmail_args.emails") | Some _x7192 -> _x7192
  method set_emails _x7192 = _emails <- Some _x7192
  method unset_emails = _emails <- None
  method reset_emails = _emails <- None

  method copy =
      let _new = Oo.copy self in
      if _emails <> None then
        _new#set_emails (Hashtbl.copy self#grab_emails);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactsByEmail_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _emails with None -> () | Some _v -> 
      oprot#writeFieldBegin("emails",Protocol.T_SET,2);
      oprot#writeSetBegin(Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _iter7195 -> fun _ ->         oprot#writeString(_iter7195);
      ) _v;
      oprot#writeSetEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactsByEmail_args (iprot : Protocol.t) =
  let _str7196 = new findAndAddContactsByEmail_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7197,_id7198) = iprot#readFieldBegin in
        if _t7197 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7198 with 
          | 1 -> (if _t7197 = Protocol.T_I32 then
              _str7196#set_reqSeq iprot#readI32
            else
              iprot#skip _t7197)
          | 2 -> (if _t7197 = Protocol.T_SET then
              _str7196#set_emails 
                (let (_etype7202,_size7199) = iprot#readSetBegin in
                let _con7203 = Hashtbl.create _size7199 in
                  for i = 1 to _size7199 do
                    Hashtbl.add _con7203 iprot#readString true
                  done; iprot#readSetEnd; _con7203)
            else
              iprot#skip _t7197)
          | _ -> iprot#skip _t7197);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7196

class findAndAddContactsByEmail_result =
object (self)
  val mutable _success : (string,contact) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findAndAddContactsByEmail_result.success") | Some _x7204 -> _x7204
  method set_success _x7204 = _success <- Some _x7204
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findAndAddContactsByEmail_result.e") | Some _x7205 -> _x7205
  method set_e _x7205 = _e <- Some _x7205
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k v#copy) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactsByEmail_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter7208 -> fun _viter7209 -> 
        oprot#writeString(_kiter7208);
        _viter7209#write(oprot);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactsByEmail_result (iprot : Protocol.t) =
  let _str7210 = new findAndAddContactsByEmail_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7211,_id7212) = iprot#readFieldBegin in
        if _t7211 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7212 with 
          | 0 -> (if _t7211 = Protocol.T_MAP then
              _str7210#set_success 
                (let (_ktype7214,_vtype7215,_size7213) = iprot#readMapBegin in
                let _con7217 = Hashtbl.create _size7213 in
                  for i = 1 to _size7213 do
                    let _k = iprot#readString in
                    let _v = (read_contact iprot) in
                      Hashtbl.add _con7217 _k _v
                  done; iprot#readMapEnd; _con7217)
            else
              iprot#skip _t7211)
          | 1 -> (if _t7211 = Protocol.T_STRUCT then
              _str7210#set_e (read_talkException iprot)
            else
              iprot#skip _t7211)
          | _ -> iprot#skip _t7211);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7210

class findAndAddContactsByMid_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "findAndAddContactsByMid_args.reqSeq") | Some _x7218 -> _x7218
  method set_reqSeq _x7218 = _reqSeq <- Some _x7218
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "findAndAddContactsByMid_args.mid") | Some _x7219 -> _x7219
  method set_mid _x7219 = _mid <- Some _x7219
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  val mutable _type : ContactType.t option = None
  method get_type = _type
  method grab_type = match _type with None->raise (Field_empty "findAndAddContactsByMid_args.type") | Some _x7220 -> _x7220
  method set_type _x7220 = _type <- Some _x7220
  method unset_type = _type <- None
  method reset_type = _type <- None

  val mutable _reference : string option = None
  method get_reference = _reference
  method grab_reference = match _reference with None->raise (Field_empty "findAndAddContactsByMid_args.reference") | Some _x7221 -> _x7221
  method set_reference _x7221 = _reference <- Some _x7221
  method unset_reference = _reference <- None
  method reset_reference = _reference <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactsByMid_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _type with None -> () | Some _v -> 
      oprot#writeFieldBegin("type",Protocol.T_I32,3);
      oprot#writeI32(ContactType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _reference with None -> () | Some _v -> 
      oprot#writeFieldBegin("reference",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactsByMid_args (iprot : Protocol.t) =
  let _str7224 = new findAndAddContactsByMid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7225,_id7226) = iprot#readFieldBegin in
        if _t7225 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7226 with 
          | 1 -> (if _t7225 = Protocol.T_I32 then
              _str7224#set_reqSeq iprot#readI32
            else
              iprot#skip _t7225)
          | 2 -> (if _t7225 = Protocol.T_STRING then
              _str7224#set_mid iprot#readString
            else
              iprot#skip _t7225)
          | 3 -> (if _t7225 = Protocol.T_I32 then
              _str7224#set_type (ContactType.of_i iprot#readI32)
            else
              iprot#skip _t7225)
          | 4 -> (if _t7225 = Protocol.T_STRING then
              _str7224#set_reference iprot#readString
            else
              iprot#skip _t7225)
          | _ -> iprot#skip _t7225);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7224

class findAndAddContactsByMid_result =
object (self)
  val mutable _success : (string,contact) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findAndAddContactsByMid_result.success") | Some _x7227 -> _x7227
  method set_success _x7227 = _success <- Some _x7227
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findAndAddContactsByMid_result.e") | Some _x7228 -> _x7228
  method set_e _x7228 = _e <- Some _x7228
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k v#copy) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactsByMid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter7231 -> fun _viter7232 -> 
        oprot#writeString(_kiter7231);
        _viter7232#write(oprot);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactsByMid_result (iprot : Protocol.t) =
  let _str7233 = new findAndAddContactsByMid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7234,_id7235) = iprot#readFieldBegin in
        if _t7234 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7235 with 
          | 0 -> (if _t7234 = Protocol.T_MAP then
              _str7233#set_success 
                (let (_ktype7237,_vtype7238,_size7236) = iprot#readMapBegin in
                let _con7240 = Hashtbl.create _size7236 in
                  for i = 1 to _size7236 do
                    let _k = iprot#readString in
                    let _v = (read_contact iprot) in
                      Hashtbl.add _con7240 _k _v
                  done; iprot#readMapEnd; _con7240)
            else
              iprot#skip _t7234)
          | 1 -> (if _t7234 = Protocol.T_STRUCT then
              _str7233#set_e (read_talkException iprot)
            else
              iprot#skip _t7234)
          | _ -> iprot#skip _t7234);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7233

class findGroupByTicketV2_args =
object (self)
  val mutable _ticketId : string option = None
  method get_ticketId = _ticketId
  method grab_ticketId = match _ticketId with None->raise (Field_empty "findGroupByTicketV2_args.ticketId") | Some _x7241 -> _x7241
  method set_ticketId _x7241 = _ticketId <- Some _x7241
  method unset_ticketId = _ticketId <- None
  method reset_ticketId = _ticketId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findGroupByTicketV2_args";
    (match _ticketId with None -> () | Some _v -> 
      oprot#writeFieldBegin("ticketId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findGroupByTicketV2_args (iprot : Protocol.t) =
  let _str7244 = new findGroupByTicketV2_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7245,_id7246) = iprot#readFieldBegin in
        if _t7245 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7246 with 
          | 1 -> (if _t7245 = Protocol.T_STRING then
              _str7244#set_ticketId iprot#readString
            else
              iprot#skip _t7245)
          | _ -> iprot#skip _t7245);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7244

class findGroupByTicketV2_result =
object (self)
  val mutable _success : group option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findGroupByTicketV2_result.success") | Some _x7247 -> _x7247
  method set_success _x7247 = _success <- Some _x7247
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findGroupByTicketV2_result.e") | Some _x7248 -> _x7248
  method set_e _x7248 = _e <- Some _x7248
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findGroupByTicketV2_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findGroupByTicketV2_result (iprot : Protocol.t) =
  let _str7251 = new findGroupByTicketV2_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7252,_id7253) = iprot#readFieldBegin in
        if _t7252 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7253 with 
          | 0 -> (if _t7252 = Protocol.T_STRUCT then
              _str7251#set_success (read_group iprot)
            else
              iprot#skip _t7252)
          | 1 -> (if _t7252 = Protocol.T_STRUCT then
              _str7251#set_e (read_talkException iprot)
            else
              iprot#skip _t7252)
          | _ -> iprot#skip _t7252);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7251

class findAndAddContactsByPhone_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "findAndAddContactsByPhone_args.reqSeq") | Some _x7254 -> _x7254
  method set_reqSeq _x7254 = _reqSeq <- Some _x7254
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _phones : (string,bool) Hashtbl.t option = None
  method get_phones = _phones
  method grab_phones = match _phones with None->raise (Field_empty "findAndAddContactsByPhone_args.phones") | Some _x7255 -> _x7255
  method set_phones _x7255 = _phones <- Some _x7255
  method unset_phones = _phones <- None
  method reset_phones = _phones <- None

  method copy =
      let _new = Oo.copy self in
      if _phones <> None then
        _new#set_phones (Hashtbl.copy self#grab_phones);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactsByPhone_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _phones with None -> () | Some _v -> 
      oprot#writeFieldBegin("phones",Protocol.T_SET,2);
      oprot#writeSetBegin(Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _iter7258 -> fun _ ->         oprot#writeString(_iter7258);
      ) _v;
      oprot#writeSetEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactsByPhone_args (iprot : Protocol.t) =
  let _str7259 = new findAndAddContactsByPhone_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7260,_id7261) = iprot#readFieldBegin in
        if _t7260 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7261 with 
          | 1 -> (if _t7260 = Protocol.T_I32 then
              _str7259#set_reqSeq iprot#readI32
            else
              iprot#skip _t7260)
          | 2 -> (if _t7260 = Protocol.T_SET then
              _str7259#set_phones 
                (let (_etype7265,_size7262) = iprot#readSetBegin in
                let _con7266 = Hashtbl.create _size7262 in
                  for i = 1 to _size7262 do
                    Hashtbl.add _con7266 iprot#readString true
                  done; iprot#readSetEnd; _con7266)
            else
              iprot#skip _t7260)
          | _ -> iprot#skip _t7260);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7259

class findAndAddContactsByPhone_result =
object (self)
  val mutable _success : (string,contact) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findAndAddContactsByPhone_result.success") | Some _x7267 -> _x7267
  method set_success _x7267 = _success <- Some _x7267
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findAndAddContactsByPhone_result.e") | Some _x7268 -> _x7268
  method set_e _x7268 = _e <- Some _x7268
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k v#copy) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactsByPhone_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter7271 -> fun _viter7272 -> 
        oprot#writeString(_kiter7271);
        _viter7272#write(oprot);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactsByPhone_result (iprot : Protocol.t) =
  let _str7273 = new findAndAddContactsByPhone_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7274,_id7275) = iprot#readFieldBegin in
        if _t7274 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7275 with 
          | 0 -> (if _t7274 = Protocol.T_MAP then
              _str7273#set_success 
                (let (_ktype7277,_vtype7278,_size7276) = iprot#readMapBegin in
                let _con7280 = Hashtbl.create _size7276 in
                  for i = 1 to _size7276 do
                    let _k = iprot#readString in
                    let _v = (read_contact iprot) in
                      Hashtbl.add _con7280 _k _v
                  done; iprot#readMapEnd; _con7280)
            else
              iprot#skip _t7274)
          | 1 -> (if _t7274 = Protocol.T_STRUCT then
              _str7273#set_e (read_talkException iprot)
            else
              iprot#skip _t7274)
          | _ -> iprot#skip _t7274);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7273

class getFriendRequests_args =
object (self)
  val mutable _direction : FriendRequestDirection.t option = None
  method get_direction = _direction
  method grab_direction = match _direction with None->raise (Field_empty "getFriendRequests_args.direction") | Some _x7281 -> _x7281
  method set_direction _x7281 = _direction <- Some _x7281
  method unset_direction = _direction <- None
  method reset_direction = _direction <- None

  val mutable _lastSeenSeqId : Int64.t option = None
  method get_lastSeenSeqId = _lastSeenSeqId
  method grab_lastSeenSeqId = match _lastSeenSeqId with None->raise (Field_empty "getFriendRequests_args.lastSeenSeqId") | Some _x7282 -> _x7282
  method set_lastSeenSeqId _x7282 = _lastSeenSeqId <- Some _x7282
  method unset_lastSeenSeqId = _lastSeenSeqId <- None
  method reset_lastSeenSeqId = _lastSeenSeqId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFriendRequests_args";
    (match _direction with None -> () | Some _v -> 
      oprot#writeFieldBegin("direction",Protocol.T_I32,1);
      oprot#writeI32(FriendRequestDirection.to_i _v);
      oprot#writeFieldEnd
    );
    (match _lastSeenSeqId with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastSeenSeqId",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFriendRequests_args (iprot : Protocol.t) =
  let _str7285 = new getFriendRequests_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7286,_id7287) = iprot#readFieldBegin in
        if _t7286 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7287 with 
          | 1 -> (if _t7286 = Protocol.T_I32 then
              _str7285#set_direction (FriendRequestDirection.of_i iprot#readI32)
            else
              iprot#skip _t7286)
          | 2 -> (if _t7286 = Protocol.T_I64 then
              _str7285#set_lastSeenSeqId iprot#readI64
            else
              iprot#skip _t7286)
          | _ -> iprot#skip _t7286);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7285

class getFriendRequests_result =
object (self)
  val mutable _success : friendRequest list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getFriendRequests_result.success") | Some _x7288 -> _x7288
  method set_success _x7288 = _success <- Some _x7288
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getFriendRequests_result.e") | Some _x7289 -> _x7289
  method set_e _x7289 = _e <- Some _x7289
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFriendRequests_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter7292 ->         _iter7292#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFriendRequests_result (iprot : Protocol.t) =
  let _str7293 = new getFriendRequests_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7294,_id7295) = iprot#readFieldBegin in
        if _t7294 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7295 with 
          | 0 -> (if _t7294 = Protocol.T_LIST then
              _str7293#set_success 
                (let (_etype7299,_size7296) = iprot#readListBegin in
                  let _con7300 = (Array.to_list (Array.init _size7296 (fun _ -> (read_friendRequest iprot)))) in
                    iprot#readListEnd; _con7300)
            else
              iprot#skip _t7294)
          | 1 -> (if _t7294 = Protocol.T_STRUCT then
              _str7293#set_e (read_talkException iprot)
            else
              iprot#skip _t7294)
          | _ -> iprot#skip _t7294);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7293

class removeFriendRequest_args =
object (self)
  val mutable _direction : FriendRequestDirection.t option = None
  method get_direction = _direction
  method grab_direction = match _direction with None->raise (Field_empty "removeFriendRequest_args.direction") | Some _x7301 -> _x7301
  method set_direction _x7301 = _direction <- Some _x7301
  method unset_direction = _direction <- None
  method reset_direction = _direction <- None

  val mutable _midOrEMid : string option = None
  method get_midOrEMid = _midOrEMid
  method grab_midOrEMid = match _midOrEMid with None->raise (Field_empty "removeFriendRequest_args.midOrEMid") | Some _x7302 -> _x7302
  method set_midOrEMid _x7302 = _midOrEMid <- Some _x7302
  method unset_midOrEMid = _midOrEMid <- None
  method reset_midOrEMid = _midOrEMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeFriendRequest_args";
    (match _direction with None -> () | Some _v -> 
      oprot#writeFieldBegin("direction",Protocol.T_I32,1);
      oprot#writeI32(FriendRequestDirection.to_i _v);
      oprot#writeFieldEnd
    );
    (match _midOrEMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("midOrEMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeFriendRequest_args (iprot : Protocol.t) =
  let _str7305 = new removeFriendRequest_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7306,_id7307) = iprot#readFieldBegin in
        if _t7306 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7307 with 
          | 1 -> (if _t7306 = Protocol.T_I32 then
              _str7305#set_direction (FriendRequestDirection.of_i iprot#readI32)
            else
              iprot#skip _t7306)
          | 2 -> (if _t7306 = Protocol.T_STRING then
              _str7305#set_midOrEMid iprot#readString
            else
              iprot#skip _t7306)
          | _ -> iprot#skip _t7306);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7305

class removeFriendRequest_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeFriendRequest_result.e") | Some _x7308 -> _x7308
  method set_e _x7308 = _e <- Some _x7308
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeFriendRequest_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeFriendRequest_result (iprot : Protocol.t) =
  let _str7311 = new removeFriendRequest_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7312,_id7313) = iprot#readFieldBegin in
        if _t7312 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7313 with 
          | 1 -> (if _t7312 = Protocol.T_STRUCT then
              _str7311#set_e (read_talkException iprot)
            else
              iprot#skip _t7312)
          | _ -> iprot#skip _t7312);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7311

class findAndAddContactsByUserid_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "findAndAddContactsByUserid_args.reqSeq") | Some _x7314 -> _x7314
  method set_reqSeq _x7314 = _reqSeq <- Some _x7314
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _userid : string option = None
  method get_userid = _userid
  method grab_userid = match _userid with None->raise (Field_empty "findAndAddContactsByUserid_args.userid") | Some _x7315 -> _x7315
  method set_userid _x7315 = _userid <- Some _x7315
  method unset_userid = _userid <- None
  method reset_userid = _userid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactsByUserid_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _userid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactsByUserid_args (iprot : Protocol.t) =
  let _str7318 = new findAndAddContactsByUserid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7319,_id7320) = iprot#readFieldBegin in
        if _t7319 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7320 with 
          | 1 -> (if _t7319 = Protocol.T_I32 then
              _str7318#set_reqSeq iprot#readI32
            else
              iprot#skip _t7319)
          | 2 -> (if _t7319 = Protocol.T_STRING then
              _str7318#set_userid iprot#readString
            else
              iprot#skip _t7319)
          | _ -> iprot#skip _t7319);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7318

class findAndAddContactsByUserid_result =
object (self)
  val mutable _success : (string,contact) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findAndAddContactsByUserid_result.success") | Some _x7321 -> _x7321
  method set_success _x7321 = _success <- Some _x7321
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findAndAddContactsByUserid_result.e") | Some _x7322 -> _x7322
  method set_e _x7322 = _e <- Some _x7322
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k v#copy) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactsByUserid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter7325 -> fun _viter7326 -> 
        oprot#writeString(_kiter7325);
        _viter7326#write(oprot);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactsByUserid_result (iprot : Protocol.t) =
  let _str7327 = new findAndAddContactsByUserid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7328,_id7329) = iprot#readFieldBegin in
        if _t7328 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7329 with 
          | 0 -> (if _t7328 = Protocol.T_MAP then
              _str7327#set_success 
                (let (_ktype7331,_vtype7332,_size7330) = iprot#readMapBegin in
                let _con7334 = Hashtbl.create _size7330 in
                  for i = 1 to _size7330 do
                    let _k = iprot#readString in
                    let _v = (read_contact iprot) in
                      Hashtbl.add _con7334 _k _v
                  done; iprot#readMapEnd; _con7334)
            else
              iprot#skip _t7328)
          | 1 -> (if _t7328 = Protocol.T_STRUCT then
              _str7327#set_e (read_talkException iprot)
            else
              iprot#skip _t7328)
          | _ -> iprot#skip _t7328);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7327

class findContactByUserid_args =
object (self)
  val mutable _userid : string option = None
  method get_userid = _userid
  method grab_userid = match _userid with None->raise (Field_empty "findContactByUserid_args.userid") | Some _x7335 -> _x7335
  method set_userid _x7335 = _userid <- Some _x7335
  method unset_userid = _userid <- None
  method reset_userid = _userid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByUserid_args";
    (match _userid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByUserid_args (iprot : Protocol.t) =
  let _str7338 = new findContactByUserid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7339,_id7340) = iprot#readFieldBegin in
        if _t7339 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7340 with 
          | 2 -> (if _t7339 = Protocol.T_STRING then
              _str7338#set_userid iprot#readString
            else
              iprot#skip _t7339)
          | _ -> iprot#skip _t7339);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7338

class findContactByUserid_result =
object (self)
  val mutable _success : contact option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findContactByUserid_result.success") | Some _x7341 -> _x7341
  method set_success _x7341 = _success <- Some _x7341
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findContactByUserid_result.e") | Some _x7342 -> _x7342
  method set_e _x7342 = _e <- Some _x7342
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByUserid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByUserid_result (iprot : Protocol.t) =
  let _str7345 = new findContactByUserid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7346,_id7347) = iprot#readFieldBegin in
        if _t7346 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7347 with 
          | 0 -> (if _t7346 = Protocol.T_STRUCT then
              _str7345#set_success (read_contact iprot)
            else
              iprot#skip _t7346)
          | 1 -> (if _t7346 = Protocol.T_STRUCT then
              _str7345#set_e (read_talkException iprot)
            else
              iprot#skip _t7346)
          | _ -> iprot#skip _t7346);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7345

class findContactByUserTicket_args =
object (self)
  val mutable _ticketIdWithTag : string option = None
  method get_ticketIdWithTag = _ticketIdWithTag
  method grab_ticketIdWithTag = match _ticketIdWithTag with None->raise (Field_empty "findContactByUserTicket_args.ticketIdWithTag") | Some _x7348 -> _x7348
  method set_ticketIdWithTag _x7348 = _ticketIdWithTag <- Some _x7348
  method unset_ticketIdWithTag = _ticketIdWithTag <- None
  method reset_ticketIdWithTag = _ticketIdWithTag <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByUserTicket_args";
    (match _ticketIdWithTag with None -> () | Some _v -> 
      oprot#writeFieldBegin("ticketIdWithTag",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByUserTicket_args (iprot : Protocol.t) =
  let _str7351 = new findContactByUserTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7352,_id7353) = iprot#readFieldBegin in
        if _t7352 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7353 with 
          | 2 -> (if _t7352 = Protocol.T_STRING then
              _str7351#set_ticketIdWithTag iprot#readString
            else
              iprot#skip _t7352)
          | _ -> iprot#skip _t7352);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7351

class findContactByUserTicket_result =
object (self)
  val mutable _success : contact option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findContactByUserTicket_result.success") | Some _x7354 -> _x7354
  method set_success _x7354 = _success <- Some _x7354
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findContactByUserTicket_result.e") | Some _x7355 -> _x7355
  method set_e _x7355 = _e <- Some _x7355
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByUserTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByUserTicket_result (iprot : Protocol.t) =
  let _str7358 = new findContactByUserTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7359,_id7360) = iprot#readFieldBegin in
        if _t7359 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7360 with 
          | 0 -> (if _t7359 = Protocol.T_STRUCT then
              _str7358#set_success (read_contact iprot)
            else
              iprot#skip _t7359)
          | 1 -> (if _t7359 = Protocol.T_STRUCT then
              _str7358#set_e (read_talkException iprot)
            else
              iprot#skip _t7359)
          | _ -> iprot#skip _t7359);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7358

class findContactsByEmail_args =
object (self)
  val mutable _emails : (string,bool) Hashtbl.t option = None
  method get_emails = _emails
  method grab_emails = match _emails with None->raise (Field_empty "findContactsByEmail_args.emails") | Some _x7361 -> _x7361
  method set_emails _x7361 = _emails <- Some _x7361
  method unset_emails = _emails <- None
  method reset_emails = _emails <- None

  method copy =
      let _new = Oo.copy self in
      if _emails <> None then
        _new#set_emails (Hashtbl.copy self#grab_emails);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactsByEmail_args";
    (match _emails with None -> () | Some _v -> 
      oprot#writeFieldBegin("emails",Protocol.T_SET,2);
      oprot#writeSetBegin(Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _iter7364 -> fun _ ->         oprot#writeString(_iter7364);
      ) _v;
      oprot#writeSetEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactsByEmail_args (iprot : Protocol.t) =
  let _str7365 = new findContactsByEmail_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7366,_id7367) = iprot#readFieldBegin in
        if _t7366 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7367 with 
          | 2 -> (if _t7366 = Protocol.T_SET then
              _str7365#set_emails 
                (let (_etype7371,_size7368) = iprot#readSetBegin in
                let _con7372 = Hashtbl.create _size7368 in
                  for i = 1 to _size7368 do
                    Hashtbl.add _con7372 iprot#readString true
                  done; iprot#readSetEnd; _con7372)
            else
              iprot#skip _t7366)
          | _ -> iprot#skip _t7366);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7365

class findContactsByEmail_result =
object (self)
  val mutable _success : (string,contact) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findContactsByEmail_result.success") | Some _x7373 -> _x7373
  method set_success _x7373 = _success <- Some _x7373
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findContactsByEmail_result.e") | Some _x7374 -> _x7374
  method set_e _x7374 = _e <- Some _x7374
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k v#copy) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactsByEmail_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter7377 -> fun _viter7378 -> 
        oprot#writeString(_kiter7377);
        _viter7378#write(oprot);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactsByEmail_result (iprot : Protocol.t) =
  let _str7379 = new findContactsByEmail_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7380,_id7381) = iprot#readFieldBegin in
        if _t7380 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7381 with 
          | 0 -> (if _t7380 = Protocol.T_MAP then
              _str7379#set_success 
                (let (_ktype7383,_vtype7384,_size7382) = iprot#readMapBegin in
                let _con7386 = Hashtbl.create _size7382 in
                  for i = 1 to _size7382 do
                    let _k = iprot#readString in
                    let _v = (read_contact iprot) in
                      Hashtbl.add _con7386 _k _v
                  done; iprot#readMapEnd; _con7386)
            else
              iprot#skip _t7380)
          | 1 -> (if _t7380 = Protocol.T_STRUCT then
              _str7379#set_e (read_talkException iprot)
            else
              iprot#skip _t7380)
          | _ -> iprot#skip _t7380);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7379

class findContactsByPhone_args =
object (self)
  val mutable _phones : (string,bool) Hashtbl.t option = None
  method get_phones = _phones
  method grab_phones = match _phones with None->raise (Field_empty "findContactsByPhone_args.phones") | Some _x7387 -> _x7387
  method set_phones _x7387 = _phones <- Some _x7387
  method unset_phones = _phones <- None
  method reset_phones = _phones <- None

  method copy =
      let _new = Oo.copy self in
      if _phones <> None then
        _new#set_phones (Hashtbl.copy self#grab_phones);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactsByPhone_args";
    (match _phones with None -> () | Some _v -> 
      oprot#writeFieldBegin("phones",Protocol.T_SET,2);
      oprot#writeSetBegin(Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _iter7390 -> fun _ ->         oprot#writeString(_iter7390);
      ) _v;
      oprot#writeSetEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactsByPhone_args (iprot : Protocol.t) =
  let _str7391 = new findContactsByPhone_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7392,_id7393) = iprot#readFieldBegin in
        if _t7392 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7393 with 
          | 2 -> (if _t7392 = Protocol.T_SET then
              _str7391#set_phones 
                (let (_etype7397,_size7394) = iprot#readSetBegin in
                let _con7398 = Hashtbl.create _size7394 in
                  for i = 1 to _size7394 do
                    Hashtbl.add _con7398 iprot#readString true
                  done; iprot#readSetEnd; _con7398)
            else
              iprot#skip _t7392)
          | _ -> iprot#skip _t7392);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7391

class findContactsByPhone_result =
object (self)
  val mutable _success : (string,contact) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findContactsByPhone_result.success") | Some _x7399 -> _x7399
  method set_success _x7399 = _success <- Some _x7399
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findContactsByPhone_result.e") | Some _x7400 -> _x7400
  method set_e _x7400 = _e <- Some _x7400
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k v#copy) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactsByPhone_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter7403 -> fun _viter7404 -> 
        oprot#writeString(_kiter7403);
        _viter7404#write(oprot);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactsByPhone_result (iprot : Protocol.t) =
  let _str7405 = new findContactsByPhone_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7406,_id7407) = iprot#readFieldBegin in
        if _t7406 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7407 with 
          | 0 -> (if _t7406 = Protocol.T_MAP then
              _str7405#set_success 
                (let (_ktype7409,_vtype7410,_size7408) = iprot#readMapBegin in
                let _con7412 = Hashtbl.create _size7408 in
                  for i = 1 to _size7408 do
                    let _k = iprot#readString in
                    let _v = (read_contact iprot) in
                      Hashtbl.add _con7412 _k _v
                  done; iprot#readMapEnd; _con7412)
            else
              iprot#skip _t7406)
          | 1 -> (if _t7406 = Protocol.T_STRUCT then
              _str7405#set_e (read_talkException iprot)
            else
              iprot#skip _t7406)
          | _ -> iprot#skip _t7406);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7405

class findSnsIdUserStatus_args =
object (self)
  val mutable _snsIdType : SnsIdType.t option = None
  method get_snsIdType = _snsIdType
  method grab_snsIdType = match _snsIdType with None->raise (Field_empty "findSnsIdUserStatus_args.snsIdType") | Some _x7413 -> _x7413
  method set_snsIdType _x7413 = _snsIdType <- Some _x7413
  method unset_snsIdType = _snsIdType <- None
  method reset_snsIdType = _snsIdType <- None

  val mutable _snsAccessToken : string option = None
  method get_snsAccessToken = _snsAccessToken
  method grab_snsAccessToken = match _snsAccessToken with None->raise (Field_empty "findSnsIdUserStatus_args.snsAccessToken") | Some _x7414 -> _x7414
  method set_snsAccessToken _x7414 = _snsAccessToken <- Some _x7414
  method unset_snsAccessToken = _snsAccessToken <- None
  method reset_snsAccessToken = _snsAccessToken <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "findSnsIdUserStatus_args.udidHash") | Some _x7415 -> _x7415
  method set_udidHash _x7415 = _udidHash <- Some _x7415
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findSnsIdUserStatus_args";
    (match _snsIdType with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsIdType",Protocol.T_I32,2);
      oprot#writeI32(SnsIdType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _snsAccessToken with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsAccessToken",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findSnsIdUserStatus_args (iprot : Protocol.t) =
  let _str7418 = new findSnsIdUserStatus_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7419,_id7420) = iprot#readFieldBegin in
        if _t7419 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7420 with 
          | 2 -> (if _t7419 = Protocol.T_I32 then
              _str7418#set_snsIdType (SnsIdType.of_i iprot#readI32)
            else
              iprot#skip _t7419)
          | 3 -> (if _t7419 = Protocol.T_STRING then
              _str7418#set_snsAccessToken iprot#readString
            else
              iprot#skip _t7419)
          | 4 -> (if _t7419 = Protocol.T_STRING then
              _str7418#set_udidHash iprot#readString
            else
              iprot#skip _t7419)
          | _ -> iprot#skip _t7419);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7418

class findSnsIdUserStatus_result =
object (self)
  val mutable _success : snsIdUserStatus option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findSnsIdUserStatus_result.success") | Some _x7421 -> _x7421
  method set_success _x7421 = _success <- Some _x7421
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findSnsIdUserStatus_result.e") | Some _x7422 -> _x7422
  method set_e _x7422 = _e <- Some _x7422
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findSnsIdUserStatus_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findSnsIdUserStatus_result (iprot : Protocol.t) =
  let _str7425 = new findSnsIdUserStatus_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7426,_id7427) = iprot#readFieldBegin in
        if _t7426 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7427 with 
          | 0 -> (if _t7426 = Protocol.T_STRUCT then
              _str7425#set_success (read_snsIdUserStatus iprot)
            else
              iprot#skip _t7426)
          | 1 -> (if _t7426 = Protocol.T_STRUCT then
              _str7425#set_e (read_talkException iprot)
            else
              iprot#skip _t7426)
          | _ -> iprot#skip _t7426);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7425

class finishUpdateVerification_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "finishUpdateVerification_args.sessionId") | Some _x7428 -> _x7428
  method set_sessionId _x7428 = _sessionId <- Some _x7428
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "finishUpdateVerification_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_finishUpdateVerification_args (iprot : Protocol.t) =
  let _str7431 = new finishUpdateVerification_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7432,_id7433) = iprot#readFieldBegin in
        if _t7432 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7433 with 
          | 2 -> (if _t7432 = Protocol.T_STRING then
              _str7431#set_sessionId iprot#readString
            else
              iprot#skip _t7432)
          | _ -> iprot#skip _t7432);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7431

class finishUpdateVerification_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "finishUpdateVerification_result.e") | Some _x7434 -> _x7434
  method set_e _x7434 = _e <- Some _x7434
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "finishUpdateVerification_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_finishUpdateVerification_result (iprot : Protocol.t) =
  let _str7437 = new finishUpdateVerification_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7438,_id7439) = iprot#readFieldBegin in
        if _t7438 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7439 with 
          | 1 -> (if _t7438 = Protocol.T_STRUCT then
              _str7437#set_e (read_talkException iprot)
            else
              iprot#skip _t7438)
          | _ -> iprot#skip _t7438);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7437

class generateUserTicket_args =
object (self)
  val mutable _expirationTime : Int64.t option = None
  method get_expirationTime = _expirationTime
  method grab_expirationTime = match _expirationTime with None->raise (Field_empty "generateUserTicket_args.expirationTime") | Some _x7440 -> _x7440
  method set_expirationTime _x7440 = _expirationTime <- Some _x7440
  method unset_expirationTime = _expirationTime <- None
  method reset_expirationTime = _expirationTime <- None

  val mutable _maxUseCount : Int32.t option = None
  method get_maxUseCount = _maxUseCount
  method grab_maxUseCount = match _maxUseCount with None->raise (Field_empty "generateUserTicket_args.maxUseCount") | Some _x7441 -> _x7441
  method set_maxUseCount _x7441 = _maxUseCount <- Some _x7441
  method unset_maxUseCount = _maxUseCount <- None
  method reset_maxUseCount = _maxUseCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "generateUserTicket_args";
    (match _expirationTime with None -> () | Some _v -> 
      oprot#writeFieldBegin("expirationTime",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _maxUseCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("maxUseCount",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_generateUserTicket_args (iprot : Protocol.t) =
  let _str7444 = new generateUserTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7445,_id7446) = iprot#readFieldBegin in
        if _t7445 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7446 with 
          | 3 -> (if _t7445 = Protocol.T_I64 then
              _str7444#set_expirationTime iprot#readI64
            else
              iprot#skip _t7445)
          | 4 -> (if _t7445 = Protocol.T_I32 then
              _str7444#set_maxUseCount iprot#readI32
            else
              iprot#skip _t7445)
          | _ -> iprot#skip _t7445);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7444

class generateUserTicket_result =
object (self)
  val mutable _success : ticket option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "generateUserTicket_result.success") | Some _x7447 -> _x7447
  method set_success _x7447 = _success <- Some _x7447
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "generateUserTicket_result.e") | Some _x7448 -> _x7448
  method set_e _x7448 = _e <- Some _x7448
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "generateUserTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_generateUserTicket_result (iprot : Protocol.t) =
  let _str7451 = new generateUserTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7452,_id7453) = iprot#readFieldBegin in
        if _t7452 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7453 with 
          | 0 -> (if _t7452 = Protocol.T_STRUCT then
              _str7451#set_success (read_ticket iprot)
            else
              iprot#skip _t7452)
          | 1 -> (if _t7452 = Protocol.T_STRUCT then
              _str7451#set_e (read_talkException iprot)
            else
              iprot#skip _t7452)
          | _ -> iprot#skip _t7452);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7451

class destroyMessage_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "destroyMessage_args.seq") | Some _x7454 -> _x7454
  method set_seq _x7454 = _seq <- Some _x7454
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _chatId : string option = None
  method get_chatId = _chatId
  method grab_chatId = match _chatId with None->raise (Field_empty "destroyMessage_args.chatId") | Some _x7455 -> _x7455
  method set_chatId _x7455 = _chatId <- Some _x7455
  method unset_chatId = _chatId <- None
  method reset_chatId = _chatId <- None

  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "destroyMessage_args.messageId") | Some _x7456 -> _x7456
  method set_messageId _x7456 = _messageId <- Some _x7456
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  val mutable _sessionId : int option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "destroyMessage_args.sessionId") | Some _x7457 -> _x7457
  method set_sessionId _x7457 = _sessionId <- Some _x7457
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "destroyMessage_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _chatId with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_BYTE,4);
      oprot#writeByte(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_destroyMessage_args (iprot : Protocol.t) =
  let _str7460 = new destroyMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7461,_id7462) = iprot#readFieldBegin in
        if _t7461 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7462 with 
          | 1 -> (if _t7461 = Protocol.T_I32 then
              _str7460#set_seq iprot#readI32
            else
              iprot#skip _t7461)
          | 2 -> (if _t7461 = Protocol.T_STRING then
              _str7460#set_chatId iprot#readString
            else
              iprot#skip _t7461)
          | 3 -> (if _t7461 = Protocol.T_STRING then
              _str7460#set_messageId iprot#readString
            else
              iprot#skip _t7461)
          | 4 -> (if _t7461 = Protocol.T_BYTE then
              _str7460#set_sessionId iprot#readByte
            else
              iprot#skip _t7461)
          | _ -> iprot#skip _t7461);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7460

class destroyMessage_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "destroyMessage_result.e") | Some _x7463 -> _x7463
  method set_e _x7463 = _e <- Some _x7463
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "destroyMessage_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_destroyMessage_result (iprot : Protocol.t) =
  let _str7466 = new destroyMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7467,_id7468) = iprot#readFieldBegin in
        if _t7467 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7468 with 
          | 1 -> (if _t7467 = Protocol.T_STRUCT then
              _str7466#set_e (read_talkException iprot)
            else
              iprot#skip _t7467)
          | _ -> iprot#skip _t7467);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7466

class getAcceptedProximityMatches_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "getAcceptedProximityMatches_args.sessionId") | Some _x7469 -> _x7469
  method set_sessionId _x7469 = _sessionId <- Some _x7469
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAcceptedProximityMatches_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAcceptedProximityMatches_args (iprot : Protocol.t) =
  let _str7472 = new getAcceptedProximityMatches_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7473,_id7474) = iprot#readFieldBegin in
        if _t7473 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7474 with 
          | 2 -> (if _t7473 = Protocol.T_STRING then
              _str7472#set_sessionId iprot#readString
            else
              iprot#skip _t7473)
          | _ -> iprot#skip _t7473);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7472

class getAcceptedProximityMatches_result =
object (self)
  val mutable _success : (string,bool) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getAcceptedProximityMatches_result.success") | Some _x7475 -> _x7475
  method set_success _x7475 = _success <- Some _x7475
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getAcceptedProximityMatches_result.e") | Some _x7476 -> _x7476
  method set_e _x7476 = _e <- Some _x7476
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAcceptedProximityMatches_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_SET,0);
      oprot#writeSetBegin(Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _iter7479 -> fun _ ->         oprot#writeString(_iter7479);
      ) _v;
      oprot#writeSetEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAcceptedProximityMatches_result (iprot : Protocol.t) =
  let _str7480 = new getAcceptedProximityMatches_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7481,_id7482) = iprot#readFieldBegin in
        if _t7481 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7482 with 
          | 0 -> (if _t7481 = Protocol.T_SET then
              _str7480#set_success 
                (let (_etype7486,_size7483) = iprot#readSetBegin in
                let _con7487 = Hashtbl.create _size7483 in
                  for i = 1 to _size7483 do
                    Hashtbl.add _con7487 iprot#readString true
                  done; iprot#readSetEnd; _con7487)
            else
              iprot#skip _t7481)
          | 1 -> (if _t7481 = Protocol.T_STRUCT then
              _str7480#set_e (read_talkException iprot)
            else
              iprot#skip _t7481)
          | _ -> iprot#skip _t7481);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7480

class getActiveBuddySubscriberIds_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActiveBuddySubscriberIds_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActiveBuddySubscriberIds_args (iprot : Protocol.t) =
  let _str7490 = new getActiveBuddySubscriberIds_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7491,_id7492) = iprot#readFieldBegin in
        if _t7491 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7492 with 
          | _ -> iprot#skip _t7491);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7490

class getActiveBuddySubscriberIds_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getActiveBuddySubscriberIds_result.success") | Some _x7493 -> _x7493
  method set_success _x7493 = _success <- Some _x7493
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getActiveBuddySubscriberIds_result.e") | Some _x7494 -> _x7494
  method set_e _x7494 = _e <- Some _x7494
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActiveBuddySubscriberIds_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7497 ->         oprot#writeString(_iter7497);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActiveBuddySubscriberIds_result (iprot : Protocol.t) =
  let _str7498 = new getActiveBuddySubscriberIds_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7499,_id7500) = iprot#readFieldBegin in
        if _t7499 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7500 with 
          | 0 -> (if _t7499 = Protocol.T_LIST then
              _str7498#set_success 
                (let (_etype7504,_size7501) = iprot#readListBegin in
                  let _con7505 = (Array.to_list (Array.init _size7501 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7505)
            else
              iprot#skip _t7499)
          | 1 -> (if _t7499 = Protocol.T_STRUCT then
              _str7498#set_e (read_talkException iprot)
            else
              iprot#skip _t7499)
          | _ -> iprot#skip _t7499);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7498

class getAllContactIds_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllContactIds_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllContactIds_args (iprot : Protocol.t) =
  let _str7508 = new getAllContactIds_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7509,_id7510) = iprot#readFieldBegin in
        if _t7509 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7510 with 
          | _ -> iprot#skip _t7509);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7508

class getAllContactIds_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getAllContactIds_result.success") | Some _x7511 -> _x7511
  method set_success _x7511 = _success <- Some _x7511
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getAllContactIds_result.e") | Some _x7512 -> _x7512
  method set_e _x7512 = _e <- Some _x7512
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllContactIds_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7515 ->         oprot#writeString(_iter7515);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllContactIds_result (iprot : Protocol.t) =
  let _str7516 = new getAllContactIds_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7517,_id7518) = iprot#readFieldBegin in
        if _t7517 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7518 with 
          | 0 -> (if _t7517 = Protocol.T_LIST then
              _str7516#set_success 
                (let (_etype7522,_size7519) = iprot#readListBegin in
                  let _con7523 = (Array.to_list (Array.init _size7519 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7523)
            else
              iprot#skip _t7517)
          | 1 -> (if _t7517 = Protocol.T_STRUCT then
              _str7516#set_e (read_talkException iprot)
            else
              iprot#skip _t7517)
          | _ -> iprot#skip _t7517);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7516

class getAuthQrcode_args =
object (self)
  val mutable _keepLoggedIn : bool option = None
  method get_keepLoggedIn = _keepLoggedIn
  method grab_keepLoggedIn = match _keepLoggedIn with None->raise (Field_empty "getAuthQrcode_args.keepLoggedIn") | Some _x7524 -> _x7524
  method set_keepLoggedIn _x7524 = _keepLoggedIn <- Some _x7524
  method unset_keepLoggedIn = _keepLoggedIn <- None
  method reset_keepLoggedIn = _keepLoggedIn <- None

  val mutable _systemName : string option = None
  method get_systemName = _systemName
  method grab_systemName = match _systemName with None->raise (Field_empty "getAuthQrcode_args.systemName") | Some _x7525 -> _x7525
  method set_systemName _x7525 = _systemName <- Some _x7525
  method unset_systemName = _systemName <- None
  method reset_systemName = _systemName <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAuthQrcode_args";
    (match _keepLoggedIn with None -> () | Some _v -> 
      oprot#writeFieldBegin("keepLoggedIn",Protocol.T_BOOL,2);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _systemName with None -> () | Some _v -> 
      oprot#writeFieldBegin("systemName",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAuthQrcode_args (iprot : Protocol.t) =
  let _str7528 = new getAuthQrcode_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7529,_id7530) = iprot#readFieldBegin in
        if _t7529 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7530 with 
          | 2 -> (if _t7529 = Protocol.T_BOOL then
              _str7528#set_keepLoggedIn iprot#readBool
            else
              iprot#skip _t7529)
          | 3 -> (if _t7529 = Protocol.T_STRING then
              _str7528#set_systemName iprot#readString
            else
              iprot#skip _t7529)
          | _ -> iprot#skip _t7529);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7528

class getAuthQrcode_result =
object (self)
  val mutable _success : authQrcode option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getAuthQrcode_result.success") | Some _x7531 -> _x7531
  method set_success _x7531 = _success <- Some _x7531
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getAuthQrcode_result.e") | Some _x7532 -> _x7532
  method set_e _x7532 = _e <- Some _x7532
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAuthQrcode_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAuthQrcode_result (iprot : Protocol.t) =
  let _str7535 = new getAuthQrcode_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7536,_id7537) = iprot#readFieldBegin in
        if _t7536 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7537 with 
          | 0 -> (if _t7536 = Protocol.T_STRUCT then
              _str7535#set_success (read_authQrcode iprot)
            else
              iprot#skip _t7536)
          | 1 -> (if _t7536 = Protocol.T_STRUCT then
              _str7535#set_e (read_talkException iprot)
            else
              iprot#skip _t7536)
          | _ -> iprot#skip _t7536);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7535

class getBlockedContactIds_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockedContactIds_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockedContactIds_args (iprot : Protocol.t) =
  let _str7540 = new getBlockedContactIds_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7541,_id7542) = iprot#readFieldBegin in
        if _t7541 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7542 with 
          | _ -> iprot#skip _t7541);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7540

class getBlockedContactIds_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBlockedContactIds_result.success") | Some _x7543 -> _x7543
  method set_success _x7543 = _success <- Some _x7543
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBlockedContactIds_result.e") | Some _x7544 -> _x7544
  method set_e _x7544 = _e <- Some _x7544
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockedContactIds_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7547 ->         oprot#writeString(_iter7547);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockedContactIds_result (iprot : Protocol.t) =
  let _str7548 = new getBlockedContactIds_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7549,_id7550) = iprot#readFieldBegin in
        if _t7549 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7550 with 
          | 0 -> (if _t7549 = Protocol.T_LIST then
              _str7548#set_success 
                (let (_etype7554,_size7551) = iprot#readListBegin in
                  let _con7555 = (Array.to_list (Array.init _size7551 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7555)
            else
              iprot#skip _t7549)
          | 1 -> (if _t7549 = Protocol.T_STRUCT then
              _str7548#set_e (read_talkException iprot)
            else
              iprot#skip _t7549)
          | _ -> iprot#skip _t7549);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7548

class registerWithPhoneNumber_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "registerWithPhoneNumber_args.sessionId") | Some _x7556 -> _x7556
  method set_sessionId _x7556 = _sessionId <- Some _x7556
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  val mutable _migrationPincodeSessionId : string option = None
  method get_migrationPincodeSessionId = _migrationPincodeSessionId
  method grab_migrationPincodeSessionId = match _migrationPincodeSessionId with None->raise (Field_empty "registerWithPhoneNumber_args.migrationPincodeSessionId") | Some _x7557 -> _x7557
  method set_migrationPincodeSessionId _x7557 = _migrationPincodeSessionId <- Some _x7557
  method unset_migrationPincodeSessionId = _migrationPincodeSessionId <- None
  method reset_migrationPincodeSessionId = _migrationPincodeSessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithPhoneNumber_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _migrationPincodeSessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("migrationPincodeSessionId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithPhoneNumber_args (iprot : Protocol.t) =
  let _str7560 = new registerWithPhoneNumber_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7561,_id7562) = iprot#readFieldBegin in
        if _t7561 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7562 with 
          | 2 -> (if _t7561 = Protocol.T_STRING then
              _str7560#set_sessionId iprot#readString
            else
              iprot#skip _t7561)
          | 3 -> (if _t7561 = Protocol.T_STRING then
              _str7560#set_migrationPincodeSessionId iprot#readString
            else
              iprot#skip _t7561)
          | _ -> iprot#skip _t7561);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7560

class registerWithPhoneNumber_result =
object (self)
  val mutable _success : registerWithPhoneNumberResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerWithPhoneNumber_result.success") | Some _x7563 -> _x7563
  method set_success _x7563 = _success <- Some _x7563
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerWithPhoneNumber_result.e") | Some _x7564 -> _x7564
  method set_e _x7564 = _e <- Some _x7564
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithPhoneNumber_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithPhoneNumber_result (iprot : Protocol.t) =
  let _str7567 = new registerWithPhoneNumber_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7568,_id7569) = iprot#readFieldBegin in
        if _t7568 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7569 with 
          | 0 -> (if _t7568 = Protocol.T_STRUCT then
              _str7567#set_success (read_registerWithPhoneNumberResult iprot)
            else
              iprot#skip _t7568)
          | 1 -> (if _t7568 = Protocol.T_STRUCT then
              _str7567#set_e (read_talkException iprot)
            else
              iprot#skip _t7568)
          | _ -> iprot#skip _t7568);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7567

class registerWithPhoneNumberAndPassword_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "registerWithPhoneNumberAndPassword_args.sessionId") | Some _x7570 -> _x7570
  method set_sessionId _x7570 = _sessionId <- Some _x7570
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  val mutable _keynm : string option = None
  method get_keynm = _keynm
  method grab_keynm = match _keynm with None->raise (Field_empty "registerWithPhoneNumberAndPassword_args.keynm") | Some _x7571 -> _x7571
  method set_keynm _x7571 = _keynm <- Some _x7571
  method unset_keynm = _keynm <- None
  method reset_keynm = _keynm <- None

  val mutable _encrypted : string option = None
  method get_encrypted = _encrypted
  method grab_encrypted = match _encrypted with None->raise (Field_empty "registerWithPhoneNumberAndPassword_args.encrypted") | Some _x7572 -> _x7572
  method set_encrypted _x7572 = _encrypted <- Some _x7572
  method unset_encrypted = _encrypted <- None
  method reset_encrypted = _encrypted <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithPhoneNumberAndPassword_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _keynm with None -> () | Some _v -> 
      oprot#writeFieldBegin("keynm",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _encrypted with None -> () | Some _v -> 
      oprot#writeFieldBegin("encrypted",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithPhoneNumberAndPassword_args (iprot : Protocol.t) =
  let _str7575 = new registerWithPhoneNumberAndPassword_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7576,_id7577) = iprot#readFieldBegin in
        if _t7576 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7577 with 
          | 2 -> (if _t7576 = Protocol.T_STRING then
              _str7575#set_sessionId iprot#readString
            else
              iprot#skip _t7576)
          | 3 -> (if _t7576 = Protocol.T_STRING then
              _str7575#set_keynm iprot#readString
            else
              iprot#skip _t7576)
          | 4 -> (if _t7576 = Protocol.T_STRING then
              _str7575#set_encrypted iprot#readString
            else
              iprot#skip _t7576)
          | _ -> iprot#skip _t7576);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7575

class registerWithPhoneNumberAndPassword_result =
object (self)
  val mutable _success : registerWithPhoneNumberResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerWithPhoneNumberAndPassword_result.success") | Some _x7578 -> _x7578
  method set_success _x7578 = _success <- Some _x7578
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerWithPhoneNumberAndPassword_result.e") | Some _x7579 -> _x7579
  method set_e _x7579 = _e <- Some _x7579
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithPhoneNumberAndPassword_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithPhoneNumberAndPassword_result (iprot : Protocol.t) =
  let _str7582 = new registerWithPhoneNumberAndPassword_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7583,_id7584) = iprot#readFieldBegin in
        if _t7583 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7584 with 
          | 0 -> (if _t7583 = Protocol.T_STRUCT then
              _str7582#set_success (read_registerWithPhoneNumberResult iprot)
            else
              iprot#skip _t7583)
          | 1 -> (if _t7583 = Protocol.T_STRUCT then
              _str7582#set_e (read_talkException iprot)
            else
              iprot#skip _t7583)
          | _ -> iprot#skip _t7583);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7582

class getAnalyticsInfo_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAnalyticsInfo_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAnalyticsInfo_args (iprot : Protocol.t) =
  let _str7587 = new getAnalyticsInfo_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7588,_id7589) = iprot#readFieldBegin in
        if _t7588 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7589 with 
          | _ -> iprot#skip _t7588);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7587

class getAnalyticsInfo_result =
object (self)
  val mutable _success : analyticsInfo option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getAnalyticsInfo_result.success") | Some _x7590 -> _x7590
  method set_success _x7590 = _success <- Some _x7590
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getAnalyticsInfo_result.e") | Some _x7591 -> _x7591
  method set_e _x7591 = _e <- Some _x7591
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAnalyticsInfo_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAnalyticsInfo_result (iprot : Protocol.t) =
  let _str7594 = new getAnalyticsInfo_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7595,_id7596) = iprot#readFieldBegin in
        if _t7595 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7596 with 
          | 0 -> (if _t7595 = Protocol.T_STRUCT then
              _str7594#set_success (read_analyticsInfo iprot)
            else
              iprot#skip _t7595)
          | 1 -> (if _t7595 = Protocol.T_STRUCT then
              _str7594#set_e (read_talkException iprot)
            else
              iprot#skip _t7595)
          | _ -> iprot#skip _t7595);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7594

class reportClientStatistics_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "reportClientStatistics_args.reqSeq") | Some _x7597 -> _x7597
  method set_reqSeq _x7597 = _reqSeq <- Some _x7597
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _category : ReportCategory.t option = None
  method get_category = _category
  method grab_category = match _category with None->raise (Field_empty "reportClientStatistics_args.category") | Some _x7598 -> _x7598
  method set_category _x7598 = _category <- Some _x7598
  method unset_category = _category <- None
  method reset_category = _category <- None

  val mutable _count : Int32.t option = None
  method get_count = _count
  method grab_count = match _count with None->raise (Field_empty "reportClientStatistics_args.count") | Some _x7599 -> _x7599
  method set_count _x7599 = _count <- Some _x7599
  method unset_count = _count <- None
  method reset_count = _count <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportClientStatistics_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _category with None -> () | Some _v -> 
      oprot#writeFieldBegin("category",Protocol.T_I32,2);
      oprot#writeI32(ReportCategory.to_i _v);
      oprot#writeFieldEnd
    );
    (match _count with None -> () | Some _v -> 
      oprot#writeFieldBegin("count",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportClientStatistics_args (iprot : Protocol.t) =
  let _str7602 = new reportClientStatistics_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7603,_id7604) = iprot#readFieldBegin in
        if _t7603 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7604 with 
          | 1 -> (if _t7603 = Protocol.T_I32 then
              _str7602#set_reqSeq iprot#readI32
            else
              iprot#skip _t7603)
          | 2 -> (if _t7603 = Protocol.T_I32 then
              _str7602#set_category (ReportCategory.of_i iprot#readI32)
            else
              iprot#skip _t7603)
          | 3 -> (if _t7603 = Protocol.T_I32 then
              _str7602#set_count iprot#readI32
            else
              iprot#skip _t7603)
          | _ -> iprot#skip _t7603);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7602

class reportClientStatistics_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportClientStatistics_result.e") | Some _x7605 -> _x7605
  method set_e _x7605 = _e <- Some _x7605
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportClientStatistics_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportClientStatistics_result (iprot : Protocol.t) =
  let _str7608 = new reportClientStatistics_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7609,_id7610) = iprot#readFieldBegin in
        if _t7609 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7610 with 
          | 1 -> (if _t7609 = Protocol.T_STRUCT then
              _str7608#set_e (read_talkException iprot)
            else
              iprot#skip _t7609)
          | _ -> iprot#skip _t7609);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7608

class verifyPhoneNumberForLogin_args =
object (self)
  val mutable _verifierFromPhone : string option = None
  method get_verifierFromPhone = _verifierFromPhone
  method grab_verifierFromPhone = match _verifierFromPhone with None->raise (Field_empty "verifyPhoneNumberForLogin_args.verifierFromPhone") | Some _x7611 -> _x7611
  method set_verifierFromPhone _x7611 = _verifierFromPhone <- Some _x7611
  method unset_verifierFromPhone = _verifierFromPhone <- None
  method reset_verifierFromPhone = _verifierFromPhone <- None

  val mutable _pinCodeForPhone : string option = None
  method get_pinCodeForPhone = _pinCodeForPhone
  method grab_pinCodeForPhone = match _pinCodeForPhone with None->raise (Field_empty "verifyPhoneNumberForLogin_args.pinCodeForPhone") | Some _x7612 -> _x7612
  method set_pinCodeForPhone _x7612 = _pinCodeForPhone <- Some _x7612
  method unset_pinCodeForPhone = _pinCodeForPhone <- None
  method reset_pinCodeForPhone = _pinCodeForPhone <- None

  val mutable _verifierFromLogin : string option = None
  method get_verifierFromLogin = _verifierFromLogin
  method grab_verifierFromLogin = match _verifierFromLogin with None->raise (Field_empty "verifyPhoneNumberForLogin_args.verifierFromLogin") | Some _x7613 -> _x7613
  method set_verifierFromLogin _x7613 = _verifierFromLogin <- Some _x7613
  method unset_verifierFromLogin = _verifierFromLogin <- None
  method reset_verifierFromLogin = _verifierFromLogin <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyPhoneNumberForLogin_args";
    (match _verifierFromPhone with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifierFromPhone",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _pinCodeForPhone with None -> () | Some _v -> 
      oprot#writeFieldBegin("pinCodeForPhone",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _verifierFromLogin with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifierFromLogin",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyPhoneNumberForLogin_args (iprot : Protocol.t) =
  let _str7616 = new verifyPhoneNumberForLogin_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7617,_id7618) = iprot#readFieldBegin in
        if _t7617 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7618 with 
          | 2 -> (if _t7617 = Protocol.T_STRING then
              _str7616#set_verifierFromPhone iprot#readString
            else
              iprot#skip _t7617)
          | 3 -> (if _t7617 = Protocol.T_STRING then
              _str7616#set_pinCodeForPhone iprot#readString
            else
              iprot#skip _t7617)
          | 4 -> (if _t7617 = Protocol.T_STRING then
              _str7616#set_verifierFromLogin iprot#readString
            else
              iprot#skip _t7617)
          | _ -> iprot#skip _t7617);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7616

class verifyPhoneNumberForLogin_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "verifyPhoneNumberForLogin_result.success") | Some _x7619 -> _x7619
  method set_success _x7619 = _success <- Some _x7619
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "verifyPhoneNumberForLogin_result.e") | Some _x7620 -> _x7620
  method set_e _x7620 = _e <- Some _x7620
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyPhoneNumberForLogin_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyPhoneNumberForLogin_result (iprot : Protocol.t) =
  let _str7623 = new verifyPhoneNumberForLogin_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7624,_id7625) = iprot#readFieldBegin in
        if _t7624 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7625 with 
          | 0 -> (if _t7624 = Protocol.T_STRING then
              _str7623#set_success iprot#readString
            else
              iprot#skip _t7624)
          | 1 -> (if _t7624 = Protocol.T_STRUCT then
              _str7623#set_e (read_talkException iprot)
            else
              iprot#skip _t7624)
          | _ -> iprot#skip _t7624);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7623

class verifyPhoneNumber_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "verifyPhoneNumber_args.sessionId") | Some _x7626 -> _x7626
  method set_sessionId _x7626 = _sessionId <- Some _x7626
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  val mutable _pinCode : string option = None
  method get_pinCode = _pinCode
  method grab_pinCode = match _pinCode with None->raise (Field_empty "verifyPhoneNumber_args.pinCode") | Some _x7627 -> _x7627
  method set_pinCode _x7627 = _pinCode <- Some _x7627
  method unset_pinCode = _pinCode <- None
  method reset_pinCode = _pinCode <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "verifyPhoneNumber_args.udidHash") | Some _x7628 -> _x7628
  method set_udidHash _x7628 = _udidHash <- Some _x7628
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _migrationPincodeSessionId : string option = None
  method get_migrationPincodeSessionId = _migrationPincodeSessionId
  method grab_migrationPincodeSessionId = match _migrationPincodeSessionId with None->raise (Field_empty "verifyPhoneNumber_args.migrationPincodeSessionId") | Some _x7629 -> _x7629
  method set_migrationPincodeSessionId _x7629 = _migrationPincodeSessionId <- Some _x7629
  method unset_migrationPincodeSessionId = _migrationPincodeSessionId <- None
  method reset_migrationPincodeSessionId = _migrationPincodeSessionId <- None

  val mutable _oldUdidHash : string option = None
  method get_oldUdidHash = _oldUdidHash
  method grab_oldUdidHash = match _oldUdidHash with None->raise (Field_empty "verifyPhoneNumber_args.oldUdidHash") | Some _x7630 -> _x7630
  method set_oldUdidHash _x7630 = _oldUdidHash <- Some _x7630
  method unset_oldUdidHash = _oldUdidHash <- None
  method reset_oldUdidHash = _oldUdidHash <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyPhoneNumber_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _pinCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("pinCode",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _migrationPincodeSessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("migrationPincodeSessionId",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _oldUdidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("oldUdidHash",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyPhoneNumber_args (iprot : Protocol.t) =
  let _str7633 = new verifyPhoneNumber_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7634,_id7635) = iprot#readFieldBegin in
        if _t7634 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7635 with 
          | 2 -> (if _t7634 = Protocol.T_STRING then
              _str7633#set_sessionId iprot#readString
            else
              iprot#skip _t7634)
          | 3 -> (if _t7634 = Protocol.T_STRING then
              _str7633#set_pinCode iprot#readString
            else
              iprot#skip _t7634)
          | 4 -> (if _t7634 = Protocol.T_STRING then
              _str7633#set_udidHash iprot#readString
            else
              iprot#skip _t7634)
          | 5 -> (if _t7634 = Protocol.T_STRING then
              _str7633#set_migrationPincodeSessionId iprot#readString
            else
              iprot#skip _t7634)
          | 6 -> (if _t7634 = Protocol.T_STRING then
              _str7633#set_oldUdidHash iprot#readString
            else
              iprot#skip _t7634)
          | _ -> iprot#skip _t7634);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7633

class verifyPhoneNumber_result =
object (self)
  val mutable _success : phoneVerificationResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "verifyPhoneNumber_result.success") | Some _x7636 -> _x7636
  method set_success _x7636 = _success <- Some _x7636
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "verifyPhoneNumber_result.e") | Some _x7637 -> _x7637
  method set_e _x7637 = _e <- Some _x7637
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyPhoneNumber_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyPhoneNumber_result (iprot : Protocol.t) =
  let _str7640 = new verifyPhoneNumber_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7641,_id7642) = iprot#readFieldBegin in
        if _t7641 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7642 with 
          | 0 -> (if _t7641 = Protocol.T_STRUCT then
              _str7640#set_success (read_phoneVerificationResult iprot)
            else
              iprot#skip _t7641)
          | 1 -> (if _t7641 = Protocol.T_STRUCT then
              _str7640#set_e (read_talkException iprot)
            else
              iprot#skip _t7641)
          | _ -> iprot#skip _t7641);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7640

class getBlockedContactIdsByRange_args =
object (self)
  val mutable _start : Int32.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getBlockedContactIdsByRange_args.start") | Some _x7643 -> _x7643
  method set_start _x7643 = _start <- Some _x7643
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _count : Int32.t option = None
  method get_count = _count
  method grab_count = match _count with None->raise (Field_empty "getBlockedContactIdsByRange_args.count") | Some _x7644 -> _x7644
  method set_count _x7644 = _count <- Some _x7644
  method unset_count = _count <- None
  method reset_count = _count <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockedContactIdsByRange_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I32,2);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _count with None -> () | Some _v -> 
      oprot#writeFieldBegin("count",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockedContactIdsByRange_args (iprot : Protocol.t) =
  let _str7647 = new getBlockedContactIdsByRange_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7648,_id7649) = iprot#readFieldBegin in
        if _t7648 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7649 with 
          | 2 -> (if _t7648 = Protocol.T_I32 then
              _str7647#set_start iprot#readI32
            else
              iprot#skip _t7648)
          | 3 -> (if _t7648 = Protocol.T_I32 then
              _str7647#set_count iprot#readI32
            else
              iprot#skip _t7648)
          | _ -> iprot#skip _t7648);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7647

class getBlockedContactIdsByRange_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBlockedContactIdsByRange_result.success") | Some _x7650 -> _x7650
  method set_success _x7650 = _success <- Some _x7650
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBlockedContactIdsByRange_result.e") | Some _x7651 -> _x7651
  method set_e _x7651 = _e <- Some _x7651
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockedContactIdsByRange_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7654 ->         oprot#writeString(_iter7654);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockedContactIdsByRange_result (iprot : Protocol.t) =
  let _str7655 = new getBlockedContactIdsByRange_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7656,_id7657) = iprot#readFieldBegin in
        if _t7656 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7657 with 
          | 0 -> (if _t7656 = Protocol.T_LIST then
              _str7655#set_success 
                (let (_etype7661,_size7658) = iprot#readListBegin in
                  let _con7662 = (Array.to_list (Array.init _size7658 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7662)
            else
              iprot#skip _t7656)
          | 1 -> (if _t7656 = Protocol.T_STRUCT then
              _str7655#set_e (read_talkException iprot)
            else
              iprot#skip _t7656)
          | _ -> iprot#skip _t7656);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7655

class getBlockedRecommendationIds_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockedRecommendationIds_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockedRecommendationIds_args (iprot : Protocol.t) =
  let _str7665 = new getBlockedRecommendationIds_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7666,_id7667) = iprot#readFieldBegin in
        if _t7666 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7667 with 
          | _ -> iprot#skip _t7666);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7665

class getBlockedRecommendationIds_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBlockedRecommendationIds_result.success") | Some _x7668 -> _x7668
  method set_success _x7668 = _success <- Some _x7668
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBlockedRecommendationIds_result.e") | Some _x7669 -> _x7669
  method set_e _x7669 = _e <- Some _x7669
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockedRecommendationIds_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7672 ->         oprot#writeString(_iter7672);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockedRecommendationIds_result (iprot : Protocol.t) =
  let _str7673 = new getBlockedRecommendationIds_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7674,_id7675) = iprot#readFieldBegin in
        if _t7674 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7675 with 
          | 0 -> (if _t7674 = Protocol.T_LIST then
              _str7673#set_success 
                (let (_etype7679,_size7676) = iprot#readListBegin in
                  let _con7680 = (Array.to_list (Array.init _size7676 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7680)
            else
              iprot#skip _t7674)
          | 1 -> (if _t7674 = Protocol.T_STRUCT then
              _str7673#set_e (read_talkException iprot)
            else
              iprot#skip _t7674)
          | _ -> iprot#skip _t7674);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7673

class getBuddyBlockerIds_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyBlockerIds_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyBlockerIds_args (iprot : Protocol.t) =
  let _str7683 = new getBuddyBlockerIds_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7684,_id7685) = iprot#readFieldBegin in
        if _t7684 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7685 with 
          | _ -> iprot#skip _t7684);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7683

class getBuddyBlockerIds_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBuddyBlockerIds_result.success") | Some _x7686 -> _x7686
  method set_success _x7686 = _success <- Some _x7686
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBuddyBlockerIds_result.e") | Some _x7687 -> _x7687
  method set_e _x7687 = _e <- Some _x7687
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyBlockerIds_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7690 ->         oprot#writeString(_iter7690);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyBlockerIds_result (iprot : Protocol.t) =
  let _str7691 = new getBuddyBlockerIds_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7692,_id7693) = iprot#readFieldBegin in
        if _t7692 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7693 with 
          | 0 -> (if _t7692 = Protocol.T_LIST then
              _str7691#set_success 
                (let (_etype7697,_size7694) = iprot#readListBegin in
                  let _con7698 = (Array.to_list (Array.init _size7694 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7698)
            else
              iprot#skip _t7692)
          | 1 -> (if _t7692 = Protocol.T_STRUCT then
              _str7691#set_e (read_talkException iprot)
            else
              iprot#skip _t7692)
          | _ -> iprot#skip _t7692);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7691

class getBuddyLocation_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "getBuddyLocation_args.mid") | Some _x7699 -> _x7699
  method set_mid _x7699 = _mid <- Some _x7699
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  val mutable _index : Int32.t option = None
  method get_index = _index
  method grab_index = match _index with None->raise (Field_empty "getBuddyLocation_args.index") | Some _x7700 -> _x7700
  method set_index _x7700 = _index <- Some _x7700
  method unset_index = _index <- None
  method reset_index = _index <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyLocation_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _index with None -> () | Some _v -> 
      oprot#writeFieldBegin("index",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyLocation_args (iprot : Protocol.t) =
  let _str7703 = new getBuddyLocation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7704,_id7705) = iprot#readFieldBegin in
        if _t7704 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7705 with 
          | 2 -> (if _t7704 = Protocol.T_STRING then
              _str7703#set_mid iprot#readString
            else
              iprot#skip _t7704)
          | 3 -> (if _t7704 = Protocol.T_I32 then
              _str7703#set_index iprot#readI32
            else
              iprot#skip _t7704)
          | _ -> iprot#skip _t7704);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7703

class getBuddyLocation_result =
object (self)
  val mutable _success : geolocation option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBuddyLocation_result.success") | Some _x7706 -> _x7706
  method set_success _x7706 = _success <- Some _x7706
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBuddyLocation_result.e") | Some _x7707 -> _x7707
  method set_e _x7707 = _e <- Some _x7707
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyLocation_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyLocation_result (iprot : Protocol.t) =
  let _str7710 = new getBuddyLocation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7711,_id7712) = iprot#readFieldBegin in
        if _t7711 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7712 with 
          | 0 -> (if _t7711 = Protocol.T_STRUCT then
              _str7710#set_success (read_geolocation iprot)
            else
              iprot#skip _t7711)
          | 1 -> (if _t7711 = Protocol.T_STRUCT then
              _str7710#set_e (read_talkException iprot)
            else
              iprot#skip _t7711)
          | _ -> iprot#skip _t7711);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7710

class getCompactContactsModifiedSince_args =
object (self)
  val mutable _timestamp : Int64.t option = None
  method get_timestamp = _timestamp
  method grab_timestamp = match _timestamp with None->raise (Field_empty "getCompactContactsModifiedSince_args.timestamp") | Some _x7713 -> _x7713
  method set_timestamp _x7713 = _timestamp <- Some _x7713
  method unset_timestamp = _timestamp <- None
  method reset_timestamp = _timestamp <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactContactsModifiedSince_args";
    (match _timestamp with None -> () | Some _v -> 
      oprot#writeFieldBegin("timestamp",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactContactsModifiedSince_args (iprot : Protocol.t) =
  let _str7716 = new getCompactContactsModifiedSince_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7717,_id7718) = iprot#readFieldBegin in
        if _t7717 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7718 with 
          | 2 -> (if _t7717 = Protocol.T_I64 then
              _str7716#set_timestamp iprot#readI64
            else
              iprot#skip _t7717)
          | _ -> iprot#skip _t7717);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7716

class getCompactContactsModifiedSince_result =
object (self)
  val mutable _success : compactContact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCompactContactsModifiedSince_result.success") | Some _x7719 -> _x7719
  method set_success _x7719 = _success <- Some _x7719
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCompactContactsModifiedSince_result.e") | Some _x7720 -> _x7720
  method set_e _x7720 = _e <- Some _x7720
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactContactsModifiedSince_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter7723 ->         _iter7723#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactContactsModifiedSince_result (iprot : Protocol.t) =
  let _str7724 = new getCompactContactsModifiedSince_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7725,_id7726) = iprot#readFieldBegin in
        if _t7725 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7726 with 
          | 0 -> (if _t7725 = Protocol.T_LIST then
              _str7724#set_success 
                (let (_etype7730,_size7727) = iprot#readListBegin in
                  let _con7731 = (Array.to_list (Array.init _size7727 (fun _ -> (read_compactContact iprot)))) in
                    iprot#readListEnd; _con7731)
            else
              iprot#skip _t7725)
          | 1 -> (if _t7725 = Protocol.T_STRUCT then
              _str7724#set_e (read_talkException iprot)
            else
              iprot#skip _t7725)
          | _ -> iprot#skip _t7725);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7724

class getCompactGroup_args =
object (self)
  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "getCompactGroup_args.groupId") | Some _x7732 -> _x7732
  method set_groupId _x7732 = _groupId <- Some _x7732
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactGroup_args";
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactGroup_args (iprot : Protocol.t) =
  let _str7735 = new getCompactGroup_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7736,_id7737) = iprot#readFieldBegin in
        if _t7736 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7737 with 
          | 2 -> (if _t7736 = Protocol.T_STRING then
              _str7735#set_groupId iprot#readString
            else
              iprot#skip _t7736)
          | _ -> iprot#skip _t7736);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7735

class getCompactGroup_result =
object (self)
  val mutable _success : group option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCompactGroup_result.success") | Some _x7738 -> _x7738
  method set_success _x7738 = _success <- Some _x7738
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCompactGroup_result.e") | Some _x7739 -> _x7739
  method set_e _x7739 = _e <- Some _x7739
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactGroup_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactGroup_result (iprot : Protocol.t) =
  let _str7742 = new getCompactGroup_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7743,_id7744) = iprot#readFieldBegin in
        if _t7743 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7744 with 
          | 0 -> (if _t7743 = Protocol.T_STRUCT then
              _str7742#set_success (read_group iprot)
            else
              iprot#skip _t7743)
          | 1 -> (if _t7743 = Protocol.T_STRUCT then
              _str7742#set_e (read_talkException iprot)
            else
              iprot#skip _t7743)
          | _ -> iprot#skip _t7743);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7742

class getCompactRoom_args =
object (self)
  val mutable _roomId : string option = None
  method get_roomId = _roomId
  method grab_roomId = match _roomId with None->raise (Field_empty "getCompactRoom_args.roomId") | Some _x7745 -> _x7745
  method set_roomId _x7745 = _roomId <- Some _x7745
  method unset_roomId = _roomId <- None
  method reset_roomId = _roomId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactRoom_args";
    (match _roomId with None -> () | Some _v -> 
      oprot#writeFieldBegin("roomId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactRoom_args (iprot : Protocol.t) =
  let _str7748 = new getCompactRoom_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7749,_id7750) = iprot#readFieldBegin in
        if _t7749 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7750 with 
          | 2 -> (if _t7749 = Protocol.T_STRING then
              _str7748#set_roomId iprot#readString
            else
              iprot#skip _t7749)
          | _ -> iprot#skip _t7749);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7748

class getCompactRoom_result =
object (self)
  val mutable _success : room option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCompactRoom_result.success") | Some _x7751 -> _x7751
  method set_success _x7751 = _success <- Some _x7751
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCompactRoom_result.e") | Some _x7752 -> _x7752
  method set_e _x7752 = _e <- Some _x7752
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactRoom_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactRoom_result (iprot : Protocol.t) =
  let _str7755 = new getCompactRoom_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7756,_id7757) = iprot#readFieldBegin in
        if _t7756 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7757 with 
          | 0 -> (if _t7756 = Protocol.T_STRUCT then
              _str7755#set_success (read_room iprot)
            else
              iprot#skip _t7756)
          | 1 -> (if _t7756 = Protocol.T_STRUCT then
              _str7755#set_e (read_talkException iprot)
            else
              iprot#skip _t7756)
          | _ -> iprot#skip _t7756);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7755

class getContact_args =
object (self)
  val mutable _id : string option = None
  method get_id = _id
  method grab_id = match _id with None->raise (Field_empty "getContact_args.id") | Some _x7758 -> _x7758
  method set_id _x7758 = _id <- Some _x7758
  method unset_id = _id <- None
  method reset_id = _id <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContact_args";
    (match _id with None -> () | Some _v -> 
      oprot#writeFieldBegin("id",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContact_args (iprot : Protocol.t) =
  let _str7761 = new getContact_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7762,_id7763) = iprot#readFieldBegin in
        if _t7762 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7763 with 
          | 2 -> (if _t7762 = Protocol.T_STRING then
              _str7761#set_id iprot#readString
            else
              iprot#skip _t7762)
          | _ -> iprot#skip _t7762);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7761

class getContact_result =
object (self)
  val mutable _success : contact option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getContact_result.success") | Some _x7764 -> _x7764
  method set_success _x7764 = _success <- Some _x7764
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getContact_result.e") | Some _x7765 -> _x7765
  method set_e _x7765 = _e <- Some _x7765
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContact_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContact_result (iprot : Protocol.t) =
  let _str7768 = new getContact_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7769,_id7770) = iprot#readFieldBegin in
        if _t7769 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7770 with 
          | 0 -> (if _t7769 = Protocol.T_STRUCT then
              _str7768#set_success (read_contact iprot)
            else
              iprot#skip _t7769)
          | 1 -> (if _t7769 = Protocol.T_STRUCT then
              _str7768#set_e (read_talkException iprot)
            else
              iprot#skip _t7769)
          | _ -> iprot#skip _t7769);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7768

class getContacts_args =
object (self)
  val mutable _ids : string list option = None
  method get_ids = _ids
  method grab_ids = match _ids with None->raise (Field_empty "getContacts_args.ids") | Some _x7771 -> _x7771
  method set_ids _x7771 = _ids <- Some _x7771
  method unset_ids = _ids <- None
  method reset_ids = _ids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContacts_args";
    (match _ids with None -> () | Some _v -> 
      oprot#writeFieldBegin("ids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7774 ->         oprot#writeString(_iter7774);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContacts_args (iprot : Protocol.t) =
  let _str7775 = new getContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7776,_id7777) = iprot#readFieldBegin in
        if _t7776 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7777 with 
          | 2 -> (if _t7776 = Protocol.T_LIST then
              _str7775#set_ids 
                (let (_etype7781,_size7778) = iprot#readListBegin in
                  let _con7782 = (Array.to_list (Array.init _size7778 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7782)
            else
              iprot#skip _t7776)
          | _ -> iprot#skip _t7776);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7775

class getContacts_result =
object (self)
  val mutable _success : contact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getContacts_result.success") | Some _x7783 -> _x7783
  method set_success _x7783 = _success <- Some _x7783
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getContacts_result.e") | Some _x7784 -> _x7784
  method set_e _x7784 = _e <- Some _x7784
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter7787 ->         _iter7787#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContacts_result (iprot : Protocol.t) =
  let _str7788 = new getContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7789,_id7790) = iprot#readFieldBegin in
        if _t7789 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7790 with 
          | 0 -> (if _t7789 = Protocol.T_LIST then
              _str7788#set_success 
                (let (_etype7794,_size7791) = iprot#readListBegin in
                  let _con7795 = (Array.to_list (Array.init _size7791 (fun _ -> (read_contact iprot)))) in
                    iprot#readListEnd; _con7795)
            else
              iprot#skip _t7789)
          | 1 -> (if _t7789 = Protocol.T_STRUCT then
              _str7788#set_e (read_talkException iprot)
            else
              iprot#skip _t7789)
          | _ -> iprot#skip _t7789);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7788

class getContactWithFriendRequestStatus_args =
object (self)
  val mutable _id : string option = None
  method get_id = _id
  method grab_id = match _id with None->raise (Field_empty "getContactWithFriendRequestStatus_args.id") | Some _x7796 -> _x7796
  method set_id _x7796 = _id <- Some _x7796
  method unset_id = _id <- None
  method reset_id = _id <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContactWithFriendRequestStatus_args";
    (match _id with None -> () | Some _v -> 
      oprot#writeFieldBegin("id",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContactWithFriendRequestStatus_args (iprot : Protocol.t) =
  let _str7799 = new getContactWithFriendRequestStatus_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7800,_id7801) = iprot#readFieldBegin in
        if _t7800 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7801 with 
          | 2 -> (if _t7800 = Protocol.T_STRING then
              _str7799#set_id iprot#readString
            else
              iprot#skip _t7800)
          | _ -> iprot#skip _t7800);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7799

class getContactWithFriendRequestStatus_result =
object (self)
  val mutable _success : contact option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getContactWithFriendRequestStatus_result.success") | Some _x7802 -> _x7802
  method set_success _x7802 = _success <- Some _x7802
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getContactWithFriendRequestStatus_result.e") | Some _x7803 -> _x7803
  method set_e _x7803 = _e <- Some _x7803
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContactWithFriendRequestStatus_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContactWithFriendRequestStatus_result (iprot : Protocol.t) =
  let _str7806 = new getContactWithFriendRequestStatus_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7807,_id7808) = iprot#readFieldBegin in
        if _t7807 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7808 with 
          | 0 -> (if _t7807 = Protocol.T_STRUCT then
              _str7806#set_success (read_contact iprot)
            else
              iprot#skip _t7807)
          | 1 -> (if _t7807 = Protocol.T_STRUCT then
              _str7806#set_e (read_talkException iprot)
            else
              iprot#skip _t7807)
          | _ -> iprot#skip _t7807);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7806

class getCountryWithRequestIp_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCountryWithRequestIp_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCountryWithRequestIp_args (iprot : Protocol.t) =
  let _str7811 = new getCountryWithRequestIp_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7812,_id7813) = iprot#readFieldBegin in
        if _t7812 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7813 with 
          | _ -> iprot#skip _t7812);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7811

class getCountryWithRequestIp_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCountryWithRequestIp_result.success") | Some _x7814 -> _x7814
  method set_success _x7814 = _success <- Some _x7814
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCountryWithRequestIp_result.e") | Some _x7815 -> _x7815
  method set_e _x7815 = _e <- Some _x7815
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCountryWithRequestIp_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCountryWithRequestIp_result (iprot : Protocol.t) =
  let _str7818 = new getCountryWithRequestIp_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7819,_id7820) = iprot#readFieldBegin in
        if _t7819 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7820 with 
          | 0 -> (if _t7819 = Protocol.T_STRING then
              _str7818#set_success iprot#readString
            else
              iprot#skip _t7819)
          | 1 -> (if _t7819 = Protocol.T_STRUCT then
              _str7818#set_e (read_talkException iprot)
            else
              iprot#skip _t7819)
          | _ -> iprot#skip _t7819);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7818

class getFavoriteMids_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFavoriteMids_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFavoriteMids_args (iprot : Protocol.t) =
  let _str7823 = new getFavoriteMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7824,_id7825) = iprot#readFieldBegin in
        if _t7824 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7825 with 
          | _ -> iprot#skip _t7824);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7823

class getFavoriteMids_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getFavoriteMids_result.success") | Some _x7826 -> _x7826
  method set_success _x7826 = _success <- Some _x7826
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getFavoriteMids_result.e") | Some _x7827 -> _x7827
  method set_e _x7827 = _e <- Some _x7827
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFavoriteMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7830 ->         oprot#writeString(_iter7830);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFavoriteMids_result (iprot : Protocol.t) =
  let _str7831 = new getFavoriteMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7832,_id7833) = iprot#readFieldBegin in
        if _t7832 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7833 with 
          | 0 -> (if _t7832 = Protocol.T_LIST then
              _str7831#set_success 
                (let (_etype7837,_size7834) = iprot#readListBegin in
                  let _con7838 = (Array.to_list (Array.init _size7834 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7838)
            else
              iprot#skip _t7832)
          | 1 -> (if _t7832 = Protocol.T_STRUCT then
              _str7831#set_e (read_talkException iprot)
            else
              iprot#skip _t7832)
          | _ -> iprot#skip _t7832);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7831

class getGroup_args =
object (self)
  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "getGroup_args.groupId") | Some _x7839 -> _x7839
  method set_groupId _x7839 = _groupId <- Some _x7839
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroup_args";
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroup_args (iprot : Protocol.t) =
  let _str7842 = new getGroup_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7843,_id7844) = iprot#readFieldBegin in
        if _t7843 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7844 with 
          | 2 -> (if _t7843 = Protocol.T_STRING then
              _str7842#set_groupId iprot#readString
            else
              iprot#skip _t7843)
          | _ -> iprot#skip _t7843);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7842

class getGroup_result =
object (self)
  val mutable _success : group option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroup_result.success") | Some _x7845 -> _x7845
  method set_success _x7845 = _success <- Some _x7845
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroup_result.e") | Some _x7846 -> _x7846
  method set_e _x7846 = _e <- Some _x7846
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroup_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroup_result (iprot : Protocol.t) =
  let _str7849 = new getGroup_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7850,_id7851) = iprot#readFieldBegin in
        if _t7850 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7851 with 
          | 0 -> (if _t7850 = Protocol.T_STRUCT then
              _str7849#set_success (read_group iprot)
            else
              iprot#skip _t7850)
          | 1 -> (if _t7850 = Protocol.T_STRUCT then
              _str7849#set_e (read_talkException iprot)
            else
              iprot#skip _t7850)
          | _ -> iprot#skip _t7850);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7849

class getGroupIdsInvited_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupIdsInvited_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupIdsInvited_args (iprot : Protocol.t) =
  let _str7854 = new getGroupIdsInvited_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7855,_id7856) = iprot#readFieldBegin in
        if _t7855 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7856 with 
          | _ -> iprot#skip _t7855);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7854

class getGroupIdsInvited_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupIdsInvited_result.success") | Some _x7857 -> _x7857
  method set_success _x7857 = _success <- Some _x7857
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupIdsInvited_result.e") | Some _x7858 -> _x7858
  method set_e _x7858 = _e <- Some _x7858
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupIdsInvited_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7861 ->         oprot#writeString(_iter7861);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupIdsInvited_result (iprot : Protocol.t) =
  let _str7862 = new getGroupIdsInvited_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7863,_id7864) = iprot#readFieldBegin in
        if _t7863 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7864 with 
          | 0 -> (if _t7863 = Protocol.T_LIST then
              _str7862#set_success 
                (let (_etype7868,_size7865) = iprot#readListBegin in
                  let _con7869 = (Array.to_list (Array.init _size7865 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7869)
            else
              iprot#skip _t7863)
          | 1 -> (if _t7863 = Protocol.T_STRUCT then
              _str7862#set_e (read_talkException iprot)
            else
              iprot#skip _t7863)
          | _ -> iprot#skip _t7863);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7862

class getGroupIdsJoined_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupIdsJoined_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupIdsJoined_args (iprot : Protocol.t) =
  let _str7872 = new getGroupIdsJoined_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7873,_id7874) = iprot#readFieldBegin in
        if _t7873 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7874 with 
          | _ -> iprot#skip _t7873);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7872

class getGroupIdsJoined_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupIdsJoined_result.success") | Some _x7875 -> _x7875
  method set_success _x7875 = _success <- Some _x7875
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupIdsJoined_result.e") | Some _x7876 -> _x7876
  method set_e _x7876 = _e <- Some _x7876
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupIdsJoined_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7879 ->         oprot#writeString(_iter7879);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupIdsJoined_result (iprot : Protocol.t) =
  let _str7880 = new getGroupIdsJoined_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7881,_id7882) = iprot#readFieldBegin in
        if _t7881 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7882 with 
          | 0 -> (if _t7881 = Protocol.T_LIST then
              _str7880#set_success 
                (let (_etype7886,_size7883) = iprot#readListBegin in
                  let _con7887 = (Array.to_list (Array.init _size7883 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7887)
            else
              iprot#skip _t7881)
          | 1 -> (if _t7881 = Protocol.T_STRUCT then
              _str7880#set_e (read_talkException iprot)
            else
              iprot#skip _t7881)
          | _ -> iprot#skip _t7881);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7880

class getGroups_args =
object (self)
  val mutable _groupIds : string list option = None
  method get_groupIds = _groupIds
  method grab_groupIds = match _groupIds with None->raise (Field_empty "getGroups_args.groupIds") | Some _x7888 -> _x7888
  method set_groupIds _x7888 = _groupIds <- Some _x7888
  method unset_groupIds = _groupIds <- None
  method reset_groupIds = _groupIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroups_args";
    (match _groupIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupIds",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7891 ->         oprot#writeString(_iter7891);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroups_args (iprot : Protocol.t) =
  let _str7892 = new getGroups_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7893,_id7894) = iprot#readFieldBegin in
        if _t7893 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7894 with 
          | 2 -> (if _t7893 = Protocol.T_LIST then
              _str7892#set_groupIds 
                (let (_etype7898,_size7895) = iprot#readListBegin in
                  let _con7899 = (Array.to_list (Array.init _size7895 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7899)
            else
              iprot#skip _t7893)
          | _ -> iprot#skip _t7893);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7892

class getGroups_result =
object (self)
  val mutable _success : group list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroups_result.success") | Some _x7900 -> _x7900
  method set_success _x7900 = _success <- Some _x7900
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroups_result.e") | Some _x7901 -> _x7901
  method set_e _x7901 = _e <- Some _x7901
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroups_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter7904 ->         _iter7904#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroups_result (iprot : Protocol.t) =
  let _str7905 = new getGroups_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7906,_id7907) = iprot#readFieldBegin in
        if _t7906 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7907 with 
          | 0 -> (if _t7906 = Protocol.T_LIST then
              _str7905#set_success 
                (let (_etype7911,_size7908) = iprot#readListBegin in
                  let _con7912 = (Array.to_list (Array.init _size7908 (fun _ -> (read_group iprot)))) in
                    iprot#readListEnd; _con7912)
            else
              iprot#skip _t7906)
          | 1 -> (if _t7906 = Protocol.T_STRUCT then
              _str7905#set_e (read_talkException iprot)
            else
              iprot#skip _t7906)
          | _ -> iprot#skip _t7906);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7905

class getHiddenContactMids_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getHiddenContactMids_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getHiddenContactMids_args (iprot : Protocol.t) =
  let _str7915 = new getHiddenContactMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7916,_id7917) = iprot#readFieldBegin in
        if _t7916 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7917 with 
          | _ -> iprot#skip _t7916);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7915

class getHiddenContactMids_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getHiddenContactMids_result.success") | Some _x7918 -> _x7918
  method set_success _x7918 = _success <- Some _x7918
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getHiddenContactMids_result.e") | Some _x7919 -> _x7919
  method set_e _x7919 = _e <- Some _x7919
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getHiddenContactMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7922 ->         oprot#writeString(_iter7922);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getHiddenContactMids_result (iprot : Protocol.t) =
  let _str7923 = new getHiddenContactMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7924,_id7925) = iprot#readFieldBegin in
        if _t7924 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7925 with 
          | 0 -> (if _t7924 = Protocol.T_LIST then
              _str7923#set_success 
                (let (_etype7929,_size7926) = iprot#readListBegin in
                  let _con7930 = (Array.to_list (Array.init _size7926 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7930)
            else
              iprot#skip _t7924)
          | 1 -> (if _t7924 = Protocol.T_STRUCT then
              _str7923#set_e (read_talkException iprot)
            else
              iprot#skip _t7924)
          | _ -> iprot#skip _t7924);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7923

class getIdentityIdentifier_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getIdentityIdentifier_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getIdentityIdentifier_args (iprot : Protocol.t) =
  let _str7933 = new getIdentityIdentifier_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7934,_id7935) = iprot#readFieldBegin in
        if _t7934 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7935 with 
          | _ -> iprot#skip _t7934);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7933

class getIdentityIdentifier_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getIdentityIdentifier_result.success") | Some _x7936 -> _x7936
  method set_success _x7936 = _success <- Some _x7936
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getIdentityIdentifier_result.e") | Some _x7937 -> _x7937
  method set_e _x7937 = _e <- Some _x7937
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getIdentityIdentifier_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getIdentityIdentifier_result (iprot : Protocol.t) =
  let _str7940 = new getIdentityIdentifier_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7941,_id7942) = iprot#readFieldBegin in
        if _t7941 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7942 with 
          | 0 -> (if _t7941 = Protocol.T_STRING then
              _str7940#set_success iprot#readString
            else
              iprot#skip _t7941)
          | 1 -> (if _t7941 = Protocol.T_STRUCT then
              _str7940#set_e (read_talkException iprot)
            else
              iprot#skip _t7941)
          | _ -> iprot#skip _t7941);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7940

class getLastAnnouncementIndex_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getLastAnnouncementIndex_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getLastAnnouncementIndex_args (iprot : Protocol.t) =
  let _str7945 = new getLastAnnouncementIndex_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7946,_id7947) = iprot#readFieldBegin in
        if _t7946 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7947 with 
          | _ -> iprot#skip _t7946);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7945

class getLastAnnouncementIndex_result =
object (self)
  val mutable _success : Int32.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getLastAnnouncementIndex_result.success") | Some _x7948 -> _x7948
  method set_success _x7948 = _success <- Some _x7948
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getLastAnnouncementIndex_result.e") | Some _x7949 -> _x7949
  method set_e _x7949 = _e <- Some _x7949
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getLastAnnouncementIndex_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I32,0);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getLastAnnouncementIndex_result (iprot : Protocol.t) =
  let _str7952 = new getLastAnnouncementIndex_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7953,_id7954) = iprot#readFieldBegin in
        if _t7953 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7954 with 
          | 0 -> (if _t7953 = Protocol.T_I32 then
              _str7952#set_success iprot#readI32
            else
              iprot#skip _t7953)
          | 1 -> (if _t7953 = Protocol.T_STRUCT then
              _str7952#set_e (read_talkException iprot)
            else
              iprot#skip _t7953)
          | _ -> iprot#skip _t7953);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7952

class getLastOpRevision_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getLastOpRevision_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getLastOpRevision_args (iprot : Protocol.t) =
  let _str7957 = new getLastOpRevision_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7958,_id7959) = iprot#readFieldBegin in
        if _t7958 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7959 with 
          | _ -> iprot#skip _t7958);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7957

class getLastOpRevision_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getLastOpRevision_result.success") | Some _x7960 -> _x7960
  method set_success _x7960 = _success <- Some _x7960
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getLastOpRevision_result.e") | Some _x7961 -> _x7961
  method set_e _x7961 = _e <- Some _x7961
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getLastOpRevision_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getLastOpRevision_result (iprot : Protocol.t) =
  let _str7964 = new getLastOpRevision_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7965,_id7966) = iprot#readFieldBegin in
        if _t7965 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7966 with 
          | 0 -> (if _t7965 = Protocol.T_I64 then
              _str7964#set_success iprot#readI64
            else
              iprot#skip _t7965)
          | 1 -> (if _t7965 = Protocol.T_STRUCT then
              _str7964#set_e (read_talkException iprot)
            else
              iprot#skip _t7965)
          | _ -> iprot#skip _t7965);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7964

class getSuggestRevisions_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSuggestRevisions_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSuggestRevisions_args (iprot : Protocol.t) =
  let _str7969 = new getSuggestRevisions_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7970,_id7971) = iprot#readFieldBegin in
        if _t7970 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7971 with 
          | _ -> iprot#skip _t7970);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7969

class getSuggestRevisions_result =
object (self)
  val mutable _success : suggestDictionaryRevisions option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSuggestRevisions_result.success") | Some _x7972 -> _x7972
  method set_success _x7972 = _success <- Some _x7972
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSuggestRevisions_result.e") | Some _x7973 -> _x7973
  method set_e _x7973 = _e <- Some _x7973
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSuggestRevisions_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSuggestRevisions_result (iprot : Protocol.t) =
  let _str7976 = new getSuggestRevisions_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7977,_id7978) = iprot#readFieldBegin in
        if _t7977 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7978 with 
          | 0 -> (if _t7977 = Protocol.T_STRUCT then
              _str7976#set_success (read_suggestDictionaryRevisions iprot)
            else
              iprot#skip _t7977)
          | 1 -> (if _t7977 = Protocol.T_STRUCT then
              _str7976#set_e (read_talkException iprot)
            else
              iprot#skip _t7977)
          | _ -> iprot#skip _t7977);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7976

class getPreviousMessagesV2WithReadCount_args =
object (self)
  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "getPreviousMessagesV2WithReadCount_args.messageBoxId") | Some _x7979 -> _x7979
  method set_messageBoxId _x7979 = _messageBoxId <- Some _x7979
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  val mutable _endMessageId : messageBoxV2MessageId option = None
  method get_endMessageId = _endMessageId
  method grab_endMessageId = match _endMessageId with None->raise (Field_empty "getPreviousMessagesV2WithReadCount_args.endMessageId") | Some _x7980 -> _x7980
  method set_endMessageId _x7980 = _endMessageId <- Some _x7980
  method unset_endMessageId = _endMessageId <- None
  method reset_endMessageId = _endMessageId <- None

  val mutable _messagesCount : Int32.t option = None
  method get_messagesCount = _messagesCount
  method grab_messagesCount = match _messagesCount with None->raise (Field_empty "getPreviousMessagesV2WithReadCount_args.messagesCount") | Some _x7981 -> _x7981
  method set_messagesCount _x7981 = _messagesCount <- Some _x7981
  method unset_messagesCount = _messagesCount <- None
  method reset_messagesCount = _messagesCount <- None

  method copy =
      let _new = Oo.copy self in
      if _endMessageId <> None then
        _new#set_endMessageId self#grab_endMessageId#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPreviousMessagesV2WithReadCount_args";
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _endMessageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("endMessageId",Protocol.T_STRUCT,3);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _messagesCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("messagesCount",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPreviousMessagesV2WithReadCount_args (iprot : Protocol.t) =
  let _str7984 = new getPreviousMessagesV2WithReadCount_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7985,_id7986) = iprot#readFieldBegin in
        if _t7985 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7986 with 
          | 2 -> (if _t7985 = Protocol.T_STRING then
              _str7984#set_messageBoxId iprot#readString
            else
              iprot#skip _t7985)
          | 3 -> (if _t7985 = Protocol.T_STRUCT then
              _str7984#set_endMessageId (read_messageBoxV2MessageId iprot)
            else
              iprot#skip _t7985)
          | 4 -> (if _t7985 = Protocol.T_I32 then
              _str7984#set_messagesCount iprot#readI32
            else
              iprot#skip _t7985)
          | _ -> iprot#skip _t7985);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7984

class getPreviousMessagesV2WithReadCount_result =
object (self)
  val mutable _success : message list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPreviousMessagesV2WithReadCount_result.success") | Some _x7987 -> _x7987
  method set_success _x7987 = _success <- Some _x7987
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPreviousMessagesV2WithReadCount_result.e") | Some _x7988 -> _x7988
  method set_e _x7988 = _e <- Some _x7988
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPreviousMessagesV2WithReadCount_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter7991 ->         _iter7991#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPreviousMessagesV2WithReadCount_result (iprot : Protocol.t) =
  let _str7992 = new getPreviousMessagesV2WithReadCount_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7993,_id7994) = iprot#readFieldBegin in
        if _t7993 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7994 with 
          | 0 -> (if _t7993 = Protocol.T_LIST then
              _str7992#set_success 
                (let (_etype7998,_size7995) = iprot#readListBegin in
                  let _con7999 = (Array.to_list (Array.init _size7995 (fun _ -> (read_message iprot)))) in
                    iprot#readListEnd; _con7999)
            else
              iprot#skip _t7993)
          | 1 -> (if _t7993 = Protocol.T_STRUCT then
              _str7992#set_e (read_talkException iprot)
            else
              iprot#skip _t7993)
          | _ -> iprot#skip _t7993);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7992

class getMessageBox_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "getMessageBox_args.channelId") | Some _x8000 -> _x8000
  method set_channelId _x8000 = _channelId <- Some _x8000
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "getMessageBox_args.messageBoxId") | Some _x8001 -> _x8001
  method set_messageBoxId _x8001 = _messageBoxId <- Some _x8001
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  val mutable _lastMessagesCount : Int32.t option = None
  method get_lastMessagesCount = _lastMessagesCount
  method grab_lastMessagesCount = match _lastMessagesCount with None->raise (Field_empty "getMessageBox_args.lastMessagesCount") | Some _x8002 -> _x8002
  method set_lastMessagesCount _x8002 = _lastMessagesCount <- Some _x8002
  method unset_lastMessagesCount = _lastMessagesCount <- None
  method reset_lastMessagesCount = _lastMessagesCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBox_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _lastMessagesCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastMessagesCount",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBox_args (iprot : Protocol.t) =
  let _str8005 = new getMessageBox_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8006,_id8007) = iprot#readFieldBegin in
        if _t8006 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8007 with 
          | 2 -> (if _t8006 = Protocol.T_STRING then
              _str8005#set_channelId iprot#readString
            else
              iprot#skip _t8006)
          | 3 -> (if _t8006 = Protocol.T_STRING then
              _str8005#set_messageBoxId iprot#readString
            else
              iprot#skip _t8006)
          | 4 -> (if _t8006 = Protocol.T_I32 then
              _str8005#set_lastMessagesCount iprot#readI32
            else
              iprot#skip _t8006)
          | _ -> iprot#skip _t8006);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8005

class getMessageBox_result =
object (self)
  val mutable _success : tMessageBox option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessageBox_result.success") | Some _x8008 -> _x8008
  method set_success _x8008 = _success <- Some _x8008
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessageBox_result.e") | Some _x8009 -> _x8009
  method set_e _x8009 = _e <- Some _x8009
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBox_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBox_result (iprot : Protocol.t) =
  let _str8012 = new getMessageBox_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8013,_id8014) = iprot#readFieldBegin in
        if _t8013 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8014 with 
          | 0 -> (if _t8013 = Protocol.T_STRUCT then
              _str8012#set_success (read_tMessageBox iprot)
            else
              iprot#skip _t8013)
          | 1 -> (if _t8013 = Protocol.T_STRUCT then
              _str8012#set_e (read_talkException iprot)
            else
              iprot#skip _t8013)
          | _ -> iprot#skip _t8013);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8012

class getMessageBoxCompactWrapUp_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "getMessageBoxCompactWrapUp_args.mid") | Some _x8015 -> _x8015
  method set_mid _x8015 = _mid <- Some _x8015
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxCompactWrapUp_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxCompactWrapUp_args (iprot : Protocol.t) =
  let _str8018 = new getMessageBoxCompactWrapUp_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8019,_id8020) = iprot#readFieldBegin in
        if _t8019 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8020 with 
          | 2 -> (if _t8019 = Protocol.T_STRING then
              _str8018#set_mid iprot#readString
            else
              iprot#skip _t8019)
          | _ -> iprot#skip _t8019);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8018

class getMessageBoxCompactWrapUp_result =
object (self)
  val mutable _success : tMessageBoxWrapUp option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessageBoxCompactWrapUp_result.success") | Some _x8021 -> _x8021
  method set_success _x8021 = _success <- Some _x8021
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessageBoxCompactWrapUp_result.e") | Some _x8022 -> _x8022
  method set_e _x8022 = _e <- Some _x8022
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxCompactWrapUp_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxCompactWrapUp_result (iprot : Protocol.t) =
  let _str8025 = new getMessageBoxCompactWrapUp_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8026,_id8027) = iprot#readFieldBegin in
        if _t8026 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8027 with 
          | 0 -> (if _t8026 = Protocol.T_STRUCT then
              _str8025#set_success (read_tMessageBoxWrapUp iprot)
            else
              iprot#skip _t8026)
          | 1 -> (if _t8026 = Protocol.T_STRUCT then
              _str8025#set_e (read_talkException iprot)
            else
              iprot#skip _t8026)
          | _ -> iprot#skip _t8026);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8025

class getMessageBoxCompactWrapUpList_args =
object (self)
  val mutable _start : Int32.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getMessageBoxCompactWrapUpList_args.start") | Some _x8028 -> _x8028
  method set_start _x8028 = _start <- Some _x8028
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _messageBoxCount : Int32.t option = None
  method get_messageBoxCount = _messageBoxCount
  method grab_messageBoxCount = match _messageBoxCount with None->raise (Field_empty "getMessageBoxCompactWrapUpList_args.messageBoxCount") | Some _x8029 -> _x8029
  method set_messageBoxCount _x8029 = _messageBoxCount <- Some _x8029
  method unset_messageBoxCount = _messageBoxCount <- None
  method reset_messageBoxCount = _messageBoxCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxCompactWrapUpList_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I32,2);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _messageBoxCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxCount",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxCompactWrapUpList_args (iprot : Protocol.t) =
  let _str8032 = new getMessageBoxCompactWrapUpList_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8033,_id8034) = iprot#readFieldBegin in
        if _t8033 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8034 with 
          | 2 -> (if _t8033 = Protocol.T_I32 then
              _str8032#set_start iprot#readI32
            else
              iprot#skip _t8033)
          | 3 -> (if _t8033 = Protocol.T_I32 then
              _str8032#set_messageBoxCount iprot#readI32
            else
              iprot#skip _t8033)
          | _ -> iprot#skip _t8033);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8032

class getMessageBoxCompactWrapUpList_result =
object (self)
  val mutable _success : tMessageBoxWrapUpResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessageBoxCompactWrapUpList_result.success") | Some _x8035 -> _x8035
  method set_success _x8035 = _success <- Some _x8035
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessageBoxCompactWrapUpList_result.e") | Some _x8036 -> _x8036
  method set_e _x8036 = _e <- Some _x8036
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxCompactWrapUpList_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxCompactWrapUpList_result (iprot : Protocol.t) =
  let _str8039 = new getMessageBoxCompactWrapUpList_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8040,_id8041) = iprot#readFieldBegin in
        if _t8040 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8041 with 
          | 0 -> (if _t8040 = Protocol.T_STRUCT then
              _str8039#set_success (read_tMessageBoxWrapUpResponse iprot)
            else
              iprot#skip _t8040)
          | 1 -> (if _t8040 = Protocol.T_STRUCT then
              _str8039#set_e (read_talkException iprot)
            else
              iprot#skip _t8040)
          | _ -> iprot#skip _t8040);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8039

class getMessageBoxList_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "getMessageBoxList_args.channelId") | Some _x8042 -> _x8042
  method set_channelId _x8042 = _channelId <- Some _x8042
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _lastMessagesCount : Int32.t option = None
  method get_lastMessagesCount = _lastMessagesCount
  method grab_lastMessagesCount = match _lastMessagesCount with None->raise (Field_empty "getMessageBoxList_args.lastMessagesCount") | Some _x8043 -> _x8043
  method set_lastMessagesCount _x8043 = _lastMessagesCount <- Some _x8043
  method unset_lastMessagesCount = _lastMessagesCount <- None
  method reset_lastMessagesCount = _lastMessagesCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxList_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _lastMessagesCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastMessagesCount",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxList_args (iprot : Protocol.t) =
  let _str8046 = new getMessageBoxList_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8047,_id8048) = iprot#readFieldBegin in
        if _t8047 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8048 with 
          | 2 -> (if _t8047 = Protocol.T_STRING then
              _str8046#set_channelId iprot#readString
            else
              iprot#skip _t8047)
          | 3 -> (if _t8047 = Protocol.T_I32 then
              _str8046#set_lastMessagesCount iprot#readI32
            else
              iprot#skip _t8047)
          | _ -> iprot#skip _t8047);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8046

class getMessageBoxList_result =
object (self)
  val mutable _success : tMessageBox list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessageBoxList_result.success") | Some _x8049 -> _x8049
  method set_success _x8049 = _success <- Some _x8049
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessageBoxList_result.e") | Some _x8050 -> _x8050
  method set_e _x8050 = _e <- Some _x8050
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxList_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8053 ->         _iter8053#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxList_result (iprot : Protocol.t) =
  let _str8054 = new getMessageBoxList_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8055,_id8056) = iprot#readFieldBegin in
        if _t8055 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8056 with 
          | 0 -> (if _t8055 = Protocol.T_LIST then
              _str8054#set_success 
                (let (_etype8060,_size8057) = iprot#readListBegin in
                  let _con8061 = (Array.to_list (Array.init _size8057 (fun _ -> (read_tMessageBox iprot)))) in
                    iprot#readListEnd; _con8061)
            else
              iprot#skip _t8055)
          | 1 -> (if _t8055 = Protocol.T_STRUCT then
              _str8054#set_e (read_talkException iprot)
            else
              iprot#skip _t8055)
          | _ -> iprot#skip _t8055);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8054

class getMessageBoxListByStatus_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "getMessageBoxListByStatus_args.channelId") | Some _x8062 -> _x8062
  method set_channelId _x8062 = _channelId <- Some _x8062
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _lastMessagesCount : Int32.t option = None
  method get_lastMessagesCount = _lastMessagesCount
  method grab_lastMessagesCount = match _lastMessagesCount with None->raise (Field_empty "getMessageBoxListByStatus_args.lastMessagesCount") | Some _x8063 -> _x8063
  method set_lastMessagesCount _x8063 = _lastMessagesCount <- Some _x8063
  method unset_lastMessagesCount = _lastMessagesCount <- None
  method reset_lastMessagesCount = _lastMessagesCount <- None

  val mutable _status : Int32.t option = None
  method get_status = _status
  method grab_status = match _status with None->raise (Field_empty "getMessageBoxListByStatus_args.status") | Some _x8064 -> _x8064
  method set_status _x8064 = _status <- Some _x8064
  method unset_status = _status <- None
  method reset_status = _status <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxListByStatus_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _lastMessagesCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastMessagesCount",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _status with None -> () | Some _v -> 
      oprot#writeFieldBegin("status",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxListByStatus_args (iprot : Protocol.t) =
  let _str8067 = new getMessageBoxListByStatus_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8068,_id8069) = iprot#readFieldBegin in
        if _t8068 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8069 with 
          | 2 -> (if _t8068 = Protocol.T_STRING then
              _str8067#set_channelId iprot#readString
            else
              iprot#skip _t8068)
          | 3 -> (if _t8068 = Protocol.T_I32 then
              _str8067#set_lastMessagesCount iprot#readI32
            else
              iprot#skip _t8068)
          | 4 -> (if _t8068 = Protocol.T_I32 then
              _str8067#set_status iprot#readI32
            else
              iprot#skip _t8068)
          | _ -> iprot#skip _t8068);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8067

class getMessageBoxListByStatus_result =
object (self)
  val mutable _success : tMessageBox list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessageBoxListByStatus_result.success") | Some _x8070 -> _x8070
  method set_success _x8070 = _success <- Some _x8070
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessageBoxListByStatus_result.e") | Some _x8071 -> _x8071
  method set_e _x8071 = _e <- Some _x8071
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxListByStatus_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8074 ->         _iter8074#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxListByStatus_result (iprot : Protocol.t) =
  let _str8075 = new getMessageBoxListByStatus_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8076,_id8077) = iprot#readFieldBegin in
        if _t8076 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8077 with 
          | 0 -> (if _t8076 = Protocol.T_LIST then
              _str8075#set_success 
                (let (_etype8081,_size8078) = iprot#readListBegin in
                  let _con8082 = (Array.to_list (Array.init _size8078 (fun _ -> (read_tMessageBox iprot)))) in
                    iprot#readListEnd; _con8082)
            else
              iprot#skip _t8076)
          | 1 -> (if _t8076 = Protocol.T_STRUCT then
              _str8075#set_e (read_talkException iprot)
            else
              iprot#skip _t8076)
          | _ -> iprot#skip _t8076);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8075

class getMessageBoxWrapUp_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "getMessageBoxWrapUp_args.mid") | Some _x8083 -> _x8083
  method set_mid _x8083 = _mid <- Some _x8083
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxWrapUp_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxWrapUp_args (iprot : Protocol.t) =
  let _str8086 = new getMessageBoxWrapUp_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8087,_id8088) = iprot#readFieldBegin in
        if _t8087 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8088 with 
          | 2 -> (if _t8087 = Protocol.T_STRING then
              _str8086#set_mid iprot#readString
            else
              iprot#skip _t8087)
          | _ -> iprot#skip _t8087);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8086

class getMessageBoxWrapUp_result =
object (self)
  val mutable _success : tMessageBoxWrapUp option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessageBoxWrapUp_result.success") | Some _x8089 -> _x8089
  method set_success _x8089 = _success <- Some _x8089
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessageBoxWrapUp_result.e") | Some _x8090 -> _x8090
  method set_e _x8090 = _e <- Some _x8090
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxWrapUp_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxWrapUp_result (iprot : Protocol.t) =
  let _str8093 = new getMessageBoxWrapUp_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8094,_id8095) = iprot#readFieldBegin in
        if _t8094 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8095 with 
          | 0 -> (if _t8094 = Protocol.T_STRUCT then
              _str8093#set_success (read_tMessageBoxWrapUp iprot)
            else
              iprot#skip _t8094)
          | 1 -> (if _t8094 = Protocol.T_STRUCT then
              _str8093#set_e (read_talkException iprot)
            else
              iprot#skip _t8094)
          | _ -> iprot#skip _t8094);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8093

class getMessageBoxWrapUpList_args =
object (self)
  val mutable _start : Int32.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getMessageBoxWrapUpList_args.start") | Some _x8096 -> _x8096
  method set_start _x8096 = _start <- Some _x8096
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _messageBoxCount : Int32.t option = None
  method get_messageBoxCount = _messageBoxCount
  method grab_messageBoxCount = match _messageBoxCount with None->raise (Field_empty "getMessageBoxWrapUpList_args.messageBoxCount") | Some _x8097 -> _x8097
  method set_messageBoxCount _x8097 = _messageBoxCount <- Some _x8097
  method unset_messageBoxCount = _messageBoxCount <- None
  method reset_messageBoxCount = _messageBoxCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxWrapUpList_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I32,2);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _messageBoxCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxCount",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxWrapUpList_args (iprot : Protocol.t) =
  let _str8100 = new getMessageBoxWrapUpList_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8101,_id8102) = iprot#readFieldBegin in
        if _t8101 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8102 with 
          | 2 -> (if _t8101 = Protocol.T_I32 then
              _str8100#set_start iprot#readI32
            else
              iprot#skip _t8101)
          | 3 -> (if _t8101 = Protocol.T_I32 then
              _str8100#set_messageBoxCount iprot#readI32
            else
              iprot#skip _t8101)
          | _ -> iprot#skip _t8101);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8100

class getMessageBoxWrapUpList_result =
object (self)
  val mutable _success : tMessageBoxWrapUpResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessageBoxWrapUpList_result.success") | Some _x8103 -> _x8103
  method set_success _x8103 = _success <- Some _x8103
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessageBoxWrapUpList_result.e") | Some _x8104 -> _x8104
  method set_e _x8104 = _e <- Some _x8104
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxWrapUpList_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxWrapUpList_result (iprot : Protocol.t) =
  let _str8107 = new getMessageBoxWrapUpList_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8108,_id8109) = iprot#readFieldBegin in
        if _t8108 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8109 with 
          | 0 -> (if _t8108 = Protocol.T_STRUCT then
              _str8107#set_success (read_tMessageBoxWrapUpResponse iprot)
            else
              iprot#skip _t8108)
          | 1 -> (if _t8108 = Protocol.T_STRUCT then
              _str8107#set_e (read_talkException iprot)
            else
              iprot#skip _t8108)
          | _ -> iprot#skip _t8108);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8107

class getMessagesBySequenceNumber_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "getMessagesBySequenceNumber_args.channelId") | Some _x8110 -> _x8110
  method set_channelId _x8110 = _channelId <- Some _x8110
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "getMessagesBySequenceNumber_args.messageBoxId") | Some _x8111 -> _x8111
  method set_messageBoxId _x8111 = _messageBoxId <- Some _x8111
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  val mutable _startSeq : Int64.t option = None
  method get_startSeq = _startSeq
  method grab_startSeq = match _startSeq with None->raise (Field_empty "getMessagesBySequenceNumber_args.startSeq") | Some _x8112 -> _x8112
  method set_startSeq _x8112 = _startSeq <- Some _x8112
  method unset_startSeq = _startSeq <- None
  method reset_startSeq = _startSeq <- None

  val mutable _endSeq : Int64.t option = None
  method get_endSeq = _endSeq
  method grab_endSeq = match _endSeq with None->raise (Field_empty "getMessagesBySequenceNumber_args.endSeq") | Some _x8113 -> _x8113
  method set_endSeq _x8113 = _endSeq <- Some _x8113
  method unset_endSeq = _endSeq <- None
  method reset_endSeq = _endSeq <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessagesBySequenceNumber_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _startSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("startSeq",Protocol.T_I64,4);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _endSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("endSeq",Protocol.T_I64,5);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessagesBySequenceNumber_args (iprot : Protocol.t) =
  let _str8116 = new getMessagesBySequenceNumber_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8117,_id8118) = iprot#readFieldBegin in
        if _t8117 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8118 with 
          | 2 -> (if _t8117 = Protocol.T_STRING then
              _str8116#set_channelId iprot#readString
            else
              iprot#skip _t8117)
          | 3 -> (if _t8117 = Protocol.T_STRING then
              _str8116#set_messageBoxId iprot#readString
            else
              iprot#skip _t8117)
          | 4 -> (if _t8117 = Protocol.T_I64 then
              _str8116#set_startSeq iprot#readI64
            else
              iprot#skip _t8117)
          | 5 -> (if _t8117 = Protocol.T_I64 then
              _str8116#set_endSeq iprot#readI64
            else
              iprot#skip _t8117)
          | _ -> iprot#skip _t8117);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8116

class getMessagesBySequenceNumber_result =
object (self)
  val mutable _success : message list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessagesBySequenceNumber_result.success") | Some _x8119 -> _x8119
  method set_success _x8119 = _success <- Some _x8119
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessagesBySequenceNumber_result.e") | Some _x8120 -> _x8120
  method set_e _x8120 = _e <- Some _x8120
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessagesBySequenceNumber_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8123 ->         _iter8123#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessagesBySequenceNumber_result (iprot : Protocol.t) =
  let _str8124 = new getMessagesBySequenceNumber_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8125,_id8126) = iprot#readFieldBegin in
        if _t8125 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8126 with 
          | 0 -> (if _t8125 = Protocol.T_LIST then
              _str8124#set_success 
                (let (_etype8130,_size8127) = iprot#readListBegin in
                  let _con8131 = (Array.to_list (Array.init _size8127 (fun _ -> (read_message iprot)))) in
                    iprot#readListEnd; _con8131)
            else
              iprot#skip _t8125)
          | 1 -> (if _t8125 = Protocol.T_STRUCT then
              _str8124#set_e (read_talkException iprot)
            else
              iprot#skip _t8125)
          | _ -> iprot#skip _t8125);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8124

class getNextMessages_args =
object (self)
  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "getNextMessages_args.messageBoxId") | Some _x8132 -> _x8132
  method set_messageBoxId _x8132 = _messageBoxId <- Some _x8132
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  val mutable _startSeq : Int64.t option = None
  method get_startSeq = _startSeq
  method grab_startSeq = match _startSeq with None->raise (Field_empty "getNextMessages_args.startSeq") | Some _x8133 -> _x8133
  method set_startSeq _x8133 = _startSeq <- Some _x8133
  method unset_startSeq = _startSeq <- None
  method reset_startSeq = _startSeq <- None

  val mutable _messagesCount : Int32.t option = None
  method get_messagesCount = _messagesCount
  method grab_messagesCount = match _messagesCount with None->raise (Field_empty "getNextMessages_args.messagesCount") | Some _x8134 -> _x8134
  method set_messagesCount _x8134 = _messagesCount <- Some _x8134
  method unset_messagesCount = _messagesCount <- None
  method reset_messagesCount = _messagesCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNextMessages_args";
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _startSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("startSeq",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _messagesCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("messagesCount",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNextMessages_args (iprot : Protocol.t) =
  let _str8137 = new getNextMessages_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8138,_id8139) = iprot#readFieldBegin in
        if _t8138 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8139 with 
          | 2 -> (if _t8138 = Protocol.T_STRING then
              _str8137#set_messageBoxId iprot#readString
            else
              iprot#skip _t8138)
          | 3 -> (if _t8138 = Protocol.T_I64 then
              _str8137#set_startSeq iprot#readI64
            else
              iprot#skip _t8138)
          | 4 -> (if _t8138 = Protocol.T_I32 then
              _str8137#set_messagesCount iprot#readI32
            else
              iprot#skip _t8138)
          | _ -> iprot#skip _t8138);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8137

class getNextMessages_result =
object (self)
  val mutable _success : message list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getNextMessages_result.success") | Some _x8140 -> _x8140
  method set_success _x8140 = _success <- Some _x8140
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getNextMessages_result.e") | Some _x8141 -> _x8141
  method set_e _x8141 = _e <- Some _x8141
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNextMessages_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8144 ->         _iter8144#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNextMessages_result (iprot : Protocol.t) =
  let _str8145 = new getNextMessages_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8146,_id8147) = iprot#readFieldBegin in
        if _t8146 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8147 with 
          | 0 -> (if _t8146 = Protocol.T_LIST then
              _str8145#set_success 
                (let (_etype8151,_size8148) = iprot#readListBegin in
                  let _con8152 = (Array.to_list (Array.init _size8148 (fun _ -> (read_message iprot)))) in
                    iprot#readListEnd; _con8152)
            else
              iprot#skip _t8146)
          | 1 -> (if _t8146 = Protocol.T_STRUCT then
              _str8145#set_e (read_talkException iprot)
            else
              iprot#skip _t8146)
          | _ -> iprot#skip _t8146);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8145

class getNotificationPolicy_args =
object (self)
  val mutable _carrier : CarrierCode.t option = None
  method get_carrier = _carrier
  method grab_carrier = match _carrier with None->raise (Field_empty "getNotificationPolicy_args.carrier") | Some _x8153 -> _x8153
  method set_carrier _x8153 = _carrier <- Some _x8153
  method unset_carrier = _carrier <- None
  method reset_carrier = _carrier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNotificationPolicy_args";
    (match _carrier with None -> () | Some _v -> 
      oprot#writeFieldBegin("carrier",Protocol.T_I32,2);
      oprot#writeI32(CarrierCode.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNotificationPolicy_args (iprot : Protocol.t) =
  let _str8156 = new getNotificationPolicy_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8157,_id8158) = iprot#readFieldBegin in
        if _t8157 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8158 with 
          | 2 -> (if _t8157 = Protocol.T_I32 then
              _str8156#set_carrier (CarrierCode.of_i iprot#readI32)
            else
              iprot#skip _t8157)
          | _ -> iprot#skip _t8157);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8156

class getNotificationPolicy_result =
object (self)
  val mutable _success : NotificationType.t list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getNotificationPolicy_result.success") | Some _x8159 -> _x8159
  method set_success _x8159 = _success <- Some _x8159
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getNotificationPolicy_result.e") | Some _x8160 -> _x8160
  method set_e _x8160 = _e <- Some _x8160
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNotificationPolicy_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_I32,List.length _v);
      List.iter (fun _iter8163 ->         oprot#writeI32(NotificationType.to_i _iter8163);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNotificationPolicy_result (iprot : Protocol.t) =
  let _str8164 = new getNotificationPolicy_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8165,_id8166) = iprot#readFieldBegin in
        if _t8165 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8166 with 
          | 0 -> (if _t8165 = Protocol.T_LIST then
              _str8164#set_success 
                (let (_etype8170,_size8167) = iprot#readListBegin in
                  let _con8171 = (Array.to_list (Array.init _size8167 (fun _ -> (NotificationType.of_i iprot#readI32)))) in
                    iprot#readListEnd; _con8171)
            else
              iprot#skip _t8165)
          | 1 -> (if _t8165 = Protocol.T_STRUCT then
              _str8164#set_e (read_talkException iprot)
            else
              iprot#skip _t8165)
          | _ -> iprot#skip _t8165);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8164

class getPreviousMessages_args =
object (self)
  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "getPreviousMessages_args.messageBoxId") | Some _x8172 -> _x8172
  method set_messageBoxId _x8172 = _messageBoxId <- Some _x8172
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  val mutable _endSeq : Int64.t option = None
  method get_endSeq = _endSeq
  method grab_endSeq = match _endSeq with None->raise (Field_empty "getPreviousMessages_args.endSeq") | Some _x8173 -> _x8173
  method set_endSeq _x8173 = _endSeq <- Some _x8173
  method unset_endSeq = _endSeq <- None
  method reset_endSeq = _endSeq <- None

  val mutable _messagesCount : Int32.t option = None
  method get_messagesCount = _messagesCount
  method grab_messagesCount = match _messagesCount with None->raise (Field_empty "getPreviousMessages_args.messagesCount") | Some _x8174 -> _x8174
  method set_messagesCount _x8174 = _messagesCount <- Some _x8174
  method unset_messagesCount = _messagesCount <- None
  method reset_messagesCount = _messagesCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPreviousMessages_args";
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _endSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("endSeq",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _messagesCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("messagesCount",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPreviousMessages_args (iprot : Protocol.t) =
  let _str8177 = new getPreviousMessages_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8178,_id8179) = iprot#readFieldBegin in
        if _t8178 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8179 with 
          | 2 -> (if _t8178 = Protocol.T_STRING then
              _str8177#set_messageBoxId iprot#readString
            else
              iprot#skip _t8178)
          | 3 -> (if _t8178 = Protocol.T_I64 then
              _str8177#set_endSeq iprot#readI64
            else
              iprot#skip _t8178)
          | 4 -> (if _t8178 = Protocol.T_I32 then
              _str8177#set_messagesCount iprot#readI32
            else
              iprot#skip _t8178)
          | _ -> iprot#skip _t8178);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8177

class getPreviousMessages_result =
object (self)
  val mutable _success : message list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPreviousMessages_result.success") | Some _x8180 -> _x8180
  method set_success _x8180 = _success <- Some _x8180
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPreviousMessages_result.e") | Some _x8181 -> _x8181
  method set_e _x8181 = _e <- Some _x8181
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPreviousMessages_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8184 ->         _iter8184#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPreviousMessages_result (iprot : Protocol.t) =
  let _str8185 = new getPreviousMessages_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8186,_id8187) = iprot#readFieldBegin in
        if _t8186 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8187 with 
          | 0 -> (if _t8186 = Protocol.T_LIST then
              _str8185#set_success 
                (let (_etype8191,_size8188) = iprot#readListBegin in
                  let _con8192 = (Array.to_list (Array.init _size8188 (fun _ -> (read_message iprot)))) in
                    iprot#readListEnd; _con8192)
            else
              iprot#skip _t8186)
          | 1 -> (if _t8186 = Protocol.T_STRUCT then
              _str8185#set_e (read_talkException iprot)
            else
              iprot#skip _t8186)
          | _ -> iprot#skip _t8186);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8185

class getProfile_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProfile_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProfile_args (iprot : Protocol.t) =
  let _str8195 = new getProfile_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8196,_id8197) = iprot#readFieldBegin in
        if _t8196 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8197 with 
          | _ -> iprot#skip _t8196);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8195

class getProfile_result =
object (self)
  val mutable _success : profile option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProfile_result.success") | Some _x8198 -> _x8198
  method set_success _x8198 = _success <- Some _x8198
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getProfile_result.e") | Some _x8199 -> _x8199
  method set_e _x8199 = _e <- Some _x8199
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProfile_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProfile_result (iprot : Protocol.t) =
  let _str8202 = new getProfile_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8203,_id8204) = iprot#readFieldBegin in
        if _t8203 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8204 with 
          | 0 -> (if _t8203 = Protocol.T_STRUCT then
              _str8202#set_success (read_profile iprot)
            else
              iprot#skip _t8203)
          | 1 -> (if _t8203 = Protocol.T_STRUCT then
              _str8202#set_e (read_talkException iprot)
            else
              iprot#skip _t8203)
          | _ -> iprot#skip _t8203);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8202

class getProximityMatchCandidateList_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "getProximityMatchCandidateList_args.sessionId") | Some _x8205 -> _x8205
  method set_sessionId _x8205 = _sessionId <- Some _x8205
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProximityMatchCandidateList_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProximityMatchCandidateList_args (iprot : Protocol.t) =
  let _str8208 = new getProximityMatchCandidateList_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8209,_id8210) = iprot#readFieldBegin in
        if _t8209 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8210 with 
          | 2 -> (if _t8209 = Protocol.T_STRING then
              _str8208#set_sessionId iprot#readString
            else
              iprot#skip _t8209)
          | _ -> iprot#skip _t8209);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8208

class getProximityMatchCandidateList_result =
object (self)
  val mutable _success : proximityMatchCandidateResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProximityMatchCandidateList_result.success") | Some _x8211 -> _x8211
  method set_success _x8211 = _success <- Some _x8211
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getProximityMatchCandidateList_result.e") | Some _x8212 -> _x8212
  method set_e _x8212 = _e <- Some _x8212
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProximityMatchCandidateList_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProximityMatchCandidateList_result (iprot : Protocol.t) =
  let _str8215 = new getProximityMatchCandidateList_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8216,_id8217) = iprot#readFieldBegin in
        if _t8216 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8217 with 
          | 0 -> (if _t8216 = Protocol.T_STRUCT then
              _str8215#set_success (read_proximityMatchCandidateResult iprot)
            else
              iprot#skip _t8216)
          | 1 -> (if _t8216 = Protocol.T_STRUCT then
              _str8215#set_e (read_talkException iprot)
            else
              iprot#skip _t8216)
          | _ -> iprot#skip _t8216);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8215

class getProximityMatchCandidates_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "getProximityMatchCandidates_args.sessionId") | Some _x8218 -> _x8218
  method set_sessionId _x8218 = _sessionId <- Some _x8218
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProximityMatchCandidates_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProximityMatchCandidates_args (iprot : Protocol.t) =
  let _str8221 = new getProximityMatchCandidates_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8222,_id8223) = iprot#readFieldBegin in
        if _t8222 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8223 with 
          | 2 -> (if _t8222 = Protocol.T_STRING then
              _str8221#set_sessionId iprot#readString
            else
              iprot#skip _t8222)
          | _ -> iprot#skip _t8222);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8221

class getProximityMatchCandidates_result =
object (self)
  val mutable _success : (contact,bool) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProximityMatchCandidates_result.success") | Some _x8224 -> _x8224
  method set_success _x8224 = _success <- Some _x8224
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getProximityMatchCandidates_result.e") | Some _x8225 -> _x8225
  method set_e _x8225 = _e <- Some _x8225
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k#copy true) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProximityMatchCandidates_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_SET,0);
      oprot#writeSetBegin(Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _iter8228 -> fun _ ->         _iter8228#write(oprot);
      ) _v;
      oprot#writeSetEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProximityMatchCandidates_result (iprot : Protocol.t) =
  let _str8229 = new getProximityMatchCandidates_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8230,_id8231) = iprot#readFieldBegin in
        if _t8230 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8231 with 
          | 0 -> (if _t8230 = Protocol.T_SET then
              _str8229#set_success 
                (let (_etype8235,_size8232) = iprot#readSetBegin in
                let _con8236 = Hashtbl.create _size8232 in
                  for i = 1 to _size8232 do
                    Hashtbl.add _con8236 (read_contact iprot) true
                  done; iprot#readSetEnd; _con8236)
            else
              iprot#skip _t8230)
          | 1 -> (if _t8230 = Protocol.T_STRUCT then
              _str8229#set_e (read_talkException iprot)
            else
              iprot#skip _t8230)
          | _ -> iprot#skip _t8230);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8229

class getRecentMessages_args =
object (self)
  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "getRecentMessages_args.messageBoxId") | Some _x8237 -> _x8237
  method set_messageBoxId _x8237 = _messageBoxId <- Some _x8237
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  val mutable _messagesCount : Int32.t option = None
  method get_messagesCount = _messagesCount
  method grab_messagesCount = match _messagesCount with None->raise (Field_empty "getRecentMessages_args.messagesCount") | Some _x8238 -> _x8238
  method set_messagesCount _x8238 = _messagesCount <- Some _x8238
  method unset_messagesCount = _messagesCount <- None
  method reset_messagesCount = _messagesCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRecentMessages_args";
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messagesCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("messagesCount",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRecentMessages_args (iprot : Protocol.t) =
  let _str8241 = new getRecentMessages_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8242,_id8243) = iprot#readFieldBegin in
        if _t8242 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8243 with 
          | 2 -> (if _t8242 = Protocol.T_STRING then
              _str8241#set_messageBoxId iprot#readString
            else
              iprot#skip _t8242)
          | 3 -> (if _t8242 = Protocol.T_I32 then
              _str8241#set_messagesCount iprot#readI32
            else
              iprot#skip _t8242)
          | _ -> iprot#skip _t8242);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8241

class getRecentMessages_result =
object (self)
  val mutable _success : message list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getRecentMessages_result.success") | Some _x8244 -> _x8244
  method set_success _x8244 = _success <- Some _x8244
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getRecentMessages_result.e") | Some _x8245 -> _x8245
  method set_e _x8245 = _e <- Some _x8245
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRecentMessages_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8248 ->         _iter8248#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRecentMessages_result (iprot : Protocol.t) =
  let _str8249 = new getRecentMessages_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8250,_id8251) = iprot#readFieldBegin in
        if _t8250 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8251 with 
          | 0 -> (if _t8250 = Protocol.T_LIST then
              _str8249#set_success 
                (let (_etype8255,_size8252) = iprot#readListBegin in
                  let _con8256 = (Array.to_list (Array.init _size8252 (fun _ -> (read_message iprot)))) in
                    iprot#readListEnd; _con8256)
            else
              iprot#skip _t8250)
          | 1 -> (if _t8250 = Protocol.T_STRUCT then
              _str8249#set_e (read_talkException iprot)
            else
              iprot#skip _t8250)
          | _ -> iprot#skip _t8250);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8249

class getRecommendationIds_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRecommendationIds_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRecommendationIds_args (iprot : Protocol.t) =
  let _str8259 = new getRecommendationIds_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8260,_id8261) = iprot#readFieldBegin in
        if _t8260 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8261 with 
          | _ -> iprot#skip _t8260);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8259

class getRecommendationIds_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getRecommendationIds_result.success") | Some _x8262 -> _x8262
  method set_success _x8262 = _success <- Some _x8262
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getRecommendationIds_result.e") | Some _x8263 -> _x8263
  method set_e _x8263 = _e <- Some _x8263
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRecommendationIds_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8266 ->         oprot#writeString(_iter8266);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRecommendationIds_result (iprot : Protocol.t) =
  let _str8267 = new getRecommendationIds_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8268,_id8269) = iprot#readFieldBegin in
        if _t8268 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8269 with 
          | 0 -> (if _t8268 = Protocol.T_LIST then
              _str8267#set_success 
                (let (_etype8273,_size8270) = iprot#readListBegin in
                  let _con8274 = (Array.to_list (Array.init _size8270 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8274)
            else
              iprot#skip _t8268)
          | 1 -> (if _t8268 = Protocol.T_STRUCT then
              _str8267#set_e (read_talkException iprot)
            else
              iprot#skip _t8268)
          | _ -> iprot#skip _t8268);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8267

class getRoom_args =
object (self)
  val mutable _roomId : string option = None
  method get_roomId = _roomId
  method grab_roomId = match _roomId with None->raise (Field_empty "getRoom_args.roomId") | Some _x8275 -> _x8275
  method set_roomId _x8275 = _roomId <- Some _x8275
  method unset_roomId = _roomId <- None
  method reset_roomId = _roomId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRoom_args";
    (match _roomId with None -> () | Some _v -> 
      oprot#writeFieldBegin("roomId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRoom_args (iprot : Protocol.t) =
  let _str8278 = new getRoom_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8279,_id8280) = iprot#readFieldBegin in
        if _t8279 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8280 with 
          | 2 -> (if _t8279 = Protocol.T_STRING then
              _str8278#set_roomId iprot#readString
            else
              iprot#skip _t8279)
          | _ -> iprot#skip _t8279);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8278

class getRoom_result =
object (self)
  val mutable _success : room option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getRoom_result.success") | Some _x8281 -> _x8281
  method set_success _x8281 = _success <- Some _x8281
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getRoom_result.e") | Some _x8282 -> _x8282
  method set_e _x8282 = _e <- Some _x8282
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRoom_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRoom_result (iprot : Protocol.t) =
  let _str8285 = new getRoom_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8286,_id8287) = iprot#readFieldBegin in
        if _t8286 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8287 with 
          | 0 -> (if _t8286 = Protocol.T_STRUCT then
              _str8285#set_success (read_room iprot)
            else
              iprot#skip _t8286)
          | 1 -> (if _t8286 = Protocol.T_STRUCT then
              _str8285#set_e (read_talkException iprot)
            else
              iprot#skip _t8286)
          | _ -> iprot#skip _t8286);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8285

class getRSAKeyInfo_args =
object (self)
  val mutable _provider : IdentityProvider.t option = None
  method get_provider = _provider
  method grab_provider = match _provider with None->raise (Field_empty "getRSAKeyInfo_args.provider") | Some _x8288 -> _x8288
  method set_provider _x8288 = _provider <- Some _x8288
  method unset_provider = _provider <- None
  method reset_provider = _provider <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRSAKeyInfo_args";
    (match _provider with None -> () | Some _v -> 
      oprot#writeFieldBegin("provider",Protocol.T_I32,2);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRSAKeyInfo_args (iprot : Protocol.t) =
  let _str8291 = new getRSAKeyInfo_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8292,_id8293) = iprot#readFieldBegin in
        if _t8292 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8293 with 
          | 2 -> (if _t8292 = Protocol.T_I32 then
              _str8291#set_provider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t8292)
          | _ -> iprot#skip _t8292);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8291

class getRSAKeyInfo_result =
object (self)
  val mutable _success : rSAKey option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getRSAKeyInfo_result.success") | Some _x8294 -> _x8294
  method set_success _x8294 = _success <- Some _x8294
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getRSAKeyInfo_result.e") | Some _x8295 -> _x8295
  method set_e _x8295 = _e <- Some _x8295
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRSAKeyInfo_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRSAKeyInfo_result (iprot : Protocol.t) =
  let _str8298 = new getRSAKeyInfo_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8299,_id8300) = iprot#readFieldBegin in
        if _t8299 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8300 with 
          | 0 -> (if _t8299 = Protocol.T_STRUCT then
              _str8298#set_success (read_rSAKey iprot)
            else
              iprot#skip _t8299)
          | 1 -> (if _t8299 = Protocol.T_STRUCT then
              _str8298#set_e (read_talkException iprot)
            else
              iprot#skip _t8299)
          | _ -> iprot#skip _t8299);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8298

class getServerTime_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getServerTime_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getServerTime_args (iprot : Protocol.t) =
  let _str8303 = new getServerTime_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8304,_id8305) = iprot#readFieldBegin in
        if _t8304 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8305 with 
          | _ -> iprot#skip _t8304);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8303

class getServerTime_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getServerTime_result.success") | Some _x8306 -> _x8306
  method set_success _x8306 = _success <- Some _x8306
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getServerTime_result.e") | Some _x8307 -> _x8307
  method set_e _x8307 = _e <- Some _x8307
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getServerTime_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getServerTime_result (iprot : Protocol.t) =
  let _str8310 = new getServerTime_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8311,_id8312) = iprot#readFieldBegin in
        if _t8311 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8312 with 
          | 0 -> (if _t8311 = Protocol.T_I64 then
              _str8310#set_success iprot#readI64
            else
              iprot#skip _t8311)
          | 1 -> (if _t8311 = Protocol.T_STRUCT then
              _str8310#set_e (read_talkException iprot)
            else
              iprot#skip _t8311)
          | _ -> iprot#skip _t8311);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8310

class getSessions_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSessions_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSessions_args (iprot : Protocol.t) =
  let _str8315 = new getSessions_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8316,_id8317) = iprot#readFieldBegin in
        if _t8316 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8317 with 
          | _ -> iprot#skip _t8316);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8315

class getSessions_result =
object (self)
  val mutable _success : loginSession list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSessions_result.success") | Some _x8318 -> _x8318
  method set_success _x8318 = _success <- Some _x8318
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSessions_result.e") | Some _x8319 -> _x8319
  method set_e _x8319 = _e <- Some _x8319
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSessions_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8322 ->         _iter8322#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSessions_result (iprot : Protocol.t) =
  let _str8323 = new getSessions_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8324,_id8325) = iprot#readFieldBegin in
        if _t8324 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8325 with 
          | 0 -> (if _t8324 = Protocol.T_LIST then
              _str8323#set_success 
                (let (_etype8329,_size8326) = iprot#readListBegin in
                  let _con8330 = (Array.to_list (Array.init _size8326 (fun _ -> (read_loginSession iprot)))) in
                    iprot#readListEnd; _con8330)
            else
              iprot#skip _t8324)
          | 1 -> (if _t8324 = Protocol.T_STRUCT then
              _str8323#set_e (read_talkException iprot)
            else
              iprot#skip _t8324)
          | _ -> iprot#skip _t8324);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8323

class getSettings_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSettings_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSettings_args (iprot : Protocol.t) =
  let _str8333 = new getSettings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8334,_id8335) = iprot#readFieldBegin in
        if _t8334 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8335 with 
          | _ -> iprot#skip _t8334);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8333

class getSettings_result =
object (self)
  val mutable _success : settings option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSettings_result.success") | Some _x8336 -> _x8336
  method set_success _x8336 = _success <- Some _x8336
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSettings_result.e") | Some _x8337 -> _x8337
  method set_e _x8337 = _e <- Some _x8337
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSettings_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSettings_result (iprot : Protocol.t) =
  let _str8340 = new getSettings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8341,_id8342) = iprot#readFieldBegin in
        if _t8341 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8342 with 
          | 0 -> (if _t8341 = Protocol.T_STRUCT then
              _str8340#set_success (read_settings iprot)
            else
              iprot#skip _t8341)
          | 1 -> (if _t8341 = Protocol.T_STRUCT then
              _str8340#set_e (read_talkException iprot)
            else
              iprot#skip _t8341)
          | _ -> iprot#skip _t8341);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8340

class getGroupsV2_args =
object (self)
  val mutable _groupIds : string list option = None
  method get_groupIds = _groupIds
  method grab_groupIds = match _groupIds with None->raise (Field_empty "getGroupsV2_args.groupIds") | Some _x8343 -> _x8343
  method set_groupIds _x8343 = _groupIds <- Some _x8343
  method unset_groupIds = _groupIds <- None
  method reset_groupIds = _groupIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupsV2_args";
    (match _groupIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupIds",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8346 ->         oprot#writeString(_iter8346);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupsV2_args (iprot : Protocol.t) =
  let _str8347 = new getGroupsV2_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8348,_id8349) = iprot#readFieldBegin in
        if _t8348 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8349 with 
          | 2 -> (if _t8348 = Protocol.T_LIST then
              _str8347#set_groupIds 
                (let (_etype8353,_size8350) = iprot#readListBegin in
                  let _con8354 = (Array.to_list (Array.init _size8350 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8354)
            else
              iprot#skip _t8348)
          | _ -> iprot#skip _t8348);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8347

class getGroupsV2_result =
object (self)
  val mutable _success : group list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupsV2_result.success") | Some _x8355 -> _x8355
  method set_success _x8355 = _success <- Some _x8355
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupsV2_result.e") | Some _x8356 -> _x8356
  method set_e _x8356 = _e <- Some _x8356
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupsV2_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter8359 ->         _iter8359#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupsV2_result (iprot : Protocol.t) =
  let _str8360 = new getGroupsV2_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8361,_id8362) = iprot#readFieldBegin in
        if _t8361 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8362 with 
          | 0 -> (if _t8361 = Protocol.T_LIST then
              _str8360#set_success 
                (let (_etype8366,_size8363) = iprot#readListBegin in
                  let _con8367 = (Array.to_list (Array.init _size8363 (fun _ -> (read_group iprot)))) in
                    iprot#readListEnd; _con8367)
            else
              iprot#skip _t8361)
          | 1 -> (if _t8361 = Protocol.T_STRUCT then
              _str8360#set_e (read_talkException iprot)
            else
              iprot#skip _t8361)
          | _ -> iprot#skip _t8361);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8360

class getSettingsAttributes_args =
object (self)
  val mutable _attrBitset : Int32.t option = None
  method get_attrBitset = _attrBitset
  method grab_attrBitset = match _attrBitset with None->raise (Field_empty "getSettingsAttributes_args.attrBitset") | Some _x8368 -> _x8368
  method set_attrBitset _x8368 = _attrBitset <- Some _x8368
  method unset_attrBitset = _attrBitset <- None
  method reset_attrBitset = _attrBitset <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSettingsAttributes_args";
    (match _attrBitset with None -> () | Some _v -> 
      oprot#writeFieldBegin("attrBitset",Protocol.T_I32,2);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSettingsAttributes_args (iprot : Protocol.t) =
  let _str8371 = new getSettingsAttributes_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8372,_id8373) = iprot#readFieldBegin in
        if _t8372 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8373 with 
          | 2 -> (if _t8372 = Protocol.T_I32 then
              _str8371#set_attrBitset iprot#readI32
            else
              iprot#skip _t8372)
          | _ -> iprot#skip _t8372);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8371

class getSettingsAttributes_result =
object (self)
  val mutable _success : settings option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSettingsAttributes_result.success") | Some _x8374 -> _x8374
  method set_success _x8374 = _success <- Some _x8374
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSettingsAttributes_result.e") | Some _x8375 -> _x8375
  method set_e _x8375 = _e <- Some _x8375
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSettingsAttributes_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSettingsAttributes_result (iprot : Protocol.t) =
  let _str8378 = new getSettingsAttributes_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8379,_id8380) = iprot#readFieldBegin in
        if _t8379 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8380 with 
          | 0 -> (if _t8379 = Protocol.T_STRUCT then
              _str8378#set_success (read_settings iprot)
            else
              iprot#skip _t8379)
          | 1 -> (if _t8379 = Protocol.T_STRUCT then
              _str8378#set_e (read_talkException iprot)
            else
              iprot#skip _t8379)
          | _ -> iprot#skip _t8379);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8378

class getSystemConfiguration_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSystemConfiguration_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSystemConfiguration_args (iprot : Protocol.t) =
  let _str8383 = new getSystemConfiguration_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8384,_id8385) = iprot#readFieldBegin in
        if _t8384 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8385 with 
          | _ -> iprot#skip _t8384);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8383

class getSystemConfiguration_result =
object (self)
  val mutable _success : systemConfiguration option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSystemConfiguration_result.success") | Some _x8386 -> _x8386
  method set_success _x8386 = _success <- Some _x8386
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSystemConfiguration_result.e") | Some _x8387 -> _x8387
  method set_e _x8387 = _e <- Some _x8387
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSystemConfiguration_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSystemConfiguration_result (iprot : Protocol.t) =
  let _str8390 = new getSystemConfiguration_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8391,_id8392) = iprot#readFieldBegin in
        if _t8391 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8392 with 
          | 0 -> (if _t8391 = Protocol.T_STRUCT then
              _str8390#set_success (read_systemConfiguration iprot)
            else
              iprot#skip _t8391)
          | 1 -> (if _t8391 = Protocol.T_STRUCT then
              _str8390#set_e (read_talkException iprot)
            else
              iprot#skip _t8391)
          | _ -> iprot#skip _t8391);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8390

class getUserTicket_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserTicket_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserTicket_args (iprot : Protocol.t) =
  let _str8395 = new getUserTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8396,_id8397) = iprot#readFieldBegin in
        if _t8396 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8397 with 
          | _ -> iprot#skip _t8396);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8395

class getUserTicket_result =
object (self)
  val mutable _success : ticket option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserTicket_result.success") | Some _x8398 -> _x8398
  method set_success _x8398 = _success <- Some _x8398
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserTicket_result.e") | Some _x8399 -> _x8399
  method set_e _x8399 = _e <- Some _x8399
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserTicket_result (iprot : Protocol.t) =
  let _str8402 = new getUserTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8403,_id8404) = iprot#readFieldBegin in
        if _t8403 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8404 with 
          | 0 -> (if _t8403 = Protocol.T_STRUCT then
              _str8402#set_success (read_ticket iprot)
            else
              iprot#skip _t8403)
          | 1 -> (if _t8403 = Protocol.T_STRUCT then
              _str8402#set_e (read_talkException iprot)
            else
              iprot#skip _t8403)
          | _ -> iprot#skip _t8403);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8402

class getWapInvitation_args =
object (self)
  val mutable _invitationHash : string option = None
  method get_invitationHash = _invitationHash
  method grab_invitationHash = match _invitationHash with None->raise (Field_empty "getWapInvitation_args.invitationHash") | Some _x8405 -> _x8405
  method set_invitationHash _x8405 = _invitationHash <- Some _x8405
  method unset_invitationHash = _invitationHash <- None
  method reset_invitationHash = _invitationHash <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getWapInvitation_args";
    (match _invitationHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("invitationHash",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getWapInvitation_args (iprot : Protocol.t) =
  let _str8408 = new getWapInvitation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8409,_id8410) = iprot#readFieldBegin in
        if _t8409 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8410 with 
          | 2 -> (if _t8409 = Protocol.T_STRING then
              _str8408#set_invitationHash iprot#readString
            else
              iprot#skip _t8409)
          | _ -> iprot#skip _t8409);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8408

class getWapInvitation_result =
object (self)
  val mutable _success : wapInvitation option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getWapInvitation_result.success") | Some _x8411 -> _x8411
  method set_success _x8411 = _success <- Some _x8411
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getWapInvitation_result.e") | Some _x8412 -> _x8412
  method set_e _x8412 = _e <- Some _x8412
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getWapInvitation_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getWapInvitation_result (iprot : Protocol.t) =
  let _str8415 = new getWapInvitation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8416,_id8417) = iprot#readFieldBegin in
        if _t8416 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8417 with 
          | 0 -> (if _t8416 = Protocol.T_STRUCT then
              _str8415#set_success (read_wapInvitation iprot)
            else
              iprot#skip _t8416)
          | 1 -> (if _t8416 = Protocol.T_STRUCT then
              _str8415#set_e (read_talkException iprot)
            else
              iprot#skip _t8416)
          | _ -> iprot#skip _t8416);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8415

class invalidateUserTicket_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "invalidateUserTicket_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_invalidateUserTicket_args (iprot : Protocol.t) =
  let _str8420 = new invalidateUserTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8421,_id8422) = iprot#readFieldBegin in
        if _t8421 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8422 with 
          | _ -> iprot#skip _t8421);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8420

class invalidateUserTicket_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "invalidateUserTicket_result.e") | Some _x8423 -> _x8423
  method set_e _x8423 = _e <- Some _x8423
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "invalidateUserTicket_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_invalidateUserTicket_result (iprot : Protocol.t) =
  let _str8426 = new invalidateUserTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8427,_id8428) = iprot#readFieldBegin in
        if _t8427 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8428 with 
          | 1 -> (if _t8427 = Protocol.T_STRUCT then
              _str8426#set_e (read_talkException iprot)
            else
              iprot#skip _t8427)
          | _ -> iprot#skip _t8427);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8426

class inviteFriendsBySms_args =
object (self)
  val mutable _phoneNumberList : string list option = None
  method get_phoneNumberList = _phoneNumberList
  method grab_phoneNumberList = match _phoneNumberList with None->raise (Field_empty "inviteFriendsBySms_args.phoneNumberList") | Some _x8429 -> _x8429
  method set_phoneNumberList _x8429 = _phoneNumberList <- Some _x8429
  method unset_phoneNumberList = _phoneNumberList <- None
  method reset_phoneNumberList = _phoneNumberList <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteFriendsBySms_args";
    (match _phoneNumberList with None -> () | Some _v -> 
      oprot#writeFieldBegin("phoneNumberList",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8432 ->         oprot#writeString(_iter8432);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteFriendsBySms_args (iprot : Protocol.t) =
  let _str8433 = new inviteFriendsBySms_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8434,_id8435) = iprot#readFieldBegin in
        if _t8434 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8435 with 
          | 2 -> (if _t8434 = Protocol.T_LIST then
              _str8433#set_phoneNumberList 
                (let (_etype8439,_size8436) = iprot#readListBegin in
                  let _con8440 = (Array.to_list (Array.init _size8436 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8440)
            else
              iprot#skip _t8434)
          | _ -> iprot#skip _t8434);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8433

class inviteFriendsBySms_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "inviteFriendsBySms_result.e") | Some _x8441 -> _x8441
  method set_e _x8441 = _e <- Some _x8441
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteFriendsBySms_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteFriendsBySms_result (iprot : Protocol.t) =
  let _str8444 = new inviteFriendsBySms_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8445,_id8446) = iprot#readFieldBegin in
        if _t8445 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8446 with 
          | 1 -> (if _t8445 = Protocol.T_STRUCT then
              _str8444#set_e (read_talkException iprot)
            else
              iprot#skip _t8445)
          | _ -> iprot#skip _t8445);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8444

class inviteIntoGroup_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "inviteIntoGroup_args.reqSeq") | Some _x8447 -> _x8447
  method set_reqSeq _x8447 = _reqSeq <- Some _x8447
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "inviteIntoGroup_args.groupId") | Some _x8448 -> _x8448
  method set_groupId _x8448 = _groupId <- Some _x8448
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  val mutable _contactIds : string list option = None
  method get_contactIds = _contactIds
  method grab_contactIds = match _contactIds with None->raise (Field_empty "inviteIntoGroup_args.contactIds") | Some _x8449 -> _x8449
  method set_contactIds _x8449 = _contactIds <- Some _x8449
  method unset_contactIds = _contactIds <- None
  method reset_contactIds = _contactIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteIntoGroup_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _contactIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactIds",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8452 ->         oprot#writeString(_iter8452);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteIntoGroup_args (iprot : Protocol.t) =
  let _str8453 = new inviteIntoGroup_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8454,_id8455) = iprot#readFieldBegin in
        if _t8454 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8455 with 
          | 1 -> (if _t8454 = Protocol.T_I32 then
              _str8453#set_reqSeq iprot#readI32
            else
              iprot#skip _t8454)
          | 2 -> (if _t8454 = Protocol.T_STRING then
              _str8453#set_groupId iprot#readString
            else
              iprot#skip _t8454)
          | 3 -> (if _t8454 = Protocol.T_LIST then
              _str8453#set_contactIds 
                (let (_etype8459,_size8456) = iprot#readListBegin in
                  let _con8460 = (Array.to_list (Array.init _size8456 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8460)
            else
              iprot#skip _t8454)
          | _ -> iprot#skip _t8454);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8453

class inviteIntoGroup_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "inviteIntoGroup_result.e") | Some _x8461 -> _x8461
  method set_e _x8461 = _e <- Some _x8461
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteIntoGroup_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteIntoGroup_result (iprot : Protocol.t) =
  let _str8464 = new inviteIntoGroup_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8465,_id8466) = iprot#readFieldBegin in
        if _t8465 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8466 with 
          | 1 -> (if _t8465 = Protocol.T_STRUCT then
              _str8464#set_e (read_talkException iprot)
            else
              iprot#skip _t8465)
          | _ -> iprot#skip _t8465);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8464

class inviteIntoRoom_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "inviteIntoRoom_args.reqSeq") | Some _x8467 -> _x8467
  method set_reqSeq _x8467 = _reqSeq <- Some _x8467
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _roomId : string option = None
  method get_roomId = _roomId
  method grab_roomId = match _roomId with None->raise (Field_empty "inviteIntoRoom_args.roomId") | Some _x8468 -> _x8468
  method set_roomId _x8468 = _roomId <- Some _x8468
  method unset_roomId = _roomId <- None
  method reset_roomId = _roomId <- None

  val mutable _contactIds : string list option = None
  method get_contactIds = _contactIds
  method grab_contactIds = match _contactIds with None->raise (Field_empty "inviteIntoRoom_args.contactIds") | Some _x8469 -> _x8469
  method set_contactIds _x8469 = _contactIds <- Some _x8469
  method unset_contactIds = _contactIds <- None
  method reset_contactIds = _contactIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteIntoRoom_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _roomId with None -> () | Some _v -> 
      oprot#writeFieldBegin("roomId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _contactIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactIds",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8472 ->         oprot#writeString(_iter8472);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteIntoRoom_args (iprot : Protocol.t) =
  let _str8473 = new inviteIntoRoom_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8474,_id8475) = iprot#readFieldBegin in
        if _t8474 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8475 with 
          | 1 -> (if _t8474 = Protocol.T_I32 then
              _str8473#set_reqSeq iprot#readI32
            else
              iprot#skip _t8474)
          | 2 -> (if _t8474 = Protocol.T_STRING then
              _str8473#set_roomId iprot#readString
            else
              iprot#skip _t8474)
          | 3 -> (if _t8474 = Protocol.T_LIST then
              _str8473#set_contactIds 
                (let (_etype8479,_size8476) = iprot#readListBegin in
                  let _con8480 = (Array.to_list (Array.init _size8476 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8480)
            else
              iprot#skip _t8474)
          | _ -> iprot#skip _t8474);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8473

class inviteIntoRoom_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "inviteIntoRoom_result.e") | Some _x8481 -> _x8481
  method set_e _x8481 = _e <- Some _x8481
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteIntoRoom_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteIntoRoom_result (iprot : Protocol.t) =
  let _str8484 = new inviteIntoRoom_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8485,_id8486) = iprot#readFieldBegin in
        if _t8485 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8486 with 
          | 1 -> (if _t8485 = Protocol.T_STRUCT then
              _str8484#set_e (read_talkException iprot)
            else
              iprot#skip _t8485)
          | _ -> iprot#skip _t8485);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8484

class inviteViaEmail_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "inviteViaEmail_args.reqSeq") | Some _x8487 -> _x8487
  method set_reqSeq _x8487 = _reqSeq <- Some _x8487
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _email : string option = None
  method get_email = _email
  method grab_email = match _email with None->raise (Field_empty "inviteViaEmail_args.email") | Some _x8488 -> _x8488
  method set_email _x8488 = _email <- Some _x8488
  method unset_email = _email <- None
  method reset_email = _email <- None

  val mutable _name : string option = None
  method get_name = _name
  method grab_name = match _name with None->raise (Field_empty "inviteViaEmail_args.name") | Some _x8489 -> _x8489
  method set_name _x8489 = _name <- Some _x8489
  method unset_name = _name <- None
  method reset_name = _name <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteViaEmail_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _email with None -> () | Some _v -> 
      oprot#writeFieldBegin("email",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _name with None -> () | Some _v -> 
      oprot#writeFieldBegin("name",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteViaEmail_args (iprot : Protocol.t) =
  let _str8492 = new inviteViaEmail_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8493,_id8494) = iprot#readFieldBegin in
        if _t8493 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8494 with 
          | 1 -> (if _t8493 = Protocol.T_I32 then
              _str8492#set_reqSeq iprot#readI32
            else
              iprot#skip _t8493)
          | 2 -> (if _t8493 = Protocol.T_STRING then
              _str8492#set_email iprot#readString
            else
              iprot#skip _t8493)
          | 3 -> (if _t8493 = Protocol.T_STRING then
              _str8492#set_name iprot#readString
            else
              iprot#skip _t8493)
          | _ -> iprot#skip _t8493);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8492

class inviteViaEmail_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "inviteViaEmail_result.e") | Some _x8495 -> _x8495
  method set_e _x8495 = _e <- Some _x8495
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteViaEmail_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteViaEmail_result (iprot : Protocol.t) =
  let _str8498 = new inviteViaEmail_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8499,_id8500) = iprot#readFieldBegin in
        if _t8499 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8500 with 
          | 1 -> (if _t8499 = Protocol.T_STRUCT then
              _str8498#set_e (read_talkException iprot)
            else
              iprot#skip _t8499)
          | _ -> iprot#skip _t8499);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8498

class isIdentityIdentifierAvailable_args =
object (self)
  val mutable _provider : IdentityProvider.t option = None
  method get_provider = _provider
  method grab_provider = match _provider with None->raise (Field_empty "isIdentityIdentifierAvailable_args.provider") | Some _x8501 -> _x8501
  method set_provider _x8501 = _provider <- Some _x8501
  method unset_provider = _provider <- None
  method reset_provider = _provider <- None

  val mutable _identifier : string option = None
  method get_identifier = _identifier
  method grab_identifier = match _identifier with None->raise (Field_empty "isIdentityIdentifierAvailable_args.identifier") | Some _x8502 -> _x8502
  method set_identifier _x8502 = _identifier <- Some _x8502
  method unset_identifier = _identifier <- None
  method reset_identifier = _identifier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isIdentityIdentifierAvailable_args";
    (match _identifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("identifier",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _provider with None -> () | Some _v -> 
      oprot#writeFieldBegin("provider",Protocol.T_I32,3);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isIdentityIdentifierAvailable_args (iprot : Protocol.t) =
  let _str8505 = new isIdentityIdentifierAvailable_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8506,_id8507) = iprot#readFieldBegin in
        if _t8506 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8507 with 
          | 3 -> (if _t8506 = Protocol.T_I32 then
              _str8505#set_provider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t8506)
          | 2 -> (if _t8506 = Protocol.T_STRING then
              _str8505#set_identifier iprot#readString
            else
              iprot#skip _t8506)
          | _ -> iprot#skip _t8506);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8505

class isIdentityIdentifierAvailable_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "isIdentityIdentifierAvailable_result.success") | Some _x8508 -> _x8508
  method set_success _x8508 = _success <- Some _x8508
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "isIdentityIdentifierAvailable_result.e") | Some _x8509 -> _x8509
  method set_e _x8509 = _e <- Some _x8509
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isIdentityIdentifierAvailable_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isIdentityIdentifierAvailable_result (iprot : Protocol.t) =
  let _str8512 = new isIdentityIdentifierAvailable_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8513,_id8514) = iprot#readFieldBegin in
        if _t8513 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8514 with 
          | 0 -> (if _t8513 = Protocol.T_BOOL then
              _str8512#set_success iprot#readBool
            else
              iprot#skip _t8513)
          | 1 -> (if _t8513 = Protocol.T_STRUCT then
              _str8512#set_e (read_talkException iprot)
            else
              iprot#skip _t8513)
          | _ -> iprot#skip _t8513);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8512

class isUseridAvailable_args =
object (self)
  val mutable _userid : string option = None
  method get_userid = _userid
  method grab_userid = match _userid with None->raise (Field_empty "isUseridAvailable_args.userid") | Some _x8515 -> _x8515
  method set_userid _x8515 = _userid <- Some _x8515
  method unset_userid = _userid <- None
  method reset_userid = _userid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isUseridAvailable_args";
    (match _userid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isUseridAvailable_args (iprot : Protocol.t) =
  let _str8518 = new isUseridAvailable_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8519,_id8520) = iprot#readFieldBegin in
        if _t8519 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8520 with 
          | 2 -> (if _t8519 = Protocol.T_STRING then
              _str8518#set_userid iprot#readString
            else
              iprot#skip _t8519)
          | _ -> iprot#skip _t8519);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8518

class isUseridAvailable_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "isUseridAvailable_result.success") | Some _x8521 -> _x8521
  method set_success _x8521 = _success <- Some _x8521
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "isUseridAvailable_result.e") | Some _x8522 -> _x8522
  method set_e _x8522 = _e <- Some _x8522
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isUseridAvailable_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isUseridAvailable_result (iprot : Protocol.t) =
  let _str8525 = new isUseridAvailable_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8526,_id8527) = iprot#readFieldBegin in
        if _t8526 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8527 with 
          | 0 -> (if _t8526 = Protocol.T_BOOL then
              _str8525#set_success iprot#readBool
            else
              iprot#skip _t8526)
          | 1 -> (if _t8526 = Protocol.T_STRUCT then
              _str8525#set_e (read_talkException iprot)
            else
              iprot#skip _t8526)
          | _ -> iprot#skip _t8526);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8525

class kickoutFromGroup_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "kickoutFromGroup_args.reqSeq") | Some _x8528 -> _x8528
  method set_reqSeq _x8528 = _reqSeq <- Some _x8528
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "kickoutFromGroup_args.groupId") | Some _x8529 -> _x8529
  method set_groupId _x8529 = _groupId <- Some _x8529
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  val mutable _contactIds : string list option = None
  method get_contactIds = _contactIds
  method grab_contactIds = match _contactIds with None->raise (Field_empty "kickoutFromGroup_args.contactIds") | Some _x8530 -> _x8530
  method set_contactIds _x8530 = _contactIds <- Some _x8530
  method unset_contactIds = _contactIds <- None
  method reset_contactIds = _contactIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "kickoutFromGroup_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _contactIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactIds",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8533 ->         oprot#writeString(_iter8533);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_kickoutFromGroup_args (iprot : Protocol.t) =
  let _str8534 = new kickoutFromGroup_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8535,_id8536) = iprot#readFieldBegin in
        if _t8535 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8536 with 
          | 1 -> (if _t8535 = Protocol.T_I32 then
              _str8534#set_reqSeq iprot#readI32
            else
              iprot#skip _t8535)
          | 2 -> (if _t8535 = Protocol.T_STRING then
              _str8534#set_groupId iprot#readString
            else
              iprot#skip _t8535)
          | 3 -> (if _t8535 = Protocol.T_LIST then
              _str8534#set_contactIds 
                (let (_etype8540,_size8537) = iprot#readListBegin in
                  let _con8541 = (Array.to_list (Array.init _size8537 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8541)
            else
              iprot#skip _t8535)
          | _ -> iprot#skip _t8535);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8534

class kickoutFromGroup_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "kickoutFromGroup_result.e") | Some _x8542 -> _x8542
  method set_e _x8542 = _e <- Some _x8542
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "kickoutFromGroup_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_kickoutFromGroup_result (iprot : Protocol.t) =
  let _str8545 = new kickoutFromGroup_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8546,_id8547) = iprot#readFieldBegin in
        if _t8546 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8547 with 
          | 1 -> (if _t8546 = Protocol.T_STRUCT then
              _str8545#set_e (read_talkException iprot)
            else
              iprot#skip _t8546)
          | _ -> iprot#skip _t8546);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8545

class reissueGroupTicket_args =
object (self)
  val mutable _groupMid : string option = None
  method get_groupMid = _groupMid
  method grab_groupMid = match _groupMid with None->raise (Field_empty "reissueGroupTicket_args.groupMid") | Some _x8548 -> _x8548
  method set_groupMid _x8548 = _groupMid <- Some _x8548
  method unset_groupMid = _groupMid <- None
  method reset_groupMid = _groupMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reissueGroupTicket_args";
    (match _groupMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupMid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reissueGroupTicket_args (iprot : Protocol.t) =
  let _str8551 = new reissueGroupTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8552,_id8553) = iprot#readFieldBegin in
        if _t8552 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8553 with 
          | 1 -> (if _t8552 = Protocol.T_STRING then
              _str8551#set_groupMid iprot#readString
            else
              iprot#skip _t8552)
          | _ -> iprot#skip _t8552);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8551

class reissueGroupTicket_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reissueGroupTicket_result.success") | Some _x8554 -> _x8554
  method set_success _x8554 = _success <- Some _x8554
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reissueGroupTicket_result.e") | Some _x8555 -> _x8555
  method set_e _x8555 = _e <- Some _x8555
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reissueGroupTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reissueGroupTicket_result (iprot : Protocol.t) =
  let _str8558 = new reissueGroupTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8559,_id8560) = iprot#readFieldBegin in
        if _t8559 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8560 with 
          | 0 -> (if _t8559 = Protocol.T_STRING then
              _str8558#set_success iprot#readString
            else
              iprot#skip _t8559)
          | 1 -> (if _t8559 = Protocol.T_STRUCT then
              _str8558#set_e (read_talkException iprot)
            else
              iprot#skip _t8559)
          | _ -> iprot#skip _t8559);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8558

class findGroupByTicket_args =
object (self)
  val mutable _ticketId : string option = None
  method get_ticketId = _ticketId
  method grab_ticketId = match _ticketId with None->raise (Field_empty "findGroupByTicket_args.ticketId") | Some _x8561 -> _x8561
  method set_ticketId _x8561 = _ticketId <- Some _x8561
  method unset_ticketId = _ticketId <- None
  method reset_ticketId = _ticketId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findGroupByTicket_args";
    (match _ticketId with None -> () | Some _v -> 
      oprot#writeFieldBegin("ticketId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findGroupByTicket_args (iprot : Protocol.t) =
  let _str8564 = new findGroupByTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8565,_id8566) = iprot#readFieldBegin in
        if _t8565 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8566 with 
          | 1 -> (if _t8565 = Protocol.T_STRING then
              _str8564#set_ticketId iprot#readString
            else
              iprot#skip _t8565)
          | _ -> iprot#skip _t8565);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8564

class findGroupByTicket_result =
object (self)
  val mutable _success : group option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findGroupByTicket_result.success") | Some _x8567 -> _x8567
  method set_success _x8567 = _success <- Some _x8567
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findGroupByTicket_result.e") | Some _x8568 -> _x8568
  method set_e _x8568 = _e <- Some _x8568
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findGroupByTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findGroupByTicket_result (iprot : Protocol.t) =
  let _str8571 = new findGroupByTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8572,_id8573) = iprot#readFieldBegin in
        if _t8572 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8573 with 
          | 0 -> (if _t8572 = Protocol.T_STRUCT then
              _str8571#set_success (read_group iprot)
            else
              iprot#skip _t8572)
          | 1 -> (if _t8572 = Protocol.T_STRUCT then
              _str8571#set_e (read_talkException iprot)
            else
              iprot#skip _t8572)
          | _ -> iprot#skip _t8572);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8571

class leaveGroup_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "leaveGroup_args.reqSeq") | Some _x8574 -> _x8574
  method set_reqSeq _x8574 = _reqSeq <- Some _x8574
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "leaveGroup_args.groupId") | Some _x8575 -> _x8575
  method set_groupId _x8575 = _groupId <- Some _x8575
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "leaveGroup_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_leaveGroup_args (iprot : Protocol.t) =
  let _str8578 = new leaveGroup_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8579,_id8580) = iprot#readFieldBegin in
        if _t8579 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8580 with 
          | 1 -> (if _t8579 = Protocol.T_I32 then
              _str8578#set_reqSeq iprot#readI32
            else
              iprot#skip _t8579)
          | 2 -> (if _t8579 = Protocol.T_STRING then
              _str8578#set_groupId iprot#readString
            else
              iprot#skip _t8579)
          | _ -> iprot#skip _t8579);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8578

class leaveGroup_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "leaveGroup_result.e") | Some _x8581 -> _x8581
  method set_e _x8581 = _e <- Some _x8581
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "leaveGroup_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_leaveGroup_result (iprot : Protocol.t) =
  let _str8584 = new leaveGroup_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8585,_id8586) = iprot#readFieldBegin in
        if _t8585 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8586 with 
          | 1 -> (if _t8585 = Protocol.T_STRUCT then
              _str8584#set_e (read_talkException iprot)
            else
              iprot#skip _t8585)
          | _ -> iprot#skip _t8585);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8584

class leaveRoom_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "leaveRoom_args.reqSeq") | Some _x8587 -> _x8587
  method set_reqSeq _x8587 = _reqSeq <- Some _x8587
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _roomId : string option = None
  method get_roomId = _roomId
  method grab_roomId = match _roomId with None->raise (Field_empty "leaveRoom_args.roomId") | Some _x8588 -> _x8588
  method set_roomId _x8588 = _roomId <- Some _x8588
  method unset_roomId = _roomId <- None
  method reset_roomId = _roomId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "leaveRoom_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _roomId with None -> () | Some _v -> 
      oprot#writeFieldBegin("roomId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_leaveRoom_args (iprot : Protocol.t) =
  let _str8591 = new leaveRoom_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8592,_id8593) = iprot#readFieldBegin in
        if _t8592 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8593 with 
          | 1 -> (if _t8592 = Protocol.T_I32 then
              _str8591#set_reqSeq iprot#readI32
            else
              iprot#skip _t8592)
          | 2 -> (if _t8592 = Protocol.T_STRING then
              _str8591#set_roomId iprot#readString
            else
              iprot#skip _t8592)
          | _ -> iprot#skip _t8592);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8591

class leaveRoom_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "leaveRoom_result.e") | Some _x8594 -> _x8594
  method set_e _x8594 = _e <- Some _x8594
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "leaveRoom_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_leaveRoom_result (iprot : Protocol.t) =
  let _str8597 = new leaveRoom_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8598,_id8599) = iprot#readFieldBegin in
        if _t8598 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8599 with 
          | 1 -> (if _t8598 = Protocol.T_STRUCT then
              _str8597#set_e (read_talkException iprot)
            else
              iprot#skip _t8598)
          | _ -> iprot#skip _t8598);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8597

class loginWithIdentityCredential_args =
object (self)
  val mutable _identityProvider : IdentityProvider.t option = None
  method get_identityProvider = _identityProvider
  method grab_identityProvider = match _identityProvider with None->raise (Field_empty "loginWithIdentityCredential_args.identityProvider") | Some _x8600 -> _x8600
  method set_identityProvider _x8600 = _identityProvider <- Some _x8600
  method unset_identityProvider = _identityProvider <- None
  method reset_identityProvider = _identityProvider <- None

  val mutable _identifier : string option = None
  method get_identifier = _identifier
  method grab_identifier = match _identifier with None->raise (Field_empty "loginWithIdentityCredential_args.identifier") | Some _x8601 -> _x8601
  method set_identifier _x8601 = _identifier <- Some _x8601
  method unset_identifier = _identifier <- None
  method reset_identifier = _identifier <- None

  val mutable _password : string option = None
  method get_password = _password
  method grab_password = match _password with None->raise (Field_empty "loginWithIdentityCredential_args.password") | Some _x8602 -> _x8602
  method set_password _x8602 = _password <- Some _x8602
  method unset_password = _password <- None
  method reset_password = _password <- None

  val mutable _keepLoggedIn : bool option = None
  method get_keepLoggedIn = _keepLoggedIn
  method grab_keepLoggedIn = match _keepLoggedIn with None->raise (Field_empty "loginWithIdentityCredential_args.keepLoggedIn") | Some _x8603 -> _x8603
  method set_keepLoggedIn _x8603 = _keepLoggedIn <- Some _x8603
  method unset_keepLoggedIn = _keepLoggedIn <- None
  method reset_keepLoggedIn = _keepLoggedIn <- None

  val mutable _accessLocation : string option = None
  method get_accessLocation = _accessLocation
  method grab_accessLocation = match _accessLocation with None->raise (Field_empty "loginWithIdentityCredential_args.accessLocation") | Some _x8604 -> _x8604
  method set_accessLocation _x8604 = _accessLocation <- Some _x8604
  method unset_accessLocation = _accessLocation <- None
  method reset_accessLocation = _accessLocation <- None

  val mutable _systemName : string option = None
  method get_systemName = _systemName
  method grab_systemName = match _systemName with None->raise (Field_empty "loginWithIdentityCredential_args.systemName") | Some _x8605 -> _x8605
  method set_systemName _x8605 = _systemName <- Some _x8605
  method unset_systemName = _systemName <- None
  method reset_systemName = _systemName <- None

  val mutable _certificate : string option = None
  method get_certificate = _certificate
  method grab_certificate = match _certificate with None->raise (Field_empty "loginWithIdentityCredential_args.certificate") | Some _x8606 -> _x8606
  method set_certificate _x8606 = _certificate <- Some _x8606
  method unset_certificate = _certificate <- None
  method reset_certificate = _certificate <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithIdentityCredential_args";
    (match _identifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("identifier",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _password with None -> () | Some _v -> 
      oprot#writeFieldBegin("password",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _keepLoggedIn with None -> () | Some _v -> 
      oprot#writeFieldBegin("keepLoggedIn",Protocol.T_BOOL,5);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _accessLocation with None -> () | Some _v -> 
      oprot#writeFieldBegin("accessLocation",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _systemName with None -> () | Some _v -> 
      oprot#writeFieldBegin("systemName",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _identityProvider with None -> () | Some _v -> 
      oprot#writeFieldBegin("identityProvider",Protocol.T_I32,8);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    (match _certificate with None -> () | Some _v -> 
      oprot#writeFieldBegin("certificate",Protocol.T_STRING,9);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithIdentityCredential_args (iprot : Protocol.t) =
  let _str8609 = new loginWithIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8610,_id8611) = iprot#readFieldBegin in
        if _t8610 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8611 with 
          | 8 -> (if _t8610 = Protocol.T_I32 then
              _str8609#set_identityProvider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t8610)
          | 3 -> (if _t8610 = Protocol.T_STRING then
              _str8609#set_identifier iprot#readString
            else
              iprot#skip _t8610)
          | 4 -> (if _t8610 = Protocol.T_STRING then
              _str8609#set_password iprot#readString
            else
              iprot#skip _t8610)
          | 5 -> (if _t8610 = Protocol.T_BOOL then
              _str8609#set_keepLoggedIn iprot#readBool
            else
              iprot#skip _t8610)
          | 6 -> (if _t8610 = Protocol.T_STRING then
              _str8609#set_accessLocation iprot#readString
            else
              iprot#skip _t8610)
          | 7 -> (if _t8610 = Protocol.T_STRING then
              _str8609#set_systemName iprot#readString
            else
              iprot#skip _t8610)
          | 9 -> (if _t8610 = Protocol.T_STRING then
              _str8609#set_certificate iprot#readString
            else
              iprot#skip _t8610)
          | _ -> iprot#skip _t8610);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8609

class loginWithIdentityCredential_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "loginWithIdentityCredential_result.success") | Some _x8612 -> _x8612
  method set_success _x8612 = _success <- Some _x8612
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "loginWithIdentityCredential_result.e") | Some _x8613 -> _x8613
  method set_e _x8613 = _e <- Some _x8613
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithIdentityCredential_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithIdentityCredential_result (iprot : Protocol.t) =
  let _str8616 = new loginWithIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8617,_id8618) = iprot#readFieldBegin in
        if _t8617 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8618 with 
          | 0 -> (if _t8617 = Protocol.T_STRING then
              _str8616#set_success iprot#readString
            else
              iprot#skip _t8617)
          | 1 -> (if _t8617 = Protocol.T_STRUCT then
              _str8616#set_e (read_talkException iprot)
            else
              iprot#skip _t8617)
          | _ -> iprot#skip _t8617);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8616

class loginWithIdentityCredentialForCertificate_args =
object (self)
  val mutable _identityProvider : IdentityProvider.t option = None
  method get_identityProvider = _identityProvider
  method grab_identityProvider = match _identityProvider with None->raise (Field_empty "loginWithIdentityCredentialForCertificate_args.identityProvider") | Some _x8619 -> _x8619
  method set_identityProvider _x8619 = _identityProvider <- Some _x8619
  method unset_identityProvider = _identityProvider <- None
  method reset_identityProvider = _identityProvider <- None

  val mutable _identifier : string option = None
  method get_identifier = _identifier
  method grab_identifier = match _identifier with None->raise (Field_empty "loginWithIdentityCredentialForCertificate_args.identifier") | Some _x8620 -> _x8620
  method set_identifier _x8620 = _identifier <- Some _x8620
  method unset_identifier = _identifier <- None
  method reset_identifier = _identifier <- None

  val mutable _password : string option = None
  method get_password = _password
  method grab_password = match _password with None->raise (Field_empty "loginWithIdentityCredentialForCertificate_args.password") | Some _x8621 -> _x8621
  method set_password _x8621 = _password <- Some _x8621
  method unset_password = _password <- None
  method reset_password = _password <- None

  val mutable _keepLoggedIn : bool option = None
  method get_keepLoggedIn = _keepLoggedIn
  method grab_keepLoggedIn = match _keepLoggedIn with None->raise (Field_empty "loginWithIdentityCredentialForCertificate_args.keepLoggedIn") | Some _x8622 -> _x8622
  method set_keepLoggedIn _x8622 = _keepLoggedIn <- Some _x8622
  method unset_keepLoggedIn = _keepLoggedIn <- None
  method reset_keepLoggedIn = _keepLoggedIn <- None

  val mutable _accessLocation : string option = None
  method get_accessLocation = _accessLocation
  method grab_accessLocation = match _accessLocation with None->raise (Field_empty "loginWithIdentityCredentialForCertificate_args.accessLocation") | Some _x8623 -> _x8623
  method set_accessLocation _x8623 = _accessLocation <- Some _x8623
  method unset_accessLocation = _accessLocation <- None
  method reset_accessLocation = _accessLocation <- None

  val mutable _systemName : string option = None
  method get_systemName = _systemName
  method grab_systemName = match _systemName with None->raise (Field_empty "loginWithIdentityCredentialForCertificate_args.systemName") | Some _x8624 -> _x8624
  method set_systemName _x8624 = _systemName <- Some _x8624
  method unset_systemName = _systemName <- None
  method reset_systemName = _systemName <- None

  val mutable _certificate : string option = None
  method get_certificate = _certificate
  method grab_certificate = match _certificate with None->raise (Field_empty "loginWithIdentityCredentialForCertificate_args.certificate") | Some _x8625 -> _x8625
  method set_certificate _x8625 = _certificate <- Some _x8625
  method unset_certificate = _certificate <- None
  method reset_certificate = _certificate <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithIdentityCredentialForCertificate_args";
    (match _identifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("identifier",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _password with None -> () | Some _v -> 
      oprot#writeFieldBegin("password",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _keepLoggedIn with None -> () | Some _v -> 
      oprot#writeFieldBegin("keepLoggedIn",Protocol.T_BOOL,5);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _accessLocation with None -> () | Some _v -> 
      oprot#writeFieldBegin("accessLocation",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _systemName with None -> () | Some _v -> 
      oprot#writeFieldBegin("systemName",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _identityProvider with None -> () | Some _v -> 
      oprot#writeFieldBegin("identityProvider",Protocol.T_I32,8);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    (match _certificate with None -> () | Some _v -> 
      oprot#writeFieldBegin("certificate",Protocol.T_STRING,9);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithIdentityCredentialForCertificate_args (iprot : Protocol.t) =
  let _str8628 = new loginWithIdentityCredentialForCertificate_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8629,_id8630) = iprot#readFieldBegin in
        if _t8629 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8630 with 
          | 8 -> (if _t8629 = Protocol.T_I32 then
              _str8628#set_identityProvider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t8629)
          | 3 -> (if _t8629 = Protocol.T_STRING then
              _str8628#set_identifier iprot#readString
            else
              iprot#skip _t8629)
          | 4 -> (if _t8629 = Protocol.T_STRING then
              _str8628#set_password iprot#readString
            else
              iprot#skip _t8629)
          | 5 -> (if _t8629 = Protocol.T_BOOL then
              _str8628#set_keepLoggedIn iprot#readBool
            else
              iprot#skip _t8629)
          | 6 -> (if _t8629 = Protocol.T_STRING then
              _str8628#set_accessLocation iprot#readString
            else
              iprot#skip _t8629)
          | 7 -> (if _t8629 = Protocol.T_STRING then
              _str8628#set_systemName iprot#readString
            else
              iprot#skip _t8629)
          | 9 -> (if _t8629 = Protocol.T_STRING then
              _str8628#set_certificate iprot#readString
            else
              iprot#skip _t8629)
          | _ -> iprot#skip _t8629);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8628

class loginWithIdentityCredentialForCertificate_result =
object (self)
  val mutable _success : loginResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "loginWithIdentityCredentialForCertificate_result.success") | Some _x8631 -> _x8631
  method set_success _x8631 = _success <- Some _x8631
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "loginWithIdentityCredentialForCertificate_result.e") | Some _x8632 -> _x8632
  method set_e _x8632 = _e <- Some _x8632
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithIdentityCredentialForCertificate_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithIdentityCredentialForCertificate_result (iprot : Protocol.t) =
  let _str8635 = new loginWithIdentityCredentialForCertificate_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8636,_id8637) = iprot#readFieldBegin in
        if _t8636 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8637 with 
          | 0 -> (if _t8636 = Protocol.T_STRUCT then
              _str8635#set_success (read_loginResult iprot)
            else
              iprot#skip _t8636)
          | 1 -> (if _t8636 = Protocol.T_STRUCT then
              _str8635#set_e (read_talkException iprot)
            else
              iprot#skip _t8636)
          | _ -> iprot#skip _t8636);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8635

class loginWithVerifier_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "loginWithVerifier_args.verifier") | Some _x8638 -> _x8638
  method set_verifier _x8638 = _verifier <- Some _x8638
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithVerifier_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithVerifier_args (iprot : Protocol.t) =
  let _str8641 = new loginWithVerifier_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8642,_id8643) = iprot#readFieldBegin in
        if _t8642 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8643 with 
          | 3 -> (if _t8642 = Protocol.T_STRING then
              _str8641#set_verifier iprot#readString
            else
              iprot#skip _t8642)
          | _ -> iprot#skip _t8642);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8641

class loginWithVerifier_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "loginWithVerifier_result.success") | Some _x8644 -> _x8644
  method set_success _x8644 = _success <- Some _x8644
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "loginWithVerifier_result.e") | Some _x8645 -> _x8645
  method set_e _x8645 = _e <- Some _x8645
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithVerifier_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithVerifier_result (iprot : Protocol.t) =
  let _str8648 = new loginWithVerifier_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8649,_id8650) = iprot#readFieldBegin in
        if _t8649 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8650 with 
          | 0 -> (if _t8649 = Protocol.T_STRING then
              _str8648#set_success iprot#readString
            else
              iprot#skip _t8649)
          | 1 -> (if _t8649 = Protocol.T_STRUCT then
              _str8648#set_e (read_talkException iprot)
            else
              iprot#skip _t8649)
          | _ -> iprot#skip _t8649);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8648

class loginWithVerifierForCerificate_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "loginWithVerifierForCerificate_args.verifier") | Some _x8651 -> _x8651
  method set_verifier _x8651 = _verifier <- Some _x8651
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithVerifierForCerificate_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithVerifierForCerificate_args (iprot : Protocol.t) =
  let _str8654 = new loginWithVerifierForCerificate_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8655,_id8656) = iprot#readFieldBegin in
        if _t8655 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8656 with 
          | 3 -> (if _t8655 = Protocol.T_STRING then
              _str8654#set_verifier iprot#readString
            else
              iprot#skip _t8655)
          | _ -> iprot#skip _t8655);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8654

class loginWithVerifierForCerificate_result =
object (self)
  val mutable _success : loginResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "loginWithVerifierForCerificate_result.success") | Some _x8657 -> _x8657
  method set_success _x8657 = _success <- Some _x8657
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "loginWithVerifierForCerificate_result.e") | Some _x8658 -> _x8658
  method set_e _x8658 = _e <- Some _x8658
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithVerifierForCerificate_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithVerifierForCerificate_result (iprot : Protocol.t) =
  let _str8661 = new loginWithVerifierForCerificate_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8662,_id8663) = iprot#readFieldBegin in
        if _t8662 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8663 with 
          | 0 -> (if _t8662 = Protocol.T_STRUCT then
              _str8661#set_success (read_loginResult iprot)
            else
              iprot#skip _t8662)
          | 1 -> (if _t8662 = Protocol.T_STRUCT then
              _str8661#set_e (read_talkException iprot)
            else
              iprot#skip _t8662)
          | _ -> iprot#skip _t8662);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8661

class loginWithVerifierForCertificate_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "loginWithVerifierForCertificate_args.verifier") | Some _x8664 -> _x8664
  method set_verifier _x8664 = _verifier <- Some _x8664
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithVerifierForCertificate_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithVerifierForCertificate_args (iprot : Protocol.t) =
  let _str8667 = new loginWithVerifierForCertificate_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8668,_id8669) = iprot#readFieldBegin in
        if _t8668 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8669 with 
          | 3 -> (if _t8668 = Protocol.T_STRING then
              _str8667#set_verifier iprot#readString
            else
              iprot#skip _t8668)
          | _ -> iprot#skip _t8668);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8667

class loginWithVerifierForCertificate_result =
object (self)
  val mutable _success : loginResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "loginWithVerifierForCertificate_result.success") | Some _x8670 -> _x8670
  method set_success _x8670 = _success <- Some _x8670
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "loginWithVerifierForCertificate_result.e") | Some _x8671 -> _x8671
  method set_e _x8671 = _e <- Some _x8671
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "loginWithVerifierForCertificate_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_loginWithVerifierForCertificate_result (iprot : Protocol.t) =
  let _str8674 = new loginWithVerifierForCertificate_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8675,_id8676) = iprot#readFieldBegin in
        if _t8675 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8676 with 
          | 0 -> (if _t8675 = Protocol.T_STRUCT then
              _str8674#set_success (read_loginResult iprot)
            else
              iprot#skip _t8675)
          | 1 -> (if _t8675 = Protocol.T_STRUCT then
              _str8674#set_e (read_talkException iprot)
            else
              iprot#skip _t8675)
          | _ -> iprot#skip _t8675);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8674

class logout_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "logout_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_logout_args (iprot : Protocol.t) =
  let _str8679 = new logout_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8680,_id8681) = iprot#readFieldBegin in
        if _t8680 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8681 with 
          | _ -> iprot#skip _t8680);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8679

class logout_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "logout_result.e") | Some _x8682 -> _x8682
  method set_e _x8682 = _e <- Some _x8682
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "logout_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_logout_result (iprot : Protocol.t) =
  let _str8685 = new logout_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8686,_id8687) = iprot#readFieldBegin in
        if _t8686 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8687 with 
          | 1 -> (if _t8686 = Protocol.T_STRUCT then
              _str8685#set_e (read_talkException iprot)
            else
              iprot#skip _t8686)
          | _ -> iprot#skip _t8686);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8685

class logoutSession_args =
object (self)
  val mutable _tokenKey : string option = None
  method get_tokenKey = _tokenKey
  method grab_tokenKey = match _tokenKey with None->raise (Field_empty "logoutSession_args.tokenKey") | Some _x8688 -> _x8688
  method set_tokenKey _x8688 = _tokenKey <- Some _x8688
  method unset_tokenKey = _tokenKey <- None
  method reset_tokenKey = _tokenKey <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "logoutSession_args";
    (match _tokenKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("tokenKey",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_logoutSession_args (iprot : Protocol.t) =
  let _str8691 = new logoutSession_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8692,_id8693) = iprot#readFieldBegin in
        if _t8692 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8693 with 
          | 2 -> (if _t8692 = Protocol.T_STRING then
              _str8691#set_tokenKey iprot#readString
            else
              iprot#skip _t8692)
          | _ -> iprot#skip _t8692);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8691

class logoutSession_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "logoutSession_result.e") | Some _x8694 -> _x8694
  method set_e _x8694 = _e <- Some _x8694
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "logoutSession_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_logoutSession_result (iprot : Protocol.t) =
  let _str8697 = new logoutSession_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8698,_id8699) = iprot#readFieldBegin in
        if _t8698 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8699 with 
          | 1 -> (if _t8698 = Protocol.T_STRUCT then
              _str8697#set_e (read_talkException iprot)
            else
              iprot#skip _t8698)
          | _ -> iprot#skip _t8698);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8697

class noop_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "noop_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_noop_args (iprot : Protocol.t) =
  let _str8702 = new noop_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8703,_id8704) = iprot#readFieldBegin in
        if _t8703 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8704 with 
          | _ -> iprot#skip _t8703);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8702

class noop_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "noop_result.e") | Some _x8705 -> _x8705
  method set_e _x8705 = _e <- Some _x8705
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "noop_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_noop_result (iprot : Protocol.t) =
  let _str8708 = new noop_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8709,_id8710) = iprot#readFieldBegin in
        if _t8709 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8710 with 
          | 1 -> (if _t8709 = Protocol.T_STRUCT then
              _str8708#set_e (read_talkException iprot)
            else
              iprot#skip _t8709)
          | _ -> iprot#skip _t8709);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8708

class notifiedRedirect_args =
object (self)
  val mutable _paramMap : (string,string) Hashtbl.t option = None
  method get_paramMap = _paramMap
  method grab_paramMap = match _paramMap with None->raise (Field_empty "notifiedRedirect_args.paramMap") | Some _x8711 -> _x8711
  method set_paramMap _x8711 = _paramMap <- Some _x8711
  method unset_paramMap = _paramMap <- None
  method reset_paramMap = _paramMap <- None

  method copy =
      let _new = Oo.copy self in
      if _paramMap <> None then
        _new#set_paramMap (Hashtbl.copy self#grab_paramMap);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifiedRedirect_args";
    (match _paramMap with None -> () | Some _v -> 
      oprot#writeFieldBegin("paramMap",Protocol.T_MAP,2);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter8714 -> fun _viter8715 -> 
        oprot#writeString(_kiter8714);
        oprot#writeString(_viter8715);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifiedRedirect_args (iprot : Protocol.t) =
  let _str8716 = new notifiedRedirect_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8717,_id8718) = iprot#readFieldBegin in
        if _t8717 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8718 with 
          | 2 -> (if _t8717 = Protocol.T_MAP then
              _str8716#set_paramMap 
                (let (_ktype8720,_vtype8721,_size8719) = iprot#readMapBegin in
                let _con8723 = Hashtbl.create _size8719 in
                  for i = 1 to _size8719 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con8723 _k _v
                  done; iprot#readMapEnd; _con8723)
            else
              iprot#skip _t8717)
          | _ -> iprot#skip _t8717);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8716

class notifiedRedirect_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifiedRedirect_result.e") | Some _x8724 -> _x8724
  method set_e _x8724 = _e <- Some _x8724
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifiedRedirect_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifiedRedirect_result (iprot : Protocol.t) =
  let _str8727 = new notifiedRedirect_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8728,_id8729) = iprot#readFieldBegin in
        if _t8728 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8729 with 
          | 1 -> (if _t8728 = Protocol.T_STRUCT then
              _str8727#set_e (read_talkException iprot)
            else
              iprot#skip _t8728)
          | _ -> iprot#skip _t8728);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8727

class notifyBuddyOnAir_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "notifyBuddyOnAir_args.seq") | Some _x8730 -> _x8730
  method set_seq _x8730 = _seq <- Some _x8730
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _receiverMids : string list option = None
  method get_receiverMids = _receiverMids
  method grab_receiverMids = match _receiverMids with None->raise (Field_empty "notifyBuddyOnAir_args.receiverMids") | Some _x8731 -> _x8731
  method set_receiverMids _x8731 = _receiverMids <- Some _x8731
  method unset_receiverMids = _receiverMids <- None
  method reset_receiverMids = _receiverMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyBuddyOnAir_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _receiverMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("receiverMids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8734 ->         oprot#writeString(_iter8734);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyBuddyOnAir_args (iprot : Protocol.t) =
  let _str8735 = new notifyBuddyOnAir_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8736,_id8737) = iprot#readFieldBegin in
        if _t8736 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8737 with 
          | 1 -> (if _t8736 = Protocol.T_I32 then
              _str8735#set_seq iprot#readI32
            else
              iprot#skip _t8736)
          | 2 -> (if _t8736 = Protocol.T_LIST then
              _str8735#set_receiverMids 
                (let (_etype8741,_size8738) = iprot#readListBegin in
                  let _con8742 = (Array.to_list (Array.init _size8738 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8742)
            else
              iprot#skip _t8736)
          | _ -> iprot#skip _t8736);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8735

class notifyBuddyOnAir_result =
object (self)
  val mutable _success : (string,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "notifyBuddyOnAir_result.success") | Some _x8743 -> _x8743
  method set_success _x8743 = _success <- Some _x8743
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyBuddyOnAir_result.e") | Some _x8744 -> _x8744
  method set_e _x8744 = _e <- Some _x8744
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyBuddyOnAir_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter8747 -> fun _viter8748 -> 
        oprot#writeString(_kiter8747);
        oprot#writeString(_viter8748);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyBuddyOnAir_result (iprot : Protocol.t) =
  let _str8749 = new notifyBuddyOnAir_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8750,_id8751) = iprot#readFieldBegin in
        if _t8750 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8751 with 
          | 0 -> (if _t8750 = Protocol.T_MAP then
              _str8749#set_success 
                (let (_ktype8753,_vtype8754,_size8752) = iprot#readMapBegin in
                let _con8756 = Hashtbl.create _size8752 in
                  for i = 1 to _size8752 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con8756 _k _v
                  done; iprot#readMapEnd; _con8756)
            else
              iprot#skip _t8750)
          | 1 -> (if _t8750 = Protocol.T_STRUCT then
              _str8749#set_e (read_talkException iprot)
            else
              iprot#skip _t8750)
          | _ -> iprot#skip _t8750);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8749

class notifyIndividualEvent_args =
object (self)
  val mutable _notificationStatus : NotificationStatus.t option = None
  method get_notificationStatus = _notificationStatus
  method grab_notificationStatus = match _notificationStatus with None->raise (Field_empty "notifyIndividualEvent_args.notificationStatus") | Some _x8757 -> _x8757
  method set_notificationStatus _x8757 = _notificationStatus <- Some _x8757
  method unset_notificationStatus = _notificationStatus <- None
  method reset_notificationStatus = _notificationStatus <- None

  val mutable _receiverMids : string list option = None
  method get_receiverMids = _receiverMids
  method grab_receiverMids = match _receiverMids with None->raise (Field_empty "notifyIndividualEvent_args.receiverMids") | Some _x8758 -> _x8758
  method set_receiverMids _x8758 = _receiverMids <- Some _x8758
  method unset_receiverMids = _receiverMids <- None
  method reset_receiverMids = _receiverMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyIndividualEvent_args";
    (match _notificationStatus with None -> () | Some _v -> 
      oprot#writeFieldBegin("notificationStatus",Protocol.T_I32,2);
      oprot#writeI32(NotificationStatus.to_i _v);
      oprot#writeFieldEnd
    );
    (match _receiverMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("receiverMids",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter8761 ->         oprot#writeString(_iter8761);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyIndividualEvent_args (iprot : Protocol.t) =
  let _str8762 = new notifyIndividualEvent_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8763,_id8764) = iprot#readFieldBegin in
        if _t8763 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8764 with 
          | 2 -> (if _t8763 = Protocol.T_I32 then
              _str8762#set_notificationStatus (NotificationStatus.of_i iprot#readI32)
            else
              iprot#skip _t8763)
          | 3 -> (if _t8763 = Protocol.T_LIST then
              _str8762#set_receiverMids 
                (let (_etype8768,_size8765) = iprot#readListBegin in
                  let _con8769 = (Array.to_list (Array.init _size8765 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con8769)
            else
              iprot#skip _t8763)
          | _ -> iprot#skip _t8763);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8762

class notifyIndividualEvent_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyIndividualEvent_result.e") | Some _x8770 -> _x8770
  method set_e _x8770 = _e <- Some _x8770
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyIndividualEvent_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyIndividualEvent_result (iprot : Protocol.t) =
  let _str8773 = new notifyIndividualEvent_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8774,_id8775) = iprot#readFieldBegin in
        if _t8774 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8775 with 
          | 1 -> (if _t8774 = Protocol.T_STRUCT then
              _str8773#set_e (read_talkException iprot)
            else
              iprot#skip _t8774)
          | _ -> iprot#skip _t8774);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8773

class notifyInstalled_args =
object (self)
  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "notifyInstalled_args.udidHash") | Some _x8776 -> _x8776
  method set_udidHash _x8776 = _udidHash <- Some _x8776
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _applicationTypeWithExtensions : string option = None
  method get_applicationTypeWithExtensions = _applicationTypeWithExtensions
  method grab_applicationTypeWithExtensions = match _applicationTypeWithExtensions with None->raise (Field_empty "notifyInstalled_args.applicationTypeWithExtensions") | Some _x8777 -> _x8777
  method set_applicationTypeWithExtensions _x8777 = _applicationTypeWithExtensions <- Some _x8777
  method unset_applicationTypeWithExtensions = _applicationTypeWithExtensions <- None
  method reset_applicationTypeWithExtensions = _applicationTypeWithExtensions <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyInstalled_args";
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _applicationTypeWithExtensions with None -> () | Some _v -> 
      oprot#writeFieldBegin("applicationTypeWithExtensions",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyInstalled_args (iprot : Protocol.t) =
  let _str8780 = new notifyInstalled_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8781,_id8782) = iprot#readFieldBegin in
        if _t8781 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8782 with 
          | 2 -> (if _t8781 = Protocol.T_STRING then
              _str8780#set_udidHash iprot#readString
            else
              iprot#skip _t8781)
          | 3 -> (if _t8781 = Protocol.T_STRING then
              _str8780#set_applicationTypeWithExtensions iprot#readString
            else
              iprot#skip _t8781)
          | _ -> iprot#skip _t8781);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8780

class notifyInstalled_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyInstalled_result.e") | Some _x8783 -> _x8783
  method set_e _x8783 = _e <- Some _x8783
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyInstalled_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyInstalled_result (iprot : Protocol.t) =
  let _str8786 = new notifyInstalled_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8787,_id8788) = iprot#readFieldBegin in
        if _t8787 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8788 with 
          | 1 -> (if _t8787 = Protocol.T_STRUCT then
              _str8786#set_e (read_talkException iprot)
            else
              iprot#skip _t8787)
          | _ -> iprot#skip _t8787);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8786

class notifyRegistrationComplete_args =
object (self)
  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "notifyRegistrationComplete_args.udidHash") | Some _x8789 -> _x8789
  method set_udidHash _x8789 = _udidHash <- Some _x8789
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _applicationTypeWithExtensions : string option = None
  method get_applicationTypeWithExtensions = _applicationTypeWithExtensions
  method grab_applicationTypeWithExtensions = match _applicationTypeWithExtensions with None->raise (Field_empty "notifyRegistrationComplete_args.applicationTypeWithExtensions") | Some _x8790 -> _x8790
  method set_applicationTypeWithExtensions _x8790 = _applicationTypeWithExtensions <- Some _x8790
  method unset_applicationTypeWithExtensions = _applicationTypeWithExtensions <- None
  method reset_applicationTypeWithExtensions = _applicationTypeWithExtensions <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyRegistrationComplete_args";
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _applicationTypeWithExtensions with None -> () | Some _v -> 
      oprot#writeFieldBegin("applicationTypeWithExtensions",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyRegistrationComplete_args (iprot : Protocol.t) =
  let _str8793 = new notifyRegistrationComplete_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8794,_id8795) = iprot#readFieldBegin in
        if _t8794 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8795 with 
          | 2 -> (if _t8794 = Protocol.T_STRING then
              _str8793#set_udidHash iprot#readString
            else
              iprot#skip _t8794)
          | 3 -> (if _t8794 = Protocol.T_STRING then
              _str8793#set_applicationTypeWithExtensions iprot#readString
            else
              iprot#skip _t8794)
          | _ -> iprot#skip _t8794);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8793

class notifyRegistrationComplete_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyRegistrationComplete_result.e") | Some _x8796 -> _x8796
  method set_e _x8796 = _e <- Some _x8796
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyRegistrationComplete_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyRegistrationComplete_result (iprot : Protocol.t) =
  let _str8799 = new notifyRegistrationComplete_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8800,_id8801) = iprot#readFieldBegin in
        if _t8800 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8801 with 
          | 1 -> (if _t8800 = Protocol.T_STRUCT then
              _str8799#set_e (read_talkException iprot)
            else
              iprot#skip _t8800)
          | _ -> iprot#skip _t8800);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8799

class notifySleep_args =
object (self)
  val mutable _lastRev : Int64.t option = None
  method get_lastRev = _lastRev
  method grab_lastRev = match _lastRev with None->raise (Field_empty "notifySleep_args.lastRev") | Some _x8802 -> _x8802
  method set_lastRev _x8802 = _lastRev <- Some _x8802
  method unset_lastRev = _lastRev <- None
  method reset_lastRev = _lastRev <- None

  val mutable _badge : Int32.t option = None
  method get_badge = _badge
  method grab_badge = match _badge with None->raise (Field_empty "notifySleep_args.badge") | Some _x8803 -> _x8803
  method set_badge _x8803 = _badge <- Some _x8803
  method unset_badge = _badge <- None
  method reset_badge = _badge <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifySleep_args";
    (match _lastRev with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastRev",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _badge with None -> () | Some _v -> 
      oprot#writeFieldBegin("badge",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifySleep_args (iprot : Protocol.t) =
  let _str8806 = new notifySleep_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8807,_id8808) = iprot#readFieldBegin in
        if _t8807 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8808 with 
          | 2 -> (if _t8807 = Protocol.T_I64 then
              _str8806#set_lastRev iprot#readI64
            else
              iprot#skip _t8807)
          | 3 -> (if _t8807 = Protocol.T_I32 then
              _str8806#set_badge iprot#readI32
            else
              iprot#skip _t8807)
          | _ -> iprot#skip _t8807);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8806

class notifySleep_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifySleep_result.e") | Some _x8809 -> _x8809
  method set_e _x8809 = _e <- Some _x8809
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifySleep_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifySleep_result (iprot : Protocol.t) =
  let _str8812 = new notifySleep_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8813,_id8814) = iprot#readFieldBegin in
        if _t8813 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8814 with 
          | 1 -> (if _t8813 = Protocol.T_STRUCT then
              _str8812#set_e (read_talkException iprot)
            else
              iprot#skip _t8813)
          | _ -> iprot#skip _t8813);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8812

class notifyUpdated_args =
object (self)
  val mutable _lastRev : Int64.t option = None
  method get_lastRev = _lastRev
  method grab_lastRev = match _lastRev with None->raise (Field_empty "notifyUpdated_args.lastRev") | Some _x8815 -> _x8815
  method set_lastRev _x8815 = _lastRev <- Some _x8815
  method unset_lastRev = _lastRev <- None
  method reset_lastRev = _lastRev <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "notifyUpdated_args.deviceInfo") | Some _x8816 -> _x8816
  method set_deviceInfo _x8816 = _deviceInfo <- Some _x8816
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  method copy =
      let _new = Oo.copy self in
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyUpdated_args";
    (match _lastRev with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastRev",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,3);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyUpdated_args (iprot : Protocol.t) =
  let _str8819 = new notifyUpdated_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8820,_id8821) = iprot#readFieldBegin in
        if _t8820 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8821 with 
          | 2 -> (if _t8820 = Protocol.T_I64 then
              _str8819#set_lastRev iprot#readI64
            else
              iprot#skip _t8820)
          | 3 -> (if _t8820 = Protocol.T_STRUCT then
              _str8819#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t8820)
          | _ -> iprot#skip _t8820);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8819

class notifyUpdated_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyUpdated_result.e") | Some _x8822 -> _x8822
  method set_e _x8822 = _e <- Some _x8822
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyUpdated_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyUpdated_result (iprot : Protocol.t) =
  let _str8825 = new notifyUpdated_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8826,_id8827) = iprot#readFieldBegin in
        if _t8826 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8827 with 
          | 1 -> (if _t8826 = Protocol.T_STRUCT then
              _str8825#set_e (read_talkException iprot)
            else
              iprot#skip _t8826)
          | _ -> iprot#skip _t8826);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8825

class openProximityMatch_args =
object (self)
  val mutable _location : location option = None
  method get_location = _location
  method grab_location = match _location with None->raise (Field_empty "openProximityMatch_args.location") | Some _x8828 -> _x8828
  method set_location _x8828 = _location <- Some _x8828
  method unset_location = _location <- None
  method reset_location = _location <- None

  method copy =
      let _new = Oo.copy self in
      if _location <> None then
        _new#set_location self#grab_location#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "openProximityMatch_args";
    (match _location with None -> () | Some _v -> 
      oprot#writeFieldBegin("location",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_openProximityMatch_args (iprot : Protocol.t) =
  let _str8831 = new openProximityMatch_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8832,_id8833) = iprot#readFieldBegin in
        if _t8832 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8833 with 
          | 2 -> (if _t8832 = Protocol.T_STRUCT then
              _str8831#set_location (read_location iprot)
            else
              iprot#skip _t8832)
          | _ -> iprot#skip _t8832);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8831

class openProximityMatch_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "openProximityMatch_result.success") | Some _x8834 -> _x8834
  method set_success _x8834 = _success <- Some _x8834
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "openProximityMatch_result.e") | Some _x8835 -> _x8835
  method set_e _x8835 = _e <- Some _x8835
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "openProximityMatch_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_openProximityMatch_result (iprot : Protocol.t) =
  let _str8838 = new openProximityMatch_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8839,_id8840) = iprot#readFieldBegin in
        if _t8839 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8840 with 
          | 0 -> (if _t8839 = Protocol.T_STRING then
              _str8838#set_success iprot#readString
            else
              iprot#skip _t8839)
          | 1 -> (if _t8839 = Protocol.T_STRUCT then
              _str8838#set_e (read_talkException iprot)
            else
              iprot#skip _t8839)
          | _ -> iprot#skip _t8839);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8838

class registerBuddyUser_args =
object (self)
  val mutable _buddyId : string option = None
  method get_buddyId = _buddyId
  method grab_buddyId = match _buddyId with None->raise (Field_empty "registerBuddyUser_args.buddyId") | Some _x8841 -> _x8841
  method set_buddyId _x8841 = _buddyId <- Some _x8841
  method unset_buddyId = _buddyId <- None
  method reset_buddyId = _buddyId <- None

  val mutable _registrarPassword : string option = None
  method get_registrarPassword = _registrarPassword
  method grab_registrarPassword = match _registrarPassword with None->raise (Field_empty "registerBuddyUser_args.registrarPassword") | Some _x8842 -> _x8842
  method set_registrarPassword _x8842 = _registrarPassword <- Some _x8842
  method unset_registrarPassword = _registrarPassword <- None
  method reset_registrarPassword = _registrarPassword <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerBuddyUser_args";
    (match _buddyId with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _registrarPassword with None -> () | Some _v -> 
      oprot#writeFieldBegin("registrarPassword",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerBuddyUser_args (iprot : Protocol.t) =
  let _str8845 = new registerBuddyUser_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8846,_id8847) = iprot#readFieldBegin in
        if _t8846 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8847 with 
          | 2 -> (if _t8846 = Protocol.T_STRING then
              _str8845#set_buddyId iprot#readString
            else
              iprot#skip _t8846)
          | 3 -> (if _t8846 = Protocol.T_STRING then
              _str8845#set_registrarPassword iprot#readString
            else
              iprot#skip _t8846)
          | _ -> iprot#skip _t8846);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8845

class registerBuddyUser_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerBuddyUser_result.success") | Some _x8848 -> _x8848
  method set_success _x8848 = _success <- Some _x8848
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerBuddyUser_result.e") | Some _x8849 -> _x8849
  method set_e _x8849 = _e <- Some _x8849
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerBuddyUser_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerBuddyUser_result (iprot : Protocol.t) =
  let _str8852 = new registerBuddyUser_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8853,_id8854) = iprot#readFieldBegin in
        if _t8853 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8854 with 
          | 0 -> (if _t8853 = Protocol.T_STRING then
              _str8852#set_success iprot#readString
            else
              iprot#skip _t8853)
          | 1 -> (if _t8853 = Protocol.T_STRUCT then
              _str8852#set_e (read_talkException iprot)
            else
              iprot#skip _t8853)
          | _ -> iprot#skip _t8853);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8852

class registerBuddyUserid_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "registerBuddyUserid_args.seq") | Some _x8855 -> _x8855
  method set_seq _x8855 = _seq <- Some _x8855
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _userid : string option = None
  method get_userid = _userid
  method grab_userid = match _userid with None->raise (Field_empty "registerBuddyUserid_args.userid") | Some _x8856 -> _x8856
  method set_userid _x8856 = _userid <- Some _x8856
  method unset_userid = _userid <- None
  method reset_userid = _userid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerBuddyUserid_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,2);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _userid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userid",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerBuddyUserid_args (iprot : Protocol.t) =
  let _str8859 = new registerBuddyUserid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8860,_id8861) = iprot#readFieldBegin in
        if _t8860 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8861 with 
          | 2 -> (if _t8860 = Protocol.T_I32 then
              _str8859#set_seq iprot#readI32
            else
              iprot#skip _t8860)
          | 3 -> (if _t8860 = Protocol.T_STRING then
              _str8859#set_userid iprot#readString
            else
              iprot#skip _t8860)
          | _ -> iprot#skip _t8860);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8859

class registerBuddyUserid_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerBuddyUserid_result.e") | Some _x8862 -> _x8862
  method set_e _x8862 = _e <- Some _x8862
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerBuddyUserid_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerBuddyUserid_result (iprot : Protocol.t) =
  let _str8865 = new registerBuddyUserid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8866,_id8867) = iprot#readFieldBegin in
        if _t8866 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8867 with 
          | 1 -> (if _t8866 = Protocol.T_STRUCT then
              _str8865#set_e (read_talkException iprot)
            else
              iprot#skip _t8866)
          | _ -> iprot#skip _t8866);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8865

class registerDevice_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "registerDevice_args.sessionId") | Some _x8868 -> _x8868
  method set_sessionId _x8868 = _sessionId <- Some _x8868
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerDevice_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerDevice_args (iprot : Protocol.t) =
  let _str8871 = new registerDevice_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8872,_id8873) = iprot#readFieldBegin in
        if _t8872 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8873 with 
          | 2 -> (if _t8872 = Protocol.T_STRING then
              _str8871#set_sessionId iprot#readString
            else
              iprot#skip _t8872)
          | _ -> iprot#skip _t8872);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8871

class registerDevice_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerDevice_result.success") | Some _x8874 -> _x8874
  method set_success _x8874 = _success <- Some _x8874
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerDevice_result.e") | Some _x8875 -> _x8875
  method set_e _x8875 = _e <- Some _x8875
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerDevice_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerDevice_result (iprot : Protocol.t) =
  let _str8878 = new registerDevice_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8879,_id8880) = iprot#readFieldBegin in
        if _t8879 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8880 with 
          | 0 -> (if _t8879 = Protocol.T_STRING then
              _str8878#set_success iprot#readString
            else
              iprot#skip _t8879)
          | 1 -> (if _t8879 = Protocol.T_STRUCT then
              _str8878#set_e (read_talkException iprot)
            else
              iprot#skip _t8879)
          | _ -> iprot#skip _t8879);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8878

class registerDeviceWithIdentityCredential_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "registerDeviceWithIdentityCredential_args.sessionId") | Some _x8881 -> _x8881
  method set_sessionId _x8881 = _sessionId <- Some _x8881
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  val mutable _provider : IdentityProvider.t option = None
  method get_provider = _provider
  method grab_provider = match _provider with None->raise (Field_empty "registerDeviceWithIdentityCredential_args.provider") | Some _x8882 -> _x8882
  method set_provider _x8882 = _provider <- Some _x8882
  method unset_provider = _provider <- None
  method reset_provider = _provider <- None

  val mutable _identifier : string option = None
  method get_identifier = _identifier
  method grab_identifier = match _identifier with None->raise (Field_empty "registerDeviceWithIdentityCredential_args.identifier") | Some _x8883 -> _x8883
  method set_identifier _x8883 = _identifier <- Some _x8883
  method unset_identifier = _identifier <- None
  method reset_identifier = _identifier <- None

  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "registerDeviceWithIdentityCredential_args.verifier") | Some _x8884 -> _x8884
  method set_verifier _x8884 = _verifier <- Some _x8884
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerDeviceWithIdentityCredential_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _identifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("identifier",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _provider with None -> () | Some _v -> 
      oprot#writeFieldBegin("provider",Protocol.T_I32,5);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerDeviceWithIdentityCredential_args (iprot : Protocol.t) =
  let _str8887 = new registerDeviceWithIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8888,_id8889) = iprot#readFieldBegin in
        if _t8888 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8889 with 
          | 2 -> (if _t8888 = Protocol.T_STRING then
              _str8887#set_sessionId iprot#readString
            else
              iprot#skip _t8888)
          | 5 -> (if _t8888 = Protocol.T_I32 then
              _str8887#set_provider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t8888)
          | 3 -> (if _t8888 = Protocol.T_STRING then
              _str8887#set_identifier iprot#readString
            else
              iprot#skip _t8888)
          | 4 -> (if _t8888 = Protocol.T_STRING then
              _str8887#set_verifier iprot#readString
            else
              iprot#skip _t8888)
          | _ -> iprot#skip _t8888);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8887

class registerDeviceWithIdentityCredential_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerDeviceWithIdentityCredential_result.success") | Some _x8890 -> _x8890
  method set_success _x8890 = _success <- Some _x8890
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerDeviceWithIdentityCredential_result.e") | Some _x8891 -> _x8891
  method set_e _x8891 = _e <- Some _x8891
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerDeviceWithIdentityCredential_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerDeviceWithIdentityCredential_result (iprot : Protocol.t) =
  let _str8894 = new registerDeviceWithIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8895,_id8896) = iprot#readFieldBegin in
        if _t8895 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8896 with 
          | 0 -> (if _t8895 = Protocol.T_STRING then
              _str8894#set_success iprot#readString
            else
              iprot#skip _t8895)
          | 1 -> (if _t8895 = Protocol.T_STRUCT then
              _str8894#set_e (read_talkException iprot)
            else
              iprot#skip _t8895)
          | _ -> iprot#skip _t8895);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8894

class registerDeviceWithoutPhoneNumber_args =
object (self)
  val mutable _region : string option = None
  method get_region = _region
  method grab_region = match _region with None->raise (Field_empty "registerDeviceWithoutPhoneNumber_args.region") | Some _x8897 -> _x8897
  method set_region _x8897 = _region <- Some _x8897
  method unset_region = _region <- None
  method reset_region = _region <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "registerDeviceWithoutPhoneNumber_args.udidHash") | Some _x8898 -> _x8898
  method set_udidHash _x8898 = _udidHash <- Some _x8898
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "registerDeviceWithoutPhoneNumber_args.deviceInfo") | Some _x8899 -> _x8899
  method set_deviceInfo _x8899 = _deviceInfo <- Some _x8899
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  method copy =
      let _new = Oo.copy self in
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerDeviceWithoutPhoneNumber_args";
    (match _region with None -> () | Some _v -> 
      oprot#writeFieldBegin("region",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,4);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerDeviceWithoutPhoneNumber_args (iprot : Protocol.t) =
  let _str8902 = new registerDeviceWithoutPhoneNumber_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8903,_id8904) = iprot#readFieldBegin in
        if _t8903 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8904 with 
          | 2 -> (if _t8903 = Protocol.T_STRING then
              _str8902#set_region iprot#readString
            else
              iprot#skip _t8903)
          | 3 -> (if _t8903 = Protocol.T_STRING then
              _str8902#set_udidHash iprot#readString
            else
              iprot#skip _t8903)
          | 4 -> (if _t8903 = Protocol.T_STRUCT then
              _str8902#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t8903)
          | _ -> iprot#skip _t8903);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8902

class registerDeviceWithoutPhoneNumber_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerDeviceWithoutPhoneNumber_result.success") | Some _x8905 -> _x8905
  method set_success _x8905 = _success <- Some _x8905
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerDeviceWithoutPhoneNumber_result.e") | Some _x8906 -> _x8906
  method set_e _x8906 = _e <- Some _x8906
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerDeviceWithoutPhoneNumber_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerDeviceWithoutPhoneNumber_result (iprot : Protocol.t) =
  let _str8909 = new registerDeviceWithoutPhoneNumber_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8910,_id8911) = iprot#readFieldBegin in
        if _t8910 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8911 with 
          | 0 -> (if _t8910 = Protocol.T_STRING then
              _str8909#set_success iprot#readString
            else
              iprot#skip _t8910)
          | 1 -> (if _t8910 = Protocol.T_STRUCT then
              _str8909#set_e (read_talkException iprot)
            else
              iprot#skip _t8910)
          | _ -> iprot#skip _t8910);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8909

class registerDeviceWithoutPhoneNumberWithIdentityCredential_args =
object (self)
  val mutable _region : string option = None
  method get_region = _region
  method grab_region = match _region with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_args.region") | Some _x8912 -> _x8912
  method set_region _x8912 = _region <- Some _x8912
  method unset_region = _region <- None
  method reset_region = _region <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_args.udidHash") | Some _x8913 -> _x8913
  method set_udidHash _x8913 = _udidHash <- Some _x8913
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_args.deviceInfo") | Some _x8914 -> _x8914
  method set_deviceInfo _x8914 = _deviceInfo <- Some _x8914
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  val mutable _provider : IdentityProvider.t option = None
  method get_provider = _provider
  method grab_provider = match _provider with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_args.provider") | Some _x8915 -> _x8915
  method set_provider _x8915 = _provider <- Some _x8915
  method unset_provider = _provider <- None
  method reset_provider = _provider <- None

  val mutable _identifier : string option = None
  method get_identifier = _identifier
  method grab_identifier = match _identifier with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_args.identifier") | Some _x8916 -> _x8916
  method set_identifier _x8916 = _identifier <- Some _x8916
  method unset_identifier = _identifier <- None
  method reset_identifier = _identifier <- None

  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_args.verifier") | Some _x8917 -> _x8917
  method set_verifier _x8917 = _verifier <- Some _x8917
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_args.mid") | Some _x8918 -> _x8918
  method set_mid _x8918 = _mid <- Some _x8918
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  val mutable _migrationPincodeSessionId : string option = None
  method get_migrationPincodeSessionId = _migrationPincodeSessionId
  method grab_migrationPincodeSessionId = match _migrationPincodeSessionId with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_args.migrationPincodeSessionId") | Some _x8919 -> _x8919
  method set_migrationPincodeSessionId _x8919 = _migrationPincodeSessionId <- Some _x8919
  method unset_migrationPincodeSessionId = _migrationPincodeSessionId <- None
  method reset_migrationPincodeSessionId = _migrationPincodeSessionId <- None

  method copy =
      let _new = Oo.copy self in
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerDeviceWithoutPhoneNumberWithIdentityCredential_args";
    (match _region with None -> () | Some _v -> 
      oprot#writeFieldBegin("region",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,4);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _provider with None -> () | Some _v -> 
      oprot#writeFieldBegin("provider",Protocol.T_I32,5);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    (match _identifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("identifier",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,8);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _migrationPincodeSessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("migrationPincodeSessionId",Protocol.T_STRING,9);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerDeviceWithoutPhoneNumberWithIdentityCredential_args (iprot : Protocol.t) =
  let _str8922 = new registerDeviceWithoutPhoneNumberWithIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8923,_id8924) = iprot#readFieldBegin in
        if _t8923 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8924 with 
          | 2 -> (if _t8923 = Protocol.T_STRING then
              _str8922#set_region iprot#readString
            else
              iprot#skip _t8923)
          | 3 -> (if _t8923 = Protocol.T_STRING then
              _str8922#set_udidHash iprot#readString
            else
              iprot#skip _t8923)
          | 4 -> (if _t8923 = Protocol.T_STRUCT then
              _str8922#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t8923)
          | 5 -> (if _t8923 = Protocol.T_I32 then
              _str8922#set_provider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t8923)
          | 6 -> (if _t8923 = Protocol.T_STRING then
              _str8922#set_identifier iprot#readString
            else
              iprot#skip _t8923)
          | 7 -> (if _t8923 = Protocol.T_STRING then
              _str8922#set_verifier iprot#readString
            else
              iprot#skip _t8923)
          | 8 -> (if _t8923 = Protocol.T_STRING then
              _str8922#set_mid iprot#readString
            else
              iprot#skip _t8923)
          | 9 -> (if _t8923 = Protocol.T_STRING then
              _str8922#set_migrationPincodeSessionId iprot#readString
            else
              iprot#skip _t8923)
          | _ -> iprot#skip _t8923);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8922

class registerDeviceWithoutPhoneNumberWithIdentityCredential_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_result.success") | Some _x8925 -> _x8925
  method set_success _x8925 = _success <- Some _x8925
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerDeviceWithoutPhoneNumberWithIdentityCredential_result.e") | Some _x8926 -> _x8926
  method set_e _x8926 = _e <- Some _x8926
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerDeviceWithoutPhoneNumberWithIdentityCredential_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerDeviceWithoutPhoneNumberWithIdentityCredential_result (iprot : Protocol.t) =
  let _str8929 = new registerDeviceWithoutPhoneNumberWithIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8930,_id8931) = iprot#readFieldBegin in
        if _t8930 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8931 with 
          | 0 -> (if _t8930 = Protocol.T_STRING then
              _str8929#set_success iprot#readString
            else
              iprot#skip _t8930)
          | 1 -> (if _t8930 = Protocol.T_STRUCT then
              _str8929#set_e (read_talkException iprot)
            else
              iprot#skip _t8930)
          | _ -> iprot#skip _t8930);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8929

class registerUserid_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "registerUserid_args.reqSeq") | Some _x8932 -> _x8932
  method set_reqSeq _x8932 = _reqSeq <- Some _x8932
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _userid : string option = None
  method get_userid = _userid
  method grab_userid = match _userid with None->raise (Field_empty "registerUserid_args.userid") | Some _x8933 -> _x8933
  method set_userid _x8933 = _userid <- Some _x8933
  method unset_userid = _userid <- None
  method reset_userid = _userid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerUserid_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _userid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerUserid_args (iprot : Protocol.t) =
  let _str8936 = new registerUserid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8937,_id8938) = iprot#readFieldBegin in
        if _t8937 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8938 with 
          | 1 -> (if _t8937 = Protocol.T_I32 then
              _str8936#set_reqSeq iprot#readI32
            else
              iprot#skip _t8937)
          | 2 -> (if _t8937 = Protocol.T_STRING then
              _str8936#set_userid iprot#readString
            else
              iprot#skip _t8937)
          | _ -> iprot#skip _t8937);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8936

class registerUserid_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerUserid_result.success") | Some _x8939 -> _x8939
  method set_success _x8939 = _success <- Some _x8939
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerUserid_result.e") | Some _x8940 -> _x8940
  method set_e _x8940 = _e <- Some _x8940
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerUserid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerUserid_result (iprot : Protocol.t) =
  let _str8943 = new registerUserid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8944,_id8945) = iprot#readFieldBegin in
        if _t8944 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8945 with 
          | 0 -> (if _t8944 = Protocol.T_BOOL then
              _str8943#set_success iprot#readBool
            else
              iprot#skip _t8944)
          | 1 -> (if _t8944 = Protocol.T_STRUCT then
              _str8943#set_e (read_talkException iprot)
            else
              iprot#skip _t8944)
          | _ -> iprot#skip _t8944);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8943

class registerWapDevice_args =
object (self)
  val mutable _invitationHash : string option = None
  method get_invitationHash = _invitationHash
  method grab_invitationHash = match _invitationHash with None->raise (Field_empty "registerWapDevice_args.invitationHash") | Some _x8946 -> _x8946
  method set_invitationHash _x8946 = _invitationHash <- Some _x8946
  method unset_invitationHash = _invitationHash <- None
  method reset_invitationHash = _invitationHash <- None

  val mutable _guidHash : string option = None
  method get_guidHash = _guidHash
  method grab_guidHash = match _guidHash with None->raise (Field_empty "registerWapDevice_args.guidHash") | Some _x8947 -> _x8947
  method set_guidHash _x8947 = _guidHash <- Some _x8947
  method unset_guidHash = _guidHash <- None
  method reset_guidHash = _guidHash <- None

  val mutable _email : string option = None
  method get_email = _email
  method grab_email = match _email with None->raise (Field_empty "registerWapDevice_args.email") | Some _x8948 -> _x8948
  method set_email _x8948 = _email <- Some _x8948
  method unset_email = _email <- None
  method reset_email = _email <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "registerWapDevice_args.deviceInfo") | Some _x8949 -> _x8949
  method set_deviceInfo _x8949 = _deviceInfo <- Some _x8949
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  method copy =
      let _new = Oo.copy self in
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWapDevice_args";
    (match _invitationHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("invitationHash",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _guidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("guidHash",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _email with None -> () | Some _v -> 
      oprot#writeFieldBegin("email",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,5);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWapDevice_args (iprot : Protocol.t) =
  let _str8952 = new registerWapDevice_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8953,_id8954) = iprot#readFieldBegin in
        if _t8953 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8954 with 
          | 2 -> (if _t8953 = Protocol.T_STRING then
              _str8952#set_invitationHash iprot#readString
            else
              iprot#skip _t8953)
          | 3 -> (if _t8953 = Protocol.T_STRING then
              _str8952#set_guidHash iprot#readString
            else
              iprot#skip _t8953)
          | 4 -> (if _t8953 = Protocol.T_STRING then
              _str8952#set_email iprot#readString
            else
              iprot#skip _t8953)
          | 5 -> (if _t8953 = Protocol.T_STRUCT then
              _str8952#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t8953)
          | _ -> iprot#skip _t8953);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8952

class registerWapDevice_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerWapDevice_result.success") | Some _x8955 -> _x8955
  method set_success _x8955 = _success <- Some _x8955
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerWapDevice_result.e") | Some _x8956 -> _x8956
  method set_e _x8956 = _e <- Some _x8956
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWapDevice_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWapDevice_result (iprot : Protocol.t) =
  let _str8959 = new registerWapDevice_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8960,_id8961) = iprot#readFieldBegin in
        if _t8960 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8961 with 
          | 0 -> (if _t8960 = Protocol.T_STRING then
              _str8959#set_success iprot#readString
            else
              iprot#skip _t8960)
          | 1 -> (if _t8960 = Protocol.T_STRUCT then
              _str8959#set_e (read_talkException iprot)
            else
              iprot#skip _t8960)
          | _ -> iprot#skip _t8960);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8959

class registerWithExistingSnsIdAndIdentityCredential_args =
object (self)
  val mutable _identityCredential : identityCredential option = None
  method get_identityCredential = _identityCredential
  method grab_identityCredential = match _identityCredential with None->raise (Field_empty "registerWithExistingSnsIdAndIdentityCredential_args.identityCredential") | Some _x8962 -> _x8962
  method set_identityCredential _x8962 = _identityCredential <- Some _x8962
  method unset_identityCredential = _identityCredential <- None
  method reset_identityCredential = _identityCredential <- None

  val mutable _region : string option = None
  method get_region = _region
  method grab_region = match _region with None->raise (Field_empty "registerWithExistingSnsIdAndIdentityCredential_args.region") | Some _x8963 -> _x8963
  method set_region _x8963 = _region <- Some _x8963
  method unset_region = _region <- None
  method reset_region = _region <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "registerWithExistingSnsIdAndIdentityCredential_args.udidHash") | Some _x8964 -> _x8964
  method set_udidHash _x8964 = _udidHash <- Some _x8964
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "registerWithExistingSnsIdAndIdentityCredential_args.deviceInfo") | Some _x8965 -> _x8965
  method set_deviceInfo _x8965 = _deviceInfo <- Some _x8965
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  method copy =
      let _new = Oo.copy self in
      if _identityCredential <> None then
        _new#set_identityCredential self#grab_identityCredential#copy;
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithExistingSnsIdAndIdentityCredential_args";
    (match _identityCredential with None -> () | Some _v -> 
      oprot#writeFieldBegin("identityCredential",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _region with None -> () | Some _v -> 
      oprot#writeFieldBegin("region",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,5);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithExistingSnsIdAndIdentityCredential_args (iprot : Protocol.t) =
  let _str8968 = new registerWithExistingSnsIdAndIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8969,_id8970) = iprot#readFieldBegin in
        if _t8969 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8970 with 
          | 2 -> (if _t8969 = Protocol.T_STRUCT then
              _str8968#set_identityCredential (read_identityCredential iprot)
            else
              iprot#skip _t8969)
          | 3 -> (if _t8969 = Protocol.T_STRING then
              _str8968#set_region iprot#readString
            else
              iprot#skip _t8969)
          | 4 -> (if _t8969 = Protocol.T_STRING then
              _str8968#set_udidHash iprot#readString
            else
              iprot#skip _t8969)
          | 5 -> (if _t8969 = Protocol.T_STRUCT then
              _str8968#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t8969)
          | _ -> iprot#skip _t8969);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8968

class registerWithExistingSnsIdAndIdentityCredential_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerWithExistingSnsIdAndIdentityCredential_result.success") | Some _x8971 -> _x8971
  method set_success _x8971 = _success <- Some _x8971
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerWithExistingSnsIdAndIdentityCredential_result.e") | Some _x8972 -> _x8972
  method set_e _x8972 = _e <- Some _x8972
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithExistingSnsIdAndIdentityCredential_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithExistingSnsIdAndIdentityCredential_result (iprot : Protocol.t) =
  let _str8975 = new registerWithExistingSnsIdAndIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8976,_id8977) = iprot#readFieldBegin in
        if _t8976 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8977 with 
          | 0 -> (if _t8976 = Protocol.T_STRING then
              _str8975#set_success iprot#readString
            else
              iprot#skip _t8976)
          | 1 -> (if _t8976 = Protocol.T_STRUCT then
              _str8975#set_e (read_talkException iprot)
            else
              iprot#skip _t8976)
          | _ -> iprot#skip _t8976);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8975

class registerWithSnsId_args =
object (self)
  val mutable _snsIdType : SnsIdType.t option = None
  method get_snsIdType = _snsIdType
  method grab_snsIdType = match _snsIdType with None->raise (Field_empty "registerWithSnsId_args.snsIdType") | Some _x8978 -> _x8978
  method set_snsIdType _x8978 = _snsIdType <- Some _x8978
  method unset_snsIdType = _snsIdType <- None
  method reset_snsIdType = _snsIdType <- None

  val mutable _snsAccessToken : string option = None
  method get_snsAccessToken = _snsAccessToken
  method grab_snsAccessToken = match _snsAccessToken with None->raise (Field_empty "registerWithSnsId_args.snsAccessToken") | Some _x8979 -> _x8979
  method set_snsAccessToken _x8979 = _snsAccessToken <- Some _x8979
  method unset_snsAccessToken = _snsAccessToken <- None
  method reset_snsAccessToken = _snsAccessToken <- None

  val mutable _region : string option = None
  method get_region = _region
  method grab_region = match _region with None->raise (Field_empty "registerWithSnsId_args.region") | Some _x8980 -> _x8980
  method set_region _x8980 = _region <- Some _x8980
  method unset_region = _region <- None
  method reset_region = _region <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "registerWithSnsId_args.udidHash") | Some _x8981 -> _x8981
  method set_udidHash _x8981 = _udidHash <- Some _x8981
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "registerWithSnsId_args.deviceInfo") | Some _x8982 -> _x8982
  method set_deviceInfo _x8982 = _deviceInfo <- Some _x8982
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "registerWithSnsId_args.mid") | Some _x8983 -> _x8983
  method set_mid _x8983 = _mid <- Some _x8983
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithSnsId_args";
    (match _snsIdType with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsIdType",Protocol.T_I32,2);
      oprot#writeI32(SnsIdType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _snsAccessToken with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsAccessToken",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _region with None -> () | Some _v -> 
      oprot#writeFieldBegin("region",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,6);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithSnsId_args (iprot : Protocol.t) =
  let _str8986 = new registerWithSnsId_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8987,_id8988) = iprot#readFieldBegin in
        if _t8987 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8988 with 
          | 2 -> (if _t8987 = Protocol.T_I32 then
              _str8986#set_snsIdType (SnsIdType.of_i iprot#readI32)
            else
              iprot#skip _t8987)
          | 3 -> (if _t8987 = Protocol.T_STRING then
              _str8986#set_snsAccessToken iprot#readString
            else
              iprot#skip _t8987)
          | 4 -> (if _t8987 = Protocol.T_STRING then
              _str8986#set_region iprot#readString
            else
              iprot#skip _t8987)
          | 5 -> (if _t8987 = Protocol.T_STRING then
              _str8986#set_udidHash iprot#readString
            else
              iprot#skip _t8987)
          | 6 -> (if _t8987 = Protocol.T_STRUCT then
              _str8986#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t8987)
          | 7 -> (if _t8987 = Protocol.T_STRING then
              _str8986#set_mid iprot#readString
            else
              iprot#skip _t8987)
          | _ -> iprot#skip _t8987);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8986

class registerWithSnsId_result =
object (self)
  val mutable _success : registerWithSnsIdResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerWithSnsId_result.success") | Some _x8989 -> _x8989
  method set_success _x8989 = _success <- Some _x8989
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerWithSnsId_result.e") | Some _x8990 -> _x8990
  method set_e _x8990 = _e <- Some _x8990
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithSnsId_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithSnsId_result (iprot : Protocol.t) =
  let _str8993 = new registerWithSnsId_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t8994,_id8995) = iprot#readFieldBegin in
        if _t8994 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id8995 with 
          | 0 -> (if _t8994 = Protocol.T_STRUCT then
              _str8993#set_success (read_registerWithSnsIdResult iprot)
            else
              iprot#skip _t8994)
          | 1 -> (if _t8994 = Protocol.T_STRUCT then
              _str8993#set_e (read_talkException iprot)
            else
              iprot#skip _t8994)
          | _ -> iprot#skip _t8994);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str8993

class registerWithSnsIdAndIdentityCredential_args =
object (self)
  val mutable _snsIdType : SnsIdType.t option = None
  method get_snsIdType = _snsIdType
  method grab_snsIdType = match _snsIdType with None->raise (Field_empty "registerWithSnsIdAndIdentityCredential_args.snsIdType") | Some _x8996 -> _x8996
  method set_snsIdType _x8996 = _snsIdType <- Some _x8996
  method unset_snsIdType = _snsIdType <- None
  method reset_snsIdType = _snsIdType <- None

  val mutable _snsAccessToken : string option = None
  method get_snsAccessToken = _snsAccessToken
  method grab_snsAccessToken = match _snsAccessToken with None->raise (Field_empty "registerWithSnsIdAndIdentityCredential_args.snsAccessToken") | Some _x8997 -> _x8997
  method set_snsAccessToken _x8997 = _snsAccessToken <- Some _x8997
  method unset_snsAccessToken = _snsAccessToken <- None
  method reset_snsAccessToken = _snsAccessToken <- None

  val mutable _identityCredential : identityCredential option = None
  method get_identityCredential = _identityCredential
  method grab_identityCredential = match _identityCredential with None->raise (Field_empty "registerWithSnsIdAndIdentityCredential_args.identityCredential") | Some _x8998 -> _x8998
  method set_identityCredential _x8998 = _identityCredential <- Some _x8998
  method unset_identityCredential = _identityCredential <- None
  method reset_identityCredential = _identityCredential <- None

  val mutable _region : string option = None
  method get_region = _region
  method grab_region = match _region with None->raise (Field_empty "registerWithSnsIdAndIdentityCredential_args.region") | Some _x8999 -> _x8999
  method set_region _x8999 = _region <- Some _x8999
  method unset_region = _region <- None
  method reset_region = _region <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "registerWithSnsIdAndIdentityCredential_args.udidHash") | Some _x9000 -> _x9000
  method set_udidHash _x9000 = _udidHash <- Some _x9000
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "registerWithSnsIdAndIdentityCredential_args.deviceInfo") | Some _x9001 -> _x9001
  method set_deviceInfo _x9001 = _deviceInfo <- Some _x9001
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  method copy =
      let _new = Oo.copy self in
      if _identityCredential <> None then
        _new#set_identityCredential self#grab_identityCredential#copy;
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithSnsIdAndIdentityCredential_args";
    (match _snsIdType with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsIdType",Protocol.T_I32,2);
      oprot#writeI32(SnsIdType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _snsAccessToken with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsAccessToken",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _identityCredential with None -> () | Some _v -> 
      oprot#writeFieldBegin("identityCredential",Protocol.T_STRUCT,4);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _region with None -> () | Some _v -> 
      oprot#writeFieldBegin("region",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,7);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithSnsIdAndIdentityCredential_args (iprot : Protocol.t) =
  let _str9004 = new registerWithSnsIdAndIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9005,_id9006) = iprot#readFieldBegin in
        if _t9005 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9006 with 
          | 2 -> (if _t9005 = Protocol.T_I32 then
              _str9004#set_snsIdType (SnsIdType.of_i iprot#readI32)
            else
              iprot#skip _t9005)
          | 3 -> (if _t9005 = Protocol.T_STRING then
              _str9004#set_snsAccessToken iprot#readString
            else
              iprot#skip _t9005)
          | 4 -> (if _t9005 = Protocol.T_STRUCT then
              _str9004#set_identityCredential (read_identityCredential iprot)
            else
              iprot#skip _t9005)
          | 5 -> (if _t9005 = Protocol.T_STRING then
              _str9004#set_region iprot#readString
            else
              iprot#skip _t9005)
          | 6 -> (if _t9005 = Protocol.T_STRING then
              _str9004#set_udidHash iprot#readString
            else
              iprot#skip _t9005)
          | 7 -> (if _t9005 = Protocol.T_STRUCT then
              _str9004#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t9005)
          | _ -> iprot#skip _t9005);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9004

class registerWithSnsIdAndIdentityCredential_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerWithSnsIdAndIdentityCredential_result.success") | Some _x9007 -> _x9007
  method set_success _x9007 = _success <- Some _x9007
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerWithSnsIdAndIdentityCredential_result.e") | Some _x9008 -> _x9008
  method set_e _x9008 = _e <- Some _x9008
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerWithSnsIdAndIdentityCredential_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerWithSnsIdAndIdentityCredential_result (iprot : Protocol.t) =
  let _str9011 = new registerWithSnsIdAndIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9012,_id9013) = iprot#readFieldBegin in
        if _t9012 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9013 with 
          | 0 -> (if _t9012 = Protocol.T_STRING then
              _str9011#set_success iprot#readString
            else
              iprot#skip _t9012)
          | 1 -> (if _t9012 = Protocol.T_STRUCT then
              _str9011#set_e (read_talkException iprot)
            else
              iprot#skip _t9012)
          | _ -> iprot#skip _t9012);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9011

class reissueDeviceCredential_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reissueDeviceCredential_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reissueDeviceCredential_args (iprot : Protocol.t) =
  let _str9016 = new reissueDeviceCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9017,_id9018) = iprot#readFieldBegin in
        if _t9017 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9018 with 
          | _ -> iprot#skip _t9017);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9016

class reissueDeviceCredential_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reissueDeviceCredential_result.success") | Some _x9019 -> _x9019
  method set_success _x9019 = _success <- Some _x9019
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reissueDeviceCredential_result.e") | Some _x9020 -> _x9020
  method set_e _x9020 = _e <- Some _x9020
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reissueDeviceCredential_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reissueDeviceCredential_result (iprot : Protocol.t) =
  let _str9023 = new reissueDeviceCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9024,_id9025) = iprot#readFieldBegin in
        if _t9024 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9025 with 
          | 0 -> (if _t9024 = Protocol.T_STRING then
              _str9023#set_success iprot#readString
            else
              iprot#skip _t9024)
          | 1 -> (if _t9024 = Protocol.T_STRUCT then
              _str9023#set_e (read_talkException iprot)
            else
              iprot#skip _t9024)
          | _ -> iprot#skip _t9024);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9023

class reissueUserTicket_args =
object (self)
  val mutable _expirationTime : Int64.t option = None
  method get_expirationTime = _expirationTime
  method grab_expirationTime = match _expirationTime with None->raise (Field_empty "reissueUserTicket_args.expirationTime") | Some _x9026 -> _x9026
  method set_expirationTime _x9026 = _expirationTime <- Some _x9026
  method unset_expirationTime = _expirationTime <- None
  method reset_expirationTime = _expirationTime <- None

  val mutable _maxUseCount : Int32.t option = None
  method get_maxUseCount = _maxUseCount
  method grab_maxUseCount = match _maxUseCount with None->raise (Field_empty "reissueUserTicket_args.maxUseCount") | Some _x9027 -> _x9027
  method set_maxUseCount _x9027 = _maxUseCount <- Some _x9027
  method unset_maxUseCount = _maxUseCount <- None
  method reset_maxUseCount = _maxUseCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reissueUserTicket_args";
    (match _expirationTime with None -> () | Some _v -> 
      oprot#writeFieldBegin("expirationTime",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _maxUseCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("maxUseCount",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reissueUserTicket_args (iprot : Protocol.t) =
  let _str9030 = new reissueUserTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9031,_id9032) = iprot#readFieldBegin in
        if _t9031 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9032 with 
          | 3 -> (if _t9031 = Protocol.T_I64 then
              _str9030#set_expirationTime iprot#readI64
            else
              iprot#skip _t9031)
          | 4 -> (if _t9031 = Protocol.T_I32 then
              _str9030#set_maxUseCount iprot#readI32
            else
              iprot#skip _t9031)
          | _ -> iprot#skip _t9031);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9030

class reissueUserTicket_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reissueUserTicket_result.success") | Some _x9033 -> _x9033
  method set_success _x9033 = _success <- Some _x9033
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reissueUserTicket_result.e") | Some _x9034 -> _x9034
  method set_e _x9034 = _e <- Some _x9034
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reissueUserTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reissueUserTicket_result (iprot : Protocol.t) =
  let _str9037 = new reissueUserTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9038,_id9039) = iprot#readFieldBegin in
        if _t9038 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9039 with 
          | 0 -> (if _t9038 = Protocol.T_STRING then
              _str9037#set_success iprot#readString
            else
              iprot#skip _t9038)
          | 1 -> (if _t9038 = Protocol.T_STRUCT then
              _str9037#set_e (read_talkException iprot)
            else
              iprot#skip _t9038)
          | _ -> iprot#skip _t9038);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9037

class getMessageReadRange_args =
object (self)
  val mutable _chatIds : string list option = None
  method get_chatIds = _chatIds
  method grab_chatIds = match _chatIds with None->raise (Field_empty "getMessageReadRange_args.chatIds") | Some _x9040 -> _x9040
  method set_chatIds _x9040 = _chatIds <- Some _x9040
  method unset_chatIds = _chatIds <- None
  method reset_chatIds = _chatIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageReadRange_args";
    (match _chatIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatIds",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9043 ->         oprot#writeString(_iter9043);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageReadRange_args (iprot : Protocol.t) =
  let _str9044 = new getMessageReadRange_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9045,_id9046) = iprot#readFieldBegin in
        if _t9045 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9046 with 
          | 2 -> (if _t9045 = Protocol.T_LIST then
              _str9044#set_chatIds 
                (let (_etype9050,_size9047) = iprot#readListBegin in
                  let _con9051 = (Array.to_list (Array.init _size9047 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9051)
            else
              iprot#skip _t9045)
          | _ -> iprot#skip _t9045);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9044

class getMessageReadRange_result =
object (self)
  val mutable _success : tMessageReadRange list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessageReadRange_result.success") | Some _x9052 -> _x9052
  method set_success _x9052 = _success <- Some _x9052
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessageReadRange_result.e") | Some _x9053 -> _x9053
  method set_e _x9053 = _e <- Some _x9053
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageReadRange_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter9056 ->         _iter9056#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageReadRange_result (iprot : Protocol.t) =
  let _str9057 = new getMessageReadRange_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9058,_id9059) = iprot#readFieldBegin in
        if _t9058 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9059 with 
          | 0 -> (if _t9058 = Protocol.T_LIST then
              _str9057#set_success 
                (let (_etype9063,_size9060) = iprot#readListBegin in
                  let _con9064 = (Array.to_list (Array.init _size9060 (fun _ -> (read_tMessageReadRange iprot)))) in
                    iprot#readListEnd; _con9064)
            else
              iprot#skip _t9058)
          | 1 -> (if _t9058 = Protocol.T_STRUCT then
              _str9057#set_e (read_talkException iprot)
            else
              iprot#skip _t9058)
          | _ -> iprot#skip _t9058);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9057

class rejectGroupInvitation_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "rejectGroupInvitation_args.reqSeq") | Some _x9065 -> _x9065
  method set_reqSeq _x9065 = _reqSeq <- Some _x9065
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "rejectGroupInvitation_args.groupId") | Some _x9066 -> _x9066
  method set_groupId _x9066 = _groupId <- Some _x9066
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "rejectGroupInvitation_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_rejectGroupInvitation_args (iprot : Protocol.t) =
  let _str9069 = new rejectGroupInvitation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9070,_id9071) = iprot#readFieldBegin in
        if _t9070 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9071 with 
          | 1 -> (if _t9070 = Protocol.T_I32 then
              _str9069#set_reqSeq iprot#readI32
            else
              iprot#skip _t9070)
          | 2 -> (if _t9070 = Protocol.T_STRING then
              _str9069#set_groupId iprot#readString
            else
              iprot#skip _t9070)
          | _ -> iprot#skip _t9070);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9069

class rejectGroupInvitation_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "rejectGroupInvitation_result.e") | Some _x9072 -> _x9072
  method set_e _x9072 = _e <- Some _x9072
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "rejectGroupInvitation_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_rejectGroupInvitation_result (iprot : Protocol.t) =
  let _str9075 = new rejectGroupInvitation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9076,_id9077) = iprot#readFieldBegin in
        if _t9076 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9077 with 
          | 1 -> (if _t9076 = Protocol.T_STRUCT then
              _str9075#set_e (read_talkException iprot)
            else
              iprot#skip _t9076)
          | _ -> iprot#skip _t9076);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9075

class releaseSession_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "releaseSession_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_releaseSession_args (iprot : Protocol.t) =
  let _str9080 = new releaseSession_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9081,_id9082) = iprot#readFieldBegin in
        if _t9081 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9082 with 
          | _ -> iprot#skip _t9081);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9080

class releaseSession_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "releaseSession_result.e") | Some _x9083 -> _x9083
  method set_e _x9083 = _e <- Some _x9083
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "releaseSession_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_releaseSession_result (iprot : Protocol.t) =
  let _str9086 = new releaseSession_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9087,_id9088) = iprot#readFieldBegin in
        if _t9087 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9088 with 
          | 1 -> (if _t9087 = Protocol.T_STRUCT then
              _str9086#set_e (read_talkException iprot)
            else
              iprot#skip _t9087)
          | _ -> iprot#skip _t9087);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9086

class removeAllMessages_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "removeAllMessages_args.seq") | Some _x9089 -> _x9089
  method set_seq _x9089 = _seq <- Some _x9089
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _lastMessageId : string option = None
  method get_lastMessageId = _lastMessageId
  method grab_lastMessageId = match _lastMessageId with None->raise (Field_empty "removeAllMessages_args.lastMessageId") | Some _x9090 -> _x9090
  method set_lastMessageId _x9090 = _lastMessageId <- Some _x9090
  method unset_lastMessageId = _lastMessageId <- None
  method reset_lastMessageId = _lastMessageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeAllMessages_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _lastMessageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastMessageId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeAllMessages_args (iprot : Protocol.t) =
  let _str9093 = new removeAllMessages_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9094,_id9095) = iprot#readFieldBegin in
        if _t9094 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9095 with 
          | 1 -> (if _t9094 = Protocol.T_I32 then
              _str9093#set_seq iprot#readI32
            else
              iprot#skip _t9094)
          | 2 -> (if _t9094 = Protocol.T_STRING then
              _str9093#set_lastMessageId iprot#readString
            else
              iprot#skip _t9094)
          | _ -> iprot#skip _t9094);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9093

class removeAllMessages_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeAllMessages_result.e") | Some _x9096 -> _x9096
  method set_e _x9096 = _e <- Some _x9096
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeAllMessages_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeAllMessages_result (iprot : Protocol.t) =
  let _str9099 = new removeAllMessages_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9100,_id9101) = iprot#readFieldBegin in
        if _t9100 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9101 with 
          | 1 -> (if _t9100 = Protocol.T_STRUCT then
              _str9099#set_e (read_talkException iprot)
            else
              iprot#skip _t9100)
          | _ -> iprot#skip _t9100);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9099

class removeBuddyLocation_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "removeBuddyLocation_args.mid") | Some _x9102 -> _x9102
  method set_mid _x9102 = _mid <- Some _x9102
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  val mutable _index : Int32.t option = None
  method get_index = _index
  method grab_index = match _index with None->raise (Field_empty "removeBuddyLocation_args.index") | Some _x9103 -> _x9103
  method set_index _x9103 = _index <- Some _x9103
  method unset_index = _index <- None
  method reset_index = _index <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeBuddyLocation_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _index with None -> () | Some _v -> 
      oprot#writeFieldBegin("index",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeBuddyLocation_args (iprot : Protocol.t) =
  let _str9106 = new removeBuddyLocation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9107,_id9108) = iprot#readFieldBegin in
        if _t9107 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9108 with 
          | 2 -> (if _t9107 = Protocol.T_STRING then
              _str9106#set_mid iprot#readString
            else
              iprot#skip _t9107)
          | 3 -> (if _t9107 = Protocol.T_I32 then
              _str9106#set_index iprot#readI32
            else
              iprot#skip _t9107)
          | _ -> iprot#skip _t9107);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9106

class removeBuddyLocation_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeBuddyLocation_result.e") | Some _x9109 -> _x9109
  method set_e _x9109 = _e <- Some _x9109
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeBuddyLocation_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeBuddyLocation_result (iprot : Protocol.t) =
  let _str9112 = new removeBuddyLocation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9113,_id9114) = iprot#readFieldBegin in
        if _t9113 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9114 with 
          | 1 -> (if _t9113 = Protocol.T_STRUCT then
              _str9112#set_e (read_talkException iprot)
            else
              iprot#skip _t9113)
          | _ -> iprot#skip _t9113);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9112

class removeMessage_args =
object (self)
  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "removeMessage_args.messageId") | Some _x9115 -> _x9115
  method set_messageId _x9115 = _messageId <- Some _x9115
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeMessage_args";
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeMessage_args (iprot : Protocol.t) =
  let _str9118 = new removeMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9119,_id9120) = iprot#readFieldBegin in
        if _t9119 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9120 with 
          | 2 -> (if _t9119 = Protocol.T_STRING then
              _str9118#set_messageId iprot#readString
            else
              iprot#skip _t9119)
          | _ -> iprot#skip _t9119);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9118

class removeMessage_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "removeMessage_result.success") | Some _x9121 -> _x9121
  method set_success _x9121 = _success <- Some _x9121
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeMessage_result.e") | Some _x9122 -> _x9122
  method set_e _x9122 = _e <- Some _x9122
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeMessage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeMessage_result (iprot : Protocol.t) =
  let _str9125 = new removeMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9126,_id9127) = iprot#readFieldBegin in
        if _t9126 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9127 with 
          | 0 -> (if _t9126 = Protocol.T_BOOL then
              _str9125#set_success iprot#readBool
            else
              iprot#skip _t9126)
          | 1 -> (if _t9126 = Protocol.T_STRUCT then
              _str9125#set_e (read_talkException iprot)
            else
              iprot#skip _t9126)
          | _ -> iprot#skip _t9126);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9125

class makeUserAddMyselfAsContact_args =
object (self)
  val mutable _contactOwnerMid : string option = None
  method get_contactOwnerMid = _contactOwnerMid
  method grab_contactOwnerMid = match _contactOwnerMid with None->raise (Field_empty "makeUserAddMyselfAsContact_args.contactOwnerMid") | Some _x9128 -> _x9128
  method set_contactOwnerMid _x9128 = _contactOwnerMid <- Some _x9128
  method unset_contactOwnerMid = _contactOwnerMid <- None
  method reset_contactOwnerMid = _contactOwnerMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "makeUserAddMyselfAsContact_args";
    (match _contactOwnerMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactOwnerMid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_makeUserAddMyselfAsContact_args (iprot : Protocol.t) =
  let _str9131 = new makeUserAddMyselfAsContact_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9132,_id9133) = iprot#readFieldBegin in
        if _t9132 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9133 with 
          | 1 -> (if _t9132 = Protocol.T_STRING then
              _str9131#set_contactOwnerMid iprot#readString
            else
              iprot#skip _t9132)
          | _ -> iprot#skip _t9132);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9131

class makeUserAddMyselfAsContact_result =
object (self)
  val mutable _success : contactTransition option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "makeUserAddMyselfAsContact_result.success") | Some _x9134 -> _x9134
  method set_success _x9134 = _success <- Some _x9134
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "makeUserAddMyselfAsContact_result.e") | Some _x9135 -> _x9135
  method set_e _x9135 = _e <- Some _x9135
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "makeUserAddMyselfAsContact_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_makeUserAddMyselfAsContact_result (iprot : Protocol.t) =
  let _str9138 = new makeUserAddMyselfAsContact_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9139,_id9140) = iprot#readFieldBegin in
        if _t9139 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9140 with 
          | 0 -> (if _t9139 = Protocol.T_STRUCT then
              _str9138#set_success (read_contactTransition iprot)
            else
              iprot#skip _t9139)
          | 1 -> (if _t9139 = Protocol.T_STRUCT then
              _str9138#set_e (read_talkException iprot)
            else
              iprot#skip _t9139)
          | _ -> iprot#skip _t9139);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9138

class removeMessageFromMyHome_args =
object (self)
  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "removeMessageFromMyHome_args.messageId") | Some _x9141 -> _x9141
  method set_messageId _x9141 = _messageId <- Some _x9141
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeMessageFromMyHome_args";
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeMessageFromMyHome_args (iprot : Protocol.t) =
  let _str9144 = new removeMessageFromMyHome_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9145,_id9146) = iprot#readFieldBegin in
        if _t9145 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9146 with 
          | 2 -> (if _t9145 = Protocol.T_STRING then
              _str9144#set_messageId iprot#readString
            else
              iprot#skip _t9145)
          | _ -> iprot#skip _t9145);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9144

class removeMessageFromMyHome_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "removeMessageFromMyHome_result.success") | Some _x9147 -> _x9147
  method set_success _x9147 = _success <- Some _x9147
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeMessageFromMyHome_result.e") | Some _x9148 -> _x9148
  method set_e _x9148 = _e <- Some _x9148
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeMessageFromMyHome_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeMessageFromMyHome_result (iprot : Protocol.t) =
  let _str9151 = new removeMessageFromMyHome_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9152,_id9153) = iprot#readFieldBegin in
        if _t9152 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9153 with 
          | 0 -> (if _t9152 = Protocol.T_BOOL then
              _str9151#set_success iprot#readBool
            else
              iprot#skip _t9152)
          | 1 -> (if _t9152 = Protocol.T_STRUCT then
              _str9151#set_e (read_talkException iprot)
            else
              iprot#skip _t9152)
          | _ -> iprot#skip _t9152);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9151

class removeSnsId_args =
object (self)
  val mutable _snsIdType : SnsIdType.t option = None
  method get_snsIdType = _snsIdType
  method grab_snsIdType = match _snsIdType with None->raise (Field_empty "removeSnsId_args.snsIdType") | Some _x9154 -> _x9154
  method set_snsIdType _x9154 = _snsIdType <- Some _x9154
  method unset_snsIdType = _snsIdType <- None
  method reset_snsIdType = _snsIdType <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeSnsId_args";
    (match _snsIdType with None -> () | Some _v -> 
      oprot#writeFieldBegin("snsIdType",Protocol.T_I32,2);
      oprot#writeI32(SnsIdType.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeSnsId_args (iprot : Protocol.t) =
  let _str9157 = new removeSnsId_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9158,_id9159) = iprot#readFieldBegin in
        if _t9158 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9159 with 
          | 2 -> (if _t9158 = Protocol.T_I32 then
              _str9157#set_snsIdType (SnsIdType.of_i iprot#readI32)
            else
              iprot#skip _t9158)
          | _ -> iprot#skip _t9158);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9157

class removeSnsId_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "removeSnsId_result.success") | Some _x9160 -> _x9160
  method set_success _x9160 = _success <- Some _x9160
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeSnsId_result.e") | Some _x9161 -> _x9161
  method set_e _x9161 = _e <- Some _x9161
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeSnsId_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeSnsId_result (iprot : Protocol.t) =
  let _str9164 = new removeSnsId_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9165,_id9166) = iprot#readFieldBegin in
        if _t9165 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9166 with 
          | 0 -> (if _t9165 = Protocol.T_STRING then
              _str9164#set_success iprot#readString
            else
              iprot#skip _t9165)
          | 1 -> (if _t9165 = Protocol.T_STRUCT then
              _str9164#set_e (read_talkException iprot)
            else
              iprot#skip _t9165)
          | _ -> iprot#skip _t9165);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9164

class report_args =
object (self)
  val mutable _syncOpRevision : Int64.t option = None
  method get_syncOpRevision = _syncOpRevision
  method grab_syncOpRevision = match _syncOpRevision with None->raise (Field_empty "report_args.syncOpRevision") | Some _x9167 -> _x9167
  method set_syncOpRevision _x9167 = _syncOpRevision <- Some _x9167
  method unset_syncOpRevision = _syncOpRevision <- None
  method reset_syncOpRevision = _syncOpRevision <- None

  val mutable _category : SyncCategory.t option = None
  method get_category = _category
  method grab_category = match _category with None->raise (Field_empty "report_args.category") | Some _x9168 -> _x9168
  method set_category _x9168 = _category <- Some _x9168
  method unset_category = _category <- None
  method reset_category = _category <- None

  val mutable _report : string option = None
  method get_report = _report
  method grab_report = match _report with None->raise (Field_empty "report_args.report") | Some _x9169 -> _x9169
  method set_report _x9169 = _report <- Some _x9169
  method unset_report = _report <- None
  method reset_report = _report <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "report_args";
    (match _syncOpRevision with None -> () | Some _v -> 
      oprot#writeFieldBegin("syncOpRevision",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _category with None -> () | Some _v -> 
      oprot#writeFieldBegin("category",Protocol.T_I32,3);
      oprot#writeI32(SyncCategory.to_i _v);
      oprot#writeFieldEnd
    );
    (match _report with None -> () | Some _v -> 
      oprot#writeFieldBegin("report",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_report_args (iprot : Protocol.t) =
  let _str9172 = new report_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9173,_id9174) = iprot#readFieldBegin in
        if _t9173 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9174 with 
          | 2 -> (if _t9173 = Protocol.T_I64 then
              _str9172#set_syncOpRevision iprot#readI64
            else
              iprot#skip _t9173)
          | 3 -> (if _t9173 = Protocol.T_I32 then
              _str9172#set_category (SyncCategory.of_i iprot#readI32)
            else
              iprot#skip _t9173)
          | 4 -> (if _t9173 = Protocol.T_STRING then
              _str9172#set_report iprot#readString
            else
              iprot#skip _t9173)
          | _ -> iprot#skip _t9173);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9172

class report_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "report_result.e") | Some _x9175 -> _x9175
  method set_e _x9175 = _e <- Some _x9175
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "report_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_report_result (iprot : Protocol.t) =
  let _str9178 = new report_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9179,_id9180) = iprot#readFieldBegin in
        if _t9179 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9180 with 
          | 1 -> (if _t9179 = Protocol.T_STRUCT then
              _str9178#set_e (read_talkException iprot)
            else
              iprot#skip _t9179)
          | _ -> iprot#skip _t9179);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9178

class reportContacts_args =
object (self)
  val mutable _syncOpRevision : Int64.t option = None
  method get_syncOpRevision = _syncOpRevision
  method grab_syncOpRevision = match _syncOpRevision with None->raise (Field_empty "reportContacts_args.syncOpRevision") | Some _x9181 -> _x9181
  method set_syncOpRevision _x9181 = _syncOpRevision <- Some _x9181
  method unset_syncOpRevision = _syncOpRevision <- None
  method reset_syncOpRevision = _syncOpRevision <- None

  val mutable _category : SyncCategory.t option = None
  method get_category = _category
  method grab_category = match _category with None->raise (Field_empty "reportContacts_args.category") | Some _x9182 -> _x9182
  method set_category _x9182 = _category <- Some _x9182
  method unset_category = _category <- None
  method reset_category = _category <- None

  val mutable _contactReports : contactReport list option = None
  method get_contactReports = _contactReports
  method grab_contactReports = match _contactReports with None->raise (Field_empty "reportContacts_args.contactReports") | Some _x9183 -> _x9183
  method set_contactReports _x9183 = _contactReports <- Some _x9183
  method unset_contactReports = _contactReports <- None
  method reset_contactReports = _contactReports <- None

  val mutable _actionType : SyncActionType.t option = None
  method get_actionType = _actionType
  method grab_actionType = match _actionType with None->raise (Field_empty "reportContacts_args.actionType") | Some _x9184 -> _x9184
  method set_actionType _x9184 = _actionType <- Some _x9184
  method unset_actionType = _actionType <- None
  method reset_actionType = _actionType <- None

  method copy =
      let _new = Oo.copy self in
      if _contactReports <> None then
        _new#set_contactReports (List.map (fun x -> x#copy) self#grab_contactReports);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportContacts_args";
    (match _syncOpRevision with None -> () | Some _v -> 
      oprot#writeFieldBegin("syncOpRevision",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _category with None -> () | Some _v -> 
      oprot#writeFieldBegin("category",Protocol.T_I32,3);
      oprot#writeI32(SyncCategory.to_i _v);
      oprot#writeFieldEnd
    );
    (match _contactReports with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactReports",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter9187 ->         _iter9187#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _actionType with None -> () | Some _v -> 
      oprot#writeFieldBegin("actionType",Protocol.T_I32,5);
      oprot#writeI32(SyncActionType.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportContacts_args (iprot : Protocol.t) =
  let _str9188 = new reportContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9189,_id9190) = iprot#readFieldBegin in
        if _t9189 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9190 with 
          | 2 -> (if _t9189 = Protocol.T_I64 then
              _str9188#set_syncOpRevision iprot#readI64
            else
              iprot#skip _t9189)
          | 3 -> (if _t9189 = Protocol.T_I32 then
              _str9188#set_category (SyncCategory.of_i iprot#readI32)
            else
              iprot#skip _t9189)
          | 4 -> (if _t9189 = Protocol.T_LIST then
              _str9188#set_contactReports 
                (let (_etype9194,_size9191) = iprot#readListBegin in
                  let _con9195 = (Array.to_list (Array.init _size9191 (fun _ -> (read_contactReport iprot)))) in
                    iprot#readListEnd; _con9195)
            else
              iprot#skip _t9189)
          | 5 -> (if _t9189 = Protocol.T_I32 then
              _str9188#set_actionType (SyncActionType.of_i iprot#readI32)
            else
              iprot#skip _t9189)
          | _ -> iprot#skip _t9189);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9188

class reportContacts_result =
object (self)
  val mutable _success : contactReportResult list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reportContacts_result.success") | Some _x9196 -> _x9196
  method set_success _x9196 = _success <- Some _x9196
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportContacts_result.e") | Some _x9197 -> _x9197
  method set_e _x9197 = _e <- Some _x9197
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter9200 ->         _iter9200#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportContacts_result (iprot : Protocol.t) =
  let _str9201 = new reportContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9202,_id9203) = iprot#readFieldBegin in
        if _t9202 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9203 with 
          | 0 -> (if _t9202 = Protocol.T_LIST then
              _str9201#set_success 
                (let (_etype9207,_size9204) = iprot#readListBegin in
                  let _con9208 = (Array.to_list (Array.init _size9204 (fun _ -> (read_contactReportResult iprot)))) in
                    iprot#readListEnd; _con9208)
            else
              iprot#skip _t9202)
          | 1 -> (if _t9202 = Protocol.T_STRUCT then
              _str9201#set_e (read_talkException iprot)
            else
              iprot#skip _t9202)
          | _ -> iprot#skip _t9202);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9201

class reportGroups_args =
object (self)
  val mutable _syncOpRevision : Int64.t option = None
  method get_syncOpRevision = _syncOpRevision
  method grab_syncOpRevision = match _syncOpRevision with None->raise (Field_empty "reportGroups_args.syncOpRevision") | Some _x9209 -> _x9209
  method set_syncOpRevision _x9209 = _syncOpRevision <- Some _x9209
  method unset_syncOpRevision = _syncOpRevision <- None
  method reset_syncOpRevision = _syncOpRevision <- None

  val mutable _groups : group list option = None
  method get_groups = _groups
  method grab_groups = match _groups with None->raise (Field_empty "reportGroups_args.groups") | Some _x9210 -> _x9210
  method set_groups _x9210 = _groups <- Some _x9210
  method unset_groups = _groups <- None
  method reset_groups = _groups <- None

  method copy =
      let _new = Oo.copy self in
      if _groups <> None then
        _new#set_groups (List.map (fun x -> x#copy) self#grab_groups);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportGroups_args";
    (match _syncOpRevision with None -> () | Some _v -> 
      oprot#writeFieldBegin("syncOpRevision",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _groups with None -> () | Some _v -> 
      oprot#writeFieldBegin("groups",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter9213 ->         _iter9213#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportGroups_args (iprot : Protocol.t) =
  let _str9214 = new reportGroups_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9215,_id9216) = iprot#readFieldBegin in
        if _t9215 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9216 with 
          | 2 -> (if _t9215 = Protocol.T_I64 then
              _str9214#set_syncOpRevision iprot#readI64
            else
              iprot#skip _t9215)
          | 3 -> (if _t9215 = Protocol.T_LIST then
              _str9214#set_groups 
                (let (_etype9220,_size9217) = iprot#readListBegin in
                  let _con9221 = (Array.to_list (Array.init _size9217 (fun _ -> (read_group iprot)))) in
                    iprot#readListEnd; _con9221)
            else
              iprot#skip _t9215)
          | _ -> iprot#skip _t9215);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9214

class reportGroups_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportGroups_result.e") | Some _x9222 -> _x9222
  method set_e _x9222 = _e <- Some _x9222
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportGroups_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportGroups_result (iprot : Protocol.t) =
  let _str9225 = new reportGroups_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9226,_id9227) = iprot#readFieldBegin in
        if _t9226 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9227 with 
          | 1 -> (if _t9226 = Protocol.T_STRUCT then
              _str9225#set_e (read_talkException iprot)
            else
              iprot#skip _t9226)
          | _ -> iprot#skip _t9226);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9225

class reportProfile_args =
object (self)
  val mutable _syncOpRevision : Int64.t option = None
  method get_syncOpRevision = _syncOpRevision
  method grab_syncOpRevision = match _syncOpRevision with None->raise (Field_empty "reportProfile_args.syncOpRevision") | Some _x9228 -> _x9228
  method set_syncOpRevision _x9228 = _syncOpRevision <- Some _x9228
  method unset_syncOpRevision = _syncOpRevision <- None
  method reset_syncOpRevision = _syncOpRevision <- None

  val mutable _profile : profile option = None
  method get_profile = _profile
  method grab_profile = match _profile with None->raise (Field_empty "reportProfile_args.profile") | Some _x9229 -> _x9229
  method set_profile _x9229 = _profile <- Some _x9229
  method unset_profile = _profile <- None
  method reset_profile = _profile <- None

  method copy =
      let _new = Oo.copy self in
      if _profile <> None then
        _new#set_profile self#grab_profile#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportProfile_args";
    (match _syncOpRevision with None -> () | Some _v -> 
      oprot#writeFieldBegin("syncOpRevision",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _profile with None -> () | Some _v -> 
      oprot#writeFieldBegin("profile",Protocol.T_STRUCT,3);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportProfile_args (iprot : Protocol.t) =
  let _str9232 = new reportProfile_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9233,_id9234) = iprot#readFieldBegin in
        if _t9233 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9234 with 
          | 2 -> (if _t9233 = Protocol.T_I64 then
              _str9232#set_syncOpRevision iprot#readI64
            else
              iprot#skip _t9233)
          | 3 -> (if _t9233 = Protocol.T_STRUCT then
              _str9232#set_profile (read_profile iprot)
            else
              iprot#skip _t9233)
          | _ -> iprot#skip _t9233);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9232

class reportProfile_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportProfile_result.e") | Some _x9235 -> _x9235
  method set_e _x9235 = _e <- Some _x9235
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportProfile_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportProfile_result (iprot : Protocol.t) =
  let _str9238 = new reportProfile_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9239,_id9240) = iprot#readFieldBegin in
        if _t9239 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9240 with 
          | 1 -> (if _t9239 = Protocol.T_STRUCT then
              _str9238#set_e (read_talkException iprot)
            else
              iprot#skip _t9239)
          | _ -> iprot#skip _t9239);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9238

class reportRooms_args =
object (self)
  val mutable _syncOpRevision : Int64.t option = None
  method get_syncOpRevision = _syncOpRevision
  method grab_syncOpRevision = match _syncOpRevision with None->raise (Field_empty "reportRooms_args.syncOpRevision") | Some _x9241 -> _x9241
  method set_syncOpRevision _x9241 = _syncOpRevision <- Some _x9241
  method unset_syncOpRevision = _syncOpRevision <- None
  method reset_syncOpRevision = _syncOpRevision <- None

  val mutable _rooms : room list option = None
  method get_rooms = _rooms
  method grab_rooms = match _rooms with None->raise (Field_empty "reportRooms_args.rooms") | Some _x9242 -> _x9242
  method set_rooms _x9242 = _rooms <- Some _x9242
  method unset_rooms = _rooms <- None
  method reset_rooms = _rooms <- None

  method copy =
      let _new = Oo.copy self in
      if _rooms <> None then
        _new#set_rooms (List.map (fun x -> x#copy) self#grab_rooms);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportRooms_args";
    (match _syncOpRevision with None -> () | Some _v -> 
      oprot#writeFieldBegin("syncOpRevision",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _rooms with None -> () | Some _v -> 
      oprot#writeFieldBegin("rooms",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter9245 ->         _iter9245#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportRooms_args (iprot : Protocol.t) =
  let _str9246 = new reportRooms_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9247,_id9248) = iprot#readFieldBegin in
        if _t9247 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9248 with 
          | 2 -> (if _t9247 = Protocol.T_I64 then
              _str9246#set_syncOpRevision iprot#readI64
            else
              iprot#skip _t9247)
          | 3 -> (if _t9247 = Protocol.T_LIST then
              _str9246#set_rooms 
                (let (_etype9252,_size9249) = iprot#readListBegin in
                  let _con9253 = (Array.to_list (Array.init _size9249 (fun _ -> (read_room iprot)))) in
                    iprot#readListEnd; _con9253)
            else
              iprot#skip _t9247)
          | _ -> iprot#skip _t9247);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9246

class reportRooms_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportRooms_result.e") | Some _x9254 -> _x9254
  method set_e _x9254 = _e <- Some _x9254
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportRooms_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportRooms_result (iprot : Protocol.t) =
  let _str9257 = new reportRooms_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9258,_id9259) = iprot#readFieldBegin in
        if _t9258 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9259 with 
          | 1 -> (if _t9258 = Protocol.T_STRUCT then
              _str9257#set_e (read_talkException iprot)
            else
              iprot#skip _t9258)
          | _ -> iprot#skip _t9258);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9257

class findAndAddContactByMetaTag_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "findAndAddContactByMetaTag_args.reqSeq") | Some _x9260 -> _x9260
  method set_reqSeq _x9260 = _reqSeq <- Some _x9260
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _userid : string option = None
  method get_userid = _userid
  method grab_userid = match _userid with None->raise (Field_empty "findAndAddContactByMetaTag_args.userid") | Some _x9261 -> _x9261
  method set_userid _x9261 = _userid <- Some _x9261
  method unset_userid = _userid <- None
  method reset_userid = _userid <- None

  val mutable _reference : string option = None
  method get_reference = _reference
  method grab_reference = match _reference with None->raise (Field_empty "findAndAddContactByMetaTag_args.reference") | Some _x9262 -> _x9262
  method set_reference _x9262 = _reference <- Some _x9262
  method unset_reference = _reference <- None
  method reset_reference = _reference <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactByMetaTag_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _userid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _reference with None -> () | Some _v -> 
      oprot#writeFieldBegin("reference",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactByMetaTag_args (iprot : Protocol.t) =
  let _str9265 = new findAndAddContactByMetaTag_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9266,_id9267) = iprot#readFieldBegin in
        if _t9266 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9267 with 
          | 1 -> (if _t9266 = Protocol.T_I32 then
              _str9265#set_reqSeq iprot#readI32
            else
              iprot#skip _t9266)
          | 2 -> (if _t9266 = Protocol.T_STRING then
              _str9265#set_userid iprot#readString
            else
              iprot#skip _t9266)
          | 3 -> (if _t9266 = Protocol.T_STRING then
              _str9265#set_reference iprot#readString
            else
              iprot#skip _t9266)
          | _ -> iprot#skip _t9266);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9265

class findAndAddContactByMetaTag_result =
object (self)
  val mutable _success : contact option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findAndAddContactByMetaTag_result.success") | Some _x9268 -> _x9268
  method set_success _x9268 = _success <- Some _x9268
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findAndAddContactByMetaTag_result.e") | Some _x9269 -> _x9269
  method set_e _x9269 = _e <- Some _x9269
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findAndAddContactByMetaTag_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findAndAddContactByMetaTag_result (iprot : Protocol.t) =
  let _str9272 = new findAndAddContactByMetaTag_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9273,_id9274) = iprot#readFieldBegin in
        if _t9273 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9274 with 
          | 0 -> (if _t9273 = Protocol.T_STRUCT then
              _str9272#set_success (read_contact iprot)
            else
              iprot#skip _t9273)
          | 1 -> (if _t9273 = Protocol.T_STRUCT then
              _str9272#set_e (read_talkException iprot)
            else
              iprot#skip _t9273)
          | _ -> iprot#skip _t9273);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9272

class reportSettings_args =
object (self)
  val mutable _syncOpRevision : Int64.t option = None
  method get_syncOpRevision = _syncOpRevision
  method grab_syncOpRevision = match _syncOpRevision with None->raise (Field_empty "reportSettings_args.syncOpRevision") | Some _x9275 -> _x9275
  method set_syncOpRevision _x9275 = _syncOpRevision <- Some _x9275
  method unset_syncOpRevision = _syncOpRevision <- None
  method reset_syncOpRevision = _syncOpRevision <- None

  val mutable _settings : settings option = None
  method get_settings = _settings
  method grab_settings = match _settings with None->raise (Field_empty "reportSettings_args.settings") | Some _x9276 -> _x9276
  method set_settings _x9276 = _settings <- Some _x9276
  method unset_settings = _settings <- None
  method reset_settings = _settings <- None

  method copy =
      let _new = Oo.copy self in
      if _settings <> None then
        _new#set_settings self#grab_settings#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSettings_args";
    (match _syncOpRevision with None -> () | Some _v -> 
      oprot#writeFieldBegin("syncOpRevision",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _settings with None -> () | Some _v -> 
      oprot#writeFieldBegin("settings",Protocol.T_STRUCT,3);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSettings_args (iprot : Protocol.t) =
  let _str9279 = new reportSettings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9280,_id9281) = iprot#readFieldBegin in
        if _t9280 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9281 with 
          | 2 -> (if _t9280 = Protocol.T_I64 then
              _str9279#set_syncOpRevision iprot#readI64
            else
              iprot#skip _t9280)
          | 3 -> (if _t9280 = Protocol.T_STRUCT then
              _str9279#set_settings (read_settings iprot)
            else
              iprot#skip _t9280)
          | _ -> iprot#skip _t9280);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9279

class reportSettings_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportSettings_result.e") | Some _x9282 -> _x9282
  method set_e _x9282 = _e <- Some _x9282
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSettings_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSettings_result (iprot : Protocol.t) =
  let _str9285 = new reportSettings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9286,_id9287) = iprot#readFieldBegin in
        if _t9286 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9287 with 
          | 1 -> (if _t9286 = Protocol.T_STRUCT then
              _str9285#set_e (read_talkException iprot)
            else
              iprot#skip _t9286)
          | _ -> iprot#skip _t9286);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9285

class reportSpam_args =
object (self)
  val mutable _chatMid : string option = None
  method get_chatMid = _chatMid
  method grab_chatMid = match _chatMid with None->raise (Field_empty "reportSpam_args.chatMid") | Some _x9288 -> _x9288
  method set_chatMid _x9288 = _chatMid <- Some _x9288
  method unset_chatMid = _chatMid <- None
  method reset_chatMid = _chatMid <- None

  val mutable _memberMids : string list option = None
  method get_memberMids = _memberMids
  method grab_memberMids = match _memberMids with None->raise (Field_empty "reportSpam_args.memberMids") | Some _x9289 -> _x9289
  method set_memberMids _x9289 = _memberMids <- Some _x9289
  method unset_memberMids = _memberMids <- None
  method reset_memberMids = _memberMids <- None

  val mutable _spammerReasons : SpammerReason.t list option = None
  method get_spammerReasons = _spammerReasons
  method grab_spammerReasons = match _spammerReasons with None->raise (Field_empty "reportSpam_args.spammerReasons") | Some _x9290 -> _x9290
  method set_spammerReasons _x9290 = _spammerReasons <- Some _x9290
  method unset_spammerReasons = _spammerReasons <- None
  method reset_spammerReasons = _spammerReasons <- None

  val mutable _senderMids : string list option = None
  method get_senderMids = _senderMids
  method grab_senderMids = match _senderMids with None->raise (Field_empty "reportSpam_args.senderMids") | Some _x9291 -> _x9291
  method set_senderMids _x9291 = _senderMids <- Some _x9291
  method unset_senderMids = _senderMids <- None
  method reset_senderMids = _senderMids <- None

  val mutable _spamMessageIds : string list option = None
  method get_spamMessageIds = _spamMessageIds
  method grab_spamMessageIds = match _spamMessageIds with None->raise (Field_empty "reportSpam_args.spamMessageIds") | Some _x9292 -> _x9292
  method set_spamMessageIds _x9292 = _spamMessageIds <- Some _x9292
  method unset_spamMessageIds = _spamMessageIds <- None
  method reset_spamMessageIds = _spamMessageIds <- None

  val mutable _spamMessages : string list option = None
  method get_spamMessages = _spamMessages
  method grab_spamMessages = match _spamMessages with None->raise (Field_empty "reportSpam_args.spamMessages") | Some _x9293 -> _x9293
  method set_spamMessages _x9293 = _spamMessages <- Some _x9293
  method unset_spamMessages = _spamMessages <- None
  method reset_spamMessages = _spamMessages <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSpam_args";
    (match _chatMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _memberMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("memberMids",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9296 ->         oprot#writeString(_iter9296);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _spammerReasons with None -> () | Some _v -> 
      oprot#writeFieldBegin("spammerReasons",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_I32,List.length _v);
      List.iter (fun _iter9297 ->         oprot#writeI32(SpammerReason.to_i _iter9297);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _senderMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("senderMids",Protocol.T_LIST,5);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9298 ->         oprot#writeString(_iter9298);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _spamMessageIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("spamMessageIds",Protocol.T_LIST,6);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9299 ->         oprot#writeString(_iter9299);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _spamMessages with None -> () | Some _v -> 
      oprot#writeFieldBegin("spamMessages",Protocol.T_LIST,7);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9300 ->         oprot#writeString(_iter9300);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSpam_args (iprot : Protocol.t) =
  let _str9301 = new reportSpam_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9302,_id9303) = iprot#readFieldBegin in
        if _t9302 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9303 with 
          | 2 -> (if _t9302 = Protocol.T_STRING then
              _str9301#set_chatMid iprot#readString
            else
              iprot#skip _t9302)
          | 3 -> (if _t9302 = Protocol.T_LIST then
              _str9301#set_memberMids 
                (let (_etype9307,_size9304) = iprot#readListBegin in
                  let _con9308 = (Array.to_list (Array.init _size9304 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9308)
            else
              iprot#skip _t9302)
          | 4 -> (if _t9302 = Protocol.T_LIST then
              _str9301#set_spammerReasons 
                (let (_etype9312,_size9309) = iprot#readListBegin in
                  let _con9313 = (Array.to_list (Array.init _size9309 (fun _ -> (SpammerReason.of_i iprot#readI32)))) in
                    iprot#readListEnd; _con9313)
            else
              iprot#skip _t9302)
          | 5 -> (if _t9302 = Protocol.T_LIST then
              _str9301#set_senderMids 
                (let (_etype9317,_size9314) = iprot#readListBegin in
                  let _con9318 = (Array.to_list (Array.init _size9314 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9318)
            else
              iprot#skip _t9302)
          | 6 -> (if _t9302 = Protocol.T_LIST then
              _str9301#set_spamMessageIds 
                (let (_etype9322,_size9319) = iprot#readListBegin in
                  let _con9323 = (Array.to_list (Array.init _size9319 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9323)
            else
              iprot#skip _t9302)
          | 7 -> (if _t9302 = Protocol.T_LIST then
              _str9301#set_spamMessages 
                (let (_etype9327,_size9324) = iprot#readListBegin in
                  let _con9328 = (Array.to_list (Array.init _size9324 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9328)
            else
              iprot#skip _t9302)
          | _ -> iprot#skip _t9302);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9301

class reportSpam_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportSpam_result.e") | Some _x9329 -> _x9329
  method set_e _x9329 = _e <- Some _x9329
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSpam_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSpam_result (iprot : Protocol.t) =
  let _str9332 = new reportSpam_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9333,_id9334) = iprot#readFieldBegin in
        if _t9333 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9334 with 
          | 1 -> (if _t9333 = Protocol.T_STRUCT then
              _str9332#set_e (read_talkException iprot)
            else
              iprot#skip _t9333)
          | _ -> iprot#skip _t9333);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9332

class reportSpammer_args =
object (self)
  val mutable _spammerMid : string option = None
  method get_spammerMid = _spammerMid
  method grab_spammerMid = match _spammerMid with None->raise (Field_empty "reportSpammer_args.spammerMid") | Some _x9335 -> _x9335
  method set_spammerMid _x9335 = _spammerMid <- Some _x9335
  method unset_spammerMid = _spammerMid <- None
  method reset_spammerMid = _spammerMid <- None

  val mutable _spammerReasons : SpammerReason.t list option = None
  method get_spammerReasons = _spammerReasons
  method grab_spammerReasons = match _spammerReasons with None->raise (Field_empty "reportSpammer_args.spammerReasons") | Some _x9336 -> _x9336
  method set_spammerReasons _x9336 = _spammerReasons <- Some _x9336
  method unset_spammerReasons = _spammerReasons <- None
  method reset_spammerReasons = _spammerReasons <- None

  val mutable _spamMessageIds : string list option = None
  method get_spamMessageIds = _spamMessageIds
  method grab_spamMessageIds = match _spamMessageIds with None->raise (Field_empty "reportSpammer_args.spamMessageIds") | Some _x9337 -> _x9337
  method set_spamMessageIds _x9337 = _spamMessageIds <- Some _x9337
  method unset_spamMessageIds = _spamMessageIds <- None
  method reset_spamMessageIds = _spamMessageIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSpammer_args";
    (match _spammerMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("spammerMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _spammerReasons with None -> () | Some _v -> 
      oprot#writeFieldBegin("spammerReasons",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_I32,List.length _v);
      List.iter (fun _iter9340 ->         oprot#writeI32(SpammerReason.to_i _iter9340);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _spamMessageIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("spamMessageIds",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9341 ->         oprot#writeString(_iter9341);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSpammer_args (iprot : Protocol.t) =
  let _str9342 = new reportSpammer_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9343,_id9344) = iprot#readFieldBegin in
        if _t9343 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9344 with 
          | 2 -> (if _t9343 = Protocol.T_STRING then
              _str9342#set_spammerMid iprot#readString
            else
              iprot#skip _t9343)
          | 3 -> (if _t9343 = Protocol.T_LIST then
              _str9342#set_spammerReasons 
                (let (_etype9348,_size9345) = iprot#readListBegin in
                  let _con9349 = (Array.to_list (Array.init _size9345 (fun _ -> (SpammerReason.of_i iprot#readI32)))) in
                    iprot#readListEnd; _con9349)
            else
              iprot#skip _t9343)
          | 4 -> (if _t9343 = Protocol.T_LIST then
              _str9342#set_spamMessageIds 
                (let (_etype9353,_size9350) = iprot#readListBegin in
                  let _con9354 = (Array.to_list (Array.init _size9350 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9354)
            else
              iprot#skip _t9343)
          | _ -> iprot#skip _t9343);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9342

class reportSpammer_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportSpammer_result.e") | Some _x9355 -> _x9355
  method set_e _x9355 = _e <- Some _x9355
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSpammer_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSpammer_result (iprot : Protocol.t) =
  let _str9358 = new reportSpammer_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9359,_id9360) = iprot#readFieldBegin in
        if _t9359 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9360 with 
          | 1 -> (if _t9359 = Protocol.T_STRUCT then
              _str9358#set_e (read_talkException iprot)
            else
              iprot#skip _t9359)
          | _ -> iprot#skip _t9359);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9358

class requestAccountPasswordReset_args =
object (self)
  val mutable _provider : IdentityProvider.t option = None
  method get_provider = _provider
  method grab_provider = match _provider with None->raise (Field_empty "requestAccountPasswordReset_args.provider") | Some _x9361 -> _x9361
  method set_provider _x9361 = _provider <- Some _x9361
  method unset_provider = _provider <- None
  method reset_provider = _provider <- None

  val mutable _identifier : string option = None
  method get_identifier = _identifier
  method grab_identifier = match _identifier with None->raise (Field_empty "requestAccountPasswordReset_args.identifier") | Some _x9362 -> _x9362
  method set_identifier _x9362 = _identifier <- Some _x9362
  method unset_identifier = _identifier <- None
  method reset_identifier = _identifier <- None

  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "requestAccountPasswordReset_args.locale") | Some _x9363 -> _x9363
  method set_locale _x9363 = _locale <- Some _x9363
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestAccountPasswordReset_args";
    (match _identifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("identifier",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _provider with None -> () | Some _v -> 
      oprot#writeFieldBegin("provider",Protocol.T_I32,4);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestAccountPasswordReset_args (iprot : Protocol.t) =
  let _str9366 = new requestAccountPasswordReset_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9367,_id9368) = iprot#readFieldBegin in
        if _t9367 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9368 with 
          | 4 -> (if _t9367 = Protocol.T_I32 then
              _str9366#set_provider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t9367)
          | 2 -> (if _t9367 = Protocol.T_STRING then
              _str9366#set_identifier iprot#readString
            else
              iprot#skip _t9367)
          | 5 -> (if _t9367 = Protocol.T_STRING then
              _str9366#set_locale iprot#readString
            else
              iprot#skip _t9367)
          | _ -> iprot#skip _t9367);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9366

class requestAccountPasswordReset_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "requestAccountPasswordReset_result.e") | Some _x9369 -> _x9369
  method set_e _x9369 = _e <- Some _x9369
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestAccountPasswordReset_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestAccountPasswordReset_result (iprot : Protocol.t) =
  let _str9372 = new requestAccountPasswordReset_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9373,_id9374) = iprot#readFieldBegin in
        if _t9373 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9374 with 
          | 1 -> (if _t9373 = Protocol.T_STRUCT then
              _str9372#set_e (read_talkException iprot)
            else
              iprot#skip _t9373)
          | _ -> iprot#skip _t9373);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9372

class requestEmailConfirmation_args =
object (self)
  val mutable _emailConfirmation : emailConfirmation option = None
  method get_emailConfirmation = _emailConfirmation
  method grab_emailConfirmation = match _emailConfirmation with None->raise (Field_empty "requestEmailConfirmation_args.emailConfirmation") | Some _x9375 -> _x9375
  method set_emailConfirmation _x9375 = _emailConfirmation <- Some _x9375
  method unset_emailConfirmation = _emailConfirmation <- None
  method reset_emailConfirmation = _emailConfirmation <- None

  method copy =
      let _new = Oo.copy self in
      if _emailConfirmation <> None then
        _new#set_emailConfirmation self#grab_emailConfirmation#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestEmailConfirmation_args";
    (match _emailConfirmation with None -> () | Some _v -> 
      oprot#writeFieldBegin("emailConfirmation",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestEmailConfirmation_args (iprot : Protocol.t) =
  let _str9378 = new requestEmailConfirmation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9379,_id9380) = iprot#readFieldBegin in
        if _t9379 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9380 with 
          | 2 -> (if _t9379 = Protocol.T_STRUCT then
              _str9378#set_emailConfirmation (read_emailConfirmation iprot)
            else
              iprot#skip _t9379)
          | _ -> iprot#skip _t9379);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9378

class requestEmailConfirmation_result =
object (self)
  val mutable _success : emailConfirmationSession option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "requestEmailConfirmation_result.success") | Some _x9381 -> _x9381
  method set_success _x9381 = _success <- Some _x9381
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "requestEmailConfirmation_result.e") | Some _x9382 -> _x9382
  method set_e _x9382 = _e <- Some _x9382
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestEmailConfirmation_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestEmailConfirmation_result (iprot : Protocol.t) =
  let _str9385 = new requestEmailConfirmation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9386,_id9387) = iprot#readFieldBegin in
        if _t9386 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9387 with 
          | 0 -> (if _t9386 = Protocol.T_STRUCT then
              _str9385#set_success (read_emailConfirmationSession iprot)
            else
              iprot#skip _t9386)
          | 1 -> (if _t9386 = Protocol.T_STRUCT then
              _str9385#set_e (read_talkException iprot)
            else
              iprot#skip _t9386)
          | _ -> iprot#skip _t9386);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9385

class requestIdentityUnbind_args =
object (self)
  val mutable _provider : IdentityProvider.t option = None
  method get_provider = _provider
  method grab_provider = match _provider with None->raise (Field_empty "requestIdentityUnbind_args.provider") | Some _x9388 -> _x9388
  method set_provider _x9388 = _provider <- Some _x9388
  method unset_provider = _provider <- None
  method reset_provider = _provider <- None

  val mutable _identifier : string option = None
  method get_identifier = _identifier
  method grab_identifier = match _identifier with None->raise (Field_empty "requestIdentityUnbind_args.identifier") | Some _x9389 -> _x9389
  method set_identifier _x9389 = _identifier <- Some _x9389
  method unset_identifier = _identifier <- None
  method reset_identifier = _identifier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestIdentityUnbind_args";
    (match _identifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("identifier",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _provider with None -> () | Some _v -> 
      oprot#writeFieldBegin("provider",Protocol.T_I32,4);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestIdentityUnbind_args (iprot : Protocol.t) =
  let _str9392 = new requestIdentityUnbind_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9393,_id9394) = iprot#readFieldBegin in
        if _t9393 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9394 with 
          | 4 -> (if _t9393 = Protocol.T_I32 then
              _str9392#set_provider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t9393)
          | 2 -> (if _t9393 = Protocol.T_STRING then
              _str9392#set_identifier iprot#readString
            else
              iprot#skip _t9393)
          | _ -> iprot#skip _t9393);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9392

class requestIdentityUnbind_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "requestIdentityUnbind_result.e") | Some _x9395 -> _x9395
  method set_e _x9395 = _e <- Some _x9395
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestIdentityUnbind_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestIdentityUnbind_result (iprot : Protocol.t) =
  let _str9398 = new requestIdentityUnbind_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9399,_id9400) = iprot#readFieldBegin in
        if _t9399 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9400 with 
          | 1 -> (if _t9399 = Protocol.T_STRUCT then
              _str9398#set_e (read_talkException iprot)
            else
              iprot#skip _t9399)
          | _ -> iprot#skip _t9399);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9398

class resendEmailConfirmation_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "resendEmailConfirmation_args.verifier") | Some _x9401 -> _x9401
  method set_verifier _x9401 = _verifier <- Some _x9401
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "resendEmailConfirmation_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_resendEmailConfirmation_args (iprot : Protocol.t) =
  let _str9404 = new resendEmailConfirmation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9405,_id9406) = iprot#readFieldBegin in
        if _t9405 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9406 with 
          | 2 -> (if _t9405 = Protocol.T_STRING then
              _str9404#set_verifier iprot#readString
            else
              iprot#skip _t9405)
          | _ -> iprot#skip _t9405);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9404

class resendEmailConfirmation_result =
object (self)
  val mutable _success : emailConfirmationSession option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "resendEmailConfirmation_result.success") | Some _x9407 -> _x9407
  method set_success _x9407 = _success <- Some _x9407
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "resendEmailConfirmation_result.e") | Some _x9408 -> _x9408
  method set_e _x9408 = _e <- Some _x9408
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "resendEmailConfirmation_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_resendEmailConfirmation_result (iprot : Protocol.t) =
  let _str9411 = new resendEmailConfirmation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9412,_id9413) = iprot#readFieldBegin in
        if _t9412 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9413 with 
          | 0 -> (if _t9412 = Protocol.T_STRUCT then
              _str9411#set_success (read_emailConfirmationSession iprot)
            else
              iprot#skip _t9412)
          | 1 -> (if _t9412 = Protocol.T_STRUCT then
              _str9411#set_e (read_talkException iprot)
            else
              iprot#skip _t9412)
          | _ -> iprot#skip _t9412);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9411

class resendPinCode_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "resendPinCode_args.sessionId") | Some _x9414 -> _x9414
  method set_sessionId _x9414 = _sessionId <- Some _x9414
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "resendPinCode_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_resendPinCode_args (iprot : Protocol.t) =
  let _str9417 = new resendPinCode_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9418,_id9419) = iprot#readFieldBegin in
        if _t9418 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9419 with 
          | 2 -> (if _t9418 = Protocol.T_STRING then
              _str9417#set_sessionId iprot#readString
            else
              iprot#skip _t9418)
          | _ -> iprot#skip _t9418);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9417

class resendPinCode_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "resendPinCode_result.e") | Some _x9420 -> _x9420
  method set_e _x9420 = _e <- Some _x9420
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "resendPinCode_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_resendPinCode_result (iprot : Protocol.t) =
  let _str9423 = new resendPinCode_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9424,_id9425) = iprot#readFieldBegin in
        if _t9424 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9425 with 
          | 1 -> (if _t9424 = Protocol.T_STRUCT then
              _str9423#set_e (read_talkException iprot)
            else
              iprot#skip _t9424)
          | _ -> iprot#skip _t9424);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9423

class resendPinCodeBySMS_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "resendPinCodeBySMS_args.sessionId") | Some _x9426 -> _x9426
  method set_sessionId _x9426 = _sessionId <- Some _x9426
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "resendPinCodeBySMS_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_resendPinCodeBySMS_args (iprot : Protocol.t) =
  let _str9429 = new resendPinCodeBySMS_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9430,_id9431) = iprot#readFieldBegin in
        if _t9430 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9431 with 
          | 2 -> (if _t9430 = Protocol.T_STRING then
              _str9429#set_sessionId iprot#readString
            else
              iprot#skip _t9430)
          | _ -> iprot#skip _t9430);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9429

class resendPinCodeBySMS_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "resendPinCodeBySMS_result.e") | Some _x9432 -> _x9432
  method set_e _x9432 = _e <- Some _x9432
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "resendPinCodeBySMS_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_resendPinCodeBySMS_result (iprot : Protocol.t) =
  let _str9435 = new resendPinCodeBySMS_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9436,_id9437) = iprot#readFieldBegin in
        if _t9436 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9437 with 
          | 1 -> (if _t9436 = Protocol.T_STRUCT then
              _str9435#set_e (read_talkException iprot)
            else
              iprot#skip _t9436)
          | _ -> iprot#skip _t9436);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9435

class sendChatChecked_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendChatChecked_args.seq") | Some _x9438 -> _x9438
  method set_seq _x9438 = _seq <- Some _x9438
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _consumer : string option = None
  method get_consumer = _consumer
  method grab_consumer = match _consumer with None->raise (Field_empty "sendChatChecked_args.consumer") | Some _x9439 -> _x9439
  method set_consumer _x9439 = _consumer <- Some _x9439
  method unset_consumer = _consumer <- None
  method reset_consumer = _consumer <- None

  val mutable _lastMessageId : string option = None
  method get_lastMessageId = _lastMessageId
  method grab_lastMessageId = match _lastMessageId with None->raise (Field_empty "sendChatChecked_args.lastMessageId") | Some _x9440 -> _x9440
  method set_lastMessageId _x9440 = _lastMessageId <- Some _x9440
  method unset_lastMessageId = _lastMessageId <- None
  method reset_lastMessageId = _lastMessageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendChatChecked_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _consumer with None -> () | Some _v -> 
      oprot#writeFieldBegin("consumer",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _lastMessageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastMessageId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendChatChecked_args (iprot : Protocol.t) =
  let _str9443 = new sendChatChecked_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9444,_id9445) = iprot#readFieldBegin in
        if _t9444 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9445 with 
          | 1 -> (if _t9444 = Protocol.T_I32 then
              _str9443#set_seq iprot#readI32
            else
              iprot#skip _t9444)
          | 2 -> (if _t9444 = Protocol.T_STRING then
              _str9443#set_consumer iprot#readString
            else
              iprot#skip _t9444)
          | 3 -> (if _t9444 = Protocol.T_STRING then
              _str9443#set_lastMessageId iprot#readString
            else
              iprot#skip _t9444)
          | _ -> iprot#skip _t9444);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9443

class sendChatChecked_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendChatChecked_result.e") | Some _x9446 -> _x9446
  method set_e _x9446 = _e <- Some _x9446
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendChatChecked_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendChatChecked_result (iprot : Protocol.t) =
  let _str9449 = new sendChatChecked_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9450,_id9451) = iprot#readFieldBegin in
        if _t9450 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9451 with 
          | 1 -> (if _t9450 = Protocol.T_STRUCT then
              _str9449#set_e (read_talkException iprot)
            else
              iprot#skip _t9450)
          | _ -> iprot#skip _t9450);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9449

class sendMessageAwaitCommit_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendMessageAwaitCommit_args.seq") | Some _x9452 -> _x9452
  method set_seq _x9452 = _seq <- Some _x9452
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _message : message option = None
  method get_message = _message
  method grab_message = match _message with None->raise (Field_empty "sendMessageAwaitCommit_args.message") | Some _x9453 -> _x9453
  method set_message _x9453 = _message <- Some _x9453
  method unset_message = _message <- None
  method reset_message = _message <- None

  method copy =
      let _new = Oo.copy self in
      if _message <> None then
        _new#set_message self#grab_message#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageAwaitCommit_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _message with None -> () | Some _v -> 
      oprot#writeFieldBegin("message",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageAwaitCommit_args (iprot : Protocol.t) =
  let _str9456 = new sendMessageAwaitCommit_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9457,_id9458) = iprot#readFieldBegin in
        if _t9457 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9458 with 
          | 1 -> (if _t9457 = Protocol.T_I32 then
              _str9456#set_seq iprot#readI32
            else
              iprot#skip _t9457)
          | 2 -> (if _t9457 = Protocol.T_STRUCT then
              _str9456#set_message (read_message iprot)
            else
              iprot#skip _t9457)
          | _ -> iprot#skip _t9457);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9456

class sendMessageAwaitCommit_result =
object (self)
  val mutable _success : commitMessageResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendMessageAwaitCommit_result.success") | Some _x9459 -> _x9459
  method set_success _x9459 = _success <- Some _x9459
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendMessageAwaitCommit_result.e") | Some _x9460 -> _x9460
  method set_e _x9460 = _e <- Some _x9460
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageAwaitCommit_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageAwaitCommit_result (iprot : Protocol.t) =
  let _str9463 = new sendMessageAwaitCommit_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9464,_id9465) = iprot#readFieldBegin in
        if _t9464 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9465 with 
          | 0 -> (if _t9464 = Protocol.T_STRUCT then
              _str9463#set_success (read_commitMessageResult iprot)
            else
              iprot#skip _t9464)
          | 1 -> (if _t9464 = Protocol.T_STRUCT then
              _str9463#set_e (read_talkException iprot)
            else
              iprot#skip _t9464)
          | _ -> iprot#skip _t9464);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9463

class sendChatRemoved_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendChatRemoved_args.seq") | Some _x9466 -> _x9466
  method set_seq _x9466 = _seq <- Some _x9466
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _consumer : string option = None
  method get_consumer = _consumer
  method grab_consumer = match _consumer with None->raise (Field_empty "sendChatRemoved_args.consumer") | Some _x9467 -> _x9467
  method set_consumer _x9467 = _consumer <- Some _x9467
  method unset_consumer = _consumer <- None
  method reset_consumer = _consumer <- None

  val mutable _lastMessageId : string option = None
  method get_lastMessageId = _lastMessageId
  method grab_lastMessageId = match _lastMessageId with None->raise (Field_empty "sendChatRemoved_args.lastMessageId") | Some _x9468 -> _x9468
  method set_lastMessageId _x9468 = _lastMessageId <- Some _x9468
  method unset_lastMessageId = _lastMessageId <- None
  method reset_lastMessageId = _lastMessageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendChatRemoved_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _consumer with None -> () | Some _v -> 
      oprot#writeFieldBegin("consumer",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _lastMessageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastMessageId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendChatRemoved_args (iprot : Protocol.t) =
  let _str9471 = new sendChatRemoved_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9472,_id9473) = iprot#readFieldBegin in
        if _t9472 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9473 with 
          | 1 -> (if _t9472 = Protocol.T_I32 then
              _str9471#set_seq iprot#readI32
            else
              iprot#skip _t9472)
          | 2 -> (if _t9472 = Protocol.T_STRING then
              _str9471#set_consumer iprot#readString
            else
              iprot#skip _t9472)
          | 3 -> (if _t9472 = Protocol.T_STRING then
              _str9471#set_lastMessageId iprot#readString
            else
              iprot#skip _t9472)
          | _ -> iprot#skip _t9472);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9471

class sendChatRemoved_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendChatRemoved_result.e") | Some _x9474 -> _x9474
  method set_e _x9474 = _e <- Some _x9474
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendChatRemoved_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendChatRemoved_result (iprot : Protocol.t) =
  let _str9477 = new sendChatRemoved_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9478,_id9479) = iprot#readFieldBegin in
        if _t9478 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9479 with 
          | 1 -> (if _t9478 = Protocol.T_STRUCT then
              _str9477#set_e (read_talkException iprot)
            else
              iprot#skip _t9478)
          | _ -> iprot#skip _t9478);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9477

class sendContentPreviewUpdated_args =
object (self)
  val mutable _esq : Int32.t option = None
  method get_esq = _esq
  method grab_esq = match _esq with None->raise (Field_empty "sendContentPreviewUpdated_args.esq") | Some _x9480 -> _x9480
  method set_esq _x9480 = _esq <- Some _x9480
  method unset_esq = _esq <- None
  method reset_esq = _esq <- None

  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "sendContentPreviewUpdated_args.messageId") | Some _x9481 -> _x9481
  method set_messageId _x9481 = _messageId <- Some _x9481
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  val mutable _receiverMids : string list option = None
  method get_receiverMids = _receiverMids
  method grab_receiverMids = match _receiverMids with None->raise (Field_empty "sendContentPreviewUpdated_args.receiverMids") | Some _x9482 -> _x9482
  method set_receiverMids _x9482 = _receiverMids <- Some _x9482
  method unset_receiverMids = _receiverMids <- None
  method reset_receiverMids = _receiverMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendContentPreviewUpdated_args";
    (match _esq with None -> () | Some _v -> 
      oprot#writeFieldBegin("esq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _receiverMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("receiverMids",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9485 ->         oprot#writeString(_iter9485);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendContentPreviewUpdated_args (iprot : Protocol.t) =
  let _str9486 = new sendContentPreviewUpdated_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9487,_id9488) = iprot#readFieldBegin in
        if _t9487 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9488 with 
          | 1 -> (if _t9487 = Protocol.T_I32 then
              _str9486#set_esq iprot#readI32
            else
              iprot#skip _t9487)
          | 2 -> (if _t9487 = Protocol.T_STRING then
              _str9486#set_messageId iprot#readString
            else
              iprot#skip _t9487)
          | 3 -> (if _t9487 = Protocol.T_LIST then
              _str9486#set_receiverMids 
                (let (_etype9492,_size9489) = iprot#readListBegin in
                  let _con9493 = (Array.to_list (Array.init _size9489 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9493)
            else
              iprot#skip _t9487)
          | _ -> iprot#skip _t9487);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9486

class sendContentPreviewUpdated_result =
object (self)
  val mutable _success : (string,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendContentPreviewUpdated_result.success") | Some _x9494 -> _x9494
  method set_success _x9494 = _success <- Some _x9494
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendContentPreviewUpdated_result.e") | Some _x9495 -> _x9495
  method set_e _x9495 = _e <- Some _x9495
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendContentPreviewUpdated_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter9498 -> fun _viter9499 -> 
        oprot#writeString(_kiter9498);
        oprot#writeString(_viter9499);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendContentPreviewUpdated_result (iprot : Protocol.t) =
  let _str9500 = new sendContentPreviewUpdated_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9501,_id9502) = iprot#readFieldBegin in
        if _t9501 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9502 with 
          | 0 -> (if _t9501 = Protocol.T_MAP then
              _str9500#set_success 
                (let (_ktype9504,_vtype9505,_size9503) = iprot#readMapBegin in
                let _con9507 = Hashtbl.create _size9503 in
                  for i = 1 to _size9503 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con9507 _k _v
                  done; iprot#readMapEnd; _con9507)
            else
              iprot#skip _t9501)
          | 1 -> (if _t9501 = Protocol.T_STRUCT then
              _str9500#set_e (read_talkException iprot)
            else
              iprot#skip _t9501)
          | _ -> iprot#skip _t9501);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9500

class sendContentReceipt_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendContentReceipt_args.seq") | Some _x9508 -> _x9508
  method set_seq _x9508 = _seq <- Some _x9508
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _consumer : string option = None
  method get_consumer = _consumer
  method grab_consumer = match _consumer with None->raise (Field_empty "sendContentReceipt_args.consumer") | Some _x9509 -> _x9509
  method set_consumer _x9509 = _consumer <- Some _x9509
  method unset_consumer = _consumer <- None
  method reset_consumer = _consumer <- None

  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "sendContentReceipt_args.messageId") | Some _x9510 -> _x9510
  method set_messageId _x9510 = _messageId <- Some _x9510
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendContentReceipt_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _consumer with None -> () | Some _v -> 
      oprot#writeFieldBegin("consumer",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendContentReceipt_args (iprot : Protocol.t) =
  let _str9513 = new sendContentReceipt_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9514,_id9515) = iprot#readFieldBegin in
        if _t9514 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9515 with 
          | 1 -> (if _t9514 = Protocol.T_I32 then
              _str9513#set_seq iprot#readI32
            else
              iprot#skip _t9514)
          | 2 -> (if _t9514 = Protocol.T_STRING then
              _str9513#set_consumer iprot#readString
            else
              iprot#skip _t9514)
          | 3 -> (if _t9514 = Protocol.T_STRING then
              _str9513#set_messageId iprot#readString
            else
              iprot#skip _t9514)
          | _ -> iprot#skip _t9514);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9513

class sendContentReceipt_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendContentReceipt_result.e") | Some _x9516 -> _x9516
  method set_e _x9516 = _e <- Some _x9516
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendContentReceipt_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendContentReceipt_result (iprot : Protocol.t) =
  let _str9519 = new sendContentReceipt_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9520,_id9521) = iprot#readFieldBegin in
        if _t9520 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9521 with 
          | 1 -> (if _t9520 = Protocol.T_STRUCT then
              _str9519#set_e (read_talkException iprot)
            else
              iprot#skip _t9520)
          | _ -> iprot#skip _t9520);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9519

class sendDummyPush_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendDummyPush_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendDummyPush_args (iprot : Protocol.t) =
  let _str9524 = new sendDummyPush_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9525,_id9526) = iprot#readFieldBegin in
        if _t9525 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9526 with 
          | _ -> iprot#skip _t9525);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9524

class sendDummyPush_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendDummyPush_result.e") | Some _x9527 -> _x9527
  method set_e _x9527 = _e <- Some _x9527
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendDummyPush_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendDummyPush_result (iprot : Protocol.t) =
  let _str9530 = new sendDummyPush_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9531,_id9532) = iprot#readFieldBegin in
        if _t9531 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9532 with 
          | 1 -> (if _t9531 = Protocol.T_STRUCT then
              _str9530#set_e (read_talkException iprot)
            else
              iprot#skip _t9531)
          | _ -> iprot#skip _t9531);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9530

class removeE2EEPublicKey_args =
object (self)
  val mutable _publicKey : e2EEPublicKey option = None
  method get_publicKey = _publicKey
  method grab_publicKey = match _publicKey with None->raise (Field_empty "removeE2EEPublicKey_args.publicKey") | Some _x9533 -> _x9533
  method set_publicKey _x9533 = _publicKey <- Some _x9533
  method unset_publicKey = _publicKey <- None
  method reset_publicKey = _publicKey <- None

  method copy =
      let _new = Oo.copy self in
      if _publicKey <> None then
        _new#set_publicKey self#grab_publicKey#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeE2EEPublicKey_args";
    (match _publicKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("publicKey",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeE2EEPublicKey_args (iprot : Protocol.t) =
  let _str9536 = new removeE2EEPublicKey_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9537,_id9538) = iprot#readFieldBegin in
        if _t9537 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9538 with 
          | 2 -> (if _t9537 = Protocol.T_STRUCT then
              _str9536#set_publicKey (read_e2EEPublicKey iprot)
            else
              iprot#skip _t9537)
          | _ -> iprot#skip _t9537);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9536

class removeE2EEPublicKey_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeE2EEPublicKey_result.e") | Some _x9539 -> _x9539
  method set_e _x9539 = _e <- Some _x9539
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeE2EEPublicKey_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeE2EEPublicKey_result (iprot : Protocol.t) =
  let _str9542 = new removeE2EEPublicKey_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9543,_id9544) = iprot#readFieldBegin in
        if _t9543 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9544 with 
          | 1 -> (if _t9543 = Protocol.T_STRUCT then
              _str9542#set_e (read_talkException iprot)
            else
              iprot#skip _t9543)
          | _ -> iprot#skip _t9543);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9542

class negotiateE2EEPublicKey_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "negotiateE2EEPublicKey_args.mid") | Some _x9545 -> _x9545
  method set_mid _x9545 = _mid <- Some _x9545
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "negotiateE2EEPublicKey_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_negotiateE2EEPublicKey_args (iprot : Protocol.t) =
  let _str9548 = new negotiateE2EEPublicKey_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9549,_id9550) = iprot#readFieldBegin in
        if _t9549 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9550 with 
          | 2 -> (if _t9549 = Protocol.T_STRING then
              _str9548#set_mid iprot#readString
            else
              iprot#skip _t9549)
          | _ -> iprot#skip _t9549);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9548

class negotiateE2EEPublicKey_result =
object (self)
  val mutable _success : e2EENegotiationResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "negotiateE2EEPublicKey_result.success") | Some _x9551 -> _x9551
  method set_success _x9551 = _success <- Some _x9551
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "negotiateE2EEPublicKey_result.e") | Some _x9552 -> _x9552
  method set_e _x9552 = _e <- Some _x9552
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "negotiateE2EEPublicKey_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_negotiateE2EEPublicKey_result (iprot : Protocol.t) =
  let _str9555 = new negotiateE2EEPublicKey_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9556,_id9557) = iprot#readFieldBegin in
        if _t9556 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9557 with 
          | 0 -> (if _t9556 = Protocol.T_STRUCT then
              _str9555#set_success (read_e2EENegotiationResult iprot)
            else
              iprot#skip _t9556)
          | 1 -> (if _t9556 = Protocol.T_STRUCT then
              _str9555#set_e (read_talkException iprot)
            else
              iprot#skip _t9556)
          | _ -> iprot#skip _t9556);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9555

class getE2EEPublicKey_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "getE2EEPublicKey_args.mid") | Some _x9558 -> _x9558
  method set_mid _x9558 = _mid <- Some _x9558
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  val mutable _version : Int32.t option = None
  method get_version = _version
  method grab_version = match _version with None->raise (Field_empty "getE2EEPublicKey_args.version") | Some _x9559 -> _x9559
  method set_version _x9559 = _version <- Some _x9559
  method unset_version = _version <- None
  method reset_version = _version <- None

  val mutable _keyId : Int32.t option = None
  method get_keyId = _keyId
  method grab_keyId = match _keyId with None->raise (Field_empty "getE2EEPublicKey_args.keyId") | Some _x9560 -> _x9560
  method set_keyId _x9560 = _keyId <- Some _x9560
  method unset_keyId = _keyId <- None
  method reset_keyId = _keyId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getE2EEPublicKey_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _version with None -> () | Some _v -> 
      oprot#writeFieldBegin("version",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _keyId with None -> () | Some _v -> 
      oprot#writeFieldBegin("keyId",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getE2EEPublicKey_args (iprot : Protocol.t) =
  let _str9563 = new getE2EEPublicKey_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9564,_id9565) = iprot#readFieldBegin in
        if _t9564 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9565 with 
          | 2 -> (if _t9564 = Protocol.T_STRING then
              _str9563#set_mid iprot#readString
            else
              iprot#skip _t9564)
          | 3 -> (if _t9564 = Protocol.T_I32 then
              _str9563#set_version iprot#readI32
            else
              iprot#skip _t9564)
          | 4 -> (if _t9564 = Protocol.T_I32 then
              _str9563#set_keyId iprot#readI32
            else
              iprot#skip _t9564)
          | _ -> iprot#skip _t9564);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9563

class getE2EEPublicKey_result =
object (self)
  val mutable _success : e2EEPublicKey option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getE2EEPublicKey_result.success") | Some _x9566 -> _x9566
  method set_success _x9566 = _success <- Some _x9566
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getE2EEPublicKey_result.e") | Some _x9567 -> _x9567
  method set_e _x9567 = _e <- Some _x9567
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getE2EEPublicKey_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getE2EEPublicKey_result (iprot : Protocol.t) =
  let _str9570 = new getE2EEPublicKey_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9571,_id9572) = iprot#readFieldBegin in
        if _t9571 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9572 with 
          | 0 -> (if _t9571 = Protocol.T_STRUCT then
              _str9570#set_success (read_e2EEPublicKey iprot)
            else
              iprot#skip _t9571)
          | 1 -> (if _t9571 = Protocol.T_STRUCT then
              _str9570#set_e (read_talkException iprot)
            else
              iprot#skip _t9571)
          | _ -> iprot#skip _t9571);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9570

class requestE2EEKeyExchange_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "requestE2EEKeyExchange_args.reqSeq") | Some _x9573 -> _x9573
  method set_reqSeq _x9573 = _reqSeq <- Some _x9573
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _temporalPublicKey : string option = None
  method get_temporalPublicKey = _temporalPublicKey
  method grab_temporalPublicKey = match _temporalPublicKey with None->raise (Field_empty "requestE2EEKeyExchange_args.temporalPublicKey") | Some _x9574 -> _x9574
  method set_temporalPublicKey _x9574 = _temporalPublicKey <- Some _x9574
  method unset_temporalPublicKey = _temporalPublicKey <- None
  method reset_temporalPublicKey = _temporalPublicKey <- None

  val mutable _publicKey : e2EEPublicKey option = None
  method get_publicKey = _publicKey
  method grab_publicKey = match _publicKey with None->raise (Field_empty "requestE2EEKeyExchange_args.publicKey") | Some _x9575 -> _x9575
  method set_publicKey _x9575 = _publicKey <- Some _x9575
  method unset_publicKey = _publicKey <- None
  method reset_publicKey = _publicKey <- None

  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "requestE2EEKeyExchange_args.verifier") | Some _x9576 -> _x9576
  method set_verifier _x9576 = _verifier <- Some _x9576
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  method copy =
      let _new = Oo.copy self in
      if _publicKey <> None then
        _new#set_publicKey self#grab_publicKey#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestE2EEKeyExchange_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _temporalPublicKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("temporalPublicKey",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _publicKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("publicKey",Protocol.T_STRUCT,3);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestE2EEKeyExchange_args (iprot : Protocol.t) =
  let _str9579 = new requestE2EEKeyExchange_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9580,_id9581) = iprot#readFieldBegin in
        if _t9580 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9581 with 
          | 1 -> (if _t9580 = Protocol.T_I32 then
              _str9579#set_reqSeq iprot#readI32
            else
              iprot#skip _t9580)
          | 2 -> (if _t9580 = Protocol.T_STRING then
              _str9579#set_temporalPublicKey iprot#readString
            else
              iprot#skip _t9580)
          | 3 -> (if _t9580 = Protocol.T_STRUCT then
              _str9579#set_publicKey (read_e2EEPublicKey iprot)
            else
              iprot#skip _t9580)
          | 4 -> (if _t9580 = Protocol.T_STRING then
              _str9579#set_verifier iprot#readString
            else
              iprot#skip _t9580)
          | _ -> iprot#skip _t9580);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9579

class requestE2EEKeyExchange_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "requestE2EEKeyExchange_result.e") | Some _x9582 -> _x9582
  method set_e _x9582 = _e <- Some _x9582
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestE2EEKeyExchange_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestE2EEKeyExchange_result (iprot : Protocol.t) =
  let _str9585 = new requestE2EEKeyExchange_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9586,_id9587) = iprot#readFieldBegin in
        if _t9586 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9587 with 
          | 1 -> (if _t9586 = Protocol.T_STRUCT then
              _str9585#set_e (read_talkException iprot)
            else
              iprot#skip _t9586)
          | _ -> iprot#skip _t9586);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9585

class getLastE2EEPublicKeys_args =
object (self)
  val mutable _chatMid : string option = None
  method get_chatMid = _chatMid
  method grab_chatMid = match _chatMid with None->raise (Field_empty "getLastE2EEPublicKeys_args.chatMid") | Some _x9588 -> _x9588
  method set_chatMid _x9588 = _chatMid <- Some _x9588
  method unset_chatMid = _chatMid <- None
  method reset_chatMid = _chatMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getLastE2EEPublicKeys_args";
    (match _chatMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getLastE2EEPublicKeys_args (iprot : Protocol.t) =
  let _str9591 = new getLastE2EEPublicKeys_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9592,_id9593) = iprot#readFieldBegin in
        if _t9592 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9593 with 
          | 2 -> (if _t9592 = Protocol.T_STRING then
              _str9591#set_chatMid iprot#readString
            else
              iprot#skip _t9592)
          | _ -> iprot#skip _t9592);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9591

class getLastE2EEPublicKeys_result =
object (self)
  val mutable _success : (string,e2EEPublicKey) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getLastE2EEPublicKeys_result.success") | Some _x9594 -> _x9594
  method set_success _x9594 = _success <- Some _x9594
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getLastE2EEPublicKeys_result.e") | Some _x9595 -> _x9595
  method set_e _x9595 = _e <- Some _x9595
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k v#copy) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getLastE2EEPublicKeys_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter9598 -> fun _viter9599 -> 
        oprot#writeString(_kiter9598);
        _viter9599#write(oprot);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getLastE2EEPublicKeys_result (iprot : Protocol.t) =
  let _str9600 = new getLastE2EEPublicKeys_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9601,_id9602) = iprot#readFieldBegin in
        if _t9601 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9602 with 
          | 0 -> (if _t9601 = Protocol.T_MAP then
              _str9600#set_success 
                (let (_ktype9604,_vtype9605,_size9603) = iprot#readMapBegin in
                let _con9607 = Hashtbl.create _size9603 in
                  for i = 1 to _size9603 do
                    let _k = iprot#readString in
                    let _v = (read_e2EEPublicKey iprot) in
                      Hashtbl.add _con9607 _k _v
                  done; iprot#readMapEnd; _con9607)
            else
              iprot#skip _t9601)
          | 1 -> (if _t9601 = Protocol.T_STRUCT then
              _str9600#set_e (read_talkException iprot)
            else
              iprot#skip _t9601)
          | _ -> iprot#skip _t9601);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9600

class registerE2EEPublicKey_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "registerE2EEPublicKey_args.reqSeq") | Some _x9608 -> _x9608
  method set_reqSeq _x9608 = _reqSeq <- Some _x9608
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _publicKey : e2EEPublicKey option = None
  method get_publicKey = _publicKey
  method grab_publicKey = match _publicKey with None->raise (Field_empty "registerE2EEPublicKey_args.publicKey") | Some _x9609 -> _x9609
  method set_publicKey _x9609 = _publicKey <- Some _x9609
  method unset_publicKey = _publicKey <- None
  method reset_publicKey = _publicKey <- None

  method copy =
      let _new = Oo.copy self in
      if _publicKey <> None then
        _new#set_publicKey self#grab_publicKey#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerE2EEPublicKey_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _publicKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("publicKey",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerE2EEPublicKey_args (iprot : Protocol.t) =
  let _str9612 = new registerE2EEPublicKey_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9613,_id9614) = iprot#readFieldBegin in
        if _t9613 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9614 with 
          | 1 -> (if _t9613 = Protocol.T_I32 then
              _str9612#set_reqSeq iprot#readI32
            else
              iprot#skip _t9613)
          | 2 -> (if _t9613 = Protocol.T_STRUCT then
              _str9612#set_publicKey (read_e2EEPublicKey iprot)
            else
              iprot#skip _t9613)
          | _ -> iprot#skip _t9613);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9612

class registerE2EEPublicKey_result =
object (self)
  val mutable _success : e2EEPublicKey option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerE2EEPublicKey_result.success") | Some _x9615 -> _x9615
  method set_success _x9615 = _success <- Some _x9615
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerE2EEPublicKey_result.e") | Some _x9616 -> _x9616
  method set_e _x9616 = _e <- Some _x9616
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerE2EEPublicKey_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerE2EEPublicKey_result (iprot : Protocol.t) =
  let _str9619 = new registerE2EEPublicKey_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9620,_id9621) = iprot#readFieldBegin in
        if _t9620 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9621 with 
          | 0 -> (if _t9620 = Protocol.T_STRUCT then
              _str9619#set_success (read_e2EEPublicKey iprot)
            else
              iprot#skip _t9620)
          | 1 -> (if _t9620 = Protocol.T_STRUCT then
              _str9619#set_e (read_talkException iprot)
            else
              iprot#skip _t9620)
          | _ -> iprot#skip _t9620);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9619

class getE2EEPublicKeys_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getE2EEPublicKeys_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getE2EEPublicKeys_args (iprot : Protocol.t) =
  let _str9624 = new getE2EEPublicKeys_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9625,_id9626) = iprot#readFieldBegin in
        if _t9625 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9626 with 
          | _ -> iprot#skip _t9625);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9624

class getE2EEPublicKeys_result =
object (self)
  val mutable _success : e2EEPublicKey list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getE2EEPublicKeys_result.success") | Some _x9627 -> _x9627
  method set_success _x9627 = _success <- Some _x9627
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getE2EEPublicKeys_result.e") | Some _x9628 -> _x9628
  method set_e _x9628 = _e <- Some _x9628
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getE2EEPublicKeys_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter9631 ->         _iter9631#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getE2EEPublicKeys_result (iprot : Protocol.t) =
  let _str9632 = new getE2EEPublicKeys_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9633,_id9634) = iprot#readFieldBegin in
        if _t9633 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9634 with 
          | 0 -> (if _t9633 = Protocol.T_LIST then
              _str9632#set_success 
                (let (_etype9638,_size9635) = iprot#readListBegin in
                  let _con9639 = (Array.to_list (Array.init _size9635 (fun _ -> (read_e2EEPublicKey iprot)))) in
                    iprot#readListEnd; _con9639)
            else
              iprot#skip _t9633)
          | 1 -> (if _t9633 = Protocol.T_STRUCT then
              _str9632#set_e (read_talkException iprot)
            else
              iprot#skip _t9633)
          | _ -> iprot#skip _t9633);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9632

class getE2EEPublicKeysEx_args =
object (self)
  val mutable _ignoreE2EEStatus : bool option = None
  method get_ignoreE2EEStatus = _ignoreE2EEStatus
  method grab_ignoreE2EEStatus = match _ignoreE2EEStatus with None->raise (Field_empty "getE2EEPublicKeysEx_args.ignoreE2EEStatus") | Some _x9640 -> _x9640
  method set_ignoreE2EEStatus _x9640 = _ignoreE2EEStatus <- Some _x9640
  method unset_ignoreE2EEStatus = _ignoreE2EEStatus <- None
  method reset_ignoreE2EEStatus = _ignoreE2EEStatus <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getE2EEPublicKeysEx_args";
    (match _ignoreE2EEStatus with None -> () | Some _v -> 
      oprot#writeFieldBegin("ignoreE2EEStatus",Protocol.T_BOOL,2);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getE2EEPublicKeysEx_args (iprot : Protocol.t) =
  let _str9643 = new getE2EEPublicKeysEx_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9644,_id9645) = iprot#readFieldBegin in
        if _t9644 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9645 with 
          | 2 -> (if _t9644 = Protocol.T_BOOL then
              _str9643#set_ignoreE2EEStatus iprot#readBool
            else
              iprot#skip _t9644)
          | _ -> iprot#skip _t9644);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9643

class getE2EEPublicKeysEx_result =
object (self)
  val mutable _success : e2EEPublicKey list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getE2EEPublicKeysEx_result.success") | Some _x9646 -> _x9646
  method set_success _x9646 = _success <- Some _x9646
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getE2EEPublicKeysEx_result.e") | Some _x9647 -> _x9647
  method set_e _x9647 = _e <- Some _x9647
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getE2EEPublicKeysEx_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter9650 ->         _iter9650#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getE2EEPublicKeysEx_result (iprot : Protocol.t) =
  let _str9651 = new getE2EEPublicKeysEx_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9652,_id9653) = iprot#readFieldBegin in
        if _t9652 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9653 with 
          | 0 -> (if _t9652 = Protocol.T_LIST then
              _str9651#set_success 
                (let (_etype9657,_size9654) = iprot#readListBegin in
                  let _con9658 = (Array.to_list (Array.init _size9654 (fun _ -> (read_e2EEPublicKey iprot)))) in
                    iprot#readListEnd; _con9658)
            else
              iprot#skip _t9652)
          | 1 -> (if _t9652 = Protocol.T_STRUCT then
              _str9651#set_e (read_talkException iprot)
            else
              iprot#skip _t9652)
          | _ -> iprot#skip _t9652);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9651

class getReadMessageOpsInBulk_args =
object (self)
  val mutable _chatIds : string list option = None
  method get_chatIds = _chatIds
  method grab_chatIds = match _chatIds with None->raise (Field_empty "getReadMessageOpsInBulk_args.chatIds") | Some _x9659 -> _x9659
  method set_chatIds _x9659 = _chatIds <- Some _x9659
  method unset_chatIds = _chatIds <- None
  method reset_chatIds = _chatIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getReadMessageOpsInBulk_args";
    (match _chatIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatIds",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9662 ->         oprot#writeString(_iter9662);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getReadMessageOpsInBulk_args (iprot : Protocol.t) =
  let _str9663 = new getReadMessageOpsInBulk_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9664,_id9665) = iprot#readFieldBegin in
        if _t9664 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9665 with 
          | 2 -> (if _t9664 = Protocol.T_LIST then
              _str9663#set_chatIds 
                (let (_etype9669,_size9666) = iprot#readListBegin in
                  let _con9670 = (Array.to_list (Array.init _size9666 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9670)
            else
              iprot#skip _t9664)
          | _ -> iprot#skip _t9664);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9663

class getReadMessageOpsInBulk_result =
object (self)
  val mutable _success : operation list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getReadMessageOpsInBulk_result.success") | Some _x9671 -> _x9671
  method set_success _x9671 = _success <- Some _x9671
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getReadMessageOpsInBulk_result.e") | Some _x9672 -> _x9672
  method set_e _x9672 = _e <- Some _x9672
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getReadMessageOpsInBulk_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter9675 ->         _iter9675#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getReadMessageOpsInBulk_result (iprot : Protocol.t) =
  let _str9676 = new getReadMessageOpsInBulk_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9677,_id9678) = iprot#readFieldBegin in
        if _t9677 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9678 with 
          | 0 -> (if _t9677 = Protocol.T_LIST then
              _str9676#set_success 
                (let (_etype9682,_size9679) = iprot#readListBegin in
                  let _con9683 = (Array.to_list (Array.init _size9679 (fun _ -> (read_operation iprot)))) in
                    iprot#readListEnd; _con9683)
            else
              iprot#skip _t9677)
          | 1 -> (if _t9677 = Protocol.T_STRUCT then
              _str9676#set_e (read_talkException iprot)
            else
              iprot#skip _t9677)
          | _ -> iprot#skip _t9677);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9676

class sendEvent_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendEvent_args.seq") | Some _x9684 -> _x9684
  method set_seq _x9684 = _seq <- Some _x9684
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _message : message option = None
  method get_message = _message
  method grab_message = match _message with None->raise (Field_empty "sendEvent_args.message") | Some _x9685 -> _x9685
  method set_message _x9685 = _message <- Some _x9685
  method unset_message = _message <- None
  method reset_message = _message <- None

  method copy =
      let _new = Oo.copy self in
      if _message <> None then
        _new#set_message self#grab_message#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendEvent_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _message with None -> () | Some _v -> 
      oprot#writeFieldBegin("message",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendEvent_args (iprot : Protocol.t) =
  let _str9688 = new sendEvent_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9689,_id9690) = iprot#readFieldBegin in
        if _t9689 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9690 with 
          | 1 -> (if _t9689 = Protocol.T_I32 then
              _str9688#set_seq iprot#readI32
            else
              iprot#skip _t9689)
          | 2 -> (if _t9689 = Protocol.T_STRUCT then
              _str9688#set_message (read_message iprot)
            else
              iprot#skip _t9689)
          | _ -> iprot#skip _t9689);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9688

class sendEvent_result =
object (self)
  val mutable _success : message option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendEvent_result.success") | Some _x9691 -> _x9691
  method set_success _x9691 = _success <- Some _x9691
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendEvent_result.e") | Some _x9692 -> _x9692
  method set_e _x9692 = _e <- Some _x9692
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendEvent_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendEvent_result (iprot : Protocol.t) =
  let _str9695 = new sendEvent_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9696,_id9697) = iprot#readFieldBegin in
        if _t9696 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9697 with 
          | 0 -> (if _t9696 = Protocol.T_STRUCT then
              _str9695#set_success (read_message iprot)
            else
              iprot#skip _t9696)
          | 1 -> (if _t9696 = Protocol.T_STRUCT then
              _str9695#set_e (read_talkException iprot)
            else
              iprot#skip _t9696)
          | _ -> iprot#skip _t9696);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9695

class sendMessage_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendMessage_args.seq") | Some _x9698 -> _x9698
  method set_seq _x9698 = _seq <- Some _x9698
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _message : message option = None
  method get_message = _message
  method grab_message = match _message with None->raise (Field_empty "sendMessage_args.message") | Some _x9699 -> _x9699
  method set_message _x9699 = _message <- Some _x9699
  method unset_message = _message <- None
  method reset_message = _message <- None

  method copy =
      let _new = Oo.copy self in
      if _message <> None then
        _new#set_message self#grab_message#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessage_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _message with None -> () | Some _v -> 
      oprot#writeFieldBegin("message",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessage_args (iprot : Protocol.t) =
  let _str9702 = new sendMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9703,_id9704) = iprot#readFieldBegin in
        if _t9703 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9704 with 
          | 1 -> (if _t9703 = Protocol.T_I32 then
              _str9702#set_seq iprot#readI32
            else
              iprot#skip _t9703)
          | 2 -> (if _t9703 = Protocol.T_STRUCT then
              _str9702#set_message (read_message iprot)
            else
              iprot#skip _t9703)
          | _ -> iprot#skip _t9703);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9702

class sendMessage_result =
object (self)
  val mutable _success : message option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendMessage_result.success") | Some _x9705 -> _x9705
  method set_success _x9705 = _success <- Some _x9705
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendMessage_result.e") | Some _x9706 -> _x9706
  method set_e _x9706 = _e <- Some _x9706
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessage_result (iprot : Protocol.t) =
  let _str9709 = new sendMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9710,_id9711) = iprot#readFieldBegin in
        if _t9710 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9711 with 
          | 0 -> (if _t9710 = Protocol.T_STRUCT then
              _str9709#set_success (read_message iprot)
            else
              iprot#skip _t9710)
          | 1 -> (if _t9710 = Protocol.T_STRUCT then
              _str9709#set_e (read_talkException iprot)
            else
              iprot#skip _t9710)
          | _ -> iprot#skip _t9710);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9709

class sendMessageIgnored_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendMessageIgnored_args.seq") | Some _x9712 -> _x9712
  method set_seq _x9712 = _seq <- Some _x9712
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _consumer : string option = None
  method get_consumer = _consumer
  method grab_consumer = match _consumer with None->raise (Field_empty "sendMessageIgnored_args.consumer") | Some _x9713 -> _x9713
  method set_consumer _x9713 = _consumer <- Some _x9713
  method unset_consumer = _consumer <- None
  method reset_consumer = _consumer <- None

  val mutable _messageIds : string list option = None
  method get_messageIds = _messageIds
  method grab_messageIds = match _messageIds with None->raise (Field_empty "sendMessageIgnored_args.messageIds") | Some _x9714 -> _x9714
  method set_messageIds _x9714 = _messageIds <- Some _x9714
  method unset_messageIds = _messageIds <- None
  method reset_messageIds = _messageIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageIgnored_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _consumer with None -> () | Some _v -> 
      oprot#writeFieldBegin("consumer",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageIds",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9717 ->         oprot#writeString(_iter9717);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageIgnored_args (iprot : Protocol.t) =
  let _str9718 = new sendMessageIgnored_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9719,_id9720) = iprot#readFieldBegin in
        if _t9719 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9720 with 
          | 1 -> (if _t9719 = Protocol.T_I32 then
              _str9718#set_seq iprot#readI32
            else
              iprot#skip _t9719)
          | 2 -> (if _t9719 = Protocol.T_STRING then
              _str9718#set_consumer iprot#readString
            else
              iprot#skip _t9719)
          | 3 -> (if _t9719 = Protocol.T_LIST then
              _str9718#set_messageIds 
                (let (_etype9724,_size9721) = iprot#readListBegin in
                  let _con9725 = (Array.to_list (Array.init _size9721 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9725)
            else
              iprot#skip _t9719)
          | _ -> iprot#skip _t9719);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9718

class sendMessageIgnored_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendMessageIgnored_result.e") | Some _x9726 -> _x9726
  method set_e _x9726 = _e <- Some _x9726
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageIgnored_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageIgnored_result (iprot : Protocol.t) =
  let _str9729 = new sendMessageIgnored_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9730,_id9731) = iprot#readFieldBegin in
        if _t9730 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9731 with 
          | 1 -> (if _t9730 = Protocol.T_STRUCT then
              _str9729#set_e (read_talkException iprot)
            else
              iprot#skip _t9730)
          | _ -> iprot#skip _t9730);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9729

class sendMessageReceipt_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendMessageReceipt_args.seq") | Some _x9732 -> _x9732
  method set_seq _x9732 = _seq <- Some _x9732
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _consumer : string option = None
  method get_consumer = _consumer
  method grab_consumer = match _consumer with None->raise (Field_empty "sendMessageReceipt_args.consumer") | Some _x9733 -> _x9733
  method set_consumer _x9733 = _consumer <- Some _x9733
  method unset_consumer = _consumer <- None
  method reset_consumer = _consumer <- None

  val mutable _messageIds : string list option = None
  method get_messageIds = _messageIds
  method grab_messageIds = match _messageIds with None->raise (Field_empty "sendMessageReceipt_args.messageIds") | Some _x9734 -> _x9734
  method set_messageIds _x9734 = _messageIds <- Some _x9734
  method unset_messageIds = _messageIds <- None
  method reset_messageIds = _messageIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageReceipt_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _consumer with None -> () | Some _v -> 
      oprot#writeFieldBegin("consumer",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageIds",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9737 ->         oprot#writeString(_iter9737);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageReceipt_args (iprot : Protocol.t) =
  let _str9738 = new sendMessageReceipt_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9739,_id9740) = iprot#readFieldBegin in
        if _t9739 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9740 with 
          | 1 -> (if _t9739 = Protocol.T_I32 then
              _str9738#set_seq iprot#readI32
            else
              iprot#skip _t9739)
          | 2 -> (if _t9739 = Protocol.T_STRING then
              _str9738#set_consumer iprot#readString
            else
              iprot#skip _t9739)
          | 3 -> (if _t9739 = Protocol.T_LIST then
              _str9738#set_messageIds 
                (let (_etype9744,_size9741) = iprot#readListBegin in
                  let _con9745 = (Array.to_list (Array.init _size9741 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9745)
            else
              iprot#skip _t9739)
          | _ -> iprot#skip _t9739);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9738

class sendMessageReceipt_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendMessageReceipt_result.e") | Some _x9746 -> _x9746
  method set_e _x9746 = _e <- Some _x9746
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageReceipt_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageReceipt_result (iprot : Protocol.t) =
  let _str9749 = new sendMessageReceipt_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9750,_id9751) = iprot#readFieldBegin in
        if _t9750 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9751 with 
          | 1 -> (if _t9750 = Protocol.T_STRUCT then
              _str9749#set_e (read_talkException iprot)
            else
              iprot#skip _t9750)
          | _ -> iprot#skip _t9750);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9749

class findContactByMetaTag_args =
object (self)
  val mutable _userid : string option = None
  method get_userid = _userid
  method grab_userid = match _userid with None->raise (Field_empty "findContactByMetaTag_args.userid") | Some _x9752 -> _x9752
  method set_userid _x9752 = _userid <- Some _x9752
  method unset_userid = _userid <- None
  method reset_userid = _userid <- None

  val mutable _reference : string option = None
  method get_reference = _reference
  method grab_reference = match _reference with None->raise (Field_empty "findContactByMetaTag_args.reference") | Some _x9753 -> _x9753
  method set_reference _x9753 = _reference <- Some _x9753
  method unset_reference = _reference <- None
  method reset_reference = _reference <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByMetaTag_args";
    (match _userid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _reference with None -> () | Some _v -> 
      oprot#writeFieldBegin("reference",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByMetaTag_args (iprot : Protocol.t) =
  let _str9756 = new findContactByMetaTag_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9757,_id9758) = iprot#readFieldBegin in
        if _t9757 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9758 with 
          | 2 -> (if _t9757 = Protocol.T_STRING then
              _str9756#set_userid iprot#readString
            else
              iprot#skip _t9757)
          | 3 -> (if _t9757 = Protocol.T_STRING then
              _str9756#set_reference iprot#readString
            else
              iprot#skip _t9757)
          | _ -> iprot#skip _t9757);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9756

class findContactByMetaTag_result =
object (self)
  val mutable _success : contact option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findContactByMetaTag_result.success") | Some _x9759 -> _x9759
  method set_success _x9759 = _success <- Some _x9759
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findContactByMetaTag_result.e") | Some _x9760 -> _x9760
  method set_e _x9760 = _e <- Some _x9760
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByMetaTag_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByMetaTag_result (iprot : Protocol.t) =
  let _str9763 = new findContactByMetaTag_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9764,_id9765) = iprot#readFieldBegin in
        if _t9764 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9765 with 
          | 0 -> (if _t9764 = Protocol.T_STRUCT then
              _str9763#set_success (read_contact iprot)
            else
              iprot#skip _t9764)
          | 1 -> (if _t9764 = Protocol.T_STRUCT then
              _str9763#set_e (read_talkException iprot)
            else
              iprot#skip _t9764)
          | _ -> iprot#skip _t9764);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9763

class sendMessageToMyHome_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendMessageToMyHome_args.seq") | Some _x9766 -> _x9766
  method set_seq _x9766 = _seq <- Some _x9766
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _message : message option = None
  method get_message = _message
  method grab_message = match _message with None->raise (Field_empty "sendMessageToMyHome_args.message") | Some _x9767 -> _x9767
  method set_message _x9767 = _message <- Some _x9767
  method unset_message = _message <- None
  method reset_message = _message <- None

  method copy =
      let _new = Oo.copy self in
      if _message <> None then
        _new#set_message self#grab_message#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageToMyHome_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _message with None -> () | Some _v -> 
      oprot#writeFieldBegin("message",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageToMyHome_args (iprot : Protocol.t) =
  let _str9770 = new sendMessageToMyHome_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9771,_id9772) = iprot#readFieldBegin in
        if _t9771 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9772 with 
          | 1 -> (if _t9771 = Protocol.T_I32 then
              _str9770#set_seq iprot#readI32
            else
              iprot#skip _t9771)
          | 2 -> (if _t9771 = Protocol.T_STRUCT then
              _str9770#set_message (read_message iprot)
            else
              iprot#skip _t9771)
          | _ -> iprot#skip _t9771);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9770

class sendMessageToMyHome_result =
object (self)
  val mutable _success : message option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendMessageToMyHome_result.success") | Some _x9773 -> _x9773
  method set_success _x9773 = _success <- Some _x9773
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendMessageToMyHome_result.e") | Some _x9774 -> _x9774
  method set_e _x9774 = _e <- Some _x9774
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageToMyHome_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageToMyHome_result (iprot : Protocol.t) =
  let _str9777 = new sendMessageToMyHome_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9778,_id9779) = iprot#readFieldBegin in
        if _t9778 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9779 with 
          | 0 -> (if _t9778 = Protocol.T_STRUCT then
              _str9777#set_success (read_message iprot)
            else
              iprot#skip _t9778)
          | 1 -> (if _t9778 = Protocol.T_STRUCT then
              _str9777#set_e (read_talkException iprot)
            else
              iprot#skip _t9778)
          | _ -> iprot#skip _t9778);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9777

class setBuddyLocation_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "setBuddyLocation_args.mid") | Some _x9780 -> _x9780
  method set_mid _x9780 = _mid <- Some _x9780
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  val mutable _index : Int32.t option = None
  method get_index = _index
  method grab_index = match _index with None->raise (Field_empty "setBuddyLocation_args.index") | Some _x9781 -> _x9781
  method set_index _x9781 = _index <- Some _x9781
  method unset_index = _index <- None
  method reset_index = _index <- None

  val mutable _location : geolocation option = None
  method get_location = _location
  method grab_location = match _location with None->raise (Field_empty "setBuddyLocation_args.location") | Some _x9782 -> _x9782
  method set_location _x9782 = _location <- Some _x9782
  method unset_location = _location <- None
  method reset_location = _location <- None

  method copy =
      let _new = Oo.copy self in
      if _location <> None then
        _new#set_location self#grab_location#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setBuddyLocation_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _index with None -> () | Some _v -> 
      oprot#writeFieldBegin("index",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _location with None -> () | Some _v -> 
      oprot#writeFieldBegin("location",Protocol.T_STRUCT,4);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setBuddyLocation_args (iprot : Protocol.t) =
  let _str9785 = new setBuddyLocation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9786,_id9787) = iprot#readFieldBegin in
        if _t9786 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9787 with 
          | 2 -> (if _t9786 = Protocol.T_STRING then
              _str9785#set_mid iprot#readString
            else
              iprot#skip _t9786)
          | 3 -> (if _t9786 = Protocol.T_I32 then
              _str9785#set_index iprot#readI32
            else
              iprot#skip _t9786)
          | 4 -> (if _t9786 = Protocol.T_STRUCT then
              _str9785#set_location (read_geolocation iprot)
            else
              iprot#skip _t9786)
          | _ -> iprot#skip _t9786);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9785

class setBuddyLocation_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "setBuddyLocation_result.e") | Some _x9788 -> _x9788
  method set_e _x9788 = _e <- Some _x9788
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setBuddyLocation_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setBuddyLocation_result (iprot : Protocol.t) =
  let _str9791 = new setBuddyLocation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9792,_id9793) = iprot#readFieldBegin in
        if _t9792 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9793 with 
          | 1 -> (if _t9792 = Protocol.T_STRUCT then
              _str9791#set_e (read_talkException iprot)
            else
              iprot#skip _t9792)
          | _ -> iprot#skip _t9792);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9791

class setIdentityCredential_args =
object (self)
  val mutable _identifier : string option = None
  method get_identifier = _identifier
  method grab_identifier = match _identifier with None->raise (Field_empty "setIdentityCredential_args.identifier") | Some _x9794 -> _x9794
  method set_identifier _x9794 = _identifier <- Some _x9794
  method unset_identifier = _identifier <- None
  method reset_identifier = _identifier <- None

  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "setIdentityCredential_args.verifier") | Some _x9795 -> _x9795
  method set_verifier _x9795 = _verifier <- Some _x9795
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  val mutable _provider : IdentityProvider.t option = None
  method get_provider = _provider
  method grab_provider = match _provider with None->raise (Field_empty "setIdentityCredential_args.provider") | Some _x9796 -> _x9796
  method set_provider _x9796 = _provider <- Some _x9796
  method unset_provider = _provider <- None
  method reset_provider = _provider <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setIdentityCredential_args";
    (match _identifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("identifier",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _provider with None -> () | Some _v -> 
      oprot#writeFieldBegin("provider",Protocol.T_I32,4);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setIdentityCredential_args (iprot : Protocol.t) =
  let _str9799 = new setIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9800,_id9801) = iprot#readFieldBegin in
        if _t9800 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9801 with 
          | 2 -> (if _t9800 = Protocol.T_STRING then
              _str9799#set_identifier iprot#readString
            else
              iprot#skip _t9800)
          | 3 -> (if _t9800 = Protocol.T_STRING then
              _str9799#set_verifier iprot#readString
            else
              iprot#skip _t9800)
          | 4 -> (if _t9800 = Protocol.T_I32 then
              _str9799#set_provider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t9800)
          | _ -> iprot#skip _t9800);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9799

class setIdentityCredential_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "setIdentityCredential_result.e") | Some _x9802 -> _x9802
  method set_e _x9802 = _e <- Some _x9802
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setIdentityCredential_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setIdentityCredential_result (iprot : Protocol.t) =
  let _str9805 = new setIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9806,_id9807) = iprot#readFieldBegin in
        if _t9806 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9807 with 
          | 1 -> (if _t9806 = Protocol.T_STRUCT then
              _str9805#set_e (read_talkException iprot)
            else
              iprot#skip _t9806)
          | _ -> iprot#skip _t9806);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9805

class setNotificationsEnabled_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "setNotificationsEnabled_args.reqSeq") | Some _x9808 -> _x9808
  method set_reqSeq _x9808 = _reqSeq <- Some _x9808
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _type : MIDType.t option = None
  method get_type = _type
  method grab_type = match _type with None->raise (Field_empty "setNotificationsEnabled_args.type") | Some _x9809 -> _x9809
  method set_type _x9809 = _type <- Some _x9809
  method unset_type = _type <- None
  method reset_type = _type <- None

  val mutable _target : string option = None
  method get_target = _target
  method grab_target = match _target with None->raise (Field_empty "setNotificationsEnabled_args.target") | Some _x9810 -> _x9810
  method set_target _x9810 = _target <- Some _x9810
  method unset_target = _target <- None
  method reset_target = _target <- None

  val mutable _enablement : bool option = None
  method get_enablement = _enablement
  method grab_enablement = match _enablement with None->raise (Field_empty "setNotificationsEnabled_args.enablement") | Some _x9811 -> _x9811
  method set_enablement _x9811 = _enablement <- Some _x9811
  method unset_enablement = _enablement <- None
  method reset_enablement = _enablement <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setNotificationsEnabled_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _type with None -> () | Some _v -> 
      oprot#writeFieldBegin("type",Protocol.T_I32,2);
      oprot#writeI32(MIDType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _target with None -> () | Some _v -> 
      oprot#writeFieldBegin("target",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _enablement with None -> () | Some _v -> 
      oprot#writeFieldBegin("enablement",Protocol.T_BOOL,4);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setNotificationsEnabled_args (iprot : Protocol.t) =
  let _str9814 = new setNotificationsEnabled_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9815,_id9816) = iprot#readFieldBegin in
        if _t9815 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9816 with 
          | 1 -> (if _t9815 = Protocol.T_I32 then
              _str9814#set_reqSeq iprot#readI32
            else
              iprot#skip _t9815)
          | 2 -> (if _t9815 = Protocol.T_I32 then
              _str9814#set_type (MIDType.of_i iprot#readI32)
            else
              iprot#skip _t9815)
          | 3 -> (if _t9815 = Protocol.T_STRING then
              _str9814#set_target iprot#readString
            else
              iprot#skip _t9815)
          | 4 -> (if _t9815 = Protocol.T_BOOL then
              _str9814#set_enablement iprot#readBool
            else
              iprot#skip _t9815)
          | _ -> iprot#skip _t9815);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9814

class setNotificationsEnabled_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "setNotificationsEnabled_result.e") | Some _x9817 -> _x9817
  method set_e _x9817 = _e <- Some _x9817
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setNotificationsEnabled_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setNotificationsEnabled_result (iprot : Protocol.t) =
  let _str9820 = new setNotificationsEnabled_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9821,_id9822) = iprot#readFieldBegin in
        if _t9821 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9822 with 
          | 1 -> (if _t9821 = Protocol.T_STRUCT then
              _str9820#set_e (read_talkException iprot)
            else
              iprot#skip _t9821)
          | _ -> iprot#skip _t9821);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9820

class startUpdateVerification_args =
object (self)
  val mutable _region : string option = None
  method get_region = _region
  method grab_region = match _region with None->raise (Field_empty "startUpdateVerification_args.region") | Some _x9823 -> _x9823
  method set_region _x9823 = _region <- Some _x9823
  method unset_region = _region <- None
  method reset_region = _region <- None

  val mutable _carrier : CarrierCode.t option = None
  method get_carrier = _carrier
  method grab_carrier = match _carrier with None->raise (Field_empty "startUpdateVerification_args.carrier") | Some _x9824 -> _x9824
  method set_carrier _x9824 = _carrier <- Some _x9824
  method unset_carrier = _carrier <- None
  method reset_carrier = _carrier <- None

  val mutable _phone : string option = None
  method get_phone = _phone
  method grab_phone = match _phone with None->raise (Field_empty "startUpdateVerification_args.phone") | Some _x9825 -> _x9825
  method set_phone _x9825 = _phone <- Some _x9825
  method unset_phone = _phone <- None
  method reset_phone = _phone <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "startUpdateVerification_args.udidHash") | Some _x9826 -> _x9826
  method set_udidHash _x9826 = _udidHash <- Some _x9826
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "startUpdateVerification_args.deviceInfo") | Some _x9827 -> _x9827
  method set_deviceInfo _x9827 = _deviceInfo <- Some _x9827
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  val mutable _networkCode : string option = None
  method get_networkCode = _networkCode
  method grab_networkCode = match _networkCode with None->raise (Field_empty "startUpdateVerification_args.networkCode") | Some _x9828 -> _x9828
  method set_networkCode _x9828 = _networkCode <- Some _x9828
  method unset_networkCode = _networkCode <- None
  method reset_networkCode = _networkCode <- None

  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "startUpdateVerification_args.locale") | Some _x9829 -> _x9829
  method set_locale _x9829 = _locale <- Some _x9829
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  method copy =
      let _new = Oo.copy self in
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "startUpdateVerification_args";
    (match _region with None -> () | Some _v -> 
      oprot#writeFieldBegin("region",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _carrier with None -> () | Some _v -> 
      oprot#writeFieldBegin("carrier",Protocol.T_I32,3);
      oprot#writeI32(CarrierCode.to_i _v);
      oprot#writeFieldEnd
    );
    (match _phone with None -> () | Some _v -> 
      oprot#writeFieldBegin("phone",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,6);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _networkCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("networkCode",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,8);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_startUpdateVerification_args (iprot : Protocol.t) =
  let _str9832 = new startUpdateVerification_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9833,_id9834) = iprot#readFieldBegin in
        if _t9833 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9834 with 
          | 2 -> (if _t9833 = Protocol.T_STRING then
              _str9832#set_region iprot#readString
            else
              iprot#skip _t9833)
          | 3 -> (if _t9833 = Protocol.T_I32 then
              _str9832#set_carrier (CarrierCode.of_i iprot#readI32)
            else
              iprot#skip _t9833)
          | 4 -> (if _t9833 = Protocol.T_STRING then
              _str9832#set_phone iprot#readString
            else
              iprot#skip _t9833)
          | 5 -> (if _t9833 = Protocol.T_STRING then
              _str9832#set_udidHash iprot#readString
            else
              iprot#skip _t9833)
          | 6 -> (if _t9833 = Protocol.T_STRUCT then
              _str9832#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t9833)
          | 7 -> (if _t9833 = Protocol.T_STRING then
              _str9832#set_networkCode iprot#readString
            else
              iprot#skip _t9833)
          | 8 -> (if _t9833 = Protocol.T_STRING then
              _str9832#set_locale iprot#readString
            else
              iprot#skip _t9833)
          | _ -> iprot#skip _t9833);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9832

class startUpdateVerification_result =
object (self)
  val mutable _success : verificationSessionData option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "startUpdateVerification_result.success") | Some _x9835 -> _x9835
  method set_success _x9835 = _success <- Some _x9835
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "startUpdateVerification_result.e") | Some _x9836 -> _x9836
  method set_e _x9836 = _e <- Some _x9836
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "startUpdateVerification_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_startUpdateVerification_result (iprot : Protocol.t) =
  let _str9839 = new startUpdateVerification_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9840,_id9841) = iprot#readFieldBegin in
        if _t9840 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9841 with 
          | 0 -> (if _t9840 = Protocol.T_STRUCT then
              _str9839#set_success (read_verificationSessionData iprot)
            else
              iprot#skip _t9840)
          | 1 -> (if _t9840 = Protocol.T_STRUCT then
              _str9839#set_e (read_talkException iprot)
            else
              iprot#skip _t9840)
          | _ -> iprot#skip _t9840);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9839

class startVerification_args =
object (self)
  val mutable _region : string option = None
  method get_region = _region
  method grab_region = match _region with None->raise (Field_empty "startVerification_args.region") | Some _x9842 -> _x9842
  method set_region _x9842 = _region <- Some _x9842
  method unset_region = _region <- None
  method reset_region = _region <- None

  val mutable _carrier : CarrierCode.t option = None
  method get_carrier = _carrier
  method grab_carrier = match _carrier with None->raise (Field_empty "startVerification_args.carrier") | Some _x9843 -> _x9843
  method set_carrier _x9843 = _carrier <- Some _x9843
  method unset_carrier = _carrier <- None
  method reset_carrier = _carrier <- None

  val mutable _phone : string option = None
  method get_phone = _phone
  method grab_phone = match _phone with None->raise (Field_empty "startVerification_args.phone") | Some _x9844 -> _x9844
  method set_phone _x9844 = _phone <- Some _x9844
  method unset_phone = _phone <- None
  method reset_phone = _phone <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "startVerification_args.udidHash") | Some _x9845 -> _x9845
  method set_udidHash _x9845 = _udidHash <- Some _x9845
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "startVerification_args.deviceInfo") | Some _x9846 -> _x9846
  method set_deviceInfo _x9846 = _deviceInfo <- Some _x9846
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  val mutable _networkCode : string option = None
  method get_networkCode = _networkCode
  method grab_networkCode = match _networkCode with None->raise (Field_empty "startVerification_args.networkCode") | Some _x9847 -> _x9847
  method set_networkCode _x9847 = _networkCode <- Some _x9847
  method unset_networkCode = _networkCode <- None
  method reset_networkCode = _networkCode <- None

  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "startVerification_args.mid") | Some _x9848 -> _x9848
  method set_mid _x9848 = _mid <- Some _x9848
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "startVerification_args.locale") | Some _x9849 -> _x9849
  method set_locale _x9849 = _locale <- Some _x9849
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  val mutable _simInfo : sIMInfo option = None
  method get_simInfo = _simInfo
  method grab_simInfo = match _simInfo with None->raise (Field_empty "startVerification_args.simInfo") | Some _x9850 -> _x9850
  method set_simInfo _x9850 = _simInfo <- Some _x9850
  method unset_simInfo = _simInfo <- None
  method reset_simInfo = _simInfo <- None

  val mutable _oldUdidHash : string option = None
  method get_oldUdidHash = _oldUdidHash
  method grab_oldUdidHash = match _oldUdidHash with None->raise (Field_empty "startVerification_args.oldUdidHash") | Some _x9851 -> _x9851
  method set_oldUdidHash _x9851 = _oldUdidHash <- Some _x9851
  method unset_oldUdidHash = _oldUdidHash <- None
  method reset_oldUdidHash = _oldUdidHash <- None

  method copy =
      let _new = Oo.copy self in
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
      if _simInfo <> None then
        _new#set_simInfo self#grab_simInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "startVerification_args";
    (match _region with None -> () | Some _v -> 
      oprot#writeFieldBegin("region",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _carrier with None -> () | Some _v -> 
      oprot#writeFieldBegin("carrier",Protocol.T_I32,3);
      oprot#writeI32(CarrierCode.to_i _v);
      oprot#writeFieldEnd
    );
    (match _phone with None -> () | Some _v -> 
      oprot#writeFieldBegin("phone",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,6);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _networkCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("networkCode",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,8);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,9);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _simInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("simInfo",Protocol.T_STRUCT,10);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _oldUdidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("oldUdidHash",Protocol.T_STRING,11);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_startVerification_args (iprot : Protocol.t) =
  let _str9854 = new startVerification_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9855,_id9856) = iprot#readFieldBegin in
        if _t9855 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9856 with 
          | 2 -> (if _t9855 = Protocol.T_STRING then
              _str9854#set_region iprot#readString
            else
              iprot#skip _t9855)
          | 3 -> (if _t9855 = Protocol.T_I32 then
              _str9854#set_carrier (CarrierCode.of_i iprot#readI32)
            else
              iprot#skip _t9855)
          | 4 -> (if _t9855 = Protocol.T_STRING then
              _str9854#set_phone iprot#readString
            else
              iprot#skip _t9855)
          | 5 -> (if _t9855 = Protocol.T_STRING then
              _str9854#set_udidHash iprot#readString
            else
              iprot#skip _t9855)
          | 6 -> (if _t9855 = Protocol.T_STRUCT then
              _str9854#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t9855)
          | 7 -> (if _t9855 = Protocol.T_STRING then
              _str9854#set_networkCode iprot#readString
            else
              iprot#skip _t9855)
          | 8 -> (if _t9855 = Protocol.T_STRING then
              _str9854#set_mid iprot#readString
            else
              iprot#skip _t9855)
          | 9 -> (if _t9855 = Protocol.T_STRING then
              _str9854#set_locale iprot#readString
            else
              iprot#skip _t9855)
          | 10 -> (if _t9855 = Protocol.T_STRUCT then
              _str9854#set_simInfo (read_sIMInfo iprot)
            else
              iprot#skip _t9855)
          | 11 -> (if _t9855 = Protocol.T_STRING then
              _str9854#set_oldUdidHash iprot#readString
            else
              iprot#skip _t9855)
          | _ -> iprot#skip _t9855);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9854

class startVerification_result =
object (self)
  val mutable _success : verificationSessionData option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "startVerification_result.success") | Some _x9857 -> _x9857
  method set_success _x9857 = _success <- Some _x9857
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "startVerification_result.e") | Some _x9858 -> _x9858
  method set_e _x9858 = _e <- Some _x9858
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "startVerification_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_startVerification_result (iprot : Protocol.t) =
  let _str9861 = new startVerification_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9862,_id9863) = iprot#readFieldBegin in
        if _t9862 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9863 with 
          | 0 -> (if _t9862 = Protocol.T_STRUCT then
              _str9861#set_success (read_verificationSessionData iprot)
            else
              iprot#skip _t9862)
          | 1 -> (if _t9862 = Protocol.T_STRUCT then
              _str9861#set_e (read_talkException iprot)
            else
              iprot#skip _t9862)
          | _ -> iprot#skip _t9862);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9861

class updateGroupPreferenceAttribute_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateGroupPreferenceAttribute_args.reqSeq") | Some _x9864 -> _x9864
  method set_reqSeq _x9864 = _reqSeq <- Some _x9864
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _groupMid : string option = None
  method get_groupMid = _groupMid
  method grab_groupMid = match _groupMid with None->raise (Field_empty "updateGroupPreferenceAttribute_args.groupMid") | Some _x9865 -> _x9865
  method set_groupMid _x9865 = _groupMid <- Some _x9865
  method unset_groupMid = _groupMid <- None
  method reset_groupMid = _groupMid <- None

  val mutable _updatedAttrs : (GroupPreferenceAttribute.t,string) Hashtbl.t option = None
  method get_updatedAttrs = _updatedAttrs
  method grab_updatedAttrs = match _updatedAttrs with None->raise (Field_empty "updateGroupPreferenceAttribute_args.updatedAttrs") | Some _x9866 -> _x9866
  method set_updatedAttrs _x9866 = _updatedAttrs <- Some _x9866
  method unset_updatedAttrs = _updatedAttrs <- None
  method reset_updatedAttrs = _updatedAttrs <- None

  method copy =
      let _new = Oo.copy self in
      if _updatedAttrs <> None then
        _new#set_updatedAttrs (Hashtbl.copy self#grab_updatedAttrs);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateGroupPreferenceAttribute_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _groupMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _updatedAttrs with None -> () | Some _v -> 
      oprot#writeFieldBegin("updatedAttrs",Protocol.T_MAP,3);
      oprot#writeMapBegin(Protocol.T_I32,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter9869 -> fun _viter9870 -> 
        oprot#writeI32(GroupPreferenceAttribute.to_i _kiter9869);
        oprot#writeString(_viter9870);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateGroupPreferenceAttribute_args (iprot : Protocol.t) =
  let _str9871 = new updateGroupPreferenceAttribute_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9872,_id9873) = iprot#readFieldBegin in
        if _t9872 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9873 with 
          | 1 -> (if _t9872 = Protocol.T_I32 then
              _str9871#set_reqSeq iprot#readI32
            else
              iprot#skip _t9872)
          | 2 -> (if _t9872 = Protocol.T_STRING then
              _str9871#set_groupMid iprot#readString
            else
              iprot#skip _t9872)
          | 3 -> (if _t9872 = Protocol.T_MAP then
              _str9871#set_updatedAttrs 
                (let (_ktype9875,_vtype9876,_size9874) = iprot#readMapBegin in
                let _con9878 = Hashtbl.create _size9874 in
                  for i = 1 to _size9874 do
                    let _k = (GroupPreferenceAttribute.of_i iprot#readI32) in
                    let _v = iprot#readString in
                      Hashtbl.add _con9878 _k _v
                  done; iprot#readMapEnd; _con9878)
            else
              iprot#skip _t9872)
          | _ -> iprot#skip _t9872);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9871

class updateGroupPreferenceAttribute_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateGroupPreferenceAttribute_result.e") | Some _x9879 -> _x9879
  method set_e _x9879 = _e <- Some _x9879
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateGroupPreferenceAttribute_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateGroupPreferenceAttribute_result (iprot : Protocol.t) =
  let _str9882 = new updateGroupPreferenceAttribute_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9883,_id9884) = iprot#readFieldBegin in
        if _t9883 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9884 with 
          | 1 -> (if _t9883 = Protocol.T_STRUCT then
              _str9882#set_e (read_talkException iprot)
            else
              iprot#skip _t9883)
          | _ -> iprot#skip _t9883);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9882

class createRoomV2_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "createRoomV2_args.reqSeq") | Some _x9885 -> _x9885
  method set_reqSeq _x9885 = _reqSeq <- Some _x9885
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _contactIds : string list option = None
  method get_contactIds = _contactIds
  method grab_contactIds = match _contactIds with None->raise (Field_empty "createRoomV2_args.contactIds") | Some _x9886 -> _x9886
  method set_contactIds _x9886 = _contactIds <- Some _x9886
  method unset_contactIds = _contactIds <- None
  method reset_contactIds = _contactIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createRoomV2_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _contactIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactIds",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter9889 ->         oprot#writeString(_iter9889);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createRoomV2_args (iprot : Protocol.t) =
  let _str9890 = new createRoomV2_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9891,_id9892) = iprot#readFieldBegin in
        if _t9891 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9892 with 
          | 1 -> (if _t9891 = Protocol.T_I32 then
              _str9890#set_reqSeq iprot#readI32
            else
              iprot#skip _t9891)
          | 2 -> (if _t9891 = Protocol.T_LIST then
              _str9890#set_contactIds 
                (let (_etype9896,_size9893) = iprot#readListBegin in
                  let _con9897 = (Array.to_list (Array.init _size9893 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con9897)
            else
              iprot#skip _t9891)
          | _ -> iprot#skip _t9891);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9890

class createRoomV2_result =
object (self)
  val mutable _success : room option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createRoomV2_result.success") | Some _x9898 -> _x9898
  method set_success _x9898 = _success <- Some _x9898
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createRoomV2_result.e") | Some _x9899 -> _x9899
  method set_e _x9899 = _e <- Some _x9899
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createRoomV2_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createRoomV2_result (iprot : Protocol.t) =
  let _str9902 = new createRoomV2_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9903,_id9904) = iprot#readFieldBegin in
        if _t9903 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9904 with 
          | 0 -> (if _t9903 = Protocol.T_STRUCT then
              _str9902#set_success (read_room iprot)
            else
              iprot#skip _t9903)
          | 1 -> (if _t9903 = Protocol.T_STRUCT then
              _str9902#set_e (read_talkException iprot)
            else
              iprot#skip _t9903)
          | _ -> iprot#skip _t9903);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9902

class storeUpdateProfileAttribute_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "storeUpdateProfileAttribute_args.seq") | Some _x9905 -> _x9905
  method set_seq _x9905 = _seq <- Some _x9905
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _profileAttribute : ProfileAttribute.t option = None
  method get_profileAttribute = _profileAttribute
  method grab_profileAttribute = match _profileAttribute with None->raise (Field_empty "storeUpdateProfileAttribute_args.profileAttribute") | Some _x9906 -> _x9906
  method set_profileAttribute _x9906 = _profileAttribute <- Some _x9906
  method unset_profileAttribute = _profileAttribute <- None
  method reset_profileAttribute = _profileAttribute <- None

  val mutable _value : string option = None
  method get_value = _value
  method grab_value = match _value with None->raise (Field_empty "storeUpdateProfileAttribute_args.value") | Some _x9907 -> _x9907
  method set_value _x9907 = _value <- Some _x9907
  method unset_value = _value <- None
  method reset_value = _value <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "storeUpdateProfileAttribute_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _profileAttribute with None -> () | Some _v -> 
      oprot#writeFieldBegin("profileAttribute",Protocol.T_I32,2);
      oprot#writeI32(ProfileAttribute.to_i _v);
      oprot#writeFieldEnd
    );
    (match _value with None -> () | Some _v -> 
      oprot#writeFieldBegin("value",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_storeUpdateProfileAttribute_args (iprot : Protocol.t) =
  let _str9910 = new storeUpdateProfileAttribute_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9911,_id9912) = iprot#readFieldBegin in
        if _t9911 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9912 with 
          | 1 -> (if _t9911 = Protocol.T_I32 then
              _str9910#set_seq iprot#readI32
            else
              iprot#skip _t9911)
          | 2 -> (if _t9911 = Protocol.T_I32 then
              _str9910#set_profileAttribute (ProfileAttribute.of_i iprot#readI32)
            else
              iprot#skip _t9911)
          | 3 -> (if _t9911 = Protocol.T_STRING then
              _str9910#set_value iprot#readString
            else
              iprot#skip _t9911)
          | _ -> iprot#skip _t9911);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9910

class storeUpdateProfileAttribute_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "storeUpdateProfileAttribute_result.e") | Some _x9913 -> _x9913
  method set_e _x9913 = _e <- Some _x9913
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "storeUpdateProfileAttribute_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_storeUpdateProfileAttribute_result (iprot : Protocol.t) =
  let _str9916 = new storeUpdateProfileAttribute_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9917,_id9918) = iprot#readFieldBegin in
        if _t9917 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9918 with 
          | 1 -> (if _t9917 = Protocol.T_STRUCT then
              _str9916#set_e (read_talkException iprot)
            else
              iprot#skip _t9917)
          | _ -> iprot#skip _t9917);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9916

class syncContactBySnsIds_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "syncContactBySnsIds_args.reqSeq") | Some _x9919 -> _x9919
  method set_reqSeq _x9919 = _reqSeq <- Some _x9919
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _modifications : snsFriendModification list option = None
  method get_modifications = _modifications
  method grab_modifications = match _modifications with None->raise (Field_empty "syncContactBySnsIds_args.modifications") | Some _x9920 -> _x9920
  method set_modifications _x9920 = _modifications <- Some _x9920
  method unset_modifications = _modifications <- None
  method reset_modifications = _modifications <- None

  method copy =
      let _new = Oo.copy self in
      if _modifications <> None then
        _new#set_modifications (List.map (fun x -> x#copy) self#grab_modifications);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "syncContactBySnsIds_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _modifications with None -> () | Some _v -> 
      oprot#writeFieldBegin("modifications",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter9923 ->         _iter9923#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_syncContactBySnsIds_args (iprot : Protocol.t) =
  let _str9924 = new syncContactBySnsIds_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9925,_id9926) = iprot#readFieldBegin in
        if _t9925 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9926 with 
          | 1 -> (if _t9925 = Protocol.T_I32 then
              _str9924#set_reqSeq iprot#readI32
            else
              iprot#skip _t9925)
          | 2 -> (if _t9925 = Protocol.T_LIST then
              _str9924#set_modifications 
                (let (_etype9930,_size9927) = iprot#readListBegin in
                  let _con9931 = (Array.to_list (Array.init _size9927 (fun _ -> (read_snsFriendModification iprot)))) in
                    iprot#readListEnd; _con9931)
            else
              iprot#skip _t9925)
          | _ -> iprot#skip _t9925);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9924

class syncContactBySnsIds_result =
object (self)
  val mutable _success : snsFriendContactRegistration list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "syncContactBySnsIds_result.success") | Some _x9932 -> _x9932
  method set_success _x9932 = _success <- Some _x9932
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "syncContactBySnsIds_result.e") | Some _x9933 -> _x9933
  method set_e _x9933 = _e <- Some _x9933
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "syncContactBySnsIds_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter9936 ->         _iter9936#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_syncContactBySnsIds_result (iprot : Protocol.t) =
  let _str9937 = new syncContactBySnsIds_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9938,_id9939) = iprot#readFieldBegin in
        if _t9938 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9939 with 
          | 0 -> (if _t9938 = Protocol.T_LIST then
              _str9937#set_success 
                (let (_etype9943,_size9940) = iprot#readListBegin in
                  let _con9944 = (Array.to_list (Array.init _size9940 (fun _ -> (read_snsFriendContactRegistration iprot)))) in
                    iprot#readListEnd; _con9944)
            else
              iprot#skip _t9938)
          | 1 -> (if _t9938 = Protocol.T_STRUCT then
              _str9937#set_e (read_talkException iprot)
            else
              iprot#skip _t9938)
          | _ -> iprot#skip _t9938);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9937

class syncContacts_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "syncContacts_args.reqSeq") | Some _x9945 -> _x9945
  method set_reqSeq _x9945 = _reqSeq <- Some _x9945
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _localContacts : contactModification list option = None
  method get_localContacts = _localContacts
  method grab_localContacts = match _localContacts with None->raise (Field_empty "syncContacts_args.localContacts") | Some _x9946 -> _x9946
  method set_localContacts _x9946 = _localContacts <- Some _x9946
  method unset_localContacts = _localContacts <- None
  method reset_localContacts = _localContacts <- None

  method copy =
      let _new = Oo.copy self in
      if _localContacts <> None then
        _new#set_localContacts (List.map (fun x -> x#copy) self#grab_localContacts);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "syncContacts_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _localContacts with None -> () | Some _v -> 
      oprot#writeFieldBegin("localContacts",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter9949 ->         _iter9949#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_syncContacts_args (iprot : Protocol.t) =
  let _str9950 = new syncContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9951,_id9952) = iprot#readFieldBegin in
        if _t9951 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9952 with 
          | 1 -> (if _t9951 = Protocol.T_I32 then
              _str9950#set_reqSeq iprot#readI32
            else
              iprot#skip _t9951)
          | 2 -> (if _t9951 = Protocol.T_LIST then
              _str9950#set_localContacts 
                (let (_etype9956,_size9953) = iprot#readListBegin in
                  let _con9957 = (Array.to_list (Array.init _size9953 (fun _ -> (read_contactModification iprot)))) in
                    iprot#readListEnd; _con9957)
            else
              iprot#skip _t9951)
          | _ -> iprot#skip _t9951);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9950

class syncContacts_result =
object (self)
  val mutable _success : (string,contactRegistration) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "syncContacts_result.success") | Some _x9958 -> _x9958
  method set_success _x9958 = _success <- Some _x9958
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "syncContacts_result.e") | Some _x9959 -> _x9959
  method set_e _x9959 = _e <- Some _x9959
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k v#copy) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "syncContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter9962 -> fun _viter9963 -> 
        oprot#writeString(_kiter9962);
        _viter9963#write(oprot);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_syncContacts_result (iprot : Protocol.t) =
  let _str9964 = new syncContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9965,_id9966) = iprot#readFieldBegin in
        if _t9965 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9966 with 
          | 0 -> (if _t9965 = Protocol.T_MAP then
              _str9964#set_success 
                (let (_ktype9968,_vtype9969,_size9967) = iprot#readMapBegin in
                let _con9971 = Hashtbl.create _size9967 in
                  for i = 1 to _size9967 do
                    let _k = iprot#readString in
                    let _v = (read_contactRegistration iprot) in
                      Hashtbl.add _con9971 _k _v
                  done; iprot#readMapEnd; _con9971)
            else
              iprot#skip _t9965)
          | 1 -> (if _t9965 = Protocol.T_STRUCT then
              _str9964#set_e (read_talkException iprot)
            else
              iprot#skip _t9965)
          | _ -> iprot#skip _t9965);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9964

class trySendMessage_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "trySendMessage_args.seq") | Some _x9972 -> _x9972
  method set_seq _x9972 = _seq <- Some _x9972
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _message : message option = None
  method get_message = _message
  method grab_message = match _message with None->raise (Field_empty "trySendMessage_args.message") | Some _x9973 -> _x9973
  method set_message _x9973 = _message <- Some _x9973
  method unset_message = _message <- None
  method reset_message = _message <- None

  method copy =
      let _new = Oo.copy self in
      if _message <> None then
        _new#set_message self#grab_message#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "trySendMessage_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _message with None -> () | Some _v -> 
      oprot#writeFieldBegin("message",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_trySendMessage_args (iprot : Protocol.t) =
  let _str9976 = new trySendMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9977,_id9978) = iprot#readFieldBegin in
        if _t9977 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9978 with 
          | 1 -> (if _t9977 = Protocol.T_I32 then
              _str9976#set_seq iprot#readI32
            else
              iprot#skip _t9977)
          | 2 -> (if _t9977 = Protocol.T_STRUCT then
              _str9976#set_message (read_message iprot)
            else
              iprot#skip _t9977)
          | _ -> iprot#skip _t9977);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9976

class trySendMessage_result =
object (self)
  val mutable _success : message option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "trySendMessage_result.success") | Some _x9979 -> _x9979
  method set_success _x9979 = _success <- Some _x9979
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "trySendMessage_result.e") | Some _x9980 -> _x9980
  method set_e _x9980 = _e <- Some _x9980
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "trySendMessage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_trySendMessage_result (iprot : Protocol.t) =
  let _str9983 = new trySendMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9984,_id9985) = iprot#readFieldBegin in
        if _t9984 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9985 with 
          | 0 -> (if _t9984 = Protocol.T_STRUCT then
              _str9983#set_success (read_message iprot)
            else
              iprot#skip _t9984)
          | 1 -> (if _t9984 = Protocol.T_STRUCT then
              _str9983#set_e (read_talkException iprot)
            else
              iprot#skip _t9984)
          | _ -> iprot#skip _t9984);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9983

class getNextMessagesV2_args =
object (self)
  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "getNextMessagesV2_args.messageBoxId") | Some _x9986 -> _x9986
  method set_messageBoxId _x9986 = _messageBoxId <- Some _x9986
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  val mutable _startMessageId : messageBoxV2MessageId option = None
  method get_startMessageId = _startMessageId
  method grab_startMessageId = match _startMessageId with None->raise (Field_empty "getNextMessagesV2_args.startMessageId") | Some _x9987 -> _x9987
  method set_startMessageId _x9987 = _startMessageId <- Some _x9987
  method unset_startMessageId = _startMessageId <- None
  method reset_startMessageId = _startMessageId <- None

  val mutable _messagesCount : Int32.t option = None
  method get_messagesCount = _messagesCount
  method grab_messagesCount = match _messagesCount with None->raise (Field_empty "getNextMessagesV2_args.messagesCount") | Some _x9988 -> _x9988
  method set_messagesCount _x9988 = _messagesCount <- Some _x9988
  method unset_messagesCount = _messagesCount <- None
  method reset_messagesCount = _messagesCount <- None

  method copy =
      let _new = Oo.copy self in
      if _startMessageId <> None then
        _new#set_startMessageId self#grab_startMessageId#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNextMessagesV2_args";
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _startMessageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("startMessageId",Protocol.T_STRUCT,3);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _messagesCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("messagesCount",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNextMessagesV2_args (iprot : Protocol.t) =
  let _str9991 = new getNextMessagesV2_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t9992,_id9993) = iprot#readFieldBegin in
        if _t9992 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id9993 with 
          | 2 -> (if _t9992 = Protocol.T_STRING then
              _str9991#set_messageBoxId iprot#readString
            else
              iprot#skip _t9992)
          | 3 -> (if _t9992 = Protocol.T_STRUCT then
              _str9991#set_startMessageId (read_messageBoxV2MessageId iprot)
            else
              iprot#skip _t9992)
          | 4 -> (if _t9992 = Protocol.T_I32 then
              _str9991#set_messagesCount iprot#readI32
            else
              iprot#skip _t9992)
          | _ -> iprot#skip _t9992);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9991

class getNextMessagesV2_result =
object (self)
  val mutable _success : message list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getNextMessagesV2_result.success") | Some _x9994 -> _x9994
  method set_success _x9994 = _success <- Some _x9994
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getNextMessagesV2_result.e") | Some _x9995 -> _x9995
  method set_e _x9995 = _e <- Some _x9995
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNextMessagesV2_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter9998 ->         _iter9998#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNextMessagesV2_result (iprot : Protocol.t) =
  let _str9999 = new getNextMessagesV2_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10000,_id10001) = iprot#readFieldBegin in
        if _t10000 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10001 with 
          | 0 -> (if _t10000 = Protocol.T_LIST then
              _str9999#set_success 
                (let (_etype10005,_size10002) = iprot#readListBegin in
                  let _con10006 = (Array.to_list (Array.init _size10002 (fun _ -> (read_message iprot)))) in
                    iprot#readListEnd; _con10006)
            else
              iprot#skip _t10000)
          | 1 -> (if _t10000 = Protocol.T_STRUCT then
              _str9999#set_e (read_talkException iprot)
            else
              iprot#skip _t10000)
          | _ -> iprot#skip _t10000);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9999

class getMessageBoxCompactWrapUpV2_args =
object (self)
  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "getMessageBoxCompactWrapUpV2_args.messageBoxId") | Some _x10007 -> _x10007
  method set_messageBoxId _x10007 = _messageBoxId <- Some _x10007
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxCompactWrapUpV2_args";
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxCompactWrapUpV2_args (iprot : Protocol.t) =
  let _str10010 = new getMessageBoxCompactWrapUpV2_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10011,_id10012) = iprot#readFieldBegin in
        if _t10011 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10012 with 
          | 2 -> (if _t10011 = Protocol.T_STRING then
              _str10010#set_messageBoxId iprot#readString
            else
              iprot#skip _t10011)
          | _ -> iprot#skip _t10011);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10010

class getMessageBoxCompactWrapUpV2_result =
object (self)
  val mutable _success : tMessageBoxWrapUp option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMessageBoxCompactWrapUpV2_result.success") | Some _x10013 -> _x10013
  method set_success _x10013 = _success <- Some _x10013
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMessageBoxCompactWrapUpV2_result.e") | Some _x10014 -> _x10014
  method set_e _x10014 = _e <- Some _x10014
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMessageBoxCompactWrapUpV2_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMessageBoxCompactWrapUpV2_result (iprot : Protocol.t) =
  let _str10017 = new getMessageBoxCompactWrapUpV2_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10018,_id10019) = iprot#readFieldBegin in
        if _t10018 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10019 with 
          | 0 -> (if _t10018 = Protocol.T_STRUCT then
              _str10017#set_success (read_tMessageBoxWrapUp iprot)
            else
              iprot#skip _t10018)
          | 1 -> (if _t10018 = Protocol.T_STRUCT then
              _str10017#set_e (read_talkException iprot)
            else
              iprot#skip _t10018)
          | _ -> iprot#skip _t10018);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10017

class getRecentMessagesV2_args =
object (self)
  val mutable _messageBoxId : string option = None
  method get_messageBoxId = _messageBoxId
  method grab_messageBoxId = match _messageBoxId with None->raise (Field_empty "getRecentMessagesV2_args.messageBoxId") | Some _x10020 -> _x10020
  method set_messageBoxId _x10020 = _messageBoxId <- Some _x10020
  method unset_messageBoxId = _messageBoxId <- None
  method reset_messageBoxId = _messageBoxId <- None

  val mutable _messagesCount : Int32.t option = None
  method get_messagesCount = _messagesCount
  method grab_messagesCount = match _messagesCount with None->raise (Field_empty "getRecentMessagesV2_args.messagesCount") | Some _x10021 -> _x10021
  method set_messagesCount _x10021 = _messagesCount <- Some _x10021
  method unset_messagesCount = _messagesCount <- None
  method reset_messagesCount = _messagesCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRecentMessagesV2_args";
    (match _messageBoxId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageBoxId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messagesCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("messagesCount",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRecentMessagesV2_args (iprot : Protocol.t) =
  let _str10024 = new getRecentMessagesV2_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10025,_id10026) = iprot#readFieldBegin in
        if _t10025 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10026 with 
          | 2 -> (if _t10025 = Protocol.T_STRING then
              _str10024#set_messageBoxId iprot#readString
            else
              iprot#skip _t10025)
          | 3 -> (if _t10025 = Protocol.T_I32 then
              _str10024#set_messagesCount iprot#readI32
            else
              iprot#skip _t10025)
          | _ -> iprot#skip _t10025);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10024

class getRecentMessagesV2_result =
object (self)
  val mutable _success : message list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getRecentMessagesV2_result.success") | Some _x10027 -> _x10027
  method set_success _x10027 = _success <- Some _x10027
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getRecentMessagesV2_result.e") | Some _x10028 -> _x10028
  method set_e _x10028 = _e <- Some _x10028
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRecentMessagesV2_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter10031 ->         _iter10031#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRecentMessagesV2_result (iprot : Protocol.t) =
  let _str10032 = new getRecentMessagesV2_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10033,_id10034) = iprot#readFieldBegin in
        if _t10033 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10034 with 
          | 0 -> (if _t10033 = Protocol.T_LIST then
              _str10032#set_success 
                (let (_etype10038,_size10035) = iprot#readListBegin in
                  let _con10039 = (Array.to_list (Array.init _size10035 (fun _ -> (read_message iprot)))) in
                    iprot#readListEnd; _con10039)
            else
              iprot#skip _t10033)
          | 1 -> (if _t10033 = Protocol.T_STRUCT then
              _str10032#set_e (read_talkException iprot)
            else
              iprot#skip _t10033)
          | _ -> iprot#skip _t10033);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10032

class validateContactsOnBot_args =
object (self)
  val mutable _contacts : string list option = None
  method get_contacts = _contacts
  method grab_contacts = match _contacts with None->raise (Field_empty "validateContactsOnBot_args.contacts") | Some _x10040 -> _x10040
  method set_contacts _x10040 = _contacts <- Some _x10040
  method unset_contacts = _contacts <- None
  method reset_contacts = _contacts <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "validateContactsOnBot_args";
    (match _contacts with None -> () | Some _v -> 
      oprot#writeFieldBegin("contacts",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter10043 ->         oprot#writeString(_iter10043);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_validateContactsOnBot_args (iprot : Protocol.t) =
  let _str10044 = new validateContactsOnBot_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10045,_id10046) = iprot#readFieldBegin in
        if _t10045 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10046 with 
          | 2 -> (if _t10045 = Protocol.T_LIST then
              _str10044#set_contacts 
                (let (_etype10050,_size10047) = iprot#readListBegin in
                  let _con10051 = (Array.to_list (Array.init _size10047 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con10051)
            else
              iprot#skip _t10045)
          | _ -> iprot#skip _t10045);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10044

class validateContactsOnBot_result =
object (self)
  val mutable _success : (string,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "validateContactsOnBot_result.success") | Some _x10052 -> _x10052
  method set_success _x10052 = _success <- Some _x10052
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "validateContactsOnBot_result.e") | Some _x10053 -> _x10053
  method set_e _x10053 = _e <- Some _x10053
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "validateContactsOnBot_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter10056 -> fun _viter10057 -> 
        oprot#writeString(_kiter10056);
        oprot#writeString(_viter10057);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_validateContactsOnBot_result (iprot : Protocol.t) =
  let _str10058 = new validateContactsOnBot_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10059,_id10060) = iprot#readFieldBegin in
        if _t10059 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10060 with 
          | 0 -> (if _t10059 = Protocol.T_MAP then
              _str10058#set_success 
                (let (_ktype10062,_vtype10063,_size10061) = iprot#readMapBegin in
                let _con10065 = Hashtbl.create _size10061 in
                  for i = 1 to _size10061 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con10065 _k _v
                  done; iprot#readMapEnd; _con10065)
            else
              iprot#skip _t10059)
          | 1 -> (if _t10059 = Protocol.T_STRUCT then
              _str10058#set_e (read_talkException iprot)
            else
              iprot#skip _t10059)
          | _ -> iprot#skip _t10059);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10058

class tryFriendRequest_args =
object (self)
  val mutable _midOrEMid : string option = None
  method get_midOrEMid = _midOrEMid
  method grab_midOrEMid = match _midOrEMid with None->raise (Field_empty "tryFriendRequest_args.midOrEMid") | Some _x10066 -> _x10066
  method set_midOrEMid _x10066 = _midOrEMid <- Some _x10066
  method unset_midOrEMid = _midOrEMid <- None
  method reset_midOrEMid = _midOrEMid <- None

  val mutable _method : FriendRequestMethod.t option = None
  method get_method = _method
  method grab_method = match _method with None->raise (Field_empty "tryFriendRequest_args.method") | Some _x10067 -> _x10067
  method set_method _x10067 = _method <- Some _x10067
  method unset_method = _method <- None
  method reset_method = _method <- None

  val mutable _friendRequestParams : string option = None
  method get_friendRequestParams = _friendRequestParams
  method grab_friendRequestParams = match _friendRequestParams with None->raise (Field_empty "tryFriendRequest_args.friendRequestParams") | Some _x10068 -> _x10068
  method set_friendRequestParams _x10068 = _friendRequestParams <- Some _x10068
  method unset_friendRequestParams = _friendRequestParams <- None
  method reset_friendRequestParams = _friendRequestParams <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "tryFriendRequest_args";
    (match _midOrEMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("midOrEMid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _method with None -> () | Some _v -> 
      oprot#writeFieldBegin("method",Protocol.T_I32,2);
      oprot#writeI32(FriendRequestMethod.to_i _v);
      oprot#writeFieldEnd
    );
    (match _friendRequestParams with None -> () | Some _v -> 
      oprot#writeFieldBegin("friendRequestParams",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_tryFriendRequest_args (iprot : Protocol.t) =
  let _str10071 = new tryFriendRequest_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10072,_id10073) = iprot#readFieldBegin in
        if _t10072 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10073 with 
          | 1 -> (if _t10072 = Protocol.T_STRING then
              _str10071#set_midOrEMid iprot#readString
            else
              iprot#skip _t10072)
          | 2 -> (if _t10072 = Protocol.T_I32 then
              _str10071#set_method (FriendRequestMethod.of_i iprot#readI32)
            else
              iprot#skip _t10072)
          | 3 -> (if _t10072 = Protocol.T_STRING then
              _str10071#set_friendRequestParams iprot#readString
            else
              iprot#skip _t10072)
          | _ -> iprot#skip _t10072);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10071

class tryFriendRequest_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "tryFriendRequest_result.e") | Some _x10074 -> _x10074
  method set_e _x10074 = _e <- Some _x10074
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "tryFriendRequest_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_tryFriendRequest_result (iprot : Protocol.t) =
  let _str10077 = new tryFriendRequest_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10078,_id10079) = iprot#readFieldBegin in
        if _t10078 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10079 with 
          | 1 -> (if _t10078 = Protocol.T_STRUCT then
              _str10077#set_e (read_talkException iprot)
            else
              iprot#skip _t10078)
          | _ -> iprot#skip _t10078);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10077

class unblockContact_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "unblockContact_args.reqSeq") | Some _x10080 -> _x10080
  method set_reqSeq _x10080 = _reqSeq <- Some _x10080
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _id : string option = None
  method get_id = _id
  method grab_id = match _id with None->raise (Field_empty "unblockContact_args.id") | Some _x10081 -> _x10081
  method set_id _x10081 = _id <- Some _x10081
  method unset_id = _id <- None
  method reset_id = _id <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unblockContact_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _id with None -> () | Some _v -> 
      oprot#writeFieldBegin("id",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unblockContact_args (iprot : Protocol.t) =
  let _str10084 = new unblockContact_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10085,_id10086) = iprot#readFieldBegin in
        if _t10085 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10086 with 
          | 1 -> (if _t10085 = Protocol.T_I32 then
              _str10084#set_reqSeq iprot#readI32
            else
              iprot#skip _t10085)
          | 2 -> (if _t10085 = Protocol.T_STRING then
              _str10084#set_id iprot#readString
            else
              iprot#skip _t10085)
          | _ -> iprot#skip _t10085);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10084

class unblockContact_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "unblockContact_result.e") | Some _x10087 -> _x10087
  method set_e _x10087 = _e <- Some _x10087
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unblockContact_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unblockContact_result (iprot : Protocol.t) =
  let _str10090 = new unblockContact_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10091,_id10092) = iprot#readFieldBegin in
        if _t10091 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10092 with 
          | 1 -> (if _t10091 = Protocol.T_STRUCT then
              _str10090#set_e (read_talkException iprot)
            else
              iprot#skip _t10091)
          | _ -> iprot#skip _t10091);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10090

class unblockRecommendation_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "unblockRecommendation_args.reqSeq") | Some _x10093 -> _x10093
  method set_reqSeq _x10093 = _reqSeq <- Some _x10093
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _id : string option = None
  method get_id = _id
  method grab_id = match _id with None->raise (Field_empty "unblockRecommendation_args.id") | Some _x10094 -> _x10094
  method set_id _x10094 = _id <- Some _x10094
  method unset_id = _id <- None
  method reset_id = _id <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unblockRecommendation_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _id with None -> () | Some _v -> 
      oprot#writeFieldBegin("id",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unblockRecommendation_args (iprot : Protocol.t) =
  let _str10097 = new unblockRecommendation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10098,_id10099) = iprot#readFieldBegin in
        if _t10098 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10099 with 
          | 1 -> (if _t10098 = Protocol.T_I32 then
              _str10097#set_reqSeq iprot#readI32
            else
              iprot#skip _t10098)
          | 2 -> (if _t10098 = Protocol.T_STRING then
              _str10097#set_id iprot#readString
            else
              iprot#skip _t10098)
          | _ -> iprot#skip _t10098);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10097

class unblockRecommendation_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "unblockRecommendation_result.e") | Some _x10100 -> _x10100
  method set_e _x10100 = _e <- Some _x10100
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unblockRecommendation_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unblockRecommendation_result (iprot : Protocol.t) =
  let _str10103 = new unblockRecommendation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10104,_id10105) = iprot#readFieldBegin in
        if _t10104 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10105 with 
          | 1 -> (if _t10104 = Protocol.T_STRUCT then
              _str10103#set_e (read_talkException iprot)
            else
              iprot#skip _t10104)
          | _ -> iprot#skip _t10104);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10103

class unregisterUserAndDevice_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unregisterUserAndDevice_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unregisterUserAndDevice_args (iprot : Protocol.t) =
  let _str10108 = new unregisterUserAndDevice_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10109,_id10110) = iprot#readFieldBegin in
        if _t10109 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10110 with 
          | _ -> iprot#skip _t10109);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10108

class unregisterUserAndDevice_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "unregisterUserAndDevice_result.success") | Some _x10111 -> _x10111
  method set_success _x10111 = _success <- Some _x10111
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "unregisterUserAndDevice_result.e") | Some _x10112 -> _x10112
  method set_e _x10112 = _e <- Some _x10112
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unregisterUserAndDevice_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unregisterUserAndDevice_result (iprot : Protocol.t) =
  let _str10115 = new unregisterUserAndDevice_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10116,_id10117) = iprot#readFieldBegin in
        if _t10116 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10117 with 
          | 0 -> (if _t10116 = Protocol.T_STRING then
              _str10115#set_success iprot#readString
            else
              iprot#skip _t10116)
          | 1 -> (if _t10116 = Protocol.T_STRUCT then
              _str10115#set_e (read_talkException iprot)
            else
              iprot#skip _t10116)
          | _ -> iprot#skip _t10116);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10115

class updateApnsDeviceToken_args =
object (self)
  val mutable _apnsDeviceToken : string option = None
  method get_apnsDeviceToken = _apnsDeviceToken
  method grab_apnsDeviceToken = match _apnsDeviceToken with None->raise (Field_empty "updateApnsDeviceToken_args.apnsDeviceToken") | Some _x10118 -> _x10118
  method set_apnsDeviceToken _x10118 = _apnsDeviceToken <- Some _x10118
  method unset_apnsDeviceToken = _apnsDeviceToken <- None
  method reset_apnsDeviceToken = _apnsDeviceToken <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateApnsDeviceToken_args";
    (match _apnsDeviceToken with None -> () | Some _v -> 
      oprot#writeFieldBegin("apnsDeviceToken",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateApnsDeviceToken_args (iprot : Protocol.t) =
  let _str10121 = new updateApnsDeviceToken_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10122,_id10123) = iprot#readFieldBegin in
        if _t10122 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10123 with 
          | 2 -> (if _t10122 = Protocol.T_STRING then
              _str10121#set_apnsDeviceToken iprot#readString
            else
              iprot#skip _t10122)
          | _ -> iprot#skip _t10122);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10121

class updateApnsDeviceToken_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateApnsDeviceToken_result.e") | Some _x10124 -> _x10124
  method set_e _x10124 = _e <- Some _x10124
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateApnsDeviceToken_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateApnsDeviceToken_result (iprot : Protocol.t) =
  let _str10127 = new updateApnsDeviceToken_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10128,_id10129) = iprot#readFieldBegin in
        if _t10128 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10129 with 
          | 1 -> (if _t10128 = Protocol.T_STRUCT then
              _str10127#set_e (read_talkException iprot)
            else
              iprot#skip _t10128)
          | _ -> iprot#skip _t10128);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10127

class updateBuddySetting_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "updateBuddySetting_args.key") | Some _x10130 -> _x10130
  method set_key _x10130 = _key <- Some _x10130
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _value : string option = None
  method get_value = _value
  method grab_value = match _value with None->raise (Field_empty "updateBuddySetting_args.value") | Some _x10131 -> _x10131
  method set_value _x10131 = _value <- Some _x10131
  method unset_value = _value <- None
  method reset_value = _value <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddySetting_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _value with None -> () | Some _v -> 
      oprot#writeFieldBegin("value",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddySetting_args (iprot : Protocol.t) =
  let _str10134 = new updateBuddySetting_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10135,_id10136) = iprot#readFieldBegin in
        if _t10135 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10136 with 
          | 2 -> (if _t10135 = Protocol.T_STRING then
              _str10134#set_key iprot#readString
            else
              iprot#skip _t10135)
          | 3 -> (if _t10135 = Protocol.T_STRING then
              _str10134#set_value iprot#readString
            else
              iprot#skip _t10135)
          | _ -> iprot#skip _t10135);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10134

class updateBuddySetting_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateBuddySetting_result.e") | Some _x10137 -> _x10137
  method set_e _x10137 = _e <- Some _x10137
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddySetting_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddySetting_result (iprot : Protocol.t) =
  let _str10140 = new updateBuddySetting_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10141,_id10142) = iprot#readFieldBegin in
        if _t10141 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10142 with 
          | 1 -> (if _t10141 = Protocol.T_STRUCT then
              _str10140#set_e (read_talkException iprot)
            else
              iprot#skip _t10141)
          | _ -> iprot#skip _t10141);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10140

class updateC2DMRegistrationId_args =
object (self)
  val mutable _registrationId : string option = None
  method get_registrationId = _registrationId
  method grab_registrationId = match _registrationId with None->raise (Field_empty "updateC2DMRegistrationId_args.registrationId") | Some _x10143 -> _x10143
  method set_registrationId _x10143 = _registrationId <- Some _x10143
  method unset_registrationId = _registrationId <- None
  method reset_registrationId = _registrationId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateC2DMRegistrationId_args";
    (match _registrationId with None -> () | Some _v -> 
      oprot#writeFieldBegin("registrationId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateC2DMRegistrationId_args (iprot : Protocol.t) =
  let _str10146 = new updateC2DMRegistrationId_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10147,_id10148) = iprot#readFieldBegin in
        if _t10147 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10148 with 
          | 2 -> (if _t10147 = Protocol.T_STRING then
              _str10146#set_registrationId iprot#readString
            else
              iprot#skip _t10147)
          | _ -> iprot#skip _t10147);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10146

class updateC2DMRegistrationId_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateC2DMRegistrationId_result.e") | Some _x10149 -> _x10149
  method set_e _x10149 = _e <- Some _x10149
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateC2DMRegistrationId_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateC2DMRegistrationId_result (iprot : Protocol.t) =
  let _str10152 = new updateC2DMRegistrationId_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10153,_id10154) = iprot#readFieldBegin in
        if _t10153 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10154 with 
          | 1 -> (if _t10153 = Protocol.T_STRUCT then
              _str10152#set_e (read_talkException iprot)
            else
              iprot#skip _t10153)
          | _ -> iprot#skip _t10153);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10152

class updateContactSetting_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateContactSetting_args.reqSeq") | Some _x10155 -> _x10155
  method set_reqSeq _x10155 = _reqSeq <- Some _x10155
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "updateContactSetting_args.mid") | Some _x10156 -> _x10156
  method set_mid _x10156 = _mid <- Some _x10156
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  val mutable _flag : ContactSetting.t option = None
  method get_flag = _flag
  method grab_flag = match _flag with None->raise (Field_empty "updateContactSetting_args.flag") | Some _x10157 -> _x10157
  method set_flag _x10157 = _flag <- Some _x10157
  method unset_flag = _flag <- None
  method reset_flag = _flag <- None

  val mutable _value : string option = None
  method get_value = _value
  method grab_value = match _value with None->raise (Field_empty "updateContactSetting_args.value") | Some _x10158 -> _x10158
  method set_value _x10158 = _value <- Some _x10158
  method unset_value = _value <- None
  method reset_value = _value <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateContactSetting_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _flag with None -> () | Some _v -> 
      oprot#writeFieldBegin("flag",Protocol.T_I32,3);
      oprot#writeI32(ContactSetting.to_i _v);
      oprot#writeFieldEnd
    );
    (match _value with None -> () | Some _v -> 
      oprot#writeFieldBegin("value",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateContactSetting_args (iprot : Protocol.t) =
  let _str10161 = new updateContactSetting_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10162,_id10163) = iprot#readFieldBegin in
        if _t10162 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10163 with 
          | 1 -> (if _t10162 = Protocol.T_I32 then
              _str10161#set_reqSeq iprot#readI32
            else
              iprot#skip _t10162)
          | 2 -> (if _t10162 = Protocol.T_STRING then
              _str10161#set_mid iprot#readString
            else
              iprot#skip _t10162)
          | 3 -> (if _t10162 = Protocol.T_I32 then
              _str10161#set_flag (ContactSetting.of_i iprot#readI32)
            else
              iprot#skip _t10162)
          | 4 -> (if _t10162 = Protocol.T_STRING then
              _str10161#set_value iprot#readString
            else
              iprot#skip _t10162)
          | _ -> iprot#skip _t10162);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10161

class updateContactSetting_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateContactSetting_result.e") | Some _x10164 -> _x10164
  method set_e _x10164 = _e <- Some _x10164
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateContactSetting_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateContactSetting_result (iprot : Protocol.t) =
  let _str10167 = new updateContactSetting_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10168,_id10169) = iprot#readFieldBegin in
        if _t10168 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10169 with 
          | 1 -> (if _t10168 = Protocol.T_STRUCT then
              _str10167#set_e (read_talkException iprot)
            else
              iprot#skip _t10168)
          | _ -> iprot#skip _t10168);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10167

class updateCustomModeSettings_args =
object (self)
  val mutable _customMode : CustomMode.t option = None
  method get_customMode = _customMode
  method grab_customMode = match _customMode with None->raise (Field_empty "updateCustomModeSettings_args.customMode") | Some _x10170 -> _x10170
  method set_customMode _x10170 = _customMode <- Some _x10170
  method unset_customMode = _customMode <- None
  method reset_customMode = _customMode <- None

  val mutable _paramMap : (string,string) Hashtbl.t option = None
  method get_paramMap = _paramMap
  method grab_paramMap = match _paramMap with None->raise (Field_empty "updateCustomModeSettings_args.paramMap") | Some _x10171 -> _x10171
  method set_paramMap _x10171 = _paramMap <- Some _x10171
  method unset_paramMap = _paramMap <- None
  method reset_paramMap = _paramMap <- None

  method copy =
      let _new = Oo.copy self in
      if _paramMap <> None then
        _new#set_paramMap (Hashtbl.copy self#grab_paramMap);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateCustomModeSettings_args";
    (match _customMode with None -> () | Some _v -> 
      oprot#writeFieldBegin("customMode",Protocol.T_I32,2);
      oprot#writeI32(CustomMode.to_i _v);
      oprot#writeFieldEnd
    );
    (match _paramMap with None -> () | Some _v -> 
      oprot#writeFieldBegin("paramMap",Protocol.T_MAP,3);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter10174 -> fun _viter10175 -> 
        oprot#writeString(_kiter10174);
        oprot#writeString(_viter10175);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateCustomModeSettings_args (iprot : Protocol.t) =
  let _str10176 = new updateCustomModeSettings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10177,_id10178) = iprot#readFieldBegin in
        if _t10177 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10178 with 
          | 2 -> (if _t10177 = Protocol.T_I32 then
              _str10176#set_customMode (CustomMode.of_i iprot#readI32)
            else
              iprot#skip _t10177)
          | 3 -> (if _t10177 = Protocol.T_MAP then
              _str10176#set_paramMap 
                (let (_ktype10180,_vtype10181,_size10179) = iprot#readMapBegin in
                let _con10183 = Hashtbl.create _size10179 in
                  for i = 1 to _size10179 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con10183 _k _v
                  done; iprot#readMapEnd; _con10183)
            else
              iprot#skip _t10177)
          | _ -> iprot#skip _t10177);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10176

class updateCustomModeSettings_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateCustomModeSettings_result.e") | Some _x10184 -> _x10184
  method set_e _x10184 = _e <- Some _x10184
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateCustomModeSettings_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateCustomModeSettings_result (iprot : Protocol.t) =
  let _str10187 = new updateCustomModeSettings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10188,_id10189) = iprot#readFieldBegin in
        if _t10188 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10189 with 
          | 1 -> (if _t10188 = Protocol.T_STRUCT then
              _str10187#set_e (read_talkException iprot)
            else
              iprot#skip _t10188)
          | _ -> iprot#skip _t10188);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10187

class updateDeviceInfo_args =
object (self)
  val mutable _deviceUid : string option = None
  method get_deviceUid = _deviceUid
  method grab_deviceUid = match _deviceUid with None->raise (Field_empty "updateDeviceInfo_args.deviceUid") | Some _x10190 -> _x10190
  method set_deviceUid _x10190 = _deviceUid <- Some _x10190
  method unset_deviceUid = _deviceUid <- None
  method reset_deviceUid = _deviceUid <- None

  val mutable _deviceInfo : deviceInfo option = None
  method get_deviceInfo = _deviceInfo
  method grab_deviceInfo = match _deviceInfo with None->raise (Field_empty "updateDeviceInfo_args.deviceInfo") | Some _x10191 -> _x10191
  method set_deviceInfo _x10191 = _deviceInfo <- Some _x10191
  method unset_deviceInfo = _deviceInfo <- None
  method reset_deviceInfo = _deviceInfo <- None

  method copy =
      let _new = Oo.copy self in
      if _deviceInfo <> None then
        _new#set_deviceInfo self#grab_deviceInfo#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateDeviceInfo_args";
    (match _deviceUid with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceUid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _deviceInfo with None -> () | Some _v -> 
      oprot#writeFieldBegin("deviceInfo",Protocol.T_STRUCT,3);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateDeviceInfo_args (iprot : Protocol.t) =
  let _str10194 = new updateDeviceInfo_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10195,_id10196) = iprot#readFieldBegin in
        if _t10195 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10196 with 
          | 2 -> (if _t10195 = Protocol.T_STRING then
              _str10194#set_deviceUid iprot#readString
            else
              iprot#skip _t10195)
          | 3 -> (if _t10195 = Protocol.T_STRUCT then
              _str10194#set_deviceInfo (read_deviceInfo iprot)
            else
              iprot#skip _t10195)
          | _ -> iprot#skip _t10195);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10194

class updateDeviceInfo_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateDeviceInfo_result.e") | Some _x10197 -> _x10197
  method set_e _x10197 = _e <- Some _x10197
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateDeviceInfo_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateDeviceInfo_result (iprot : Protocol.t) =
  let _str10200 = new updateDeviceInfo_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10201,_id10202) = iprot#readFieldBegin in
        if _t10201 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10202 with 
          | 1 -> (if _t10201 = Protocol.T_STRUCT then
              _str10200#set_e (read_talkException iprot)
            else
              iprot#skip _t10201)
          | _ -> iprot#skip _t10201);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10200

class updateGroup_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateGroup_args.reqSeq") | Some _x10203 -> _x10203
  method set_reqSeq _x10203 = _reqSeq <- Some _x10203
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _group : group option = None
  method get_group = _group
  method grab_group = match _group with None->raise (Field_empty "updateGroup_args.group") | Some _x10204 -> _x10204
  method set_group _x10204 = _group <- Some _x10204
  method unset_group = _group <- None
  method reset_group = _group <- None

  method copy =
      let _new = Oo.copy self in
      if _group <> None then
        _new#set_group self#grab_group#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateGroup_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _group with None -> () | Some _v -> 
      oprot#writeFieldBegin("group",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateGroup_args (iprot : Protocol.t) =
  let _str10207 = new updateGroup_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10208,_id10209) = iprot#readFieldBegin in
        if _t10208 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10209 with 
          | 1 -> (if _t10208 = Protocol.T_I32 then
              _str10207#set_reqSeq iprot#readI32
            else
              iprot#skip _t10208)
          | 2 -> (if _t10208 = Protocol.T_STRUCT then
              _str10207#set_group (read_group iprot)
            else
              iprot#skip _t10208)
          | _ -> iprot#skip _t10208);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10207

class updateGroup_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateGroup_result.e") | Some _x10210 -> _x10210
  method set_e _x10210 = _e <- Some _x10210
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateGroup_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateGroup_result (iprot : Protocol.t) =
  let _str10213 = new updateGroup_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10214,_id10215) = iprot#readFieldBegin in
        if _t10214 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10215 with 
          | 1 -> (if _t10214 = Protocol.T_STRUCT then
              _str10213#set_e (read_talkException iprot)
            else
              iprot#skip _t10214)
          | _ -> iprot#skip _t10214);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10213

class updateNotificationToken_args =
object (self)
  val mutable _type : NotificationType.t option = None
  method get_type = _type
  method grab_type = match _type with None->raise (Field_empty "updateNotificationToken_args.type") | Some _x10216 -> _x10216
  method set_type _x10216 = _type <- Some _x10216
  method unset_type = _type <- None
  method reset_type = _type <- None

  val mutable _token : string option = None
  method get_token = _token
  method grab_token = match _token with None->raise (Field_empty "updateNotificationToken_args.token") | Some _x10217 -> _x10217
  method set_token _x10217 = _token <- Some _x10217
  method unset_token = _token <- None
  method reset_token = _token <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateNotificationToken_args";
    (match _token with None -> () | Some _v -> 
      oprot#writeFieldBegin("token",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _type with None -> () | Some _v -> 
      oprot#writeFieldBegin("type",Protocol.T_I32,3);
      oprot#writeI32(NotificationType.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateNotificationToken_args (iprot : Protocol.t) =
  let _str10220 = new updateNotificationToken_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10221,_id10222) = iprot#readFieldBegin in
        if _t10221 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10222 with 
          | 3 -> (if _t10221 = Protocol.T_I32 then
              _str10220#set_type (NotificationType.of_i iprot#readI32)
            else
              iprot#skip _t10221)
          | 2 -> (if _t10221 = Protocol.T_STRING then
              _str10220#set_token iprot#readString
            else
              iprot#skip _t10221)
          | _ -> iprot#skip _t10221);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10220

class updateNotificationToken_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateNotificationToken_result.e") | Some _x10223 -> _x10223
  method set_e _x10223 = _e <- Some _x10223
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateNotificationToken_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateNotificationToken_result (iprot : Protocol.t) =
  let _str10226 = new updateNotificationToken_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10227,_id10228) = iprot#readFieldBegin in
        if _t10227 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10228 with 
          | 1 -> (if _t10227 = Protocol.T_STRUCT then
              _str10226#set_e (read_talkException iprot)
            else
              iprot#skip _t10227)
          | _ -> iprot#skip _t10227);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10226

class updateNotificationTokenWithBytes_args =
object (self)
  val mutable _type : NotificationType.t option = None
  method get_type = _type
  method grab_type = match _type with None->raise (Field_empty "updateNotificationTokenWithBytes_args.type") | Some _x10229 -> _x10229
  method set_type _x10229 = _type <- Some _x10229
  method unset_type = _type <- None
  method reset_type = _type <- None

  val mutable _token : string option = None
  method get_token = _token
  method grab_token = match _token with None->raise (Field_empty "updateNotificationTokenWithBytes_args.token") | Some _x10230 -> _x10230
  method set_token _x10230 = _token <- Some _x10230
  method unset_token = _token <- None
  method reset_token = _token <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateNotificationTokenWithBytes_args";
    (match _token with None -> () | Some _v -> 
      oprot#writeFieldBegin("token",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _type with None -> () | Some _v -> 
      oprot#writeFieldBegin("type",Protocol.T_I32,3);
      oprot#writeI32(NotificationType.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateNotificationTokenWithBytes_args (iprot : Protocol.t) =
  let _str10233 = new updateNotificationTokenWithBytes_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10234,_id10235) = iprot#readFieldBegin in
        if _t10234 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10235 with 
          | 3 -> (if _t10234 = Protocol.T_I32 then
              _str10233#set_type (NotificationType.of_i iprot#readI32)
            else
              iprot#skip _t10234)
          | 2 -> (if _t10234 = Protocol.T_STRING then
              _str10233#set_token iprot#readString
            else
              iprot#skip _t10234)
          | _ -> iprot#skip _t10234);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10233

class updateNotificationTokenWithBytes_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateNotificationTokenWithBytes_result.e") | Some _x10236 -> _x10236
  method set_e _x10236 = _e <- Some _x10236
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateNotificationTokenWithBytes_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateNotificationTokenWithBytes_result (iprot : Protocol.t) =
  let _str10239 = new updateNotificationTokenWithBytes_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10240,_id10241) = iprot#readFieldBegin in
        if _t10240 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10241 with 
          | 1 -> (if _t10240 = Protocol.T_STRUCT then
              _str10239#set_e (read_talkException iprot)
            else
              iprot#skip _t10240)
          | _ -> iprot#skip _t10240);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10239

class updateProfile_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateProfile_args.reqSeq") | Some _x10242 -> _x10242
  method set_reqSeq _x10242 = _reqSeq <- Some _x10242
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _profile : profile option = None
  method get_profile = _profile
  method grab_profile = match _profile with None->raise (Field_empty "updateProfile_args.profile") | Some _x10243 -> _x10243
  method set_profile _x10243 = _profile <- Some _x10243
  method unset_profile = _profile <- None
  method reset_profile = _profile <- None

  method copy =
      let _new = Oo.copy self in
      if _profile <> None then
        _new#set_profile self#grab_profile#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateProfile_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _profile with None -> () | Some _v -> 
      oprot#writeFieldBegin("profile",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateProfile_args (iprot : Protocol.t) =
  let _str10246 = new updateProfile_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10247,_id10248) = iprot#readFieldBegin in
        if _t10247 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10248 with 
          | 1 -> (if _t10247 = Protocol.T_I32 then
              _str10246#set_reqSeq iprot#readI32
            else
              iprot#skip _t10247)
          | 2 -> (if _t10247 = Protocol.T_STRUCT then
              _str10246#set_profile (read_profile iprot)
            else
              iprot#skip _t10247)
          | _ -> iprot#skip _t10247);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10246

class updateProfile_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateProfile_result.e") | Some _x10249 -> _x10249
  method set_e _x10249 = _e <- Some _x10249
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateProfile_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateProfile_result (iprot : Protocol.t) =
  let _str10252 = new updateProfile_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10253,_id10254) = iprot#readFieldBegin in
        if _t10253 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10254 with 
          | 1 -> (if _t10253 = Protocol.T_STRUCT then
              _str10252#set_e (read_talkException iprot)
            else
              iprot#skip _t10253)
          | _ -> iprot#skip _t10253);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10252

class updateProfileAttribute_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateProfileAttribute_args.reqSeq") | Some _x10255 -> _x10255
  method set_reqSeq _x10255 = _reqSeq <- Some _x10255
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _attr : ProfileAttribute.t option = None
  method get_attr = _attr
  method grab_attr = match _attr with None->raise (Field_empty "updateProfileAttribute_args.attr") | Some _x10256 -> _x10256
  method set_attr _x10256 = _attr <- Some _x10256
  method unset_attr = _attr <- None
  method reset_attr = _attr <- None

  val mutable _value : string option = None
  method get_value = _value
  method grab_value = match _value with None->raise (Field_empty "updateProfileAttribute_args.value") | Some _x10257 -> _x10257
  method set_value _x10257 = _value <- Some _x10257
  method unset_value = _value <- None
  method reset_value = _value <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateProfileAttribute_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _attr with None -> () | Some _v -> 
      oprot#writeFieldBegin("attr",Protocol.T_I32,2);
      oprot#writeI32(ProfileAttribute.to_i _v);
      oprot#writeFieldEnd
    );
    (match _value with None -> () | Some _v -> 
      oprot#writeFieldBegin("value",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateProfileAttribute_args (iprot : Protocol.t) =
  let _str10260 = new updateProfileAttribute_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10261,_id10262) = iprot#readFieldBegin in
        if _t10261 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10262 with 
          | 1 -> (if _t10261 = Protocol.T_I32 then
              _str10260#set_reqSeq iprot#readI32
            else
              iprot#skip _t10261)
          | 2 -> (if _t10261 = Protocol.T_I32 then
              _str10260#set_attr (ProfileAttribute.of_i iprot#readI32)
            else
              iprot#skip _t10261)
          | 3 -> (if _t10261 = Protocol.T_STRING then
              _str10260#set_value iprot#readString
            else
              iprot#skip _t10261)
          | _ -> iprot#skip _t10261);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10260

class updateProfileAttribute_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateProfileAttribute_result.e") | Some _x10263 -> _x10263
  method set_e _x10263 = _e <- Some _x10263
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateProfileAttribute_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateProfileAttribute_result (iprot : Protocol.t) =
  let _str10266 = new updateProfileAttribute_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10267,_id10268) = iprot#readFieldBegin in
        if _t10267 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10268 with 
          | 1 -> (if _t10267 = Protocol.T_STRUCT then
              _str10266#set_e (read_talkException iprot)
            else
              iprot#skip _t10267)
          | _ -> iprot#skip _t10267);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10266

class updateRegion_args =
object (self)
  val mutable _region : string option = None
  method get_region = _region
  method grab_region = match _region with None->raise (Field_empty "updateRegion_args.region") | Some _x10269 -> _x10269
  method set_region _x10269 = _region <- Some _x10269
  method unset_region = _region <- None
  method reset_region = _region <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateRegion_args";
    (match _region with None -> () | Some _v -> 
      oprot#writeFieldBegin("region",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateRegion_args (iprot : Protocol.t) =
  let _str10272 = new updateRegion_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10273,_id10274) = iprot#readFieldBegin in
        if _t10273 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10274 with 
          | 2 -> (if _t10273 = Protocol.T_STRING then
              _str10272#set_region iprot#readString
            else
              iprot#skip _t10273)
          | _ -> iprot#skip _t10273);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10272

class updateRegion_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateRegion_result.e") | Some _x10275 -> _x10275
  method set_e _x10275 = _e <- Some _x10275
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateRegion_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateRegion_result (iprot : Protocol.t) =
  let _str10278 = new updateRegion_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10279,_id10280) = iprot#readFieldBegin in
        if _t10279 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10280 with 
          | 1 -> (if _t10279 = Protocol.T_STRUCT then
              _str10278#set_e (read_talkException iprot)
            else
              iprot#skip _t10279)
          | _ -> iprot#skip _t10279);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10278

class updateSettings_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateSettings_args.reqSeq") | Some _x10281 -> _x10281
  method set_reqSeq _x10281 = _reqSeq <- Some _x10281
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _settings : settings option = None
  method get_settings = _settings
  method grab_settings = match _settings with None->raise (Field_empty "updateSettings_args.settings") | Some _x10282 -> _x10282
  method set_settings _x10282 = _settings <- Some _x10282
  method unset_settings = _settings <- None
  method reset_settings = _settings <- None

  method copy =
      let _new = Oo.copy self in
      if _settings <> None then
        _new#set_settings self#grab_settings#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSettings_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _settings with None -> () | Some _v -> 
      oprot#writeFieldBegin("settings",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSettings_args (iprot : Protocol.t) =
  let _str10285 = new updateSettings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10286,_id10287) = iprot#readFieldBegin in
        if _t10286 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10287 with 
          | 1 -> (if _t10286 = Protocol.T_I32 then
              _str10285#set_reqSeq iprot#readI32
            else
              iprot#skip _t10286)
          | 2 -> (if _t10286 = Protocol.T_STRUCT then
              _str10285#set_settings (read_settings iprot)
            else
              iprot#skip _t10286)
          | _ -> iprot#skip _t10286);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10285

class updateSettings_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSettings_result.e") | Some _x10288 -> _x10288
  method set_e _x10288 = _e <- Some _x10288
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSettings_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSettings_result (iprot : Protocol.t) =
  let _str10291 = new updateSettings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10292,_id10293) = iprot#readFieldBegin in
        if _t10292 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10293 with 
          | 1 -> (if _t10292 = Protocol.T_STRUCT then
              _str10291#set_e (read_talkException iprot)
            else
              iprot#skip _t10292)
          | _ -> iprot#skip _t10292);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10291

class updateSettings2_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateSettings2_args.reqSeq") | Some _x10294 -> _x10294
  method set_reqSeq _x10294 = _reqSeq <- Some _x10294
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _settings : settings option = None
  method get_settings = _settings
  method grab_settings = match _settings with None->raise (Field_empty "updateSettings2_args.settings") | Some _x10295 -> _x10295
  method set_settings _x10295 = _settings <- Some _x10295
  method unset_settings = _settings <- None
  method reset_settings = _settings <- None

  method copy =
      let _new = Oo.copy self in
      if _settings <> None then
        _new#set_settings self#grab_settings#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSettings2_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _settings with None -> () | Some _v -> 
      oprot#writeFieldBegin("settings",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSettings2_args (iprot : Protocol.t) =
  let _str10298 = new updateSettings2_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10299,_id10300) = iprot#readFieldBegin in
        if _t10299 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10300 with 
          | 1 -> (if _t10299 = Protocol.T_I32 then
              _str10298#set_reqSeq iprot#readI32
            else
              iprot#skip _t10299)
          | 2 -> (if _t10299 = Protocol.T_STRUCT then
              _str10298#set_settings (read_settings iprot)
            else
              iprot#skip _t10299)
          | _ -> iprot#skip _t10299);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10298

class updateSettings2_result =
object (self)
  val mutable _success : Int32.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSettings2_result.success") | Some _x10301 -> _x10301
  method set_success _x10301 = _success <- Some _x10301
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSettings2_result.e") | Some _x10302 -> _x10302
  method set_e _x10302 = _e <- Some _x10302
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSettings2_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I32,0);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSettings2_result (iprot : Protocol.t) =
  let _str10305 = new updateSettings2_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10306,_id10307) = iprot#readFieldBegin in
        if _t10306 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10307 with 
          | 0 -> (if _t10306 = Protocol.T_I32 then
              _str10305#set_success iprot#readI32
            else
              iprot#skip _t10306)
          | 1 -> (if _t10306 = Protocol.T_STRUCT then
              _str10305#set_e (read_talkException iprot)
            else
              iprot#skip _t10306)
          | _ -> iprot#skip _t10306);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10305

class updateSettingsAttribute_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateSettingsAttribute_args.reqSeq") | Some _x10308 -> _x10308
  method set_reqSeq _x10308 = _reqSeq <- Some _x10308
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _attr : SettingsAttribute.t option = None
  method get_attr = _attr
  method grab_attr = match _attr with None->raise (Field_empty "updateSettingsAttribute_args.attr") | Some _x10309 -> _x10309
  method set_attr _x10309 = _attr <- Some _x10309
  method unset_attr = _attr <- None
  method reset_attr = _attr <- None

  val mutable _value : string option = None
  method get_value = _value
  method grab_value = match _value with None->raise (Field_empty "updateSettingsAttribute_args.value") | Some _x10310 -> _x10310
  method set_value _x10310 = _value <- Some _x10310
  method unset_value = _value <- None
  method reset_value = _value <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSettingsAttribute_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _attr with None -> () | Some _v -> 
      oprot#writeFieldBegin("attr",Protocol.T_I32,2);
      oprot#writeI32(SettingsAttribute.to_i _v);
      oprot#writeFieldEnd
    );
    (match _value with None -> () | Some _v -> 
      oprot#writeFieldBegin("value",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSettingsAttribute_args (iprot : Protocol.t) =
  let _str10313 = new updateSettingsAttribute_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10314,_id10315) = iprot#readFieldBegin in
        if _t10314 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10315 with 
          | 1 -> (if _t10314 = Protocol.T_I32 then
              _str10313#set_reqSeq iprot#readI32
            else
              iprot#skip _t10314)
          | 2 -> (if _t10314 = Protocol.T_I32 then
              _str10313#set_attr (SettingsAttribute.of_i iprot#readI32)
            else
              iprot#skip _t10314)
          | 3 -> (if _t10314 = Protocol.T_STRING then
              _str10313#set_value iprot#readString
            else
              iprot#skip _t10314)
          | _ -> iprot#skip _t10314);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10313

class updateSettingsAttribute_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSettingsAttribute_result.e") | Some _x10316 -> _x10316
  method set_e _x10316 = _e <- Some _x10316
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSettingsAttribute_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSettingsAttribute_result (iprot : Protocol.t) =
  let _str10319 = new updateSettingsAttribute_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10320,_id10321) = iprot#readFieldBegin in
        if _t10320 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10321 with 
          | 1 -> (if _t10320 = Protocol.T_STRUCT then
              _str10319#set_e (read_talkException iprot)
            else
              iprot#skip _t10320)
          | _ -> iprot#skip _t10320);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10319

class updateSettingsAttributes_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "updateSettingsAttributes_args.reqSeq") | Some _x10322 -> _x10322
  method set_reqSeq _x10322 = _reqSeq <- Some _x10322
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _attrBitset : Int32.t option = None
  method get_attrBitset = _attrBitset
  method grab_attrBitset = match _attrBitset with None->raise (Field_empty "updateSettingsAttributes_args.attrBitset") | Some _x10323 -> _x10323
  method set_attrBitset _x10323 = _attrBitset <- Some _x10323
  method unset_attrBitset = _attrBitset <- None
  method reset_attrBitset = _attrBitset <- None

  val mutable _settings : settings option = None
  method get_settings = _settings
  method grab_settings = match _settings with None->raise (Field_empty "updateSettingsAttributes_args.settings") | Some _x10324 -> _x10324
  method set_settings _x10324 = _settings <- Some _x10324
  method unset_settings = _settings <- None
  method reset_settings = _settings <- None

  method copy =
      let _new = Oo.copy self in
      if _settings <> None then
        _new#set_settings self#grab_settings#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSettingsAttributes_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _attrBitset with None -> () | Some _v -> 
      oprot#writeFieldBegin("attrBitset",Protocol.T_I32,2);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _settings with None -> () | Some _v -> 
      oprot#writeFieldBegin("settings",Protocol.T_STRUCT,3);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSettingsAttributes_args (iprot : Protocol.t) =
  let _str10327 = new updateSettingsAttributes_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10328,_id10329) = iprot#readFieldBegin in
        if _t10328 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10329 with 
          | 1 -> (if _t10328 = Protocol.T_I32 then
              _str10327#set_reqSeq iprot#readI32
            else
              iprot#skip _t10328)
          | 2 -> (if _t10328 = Protocol.T_I32 then
              _str10327#set_attrBitset iprot#readI32
            else
              iprot#skip _t10328)
          | 3 -> (if _t10328 = Protocol.T_STRUCT then
              _str10327#set_settings (read_settings iprot)
            else
              iprot#skip _t10328)
          | _ -> iprot#skip _t10328);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10327

class updateSettingsAttributes_result =
object (self)
  val mutable _success : Int32.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSettingsAttributes_result.success") | Some _x10330 -> _x10330
  method set_success _x10330 = _success <- Some _x10330
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSettingsAttributes_result.e") | Some _x10331 -> _x10331
  method set_e _x10331 = _e <- Some _x10331
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSettingsAttributes_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I32,0);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSettingsAttributes_result (iprot : Protocol.t) =
  let _str10334 = new updateSettingsAttributes_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10335,_id10336) = iprot#readFieldBegin in
        if _t10335 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10336 with 
          | 0 -> (if _t10335 = Protocol.T_I32 then
              _str10334#set_success iprot#readI32
            else
              iprot#skip _t10335)
          | 1 -> (if _t10335 = Protocol.T_STRUCT then
              _str10334#set_e (read_talkException iprot)
            else
              iprot#skip _t10335)
          | _ -> iprot#skip _t10335);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10334

class verifyIdentityCredential_args =
object (self)
  val mutable _identityProvider : IdentityProvider.t option = None
  method get_identityProvider = _identityProvider
  method grab_identityProvider = match _identityProvider with None->raise (Field_empty "verifyIdentityCredential_args.identityProvider") | Some _x10337 -> _x10337
  method set_identityProvider _x10337 = _identityProvider <- Some _x10337
  method unset_identityProvider = _identityProvider <- None
  method reset_identityProvider = _identityProvider <- None

  val mutable _identifier : string option = None
  method get_identifier = _identifier
  method grab_identifier = match _identifier with None->raise (Field_empty "verifyIdentityCredential_args.identifier") | Some _x10338 -> _x10338
  method set_identifier _x10338 = _identifier <- Some _x10338
  method unset_identifier = _identifier <- None
  method reset_identifier = _identifier <- None

  val mutable _password : string option = None
  method get_password = _password
  method grab_password = match _password with None->raise (Field_empty "verifyIdentityCredential_args.password") | Some _x10339 -> _x10339
  method set_password _x10339 = _password <- Some _x10339
  method unset_password = _password <- None
  method reset_password = _password <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyIdentityCredential_args";
    (match _identifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("identifier",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _password with None -> () | Some _v -> 
      oprot#writeFieldBegin("password",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _identityProvider with None -> () | Some _v -> 
      oprot#writeFieldBegin("identityProvider",Protocol.T_I32,8);
      oprot#writeI32(IdentityProvider.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyIdentityCredential_args (iprot : Protocol.t) =
  let _str10342 = new verifyIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10343,_id10344) = iprot#readFieldBegin in
        if _t10343 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10344 with 
          | 8 -> (if _t10343 = Protocol.T_I32 then
              _str10342#set_identityProvider (IdentityProvider.of_i iprot#readI32)
            else
              iprot#skip _t10343)
          | 3 -> (if _t10343 = Protocol.T_STRING then
              _str10342#set_identifier iprot#readString
            else
              iprot#skip _t10343)
          | 4 -> (if _t10343 = Protocol.T_STRING then
              _str10342#set_password iprot#readString
            else
              iprot#skip _t10343)
          | _ -> iprot#skip _t10343);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10342

class verifyIdentityCredential_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "verifyIdentityCredential_result.e") | Some _x10345 -> _x10345
  method set_e _x10345 = _e <- Some _x10345
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyIdentityCredential_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyIdentityCredential_result (iprot : Protocol.t) =
  let _str10348 = new verifyIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10349,_id10350) = iprot#readFieldBegin in
        if _t10349 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10350 with 
          | 1 -> (if _t10349 = Protocol.T_STRUCT then
              _str10348#set_e (read_talkException iprot)
            else
              iprot#skip _t10349)
          | _ -> iprot#skip _t10349);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10348

class verifyIdentityCredentialWithResult_args =
object (self)
  val mutable _identityCredential : identityCredential option = None
  method get_identityCredential = _identityCredential
  method grab_identityCredential = match _identityCredential with None->raise (Field_empty "verifyIdentityCredentialWithResult_args.identityCredential") | Some _x10351 -> _x10351
  method set_identityCredential _x10351 = _identityCredential <- Some _x10351
  method unset_identityCredential = _identityCredential <- None
  method reset_identityCredential = _identityCredential <- None

  method copy =
      let _new = Oo.copy self in
      if _identityCredential <> None then
        _new#set_identityCredential self#grab_identityCredential#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyIdentityCredentialWithResult_args";
    (match _identityCredential with None -> () | Some _v -> 
      oprot#writeFieldBegin("identityCredential",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyIdentityCredentialWithResult_args (iprot : Protocol.t) =
  let _str10354 = new verifyIdentityCredentialWithResult_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10355,_id10356) = iprot#readFieldBegin in
        if _t10355 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10356 with 
          | 2 -> (if _t10355 = Protocol.T_STRUCT then
              _str10354#set_identityCredential (read_identityCredential iprot)
            else
              iprot#skip _t10355)
          | _ -> iprot#skip _t10355);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10354

class verifyIdentityCredentialWithResult_result =
object (self)
  val mutable _success : userAuthStatus option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "verifyIdentityCredentialWithResult_result.success") | Some _x10357 -> _x10357
  method set_success _x10357 = _success <- Some _x10357
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "verifyIdentityCredentialWithResult_result.e") | Some _x10358 -> _x10358
  method set_e _x10358 = _e <- Some _x10358
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyIdentityCredentialWithResult_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyIdentityCredentialWithResult_result (iprot : Protocol.t) =
  let _str10361 = new verifyIdentityCredentialWithResult_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10362,_id10363) = iprot#readFieldBegin in
        if _t10362 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10363 with 
          | 0 -> (if _t10362 = Protocol.T_STRUCT then
              _str10361#set_success (read_userAuthStatus iprot)
            else
              iprot#skip _t10362)
          | 1 -> (if _t10362 = Protocol.T_STRUCT then
              _str10361#set_e (read_talkException iprot)
            else
              iprot#skip _t10362)
          | _ -> iprot#skip _t10362);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10361

class verifyPhone_args =
object (self)
  val mutable _sessionId : string option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "verifyPhone_args.sessionId") | Some _x10364 -> _x10364
  method set_sessionId _x10364 = _sessionId <- Some _x10364
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  val mutable _pinCode : string option = None
  method get_pinCode = _pinCode
  method grab_pinCode = match _pinCode with None->raise (Field_empty "verifyPhone_args.pinCode") | Some _x10365 -> _x10365
  method set_pinCode _x10365 = _pinCode <- Some _x10365
  method unset_pinCode = _pinCode <- None
  method reset_pinCode = _pinCode <- None

  val mutable _udidHash : string option = None
  method get_udidHash = _udidHash
  method grab_udidHash = match _udidHash with None->raise (Field_empty "verifyPhone_args.udidHash") | Some _x10366 -> _x10366
  method set_udidHash _x10366 = _udidHash <- Some _x10366
  method unset_udidHash = _udidHash <- None
  method reset_udidHash = _udidHash <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyPhone_args";
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _pinCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("pinCode",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _udidHash with None -> () | Some _v -> 
      oprot#writeFieldBegin("udidHash",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyPhone_args (iprot : Protocol.t) =
  let _str10369 = new verifyPhone_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10370,_id10371) = iprot#readFieldBegin in
        if _t10370 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10371 with 
          | 2 -> (if _t10370 = Protocol.T_STRING then
              _str10369#set_sessionId iprot#readString
            else
              iprot#skip _t10370)
          | 3 -> (if _t10370 = Protocol.T_STRING then
              _str10369#set_pinCode iprot#readString
            else
              iprot#skip _t10370)
          | 4 -> (if _t10370 = Protocol.T_STRING then
              _str10369#set_udidHash iprot#readString
            else
              iprot#skip _t10370)
          | _ -> iprot#skip _t10370);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10369

class verifyPhone_result =
object (self)
  val mutable _success : VerificationResult.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "verifyPhone_result.success") | Some _x10372 -> _x10372
  method set_success _x10372 = _success <- Some _x10372
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "verifyPhone_result.e") | Some _x10373 -> _x10373
  method set_e _x10373 = _e <- Some _x10373
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyPhone_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I32,0);
      oprot#writeI32(VerificationResult.to_i _v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyPhone_result (iprot : Protocol.t) =
  let _str10376 = new verifyPhone_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10377,_id10378) = iprot#readFieldBegin in
        if _t10377 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10378 with 
          | 0 -> (if _t10377 = Protocol.T_I32 then
              _str10376#set_success (VerificationResult.of_i iprot#readI32)
            else
              iprot#skip _t10377)
          | 1 -> (if _t10377 = Protocol.T_STRUCT then
              _str10376#set_e (read_talkException iprot)
            else
              iprot#skip _t10377)
          | _ -> iprot#skip _t10377);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10376

class verifyQrcode_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "verifyQrcode_args.verifier") | Some _x10379 -> _x10379
  method set_verifier _x10379 = _verifier <- Some _x10379
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  val mutable _pinCode : string option = None
  method get_pinCode = _pinCode
  method grab_pinCode = match _pinCode with None->raise (Field_empty "verifyQrcode_args.pinCode") | Some _x10380 -> _x10380
  method set_pinCode _x10380 = _pinCode <- Some _x10380
  method unset_pinCode = _pinCode <- None
  method reset_pinCode = _pinCode <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyQrcode_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _pinCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("pinCode",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyQrcode_args (iprot : Protocol.t) =
  let _str10383 = new verifyQrcode_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10384,_id10385) = iprot#readFieldBegin in
        if _t10384 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10385 with 
          | 2 -> (if _t10384 = Protocol.T_STRING then
              _str10383#set_verifier iprot#readString
            else
              iprot#skip _t10384)
          | 3 -> (if _t10384 = Protocol.T_STRING then
              _str10383#set_pinCode iprot#readString
            else
              iprot#skip _t10384)
          | _ -> iprot#skip _t10384);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10383

class verifyQrcode_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "verifyQrcode_result.success") | Some _x10386 -> _x10386
  method set_success _x10386 = _success <- Some _x10386
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "verifyQrcode_result.e") | Some _x10387 -> _x10387
  method set_e _x10387 = _e <- Some _x10387
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "verifyQrcode_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_verifyQrcode_result (iprot : Protocol.t) =
  let _str10390 = new verifyQrcode_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10391,_id10392) = iprot#readFieldBegin in
        if _t10391 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10392 with 
          | 0 -> (if _t10391 = Protocol.T_STRING then
              _str10390#set_success iprot#readString
            else
              iprot#skip _t10391)
          | 1 -> (if _t10391 = Protocol.T_STRUCT then
              _str10390#set_e (read_talkException iprot)
            else
              iprot#skip _t10391)
          | _ -> iprot#skip _t10391);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10390

class virtual iface =
object (self)
  method virtual getChatRoomAnnouncementsBulk : string list option -> (string,chatRoomAnnouncement list) Hashtbl.t
  method virtual getChatRoomAnnouncements : string option -> chatRoomAnnouncement list
  method virtual createChatRoomAnnouncement : Int32.t option -> string option -> ChatRoomAnnouncementType.t option -> chatRoomAnnouncementContents option -> chatRoomAnnouncement
  method virtual removeChatRoomAnnouncement : Int32.t option -> string option -> Int64.t option -> unit
  method virtual unsendMessage : Int32.t option -> string option -> unit
  method virtual getGroupWithoutMembers : string option -> group
  method virtual requestResendMessage : Int32.t option -> string option -> string option -> unit
  method virtual respondResendMessage : Int32.t option -> string option -> string option -> message option -> ErrorCode.t option -> unit
  method virtual acceptGroupInvitation : Int32.t option -> string option -> unit
  method virtual acceptGroupInvitationByTicket : Int32.t option -> string option -> string option -> unit
  method virtual acceptProximityMatches : string option -> (string,bool) Hashtbl.t option -> unit
  method virtual acquireCallRoute : string option -> string list
  method virtual acquireCallTicket : string option -> string
  method virtual acquireEncryptedAccessToken : FeatureType.t option -> string
  method virtual addSnsId : SnsIdType.t option -> string option -> string
  method virtual blockContact : Int32.t option -> string option -> unit
  method virtual blockRecommendation : Int32.t option -> string option -> unit
  method virtual cancelGroupInvitation : Int32.t option -> string option -> string list option -> unit
  method virtual changeVerificationMethod : string option -> VerificationMethod.t option -> verificationSessionData
  method virtual clearIdentityCredential : unit
  method virtual clearMessageBox : string option -> string option -> unit
  method virtual closeProximityMatch : string option -> unit
  method virtual commitSendMessage : Int32.t option -> string option -> string list option -> (string,string) Hashtbl.t
  method virtual commitSendMessages : Int32.t option -> string list option -> string list option -> (string,string) Hashtbl.t
  method virtual commitUpdateProfile : Int32.t option -> ProfileAttribute.t list option -> string list option -> (string,string) Hashtbl.t
  method virtual confirmEmail : string option -> string option -> unit
  method virtual createGroup : Int32.t option -> string option -> string list option -> group
  method virtual createQrcodeBase64Image : string option -> string option -> Int32.t option -> Int32.t option -> Int32.t option -> Int32.t option -> Int32.t option -> string
  method virtual createRoom : Int32.t option -> string list option -> room
  method virtual createSession : string
  method virtual fetchAnnouncements : Int32.t option -> announcement list
  method virtual fetchMessages : Int64.t option -> Int32.t option -> message list
  method virtual fetchOperations : Int64.t option -> Int32.t option -> operation list
  method virtual fetchOps : Int64.t option -> Int32.t option -> Int64.t option -> Int64.t option -> operation list
  method virtual findAndAddContactsByEmail : Int32.t option -> (string,bool) Hashtbl.t option -> (string,contact) Hashtbl.t
  method virtual findAndAddContactsByMid : Int32.t option -> string option -> ContactType.t option -> string option -> (string,contact) Hashtbl.t
  method virtual findGroupByTicketV2 : string option -> group
  method virtual findAndAddContactsByPhone : Int32.t option -> (string,bool) Hashtbl.t option -> (string,contact) Hashtbl.t
  method virtual getFriendRequests : FriendRequestDirection.t option -> Int64.t option -> friendRequest list
  method virtual removeFriendRequest : FriendRequestDirection.t option -> string option -> unit
  method virtual findAndAddContactsByUserid : Int32.t option -> string option -> (string,contact) Hashtbl.t
  method virtual findContactByUserid : string option -> contact
  method virtual findContactByUserTicket : string option -> contact
  method virtual findContactsByEmail : (string,bool) Hashtbl.t option -> (string,contact) Hashtbl.t
  method virtual findContactsByPhone : (string,bool) Hashtbl.t option -> (string,contact) Hashtbl.t
  method virtual findSnsIdUserStatus : SnsIdType.t option -> string option -> string option -> snsIdUserStatus
  method virtual finishUpdateVerification : string option -> unit
  method virtual generateUserTicket : Int64.t option -> Int32.t option -> ticket
  method virtual destroyMessage : Int32.t option -> string option -> string option -> int option -> unit
  method virtual getAcceptedProximityMatches : string option -> (string,bool) Hashtbl.t
  method virtual getActiveBuddySubscriberIds : string list
  method virtual getAllContactIds : string list
  method virtual getAuthQrcode : bool option -> string option -> authQrcode
  method virtual getBlockedContactIds : string list
  method virtual registerWithPhoneNumber : string option -> string option -> registerWithPhoneNumberResult
  method virtual registerWithPhoneNumberAndPassword : string option -> string option -> string option -> registerWithPhoneNumberResult
  method virtual getAnalyticsInfo : analyticsInfo
  method virtual reportClientStatistics : Int32.t option -> ReportCategory.t option -> Int32.t option -> unit
  method virtual verifyPhoneNumberForLogin : string option -> string option -> string option -> string
  method virtual verifyPhoneNumber : string option -> string option -> string option -> string option -> string option -> phoneVerificationResult
  method virtual getBlockedContactIdsByRange : Int32.t option -> Int32.t option -> string list
  method virtual getBlockedRecommendationIds : string list
  method virtual getBuddyBlockerIds : string list
  method virtual getBuddyLocation : string option -> Int32.t option -> geolocation
  method virtual getCompactContactsModifiedSince : Int64.t option -> compactContact list
  method virtual getCompactGroup : string option -> group
  method virtual getCompactRoom : string option -> room
  method virtual getContact : string option -> contact
  method virtual getContacts : string list option -> contact list
  method virtual getContactWithFriendRequestStatus : string option -> contact
  method virtual getCountryWithRequestIp : string
  method virtual getFavoriteMids : string list
  method virtual getGroup : string option -> group
  method virtual getGroupIdsInvited : string list
  method virtual getGroupIdsJoined : string list
  method virtual getGroups : string list option -> group list
  method virtual getHiddenContactMids : string list
  method virtual getIdentityIdentifier : string
  method virtual getLastAnnouncementIndex : Int32.t
  method virtual getLastOpRevision : Int64.t
  method virtual getSuggestRevisions : suggestDictionaryRevisions
  method virtual getPreviousMessagesV2WithReadCount : string option -> messageBoxV2MessageId option -> Int32.t option -> message list
  method virtual getMessageBox : string option -> string option -> Int32.t option -> tMessageBox
  method virtual getMessageBoxCompactWrapUp : string option -> tMessageBoxWrapUp
  method virtual getMessageBoxCompactWrapUpList : Int32.t option -> Int32.t option -> tMessageBoxWrapUpResponse
  method virtual getMessageBoxList : string option -> Int32.t option -> tMessageBox list
  method virtual getMessageBoxListByStatus : string option -> Int32.t option -> Int32.t option -> tMessageBox list
  method virtual getMessageBoxWrapUp : string option -> tMessageBoxWrapUp
  method virtual getMessageBoxWrapUpList : Int32.t option -> Int32.t option -> tMessageBoxWrapUpResponse
  method virtual getMessagesBySequenceNumber : string option -> string option -> Int64.t option -> Int64.t option -> message list
  method virtual getNextMessages : string option -> Int64.t option -> Int32.t option -> message list
  method virtual getNotificationPolicy : CarrierCode.t option -> NotificationType.t list
  method virtual getPreviousMessages : string option -> Int64.t option -> Int32.t option -> message list
  method virtual getProfile : profile
  method virtual getProximityMatchCandidateList : string option -> proximityMatchCandidateResult
  method virtual getProximityMatchCandidates : string option -> (contact,bool) Hashtbl.t
  method virtual getRecentMessages : string option -> Int32.t option -> message list
  method virtual getRecommendationIds : string list
  method virtual getRoom : string option -> room
  method virtual getRSAKeyInfo : IdentityProvider.t option -> rSAKey
  method virtual getServerTime : Int64.t
  method virtual getSessions : loginSession list
  method virtual getSettings : settings
  method virtual getGroupsV2 : string list option -> group list
  method virtual getSettingsAttributes : Int32.t option -> settings
  method virtual getSystemConfiguration : systemConfiguration
  method virtual getUserTicket : ticket
  method virtual getWapInvitation : string option -> wapInvitation
  method virtual invalidateUserTicket : unit
  method virtual inviteFriendsBySms : string list option -> unit
  method virtual inviteIntoGroup : Int32.t option -> string option -> string list option -> unit
  method virtual inviteIntoRoom : Int32.t option -> string option -> string list option -> unit
  method virtual inviteViaEmail : Int32.t option -> string option -> string option -> unit
  method virtual isIdentityIdentifierAvailable : IdentityProvider.t option -> string option -> bool
  method virtual isUseridAvailable : string option -> bool
  method virtual kickoutFromGroup : Int32.t option -> string option -> string list option -> unit
  method virtual reissueGroupTicket : string option -> string
  method virtual findGroupByTicket : string option -> group
  method virtual leaveGroup : Int32.t option -> string option -> unit
  method virtual leaveRoom : Int32.t option -> string option -> unit
  method virtual loginWithIdentityCredential : IdentityProvider.t option -> string option -> string option -> bool option -> string option -> string option -> string option -> string
  method virtual loginWithIdentityCredentialForCertificate : IdentityProvider.t option -> string option -> string option -> bool option -> string option -> string option -> string option -> loginResult
  method virtual loginWithVerifier : string option -> string
  method virtual loginWithVerifierForCerificate : string option -> loginResult
  method virtual loginWithVerifierForCertificate : string option -> loginResult
  method virtual logout : unit
  method virtual logoutSession : string option -> unit
  method virtual noop : unit
  method virtual notifiedRedirect : (string,string) Hashtbl.t option -> unit
  method virtual notifyBuddyOnAir : Int32.t option -> string list option -> (string,string) Hashtbl.t
  method virtual notifyIndividualEvent : NotificationStatus.t option -> string list option -> unit
  method virtual notifyInstalled : string option -> string option -> unit
  method virtual notifyRegistrationComplete : string option -> string option -> unit
  method virtual notifySleep : Int64.t option -> Int32.t option -> unit
  method virtual notifyUpdated : Int64.t option -> deviceInfo option -> unit
  method virtual openProximityMatch : location option -> string
  method virtual registerBuddyUser : string option -> string option -> string
  method virtual registerBuddyUserid : Int32.t option -> string option -> unit
  method virtual registerDevice : string option -> string
  method virtual registerDeviceWithIdentityCredential : string option -> IdentityProvider.t option -> string option -> string option -> string
  method virtual registerDeviceWithoutPhoneNumber : string option -> string option -> deviceInfo option -> string
  method virtual registerDeviceWithoutPhoneNumberWithIdentityCredential : string option -> string option -> deviceInfo option -> IdentityProvider.t option -> string option -> string option -> string option -> string option -> string
  method virtual registerUserid : Int32.t option -> string option -> bool
  method virtual registerWapDevice : string option -> string option -> string option -> deviceInfo option -> string
  method virtual registerWithExistingSnsIdAndIdentityCredential : identityCredential option -> string option -> string option -> deviceInfo option -> string
  method virtual registerWithSnsId : SnsIdType.t option -> string option -> string option -> string option -> deviceInfo option -> string option -> registerWithSnsIdResult
  method virtual registerWithSnsIdAndIdentityCredential : SnsIdType.t option -> string option -> identityCredential option -> string option -> string option -> deviceInfo option -> string
  method virtual reissueDeviceCredential : string
  method virtual reissueUserTicket : Int64.t option -> Int32.t option -> string
  method virtual getMessageReadRange : string list option -> tMessageReadRange list
  method virtual rejectGroupInvitation : Int32.t option -> string option -> unit
  method virtual releaseSession : unit
  method virtual removeAllMessages : Int32.t option -> string option -> unit
  method virtual removeBuddyLocation : string option -> Int32.t option -> unit
  method virtual removeMessage : string option -> bool
  method virtual makeUserAddMyselfAsContact : string option -> contactTransition
  method virtual removeMessageFromMyHome : string option -> bool
  method virtual removeSnsId : SnsIdType.t option -> string
  method virtual report : Int64.t option -> SyncCategory.t option -> string option -> unit
  method virtual reportContacts : Int64.t option -> SyncCategory.t option -> contactReport list option -> SyncActionType.t option -> contactReportResult list
  method virtual reportGroups : Int64.t option -> group list option -> unit
  method virtual reportProfile : Int64.t option -> profile option -> unit
  method virtual reportRooms : Int64.t option -> room list option -> unit
  method virtual findAndAddContactByMetaTag : Int32.t option -> string option -> string option -> contact
  method virtual reportSettings : Int64.t option -> settings option -> unit
  method virtual reportSpam : string option -> string list option -> SpammerReason.t list option -> string list option -> string list option -> string list option -> unit
  method virtual reportSpammer : string option -> SpammerReason.t list option -> string list option -> unit
  method virtual requestAccountPasswordReset : IdentityProvider.t option -> string option -> string option -> unit
  method virtual requestEmailConfirmation : emailConfirmation option -> emailConfirmationSession
  method virtual requestIdentityUnbind : IdentityProvider.t option -> string option -> unit
  method virtual resendEmailConfirmation : string option -> emailConfirmationSession
  method virtual resendPinCode : string option -> unit
  method virtual resendPinCodeBySMS : string option -> unit
  method virtual sendChatChecked : Int32.t option -> string option -> string option -> unit
  method virtual sendMessageAwaitCommit : Int32.t option -> message option -> commitMessageResult
  method virtual sendChatRemoved : Int32.t option -> string option -> string option -> unit
  method virtual sendContentPreviewUpdated : Int32.t option -> string option -> string list option -> (string,string) Hashtbl.t
  method virtual sendContentReceipt : Int32.t option -> string option -> string option -> unit
  method virtual sendDummyPush : unit
  method virtual removeE2EEPublicKey : e2EEPublicKey option -> unit
  method virtual negotiateE2EEPublicKey : string option -> e2EENegotiationResult
  method virtual getE2EEPublicKey : string option -> Int32.t option -> Int32.t option -> e2EEPublicKey
  method virtual requestE2EEKeyExchange : Int32.t option -> string option -> e2EEPublicKey option -> string option -> unit
  method virtual getLastE2EEPublicKeys : string option -> (string,e2EEPublicKey) Hashtbl.t
  method virtual registerE2EEPublicKey : Int32.t option -> e2EEPublicKey option -> e2EEPublicKey
  method virtual getE2EEPublicKeys : e2EEPublicKey list
  method virtual getE2EEPublicKeysEx : bool option -> e2EEPublicKey list
  method virtual getReadMessageOpsInBulk : string list option -> operation list
  method virtual sendEvent : Int32.t option -> message option -> message
  method virtual sendMessage : Int32.t option -> message option -> message
  method virtual sendMessageIgnored : Int32.t option -> string option -> string list option -> unit
  method virtual sendMessageReceipt : Int32.t option -> string option -> string list option -> unit
  method virtual findContactByMetaTag : string option -> string option -> contact
  method virtual sendMessageToMyHome : Int32.t option -> message option -> message
  method virtual setBuddyLocation : string option -> Int32.t option -> geolocation option -> unit
  method virtual setIdentityCredential : string option -> string option -> IdentityProvider.t option -> unit
  method virtual setNotificationsEnabled : Int32.t option -> MIDType.t option -> string option -> bool option -> unit
  method virtual startUpdateVerification : string option -> CarrierCode.t option -> string option -> string option -> deviceInfo option -> string option -> string option -> verificationSessionData
  method virtual startVerification : string option -> CarrierCode.t option -> string option -> string option -> deviceInfo option -> string option -> string option -> string option -> sIMInfo option -> string option -> verificationSessionData
  method virtual updateGroupPreferenceAttribute : Int32.t option -> string option -> (GroupPreferenceAttribute.t,string) Hashtbl.t option -> unit
  method virtual createRoomV2 : Int32.t option -> string list option -> room
  method virtual storeUpdateProfileAttribute : Int32.t option -> ProfileAttribute.t option -> string option -> unit
  method virtual syncContactBySnsIds : Int32.t option -> snsFriendModification list option -> snsFriendContactRegistration list
  method virtual syncContacts : Int32.t option -> contactModification list option -> (string,contactRegistration) Hashtbl.t
  method virtual trySendMessage : Int32.t option -> message option -> message
  method virtual getNextMessagesV2 : string option -> messageBoxV2MessageId option -> Int32.t option -> message list
  method virtual getMessageBoxCompactWrapUpV2 : string option -> tMessageBoxWrapUp
  method virtual getRecentMessagesV2 : string option -> Int32.t option -> message list
  method virtual validateContactsOnBot : string list option -> (string,string) Hashtbl.t
  method virtual tryFriendRequest : string option -> FriendRequestMethod.t option -> string option -> unit
  method virtual unblockContact : Int32.t option -> string option -> unit
  method virtual unblockRecommendation : Int32.t option -> string option -> unit
  method virtual unregisterUserAndDevice : string
  method virtual updateApnsDeviceToken : string option -> unit
  method virtual updateBuddySetting : string option -> string option -> unit
  method virtual updateC2DMRegistrationId : string option -> unit
  method virtual updateContactSetting : Int32.t option -> string option -> ContactSetting.t option -> string option -> unit
  method virtual updateCustomModeSettings : CustomMode.t option -> (string,string) Hashtbl.t option -> unit
  method virtual updateDeviceInfo : string option -> deviceInfo option -> unit
  method virtual updateGroup : Int32.t option -> group option -> unit
  method virtual updateNotificationToken : NotificationType.t option -> string option -> unit
  method virtual updateNotificationTokenWithBytes : NotificationType.t option -> string option -> unit
  method virtual updateProfile : Int32.t option -> profile option -> unit
  method virtual updateProfileAttribute : Int32.t option -> ProfileAttribute.t option -> string option -> unit
  method virtual updateRegion : string option -> unit
  method virtual updateSettings : Int32.t option -> settings option -> unit
  method virtual updateSettings2 : Int32.t option -> settings option -> Int32.t
  method virtual updateSettingsAttribute : Int32.t option -> SettingsAttribute.t option -> string option -> unit
  method virtual updateSettingsAttributes : Int32.t option -> Int32.t option -> settings option -> Int32.t
  method virtual verifyIdentityCredential : IdentityProvider.t option -> string option -> string option -> unit
  method virtual verifyIdentityCredentialWithResult : identityCredential option -> userAuthStatus
  method virtual verifyPhone : string option -> string option -> string option -> VerificationResult.t
  method virtual verifyQrcode : string option -> string option -> string
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method getChatRoomAnnouncementsBulk chatRoomMids = 
    self#send_getChatRoomAnnouncementsBulk chatRoomMids;
    self#recv_getChatRoomAnnouncementsBulk
  method private send_getChatRoomAnnouncementsBulk chatRoomMids = 
    oprot#writeMessageBegin ("getChatRoomAnnouncementsBulk", Protocol.CALL, seqid);
    let args = new getChatRoomAnnouncementsBulk_args in
      args#set_chatRoomMids chatRoomMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getChatRoomAnnouncementsBulk  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getChatRoomAnnouncementsBulk_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getChatRoomAnnouncementsBulk failed: unknown result")))
  method getChatRoomAnnouncements chatRoomMid = 
    self#send_getChatRoomAnnouncements chatRoomMid;
    self#recv_getChatRoomAnnouncements
  method private send_getChatRoomAnnouncements chatRoomMid = 
    oprot#writeMessageBegin ("getChatRoomAnnouncements", Protocol.CALL, seqid);
    let args = new getChatRoomAnnouncements_args in
      args#set_chatRoomMid chatRoomMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getChatRoomAnnouncements  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getChatRoomAnnouncements_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getChatRoomAnnouncements failed: unknown result")))
  method createChatRoomAnnouncement reqSeq chatRoomMid type contents = 
    self#send_createChatRoomAnnouncement reqSeq chatRoomMid type contents;
    self#recv_createChatRoomAnnouncement
  method private send_createChatRoomAnnouncement reqSeq chatRoomMid type contents = 
    oprot#writeMessageBegin ("createChatRoomAnnouncement", Protocol.CALL, seqid);
    let args = new createChatRoomAnnouncement_args in
      args#set_reqSeq reqSeq;
      args#set_chatRoomMid chatRoomMid;
      args#set_type type;
      args#set_contents contents;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createChatRoomAnnouncement  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createChatRoomAnnouncement_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createChatRoomAnnouncement failed: unknown result")))
  method removeChatRoomAnnouncement reqSeq chatRoomMid announcementSeq = 
    self#send_removeChatRoomAnnouncement reqSeq chatRoomMid announcementSeq;
    self#recv_removeChatRoomAnnouncement
  method private send_removeChatRoomAnnouncement reqSeq chatRoomMid announcementSeq = 
    oprot#writeMessageBegin ("removeChatRoomAnnouncement", Protocol.CALL, seqid);
    let args = new removeChatRoomAnnouncement_args in
      args#set_reqSeq reqSeq;
      args#set_chatRoomMid chatRoomMid;
      args#set_announcementSeq announcementSeq;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeChatRoomAnnouncement  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeChatRoomAnnouncement_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method unsendMessage seq messageId = 
    self#send_unsendMessage seq messageId;
    self#recv_unsendMessage
  method private send_unsendMessage seq messageId = 
    oprot#writeMessageBegin ("unsendMessage", Protocol.CALL, seqid);
    let args = new unsendMessage_args in
      args#set_seq seq;
      args#set_messageId messageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_unsendMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_unsendMessage_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method getGroupWithoutMembers groupId = 
    self#send_getGroupWithoutMembers groupId;
    self#recv_getGroupWithoutMembers
  method private send_getGroupWithoutMembers groupId = 
    oprot#writeMessageBegin ("getGroupWithoutMembers", Protocol.CALL, seqid);
    let args = new getGroupWithoutMembers_args in
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupWithoutMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupWithoutMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupWithoutMembers failed: unknown result")))
  method requestResendMessage reqSeq senderMid messageId = 
    self#send_requestResendMessage reqSeq senderMid messageId;
    self#recv_requestResendMessage
  method private send_requestResendMessage reqSeq senderMid messageId = 
    oprot#writeMessageBegin ("requestResendMessage", Protocol.CALL, seqid);
    let args = new requestResendMessage_args in
      args#set_reqSeq reqSeq;
      args#set_senderMid senderMid;
      args#set_messageId messageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_requestResendMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_requestResendMessage_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method respondResendMessage reqSeq receiverMid originalMessageId resendMessage errorCode = 
    self#send_respondResendMessage reqSeq receiverMid originalMessageId resendMessage errorCode;
    self#recv_respondResendMessage
  method private send_respondResendMessage reqSeq receiverMid originalMessageId resendMessage errorCode = 
    oprot#writeMessageBegin ("respondResendMessage", Protocol.CALL, seqid);
    let args = new respondResendMessage_args in
      args#set_reqSeq reqSeq;
      args#set_receiverMid receiverMid;
      args#set_originalMessageId originalMessageId;
      args#set_resendMessage resendMessage;
      args#set_errorCode errorCode;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_respondResendMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_respondResendMessage_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method acceptGroupInvitation reqSeq groupId = 
    self#send_acceptGroupInvitation reqSeq groupId;
    self#recv_acceptGroupInvitation
  method private send_acceptGroupInvitation reqSeq groupId = 
    oprot#writeMessageBegin ("acceptGroupInvitation", Protocol.CALL, seqid);
    let args = new acceptGroupInvitation_args in
      args#set_reqSeq reqSeq;
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_acceptGroupInvitation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_acceptGroupInvitation_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method acceptGroupInvitationByTicket reqSeq GroupMid ticketId = 
    self#send_acceptGroupInvitationByTicket reqSeq groupMid ticketId;
    self#recv_acceptGroupInvitationByTicket
  method private send_acceptGroupInvitationByTicket reqSeq GroupMid ticketId = 
    oprot#writeMessageBegin ("acceptGroupInvitationByTicket", Protocol.CALL, seqid);
    let args = new acceptGroupInvitationByTicket_args in
      args#set_reqSeq reqSeq;
      args#set_GroupMid GroupMid;
      args#set_ticketId ticketId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_acceptGroupInvitationByTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_acceptGroupInvitationByTicket_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method acceptProximityMatches sessionId ids = 
    self#send_acceptProximityMatches sessionId ids;
    self#recv_acceptProximityMatches
  method private send_acceptProximityMatches sessionId ids = 
    oprot#writeMessageBegin ("acceptProximityMatches", Protocol.CALL, seqid);
    let args = new acceptProximityMatches_args in
      args#set_sessionId sessionId;
      args#set_ids ids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_acceptProximityMatches  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_acceptProximityMatches_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method acquireCallRoute to = 
    self#send_acquireCallRoute to;
    self#recv_acquireCallRoute
  method private send_acquireCallRoute to = 
    oprot#writeMessageBegin ("acquireCallRoute", Protocol.CALL, seqid);
    let args = new acquireCallRoute_args in
      args#set_to to;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_acquireCallRoute  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_acquireCallRoute_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "acquireCallRoute failed: unknown result")))
  method acquireCallTicket to = 
    self#send_acquireCallTicket to;
    self#recv_acquireCallTicket
  method private send_acquireCallTicket to = 
    oprot#writeMessageBegin ("acquireCallTicket", Protocol.CALL, seqid);
    let args = new acquireCallTicket_args in
      args#set_to to;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_acquireCallTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_acquireCallTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "acquireCallTicket failed: unknown result")))
  method acquireEncryptedAccessToken featureType = 
    self#send_acquireEncryptedAccessToken featureType;
    self#recv_acquireEncryptedAccessToken
  method private send_acquireEncryptedAccessToken featureType = 
    oprot#writeMessageBegin ("acquireEncryptedAccessToken", Protocol.CALL, seqid);
    let args = new acquireEncryptedAccessToken_args in
      args#set_featureType featureType;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_acquireEncryptedAccessToken  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_acquireEncryptedAccessToken_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "acquireEncryptedAccessToken failed: unknown result")))
  method addSnsId snsIdType snsAccessToken = 
    self#send_addSnsId snsIdType snsAccessToken;
    self#recv_addSnsId
  method private send_addSnsId snsIdType snsAccessToken = 
    oprot#writeMessageBegin ("addSnsId", Protocol.CALL, seqid);
    let args = new addSnsId_args in
      args#set_snsIdType snsIdType;
      args#set_snsAccessToken snsAccessToken;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_addSnsId  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_addSnsId_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "addSnsId failed: unknown result")))
  method blockContact reqSeq id = 
    self#send_blockContact reqSeq id;
    self#recv_blockContact
  method private send_blockContact reqSeq id = 
    oprot#writeMessageBegin ("blockContact", Protocol.CALL, seqid);
    let args = new blockContact_args in
      args#set_reqSeq reqSeq;
      args#set_id id;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_blockContact  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_blockContact_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method blockRecommendation reqSeq id = 
    self#send_blockRecommendation reqSeq id;
    self#recv_blockRecommendation
  method private send_blockRecommendation reqSeq id = 
    oprot#writeMessageBegin ("blockRecommendation", Protocol.CALL, seqid);
    let args = new blockRecommendation_args in
      args#set_reqSeq reqSeq;
      args#set_id id;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_blockRecommendation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_blockRecommendation_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method cancelGroupInvitation reqSeq groupId contactIds = 
    self#send_cancelGroupInvitation reqSeq groupId contactIds;
    self#recv_cancelGroupInvitation
  method private send_cancelGroupInvitation reqSeq groupId contactIds = 
    oprot#writeMessageBegin ("cancelGroupInvitation", Protocol.CALL, seqid);
    let args = new cancelGroupInvitation_args in
      args#set_reqSeq reqSeq;
      args#set_groupId groupId;
      args#set_contactIds contactIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_cancelGroupInvitation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_cancelGroupInvitation_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method changeVerificationMethod sessionId method = 
    self#send_changeVerificationMethod sessionId method;
    self#recv_changeVerificationMethod
  method private send_changeVerificationMethod sessionId method = 
    oprot#writeMessageBegin ("changeVerificationMethod", Protocol.CALL, seqid);
    let args = new changeVerificationMethod_args in
      args#set_sessionId sessionId;
      args#set_method method;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_changeVerificationMethod  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_changeVerificationMethod_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "changeVerificationMethod failed: unknown result")))
  method clearIdentityCredential  = 
    self#send_clearIdentityCredential;
    self#recv_clearIdentityCredential
  method private send_clearIdentityCredential  = 
    oprot#writeMessageBegin ("clearIdentityCredential", Protocol.CALL, seqid);
    let args = new clearIdentityCredential_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_clearIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_clearIdentityCredential_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method clearMessageBox channelId messageBoxId = 
    self#send_clearMessageBox channelId messageBoxId;
    self#recv_clearMessageBox
  method private send_clearMessageBox channelId messageBoxId = 
    oprot#writeMessageBegin ("clearMessageBox", Protocol.CALL, seqid);
    let args = new clearMessageBox_args in
      args#set_channelId channelId;
      args#set_messageBoxId messageBoxId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_clearMessageBox  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_clearMessageBox_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method closeProximityMatch sessionId = 
    self#send_closeProximityMatch sessionId;
    self#recv_closeProximityMatch
  method private send_closeProximityMatch sessionId = 
    oprot#writeMessageBegin ("closeProximityMatch", Protocol.CALL, seqid);
    let args = new closeProximityMatch_args in
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_closeProximityMatch  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_closeProximityMatch_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method commitSendMessage seq messageId receiverMids = 
    self#send_commitSendMessage seq messageId receiverMids;
    self#recv_commitSendMessage
  method private send_commitSendMessage seq messageId receiverMids = 
    oprot#writeMessageBegin ("commitSendMessage", Protocol.CALL, seqid);
    let args = new commitSendMessage_args in
      args#set_seq seq;
      args#set_messageId messageId;
      args#set_receiverMids receiverMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_commitSendMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_commitSendMessage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "commitSendMessage failed: unknown result")))
  method commitSendMessages seq messageIds receiverMids = 
    self#send_commitSendMessages seq messageIds receiverMids;
    self#recv_commitSendMessages
  method private send_commitSendMessages seq messageIds receiverMids = 
    oprot#writeMessageBegin ("commitSendMessages", Protocol.CALL, seqid);
    let args = new commitSendMessages_args in
      args#set_seq seq;
      args#set_messageIds messageIds;
      args#set_receiverMids receiverMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_commitSendMessages  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_commitSendMessages_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "commitSendMessages failed: unknown result")))
  method commitUpdateProfile seq attrs receiverMids = 
    self#send_commitUpdateProfile seq attrs receiverMids;
    self#recv_commitUpdateProfile
  method private send_commitUpdateProfile seq attrs receiverMids = 
    oprot#writeMessageBegin ("commitUpdateProfile", Protocol.CALL, seqid);
    let args = new commitUpdateProfile_args in
      args#set_seq seq;
      args#set_attrs attrs;
      args#set_receiverMids receiverMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_commitUpdateProfile  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_commitUpdateProfile_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "commitUpdateProfile failed: unknown result")))
  method confirmEmail verifier pinCode = 
    self#send_confirmEmail verifier pinCode;
    self#recv_confirmEmail
  method private send_confirmEmail verifier pinCode = 
    oprot#writeMessageBegin ("confirmEmail", Protocol.CALL, seqid);
    let args = new confirmEmail_args in
      args#set_verifier verifier;
      args#set_pinCode pinCode;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_confirmEmail  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_confirmEmail_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method createGroup seq name contactIds = 
    self#send_createGroup seq name contactIds;
    self#recv_createGroup
  method private send_createGroup seq name contactIds = 
    oprot#writeMessageBegin ("createGroup", Protocol.CALL, seqid);
    let args = new createGroup_args in
      args#set_seq seq;
      args#set_name name;
      args#set_contactIds contactIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createGroup  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createGroup_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createGroup failed: unknown result")))
  method createQrcodeBase64Image url characterSet imageSize x y width height = 
    self#send_createQrcodeBase64Image url characterSet imageSize x y width height;
    self#recv_createQrcodeBase64Image
  method private send_createQrcodeBase64Image url characterSet imageSize x y width height = 
    oprot#writeMessageBegin ("createQrcodeBase64Image", Protocol.CALL, seqid);
    let args = new createQrcodeBase64Image_args in
      args#set_url url;
      args#set_characterSet characterSet;
      args#set_imageSize imageSize;
      args#set_x x;
      args#set_y y;
      args#set_width width;
      args#set_height height;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createQrcodeBase64Image  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createQrcodeBase64Image_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createQrcodeBase64Image failed: unknown result")))
  method createRoom reqSeq contactIds = 
    self#send_createRoom reqSeq contactIds;
    self#recv_createRoom
  method private send_createRoom reqSeq contactIds = 
    oprot#writeMessageBegin ("createRoom", Protocol.CALL, seqid);
    let args = new createRoom_args in
      args#set_reqSeq reqSeq;
      args#set_contactIds contactIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createRoom  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createRoom_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createRoom failed: unknown result")))
  method createSession  = 
    self#send_createSession;
    self#recv_createSession
  method private send_createSession  = 
    oprot#writeMessageBegin ("createSession", Protocol.CALL, seqid);
    let args = new createSession_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createSession  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createSession_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createSession failed: unknown result")))
  method fetchAnnouncements lastFetchedIndex = 
    self#send_fetchAnnouncements lastFetchedIndex;
    self#recv_fetchAnnouncements
  method private send_fetchAnnouncements lastFetchedIndex = 
    oprot#writeMessageBegin ("fetchAnnouncements", Protocol.CALL, seqid);
    let args = new fetchAnnouncements_args in
      args#set_lastFetchedIndex lastFetchedIndex;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_fetchAnnouncements  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_fetchAnnouncements_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "fetchAnnouncements failed: unknown result")))
  method fetchMessages localTs count = 
    self#send_fetchMessages localTs count;
    self#recv_fetchMessages
  method private send_fetchMessages localTs count = 
    oprot#writeMessageBegin ("fetchMessages", Protocol.CALL, seqid);
    let args = new fetchMessages_args in
      args#set_localTs localTs;
      args#set_count count;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_fetchMessages  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_fetchMessages_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "fetchMessages failed: unknown result")))
  method fetchOperations localRev count = 
    self#send_fetchOperations localRev count;
    self#recv_fetchOperations
  method private send_fetchOperations localRev count = 
    oprot#writeMessageBegin ("fetchOperations", Protocol.CALL, seqid);
    let args = new fetchOperations_args in
      args#set_localRev localRev;
      args#set_count count;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_fetchOperations  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_fetchOperations_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ShouldSyncException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "fetchOperations failed: unknown result")))
  method fetchOps localRev count globalRev individualRev = 
    self#send_fetchOps localRev count globalRev individualRev;
    self#recv_fetchOps
  method private send_fetchOps localRev count globalRev individualRev = 
    oprot#writeMessageBegin ("fetchOps", Protocol.CALL, seqid);
    let args = new fetchOps_args in
      args#set_localRev localRev;
      args#set_count count;
      args#set_globalRev globalRev;
      args#set_individualRev individualRev;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_fetchOps  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_fetchOps_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ShouldSyncException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "fetchOps failed: unknown result")))
  method findAndAddContactsByEmail reqSeq emails = 
    self#send_findAndAddContactsByEmail reqSeq emails;
    self#recv_findAndAddContactsByEmail
  method private send_findAndAddContactsByEmail reqSeq emails = 
    oprot#writeMessageBegin ("findAndAddContactsByEmail", Protocol.CALL, seqid);
    let args = new findAndAddContactsByEmail_args in
      args#set_reqSeq reqSeq;
      args#set_emails emails;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findAndAddContactsByEmail  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findAndAddContactsByEmail_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findAndAddContactsByEmail failed: unknown result")))
  method findAndAddContactsByMid reqSeq mid type reference = 
    self#send_findAndAddContactsByMid reqSeq mid type reference;
    self#recv_findAndAddContactsByMid
  method private send_findAndAddContactsByMid reqSeq mid type reference = 
    oprot#writeMessageBegin ("findAndAddContactsByMid", Protocol.CALL, seqid);
    let args = new findAndAddContactsByMid_args in
      args#set_reqSeq reqSeq;
      args#set_mid mid;
      args#set_type type;
      args#set_reference reference;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findAndAddContactsByMid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findAndAddContactsByMid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findAndAddContactsByMid failed: unknown result")))
  method findGroupByTicketV2 ticketId = 
    self#send_findGroupByTicketV2 ticketId;
    self#recv_findGroupByTicketV2
  method private send_findGroupByTicketV2 ticketId = 
    oprot#writeMessageBegin ("findGroupByTicketV2", Protocol.CALL, seqid);
    let args = new findGroupByTicketV2_args in
      args#set_ticketId ticketId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findGroupByTicketV2  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findGroupByTicketV2_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findGroupByTicketV2 failed: unknown result")))
  method findAndAddContactsByPhone reqSeq phones = 
    self#send_findAndAddContactsByPhone reqSeq phones;
    self#recv_findAndAddContactsByPhone
  method private send_findAndAddContactsByPhone reqSeq phones = 
    oprot#writeMessageBegin ("findAndAddContactsByPhone", Protocol.CALL, seqid);
    let args = new findAndAddContactsByPhone_args in
      args#set_reqSeq reqSeq;
      args#set_phones phones;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findAndAddContactsByPhone  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findAndAddContactsByPhone_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findAndAddContactsByPhone failed: unknown result")))
  method getFriendRequests direction lastSeenSeqId = 
    self#send_getFriendRequests direction lastSeenSeqId;
    self#recv_getFriendRequests
  method private send_getFriendRequests direction lastSeenSeqId = 
    oprot#writeMessageBegin ("getFriendRequests", Protocol.CALL, seqid);
    let args = new getFriendRequests_args in
      args#set_direction direction;
      args#set_lastSeenSeqId lastSeenSeqId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getFriendRequests  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getFriendRequests_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getFriendRequests failed: unknown result")))
  method removeFriendRequest direction midOrEMid = 
    self#send_removeFriendRequest direction midOrEMid;
    self#recv_removeFriendRequest
  method private send_removeFriendRequest direction midOrEMid = 
    oprot#writeMessageBegin ("removeFriendRequest", Protocol.CALL, seqid);
    let args = new removeFriendRequest_args in
      args#set_direction direction;
      args#set_midOrEMid midOrEMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeFriendRequest  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeFriendRequest_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method findAndAddContactsByUserid reqSeq userid = 
    self#send_findAndAddContactsByUserid reqSeq userid;
    self#recv_findAndAddContactsByUserid
  method private send_findAndAddContactsByUserid reqSeq userid = 
    oprot#writeMessageBegin ("findAndAddContactsByUserid", Protocol.CALL, seqid);
    let args = new findAndAddContactsByUserid_args in
      args#set_reqSeq reqSeq;
      args#set_userid userid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findAndAddContactsByUserid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findAndAddContactsByUserid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findAndAddContactsByUserid failed: unknown result")))
  method findContactByUserid userid = 
    self#send_findContactByUserid userid;
    self#recv_findContactByUserid
  method private send_findContactByUserid userid = 
    oprot#writeMessageBegin ("findContactByUserid", Protocol.CALL, seqid);
    let args = new findContactByUserid_args in
      args#set_userid userid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findContactByUserid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findContactByUserid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findContactByUserid failed: unknown result")))
  method findContactByUserTicket ticketIdWithTag = 
    self#send_findContactByUserTicket ticketIdWithTag;
    self#recv_findContactByUserTicket
  method private send_findContactByUserTicket ticketIdWithTag = 
    oprot#writeMessageBegin ("findContactByUserTicket", Protocol.CALL, seqid);
    let args = new findContactByUserTicket_args in
      args#set_ticketIdWithTag ticketIdWithTag;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findContactByUserTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findContactByUserTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findContactByUserTicket failed: unknown result")))
  method findContactsByEmail emails = 
    self#send_findContactsByEmail emails;
    self#recv_findContactsByEmail
  method private send_findContactsByEmail emails = 
    oprot#writeMessageBegin ("findContactsByEmail", Protocol.CALL, seqid);
    let args = new findContactsByEmail_args in
      args#set_emails emails;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findContactsByEmail  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findContactsByEmail_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findContactsByEmail failed: unknown result")))
  method findContactsByPhone phones = 
    self#send_findContactsByPhone phones;
    self#recv_findContactsByPhone
  method private send_findContactsByPhone phones = 
    oprot#writeMessageBegin ("findContactsByPhone", Protocol.CALL, seqid);
    let args = new findContactsByPhone_args in
      args#set_phones phones;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findContactsByPhone  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findContactsByPhone_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findContactsByPhone failed: unknown result")))
  method findSnsIdUserStatus snsIdType snsAccessToken udidHash = 
    self#send_findSnsIdUserStatus snsIdType snsAccessToken udidHash;
    self#recv_findSnsIdUserStatus
  method private send_findSnsIdUserStatus snsIdType snsAccessToken udidHash = 
    oprot#writeMessageBegin ("findSnsIdUserStatus", Protocol.CALL, seqid);
    let args = new findSnsIdUserStatus_args in
      args#set_snsIdType snsIdType;
      args#set_snsAccessToken snsAccessToken;
      args#set_udidHash udidHash;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findSnsIdUserStatus  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findSnsIdUserStatus_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findSnsIdUserStatus failed: unknown result")))
  method finishUpdateVerification sessionId = 
    self#send_finishUpdateVerification sessionId;
    self#recv_finishUpdateVerification
  method private send_finishUpdateVerification sessionId = 
    oprot#writeMessageBegin ("finishUpdateVerification", Protocol.CALL, seqid);
    let args = new finishUpdateVerification_args in
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_finishUpdateVerification  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_finishUpdateVerification_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method generateUserTicket expirationTime maxUseCount = 
    self#send_generateUserTicket expirationTime maxUseCount;
    self#recv_generateUserTicket
  method private send_generateUserTicket expirationTime maxUseCount = 
    oprot#writeMessageBegin ("generateUserTicket", Protocol.CALL, seqid);
    let args = new generateUserTicket_args in
      args#set_expirationTime expirationTime;
      args#set_maxUseCount maxUseCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_generateUserTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_generateUserTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "generateUserTicket failed: unknown result")))
  method destroyMessage seq chatId messageId sessionId = 
    self#send_destroyMessage seq chatId messageId sessionId;
    self#recv_destroyMessage
  method private send_destroyMessage seq chatId messageId sessionId = 
    oprot#writeMessageBegin ("destroyMessage", Protocol.CALL, seqid);
    let args = new destroyMessage_args in
      args#set_seq seq;
      args#set_chatId chatId;
      args#set_messageId messageId;
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_destroyMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_destroyMessage_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method getAcceptedProximityMatches sessionId = 
    self#send_getAcceptedProximityMatches sessionId;
    self#recv_getAcceptedProximityMatches
  method private send_getAcceptedProximityMatches sessionId = 
    oprot#writeMessageBegin ("getAcceptedProximityMatches", Protocol.CALL, seqid);
    let args = new getAcceptedProximityMatches_args in
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getAcceptedProximityMatches  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getAcceptedProximityMatches_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getAcceptedProximityMatches failed: unknown result")))
  method getActiveBuddySubscriberIds  = 
    self#send_getActiveBuddySubscriberIds;
    self#recv_getActiveBuddySubscriberIds
  method private send_getActiveBuddySubscriberIds  = 
    oprot#writeMessageBegin ("getActiveBuddySubscriberIds", Protocol.CALL, seqid);
    let args = new getActiveBuddySubscriberIds_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getActiveBuddySubscriberIds  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getActiveBuddySubscriberIds_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getActiveBuddySubscriberIds failed: unknown result")))
  method getAllContactIds  = 
    self#send_getAllContactIds;
    self#recv_getAllContactIds
  method private send_getAllContactIds  = 
    oprot#writeMessageBegin ("getAllContactIds", Protocol.CALL, seqid);
    let args = new getAllContactIds_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getAllContactIds  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getAllContactIds_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getAllContactIds failed: unknown result")))
  method getAuthQrcode keepLoggedIn systemName = 
    self#send_getAuthQrcode keepLoggedIn systemName;
    self#recv_getAuthQrcode
  method private send_getAuthQrcode keepLoggedIn systemName = 
    oprot#writeMessageBegin ("getAuthQrcode", Protocol.CALL, seqid);
    let args = new getAuthQrcode_args in
      args#set_keepLoggedIn keepLoggedIn;
      args#set_systemName systemName;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getAuthQrcode  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getAuthQrcode_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getAuthQrcode failed: unknown result")))
  method getBlockedContactIds  = 
    self#send_getBlockedContactIds;
    self#recv_getBlockedContactIds
  method private send_getBlockedContactIds  = 
    oprot#writeMessageBegin ("getBlockedContactIds", Protocol.CALL, seqid);
    let args = new getBlockedContactIds_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBlockedContactIds  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBlockedContactIds_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBlockedContactIds failed: unknown result")))
  method registerWithPhoneNumber sessionId migrationPincodeSessionId = 
    self#send_registerWithPhoneNumber sessionId migrationPincodeSessionId;
    self#recv_registerWithPhoneNumber
  method private send_registerWithPhoneNumber sessionId migrationPincodeSessionId = 
    oprot#writeMessageBegin ("registerWithPhoneNumber", Protocol.CALL, seqid);
    let args = new registerWithPhoneNumber_args in
      args#set_sessionId sessionId;
      args#set_migrationPincodeSessionId migrationPincodeSessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerWithPhoneNumber  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerWithPhoneNumber_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerWithPhoneNumber failed: unknown result")))
  method registerWithPhoneNumberAndPassword sessionId keynm encrypted = 
    self#send_registerWithPhoneNumberAndPassword sessionId keynm encrypted;
    self#recv_registerWithPhoneNumberAndPassword
  method private send_registerWithPhoneNumberAndPassword sessionId keynm encrypted = 
    oprot#writeMessageBegin ("registerWithPhoneNumberAndPassword", Protocol.CALL, seqid);
    let args = new registerWithPhoneNumberAndPassword_args in
      args#set_sessionId sessionId;
      args#set_keynm keynm;
      args#set_encrypted encrypted;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerWithPhoneNumberAndPassword  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerWithPhoneNumberAndPassword_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerWithPhoneNumberAndPassword failed: unknown result")))
  method getAnalyticsInfo  = 
    self#send_getAnalyticsInfo;
    self#recv_getAnalyticsInfo
  method private send_getAnalyticsInfo  = 
    oprot#writeMessageBegin ("getAnalyticsInfo", Protocol.CALL, seqid);
    let args = new getAnalyticsInfo_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getAnalyticsInfo  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getAnalyticsInfo_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getAnalyticsInfo failed: unknown result")))
  method reportClientStatistics reqSeq category count = 
    self#send_reportClientStatistics reqSeq category count;
    self#recv_reportClientStatistics
  method private send_reportClientStatistics reqSeq category count = 
    oprot#writeMessageBegin ("reportClientStatistics", Protocol.CALL, seqid);
    let args = new reportClientStatistics_args in
      args#set_reqSeq reqSeq;
      args#set_category category;
      args#set_count count;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportClientStatistics  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportClientStatistics_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method verifyPhoneNumberForLogin verifierFromPhone pinCodeForPhone verifierFromLogin = 
    self#send_verifyPhoneNumberForLogin verifierFromPhone pinCodeForPhone verifierFromLogin;
    self#recv_verifyPhoneNumberForLogin
  method private send_verifyPhoneNumberForLogin verifierFromPhone pinCodeForPhone verifierFromLogin = 
    oprot#writeMessageBegin ("verifyPhoneNumberForLogin", Protocol.CALL, seqid);
    let args = new verifyPhoneNumberForLogin_args in
      args#set_verifierFromPhone verifierFromPhone;
      args#set_pinCodeForPhone pinCodeForPhone;
      args#set_verifierFromLogin verifierFromLogin;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_verifyPhoneNumberForLogin  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_verifyPhoneNumberForLogin_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "verifyPhoneNumberForLogin failed: unknown result")))
  method verifyPhoneNumber sessionId pinCode udidHash migrationPincodeSessionId oldUdidHash = 
    self#send_verifyPhoneNumber sessionId pinCode udidHash migrationPincodeSessionId oldUdidHash;
    self#recv_verifyPhoneNumber
  method private send_verifyPhoneNumber sessionId pinCode udidHash migrationPincodeSessionId oldUdidHash = 
    oprot#writeMessageBegin ("verifyPhoneNumber", Protocol.CALL, seqid);
    let args = new verifyPhoneNumber_args in
      args#set_sessionId sessionId;
      args#set_pinCode pinCode;
      args#set_udidHash udidHash;
      args#set_migrationPincodeSessionId migrationPincodeSessionId;
      args#set_oldUdidHash oldUdidHash;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_verifyPhoneNumber  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_verifyPhoneNumber_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "verifyPhoneNumber failed: unknown result")))
  method getBlockedContactIdsByRange start count = 
    self#send_getBlockedContactIdsByRange start count;
    self#recv_getBlockedContactIdsByRange
  method private send_getBlockedContactIdsByRange start count = 
    oprot#writeMessageBegin ("getBlockedContactIdsByRange", Protocol.CALL, seqid);
    let args = new getBlockedContactIdsByRange_args in
      args#set_start start;
      args#set_count count;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBlockedContactIdsByRange  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBlockedContactIdsByRange_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBlockedContactIdsByRange failed: unknown result")))
  method getBlockedRecommendationIds  = 
    self#send_getBlockedRecommendationIds;
    self#recv_getBlockedRecommendationIds
  method private send_getBlockedRecommendationIds  = 
    oprot#writeMessageBegin ("getBlockedRecommendationIds", Protocol.CALL, seqid);
    let args = new getBlockedRecommendationIds_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBlockedRecommendationIds  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBlockedRecommendationIds_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBlockedRecommendationIds failed: unknown result")))
  method getBuddyBlockerIds  = 
    self#send_getBuddyBlockerIds;
    self#recv_getBuddyBlockerIds
  method private send_getBuddyBlockerIds  = 
    oprot#writeMessageBegin ("getBuddyBlockerIds", Protocol.CALL, seqid);
    let args = new getBuddyBlockerIds_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBuddyBlockerIds  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBuddyBlockerIds_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBuddyBlockerIds failed: unknown result")))
  method getBuddyLocation mid index = 
    self#send_getBuddyLocation mid index;
    self#recv_getBuddyLocation
  method private send_getBuddyLocation mid index = 
    oprot#writeMessageBegin ("getBuddyLocation", Protocol.CALL, seqid);
    let args = new getBuddyLocation_args in
      args#set_mid mid;
      args#set_index index;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBuddyLocation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBuddyLocation_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBuddyLocation failed: unknown result")))
  method getCompactContactsModifiedSince timestamp = 
    self#send_getCompactContactsModifiedSince timestamp;
    self#recv_getCompactContactsModifiedSince
  method private send_getCompactContactsModifiedSince timestamp = 
    oprot#writeMessageBegin ("getCompactContactsModifiedSince", Protocol.CALL, seqid);
    let args = new getCompactContactsModifiedSince_args in
      args#set_timestamp timestamp;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCompactContactsModifiedSince  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCompactContactsModifiedSince_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCompactContactsModifiedSince failed: unknown result")))
  method getCompactGroup groupId = 
    self#send_getCompactGroup groupId;
    self#recv_getCompactGroup
  method private send_getCompactGroup groupId = 
    oprot#writeMessageBegin ("getCompactGroup", Protocol.CALL, seqid);
    let args = new getCompactGroup_args in
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCompactGroup  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCompactGroup_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCompactGroup failed: unknown result")))
  method getCompactRoom roomId = 
    self#send_getCompactRoom roomId;
    self#recv_getCompactRoom
  method private send_getCompactRoom roomId = 
    oprot#writeMessageBegin ("getCompactRoom", Protocol.CALL, seqid);
    let args = new getCompactRoom_args in
      args#set_roomId roomId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCompactRoom  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCompactRoom_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCompactRoom failed: unknown result")))
  method getContact id = 
    self#send_getContact id;
    self#recv_getContact
  method private send_getContact id = 
    oprot#writeMessageBegin ("getContact", Protocol.CALL, seqid);
    let args = new getContact_args in
      args#set_id id;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getContact  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getContact_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getContact failed: unknown result")))
  method getContacts ids = 
    self#send_getContacts ids;
    self#recv_getContacts
  method private send_getContacts ids = 
    oprot#writeMessageBegin ("getContacts", Protocol.CALL, seqid);
    let args = new getContacts_args in
      args#set_ids ids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getContacts failed: unknown result")))
  method getContactWithFriendRequestStatus id = 
    self#send_getContactWithFriendRequestStatus id;
    self#recv_getContactWithFriendRequestStatus
  method private send_getContactWithFriendRequestStatus id = 
    oprot#writeMessageBegin ("getContactWithFriendRequestStatus", Protocol.CALL, seqid);
    let args = new getContactWithFriendRequestStatus_args in
      args#set_id id;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getContactWithFriendRequestStatus  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getContactWithFriendRequestStatus_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getContactWithFriendRequestStatus failed: unknown result")))
  method getCountryWithRequestIp  = 
    self#send_getCountryWithRequestIp;
    self#recv_getCountryWithRequestIp
  method private send_getCountryWithRequestIp  = 
    oprot#writeMessageBegin ("getCountryWithRequestIp", Protocol.CALL, seqid);
    let args = new getCountryWithRequestIp_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCountryWithRequestIp  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCountryWithRequestIp_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCountryWithRequestIp failed: unknown result")))
  method getFavoriteMids  = 
    self#send_getFavoriteMids;
    self#recv_getFavoriteMids
  method private send_getFavoriteMids  = 
    oprot#writeMessageBegin ("getFavoriteMids", Protocol.CALL, seqid);
    let args = new getFavoriteMids_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getFavoriteMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getFavoriteMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getFavoriteMids failed: unknown result")))
  method getGroup groupId = 
    self#send_getGroup groupId;
    self#recv_getGroup
  method private send_getGroup groupId = 
    oprot#writeMessageBegin ("getGroup", Protocol.CALL, seqid);
    let args = new getGroup_args in
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroup  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroup_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroup failed: unknown result")))
  method getGroupIdsInvited  = 
    self#send_getGroupIdsInvited;
    self#recv_getGroupIdsInvited
  method private send_getGroupIdsInvited  = 
    oprot#writeMessageBegin ("getGroupIdsInvited", Protocol.CALL, seqid);
    let args = new getGroupIdsInvited_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupIdsInvited  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupIdsInvited_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupIdsInvited failed: unknown result")))
  method getGroupIdsJoined  = 
    self#send_getGroupIdsJoined;
    self#recv_getGroupIdsJoined
  method private send_getGroupIdsJoined  = 
    oprot#writeMessageBegin ("getGroupIdsJoined", Protocol.CALL, seqid);
    let args = new getGroupIdsJoined_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupIdsJoined  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupIdsJoined_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupIdsJoined failed: unknown result")))
  method getGroups groupIds = 
    self#send_getGroups groupIds;
    self#recv_getGroups
  method private send_getGroups groupIds = 
    oprot#writeMessageBegin ("getGroups", Protocol.CALL, seqid);
    let args = new getGroups_args in
      args#set_groupIds groupIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroups  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroups_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroups failed: unknown result")))
  method getHiddenContactMids  = 
    self#send_getHiddenContactMids;
    self#recv_getHiddenContactMids
  method private send_getHiddenContactMids  = 
    oprot#writeMessageBegin ("getHiddenContactMids", Protocol.CALL, seqid);
    let args = new getHiddenContactMids_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getHiddenContactMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getHiddenContactMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getHiddenContactMids failed: unknown result")))
  method getIdentityIdentifier  = 
    self#send_getIdentityIdentifier;
    self#recv_getIdentityIdentifier
  method private send_getIdentityIdentifier  = 
    oprot#writeMessageBegin ("getIdentityIdentifier", Protocol.CALL, seqid);
    let args = new getIdentityIdentifier_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getIdentityIdentifier  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getIdentityIdentifier_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getIdentityIdentifier failed: unknown result")))
  method getLastAnnouncementIndex  = 
    self#send_getLastAnnouncementIndex;
    self#recv_getLastAnnouncementIndex
  method private send_getLastAnnouncementIndex  = 
    oprot#writeMessageBegin ("getLastAnnouncementIndex", Protocol.CALL, seqid);
    let args = new getLastAnnouncementIndex_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getLastAnnouncementIndex  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getLastAnnouncementIndex_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getLastAnnouncementIndex failed: unknown result")))
  method getLastOpRevision  = 
    self#send_getLastOpRevision;
    self#recv_getLastOpRevision
  method private send_getLastOpRevision  = 
    oprot#writeMessageBegin ("getLastOpRevision", Protocol.CALL, seqid);
    let args = new getLastOpRevision_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getLastOpRevision  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getLastOpRevision_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getLastOpRevision failed: unknown result")))
  method getSuggestRevisions  = 
    self#send_getSuggestRevisions;
    self#recv_getSuggestRevisions
  method private send_getSuggestRevisions  = 
    oprot#writeMessageBegin ("getSuggestRevisions", Protocol.CALL, seqid);
    let args = new getSuggestRevisions_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSuggestRevisions  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSuggestRevisions_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSuggestRevisions failed: unknown result")))
  method getPreviousMessagesV2WithReadCount messageBoxId endMessageId messagesCount = 
    self#send_getPreviousMessagesV2WithReadCount messageBoxId endMessageId messagesCount;
    self#recv_getPreviousMessagesV2WithReadCount
  method private send_getPreviousMessagesV2WithReadCount messageBoxId endMessageId messagesCount = 
    oprot#writeMessageBegin ("getPreviousMessagesV2WithReadCount", Protocol.CALL, seqid);
    let args = new getPreviousMessagesV2WithReadCount_args in
      args#set_messageBoxId messageBoxId;
      args#set_endMessageId endMessageId;
      args#set_messagesCount messagesCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPreviousMessagesV2WithReadCount  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPreviousMessagesV2WithReadCount_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPreviousMessagesV2WithReadCount failed: unknown result")))
  method getMessageBox channelId messageBoxId lastMessagesCount = 
    self#send_getMessageBox channelId messageBoxId lastMessagesCount;
    self#recv_getMessageBox
  method private send_getMessageBox channelId messageBoxId lastMessagesCount = 
    oprot#writeMessageBegin ("getMessageBox", Protocol.CALL, seqid);
    let args = new getMessageBox_args in
      args#set_channelId channelId;
      args#set_messageBoxId messageBoxId;
      args#set_lastMessagesCount lastMessagesCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessageBox  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessageBox_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessageBox failed: unknown result")))
  method getMessageBoxCompactWrapUp mid = 
    self#send_getMessageBoxCompactWrapUp mid;
    self#recv_getMessageBoxCompactWrapUp
  method private send_getMessageBoxCompactWrapUp mid = 
    oprot#writeMessageBegin ("getMessageBoxCompactWrapUp", Protocol.CALL, seqid);
    let args = new getMessageBoxCompactWrapUp_args in
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessageBoxCompactWrapUp  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessageBoxCompactWrapUp_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessageBoxCompactWrapUp failed: unknown result")))
  method getMessageBoxCompactWrapUpList start messageBoxCount = 
    self#send_getMessageBoxCompactWrapUpList start messageBoxCount;
    self#recv_getMessageBoxCompactWrapUpList
  method private send_getMessageBoxCompactWrapUpList start messageBoxCount = 
    oprot#writeMessageBegin ("getMessageBoxCompactWrapUpList", Protocol.CALL, seqid);
    let args = new getMessageBoxCompactWrapUpList_args in
      args#set_start start;
      args#set_messageBoxCount messageBoxCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessageBoxCompactWrapUpList  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessageBoxCompactWrapUpList_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessageBoxCompactWrapUpList failed: unknown result")))
  method getMessageBoxList channelId lastMessagesCount = 
    self#send_getMessageBoxList channelId lastMessagesCount;
    self#recv_getMessageBoxList
  method private send_getMessageBoxList channelId lastMessagesCount = 
    oprot#writeMessageBegin ("getMessageBoxList", Protocol.CALL, seqid);
    let args = new getMessageBoxList_args in
      args#set_channelId channelId;
      args#set_lastMessagesCount lastMessagesCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessageBoxList  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessageBoxList_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessageBoxList failed: unknown result")))
  method getMessageBoxListByStatus channelId lastMessagesCount status = 
    self#send_getMessageBoxListByStatus channelId lastMessagesCount status;
    self#recv_getMessageBoxListByStatus
  method private send_getMessageBoxListByStatus channelId lastMessagesCount status = 
    oprot#writeMessageBegin ("getMessageBoxListByStatus", Protocol.CALL, seqid);
    let args = new getMessageBoxListByStatus_args in
      args#set_channelId channelId;
      args#set_lastMessagesCount lastMessagesCount;
      args#set_status status;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessageBoxListByStatus  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessageBoxListByStatus_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessageBoxListByStatus failed: unknown result")))
  method getMessageBoxWrapUp mid = 
    self#send_getMessageBoxWrapUp mid;
    self#recv_getMessageBoxWrapUp
  method private send_getMessageBoxWrapUp mid = 
    oprot#writeMessageBegin ("getMessageBoxWrapUp", Protocol.CALL, seqid);
    let args = new getMessageBoxWrapUp_args in
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessageBoxWrapUp  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessageBoxWrapUp_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessageBoxWrapUp failed: unknown result")))
  method getMessageBoxWrapUpList start messageBoxCount = 
    self#send_getMessageBoxWrapUpList start messageBoxCount;
    self#recv_getMessageBoxWrapUpList
  method private send_getMessageBoxWrapUpList start messageBoxCount = 
    oprot#writeMessageBegin ("getMessageBoxWrapUpList", Protocol.CALL, seqid);
    let args = new getMessageBoxWrapUpList_args in
      args#set_start start;
      args#set_messageBoxCount messageBoxCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessageBoxWrapUpList  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessageBoxWrapUpList_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessageBoxWrapUpList failed: unknown result")))
  method getMessagesBySequenceNumber channelId messageBoxId startSeq endSeq = 
    self#send_getMessagesBySequenceNumber channelId messageBoxId startSeq endSeq;
    self#recv_getMessagesBySequenceNumber
  method private send_getMessagesBySequenceNumber channelId messageBoxId startSeq endSeq = 
    oprot#writeMessageBegin ("getMessagesBySequenceNumber", Protocol.CALL, seqid);
    let args = new getMessagesBySequenceNumber_args in
      args#set_channelId channelId;
      args#set_messageBoxId messageBoxId;
      args#set_startSeq startSeq;
      args#set_endSeq endSeq;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessagesBySequenceNumber  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessagesBySequenceNumber_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessagesBySequenceNumber failed: unknown result")))
  method getNextMessages messageBoxId startSeq messagesCount = 
    self#send_getNextMessages messageBoxId startSeq messagesCount;
    self#recv_getNextMessages
  method private send_getNextMessages messageBoxId startSeq messagesCount = 
    oprot#writeMessageBegin ("getNextMessages", Protocol.CALL, seqid);
    let args = new getNextMessages_args in
      args#set_messageBoxId messageBoxId;
      args#set_startSeq startSeq;
      args#set_messagesCount messagesCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getNextMessages  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getNextMessages_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getNextMessages failed: unknown result")))
  method getNotificationPolicy carrier = 
    self#send_getNotificationPolicy carrier;
    self#recv_getNotificationPolicy
  method private send_getNotificationPolicy carrier = 
    oprot#writeMessageBegin ("getNotificationPolicy", Protocol.CALL, seqid);
    let args = new getNotificationPolicy_args in
      args#set_carrier carrier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getNotificationPolicy  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getNotificationPolicy_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getNotificationPolicy failed: unknown result")))
  method getPreviousMessages messageBoxId endSeq messagesCount = 
    self#send_getPreviousMessages messageBoxId endSeq messagesCount;
    self#recv_getPreviousMessages
  method private send_getPreviousMessages messageBoxId endSeq messagesCount = 
    oprot#writeMessageBegin ("getPreviousMessages", Protocol.CALL, seqid);
    let args = new getPreviousMessages_args in
      args#set_messageBoxId messageBoxId;
      args#set_endSeq endSeq;
      args#set_messagesCount messagesCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPreviousMessages  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPreviousMessages_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPreviousMessages failed: unknown result")))
  method getProfile  = 
    self#send_getProfile;
    self#recv_getProfile
  method private send_getProfile  = 
    oprot#writeMessageBegin ("getProfile", Protocol.CALL, seqid);
    let args = new getProfile_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProfile  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProfile_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProfile failed: unknown result")))
  method getProximityMatchCandidateList sessionId = 
    self#send_getProximityMatchCandidateList sessionId;
    self#recv_getProximityMatchCandidateList
  method private send_getProximityMatchCandidateList sessionId = 
    oprot#writeMessageBegin ("getProximityMatchCandidateList", Protocol.CALL, seqid);
    let args = new getProximityMatchCandidateList_args in
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProximityMatchCandidateList  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProximityMatchCandidateList_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProximityMatchCandidateList failed: unknown result")))
  method getProximityMatchCandidates sessionId = 
    self#send_getProximityMatchCandidates sessionId;
    self#recv_getProximityMatchCandidates
  method private send_getProximityMatchCandidates sessionId = 
    oprot#writeMessageBegin ("getProximityMatchCandidates", Protocol.CALL, seqid);
    let args = new getProximityMatchCandidates_args in
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProximityMatchCandidates  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProximityMatchCandidates_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProximityMatchCandidates failed: unknown result")))
  method getRecentMessages messageBoxId messagesCount = 
    self#send_getRecentMessages messageBoxId messagesCount;
    self#recv_getRecentMessages
  method private send_getRecentMessages messageBoxId messagesCount = 
    oprot#writeMessageBegin ("getRecentMessages", Protocol.CALL, seqid);
    let args = new getRecentMessages_args in
      args#set_messageBoxId messageBoxId;
      args#set_messagesCount messagesCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getRecentMessages  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getRecentMessages_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getRecentMessages failed: unknown result")))
  method getRecommendationIds  = 
    self#send_getRecommendationIds;
    self#recv_getRecommendationIds
  method private send_getRecommendationIds  = 
    oprot#writeMessageBegin ("getRecommendationIds", Protocol.CALL, seqid);
    let args = new getRecommendationIds_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getRecommendationIds  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getRecommendationIds_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getRecommendationIds failed: unknown result")))
  method getRoom roomId = 
    self#send_getRoom roomId;
    self#recv_getRoom
  method private send_getRoom roomId = 
    oprot#writeMessageBegin ("getRoom", Protocol.CALL, seqid);
    let args = new getRoom_args in
      args#set_roomId roomId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getRoom  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getRoom_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getRoom failed: unknown result")))
  method getRSAKeyInfo provider = 
    self#send_getRSAKeyInfo provider;
    self#recv_getRSAKeyInfo
  method private send_getRSAKeyInfo provider = 
    oprot#writeMessageBegin ("getRSAKeyInfo", Protocol.CALL, seqid);
    let args = new getRSAKeyInfo_args in
      args#set_provider provider;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getRSAKeyInfo  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getRSAKeyInfo_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getRSAKeyInfo failed: unknown result")))
  method getServerTime  = 
    self#send_getServerTime;
    self#recv_getServerTime
  method private send_getServerTime  = 
    oprot#writeMessageBegin ("getServerTime", Protocol.CALL, seqid);
    let args = new getServerTime_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getServerTime  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getServerTime_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getServerTime failed: unknown result")))
  method getSessions  = 
    self#send_getSessions;
    self#recv_getSessions
  method private send_getSessions  = 
    oprot#writeMessageBegin ("getSessions", Protocol.CALL, seqid);
    let args = new getSessions_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSessions  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSessions_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSessions failed: unknown result")))
  method getSettings  = 
    self#send_getSettings;
    self#recv_getSettings
  method private send_getSettings  = 
    oprot#writeMessageBegin ("getSettings", Protocol.CALL, seqid);
    let args = new getSettings_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSettings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSettings_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSettings failed: unknown result")))
  method getGroupsV2 groupIds = 
    self#send_getGroupsV2 groupIds;
    self#recv_getGroupsV2
  method private send_getGroupsV2 groupIds = 
    oprot#writeMessageBegin ("getGroupsV2", Protocol.CALL, seqid);
    let args = new getGroupsV2_args in
      args#set_groupIds groupIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupsV2  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupsV2_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupsV2 failed: unknown result")))
  method getSettingsAttributes attrBitset = 
    self#send_getSettingsAttributes attrBitset;
    self#recv_getSettingsAttributes
  method private send_getSettingsAttributes attrBitset = 
    oprot#writeMessageBegin ("getSettingsAttributes", Protocol.CALL, seqid);
    let args = new getSettingsAttributes_args in
      args#set_attrBitset attrBitset;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSettingsAttributes  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSettingsAttributes_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSettingsAttributes failed: unknown result")))
  method getSystemConfiguration  = 
    self#send_getSystemConfiguration;
    self#recv_getSystemConfiguration
  method private send_getSystemConfiguration  = 
    oprot#writeMessageBegin ("getSystemConfiguration", Protocol.CALL, seqid);
    let args = new getSystemConfiguration_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSystemConfiguration  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSystemConfiguration_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSystemConfiguration failed: unknown result")))
  method getUserTicket  = 
    self#send_getUserTicket;
    self#recv_getUserTicket
  method private send_getUserTicket  = 
    oprot#writeMessageBegin ("getUserTicket", Protocol.CALL, seqid);
    let args = new getUserTicket_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserTicket failed: unknown result")))
  method getWapInvitation invitationHash = 
    self#send_getWapInvitation invitationHash;
    self#recv_getWapInvitation
  method private send_getWapInvitation invitationHash = 
    oprot#writeMessageBegin ("getWapInvitation", Protocol.CALL, seqid);
    let args = new getWapInvitation_args in
      args#set_invitationHash invitationHash;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getWapInvitation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getWapInvitation_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getWapInvitation failed: unknown result")))
  method invalidateUserTicket  = 
    self#send_invalidateUserTicket;
    self#recv_invalidateUserTicket
  method private send_invalidateUserTicket  = 
    oprot#writeMessageBegin ("invalidateUserTicket", Protocol.CALL, seqid);
    let args = new invalidateUserTicket_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_invalidateUserTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_invalidateUserTicket_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method inviteFriendsBySms phoneNumberList = 
    self#send_inviteFriendsBySms phoneNumberList;
    self#recv_inviteFriendsBySms
  method private send_inviteFriendsBySms phoneNumberList = 
    oprot#writeMessageBegin ("inviteFriendsBySms", Protocol.CALL, seqid);
    let args = new inviteFriendsBySms_args in
      args#set_phoneNumberList phoneNumberList;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_inviteFriendsBySms  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_inviteFriendsBySms_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method inviteIntoGroup reqSeq groupId contactIds = 
    self#send_inviteIntoGroup reqSeq groupId contactIds;
    self#recv_inviteIntoGroup
  method private send_inviteIntoGroup reqSeq groupId contactIds = 
    oprot#writeMessageBegin ("inviteIntoGroup", Protocol.CALL, seqid);
    let args = new inviteIntoGroup_args in
      args#set_reqSeq reqSeq;
      args#set_groupId groupId;
      args#set_contactIds contactIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_inviteIntoGroup  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_inviteIntoGroup_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method inviteIntoRoom reqSeq roomId contactIds = 
    self#send_inviteIntoRoom reqSeq roomId contactIds;
    self#recv_inviteIntoRoom
  method private send_inviteIntoRoom reqSeq roomId contactIds = 
    oprot#writeMessageBegin ("inviteIntoRoom", Protocol.CALL, seqid);
    let args = new inviteIntoRoom_args in
      args#set_reqSeq reqSeq;
      args#set_roomId roomId;
      args#set_contactIds contactIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_inviteIntoRoom  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_inviteIntoRoom_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method inviteViaEmail reqSeq email name = 
    self#send_inviteViaEmail reqSeq email name;
    self#recv_inviteViaEmail
  method private send_inviteViaEmail reqSeq email name = 
    oprot#writeMessageBegin ("inviteViaEmail", Protocol.CALL, seqid);
    let args = new inviteViaEmail_args in
      args#set_reqSeq reqSeq;
      args#set_email email;
      args#set_name name;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_inviteViaEmail  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_inviteViaEmail_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method isIdentityIdentifierAvailable provider identifier = 
    self#send_isIdentityIdentifierAvailable provider identifier;
    self#recv_isIdentityIdentifierAvailable
  method private send_isIdentityIdentifierAvailable provider identifier = 
    oprot#writeMessageBegin ("isIdentityIdentifierAvailable", Protocol.CALL, seqid);
    let args = new isIdentityIdentifierAvailable_args in
      args#set_provider provider;
      args#set_identifier identifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_isIdentityIdentifierAvailable  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_isIdentityIdentifierAvailable_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "isIdentityIdentifierAvailable failed: unknown result")))
  method isUseridAvailable userid = 
    self#send_isUseridAvailable userid;
    self#recv_isUseridAvailable
  method private send_isUseridAvailable userid = 
    oprot#writeMessageBegin ("isUseridAvailable", Protocol.CALL, seqid);
    let args = new isUseridAvailable_args in
      args#set_userid userid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_isUseridAvailable  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_isUseridAvailable_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "isUseridAvailable failed: unknown result")))
  method kickoutFromGroup reqSeq groupId contactIds = 
    self#send_kickoutFromGroup reqSeq groupId contactIds;
    self#recv_kickoutFromGroup
  method private send_kickoutFromGroup reqSeq groupId contactIds = 
    oprot#writeMessageBegin ("kickoutFromGroup", Protocol.CALL, seqid);
    let args = new kickoutFromGroup_args in
      args#set_reqSeq reqSeq;
      args#set_groupId groupId;
      args#set_contactIds contactIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_kickoutFromGroup  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_kickoutFromGroup_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method reissueGroupTicket groupMid = 
    self#send_reissueGroupTicket groupMid;
    self#recv_reissueGroupTicket
  method private send_reissueGroupTicket groupMid = 
    oprot#writeMessageBegin ("reissueGroupTicket", Protocol.CALL, seqid);
    let args = new reissueGroupTicket_args in
      args#set_groupMid groupMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reissueGroupTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reissueGroupTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reissueGroupTicket failed: unknown result")))
  method findGroupByTicket ticketId = 
    self#send_findGroupByTicket ticketId;
    self#recv_findGroupByTicket
  method private send_findGroupByTicket ticketId = 
    oprot#writeMessageBegin ("findGroupByTicket", Protocol.CALL, seqid);
    let args = new findGroupByTicket_args in
      args#set_ticketId ticketId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findGroupByTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findGroupByTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findGroupByTicket failed: unknown result")))
  method leaveGroup reqSeq groupId = 
    self#send_leaveGroup reqSeq groupId;
    self#recv_leaveGroup
  method private send_leaveGroup reqSeq groupId = 
    oprot#writeMessageBegin ("leaveGroup", Protocol.CALL, seqid);
    let args = new leaveGroup_args in
      args#set_reqSeq reqSeq;
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_leaveGroup  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_leaveGroup_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method leaveRoom reqSeq roomId = 
    self#send_leaveRoom reqSeq roomId;
    self#recv_leaveRoom
  method private send_leaveRoom reqSeq roomId = 
    oprot#writeMessageBegin ("leaveRoom", Protocol.CALL, seqid);
    let args = new leaveRoom_args in
      args#set_reqSeq reqSeq;
      args#set_roomId roomId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_leaveRoom  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_leaveRoom_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method loginWithIdentityCredential identityProvider identifier password keepLoggedIn accessLocation systemName certificate = 
    self#send_loginWithIdentityCredential identityProvider identifier password keepLoggedIn accessLocation systemName certificate;
    self#recv_loginWithIdentityCredential
  method private send_loginWithIdentityCredential identityProvider identifier password keepLoggedIn accessLocation systemName certificate = 
    oprot#writeMessageBegin ("loginWithIdentityCredential", Protocol.CALL, seqid);
    let args = new loginWithIdentityCredential_args in
      args#set_identityProvider identityProvider;
      args#set_identifier identifier;
      args#set_password password;
      args#set_keepLoggedIn keepLoggedIn;
      args#set_accessLocation accessLocation;
      args#set_systemName systemName;
      args#set_certificate certificate;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_loginWithIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_loginWithIdentityCredential_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "loginWithIdentityCredential failed: unknown result")))
  method loginWithIdentityCredentialForCertificate identityProvider identifier password keepLoggedIn accessLocation systemName certificate = 
    self#send_loginWithIdentityCredentialForCertificate identityProvider identifier password keepLoggedIn accessLocation systemName certificate;
    self#recv_loginWithIdentityCredentialForCertificate
  method private send_loginWithIdentityCredentialForCertificate identityProvider identifier password keepLoggedIn accessLocation systemName certificate = 
    oprot#writeMessageBegin ("loginWithIdentityCredentialForCertificate", Protocol.CALL, seqid);
    let args = new loginWithIdentityCredentialForCertificate_args in
      args#set_identityProvider identityProvider;
      args#set_identifier identifier;
      args#set_password password;
      args#set_keepLoggedIn keepLoggedIn;
      args#set_accessLocation accessLocation;
      args#set_systemName systemName;
      args#set_certificate certificate;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_loginWithIdentityCredentialForCertificate  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_loginWithIdentityCredentialForCertificate_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "loginWithIdentityCredentialForCertificate failed: unknown result")))
  method loginWithVerifier verifier = 
    self#send_loginWithVerifier verifier;
    self#recv_loginWithVerifier
  method private send_loginWithVerifier verifier = 
    oprot#writeMessageBegin ("loginWithVerifier", Protocol.CALL, seqid);
    let args = new loginWithVerifier_args in
      args#set_verifier verifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_loginWithVerifier  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_loginWithVerifier_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "loginWithVerifier failed: unknown result")))
  method loginWithVerifierForCerificate verifier = 
    self#send_loginWithVerifierForCerificate verifier;
    self#recv_loginWithVerifierForCerificate
  method private send_loginWithVerifierForCerificate verifier = 
    oprot#writeMessageBegin ("loginWithVerifierForCerificate", Protocol.CALL, seqid);
    let args = new loginWithVerifierForCerificate_args in
      args#set_verifier verifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_loginWithVerifierForCerificate  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_loginWithVerifierForCerificate_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "loginWithVerifierForCerificate failed: unknown result")))
  method loginWithVerifierForCertificate verifier = 
    self#send_loginWithVerifierForCertificate verifier;
    self#recv_loginWithVerifierForCertificate
  method private send_loginWithVerifierForCertificate verifier = 
    oprot#writeMessageBegin ("loginWithVerifierForCertificate", Protocol.CALL, seqid);
    let args = new loginWithVerifierForCertificate_args in
      args#set_verifier verifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_loginWithVerifierForCertificate  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_loginWithVerifierForCertificate_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "loginWithVerifierForCertificate failed: unknown result")))
  method logout  = 
    self#send_logout;
    self#recv_logout
  method private send_logout  = 
    oprot#writeMessageBegin ("logout", Protocol.CALL, seqid);
    let args = new logout_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_logout  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_logout_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method logoutSession tokenKey = 
    self#send_logoutSession tokenKey;
    self#recv_logoutSession
  method private send_logoutSession tokenKey = 
    oprot#writeMessageBegin ("logoutSession", Protocol.CALL, seqid);
    let args = new logoutSession_args in
      args#set_tokenKey tokenKey;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_logoutSession  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_logoutSession_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method noop  = 
    self#send_noop;
    self#recv_noop
  method private send_noop  = 
    oprot#writeMessageBegin ("noop", Protocol.CALL, seqid);
    let args = new noop_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_noop  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_noop_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method notifiedRedirect paramMap = 
    self#send_notifiedRedirect paramMap;
    self#recv_notifiedRedirect
  method private send_notifiedRedirect paramMap = 
    oprot#writeMessageBegin ("notifiedRedirect", Protocol.CALL, seqid);
    let args = new notifiedRedirect_args in
      args#set_paramMap paramMap;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifiedRedirect  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifiedRedirect_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method notifyBuddyOnAir seq receiverMids = 
    self#send_notifyBuddyOnAir seq receiverMids;
    self#recv_notifyBuddyOnAir
  method private send_notifyBuddyOnAir seq receiverMids = 
    oprot#writeMessageBegin ("notifyBuddyOnAir", Protocol.CALL, seqid);
    let args = new notifyBuddyOnAir_args in
      args#set_seq seq;
      args#set_receiverMids receiverMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyBuddyOnAir  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyBuddyOnAir_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "notifyBuddyOnAir failed: unknown result")))
  method notifyIndividualEvent notificationStatus receiverMids = 
    self#send_notifyIndividualEvent notificationStatus receiverMids;
    self#recv_notifyIndividualEvent
  method private send_notifyIndividualEvent notificationStatus receiverMids = 
    oprot#writeMessageBegin ("notifyIndividualEvent", Protocol.CALL, seqid);
    let args = new notifyIndividualEvent_args in
      args#set_notificationStatus notificationStatus;
      args#set_receiverMids receiverMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyIndividualEvent  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyIndividualEvent_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method notifyInstalled udidHash applicationTypeWithExtensions = 
    self#send_notifyInstalled udidHash applicationTypeWithExtensions;
    self#recv_notifyInstalled
  method private send_notifyInstalled udidHash applicationTypeWithExtensions = 
    oprot#writeMessageBegin ("notifyInstalled", Protocol.CALL, seqid);
    let args = new notifyInstalled_args in
      args#set_udidHash udidHash;
      args#set_applicationTypeWithExtensions applicationTypeWithExtensions;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyInstalled  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyInstalled_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method notifyRegistrationComplete udidHash applicationTypeWithExtensions = 
    self#send_notifyRegistrationComplete udidHash applicationTypeWithExtensions;
    self#recv_notifyRegistrationComplete
  method private send_notifyRegistrationComplete udidHash applicationTypeWithExtensions = 
    oprot#writeMessageBegin ("notifyRegistrationComplete", Protocol.CALL, seqid);
    let args = new notifyRegistrationComplete_args in
      args#set_udidHash udidHash;
      args#set_applicationTypeWithExtensions applicationTypeWithExtensions;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyRegistrationComplete  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyRegistrationComplete_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method notifySleep lastRev badge = 
    self#send_notifySleep lastRev badge;
    self#recv_notifySleep
  method private send_notifySleep lastRev badge = 
    oprot#writeMessageBegin ("notifySleep", Protocol.CALL, seqid);
    let args = new notifySleep_args in
      args#set_lastRev lastRev;
      args#set_badge badge;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifySleep  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifySleep_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method notifyUpdated lastRev deviceInfo = 
    self#send_notifyUpdated lastRev deviceInfo;
    self#recv_notifyUpdated
  method private send_notifyUpdated lastRev deviceInfo = 
    oprot#writeMessageBegin ("notifyUpdated", Protocol.CALL, seqid);
    let args = new notifyUpdated_args in
      args#set_lastRev lastRev;
      args#set_deviceInfo deviceInfo;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyUpdated  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyUpdated_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method openProximityMatch location = 
    self#send_openProximityMatch location;
    self#recv_openProximityMatch
  method private send_openProximityMatch location = 
    oprot#writeMessageBegin ("openProximityMatch", Protocol.CALL, seqid);
    let args = new openProximityMatch_args in
      args#set_location location;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_openProximityMatch  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_openProximityMatch_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "openProximityMatch failed: unknown result")))
  method registerBuddyUser buddyId registrarPassword = 
    self#send_registerBuddyUser buddyId registrarPassword;
    self#recv_registerBuddyUser
  method private send_registerBuddyUser buddyId registrarPassword = 
    oprot#writeMessageBegin ("registerBuddyUser", Protocol.CALL, seqid);
    let args = new registerBuddyUser_args in
      args#set_buddyId buddyId;
      args#set_registrarPassword registrarPassword;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerBuddyUser  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerBuddyUser_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerBuddyUser failed: unknown result")))
  method registerBuddyUserid seq userid = 
    self#send_registerBuddyUserid seq userid;
    self#recv_registerBuddyUserid
  method private send_registerBuddyUserid seq userid = 
    oprot#writeMessageBegin ("registerBuddyUserid", Protocol.CALL, seqid);
    let args = new registerBuddyUserid_args in
      args#set_seq seq;
      args#set_userid userid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerBuddyUserid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerBuddyUserid_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method registerDevice sessionId = 
    self#send_registerDevice sessionId;
    self#recv_registerDevice
  method private send_registerDevice sessionId = 
    oprot#writeMessageBegin ("registerDevice", Protocol.CALL, seqid);
    let args = new registerDevice_args in
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerDevice  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerDevice_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerDevice failed: unknown result")))
  method registerDeviceWithIdentityCredential sessionId provider identifier verifier = 
    self#send_registerDeviceWithIdentityCredential sessionId provider identifier verifier;
    self#recv_registerDeviceWithIdentityCredential
  method private send_registerDeviceWithIdentityCredential sessionId provider identifier verifier = 
    oprot#writeMessageBegin ("registerDeviceWithIdentityCredential", Protocol.CALL, seqid);
    let args = new registerDeviceWithIdentityCredential_args in
      args#set_sessionId sessionId;
      args#set_provider provider;
      args#set_identifier identifier;
      args#set_verifier verifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerDeviceWithIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerDeviceWithIdentityCredential_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerDeviceWithIdentityCredential failed: unknown result")))
  method registerDeviceWithoutPhoneNumber region udidHash deviceInfo = 
    self#send_registerDeviceWithoutPhoneNumber region udidHash deviceInfo;
    self#recv_registerDeviceWithoutPhoneNumber
  method private send_registerDeviceWithoutPhoneNumber region udidHash deviceInfo = 
    oprot#writeMessageBegin ("registerDeviceWithoutPhoneNumber", Protocol.CALL, seqid);
    let args = new registerDeviceWithoutPhoneNumber_args in
      args#set_region region;
      args#set_udidHash udidHash;
      args#set_deviceInfo deviceInfo;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerDeviceWithoutPhoneNumber  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerDeviceWithoutPhoneNumber_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerDeviceWithoutPhoneNumber failed: unknown result")))
  method registerDeviceWithoutPhoneNumberWithIdentityCredential region udidHash deviceInfo provider identifier verifier mid migrationPincodeSessionId = 
    self#send_registerDeviceWithoutPhoneNumberWithIdentityCredential region udidHash deviceInfo provider identifier verifier mid migrationPincodeSessionId;
    self#recv_registerDeviceWithoutPhoneNumberWithIdentityCredential
  method private send_registerDeviceWithoutPhoneNumberWithIdentityCredential region udidHash deviceInfo provider identifier verifier mid migrationPincodeSessionId = 
    oprot#writeMessageBegin ("registerDeviceWithoutPhoneNumberWithIdentityCredential", Protocol.CALL, seqid);
    let args = new registerDeviceWithoutPhoneNumberWithIdentityCredential_args in
      args#set_region region;
      args#set_udidHash udidHash;
      args#set_deviceInfo deviceInfo;
      args#set_provider provider;
      args#set_identifier identifier;
      args#set_verifier verifier;
      args#set_mid mid;
      args#set_migrationPincodeSessionId migrationPincodeSessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerDeviceWithoutPhoneNumberWithIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerDeviceWithoutPhoneNumberWithIdentityCredential_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerDeviceWithoutPhoneNumberWithIdentityCredential failed: unknown result")))
  method registerUserid reqSeq userid = 
    self#send_registerUserid reqSeq userid;
    self#recv_registerUserid
  method private send_registerUserid reqSeq userid = 
    oprot#writeMessageBegin ("registerUserid", Protocol.CALL, seqid);
    let args = new registerUserid_args in
      args#set_reqSeq reqSeq;
      args#set_userid userid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerUserid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerUserid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerUserid failed: unknown result")))
  method registerWapDevice invitationHash guidHash email deviceInfo = 
    self#send_registerWapDevice invitationHash guidHash email deviceInfo;
    self#recv_registerWapDevice
  method private send_registerWapDevice invitationHash guidHash email deviceInfo = 
    oprot#writeMessageBegin ("registerWapDevice", Protocol.CALL, seqid);
    let args = new registerWapDevice_args in
      args#set_invitationHash invitationHash;
      args#set_guidHash guidHash;
      args#set_email email;
      args#set_deviceInfo deviceInfo;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerWapDevice  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerWapDevice_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerWapDevice failed: unknown result")))
  method registerWithExistingSnsIdAndIdentityCredential identityCredential region udidHash deviceInfo = 
    self#send_registerWithExistingSnsIdAndIdentityCredential identityCredential region udidHash deviceInfo;
    self#recv_registerWithExistingSnsIdAndIdentityCredential
  method private send_registerWithExistingSnsIdAndIdentityCredential identityCredential region udidHash deviceInfo = 
    oprot#writeMessageBegin ("registerWithExistingSnsIdAndIdentityCredential", Protocol.CALL, seqid);
    let args = new registerWithExistingSnsIdAndIdentityCredential_args in
      args#set_identityCredential identityCredential;
      args#set_region region;
      args#set_udidHash udidHash;
      args#set_deviceInfo deviceInfo;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerWithExistingSnsIdAndIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerWithExistingSnsIdAndIdentityCredential_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerWithExistingSnsIdAndIdentityCredential failed: unknown result")))
  method registerWithSnsId snsIdType snsAccessToken region udidHash deviceInfo mid = 
    self#send_registerWithSnsId snsIdType snsAccessToken region udidHash deviceInfo mid;
    self#recv_registerWithSnsId
  method private send_registerWithSnsId snsIdType snsAccessToken region udidHash deviceInfo mid = 
    oprot#writeMessageBegin ("registerWithSnsId", Protocol.CALL, seqid);
    let args = new registerWithSnsId_args in
      args#set_snsIdType snsIdType;
      args#set_snsAccessToken snsAccessToken;
      args#set_region region;
      args#set_udidHash udidHash;
      args#set_deviceInfo deviceInfo;
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerWithSnsId  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerWithSnsId_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerWithSnsId failed: unknown result")))
  method registerWithSnsIdAndIdentityCredential snsIdType snsAccessToken identityCredential region udidHash deviceInfo = 
    self#send_registerWithSnsIdAndIdentityCredential snsIdType snsAccessToken identityCredential region udidHash deviceInfo;
    self#recv_registerWithSnsIdAndIdentityCredential
  method private send_registerWithSnsIdAndIdentityCredential snsIdType snsAccessToken identityCredential region udidHash deviceInfo = 
    oprot#writeMessageBegin ("registerWithSnsIdAndIdentityCredential", Protocol.CALL, seqid);
    let args = new registerWithSnsIdAndIdentityCredential_args in
      args#set_snsIdType snsIdType;
      args#set_snsAccessToken snsAccessToken;
      args#set_identityCredential identityCredential;
      args#set_region region;
      args#set_udidHash udidHash;
      args#set_deviceInfo deviceInfo;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerWithSnsIdAndIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerWithSnsIdAndIdentityCredential_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerWithSnsIdAndIdentityCredential failed: unknown result")))
  method reissueDeviceCredential  = 
    self#send_reissueDeviceCredential;
    self#recv_reissueDeviceCredential
  method private send_reissueDeviceCredential  = 
    oprot#writeMessageBegin ("reissueDeviceCredential", Protocol.CALL, seqid);
    let args = new reissueDeviceCredential_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reissueDeviceCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reissueDeviceCredential_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reissueDeviceCredential failed: unknown result")))
  method reissueUserTicket expirationTime maxUseCount = 
    self#send_reissueUserTicket expirationTime maxUseCount;
    self#recv_reissueUserTicket
  method private send_reissueUserTicket expirationTime maxUseCount = 
    oprot#writeMessageBegin ("reissueUserTicket", Protocol.CALL, seqid);
    let args = new reissueUserTicket_args in
      args#set_expirationTime expirationTime;
      args#set_maxUseCount maxUseCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reissueUserTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reissueUserTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reissueUserTicket failed: unknown result")))
  method getMessageReadRange chatIds = 
    self#send_getMessageReadRange chatIds;
    self#recv_getMessageReadRange
  method private send_getMessageReadRange chatIds = 
    oprot#writeMessageBegin ("getMessageReadRange", Protocol.CALL, seqid);
    let args = new getMessageReadRange_args in
      args#set_chatIds chatIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessageReadRange  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessageReadRange_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessageReadRange failed: unknown result")))
  method rejectGroupInvitation reqSeq groupId = 
    self#send_rejectGroupInvitation reqSeq groupId;
    self#recv_rejectGroupInvitation
  method private send_rejectGroupInvitation reqSeq groupId = 
    oprot#writeMessageBegin ("rejectGroupInvitation", Protocol.CALL, seqid);
    let args = new rejectGroupInvitation_args in
      args#set_reqSeq reqSeq;
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_rejectGroupInvitation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_rejectGroupInvitation_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method releaseSession  = 
    self#send_releaseSession;
    self#recv_releaseSession
  method private send_releaseSession  = 
    oprot#writeMessageBegin ("releaseSession", Protocol.CALL, seqid);
    let args = new releaseSession_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_releaseSession  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_releaseSession_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method removeAllMessages seq lastMessageId = 
    self#send_removeAllMessages seq lastMessageId;
    self#recv_removeAllMessages
  method private send_removeAllMessages seq lastMessageId = 
    oprot#writeMessageBegin ("removeAllMessages", Protocol.CALL, seqid);
    let args = new removeAllMessages_args in
      args#set_seq seq;
      args#set_lastMessageId lastMessageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeAllMessages  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeAllMessages_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method removeBuddyLocation mid index = 
    self#send_removeBuddyLocation mid index;
    self#recv_removeBuddyLocation
  method private send_removeBuddyLocation mid index = 
    oprot#writeMessageBegin ("removeBuddyLocation", Protocol.CALL, seqid);
    let args = new removeBuddyLocation_args in
      args#set_mid mid;
      args#set_index index;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeBuddyLocation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeBuddyLocation_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method removeMessage messageId = 
    self#send_removeMessage messageId;
    self#recv_removeMessage
  method private send_removeMessage messageId = 
    oprot#writeMessageBegin ("removeMessage", Protocol.CALL, seqid);
    let args = new removeMessage_args in
      args#set_messageId messageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeMessage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "removeMessage failed: unknown result")))
  method makeUserAddMyselfAsContact contactOwnerMid = 
    self#send_makeUserAddMyselfAsContact contactOwnerMid;
    self#recv_makeUserAddMyselfAsContact
  method private send_makeUserAddMyselfAsContact contactOwnerMid = 
    oprot#writeMessageBegin ("makeUserAddMyselfAsContact", Protocol.CALL, seqid);
    let args = new makeUserAddMyselfAsContact_args in
      args#set_contactOwnerMid contactOwnerMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_makeUserAddMyselfAsContact  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_makeUserAddMyselfAsContact_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "makeUserAddMyselfAsContact failed: unknown result")))
  method removeMessageFromMyHome messageId = 
    self#send_removeMessageFromMyHome messageId;
    self#recv_removeMessageFromMyHome
  method private send_removeMessageFromMyHome messageId = 
    oprot#writeMessageBegin ("removeMessageFromMyHome", Protocol.CALL, seqid);
    let args = new removeMessageFromMyHome_args in
      args#set_messageId messageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeMessageFromMyHome  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeMessageFromMyHome_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "removeMessageFromMyHome failed: unknown result")))
  method removeSnsId snsIdType = 
    self#send_removeSnsId snsIdType;
    self#recv_removeSnsId
  method private send_removeSnsId snsIdType = 
    oprot#writeMessageBegin ("removeSnsId", Protocol.CALL, seqid);
    let args = new removeSnsId_args in
      args#set_snsIdType snsIdType;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeSnsId  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeSnsId_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "removeSnsId failed: unknown result")))
  method report syncOpRevision category report = 
    self#send_report syncOpRevision category report;
    self#recv_report
  method private send_report syncOpRevision category report = 
    oprot#writeMessageBegin ("report", Protocol.CALL, seqid);
    let args = new report_args in
      args#set_syncOpRevision syncOpRevision;
      args#set_category category;
      args#set_report report;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_report  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_report_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method reportContacts syncOpRevision category contactReports actionType = 
    self#send_reportContacts syncOpRevision category contactReports actionType;
    self#recv_reportContacts
  method private send_reportContacts syncOpRevision category contactReports actionType = 
    oprot#writeMessageBegin ("reportContacts", Protocol.CALL, seqid);
    let args = new reportContacts_args in
      args#set_syncOpRevision syncOpRevision;
      args#set_category category;
      args#set_contactReports contactReports;
      args#set_actionType actionType;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reportContacts failed: unknown result")))
  method reportGroups syncOpRevision groups = 
    self#send_reportGroups syncOpRevision groups;
    self#recv_reportGroups
  method private send_reportGroups syncOpRevision groups = 
    oprot#writeMessageBegin ("reportGroups", Protocol.CALL, seqid);
    let args = new reportGroups_args in
      args#set_syncOpRevision syncOpRevision;
      args#set_groups groups;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportGroups  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportGroups_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method reportProfile syncOpRevision profile = 
    self#send_reportProfile syncOpRevision profile;
    self#recv_reportProfile
  method private send_reportProfile syncOpRevision profile = 
    oprot#writeMessageBegin ("reportProfile", Protocol.CALL, seqid);
    let args = new reportProfile_args in
      args#set_syncOpRevision syncOpRevision;
      args#set_profile profile;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportProfile  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportProfile_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method reportRooms syncOpRevision rooms = 
    self#send_reportRooms syncOpRevision rooms;
    self#recv_reportRooms
  method private send_reportRooms syncOpRevision rooms = 
    oprot#writeMessageBegin ("reportRooms", Protocol.CALL, seqid);
    let args = new reportRooms_args in
      args#set_syncOpRevision syncOpRevision;
      args#set_rooms rooms;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportRooms  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportRooms_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method findAndAddContactByMetaTag reqSeq userid reference = 
    self#send_findAndAddContactByMetaTag reqSeq userid reference;
    self#recv_findAndAddContactByMetaTag
  method private send_findAndAddContactByMetaTag reqSeq userid reference = 
    oprot#writeMessageBegin ("findAndAddContactByMetaTag", Protocol.CALL, seqid);
    let args = new findAndAddContactByMetaTag_args in
      args#set_reqSeq reqSeq;
      args#set_userid userid;
      args#set_reference reference;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findAndAddContactByMetaTag  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findAndAddContactByMetaTag_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findAndAddContactByMetaTag failed: unknown result")))
  method reportSettings syncOpRevision settings = 
    self#send_reportSettings syncOpRevision settings;
    self#recv_reportSettings
  method private send_reportSettings syncOpRevision settings = 
    oprot#writeMessageBegin ("reportSettings", Protocol.CALL, seqid);
    let args = new reportSettings_args in
      args#set_syncOpRevision syncOpRevision;
      args#set_settings settings;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportSettings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportSettings_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method reportSpam chatMid memberMids spammerReasons senderMids spamMessageIds spamMessages = 
    self#send_reportSpam chatMid memberMids spammerReasons senderMids spamMessageIds spamMessages;
    self#recv_reportSpam
  method private send_reportSpam chatMid memberMids spammerReasons senderMids spamMessageIds spamMessages = 
    oprot#writeMessageBegin ("reportSpam", Protocol.CALL, seqid);
    let args = new reportSpam_args in
      args#set_chatMid chatMid;
      args#set_memberMids memberMids;
      args#set_spammerReasons spammerReasons;
      args#set_senderMids senderMids;
      args#set_spamMessageIds spamMessageIds;
      args#set_spamMessages spamMessages;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportSpam  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportSpam_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method reportSpammer spammerMid spammerReasons spamMessageIds = 
    self#send_reportSpammer spammerMid spammerReasons spamMessageIds;
    self#recv_reportSpammer
  method private send_reportSpammer spammerMid spammerReasons spamMessageIds = 
    oprot#writeMessageBegin ("reportSpammer", Protocol.CALL, seqid);
    let args = new reportSpammer_args in
      args#set_spammerMid spammerMid;
      args#set_spammerReasons spammerReasons;
      args#set_spamMessageIds spamMessageIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportSpammer  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportSpammer_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method requestAccountPasswordReset provider identifier locale = 
    self#send_requestAccountPasswordReset provider identifier locale;
    self#recv_requestAccountPasswordReset
  method private send_requestAccountPasswordReset provider identifier locale = 
    oprot#writeMessageBegin ("requestAccountPasswordReset", Protocol.CALL, seqid);
    let args = new requestAccountPasswordReset_args in
      args#set_provider provider;
      args#set_identifier identifier;
      args#set_locale locale;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_requestAccountPasswordReset  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_requestAccountPasswordReset_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method requestEmailConfirmation emailConfirmation = 
    self#send_requestEmailConfirmation emailConfirmation;
    self#recv_requestEmailConfirmation
  method private send_requestEmailConfirmation emailConfirmation = 
    oprot#writeMessageBegin ("requestEmailConfirmation", Protocol.CALL, seqid);
    let args = new requestEmailConfirmation_args in
      args#set_emailConfirmation emailConfirmation;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_requestEmailConfirmation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_requestEmailConfirmation_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "requestEmailConfirmation failed: unknown result")))
  method requestIdentityUnbind provider identifier = 
    self#send_requestIdentityUnbind provider identifier;
    self#recv_requestIdentityUnbind
  method private send_requestIdentityUnbind provider identifier = 
    oprot#writeMessageBegin ("requestIdentityUnbind", Protocol.CALL, seqid);
    let args = new requestIdentityUnbind_args in
      args#set_provider provider;
      args#set_identifier identifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_requestIdentityUnbind  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_requestIdentityUnbind_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method resendEmailConfirmation verifier = 
    self#send_resendEmailConfirmation verifier;
    self#recv_resendEmailConfirmation
  method private send_resendEmailConfirmation verifier = 
    oprot#writeMessageBegin ("resendEmailConfirmation", Protocol.CALL, seqid);
    let args = new resendEmailConfirmation_args in
      args#set_verifier verifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_resendEmailConfirmation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_resendEmailConfirmation_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "resendEmailConfirmation failed: unknown result")))
  method resendPinCode sessionId = 
    self#send_resendPinCode sessionId;
    self#recv_resendPinCode
  method private send_resendPinCode sessionId = 
    oprot#writeMessageBegin ("resendPinCode", Protocol.CALL, seqid);
    let args = new resendPinCode_args in
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_resendPinCode  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_resendPinCode_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method resendPinCodeBySMS sessionId = 
    self#send_resendPinCodeBySMS sessionId;
    self#recv_resendPinCodeBySMS
  method private send_resendPinCodeBySMS sessionId = 
    oprot#writeMessageBegin ("resendPinCodeBySMS", Protocol.CALL, seqid);
    let args = new resendPinCodeBySMS_args in
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_resendPinCodeBySMS  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_resendPinCodeBySMS_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method sendChatChecked seq consumer lastMessageId = 
    self#send_sendChatChecked seq consumer lastMessageId;
    self#recv_sendChatChecked
  method private send_sendChatChecked seq consumer lastMessageId = 
    oprot#writeMessageBegin ("sendChatChecked", Protocol.CALL, seqid);
    let args = new sendChatChecked_args in
      args#set_seq seq;
      args#set_consumer consumer;
      args#set_lastMessageId lastMessageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendChatChecked  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendChatChecked_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method sendMessageAwaitCommit seq message = 
    self#send_sendMessageAwaitCommit seq message;
    self#recv_sendMessageAwaitCommit
  method private send_sendMessageAwaitCommit seq message = 
    oprot#writeMessageBegin ("sendMessageAwaitCommit", Protocol.CALL, seqid);
    let args = new sendMessageAwaitCommit_args in
      args#set_seq seq;
      args#set_message message;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendMessageAwaitCommit  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendMessageAwaitCommit_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendMessageAwaitCommit failed: unknown result")))
  method sendChatRemoved seq consumer lastMessageId = 
    self#send_sendChatRemoved seq consumer lastMessageId;
    self#recv_sendChatRemoved
  method private send_sendChatRemoved seq consumer lastMessageId = 
    oprot#writeMessageBegin ("sendChatRemoved", Protocol.CALL, seqid);
    let args = new sendChatRemoved_args in
      args#set_seq seq;
      args#set_consumer consumer;
      args#set_lastMessageId lastMessageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendChatRemoved  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendChatRemoved_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method sendContentPreviewUpdated esq messageId receiverMids = 
    self#send_sendContentPreviewUpdated esq messageId receiverMids;
    self#recv_sendContentPreviewUpdated
  method private send_sendContentPreviewUpdated esq messageId receiverMids = 
    oprot#writeMessageBegin ("sendContentPreviewUpdated", Protocol.CALL, seqid);
    let args = new sendContentPreviewUpdated_args in
      args#set_esq esq;
      args#set_messageId messageId;
      args#set_receiverMids receiverMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendContentPreviewUpdated  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendContentPreviewUpdated_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendContentPreviewUpdated failed: unknown result")))
  method sendContentReceipt seq consumer messageId = 
    self#send_sendContentReceipt seq consumer messageId;
    self#recv_sendContentReceipt
  method private send_sendContentReceipt seq consumer messageId = 
    oprot#writeMessageBegin ("sendContentReceipt", Protocol.CALL, seqid);
    let args = new sendContentReceipt_args in
      args#set_seq seq;
      args#set_consumer consumer;
      args#set_messageId messageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendContentReceipt  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendContentReceipt_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method sendDummyPush  = 
    self#send_sendDummyPush;
    self#recv_sendDummyPush
  method private send_sendDummyPush  = 
    oprot#writeMessageBegin ("sendDummyPush", Protocol.CALL, seqid);
    let args = new sendDummyPush_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendDummyPush  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendDummyPush_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method removeE2EEPublicKey publicKey = 
    self#send_removeE2EEPublicKey publicKey;
    self#recv_removeE2EEPublicKey
  method private send_removeE2EEPublicKey publicKey = 
    oprot#writeMessageBegin ("removeE2EEPublicKey", Protocol.CALL, seqid);
    let args = new removeE2EEPublicKey_args in
      args#set_publicKey publicKey;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeE2EEPublicKey  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeE2EEPublicKey_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method negotiateE2EEPublicKey mid = 
    self#send_negotiateE2EEPublicKey mid;
    self#recv_negotiateE2EEPublicKey
  method private send_negotiateE2EEPublicKey mid = 
    oprot#writeMessageBegin ("negotiateE2EEPublicKey", Protocol.CALL, seqid);
    let args = new negotiateE2EEPublicKey_args in
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_negotiateE2EEPublicKey  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_negotiateE2EEPublicKey_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "negotiateE2EEPublicKey failed: unknown result")))
  method getE2EEPublicKey mid version keyId = 
    self#send_getE2EEPublicKey mid version keyId;
    self#recv_getE2EEPublicKey
  method private send_getE2EEPublicKey mid version keyId = 
    oprot#writeMessageBegin ("getE2EEPublicKey", Protocol.CALL, seqid);
    let args = new getE2EEPublicKey_args in
      args#set_mid mid;
      args#set_version version;
      args#set_keyId keyId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getE2EEPublicKey  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getE2EEPublicKey_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getE2EEPublicKey failed: unknown result")))
  method requestE2EEKeyExchange reqSeq temporalPublicKey publicKey verifier = 
    self#send_requestE2EEKeyExchange reqSeq temporalPublicKey publicKey verifier;
    self#recv_requestE2EEKeyExchange
  method private send_requestE2EEKeyExchange reqSeq temporalPublicKey publicKey verifier = 
    oprot#writeMessageBegin ("requestE2EEKeyExchange", Protocol.CALL, seqid);
    let args = new requestE2EEKeyExchange_args in
      args#set_reqSeq reqSeq;
      args#set_temporalPublicKey temporalPublicKey;
      args#set_publicKey publicKey;
      args#set_verifier verifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_requestE2EEKeyExchange  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_requestE2EEKeyExchange_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method getLastE2EEPublicKeys chatMid = 
    self#send_getLastE2EEPublicKeys chatMid;
    self#recv_getLastE2EEPublicKeys
  method private send_getLastE2EEPublicKeys chatMid = 
    oprot#writeMessageBegin ("getLastE2EEPublicKeys", Protocol.CALL, seqid);
    let args = new getLastE2EEPublicKeys_args in
      args#set_chatMid chatMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getLastE2EEPublicKeys  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getLastE2EEPublicKeys_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getLastE2EEPublicKeys failed: unknown result")))
  method registerE2EEPublicKey reqSeq publicKey = 
    self#send_registerE2EEPublicKey reqSeq publicKey;
    self#recv_registerE2EEPublicKey
  method private send_registerE2EEPublicKey reqSeq publicKey = 
    oprot#writeMessageBegin ("registerE2EEPublicKey", Protocol.CALL, seqid);
    let args = new registerE2EEPublicKey_args in
      args#set_reqSeq reqSeq;
      args#set_publicKey publicKey;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerE2EEPublicKey  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerE2EEPublicKey_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerE2EEPublicKey failed: unknown result")))
  method getE2EEPublicKeys  = 
    self#send_getE2EEPublicKeys;
    self#recv_getE2EEPublicKeys
  method private send_getE2EEPublicKeys  = 
    oprot#writeMessageBegin ("getE2EEPublicKeys", Protocol.CALL, seqid);
    let args = new getE2EEPublicKeys_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getE2EEPublicKeys  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getE2EEPublicKeys_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getE2EEPublicKeys failed: unknown result")))
  method getE2EEPublicKeysEx ignoreE2EEStatus = 
    self#send_getE2EEPublicKeysEx ignoreE2EEStatus;
    self#recv_getE2EEPublicKeysEx
  method private send_getE2EEPublicKeysEx ignoreE2EEStatus = 
    oprot#writeMessageBegin ("getE2EEPublicKeysEx", Protocol.CALL, seqid);
    let args = new getE2EEPublicKeysEx_args in
      args#set_ignoreE2EEStatus ignoreE2EEStatus;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getE2EEPublicKeysEx  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getE2EEPublicKeysEx_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getE2EEPublicKeysEx failed: unknown result")))
  method getReadMessageOpsInBulk chatIds = 
    self#send_getReadMessageOpsInBulk chatIds;
    self#recv_getReadMessageOpsInBulk
  method private send_getReadMessageOpsInBulk chatIds = 
    oprot#writeMessageBegin ("getReadMessageOpsInBulk", Protocol.CALL, seqid);
    let args = new getReadMessageOpsInBulk_args in
      args#set_chatIds chatIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getReadMessageOpsInBulk  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getReadMessageOpsInBulk_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getReadMessageOpsInBulk failed: unknown result")))
  method sendEvent seq message = 
    self#send_sendEvent seq message;
    self#recv_sendEvent
  method private send_sendEvent seq message = 
    oprot#writeMessageBegin ("sendEvent", Protocol.CALL, seqid);
    let args = new sendEvent_args in
      args#set_seq seq;
      args#set_message message;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendEvent  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendEvent_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendEvent failed: unknown result")))
  method sendMessage seq message = 
    self#send_sendMessage seq message;
    self#recv_sendMessage
  method private send_sendMessage seq message = 
    oprot#writeMessageBegin ("sendMessage", Protocol.CALL, seqid);
    let args = new sendMessage_args in
      args#set_seq seq;
      args#set_message message;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendMessage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendMessage failed: unknown result")))
  method sendMessageIgnored seq consumer messageIds = 
    self#send_sendMessageIgnored seq consumer messageIds;
    self#recv_sendMessageIgnored
  method private send_sendMessageIgnored seq consumer messageIds = 
    oprot#writeMessageBegin ("sendMessageIgnored", Protocol.CALL, seqid);
    let args = new sendMessageIgnored_args in
      args#set_seq seq;
      args#set_consumer consumer;
      args#set_messageIds messageIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendMessageIgnored  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendMessageIgnored_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method sendMessageReceipt seq consumer messageIds = 
    self#send_sendMessageReceipt seq consumer messageIds;
    self#recv_sendMessageReceipt
  method private send_sendMessageReceipt seq consumer messageIds = 
    oprot#writeMessageBegin ("sendMessageReceipt", Protocol.CALL, seqid);
    let args = new sendMessageReceipt_args in
      args#set_seq seq;
      args#set_consumer consumer;
      args#set_messageIds messageIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendMessageReceipt  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendMessageReceipt_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method findContactByMetaTag userid reference = 
    self#send_findContactByMetaTag userid reference;
    self#recv_findContactByMetaTag
  method private send_findContactByMetaTag userid reference = 
    oprot#writeMessageBegin ("findContactByMetaTag", Protocol.CALL, seqid);
    let args = new findContactByMetaTag_args in
      args#set_userid userid;
      args#set_reference reference;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findContactByMetaTag  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findContactByMetaTag_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findContactByMetaTag failed: unknown result")))
  method sendMessageToMyHome seq message = 
    self#send_sendMessageToMyHome seq message;
    self#recv_sendMessageToMyHome
  method private send_sendMessageToMyHome seq message = 
    oprot#writeMessageBegin ("sendMessageToMyHome", Protocol.CALL, seqid);
    let args = new sendMessageToMyHome_args in
      args#set_seq seq;
      args#set_message message;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendMessageToMyHome  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendMessageToMyHome_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendMessageToMyHome failed: unknown result")))
  method setBuddyLocation mid index location = 
    self#send_setBuddyLocation mid index location;
    self#recv_setBuddyLocation
  method private send_setBuddyLocation mid index location = 
    oprot#writeMessageBegin ("setBuddyLocation", Protocol.CALL, seqid);
    let args = new setBuddyLocation_args in
      args#set_mid mid;
      args#set_index index;
      args#set_location location;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_setBuddyLocation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_setBuddyLocation_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method setIdentityCredential identifier verifier provider = 
    self#send_setIdentityCredential identifier verifier provider;
    self#recv_setIdentityCredential
  method private send_setIdentityCredential identifier verifier provider = 
    oprot#writeMessageBegin ("setIdentityCredential", Protocol.CALL, seqid);
    let args = new setIdentityCredential_args in
      args#set_identifier identifier;
      args#set_verifier verifier;
      args#set_provider provider;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_setIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_setIdentityCredential_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method setNotificationsEnabled reqSeq type target enablement = 
    self#send_setNotificationsEnabled reqSeq type target enablement;
    self#recv_setNotificationsEnabled
  method private send_setNotificationsEnabled reqSeq type target enablement = 
    oprot#writeMessageBegin ("setNotificationsEnabled", Protocol.CALL, seqid);
    let args = new setNotificationsEnabled_args in
      args#set_reqSeq reqSeq;
      args#set_type type;
      args#set_target target;
      args#set_enablement enablement;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_setNotificationsEnabled  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_setNotificationsEnabled_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method startUpdateVerification region carrier phone udidHash deviceInfo networkCode locale = 
    self#send_startUpdateVerification region carrier phone udidHash deviceInfo networkCode locale;
    self#recv_startUpdateVerification
  method private send_startUpdateVerification region carrier phone udidHash deviceInfo networkCode locale = 
    oprot#writeMessageBegin ("startUpdateVerification", Protocol.CALL, seqid);
    let args = new startUpdateVerification_args in
      args#set_region region;
      args#set_carrier carrier;
      args#set_phone phone;
      args#set_udidHash udidHash;
      args#set_deviceInfo deviceInfo;
      args#set_networkCode networkCode;
      args#set_locale locale;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_startUpdateVerification  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_startUpdateVerification_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "startUpdateVerification failed: unknown result")))
  method startVerification region carrier phone udidHash deviceInfo networkCode mid locale simInfo oldUdidHash = 
    self#send_startVerification region carrier phone udidHash deviceInfo networkCode mid locale simInfo oldUdidHash;
    self#recv_startVerification
  method private send_startVerification region carrier phone udidHash deviceInfo networkCode mid locale simInfo oldUdidHash = 
    oprot#writeMessageBegin ("startVerification", Protocol.CALL, seqid);
    let args = new startVerification_args in
      args#set_region region;
      args#set_carrier carrier;
      args#set_phone phone;
      args#set_udidHash udidHash;
      args#set_deviceInfo deviceInfo;
      args#set_networkCode networkCode;
      args#set_mid mid;
      args#set_locale locale;
      args#set_simInfo simInfo;
      args#set_oldUdidHash oldUdidHash;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_startVerification  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_startVerification_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "startVerification failed: unknown result")))
  method updateGroupPreferenceAttribute reqSeq groupMid updatedAttrs = 
    self#send_updateGroupPreferenceAttribute reqSeq groupMid updatedAttrs;
    self#recv_updateGroupPreferenceAttribute
  method private send_updateGroupPreferenceAttribute reqSeq groupMid updatedAttrs = 
    oprot#writeMessageBegin ("updateGroupPreferenceAttribute", Protocol.CALL, seqid);
    let args = new updateGroupPreferenceAttribute_args in
      args#set_reqSeq reqSeq;
      args#set_groupMid groupMid;
      args#set_updatedAttrs updatedAttrs;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateGroupPreferenceAttribute  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateGroupPreferenceAttribute_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method createRoomV2 reqSeq contactIds = 
    self#send_createRoomV2 reqSeq contactIds;
    self#recv_createRoomV2
  method private send_createRoomV2 reqSeq contactIds = 
    oprot#writeMessageBegin ("createRoomV2", Protocol.CALL, seqid);
    let args = new createRoomV2_args in
      args#set_reqSeq reqSeq;
      args#set_contactIds contactIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createRoomV2  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createRoomV2_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createRoomV2 failed: unknown result")))
  method storeUpdateProfileAttribute seq profileAttribute value = 
    self#send_storeUpdateProfileAttribute seq profileAttribute value;
    self#recv_storeUpdateProfileAttribute
  method private send_storeUpdateProfileAttribute seq profileAttribute value = 
    oprot#writeMessageBegin ("storeUpdateProfileAttribute", Protocol.CALL, seqid);
    let args = new storeUpdateProfileAttribute_args in
      args#set_seq seq;
      args#set_profileAttribute profileAttribute;
      args#set_value value;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_storeUpdateProfileAttribute  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_storeUpdateProfileAttribute_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method syncContactBySnsIds reqSeq modifications = 
    self#send_syncContactBySnsIds reqSeq modifications;
    self#recv_syncContactBySnsIds
  method private send_syncContactBySnsIds reqSeq modifications = 
    oprot#writeMessageBegin ("syncContactBySnsIds", Protocol.CALL, seqid);
    let args = new syncContactBySnsIds_args in
      args#set_reqSeq reqSeq;
      args#set_modifications modifications;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_syncContactBySnsIds  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_syncContactBySnsIds_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "syncContactBySnsIds failed: unknown result")))
  method syncContacts reqSeq localContacts = 
    self#send_syncContacts reqSeq localContacts;
    self#recv_syncContacts
  method private send_syncContacts reqSeq localContacts = 
    oprot#writeMessageBegin ("syncContacts", Protocol.CALL, seqid);
    let args = new syncContacts_args in
      args#set_reqSeq reqSeq;
      args#set_localContacts localContacts;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_syncContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_syncContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "syncContacts failed: unknown result")))
  method trySendMessage seq message = 
    self#send_trySendMessage seq message;
    self#recv_trySendMessage
  method private send_trySendMessage seq message = 
    oprot#writeMessageBegin ("trySendMessage", Protocol.CALL, seqid);
    let args = new trySendMessage_args in
      args#set_seq seq;
      args#set_message message;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_trySendMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_trySendMessage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "trySendMessage failed: unknown result")))
  method getNextMessagesV2 messageBoxId startMessageId messagesCount = 
    self#send_getNextMessagesV2 messageBoxId startMessageId messagesCount;
    self#recv_getNextMessagesV2
  method private send_getNextMessagesV2 messageBoxId startMessageId messagesCount = 
    oprot#writeMessageBegin ("getNextMessagesV2", Protocol.CALL, seqid);
    let args = new getNextMessagesV2_args in
      args#set_messageBoxId messageBoxId;
      args#set_startMessageId startMessageId;
      args#set_messagesCount messagesCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getNextMessagesV2  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getNextMessagesV2_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getNextMessagesV2 failed: unknown result")))
  method getMessageBoxCompactWrapUpV2 messageBoxId = 
    self#send_getMessageBoxCompactWrapUpV2 messageBoxId;
    self#recv_getMessageBoxCompactWrapUpV2
  method private send_getMessageBoxCompactWrapUpV2 messageBoxId = 
    oprot#writeMessageBegin ("getMessageBoxCompactWrapUpV2", Protocol.CALL, seqid);
    let args = new getMessageBoxCompactWrapUpV2_args in
      args#set_messageBoxId messageBoxId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMessageBoxCompactWrapUpV2  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMessageBoxCompactWrapUpV2_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMessageBoxCompactWrapUpV2 failed: unknown result")))
  method getRecentMessagesV2 messageBoxId messagesCount = 
    self#send_getRecentMessagesV2 messageBoxId messagesCount;
    self#recv_getRecentMessagesV2
  method private send_getRecentMessagesV2 messageBoxId messagesCount = 
    oprot#writeMessageBegin ("getRecentMessagesV2", Protocol.CALL, seqid);
    let args = new getRecentMessagesV2_args in
      args#set_messageBoxId messageBoxId;
      args#set_messagesCount messagesCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getRecentMessagesV2  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getRecentMessagesV2_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getRecentMessagesV2 failed: unknown result")))
  method validateContactsOnBot contacts = 
    self#send_validateContactsOnBot contacts;
    self#recv_validateContactsOnBot
  method private send_validateContactsOnBot contacts = 
    oprot#writeMessageBegin ("validateContactsOnBot", Protocol.CALL, seqid);
    let args = new validateContactsOnBot_args in
      args#set_contacts contacts;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_validateContactsOnBot  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_validateContactsOnBot_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "validateContactsOnBot failed: unknown result")))
  method tryFriendRequest midOrEMid method friendRequestParams = 
    self#send_tryFriendRequest midOrEMid method friendRequestParams;
    self#recv_tryFriendRequest
  method private send_tryFriendRequest midOrEMid method friendRequestParams = 
    oprot#writeMessageBegin ("tryFriendRequest", Protocol.CALL, seqid);
    let args = new tryFriendRequest_args in
      args#set_midOrEMid midOrEMid;
      args#set_method method;
      args#set_friendRequestParams friendRequestParams;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_tryFriendRequest  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_tryFriendRequest_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method unblockContact reqSeq id = 
    self#send_unblockContact reqSeq id;
    self#recv_unblockContact
  method private send_unblockContact reqSeq id = 
    oprot#writeMessageBegin ("unblockContact", Protocol.CALL, seqid);
    let args = new unblockContact_args in
      args#set_reqSeq reqSeq;
      args#set_id id;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_unblockContact  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_unblockContact_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method unblockRecommendation reqSeq id = 
    self#send_unblockRecommendation reqSeq id;
    self#recv_unblockRecommendation
  method private send_unblockRecommendation reqSeq id = 
    oprot#writeMessageBegin ("unblockRecommendation", Protocol.CALL, seqid);
    let args = new unblockRecommendation_args in
      args#set_reqSeq reqSeq;
      args#set_id id;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_unblockRecommendation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_unblockRecommendation_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method unregisterUserAndDevice  = 
    self#send_unregisterUserAndDevice;
    self#recv_unregisterUserAndDevice
  method private send_unregisterUserAndDevice  = 
    oprot#writeMessageBegin ("unregisterUserAndDevice", Protocol.CALL, seqid);
    let args = new unregisterUserAndDevice_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_unregisterUserAndDevice  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_unregisterUserAndDevice_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "unregisterUserAndDevice failed: unknown result")))
  method updateApnsDeviceToken apnsDeviceToken = 
    self#send_updateApnsDeviceToken apnsDeviceToken;
    self#recv_updateApnsDeviceToken
  method private send_updateApnsDeviceToken apnsDeviceToken = 
    oprot#writeMessageBegin ("updateApnsDeviceToken", Protocol.CALL, seqid);
    let args = new updateApnsDeviceToken_args in
      args#set_apnsDeviceToken apnsDeviceToken;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateApnsDeviceToken  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateApnsDeviceToken_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateBuddySetting key value = 
    self#send_updateBuddySetting key value;
    self#recv_updateBuddySetting
  method private send_updateBuddySetting key value = 
    oprot#writeMessageBegin ("updateBuddySetting", Protocol.CALL, seqid);
    let args = new updateBuddySetting_args in
      args#set_key key;
      args#set_value value;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateBuddySetting  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateBuddySetting_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateC2DMRegistrationId registrationId = 
    self#send_updateC2DMRegistrationId registrationId;
    self#recv_updateC2DMRegistrationId
  method private send_updateC2DMRegistrationId registrationId = 
    oprot#writeMessageBegin ("updateC2DMRegistrationId", Protocol.CALL, seqid);
    let args = new updateC2DMRegistrationId_args in
      args#set_registrationId registrationId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateC2DMRegistrationId  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateC2DMRegistrationId_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateContactSetting reqSeq mid flag value = 
    self#send_updateContactSetting reqSeq mid flag value;
    self#recv_updateContactSetting
  method private send_updateContactSetting reqSeq mid flag value = 
    oprot#writeMessageBegin ("updateContactSetting", Protocol.CALL, seqid);
    let args = new updateContactSetting_args in
      args#set_reqSeq reqSeq;
      args#set_mid mid;
      args#set_flag flag;
      args#set_value value;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateContactSetting  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateContactSetting_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateCustomModeSettings customMode paramMap = 
    self#send_updateCustomModeSettings customMode paramMap;
    self#recv_updateCustomModeSettings
  method private send_updateCustomModeSettings customMode paramMap = 
    oprot#writeMessageBegin ("updateCustomModeSettings", Protocol.CALL, seqid);
    let args = new updateCustomModeSettings_args in
      args#set_customMode customMode;
      args#set_paramMap paramMap;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateCustomModeSettings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateCustomModeSettings_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateDeviceInfo deviceUid deviceInfo = 
    self#send_updateDeviceInfo deviceUid deviceInfo;
    self#recv_updateDeviceInfo
  method private send_updateDeviceInfo deviceUid deviceInfo = 
    oprot#writeMessageBegin ("updateDeviceInfo", Protocol.CALL, seqid);
    let args = new updateDeviceInfo_args in
      args#set_deviceUid deviceUid;
      args#set_deviceInfo deviceInfo;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateDeviceInfo  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateDeviceInfo_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateGroup reqSeq group = 
    self#send_updateGroup reqSeq group;
    self#recv_updateGroup
  method private send_updateGroup reqSeq group = 
    oprot#writeMessageBegin ("updateGroup", Protocol.CALL, seqid);
    let args = new updateGroup_args in
      args#set_reqSeq reqSeq;
      args#set_group group;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateGroup  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateGroup_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateNotificationToken type token = 
    self#send_updateNotificationToken type token;
    self#recv_updateNotificationToken
  method private send_updateNotificationToken type token = 
    oprot#writeMessageBegin ("updateNotificationToken", Protocol.CALL, seqid);
    let args = new updateNotificationToken_args in
      args#set_type type;
      args#set_token token;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateNotificationToken  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateNotificationToken_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateNotificationTokenWithBytes type token = 
    self#send_updateNotificationTokenWithBytes type token;
    self#recv_updateNotificationTokenWithBytes
  method private send_updateNotificationTokenWithBytes type token = 
    oprot#writeMessageBegin ("updateNotificationTokenWithBytes", Protocol.CALL, seqid);
    let args = new updateNotificationTokenWithBytes_args in
      args#set_type type;
      args#set_token token;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateNotificationTokenWithBytes  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateNotificationTokenWithBytes_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateProfile reqSeq profile = 
    self#send_updateProfile reqSeq profile;
    self#recv_updateProfile
  method private send_updateProfile reqSeq profile = 
    oprot#writeMessageBegin ("updateProfile", Protocol.CALL, seqid);
    let args = new updateProfile_args in
      args#set_reqSeq reqSeq;
      args#set_profile profile;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateProfile  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateProfile_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateProfileAttribute reqSeq attr value = 
    self#send_updateProfileAttribute reqSeq attr value;
    self#recv_updateProfileAttribute
  method private send_updateProfileAttribute reqSeq attr value = 
    oprot#writeMessageBegin ("updateProfileAttribute", Protocol.CALL, seqid);
    let args = new updateProfileAttribute_args in
      args#set_reqSeq reqSeq;
      args#set_attr attr;
      args#set_value value;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateProfileAttribute  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateProfileAttribute_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateRegion region = 
    self#send_updateRegion region;
    self#recv_updateRegion
  method private send_updateRegion region = 
    oprot#writeMessageBegin ("updateRegion", Protocol.CALL, seqid);
    let args = new updateRegion_args in
      args#set_region region;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateRegion  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateRegion_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateSettings reqSeq settings = 
    self#send_updateSettings reqSeq settings;
    self#recv_updateSettings
  method private send_updateSettings reqSeq settings = 
    oprot#writeMessageBegin ("updateSettings", Protocol.CALL, seqid);
    let args = new updateSettings_args in
      args#set_reqSeq reqSeq;
      args#set_settings settings;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSettings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSettings_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateSettings2 reqSeq settings = 
    self#send_updateSettings2 reqSeq settings;
    self#recv_updateSettings2
  method private send_updateSettings2 reqSeq settings = 
    oprot#writeMessageBegin ("updateSettings2", Protocol.CALL, seqid);
    let args = new updateSettings2_args in
      args#set_reqSeq reqSeq;
      args#set_settings settings;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSettings2  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSettings2_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSettings2 failed: unknown result")))
  method updateSettingsAttribute reqSeq attr value = 
    self#send_updateSettingsAttribute reqSeq attr value;
    self#recv_updateSettingsAttribute
  method private send_updateSettingsAttribute reqSeq attr value = 
    oprot#writeMessageBegin ("updateSettingsAttribute", Protocol.CALL, seqid);
    let args = new updateSettingsAttribute_args in
      args#set_reqSeq reqSeq;
      args#set_attr attr;
      args#set_value value;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSettingsAttribute  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSettingsAttribute_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateSettingsAttributes reqSeq attrBitset settings = 
    self#send_updateSettingsAttributes reqSeq attrBitset settings;
    self#recv_updateSettingsAttributes
  method private send_updateSettingsAttributes reqSeq attrBitset settings = 
    oprot#writeMessageBegin ("updateSettingsAttributes", Protocol.CALL, seqid);
    let args = new updateSettingsAttributes_args in
      args#set_reqSeq reqSeq;
      args#set_attrBitset attrBitset;
      args#set_settings settings;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSettingsAttributes  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSettingsAttributes_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSettingsAttributes failed: unknown result")))
  method verifyIdentityCredential identityProvider identifier password = 
    self#send_verifyIdentityCredential identityProvider identifier password;
    self#recv_verifyIdentityCredential
  method private send_verifyIdentityCredential identityProvider identifier password = 
    oprot#writeMessageBegin ("verifyIdentityCredential", Protocol.CALL, seqid);
    let args = new verifyIdentityCredential_args in
      args#set_identityProvider identityProvider;
      args#set_identifier identifier;
      args#set_password password;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_verifyIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_verifyIdentityCredential_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method verifyIdentityCredentialWithResult identityCredential = 
    self#send_verifyIdentityCredentialWithResult identityCredential;
    self#recv_verifyIdentityCredentialWithResult
  method private send_verifyIdentityCredentialWithResult identityCredential = 
    oprot#writeMessageBegin ("verifyIdentityCredentialWithResult", Protocol.CALL, seqid);
    let args = new verifyIdentityCredentialWithResult_args in
      args#set_identityCredential identityCredential;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_verifyIdentityCredentialWithResult  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_verifyIdentityCredentialWithResult_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "verifyIdentityCredentialWithResult failed: unknown result")))
  method verifyPhone sessionId pinCode udidHash = 
    self#send_verifyPhone sessionId pinCode udidHash;
    self#recv_verifyPhone
  method private send_verifyPhone sessionId pinCode udidHash = 
    oprot#writeMessageBegin ("verifyPhone", Protocol.CALL, seqid);
    let args = new verifyPhone_args in
      args#set_sessionId sessionId;
      args#set_pinCode pinCode;
      args#set_udidHash udidHash;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_verifyPhone  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_verifyPhone_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "verifyPhone failed: unknown result")))
  method verifyQrcode verifier pinCode = 
    self#send_verifyQrcode verifier pinCode;
    self#recv_verifyQrcode
  method private send_verifyQrcode verifier pinCode = 
    oprot#writeMessageBegin ("verifyQrcode", Protocol.CALL, seqid);
    let args = new verifyQrcode_args in
      args#set_verifier verifier;
      args#set_pinCode pinCode;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_verifyQrcode  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_verifyQrcode_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "verifyQrcode failed: unknown result")))
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 233
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_getChatRoomAnnouncementsBulk (seqid, iprot, oprot) =
    let args = read_getChatRoomAnnouncementsBulk_args iprot in
      iprot#readMessageEnd;
      let result = new getChatRoomAnnouncementsBulk_result in
        (try
          result#set_success (handler#getChatRoomAnnouncementsBulk args#get_chatRoomMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getChatRoomAnnouncementsBulk", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getChatRoomAnnouncements (seqid, iprot, oprot) =
    let args = read_getChatRoomAnnouncements_args iprot in
      iprot#readMessageEnd;
      let result = new getChatRoomAnnouncements_result in
        (try
          result#set_success (handler#getChatRoomAnnouncements args#get_chatRoomMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getChatRoomAnnouncements", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createChatRoomAnnouncement (seqid, iprot, oprot) =
    let args = read_createChatRoomAnnouncement_args iprot in
      iprot#readMessageEnd;
      let result = new createChatRoomAnnouncement_result in
        (try
          result#set_success (handler#createChatRoomAnnouncement args#get_reqSeq args#get_chatRoomMid args#get_type args#get_contents);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createChatRoomAnnouncement", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeChatRoomAnnouncement (seqid, iprot, oprot) =
    let args = read_removeChatRoomAnnouncement_args iprot in
      iprot#readMessageEnd;
      let result = new removeChatRoomAnnouncement_result in
        (try
          (handler#removeChatRoomAnnouncement args#get_reqSeq args#get_chatRoomMid args#get_announcementSeq);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeChatRoomAnnouncement", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_unsendMessage (seqid, iprot, oprot) =
    let args = read_unsendMessage_args iprot in
      iprot#readMessageEnd;
      let result = new unsendMessage_result in
        (try
          (handler#unsendMessage args#get_seq args#get_messageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("unsendMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupWithoutMembers (seqid, iprot, oprot) =
    let args = read_getGroupWithoutMembers_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupWithoutMembers_result in
        (try
          result#set_success (handler#getGroupWithoutMembers args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupWithoutMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_requestResendMessage (seqid, iprot, oprot) =
    let args = read_requestResendMessage_args iprot in
      iprot#readMessageEnd;
      let result = new requestResendMessage_result in
        (try
          (handler#requestResendMessage args#get_reqSeq args#get_senderMid args#get_messageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("requestResendMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_respondResendMessage (seqid, iprot, oprot) =
    let args = read_respondResendMessage_args iprot in
      iprot#readMessageEnd;
      let result = new respondResendMessage_result in
        (try
          (handler#respondResendMessage args#get_reqSeq args#get_receiverMid args#get_originalMessageId args#get_resendMessage args#get_errorCode);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("respondResendMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_acceptGroupInvitation (seqid, iprot, oprot) =
    let args = read_acceptGroupInvitation_args iprot in
      iprot#readMessageEnd;
      let result = new acceptGroupInvitation_result in
        (try
          (handler#acceptGroupInvitation args#get_reqSeq args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("acceptGroupInvitation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_acceptGroupInvitationByTicket (seqid, iprot, oprot) =
    let args = read_acceptGroupInvitationByTicket_args iprot in
      iprot#readMessageEnd;
      let result = new acceptGroupInvitationByTicket_result in
        (try
          (handler#acceptGroupInvitationByTicket args#get_reqSeq args#get_GroupMid args#get_ticketId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("acceptGroupInvitationByTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_acceptProximityMatches (seqid, iprot, oprot) =
    let args = read_acceptProximityMatches_args iprot in
      iprot#readMessageEnd;
      let result = new acceptProximityMatches_result in
        (try
          (handler#acceptProximityMatches args#get_sessionId args#get_ids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("acceptProximityMatches", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_acquireCallRoute (seqid, iprot, oprot) =
    let args = read_acquireCallRoute_args iprot in
      iprot#readMessageEnd;
      let result = new acquireCallRoute_result in
        (try
          result#set_success (handler#acquireCallRoute args#get_to);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("acquireCallRoute", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_acquireCallTicket (seqid, iprot, oprot) =
    let args = read_acquireCallTicket_args iprot in
      iprot#readMessageEnd;
      let result = new acquireCallTicket_result in
        (try
          result#set_success (handler#acquireCallTicket args#get_to);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("acquireCallTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_acquireEncryptedAccessToken (seqid, iprot, oprot) =
    let args = read_acquireEncryptedAccessToken_args iprot in
      iprot#readMessageEnd;
      let result = new acquireEncryptedAccessToken_result in
        (try
          result#set_success (handler#acquireEncryptedAccessToken args#get_featureType);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("acquireEncryptedAccessToken", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_addSnsId (seqid, iprot, oprot) =
    let args = read_addSnsId_args iprot in
      iprot#readMessageEnd;
      let result = new addSnsId_result in
        (try
          result#set_success (handler#addSnsId args#get_snsIdType args#get_snsAccessToken);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("addSnsId", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_blockContact (seqid, iprot, oprot) =
    let args = read_blockContact_args iprot in
      iprot#readMessageEnd;
      let result = new blockContact_result in
        (try
          (handler#blockContact args#get_reqSeq args#get_id);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("blockContact", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_blockRecommendation (seqid, iprot, oprot) =
    let args = read_blockRecommendation_args iprot in
      iprot#readMessageEnd;
      let result = new blockRecommendation_result in
        (try
          (handler#blockRecommendation args#get_reqSeq args#get_id);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("blockRecommendation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_cancelGroupInvitation (seqid, iprot, oprot) =
    let args = read_cancelGroupInvitation_args iprot in
      iprot#readMessageEnd;
      let result = new cancelGroupInvitation_result in
        (try
          (handler#cancelGroupInvitation args#get_reqSeq args#get_groupId args#get_contactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("cancelGroupInvitation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_changeVerificationMethod (seqid, iprot, oprot) =
    let args = read_changeVerificationMethod_args iprot in
      iprot#readMessageEnd;
      let result = new changeVerificationMethod_result in
        (try
          result#set_success (handler#changeVerificationMethod args#get_sessionId args#get_method);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("changeVerificationMethod", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_clearIdentityCredential (seqid, iprot, oprot) =
    let _ = read_clearIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new clearIdentityCredential_result in
        (try
          (handler#clearIdentityCredential);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("clearIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_clearMessageBox (seqid, iprot, oprot) =
    let args = read_clearMessageBox_args iprot in
      iprot#readMessageEnd;
      let result = new clearMessageBox_result in
        (try
          (handler#clearMessageBox args#get_channelId args#get_messageBoxId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("clearMessageBox", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_closeProximityMatch (seqid, iprot, oprot) =
    let args = read_closeProximityMatch_args iprot in
      iprot#readMessageEnd;
      let result = new closeProximityMatch_result in
        (try
          (handler#closeProximityMatch args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("closeProximityMatch", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_commitSendMessage (seqid, iprot, oprot) =
    let args = read_commitSendMessage_args iprot in
      iprot#readMessageEnd;
      let result = new commitSendMessage_result in
        (try
          result#set_success (handler#commitSendMessage args#get_seq args#get_messageId args#get_receiverMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("commitSendMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_commitSendMessages (seqid, iprot, oprot) =
    let args = read_commitSendMessages_args iprot in
      iprot#readMessageEnd;
      let result = new commitSendMessages_result in
        (try
          result#set_success (handler#commitSendMessages args#get_seq args#get_messageIds args#get_receiverMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("commitSendMessages", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_commitUpdateProfile (seqid, iprot, oprot) =
    let args = read_commitUpdateProfile_args iprot in
      iprot#readMessageEnd;
      let result = new commitUpdateProfile_result in
        (try
          result#set_success (handler#commitUpdateProfile args#get_seq args#get_attrs args#get_receiverMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("commitUpdateProfile", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_confirmEmail (seqid, iprot, oprot) =
    let args = read_confirmEmail_args iprot in
      iprot#readMessageEnd;
      let result = new confirmEmail_result in
        (try
          (handler#confirmEmail args#get_verifier args#get_pinCode);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("confirmEmail", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createGroup (seqid, iprot, oprot) =
    let args = read_createGroup_args iprot in
      iprot#readMessageEnd;
      let result = new createGroup_result in
        (try
          result#set_success (handler#createGroup args#get_seq args#get_name args#get_contactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createGroup", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createQrcodeBase64Image (seqid, iprot, oprot) =
    let args = read_createQrcodeBase64Image_args iprot in
      iprot#readMessageEnd;
      let result = new createQrcodeBase64Image_result in
        (try
          result#set_success (handler#createQrcodeBase64Image args#get_url args#get_characterSet args#get_imageSize args#get_x args#get_y args#get_width args#get_height);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createQrcodeBase64Image", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createRoom (seqid, iprot, oprot) =
    let args = read_createRoom_args iprot in
      iprot#readMessageEnd;
      let result = new createRoom_result in
        (try
          result#set_success (handler#createRoom args#get_reqSeq args#get_contactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createRoom", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createSession (seqid, iprot, oprot) =
    let _ = read_createSession_args iprot in
      iprot#readMessageEnd;
      let result = new createSession_result in
        (try
          result#set_success (handler#createSession);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createSession", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_fetchAnnouncements (seqid, iprot, oprot) =
    let args = read_fetchAnnouncements_args iprot in
      iprot#readMessageEnd;
      let result = new fetchAnnouncements_result in
        (try
          result#set_success (handler#fetchAnnouncements args#get_lastFetchedIndex);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("fetchAnnouncements", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_fetchMessages (seqid, iprot, oprot) =
    let args = read_fetchMessages_args iprot in
      iprot#readMessageEnd;
      let result = new fetchMessages_result in
        (try
          result#set_success (handler#fetchMessages args#get_localTs args#get_count);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("fetchMessages", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_fetchOperations (seqid, iprot, oprot) =
    let args = read_fetchOperations_args iprot in
      iprot#readMessageEnd;
      let result = new fetchOperations_result in
        (try
          result#set_success (handler#fetchOperations args#get_localRev args#get_count);
        with
          | ShouldSyncException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("fetchOperations", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_fetchOps (seqid, iprot, oprot) =
    let args = read_fetchOps_args iprot in
      iprot#readMessageEnd;
      let result = new fetchOps_result in
        (try
          result#set_success (handler#fetchOps args#get_localRev args#get_count args#get_globalRev args#get_individualRev);
        with
          | ShouldSyncException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("fetchOps", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findAndAddContactsByEmail (seqid, iprot, oprot) =
    let args = read_findAndAddContactsByEmail_args iprot in
      iprot#readMessageEnd;
      let result = new findAndAddContactsByEmail_result in
        (try
          result#set_success (handler#findAndAddContactsByEmail args#get_reqSeq args#get_emails);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findAndAddContactsByEmail", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findAndAddContactsByMid (seqid, iprot, oprot) =
    let args = read_findAndAddContactsByMid_args iprot in
      iprot#readMessageEnd;
      let result = new findAndAddContactsByMid_result in
        (try
          result#set_success (handler#findAndAddContactsByMid args#get_reqSeq args#get_mid args#get_type args#get_reference);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findAndAddContactsByMid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findGroupByTicketV2 (seqid, iprot, oprot) =
    let args = read_findGroupByTicketV2_args iprot in
      iprot#readMessageEnd;
      let result = new findGroupByTicketV2_result in
        (try
          result#set_success (handler#findGroupByTicketV2 args#get_ticketId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findGroupByTicketV2", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findAndAddContactsByPhone (seqid, iprot, oprot) =
    let args = read_findAndAddContactsByPhone_args iprot in
      iprot#readMessageEnd;
      let result = new findAndAddContactsByPhone_result in
        (try
          result#set_success (handler#findAndAddContactsByPhone args#get_reqSeq args#get_phones);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findAndAddContactsByPhone", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getFriendRequests (seqid, iprot, oprot) =
    let args = read_getFriendRequests_args iprot in
      iprot#readMessageEnd;
      let result = new getFriendRequests_result in
        (try
          result#set_success (handler#getFriendRequests args#get_direction args#get_lastSeenSeqId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getFriendRequests", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeFriendRequest (seqid, iprot, oprot) =
    let args = read_removeFriendRequest_args iprot in
      iprot#readMessageEnd;
      let result = new removeFriendRequest_result in
        (try
          (handler#removeFriendRequest args#get_direction args#get_midOrEMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeFriendRequest", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findAndAddContactsByUserid (seqid, iprot, oprot) =
    let args = read_findAndAddContactsByUserid_args iprot in
      iprot#readMessageEnd;
      let result = new findAndAddContactsByUserid_result in
        (try
          result#set_success (handler#findAndAddContactsByUserid args#get_reqSeq args#get_userid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findAndAddContactsByUserid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findContactByUserid (seqid, iprot, oprot) =
    let args = read_findContactByUserid_args iprot in
      iprot#readMessageEnd;
      let result = new findContactByUserid_result in
        (try
          result#set_success (handler#findContactByUserid args#get_userid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findContactByUserid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findContactByUserTicket (seqid, iprot, oprot) =
    let args = read_findContactByUserTicket_args iprot in
      iprot#readMessageEnd;
      let result = new findContactByUserTicket_result in
        (try
          result#set_success (handler#findContactByUserTicket args#get_ticketIdWithTag);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findContactByUserTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findContactsByEmail (seqid, iprot, oprot) =
    let args = read_findContactsByEmail_args iprot in
      iprot#readMessageEnd;
      let result = new findContactsByEmail_result in
        (try
          result#set_success (handler#findContactsByEmail args#get_emails);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findContactsByEmail", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findContactsByPhone (seqid, iprot, oprot) =
    let args = read_findContactsByPhone_args iprot in
      iprot#readMessageEnd;
      let result = new findContactsByPhone_result in
        (try
          result#set_success (handler#findContactsByPhone args#get_phones);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findContactsByPhone", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findSnsIdUserStatus (seqid, iprot, oprot) =
    let args = read_findSnsIdUserStatus_args iprot in
      iprot#readMessageEnd;
      let result = new findSnsIdUserStatus_result in
        (try
          result#set_success (handler#findSnsIdUserStatus args#get_snsIdType args#get_snsAccessToken args#get_udidHash);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findSnsIdUserStatus", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_finishUpdateVerification (seqid, iprot, oprot) =
    let args = read_finishUpdateVerification_args iprot in
      iprot#readMessageEnd;
      let result = new finishUpdateVerification_result in
        (try
          (handler#finishUpdateVerification args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("finishUpdateVerification", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_generateUserTicket (seqid, iprot, oprot) =
    let args = read_generateUserTicket_args iprot in
      iprot#readMessageEnd;
      let result = new generateUserTicket_result in
        (try
          result#set_success (handler#generateUserTicket args#get_expirationTime args#get_maxUseCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("generateUserTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_destroyMessage (seqid, iprot, oprot) =
    let args = read_destroyMessage_args iprot in
      iprot#readMessageEnd;
      let result = new destroyMessage_result in
        (try
          (handler#destroyMessage args#get_seq args#get_chatId args#get_messageId args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("destroyMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getAcceptedProximityMatches (seqid, iprot, oprot) =
    let args = read_getAcceptedProximityMatches_args iprot in
      iprot#readMessageEnd;
      let result = new getAcceptedProximityMatches_result in
        (try
          result#set_success (handler#getAcceptedProximityMatches args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getAcceptedProximityMatches", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getActiveBuddySubscriberIds (seqid, iprot, oprot) =
    let _ = read_getActiveBuddySubscriberIds_args iprot in
      iprot#readMessageEnd;
      let result = new getActiveBuddySubscriberIds_result in
        (try
          result#set_success (handler#getActiveBuddySubscriberIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getActiveBuddySubscriberIds", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getAllContactIds (seqid, iprot, oprot) =
    let _ = read_getAllContactIds_args iprot in
      iprot#readMessageEnd;
      let result = new getAllContactIds_result in
        (try
          result#set_success (handler#getAllContactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getAllContactIds", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getAuthQrcode (seqid, iprot, oprot) =
    let args = read_getAuthQrcode_args iprot in
      iprot#readMessageEnd;
      let result = new getAuthQrcode_result in
        (try
          result#set_success (handler#getAuthQrcode args#get_keepLoggedIn args#get_systemName);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getAuthQrcode", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBlockedContactIds (seqid, iprot, oprot) =
    let _ = read_getBlockedContactIds_args iprot in
      iprot#readMessageEnd;
      let result = new getBlockedContactIds_result in
        (try
          result#set_success (handler#getBlockedContactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBlockedContactIds", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerWithPhoneNumber (seqid, iprot, oprot) =
    let args = read_registerWithPhoneNumber_args iprot in
      iprot#readMessageEnd;
      let result = new registerWithPhoneNumber_result in
        (try
          result#set_success (handler#registerWithPhoneNumber args#get_sessionId args#get_migrationPincodeSessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerWithPhoneNumber", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerWithPhoneNumberAndPassword (seqid, iprot, oprot) =
    let args = read_registerWithPhoneNumberAndPassword_args iprot in
      iprot#readMessageEnd;
      let result = new registerWithPhoneNumberAndPassword_result in
        (try
          result#set_success (handler#registerWithPhoneNumberAndPassword args#get_sessionId args#get_keynm args#get_encrypted);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerWithPhoneNumberAndPassword", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getAnalyticsInfo (seqid, iprot, oprot) =
    let _ = read_getAnalyticsInfo_args iprot in
      iprot#readMessageEnd;
      let result = new getAnalyticsInfo_result in
        (try
          result#set_success (handler#getAnalyticsInfo);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getAnalyticsInfo", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportClientStatistics (seqid, iprot, oprot) =
    let args = read_reportClientStatistics_args iprot in
      iprot#readMessageEnd;
      let result = new reportClientStatistics_result in
        (try
          (handler#reportClientStatistics args#get_reqSeq args#get_category args#get_count);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportClientStatistics", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_verifyPhoneNumberForLogin (seqid, iprot, oprot) =
    let args = read_verifyPhoneNumberForLogin_args iprot in
      iprot#readMessageEnd;
      let result = new verifyPhoneNumberForLogin_result in
        (try
          result#set_success (handler#verifyPhoneNumberForLogin args#get_verifierFromPhone args#get_pinCodeForPhone args#get_verifierFromLogin);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("verifyPhoneNumberForLogin", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_verifyPhoneNumber (seqid, iprot, oprot) =
    let args = read_verifyPhoneNumber_args iprot in
      iprot#readMessageEnd;
      let result = new verifyPhoneNumber_result in
        (try
          result#set_success (handler#verifyPhoneNumber args#get_sessionId args#get_pinCode args#get_udidHash args#get_migrationPincodeSessionId args#get_oldUdidHash);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("verifyPhoneNumber", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBlockedContactIdsByRange (seqid, iprot, oprot) =
    let args = read_getBlockedContactIdsByRange_args iprot in
      iprot#readMessageEnd;
      let result = new getBlockedContactIdsByRange_result in
        (try
          result#set_success (handler#getBlockedContactIdsByRange args#get_start args#get_count);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBlockedContactIdsByRange", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBlockedRecommendationIds (seqid, iprot, oprot) =
    let _ = read_getBlockedRecommendationIds_args iprot in
      iprot#readMessageEnd;
      let result = new getBlockedRecommendationIds_result in
        (try
          result#set_success (handler#getBlockedRecommendationIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBlockedRecommendationIds", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBuddyBlockerIds (seqid, iprot, oprot) =
    let _ = read_getBuddyBlockerIds_args iprot in
      iprot#readMessageEnd;
      let result = new getBuddyBlockerIds_result in
        (try
          result#set_success (handler#getBuddyBlockerIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBuddyBlockerIds", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBuddyLocation (seqid, iprot, oprot) =
    let args = read_getBuddyLocation_args iprot in
      iprot#readMessageEnd;
      let result = new getBuddyLocation_result in
        (try
          result#set_success (handler#getBuddyLocation args#get_mid args#get_index);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBuddyLocation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCompactContactsModifiedSince (seqid, iprot, oprot) =
    let args = read_getCompactContactsModifiedSince_args iprot in
      iprot#readMessageEnd;
      let result = new getCompactContactsModifiedSince_result in
        (try
          result#set_success (handler#getCompactContactsModifiedSince args#get_timestamp);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCompactContactsModifiedSince", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCompactGroup (seqid, iprot, oprot) =
    let args = read_getCompactGroup_args iprot in
      iprot#readMessageEnd;
      let result = new getCompactGroup_result in
        (try
          result#set_success (handler#getCompactGroup args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCompactGroup", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCompactRoom (seqid, iprot, oprot) =
    let args = read_getCompactRoom_args iprot in
      iprot#readMessageEnd;
      let result = new getCompactRoom_result in
        (try
          result#set_success (handler#getCompactRoom args#get_roomId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCompactRoom", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getContact (seqid, iprot, oprot) =
    let args = read_getContact_args iprot in
      iprot#readMessageEnd;
      let result = new getContact_result in
        (try
          result#set_success (handler#getContact args#get_id);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getContact", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getContacts (seqid, iprot, oprot) =
    let args = read_getContacts_args iprot in
      iprot#readMessageEnd;
      let result = new getContacts_result in
        (try
          result#set_success (handler#getContacts args#get_ids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getContactWithFriendRequestStatus (seqid, iprot, oprot) =
    let args = read_getContactWithFriendRequestStatus_args iprot in
      iprot#readMessageEnd;
      let result = new getContactWithFriendRequestStatus_result in
        (try
          result#set_success (handler#getContactWithFriendRequestStatus args#get_id);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getContactWithFriendRequestStatus", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCountryWithRequestIp (seqid, iprot, oprot) =
    let _ = read_getCountryWithRequestIp_args iprot in
      iprot#readMessageEnd;
      let result = new getCountryWithRequestIp_result in
        (try
          result#set_success (handler#getCountryWithRequestIp);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCountryWithRequestIp", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getFavoriteMids (seqid, iprot, oprot) =
    let _ = read_getFavoriteMids_args iprot in
      iprot#readMessageEnd;
      let result = new getFavoriteMids_result in
        (try
          result#set_success (handler#getFavoriteMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getFavoriteMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroup (seqid, iprot, oprot) =
    let args = read_getGroup_args iprot in
      iprot#readMessageEnd;
      let result = new getGroup_result in
        (try
          result#set_success (handler#getGroup args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroup", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupIdsInvited (seqid, iprot, oprot) =
    let _ = read_getGroupIdsInvited_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupIdsInvited_result in
        (try
          result#set_success (handler#getGroupIdsInvited);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupIdsInvited", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupIdsJoined (seqid, iprot, oprot) =
    let _ = read_getGroupIdsJoined_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupIdsJoined_result in
        (try
          result#set_success (handler#getGroupIdsJoined);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupIdsJoined", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroups (seqid, iprot, oprot) =
    let args = read_getGroups_args iprot in
      iprot#readMessageEnd;
      let result = new getGroups_result in
        (try
          result#set_success (handler#getGroups args#get_groupIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroups", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getHiddenContactMids (seqid, iprot, oprot) =
    let _ = read_getHiddenContactMids_args iprot in
      iprot#readMessageEnd;
      let result = new getHiddenContactMids_result in
        (try
          result#set_success (handler#getHiddenContactMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getHiddenContactMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getIdentityIdentifier (seqid, iprot, oprot) =
    let _ = read_getIdentityIdentifier_args iprot in
      iprot#readMessageEnd;
      let result = new getIdentityIdentifier_result in
        (try
          result#set_success (handler#getIdentityIdentifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getIdentityIdentifier", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getLastAnnouncementIndex (seqid, iprot, oprot) =
    let _ = read_getLastAnnouncementIndex_args iprot in
      iprot#readMessageEnd;
      let result = new getLastAnnouncementIndex_result in
        (try
          result#set_success (handler#getLastAnnouncementIndex);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getLastAnnouncementIndex", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getLastOpRevision (seqid, iprot, oprot) =
    let _ = read_getLastOpRevision_args iprot in
      iprot#readMessageEnd;
      let result = new getLastOpRevision_result in
        (try
          result#set_success (handler#getLastOpRevision);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getLastOpRevision", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSuggestRevisions (seqid, iprot, oprot) =
    let _ = read_getSuggestRevisions_args iprot in
      iprot#readMessageEnd;
      let result = new getSuggestRevisions_result in
        (try
          result#set_success (handler#getSuggestRevisions);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSuggestRevisions", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPreviousMessagesV2WithReadCount (seqid, iprot, oprot) =
    let args = read_getPreviousMessagesV2WithReadCount_args iprot in
      iprot#readMessageEnd;
      let result = new getPreviousMessagesV2WithReadCount_result in
        (try
          result#set_success (handler#getPreviousMessagesV2WithReadCount args#get_messageBoxId args#get_endMessageId args#get_messagesCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPreviousMessagesV2WithReadCount", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessageBox (seqid, iprot, oprot) =
    let args = read_getMessageBox_args iprot in
      iprot#readMessageEnd;
      let result = new getMessageBox_result in
        (try
          result#set_success (handler#getMessageBox args#get_channelId args#get_messageBoxId args#get_lastMessagesCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessageBox", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessageBoxCompactWrapUp (seqid, iprot, oprot) =
    let args = read_getMessageBoxCompactWrapUp_args iprot in
      iprot#readMessageEnd;
      let result = new getMessageBoxCompactWrapUp_result in
        (try
          result#set_success (handler#getMessageBoxCompactWrapUp args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessageBoxCompactWrapUp", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessageBoxCompactWrapUpList (seqid, iprot, oprot) =
    let args = read_getMessageBoxCompactWrapUpList_args iprot in
      iprot#readMessageEnd;
      let result = new getMessageBoxCompactWrapUpList_result in
        (try
          result#set_success (handler#getMessageBoxCompactWrapUpList args#get_start args#get_messageBoxCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessageBoxCompactWrapUpList", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessageBoxList (seqid, iprot, oprot) =
    let args = read_getMessageBoxList_args iprot in
      iprot#readMessageEnd;
      let result = new getMessageBoxList_result in
        (try
          result#set_success (handler#getMessageBoxList args#get_channelId args#get_lastMessagesCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessageBoxList", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessageBoxListByStatus (seqid, iprot, oprot) =
    let args = read_getMessageBoxListByStatus_args iprot in
      iprot#readMessageEnd;
      let result = new getMessageBoxListByStatus_result in
        (try
          result#set_success (handler#getMessageBoxListByStatus args#get_channelId args#get_lastMessagesCount args#get_status);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessageBoxListByStatus", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessageBoxWrapUp (seqid, iprot, oprot) =
    let args = read_getMessageBoxWrapUp_args iprot in
      iprot#readMessageEnd;
      let result = new getMessageBoxWrapUp_result in
        (try
          result#set_success (handler#getMessageBoxWrapUp args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessageBoxWrapUp", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessageBoxWrapUpList (seqid, iprot, oprot) =
    let args = read_getMessageBoxWrapUpList_args iprot in
      iprot#readMessageEnd;
      let result = new getMessageBoxWrapUpList_result in
        (try
          result#set_success (handler#getMessageBoxWrapUpList args#get_start args#get_messageBoxCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessageBoxWrapUpList", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessagesBySequenceNumber (seqid, iprot, oprot) =
    let args = read_getMessagesBySequenceNumber_args iprot in
      iprot#readMessageEnd;
      let result = new getMessagesBySequenceNumber_result in
        (try
          result#set_success (handler#getMessagesBySequenceNumber args#get_channelId args#get_messageBoxId args#get_startSeq args#get_endSeq);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessagesBySequenceNumber", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getNextMessages (seqid, iprot, oprot) =
    let args = read_getNextMessages_args iprot in
      iprot#readMessageEnd;
      let result = new getNextMessages_result in
        (try
          result#set_success (handler#getNextMessages args#get_messageBoxId args#get_startSeq args#get_messagesCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getNextMessages", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getNotificationPolicy (seqid, iprot, oprot) =
    let args = read_getNotificationPolicy_args iprot in
      iprot#readMessageEnd;
      let result = new getNotificationPolicy_result in
        (try
          result#set_success (handler#getNotificationPolicy args#get_carrier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getNotificationPolicy", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPreviousMessages (seqid, iprot, oprot) =
    let args = read_getPreviousMessages_args iprot in
      iprot#readMessageEnd;
      let result = new getPreviousMessages_result in
        (try
          result#set_success (handler#getPreviousMessages args#get_messageBoxId args#get_endSeq args#get_messagesCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPreviousMessages", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProfile (seqid, iprot, oprot) =
    let _ = read_getProfile_args iprot in
      iprot#readMessageEnd;
      let result = new getProfile_result in
        (try
          result#set_success (handler#getProfile);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getProfile", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProximityMatchCandidateList (seqid, iprot, oprot) =
    let args = read_getProximityMatchCandidateList_args iprot in
      iprot#readMessageEnd;
      let result = new getProximityMatchCandidateList_result in
        (try
          result#set_success (handler#getProximityMatchCandidateList args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getProximityMatchCandidateList", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProximityMatchCandidates (seqid, iprot, oprot) =
    let args = read_getProximityMatchCandidates_args iprot in
      iprot#readMessageEnd;
      let result = new getProximityMatchCandidates_result in
        (try
          result#set_success (handler#getProximityMatchCandidates args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getProximityMatchCandidates", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getRecentMessages (seqid, iprot, oprot) =
    let args = read_getRecentMessages_args iprot in
      iprot#readMessageEnd;
      let result = new getRecentMessages_result in
        (try
          result#set_success (handler#getRecentMessages args#get_messageBoxId args#get_messagesCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getRecentMessages", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getRecommendationIds (seqid, iprot, oprot) =
    let _ = read_getRecommendationIds_args iprot in
      iprot#readMessageEnd;
      let result = new getRecommendationIds_result in
        (try
          result#set_success (handler#getRecommendationIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getRecommendationIds", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getRoom (seqid, iprot, oprot) =
    let args = read_getRoom_args iprot in
      iprot#readMessageEnd;
      let result = new getRoom_result in
        (try
          result#set_success (handler#getRoom args#get_roomId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getRoom", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getRSAKeyInfo (seqid, iprot, oprot) =
    let args = read_getRSAKeyInfo_args iprot in
      iprot#readMessageEnd;
      let result = new getRSAKeyInfo_result in
        (try
          result#set_success (handler#getRSAKeyInfo args#get_provider);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getRSAKeyInfo", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getServerTime (seqid, iprot, oprot) =
    let _ = read_getServerTime_args iprot in
      iprot#readMessageEnd;
      let result = new getServerTime_result in
        (try
          result#set_success (handler#getServerTime);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getServerTime", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSessions (seqid, iprot, oprot) =
    let _ = read_getSessions_args iprot in
      iprot#readMessageEnd;
      let result = new getSessions_result in
        (try
          result#set_success (handler#getSessions);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSessions", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSettings (seqid, iprot, oprot) =
    let _ = read_getSettings_args iprot in
      iprot#readMessageEnd;
      let result = new getSettings_result in
        (try
          result#set_success (handler#getSettings);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSettings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupsV2 (seqid, iprot, oprot) =
    let args = read_getGroupsV2_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupsV2_result in
        (try
          result#set_success (handler#getGroupsV2 args#get_groupIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupsV2", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSettingsAttributes (seqid, iprot, oprot) =
    let args = read_getSettingsAttributes_args iprot in
      iprot#readMessageEnd;
      let result = new getSettingsAttributes_result in
        (try
          result#set_success (handler#getSettingsAttributes args#get_attrBitset);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSettingsAttributes", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSystemConfiguration (seqid, iprot, oprot) =
    let _ = read_getSystemConfiguration_args iprot in
      iprot#readMessageEnd;
      let result = new getSystemConfiguration_result in
        (try
          result#set_success (handler#getSystemConfiguration);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSystemConfiguration", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserTicket (seqid, iprot, oprot) =
    let _ = read_getUserTicket_args iprot in
      iprot#readMessageEnd;
      let result = new getUserTicket_result in
        (try
          result#set_success (handler#getUserTicket);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getWapInvitation (seqid, iprot, oprot) =
    let args = read_getWapInvitation_args iprot in
      iprot#readMessageEnd;
      let result = new getWapInvitation_result in
        (try
          result#set_success (handler#getWapInvitation args#get_invitationHash);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getWapInvitation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_invalidateUserTicket (seqid, iprot, oprot) =
    let _ = read_invalidateUserTicket_args iprot in
      iprot#readMessageEnd;
      let result = new invalidateUserTicket_result in
        (try
          (handler#invalidateUserTicket);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("invalidateUserTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_inviteFriendsBySms (seqid, iprot, oprot) =
    let args = read_inviteFriendsBySms_args iprot in
      iprot#readMessageEnd;
      let result = new inviteFriendsBySms_result in
        (try
          (handler#inviteFriendsBySms args#get_phoneNumberList);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("inviteFriendsBySms", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_inviteIntoGroup (seqid, iprot, oprot) =
    let args = read_inviteIntoGroup_args iprot in
      iprot#readMessageEnd;
      let result = new inviteIntoGroup_result in
        (try
          (handler#inviteIntoGroup args#get_reqSeq args#get_groupId args#get_contactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("inviteIntoGroup", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_inviteIntoRoom (seqid, iprot, oprot) =
    let args = read_inviteIntoRoom_args iprot in
      iprot#readMessageEnd;
      let result = new inviteIntoRoom_result in
        (try
          (handler#inviteIntoRoom args#get_reqSeq args#get_roomId args#get_contactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("inviteIntoRoom", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_inviteViaEmail (seqid, iprot, oprot) =
    let args = read_inviteViaEmail_args iprot in
      iprot#readMessageEnd;
      let result = new inviteViaEmail_result in
        (try
          (handler#inviteViaEmail args#get_reqSeq args#get_email args#get_name);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("inviteViaEmail", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_isIdentityIdentifierAvailable (seqid, iprot, oprot) =
    let args = read_isIdentityIdentifierAvailable_args iprot in
      iprot#readMessageEnd;
      let result = new isIdentityIdentifierAvailable_result in
        (try
          result#set_success (handler#isIdentityIdentifierAvailable args#get_provider args#get_identifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("isIdentityIdentifierAvailable", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_isUseridAvailable (seqid, iprot, oprot) =
    let args = read_isUseridAvailable_args iprot in
      iprot#readMessageEnd;
      let result = new isUseridAvailable_result in
        (try
          result#set_success (handler#isUseridAvailable args#get_userid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("isUseridAvailable", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_kickoutFromGroup (seqid, iprot, oprot) =
    let args = read_kickoutFromGroup_args iprot in
      iprot#readMessageEnd;
      let result = new kickoutFromGroup_result in
        (try
          (handler#kickoutFromGroup args#get_reqSeq args#get_groupId args#get_contactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("kickoutFromGroup", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reissueGroupTicket (seqid, iprot, oprot) =
    let args = read_reissueGroupTicket_args iprot in
      iprot#readMessageEnd;
      let result = new reissueGroupTicket_result in
        (try
          result#set_success (handler#reissueGroupTicket args#get_groupMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reissueGroupTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findGroupByTicket (seqid, iprot, oprot) =
    let args = read_findGroupByTicket_args iprot in
      iprot#readMessageEnd;
      let result = new findGroupByTicket_result in
        (try
          result#set_success (handler#findGroupByTicket args#get_ticketId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findGroupByTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_leaveGroup (seqid, iprot, oprot) =
    let args = read_leaveGroup_args iprot in
      iprot#readMessageEnd;
      let result = new leaveGroup_result in
        (try
          (handler#leaveGroup args#get_reqSeq args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("leaveGroup", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_leaveRoom (seqid, iprot, oprot) =
    let args = read_leaveRoom_args iprot in
      iprot#readMessageEnd;
      let result = new leaveRoom_result in
        (try
          (handler#leaveRoom args#get_reqSeq args#get_roomId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("leaveRoom", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_loginWithIdentityCredential (seqid, iprot, oprot) =
    let args = read_loginWithIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new loginWithIdentityCredential_result in
        (try
          result#set_success (handler#loginWithIdentityCredential args#get_identityProvider args#get_identifier args#get_password args#get_keepLoggedIn args#get_accessLocation args#get_systemName args#get_certificate);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("loginWithIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_loginWithIdentityCredentialForCertificate (seqid, iprot, oprot) =
    let args = read_loginWithIdentityCredentialForCertificate_args iprot in
      iprot#readMessageEnd;
      let result = new loginWithIdentityCredentialForCertificate_result in
        (try
          result#set_success (handler#loginWithIdentityCredentialForCertificate args#get_identityProvider args#get_identifier args#get_password args#get_keepLoggedIn args#get_accessLocation args#get_systemName args#get_certificate);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("loginWithIdentityCredentialForCertificate", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_loginWithVerifier (seqid, iprot, oprot) =
    let args = read_loginWithVerifier_args iprot in
      iprot#readMessageEnd;
      let result = new loginWithVerifier_result in
        (try
          result#set_success (handler#loginWithVerifier args#get_verifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("loginWithVerifier", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_loginWithVerifierForCerificate (seqid, iprot, oprot) =
    let args = read_loginWithVerifierForCerificate_args iprot in
      iprot#readMessageEnd;
      let result = new loginWithVerifierForCerificate_result in
        (try
          result#set_success (handler#loginWithVerifierForCerificate args#get_verifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("loginWithVerifierForCerificate", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_loginWithVerifierForCertificate (seqid, iprot, oprot) =
    let args = read_loginWithVerifierForCertificate_args iprot in
      iprot#readMessageEnd;
      let result = new loginWithVerifierForCertificate_result in
        (try
          result#set_success (handler#loginWithVerifierForCertificate args#get_verifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("loginWithVerifierForCertificate", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_logout (seqid, iprot, oprot) =
    let _ = read_logout_args iprot in
      iprot#readMessageEnd;
      let result = new logout_result in
        (try
          (handler#logout);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("logout", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_logoutSession (seqid, iprot, oprot) =
    let args = read_logoutSession_args iprot in
      iprot#readMessageEnd;
      let result = new logoutSession_result in
        (try
          (handler#logoutSession args#get_tokenKey);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("logoutSession", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_noop (seqid, iprot, oprot) =
    let _ = read_noop_args iprot in
      iprot#readMessageEnd;
      let result = new noop_result in
        (try
          (handler#noop);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("noop", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifiedRedirect (seqid, iprot, oprot) =
    let args = read_notifiedRedirect_args iprot in
      iprot#readMessageEnd;
      let result = new notifiedRedirect_result in
        (try
          (handler#notifiedRedirect args#get_paramMap);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifiedRedirect", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyBuddyOnAir (seqid, iprot, oprot) =
    let args = read_notifyBuddyOnAir_args iprot in
      iprot#readMessageEnd;
      let result = new notifyBuddyOnAir_result in
        (try
          result#set_success (handler#notifyBuddyOnAir args#get_seq args#get_receiverMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyBuddyOnAir", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyIndividualEvent (seqid, iprot, oprot) =
    let args = read_notifyIndividualEvent_args iprot in
      iprot#readMessageEnd;
      let result = new notifyIndividualEvent_result in
        (try
          (handler#notifyIndividualEvent args#get_notificationStatus args#get_receiverMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyIndividualEvent", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyInstalled (seqid, iprot, oprot) =
    let args = read_notifyInstalled_args iprot in
      iprot#readMessageEnd;
      let result = new notifyInstalled_result in
        (try
          (handler#notifyInstalled args#get_udidHash args#get_applicationTypeWithExtensions);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyInstalled", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyRegistrationComplete (seqid, iprot, oprot) =
    let args = read_notifyRegistrationComplete_args iprot in
      iprot#readMessageEnd;
      let result = new notifyRegistrationComplete_result in
        (try
          (handler#notifyRegistrationComplete args#get_udidHash args#get_applicationTypeWithExtensions);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyRegistrationComplete", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifySleep (seqid, iprot, oprot) =
    let args = read_notifySleep_args iprot in
      iprot#readMessageEnd;
      let result = new notifySleep_result in
        (try
          (handler#notifySleep args#get_lastRev args#get_badge);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifySleep", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyUpdated (seqid, iprot, oprot) =
    let args = read_notifyUpdated_args iprot in
      iprot#readMessageEnd;
      let result = new notifyUpdated_result in
        (try
          (handler#notifyUpdated args#get_lastRev args#get_deviceInfo);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyUpdated", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_openProximityMatch (seqid, iprot, oprot) =
    let args = read_openProximityMatch_args iprot in
      iprot#readMessageEnd;
      let result = new openProximityMatch_result in
        (try
          result#set_success (handler#openProximityMatch args#get_location);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("openProximityMatch", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerBuddyUser (seqid, iprot, oprot) =
    let args = read_registerBuddyUser_args iprot in
      iprot#readMessageEnd;
      let result = new registerBuddyUser_result in
        (try
          result#set_success (handler#registerBuddyUser args#get_buddyId args#get_registrarPassword);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerBuddyUser", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerBuddyUserid (seqid, iprot, oprot) =
    let args = read_registerBuddyUserid_args iprot in
      iprot#readMessageEnd;
      let result = new registerBuddyUserid_result in
        (try
          (handler#registerBuddyUserid args#get_seq args#get_userid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerBuddyUserid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerDevice (seqid, iprot, oprot) =
    let args = read_registerDevice_args iprot in
      iprot#readMessageEnd;
      let result = new registerDevice_result in
        (try
          result#set_success (handler#registerDevice args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerDevice", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerDeviceWithIdentityCredential (seqid, iprot, oprot) =
    let args = read_registerDeviceWithIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new registerDeviceWithIdentityCredential_result in
        (try
          result#set_success (handler#registerDeviceWithIdentityCredential args#get_sessionId args#get_provider args#get_identifier args#get_verifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerDeviceWithIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerDeviceWithoutPhoneNumber (seqid, iprot, oprot) =
    let args = read_registerDeviceWithoutPhoneNumber_args iprot in
      iprot#readMessageEnd;
      let result = new registerDeviceWithoutPhoneNumber_result in
        (try
          result#set_success (handler#registerDeviceWithoutPhoneNumber args#get_region args#get_udidHash args#get_deviceInfo);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerDeviceWithoutPhoneNumber", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerDeviceWithoutPhoneNumberWithIdentityCredential (seqid, iprot, oprot) =
    let args = read_registerDeviceWithoutPhoneNumberWithIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new registerDeviceWithoutPhoneNumberWithIdentityCredential_result in
        (try
          result#set_success (handler#registerDeviceWithoutPhoneNumberWithIdentityCredential args#get_region args#get_udidHash args#get_deviceInfo args#get_provider args#get_identifier args#get_verifier args#get_mid args#get_migrationPincodeSessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerDeviceWithoutPhoneNumberWithIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerUserid (seqid, iprot, oprot) =
    let args = read_registerUserid_args iprot in
      iprot#readMessageEnd;
      let result = new registerUserid_result in
        (try
          result#set_success (handler#registerUserid args#get_reqSeq args#get_userid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerUserid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerWapDevice (seqid, iprot, oprot) =
    let args = read_registerWapDevice_args iprot in
      iprot#readMessageEnd;
      let result = new registerWapDevice_result in
        (try
          result#set_success (handler#registerWapDevice args#get_invitationHash args#get_guidHash args#get_email args#get_deviceInfo);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerWapDevice", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerWithExistingSnsIdAndIdentityCredential (seqid, iprot, oprot) =
    let args = read_registerWithExistingSnsIdAndIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new registerWithExistingSnsIdAndIdentityCredential_result in
        (try
          result#set_success (handler#registerWithExistingSnsIdAndIdentityCredential args#get_identityCredential args#get_region args#get_udidHash args#get_deviceInfo);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerWithExistingSnsIdAndIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerWithSnsId (seqid, iprot, oprot) =
    let args = read_registerWithSnsId_args iprot in
      iprot#readMessageEnd;
      let result = new registerWithSnsId_result in
        (try
          result#set_success (handler#registerWithSnsId args#get_snsIdType args#get_snsAccessToken args#get_region args#get_udidHash args#get_deviceInfo args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerWithSnsId", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerWithSnsIdAndIdentityCredential (seqid, iprot, oprot) =
    let args = read_registerWithSnsIdAndIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new registerWithSnsIdAndIdentityCredential_result in
        (try
          result#set_success (handler#registerWithSnsIdAndIdentityCredential args#get_snsIdType args#get_snsAccessToken args#get_identityCredential args#get_region args#get_udidHash args#get_deviceInfo);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerWithSnsIdAndIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reissueDeviceCredential (seqid, iprot, oprot) =
    let _ = read_reissueDeviceCredential_args iprot in
      iprot#readMessageEnd;
      let result = new reissueDeviceCredential_result in
        (try
          result#set_success (handler#reissueDeviceCredential);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reissueDeviceCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reissueUserTicket (seqid, iprot, oprot) =
    let args = read_reissueUserTicket_args iprot in
      iprot#readMessageEnd;
      let result = new reissueUserTicket_result in
        (try
          result#set_success (handler#reissueUserTicket args#get_expirationTime args#get_maxUseCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reissueUserTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessageReadRange (seqid, iprot, oprot) =
    let args = read_getMessageReadRange_args iprot in
      iprot#readMessageEnd;
      let result = new getMessageReadRange_result in
        (try
          result#set_success (handler#getMessageReadRange args#get_chatIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessageReadRange", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_rejectGroupInvitation (seqid, iprot, oprot) =
    let args = read_rejectGroupInvitation_args iprot in
      iprot#readMessageEnd;
      let result = new rejectGroupInvitation_result in
        (try
          (handler#rejectGroupInvitation args#get_reqSeq args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("rejectGroupInvitation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_releaseSession (seqid, iprot, oprot) =
    let _ = read_releaseSession_args iprot in
      iprot#readMessageEnd;
      let result = new releaseSession_result in
        (try
          (handler#releaseSession);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("releaseSession", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeAllMessages (seqid, iprot, oprot) =
    let args = read_removeAllMessages_args iprot in
      iprot#readMessageEnd;
      let result = new removeAllMessages_result in
        (try
          (handler#removeAllMessages args#get_seq args#get_lastMessageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeAllMessages", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeBuddyLocation (seqid, iprot, oprot) =
    let args = read_removeBuddyLocation_args iprot in
      iprot#readMessageEnd;
      let result = new removeBuddyLocation_result in
        (try
          (handler#removeBuddyLocation args#get_mid args#get_index);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeBuddyLocation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeMessage (seqid, iprot, oprot) =
    let args = read_removeMessage_args iprot in
      iprot#readMessageEnd;
      let result = new removeMessage_result in
        (try
          result#set_success (handler#removeMessage args#get_messageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_makeUserAddMyselfAsContact (seqid, iprot, oprot) =
    let args = read_makeUserAddMyselfAsContact_args iprot in
      iprot#readMessageEnd;
      let result = new makeUserAddMyselfAsContact_result in
        (try
          result#set_success (handler#makeUserAddMyselfAsContact args#get_contactOwnerMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("makeUserAddMyselfAsContact", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeMessageFromMyHome (seqid, iprot, oprot) =
    let args = read_removeMessageFromMyHome_args iprot in
      iprot#readMessageEnd;
      let result = new removeMessageFromMyHome_result in
        (try
          result#set_success (handler#removeMessageFromMyHome args#get_messageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeMessageFromMyHome", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeSnsId (seqid, iprot, oprot) =
    let args = read_removeSnsId_args iprot in
      iprot#readMessageEnd;
      let result = new removeSnsId_result in
        (try
          result#set_success (handler#removeSnsId args#get_snsIdType);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeSnsId", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_report (seqid, iprot, oprot) =
    let args = read_report_args iprot in
      iprot#readMessageEnd;
      let result = new report_result in
        (try
          (handler#report args#get_syncOpRevision args#get_category args#get_report);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("report", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportContacts (seqid, iprot, oprot) =
    let args = read_reportContacts_args iprot in
      iprot#readMessageEnd;
      let result = new reportContacts_result in
        (try
          result#set_success (handler#reportContacts args#get_syncOpRevision args#get_category args#get_contactReports args#get_actionType);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportGroups (seqid, iprot, oprot) =
    let args = read_reportGroups_args iprot in
      iprot#readMessageEnd;
      let result = new reportGroups_result in
        (try
          (handler#reportGroups args#get_syncOpRevision args#get_groups);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportGroups", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportProfile (seqid, iprot, oprot) =
    let args = read_reportProfile_args iprot in
      iprot#readMessageEnd;
      let result = new reportProfile_result in
        (try
          (handler#reportProfile args#get_syncOpRevision args#get_profile);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportProfile", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportRooms (seqid, iprot, oprot) =
    let args = read_reportRooms_args iprot in
      iprot#readMessageEnd;
      let result = new reportRooms_result in
        (try
          (handler#reportRooms args#get_syncOpRevision args#get_rooms);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportRooms", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findAndAddContactByMetaTag (seqid, iprot, oprot) =
    let args = read_findAndAddContactByMetaTag_args iprot in
      iprot#readMessageEnd;
      let result = new findAndAddContactByMetaTag_result in
        (try
          result#set_success (handler#findAndAddContactByMetaTag args#get_reqSeq args#get_userid args#get_reference);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findAndAddContactByMetaTag", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportSettings (seqid, iprot, oprot) =
    let args = read_reportSettings_args iprot in
      iprot#readMessageEnd;
      let result = new reportSettings_result in
        (try
          (handler#reportSettings args#get_syncOpRevision args#get_settings);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportSettings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportSpam (seqid, iprot, oprot) =
    let args = read_reportSpam_args iprot in
      iprot#readMessageEnd;
      let result = new reportSpam_result in
        (try
          (handler#reportSpam args#get_chatMid args#get_memberMids args#get_spammerReasons args#get_senderMids args#get_spamMessageIds args#get_spamMessages);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportSpam", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportSpammer (seqid, iprot, oprot) =
    let args = read_reportSpammer_args iprot in
      iprot#readMessageEnd;
      let result = new reportSpammer_result in
        (try
          (handler#reportSpammer args#get_spammerMid args#get_spammerReasons args#get_spamMessageIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportSpammer", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_requestAccountPasswordReset (seqid, iprot, oprot) =
    let args = read_requestAccountPasswordReset_args iprot in
      iprot#readMessageEnd;
      let result = new requestAccountPasswordReset_result in
        (try
          (handler#requestAccountPasswordReset args#get_provider args#get_identifier args#get_locale);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("requestAccountPasswordReset", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_requestEmailConfirmation (seqid, iprot, oprot) =
    let args = read_requestEmailConfirmation_args iprot in
      iprot#readMessageEnd;
      let result = new requestEmailConfirmation_result in
        (try
          result#set_success (handler#requestEmailConfirmation args#get_emailConfirmation);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("requestEmailConfirmation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_requestIdentityUnbind (seqid, iprot, oprot) =
    let args = read_requestIdentityUnbind_args iprot in
      iprot#readMessageEnd;
      let result = new requestIdentityUnbind_result in
        (try
          (handler#requestIdentityUnbind args#get_provider args#get_identifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("requestIdentityUnbind", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_resendEmailConfirmation (seqid, iprot, oprot) =
    let args = read_resendEmailConfirmation_args iprot in
      iprot#readMessageEnd;
      let result = new resendEmailConfirmation_result in
        (try
          result#set_success (handler#resendEmailConfirmation args#get_verifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("resendEmailConfirmation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_resendPinCode (seqid, iprot, oprot) =
    let args = read_resendPinCode_args iprot in
      iprot#readMessageEnd;
      let result = new resendPinCode_result in
        (try
          (handler#resendPinCode args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("resendPinCode", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_resendPinCodeBySMS (seqid, iprot, oprot) =
    let args = read_resendPinCodeBySMS_args iprot in
      iprot#readMessageEnd;
      let result = new resendPinCodeBySMS_result in
        (try
          (handler#resendPinCodeBySMS args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("resendPinCodeBySMS", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendChatChecked (seqid, iprot, oprot) =
    let args = read_sendChatChecked_args iprot in
      iprot#readMessageEnd;
      let result = new sendChatChecked_result in
        (try
          (handler#sendChatChecked args#get_seq args#get_consumer args#get_lastMessageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendChatChecked", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendMessageAwaitCommit (seqid, iprot, oprot) =
    let args = read_sendMessageAwaitCommit_args iprot in
      iprot#readMessageEnd;
      let result = new sendMessageAwaitCommit_result in
        (try
          result#set_success (handler#sendMessageAwaitCommit args#get_seq args#get_message);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendMessageAwaitCommit", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendChatRemoved (seqid, iprot, oprot) =
    let args = read_sendChatRemoved_args iprot in
      iprot#readMessageEnd;
      let result = new sendChatRemoved_result in
        (try
          (handler#sendChatRemoved args#get_seq args#get_consumer args#get_lastMessageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendChatRemoved", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendContentPreviewUpdated (seqid, iprot, oprot) =
    let args = read_sendContentPreviewUpdated_args iprot in
      iprot#readMessageEnd;
      let result = new sendContentPreviewUpdated_result in
        (try
          result#set_success (handler#sendContentPreviewUpdated args#get_esq args#get_messageId args#get_receiverMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendContentPreviewUpdated", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendContentReceipt (seqid, iprot, oprot) =
    let args = read_sendContentReceipt_args iprot in
      iprot#readMessageEnd;
      let result = new sendContentReceipt_result in
        (try
          (handler#sendContentReceipt args#get_seq args#get_consumer args#get_messageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendContentReceipt", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendDummyPush (seqid, iprot, oprot) =
    let _ = read_sendDummyPush_args iprot in
      iprot#readMessageEnd;
      let result = new sendDummyPush_result in
        (try
          (handler#sendDummyPush);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendDummyPush", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeE2EEPublicKey (seqid, iprot, oprot) =
    let args = read_removeE2EEPublicKey_args iprot in
      iprot#readMessageEnd;
      let result = new removeE2EEPublicKey_result in
        (try
          (handler#removeE2EEPublicKey args#get_publicKey);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeE2EEPublicKey", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_negotiateE2EEPublicKey (seqid, iprot, oprot) =
    let args = read_negotiateE2EEPublicKey_args iprot in
      iprot#readMessageEnd;
      let result = new negotiateE2EEPublicKey_result in
        (try
          result#set_success (handler#negotiateE2EEPublicKey args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("negotiateE2EEPublicKey", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getE2EEPublicKey (seqid, iprot, oprot) =
    let args = read_getE2EEPublicKey_args iprot in
      iprot#readMessageEnd;
      let result = new getE2EEPublicKey_result in
        (try
          result#set_success (handler#getE2EEPublicKey args#get_mid args#get_version args#get_keyId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getE2EEPublicKey", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_requestE2EEKeyExchange (seqid, iprot, oprot) =
    let args = read_requestE2EEKeyExchange_args iprot in
      iprot#readMessageEnd;
      let result = new requestE2EEKeyExchange_result in
        (try
          (handler#requestE2EEKeyExchange args#get_reqSeq args#get_temporalPublicKey args#get_publicKey args#get_verifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("requestE2EEKeyExchange", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getLastE2EEPublicKeys (seqid, iprot, oprot) =
    let args = read_getLastE2EEPublicKeys_args iprot in
      iprot#readMessageEnd;
      let result = new getLastE2EEPublicKeys_result in
        (try
          result#set_success (handler#getLastE2EEPublicKeys args#get_chatMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getLastE2EEPublicKeys", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerE2EEPublicKey (seqid, iprot, oprot) =
    let args = read_registerE2EEPublicKey_args iprot in
      iprot#readMessageEnd;
      let result = new registerE2EEPublicKey_result in
        (try
          result#set_success (handler#registerE2EEPublicKey args#get_reqSeq args#get_publicKey);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerE2EEPublicKey", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getE2EEPublicKeys (seqid, iprot, oprot) =
    let _ = read_getE2EEPublicKeys_args iprot in
      iprot#readMessageEnd;
      let result = new getE2EEPublicKeys_result in
        (try
          result#set_success (handler#getE2EEPublicKeys);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getE2EEPublicKeys", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getE2EEPublicKeysEx (seqid, iprot, oprot) =
    let args = read_getE2EEPublicKeysEx_args iprot in
      iprot#readMessageEnd;
      let result = new getE2EEPublicKeysEx_result in
        (try
          result#set_success (handler#getE2EEPublicKeysEx args#get_ignoreE2EEStatus);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getE2EEPublicKeysEx", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getReadMessageOpsInBulk (seqid, iprot, oprot) =
    let args = read_getReadMessageOpsInBulk_args iprot in
      iprot#readMessageEnd;
      let result = new getReadMessageOpsInBulk_result in
        (try
          result#set_success (handler#getReadMessageOpsInBulk args#get_chatIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getReadMessageOpsInBulk", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendEvent (seqid, iprot, oprot) =
    let args = read_sendEvent_args iprot in
      iprot#readMessageEnd;
      let result = new sendEvent_result in
        (try
          result#set_success (handler#sendEvent args#get_seq args#get_message);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendEvent", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendMessage (seqid, iprot, oprot) =
    let args = read_sendMessage_args iprot in
      iprot#readMessageEnd;
      let result = new sendMessage_result in
        (try
          result#set_success (handler#sendMessage args#get_seq args#get_message);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendMessageIgnored (seqid, iprot, oprot) =
    let args = read_sendMessageIgnored_args iprot in
      iprot#readMessageEnd;
      let result = new sendMessageIgnored_result in
        (try
          (handler#sendMessageIgnored args#get_seq args#get_consumer args#get_messageIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendMessageIgnored", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendMessageReceipt (seqid, iprot, oprot) =
    let args = read_sendMessageReceipt_args iprot in
      iprot#readMessageEnd;
      let result = new sendMessageReceipt_result in
        (try
          (handler#sendMessageReceipt args#get_seq args#get_consumer args#get_messageIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendMessageReceipt", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findContactByMetaTag (seqid, iprot, oprot) =
    let args = read_findContactByMetaTag_args iprot in
      iprot#readMessageEnd;
      let result = new findContactByMetaTag_result in
        (try
          result#set_success (handler#findContactByMetaTag args#get_userid args#get_reference);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findContactByMetaTag", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendMessageToMyHome (seqid, iprot, oprot) =
    let args = read_sendMessageToMyHome_args iprot in
      iprot#readMessageEnd;
      let result = new sendMessageToMyHome_result in
        (try
          result#set_success (handler#sendMessageToMyHome args#get_seq args#get_message);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendMessageToMyHome", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_setBuddyLocation (seqid, iprot, oprot) =
    let args = read_setBuddyLocation_args iprot in
      iprot#readMessageEnd;
      let result = new setBuddyLocation_result in
        (try
          (handler#setBuddyLocation args#get_mid args#get_index args#get_location);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("setBuddyLocation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_setIdentityCredential (seqid, iprot, oprot) =
    let args = read_setIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new setIdentityCredential_result in
        (try
          (handler#setIdentityCredential args#get_identifier args#get_verifier args#get_provider);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("setIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_setNotificationsEnabled (seqid, iprot, oprot) =
    let args = read_setNotificationsEnabled_args iprot in
      iprot#readMessageEnd;
      let result = new setNotificationsEnabled_result in
        (try
          (handler#setNotificationsEnabled args#get_reqSeq args#get_type args#get_target args#get_enablement);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("setNotificationsEnabled", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_startUpdateVerification (seqid, iprot, oprot) =
    let args = read_startUpdateVerification_args iprot in
      iprot#readMessageEnd;
      let result = new startUpdateVerification_result in
        (try
          result#set_success (handler#startUpdateVerification args#get_region args#get_carrier args#get_phone args#get_udidHash args#get_deviceInfo args#get_networkCode args#get_locale);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("startUpdateVerification", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_startVerification (seqid, iprot, oprot) =
    let args = read_startVerification_args iprot in
      iprot#readMessageEnd;
      let result = new startVerification_result in
        (try
          result#set_success (handler#startVerification args#get_region args#get_carrier args#get_phone args#get_udidHash args#get_deviceInfo args#get_networkCode args#get_mid args#get_locale args#get_simInfo args#get_oldUdidHash);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("startVerification", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateGroupPreferenceAttribute (seqid, iprot, oprot) =
    let args = read_updateGroupPreferenceAttribute_args iprot in
      iprot#readMessageEnd;
      let result = new updateGroupPreferenceAttribute_result in
        (try
          (handler#updateGroupPreferenceAttribute args#get_reqSeq args#get_groupMid args#get_updatedAttrs);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateGroupPreferenceAttribute", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createRoomV2 (seqid, iprot, oprot) =
    let args = read_createRoomV2_args iprot in
      iprot#readMessageEnd;
      let result = new createRoomV2_result in
        (try
          result#set_success (handler#createRoomV2 args#get_reqSeq args#get_contactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createRoomV2", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_storeUpdateProfileAttribute (seqid, iprot, oprot) =
    let args = read_storeUpdateProfileAttribute_args iprot in
      iprot#readMessageEnd;
      let result = new storeUpdateProfileAttribute_result in
        (try
          (handler#storeUpdateProfileAttribute args#get_seq args#get_profileAttribute args#get_value);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("storeUpdateProfileAttribute", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_syncContactBySnsIds (seqid, iprot, oprot) =
    let args = read_syncContactBySnsIds_args iprot in
      iprot#readMessageEnd;
      let result = new syncContactBySnsIds_result in
        (try
          result#set_success (handler#syncContactBySnsIds args#get_reqSeq args#get_modifications);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("syncContactBySnsIds", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_syncContacts (seqid, iprot, oprot) =
    let args = read_syncContacts_args iprot in
      iprot#readMessageEnd;
      let result = new syncContacts_result in
        (try
          result#set_success (handler#syncContacts args#get_reqSeq args#get_localContacts);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("syncContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_trySendMessage (seqid, iprot, oprot) =
    let args = read_trySendMessage_args iprot in
      iprot#readMessageEnd;
      let result = new trySendMessage_result in
        (try
          result#set_success (handler#trySendMessage args#get_seq args#get_message);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("trySendMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getNextMessagesV2 (seqid, iprot, oprot) =
    let args = read_getNextMessagesV2_args iprot in
      iprot#readMessageEnd;
      let result = new getNextMessagesV2_result in
        (try
          result#set_success (handler#getNextMessagesV2 args#get_messageBoxId args#get_startMessageId args#get_messagesCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getNextMessagesV2", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMessageBoxCompactWrapUpV2 (seqid, iprot, oprot) =
    let args = read_getMessageBoxCompactWrapUpV2_args iprot in
      iprot#readMessageEnd;
      let result = new getMessageBoxCompactWrapUpV2_result in
        (try
          result#set_success (handler#getMessageBoxCompactWrapUpV2 args#get_messageBoxId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMessageBoxCompactWrapUpV2", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getRecentMessagesV2 (seqid, iprot, oprot) =
    let args = read_getRecentMessagesV2_args iprot in
      iprot#readMessageEnd;
      let result = new getRecentMessagesV2_result in
        (try
          result#set_success (handler#getRecentMessagesV2 args#get_messageBoxId args#get_messagesCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getRecentMessagesV2", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_validateContactsOnBot (seqid, iprot, oprot) =
    let args = read_validateContactsOnBot_args iprot in
      iprot#readMessageEnd;
      let result = new validateContactsOnBot_result in
        (try
          result#set_success (handler#validateContactsOnBot args#get_contacts);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("validateContactsOnBot", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_tryFriendRequest (seqid, iprot, oprot) =
    let args = read_tryFriendRequest_args iprot in
      iprot#readMessageEnd;
      let result = new tryFriendRequest_result in
        (try
          (handler#tryFriendRequest args#get_midOrEMid args#get_method args#get_friendRequestParams);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("tryFriendRequest", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_unblockContact (seqid, iprot, oprot) =
    let args = read_unblockContact_args iprot in
      iprot#readMessageEnd;
      let result = new unblockContact_result in
        (try
          (handler#unblockContact args#get_reqSeq args#get_id);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("unblockContact", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_unblockRecommendation (seqid, iprot, oprot) =
    let args = read_unblockRecommendation_args iprot in
      iprot#readMessageEnd;
      let result = new unblockRecommendation_result in
        (try
          (handler#unblockRecommendation args#get_reqSeq args#get_id);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("unblockRecommendation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_unregisterUserAndDevice (seqid, iprot, oprot) =
    let _ = read_unregisterUserAndDevice_args iprot in
      iprot#readMessageEnd;
      let result = new unregisterUserAndDevice_result in
        (try
          result#set_success (handler#unregisterUserAndDevice);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("unregisterUserAndDevice", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateApnsDeviceToken (seqid, iprot, oprot) =
    let args = read_updateApnsDeviceToken_args iprot in
      iprot#readMessageEnd;
      let result = new updateApnsDeviceToken_result in
        (try
          (handler#updateApnsDeviceToken args#get_apnsDeviceToken);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateApnsDeviceToken", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateBuddySetting (seqid, iprot, oprot) =
    let args = read_updateBuddySetting_args iprot in
      iprot#readMessageEnd;
      let result = new updateBuddySetting_result in
        (try
          (handler#updateBuddySetting args#get_key args#get_value);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateBuddySetting", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateC2DMRegistrationId (seqid, iprot, oprot) =
    let args = read_updateC2DMRegistrationId_args iprot in
      iprot#readMessageEnd;
      let result = new updateC2DMRegistrationId_result in
        (try
          (handler#updateC2DMRegistrationId args#get_registrationId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateC2DMRegistrationId", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateContactSetting (seqid, iprot, oprot) =
    let args = read_updateContactSetting_args iprot in
      iprot#readMessageEnd;
      let result = new updateContactSetting_result in
        (try
          (handler#updateContactSetting args#get_reqSeq args#get_mid args#get_flag args#get_value);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateContactSetting", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateCustomModeSettings (seqid, iprot, oprot) =
    let args = read_updateCustomModeSettings_args iprot in
      iprot#readMessageEnd;
      let result = new updateCustomModeSettings_result in
        (try
          (handler#updateCustomModeSettings args#get_customMode args#get_paramMap);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateCustomModeSettings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateDeviceInfo (seqid, iprot, oprot) =
    let args = read_updateDeviceInfo_args iprot in
      iprot#readMessageEnd;
      let result = new updateDeviceInfo_result in
        (try
          (handler#updateDeviceInfo args#get_deviceUid args#get_deviceInfo);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateDeviceInfo", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateGroup (seqid, iprot, oprot) =
    let args = read_updateGroup_args iprot in
      iprot#readMessageEnd;
      let result = new updateGroup_result in
        (try
          (handler#updateGroup args#get_reqSeq args#get_group);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateGroup", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateNotificationToken (seqid, iprot, oprot) =
    let args = read_updateNotificationToken_args iprot in
      iprot#readMessageEnd;
      let result = new updateNotificationToken_result in
        (try
          (handler#updateNotificationToken args#get_type args#get_token);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateNotificationToken", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateNotificationTokenWithBytes (seqid, iprot, oprot) =
    let args = read_updateNotificationTokenWithBytes_args iprot in
      iprot#readMessageEnd;
      let result = new updateNotificationTokenWithBytes_result in
        (try
          (handler#updateNotificationTokenWithBytes args#get_type args#get_token);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateNotificationTokenWithBytes", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateProfile (seqid, iprot, oprot) =
    let args = read_updateProfile_args iprot in
      iprot#readMessageEnd;
      let result = new updateProfile_result in
        (try
          (handler#updateProfile args#get_reqSeq args#get_profile);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateProfile", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateProfileAttribute (seqid, iprot, oprot) =
    let args = read_updateProfileAttribute_args iprot in
      iprot#readMessageEnd;
      let result = new updateProfileAttribute_result in
        (try
          (handler#updateProfileAttribute args#get_reqSeq args#get_attr args#get_value);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateProfileAttribute", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateRegion (seqid, iprot, oprot) =
    let args = read_updateRegion_args iprot in
      iprot#readMessageEnd;
      let result = new updateRegion_result in
        (try
          (handler#updateRegion args#get_region);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateRegion", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSettings (seqid, iprot, oprot) =
    let args = read_updateSettings_args iprot in
      iprot#readMessageEnd;
      let result = new updateSettings_result in
        (try
          (handler#updateSettings args#get_reqSeq args#get_settings);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSettings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSettings2 (seqid, iprot, oprot) =
    let args = read_updateSettings2_args iprot in
      iprot#readMessageEnd;
      let result = new updateSettings2_result in
        (try
          result#set_success (handler#updateSettings2 args#get_reqSeq args#get_settings);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSettings2", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSettingsAttribute (seqid, iprot, oprot) =
    let args = read_updateSettingsAttribute_args iprot in
      iprot#readMessageEnd;
      let result = new updateSettingsAttribute_result in
        (try
          (handler#updateSettingsAttribute args#get_reqSeq args#get_attr args#get_value);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSettingsAttribute", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSettingsAttributes (seqid, iprot, oprot) =
    let args = read_updateSettingsAttributes_args iprot in
      iprot#readMessageEnd;
      let result = new updateSettingsAttributes_result in
        (try
          result#set_success (handler#updateSettingsAttributes args#get_reqSeq args#get_attrBitset args#get_settings);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSettingsAttributes", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_verifyIdentityCredential (seqid, iprot, oprot) =
    let args = read_verifyIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new verifyIdentityCredential_result in
        (try
          (handler#verifyIdentityCredential args#get_identityProvider args#get_identifier args#get_password);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("verifyIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_verifyIdentityCredentialWithResult (seqid, iprot, oprot) =
    let args = read_verifyIdentityCredentialWithResult_args iprot in
      iprot#readMessageEnd;
      let result = new verifyIdentityCredentialWithResult_result in
        (try
          result#set_success (handler#verifyIdentityCredentialWithResult args#get_identityCredential);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("verifyIdentityCredentialWithResult", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_verifyPhone (seqid, iprot, oprot) =
    let args = read_verifyPhone_args iprot in
      iprot#readMessageEnd;
      let result = new verifyPhone_result in
        (try
          result#set_success (handler#verifyPhone args#get_sessionId args#get_pinCode args#get_udidHash);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("verifyPhone", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_verifyQrcode (seqid, iprot, oprot) =
    let args = read_verifyQrcode_args iprot in
      iprot#readMessageEnd;
      let result = new verifyQrcode_result in
        (try
          result#set_success (handler#verifyQrcode args#get_verifier args#get_pinCode);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("verifyQrcode", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "getChatRoomAnnouncementsBulk" self#process_getChatRoomAnnouncementsBulk;
    Hashtbl.add processMap "getChatRoomAnnouncements" self#process_getChatRoomAnnouncements;
    Hashtbl.add processMap "createChatRoomAnnouncement" self#process_createChatRoomAnnouncement;
    Hashtbl.add processMap "removeChatRoomAnnouncement" self#process_removeChatRoomAnnouncement;
    Hashtbl.add processMap "unsendMessage" self#process_unsendMessage;
    Hashtbl.add processMap "getGroupWithoutMembers" self#process_getGroupWithoutMembers;
    Hashtbl.add processMap "requestResendMessage" self#process_requestResendMessage;
    Hashtbl.add processMap "respondResendMessage" self#process_respondResendMessage;
    Hashtbl.add processMap "acceptGroupInvitation" self#process_acceptGroupInvitation;
    Hashtbl.add processMap "acceptGroupInvitationByTicket" self#process_acceptGroupInvitationByTicket;
    Hashtbl.add processMap "acceptProximityMatches" self#process_acceptProximityMatches;
    Hashtbl.add processMap "acquireCallRoute" self#process_acquireCallRoute;
    Hashtbl.add processMap "acquireCallTicket" self#process_acquireCallTicket;
    Hashtbl.add processMap "acquireEncryptedAccessToken" self#process_acquireEncryptedAccessToken;
    Hashtbl.add processMap "addSnsId" self#process_addSnsId;
    Hashtbl.add processMap "blockContact" self#process_blockContact;
    Hashtbl.add processMap "blockRecommendation" self#process_blockRecommendation;
    Hashtbl.add processMap "cancelGroupInvitation" self#process_cancelGroupInvitation;
    Hashtbl.add processMap "changeVerificationMethod" self#process_changeVerificationMethod;
    Hashtbl.add processMap "clearIdentityCredential" self#process_clearIdentityCredential;
    Hashtbl.add processMap "clearMessageBox" self#process_clearMessageBox;
    Hashtbl.add processMap "closeProximityMatch" self#process_closeProximityMatch;
    Hashtbl.add processMap "commitSendMessage" self#process_commitSendMessage;
    Hashtbl.add processMap "commitSendMessages" self#process_commitSendMessages;
    Hashtbl.add processMap "commitUpdateProfile" self#process_commitUpdateProfile;
    Hashtbl.add processMap "confirmEmail" self#process_confirmEmail;
    Hashtbl.add processMap "createGroup" self#process_createGroup;
    Hashtbl.add processMap "createQrcodeBase64Image" self#process_createQrcodeBase64Image;
    Hashtbl.add processMap "createRoom" self#process_createRoom;
    Hashtbl.add processMap "createSession" self#process_createSession;
    Hashtbl.add processMap "fetchAnnouncements" self#process_fetchAnnouncements;
    Hashtbl.add processMap "fetchMessages" self#process_fetchMessages;
    Hashtbl.add processMap "fetchOperations" self#process_fetchOperations;
    Hashtbl.add processMap "fetchOps" self#process_fetchOps;
    Hashtbl.add processMap "findAndAddContactsByEmail" self#process_findAndAddContactsByEmail;
    Hashtbl.add processMap "findAndAddContactsByMid" self#process_findAndAddContactsByMid;
    Hashtbl.add processMap "findGroupByTicketV2" self#process_findGroupByTicketV2;
    Hashtbl.add processMap "findAndAddContactsByPhone" self#process_findAndAddContactsByPhone;
    Hashtbl.add processMap "getFriendRequests" self#process_getFriendRequests;
    Hashtbl.add processMap "removeFriendRequest" self#process_removeFriendRequest;
    Hashtbl.add processMap "findAndAddContactsByUserid" self#process_findAndAddContactsByUserid;
    Hashtbl.add processMap "findContactByUserid" self#process_findContactByUserid;
    Hashtbl.add processMap "findContactByUserTicket" self#process_findContactByUserTicket;
    Hashtbl.add processMap "findContactsByEmail" self#process_findContactsByEmail;
    Hashtbl.add processMap "findContactsByPhone" self#process_findContactsByPhone;
    Hashtbl.add processMap "findSnsIdUserStatus" self#process_findSnsIdUserStatus;
    Hashtbl.add processMap "finishUpdateVerification" self#process_finishUpdateVerification;
    Hashtbl.add processMap "generateUserTicket" self#process_generateUserTicket;
    Hashtbl.add processMap "destroyMessage" self#process_destroyMessage;
    Hashtbl.add processMap "getAcceptedProximityMatches" self#process_getAcceptedProximityMatches;
    Hashtbl.add processMap "getActiveBuddySubscriberIds" self#process_getActiveBuddySubscriberIds;
    Hashtbl.add processMap "getAllContactIds" self#process_getAllContactIds;
    Hashtbl.add processMap "getAuthQrcode" self#process_getAuthQrcode;
    Hashtbl.add processMap "getBlockedContactIds" self#process_getBlockedContactIds;
    Hashtbl.add processMap "registerWithPhoneNumber" self#process_registerWithPhoneNumber;
    Hashtbl.add processMap "registerWithPhoneNumberAndPassword" self#process_registerWithPhoneNumberAndPassword;
    Hashtbl.add processMap "getAnalyticsInfo" self#process_getAnalyticsInfo;
    Hashtbl.add processMap "reportClientStatistics" self#process_reportClientStatistics;
    Hashtbl.add processMap "verifyPhoneNumberForLogin" self#process_verifyPhoneNumberForLogin;
    Hashtbl.add processMap "verifyPhoneNumber" self#process_verifyPhoneNumber;
    Hashtbl.add processMap "getBlockedContactIdsByRange" self#process_getBlockedContactIdsByRange;
    Hashtbl.add processMap "getBlockedRecommendationIds" self#process_getBlockedRecommendationIds;
    Hashtbl.add processMap "getBuddyBlockerIds" self#process_getBuddyBlockerIds;
    Hashtbl.add processMap "getBuddyLocation" self#process_getBuddyLocation;
    Hashtbl.add processMap "getCompactContactsModifiedSince" self#process_getCompactContactsModifiedSince;
    Hashtbl.add processMap "getCompactGroup" self#process_getCompactGroup;
    Hashtbl.add processMap "getCompactRoom" self#process_getCompactRoom;
    Hashtbl.add processMap "getContact" self#process_getContact;
    Hashtbl.add processMap "getContacts" self#process_getContacts;
    Hashtbl.add processMap "getContactWithFriendRequestStatus" self#process_getContactWithFriendRequestStatus;
    Hashtbl.add processMap "getCountryWithRequestIp" self#process_getCountryWithRequestIp;
    Hashtbl.add processMap "getFavoriteMids" self#process_getFavoriteMids;
    Hashtbl.add processMap "getGroup" self#process_getGroup;
    Hashtbl.add processMap "getGroupIdsInvited" self#process_getGroupIdsInvited;
    Hashtbl.add processMap "getGroupIdsJoined" self#process_getGroupIdsJoined;
    Hashtbl.add processMap "getGroups" self#process_getGroups;
    Hashtbl.add processMap "getHiddenContactMids" self#process_getHiddenContactMids;
    Hashtbl.add processMap "getIdentityIdentifier" self#process_getIdentityIdentifier;
    Hashtbl.add processMap "getLastAnnouncementIndex" self#process_getLastAnnouncementIndex;
    Hashtbl.add processMap "getLastOpRevision" self#process_getLastOpRevision;
    Hashtbl.add processMap "getSuggestRevisions" self#process_getSuggestRevisions;
    Hashtbl.add processMap "getPreviousMessagesV2WithReadCount" self#process_getPreviousMessagesV2WithReadCount;
    Hashtbl.add processMap "getMessageBox" self#process_getMessageBox;
    Hashtbl.add processMap "getMessageBoxCompactWrapUp" self#process_getMessageBoxCompactWrapUp;
    Hashtbl.add processMap "getMessageBoxCompactWrapUpList" self#process_getMessageBoxCompactWrapUpList;
    Hashtbl.add processMap "getMessageBoxList" self#process_getMessageBoxList;
    Hashtbl.add processMap "getMessageBoxListByStatus" self#process_getMessageBoxListByStatus;
    Hashtbl.add processMap "getMessageBoxWrapUp" self#process_getMessageBoxWrapUp;
    Hashtbl.add processMap "getMessageBoxWrapUpList" self#process_getMessageBoxWrapUpList;
    Hashtbl.add processMap "getMessagesBySequenceNumber" self#process_getMessagesBySequenceNumber;
    Hashtbl.add processMap "getNextMessages" self#process_getNextMessages;
    Hashtbl.add processMap "getNotificationPolicy" self#process_getNotificationPolicy;
    Hashtbl.add processMap "getPreviousMessages" self#process_getPreviousMessages;
    Hashtbl.add processMap "getProfile" self#process_getProfile;
    Hashtbl.add processMap "getProximityMatchCandidateList" self#process_getProximityMatchCandidateList;
    Hashtbl.add processMap "getProximityMatchCandidates" self#process_getProximityMatchCandidates;
    Hashtbl.add processMap "getRecentMessages" self#process_getRecentMessages;
    Hashtbl.add processMap "getRecommendationIds" self#process_getRecommendationIds;
    Hashtbl.add processMap "getRoom" self#process_getRoom;
    Hashtbl.add processMap "getRSAKeyInfo" self#process_getRSAKeyInfo;
    Hashtbl.add processMap "getServerTime" self#process_getServerTime;
    Hashtbl.add processMap "getSessions" self#process_getSessions;
    Hashtbl.add processMap "getSettings" self#process_getSettings;
    Hashtbl.add processMap "getGroupsV2" self#process_getGroupsV2;
    Hashtbl.add processMap "getSettingsAttributes" self#process_getSettingsAttributes;
    Hashtbl.add processMap "getSystemConfiguration" self#process_getSystemConfiguration;
    Hashtbl.add processMap "getUserTicket" self#process_getUserTicket;
    Hashtbl.add processMap "getWapInvitation" self#process_getWapInvitation;
    Hashtbl.add processMap "invalidateUserTicket" self#process_invalidateUserTicket;
    Hashtbl.add processMap "inviteFriendsBySms" self#process_inviteFriendsBySms;
    Hashtbl.add processMap "inviteIntoGroup" self#process_inviteIntoGroup;
    Hashtbl.add processMap "inviteIntoRoom" self#process_inviteIntoRoom;
    Hashtbl.add processMap "inviteViaEmail" self#process_inviteViaEmail;
    Hashtbl.add processMap "isIdentityIdentifierAvailable" self#process_isIdentityIdentifierAvailable;
    Hashtbl.add processMap "isUseridAvailable" self#process_isUseridAvailable;
    Hashtbl.add processMap "kickoutFromGroup" self#process_kickoutFromGroup;
    Hashtbl.add processMap "reissueGroupTicket" self#process_reissueGroupTicket;
    Hashtbl.add processMap "findGroupByTicket" self#process_findGroupByTicket;
    Hashtbl.add processMap "leaveGroup" self#process_leaveGroup;
    Hashtbl.add processMap "leaveRoom" self#process_leaveRoom;
    Hashtbl.add processMap "loginWithIdentityCredential" self#process_loginWithIdentityCredential;
    Hashtbl.add processMap "loginWithIdentityCredentialForCertificate" self#process_loginWithIdentityCredentialForCertificate;
    Hashtbl.add processMap "loginWithVerifier" self#process_loginWithVerifier;
    Hashtbl.add processMap "loginWithVerifierForCerificate" self#process_loginWithVerifierForCerificate;
    Hashtbl.add processMap "loginWithVerifierForCertificate" self#process_loginWithVerifierForCertificate;
    Hashtbl.add processMap "logout" self#process_logout;
    Hashtbl.add processMap "logoutSession" self#process_logoutSession;
    Hashtbl.add processMap "noop" self#process_noop;
    Hashtbl.add processMap "notifiedRedirect" self#process_notifiedRedirect;
    Hashtbl.add processMap "notifyBuddyOnAir" self#process_notifyBuddyOnAir;
    Hashtbl.add processMap "notifyIndividualEvent" self#process_notifyIndividualEvent;
    Hashtbl.add processMap "notifyInstalled" self#process_notifyInstalled;
    Hashtbl.add processMap "notifyRegistrationComplete" self#process_notifyRegistrationComplete;
    Hashtbl.add processMap "notifySleep" self#process_notifySleep;
    Hashtbl.add processMap "notifyUpdated" self#process_notifyUpdated;
    Hashtbl.add processMap "openProximityMatch" self#process_openProximityMatch;
    Hashtbl.add processMap "registerBuddyUser" self#process_registerBuddyUser;
    Hashtbl.add processMap "registerBuddyUserid" self#process_registerBuddyUserid;
    Hashtbl.add processMap "registerDevice" self#process_registerDevice;
    Hashtbl.add processMap "registerDeviceWithIdentityCredential" self#process_registerDeviceWithIdentityCredential;
    Hashtbl.add processMap "registerDeviceWithoutPhoneNumber" self#process_registerDeviceWithoutPhoneNumber;
    Hashtbl.add processMap "registerDeviceWithoutPhoneNumberWithIdentityCredential" self#process_registerDeviceWithoutPhoneNumberWithIdentityCredential;
    Hashtbl.add processMap "registerUserid" self#process_registerUserid;
    Hashtbl.add processMap "registerWapDevice" self#process_registerWapDevice;
    Hashtbl.add processMap "registerWithExistingSnsIdAndIdentityCredential" self#process_registerWithExistingSnsIdAndIdentityCredential;
    Hashtbl.add processMap "registerWithSnsId" self#process_registerWithSnsId;
    Hashtbl.add processMap "registerWithSnsIdAndIdentityCredential" self#process_registerWithSnsIdAndIdentityCredential;
    Hashtbl.add processMap "reissueDeviceCredential" self#process_reissueDeviceCredential;
    Hashtbl.add processMap "reissueUserTicket" self#process_reissueUserTicket;
    Hashtbl.add processMap "getMessageReadRange" self#process_getMessageReadRange;
    Hashtbl.add processMap "rejectGroupInvitation" self#process_rejectGroupInvitation;
    Hashtbl.add processMap "releaseSession" self#process_releaseSession;
    Hashtbl.add processMap "removeAllMessages" self#process_removeAllMessages;
    Hashtbl.add processMap "removeBuddyLocation" self#process_removeBuddyLocation;
    Hashtbl.add processMap "removeMessage" self#process_removeMessage;
    Hashtbl.add processMap "makeUserAddMyselfAsContact" self#process_makeUserAddMyselfAsContact;
    Hashtbl.add processMap "removeMessageFromMyHome" self#process_removeMessageFromMyHome;
    Hashtbl.add processMap "removeSnsId" self#process_removeSnsId;
    Hashtbl.add processMap "report" self#process_report;
    Hashtbl.add processMap "reportContacts" self#process_reportContacts;
    Hashtbl.add processMap "reportGroups" self#process_reportGroups;
    Hashtbl.add processMap "reportProfile" self#process_reportProfile;
    Hashtbl.add processMap "reportRooms" self#process_reportRooms;
    Hashtbl.add processMap "findAndAddContactByMetaTag" self#process_findAndAddContactByMetaTag;
    Hashtbl.add processMap "reportSettings" self#process_reportSettings;
    Hashtbl.add processMap "reportSpam" self#process_reportSpam;
    Hashtbl.add processMap "reportSpammer" self#process_reportSpammer;
    Hashtbl.add processMap "requestAccountPasswordReset" self#process_requestAccountPasswordReset;
    Hashtbl.add processMap "requestEmailConfirmation" self#process_requestEmailConfirmation;
    Hashtbl.add processMap "requestIdentityUnbind" self#process_requestIdentityUnbind;
    Hashtbl.add processMap "resendEmailConfirmation" self#process_resendEmailConfirmation;
    Hashtbl.add processMap "resendPinCode" self#process_resendPinCode;
    Hashtbl.add processMap "resendPinCodeBySMS" self#process_resendPinCodeBySMS;
    Hashtbl.add processMap "sendChatChecked" self#process_sendChatChecked;
    Hashtbl.add processMap "sendMessageAwaitCommit" self#process_sendMessageAwaitCommit;
    Hashtbl.add processMap "sendChatRemoved" self#process_sendChatRemoved;
    Hashtbl.add processMap "sendContentPreviewUpdated" self#process_sendContentPreviewUpdated;
    Hashtbl.add processMap "sendContentReceipt" self#process_sendContentReceipt;
    Hashtbl.add processMap "sendDummyPush" self#process_sendDummyPush;
    Hashtbl.add processMap "removeE2EEPublicKey" self#process_removeE2EEPublicKey;
    Hashtbl.add processMap "negotiateE2EEPublicKey" self#process_negotiateE2EEPublicKey;
    Hashtbl.add processMap "getE2EEPublicKey" self#process_getE2EEPublicKey;
    Hashtbl.add processMap "requestE2EEKeyExchange" self#process_requestE2EEKeyExchange;
    Hashtbl.add processMap "getLastE2EEPublicKeys" self#process_getLastE2EEPublicKeys;
    Hashtbl.add processMap "registerE2EEPublicKey" self#process_registerE2EEPublicKey;
    Hashtbl.add processMap "getE2EEPublicKeys" self#process_getE2EEPublicKeys;
    Hashtbl.add processMap "getE2EEPublicKeysEx" self#process_getE2EEPublicKeysEx;
    Hashtbl.add processMap "getReadMessageOpsInBulk" self#process_getReadMessageOpsInBulk;
    Hashtbl.add processMap "sendEvent" self#process_sendEvent;
    Hashtbl.add processMap "sendMessage" self#process_sendMessage;
    Hashtbl.add processMap "sendMessageIgnored" self#process_sendMessageIgnored;
    Hashtbl.add processMap "sendMessageReceipt" self#process_sendMessageReceipt;
    Hashtbl.add processMap "findContactByMetaTag" self#process_findContactByMetaTag;
    Hashtbl.add processMap "sendMessageToMyHome" self#process_sendMessageToMyHome;
    Hashtbl.add processMap "setBuddyLocation" self#process_setBuddyLocation;
    Hashtbl.add processMap "setIdentityCredential" self#process_setIdentityCredential;
    Hashtbl.add processMap "setNotificationsEnabled" self#process_setNotificationsEnabled;
    Hashtbl.add processMap "startUpdateVerification" self#process_startUpdateVerification;
    Hashtbl.add processMap "startVerification" self#process_startVerification;
    Hashtbl.add processMap "updateGroupPreferenceAttribute" self#process_updateGroupPreferenceAttribute;
    Hashtbl.add processMap "createRoomV2" self#process_createRoomV2;
    Hashtbl.add processMap "storeUpdateProfileAttribute" self#process_storeUpdateProfileAttribute;
    Hashtbl.add processMap "syncContactBySnsIds" self#process_syncContactBySnsIds;
    Hashtbl.add processMap "syncContacts" self#process_syncContacts;
    Hashtbl.add processMap "trySendMessage" self#process_trySendMessage;
    Hashtbl.add processMap "getNextMessagesV2" self#process_getNextMessagesV2;
    Hashtbl.add processMap "getMessageBoxCompactWrapUpV2" self#process_getMessageBoxCompactWrapUpV2;
    Hashtbl.add processMap "getRecentMessagesV2" self#process_getRecentMessagesV2;
    Hashtbl.add processMap "validateContactsOnBot" self#process_validateContactsOnBot;
    Hashtbl.add processMap "tryFriendRequest" self#process_tryFriendRequest;
    Hashtbl.add processMap "unblockContact" self#process_unblockContact;
    Hashtbl.add processMap "unblockRecommendation" self#process_unblockRecommendation;
    Hashtbl.add processMap "unregisterUserAndDevice" self#process_unregisterUserAndDevice;
    Hashtbl.add processMap "updateApnsDeviceToken" self#process_updateApnsDeviceToken;
    Hashtbl.add processMap "updateBuddySetting" self#process_updateBuddySetting;
    Hashtbl.add processMap "updateC2DMRegistrationId" self#process_updateC2DMRegistrationId;
    Hashtbl.add processMap "updateContactSetting" self#process_updateContactSetting;
    Hashtbl.add processMap "updateCustomModeSettings" self#process_updateCustomModeSettings;
    Hashtbl.add processMap "updateDeviceInfo" self#process_updateDeviceInfo;
    Hashtbl.add processMap "updateGroup" self#process_updateGroup;
    Hashtbl.add processMap "updateNotificationToken" self#process_updateNotificationToken;
    Hashtbl.add processMap "updateNotificationTokenWithBytes" self#process_updateNotificationTokenWithBytes;
    Hashtbl.add processMap "updateProfile" self#process_updateProfile;
    Hashtbl.add processMap "updateProfileAttribute" self#process_updateProfileAttribute;
    Hashtbl.add processMap "updateRegion" self#process_updateRegion;
    Hashtbl.add processMap "updateSettings" self#process_updateSettings;
    Hashtbl.add processMap "updateSettings2" self#process_updateSettings2;
    Hashtbl.add processMap "updateSettingsAttribute" self#process_updateSettingsAttribute;
    Hashtbl.add processMap "updateSettingsAttributes" self#process_updateSettingsAttributes;
    Hashtbl.add processMap "verifyIdentityCredential" self#process_verifyIdentityCredential;
    Hashtbl.add processMap "verifyIdentityCredentialWithResult" self#process_verifyIdentityCredentialWithResult;
    Hashtbl.add processMap "verifyPhone" self#process_verifyPhone;
    Hashtbl.add processMap "verifyQrcode" self#process_verifyQrcode;
end

