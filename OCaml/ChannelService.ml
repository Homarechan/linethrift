(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class issueOTP_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "issueOTP_args.channelId") | Some _x6346 -> _x6346
  method set_channelId _x6346 = _channelId <- Some _x6346
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueOTP_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueOTP_args (iprot : Protocol.t) =
  let _str6349 = new issueOTP_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6350,_id6351) = iprot#readFieldBegin in
        if _t6350 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6351 with 
          | 2 -> (if _t6350 = Protocol.T_STRING then
              _str6349#set_channelId iprot#readString
            else
              iprot#skip _t6350)
          | _ -> iprot#skip _t6350);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6349

class issueOTP_result =
object (self)
  val mutable _success : oTPResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "issueOTP_result.success") | Some _x6352 -> _x6352
  method set_success _x6352 = _success <- Some _x6352
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "issueOTP_result.e") | Some _x6353 -> _x6353
  method set_e _x6353 = _e <- Some _x6353
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueOTP_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueOTP_result (iprot : Protocol.t) =
  let _str6356 = new issueOTP_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6357,_id6358) = iprot#readFieldBegin in
        if _t6357 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6358 with 
          | 0 -> (if _t6357 = Protocol.T_STRUCT then
              _str6356#set_success (read_oTPResult iprot)
            else
              iprot#skip _t6357)
          | 1 -> (if _t6357 = Protocol.T_STRUCT then
              _str6356#set_e (read_channelException iprot)
            else
              iprot#skip _t6357)
          | _ -> iprot#skip _t6357);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6356

class approveChannelAndIssueChannelToken_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "approveChannelAndIssueChannelToken_args.channelId") | Some _x6359 -> _x6359
  method set_channelId _x6359 = _channelId <- Some _x6359
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "approveChannelAndIssueChannelToken_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_approveChannelAndIssueChannelToken_args (iprot : Protocol.t) =
  let _str6362 = new approveChannelAndIssueChannelToken_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6363,_id6364) = iprot#readFieldBegin in
        if _t6363 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6364 with 
          | 1 -> (if _t6363 = Protocol.T_STRING then
              _str6362#set_channelId iprot#readString
            else
              iprot#skip _t6363)
          | _ -> iprot#skip _t6363);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6362

class approveChannelAndIssueChannelToken_result =
object (self)
  val mutable _success : channelToken option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "approveChannelAndIssueChannelToken_result.success") | Some _x6365 -> _x6365
  method set_success _x6365 = _success <- Some _x6365
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "approveChannelAndIssueChannelToken_result.e") | Some _x6366 -> _x6366
  method set_e _x6366 = _e <- Some _x6366
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "approveChannelAndIssueChannelToken_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_approveChannelAndIssueChannelToken_result (iprot : Protocol.t) =
  let _str6369 = new approveChannelAndIssueChannelToken_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6370,_id6371) = iprot#readFieldBegin in
        if _t6370 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6371 with 
          | 0 -> (if _t6370 = Protocol.T_STRUCT then
              _str6369#set_success (read_channelToken iprot)
            else
              iprot#skip _t6370)
          | 1 -> (if _t6370 = Protocol.T_STRUCT then
              _str6369#set_e (read_channelException iprot)
            else
              iprot#skip _t6370)
          | _ -> iprot#skip _t6370);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6369

class approveChannelAndIssueRequestToken_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "approveChannelAndIssueRequestToken_args.channelId") | Some _x6372 -> _x6372
  method set_channelId _x6372 = _channelId <- Some _x6372
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _otpId : string option = None
  method get_otpId = _otpId
  method grab_otpId = match _otpId with None->raise (Field_empty "approveChannelAndIssueRequestToken_args.otpId") | Some _x6373 -> _x6373
  method set_otpId _x6373 = _otpId <- Some _x6373
  method unset_otpId = _otpId <- None
  method reset_otpId = _otpId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "approveChannelAndIssueRequestToken_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _otpId with None -> () | Some _v -> 
      oprot#writeFieldBegin("otpId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_approveChannelAndIssueRequestToken_args (iprot : Protocol.t) =
  let _str6376 = new approveChannelAndIssueRequestToken_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6377,_id6378) = iprot#readFieldBegin in
        if _t6377 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6378 with 
          | 1 -> (if _t6377 = Protocol.T_STRING then
              _str6376#set_channelId iprot#readString
            else
              iprot#skip _t6377)
          | 2 -> (if _t6377 = Protocol.T_STRING then
              _str6376#set_otpId iprot#readString
            else
              iprot#skip _t6377)
          | _ -> iprot#skip _t6377);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6376

class approveChannelAndIssueRequestToken_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "approveChannelAndIssueRequestToken_result.success") | Some _x6379 -> _x6379
  method set_success _x6379 = _success <- Some _x6379
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "approveChannelAndIssueRequestToken_result.e") | Some _x6380 -> _x6380
  method set_e _x6380 = _e <- Some _x6380
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "approveChannelAndIssueRequestToken_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_approveChannelAndIssueRequestToken_result (iprot : Protocol.t) =
  let _str6383 = new approveChannelAndIssueRequestToken_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6384,_id6385) = iprot#readFieldBegin in
        if _t6384 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6385 with 
          | 0 -> (if _t6384 = Protocol.T_STRING then
              _str6383#set_success iprot#readString
            else
              iprot#skip _t6384)
          | 1 -> (if _t6384 = Protocol.T_STRUCT then
              _str6383#set_e (read_channelException iprot)
            else
              iprot#skip _t6384)
          | _ -> iprot#skip _t6384);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6383

class fetchNotificationItems_args =
object (self)
  val mutable _localRev : Int64.t option = None
  method get_localRev = _localRev
  method grab_localRev = match _localRev with None->raise (Field_empty "fetchNotificationItems_args.localRev") | Some _x6386 -> _x6386
  method set_localRev _x6386 = _localRev <- Some _x6386
  method unset_localRev = _localRev <- None
  method reset_localRev = _localRev <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchNotificationItems_args";
    (match _localRev with None -> () | Some _v -> 
      oprot#writeFieldBegin("localRev",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchNotificationItems_args (iprot : Protocol.t) =
  let _str6389 = new fetchNotificationItems_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6390,_id6391) = iprot#readFieldBegin in
        if _t6390 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6391 with 
          | 2 -> (if _t6390 = Protocol.T_I64 then
              _str6389#set_localRev iprot#readI64
            else
              iprot#skip _t6390)
          | _ -> iprot#skip _t6390);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6389

class fetchNotificationItems_result =
object (self)
  val mutable _success : notificationFetchResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "fetchNotificationItems_result.success") | Some _x6392 -> _x6392
  method set_success _x6392 = _success <- Some _x6392
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "fetchNotificationItems_result.e") | Some _x6393 -> _x6393
  method set_e _x6393 = _e <- Some _x6393
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchNotificationItems_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchNotificationItems_result (iprot : Protocol.t) =
  let _str6396 = new fetchNotificationItems_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6397,_id6398) = iprot#readFieldBegin in
        if _t6397 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6398 with 
          | 0 -> (if _t6397 = Protocol.T_STRUCT then
              _str6396#set_success (read_notificationFetchResult iprot)
            else
              iprot#skip _t6397)
          | 1 -> (if _t6397 = Protocol.T_STRUCT then
              _str6396#set_e (read_channelException iprot)
            else
              iprot#skip _t6397)
          | _ -> iprot#skip _t6397);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6396

class getApprovedChannels_args =
object (self)
  val mutable _lastSynced : Int64.t option = None
  method get_lastSynced = _lastSynced
  method grab_lastSynced = match _lastSynced with None->raise (Field_empty "getApprovedChannels_args.lastSynced") | Some _x6399 -> _x6399
  method set_lastSynced _x6399 = _lastSynced <- Some _x6399
  method unset_lastSynced = _lastSynced <- None
  method reset_lastSynced = _lastSynced <- None

  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "getApprovedChannels_args.locale") | Some _x6400 -> _x6400
  method set_locale _x6400 = _locale <- Some _x6400
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getApprovedChannels_args";
    (match _lastSynced with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastSynced",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getApprovedChannels_args (iprot : Protocol.t) =
  let _str6403 = new getApprovedChannels_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6404,_id6405) = iprot#readFieldBegin in
        if _t6404 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6405 with 
          | 2 -> (if _t6404 = Protocol.T_I64 then
              _str6403#set_lastSynced iprot#readI64
            else
              iprot#skip _t6404)
          | 3 -> (if _t6404 = Protocol.T_STRING then
              _str6403#set_locale iprot#readString
            else
              iprot#skip _t6404)
          | _ -> iprot#skip _t6404);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6403

class getApprovedChannels_result =
object (self)
  val mutable _success : approvedChannelInfos option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getApprovedChannels_result.success") | Some _x6406 -> _x6406
  method set_success _x6406 = _success <- Some _x6406
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getApprovedChannels_result.e") | Some _x6407 -> _x6407
  method set_e _x6407 = _e <- Some _x6407
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getApprovedChannels_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getApprovedChannels_result (iprot : Protocol.t) =
  let _str6410 = new getApprovedChannels_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6411,_id6412) = iprot#readFieldBegin in
        if _t6411 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6412 with 
          | 0 -> (if _t6411 = Protocol.T_STRUCT then
              _str6410#set_success (read_approvedChannelInfos iprot)
            else
              iprot#skip _t6411)
          | 1 -> (if _t6411 = Protocol.T_STRUCT then
              _str6410#set_e (read_channelException iprot)
            else
              iprot#skip _t6411)
          | _ -> iprot#skip _t6411);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6410

class getChannelInfo_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "getChannelInfo_args.channelId") | Some _x6413 -> _x6413
  method set_channelId _x6413 = _channelId <- Some _x6413
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "getChannelInfo_args.locale") | Some _x6414 -> _x6414
  method set_locale _x6414 = _locale <- Some _x6414
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChannelInfo_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChannelInfo_args (iprot : Protocol.t) =
  let _str6417 = new getChannelInfo_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6418,_id6419) = iprot#readFieldBegin in
        if _t6418 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6419 with 
          | 2 -> (if _t6418 = Protocol.T_STRING then
              _str6417#set_channelId iprot#readString
            else
              iprot#skip _t6418)
          | 3 -> (if _t6418 = Protocol.T_STRING then
              _str6417#set_locale iprot#readString
            else
              iprot#skip _t6418)
          | _ -> iprot#skip _t6418);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6417

class getChannelInfo_result =
object (self)
  val mutable _success : channelInfo option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getChannelInfo_result.success") | Some _x6420 -> _x6420
  method set_success _x6420 = _success <- Some _x6420
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getChannelInfo_result.e") | Some _x6421 -> _x6421
  method set_e _x6421 = _e <- Some _x6421
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChannelInfo_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChannelInfo_result (iprot : Protocol.t) =
  let _str6424 = new getChannelInfo_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6425,_id6426) = iprot#readFieldBegin in
        if _t6425 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6426 with 
          | 0 -> (if _t6425 = Protocol.T_STRUCT then
              _str6424#set_success (read_channelInfo iprot)
            else
              iprot#skip _t6425)
          | 1 -> (if _t6425 = Protocol.T_STRUCT then
              _str6424#set_e (read_channelException iprot)
            else
              iprot#skip _t6425)
          | _ -> iprot#skip _t6425);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6424

class getChannelNotificationSetting_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "getChannelNotificationSetting_args.channelId") | Some _x6427 -> _x6427
  method set_channelId _x6427 = _channelId <- Some _x6427
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "getChannelNotificationSetting_args.locale") | Some _x6428 -> _x6428
  method set_locale _x6428 = _locale <- Some _x6428
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChannelNotificationSetting_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChannelNotificationSetting_args (iprot : Protocol.t) =
  let _str6431 = new getChannelNotificationSetting_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6432,_id6433) = iprot#readFieldBegin in
        if _t6432 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6433 with 
          | 1 -> (if _t6432 = Protocol.T_STRING then
              _str6431#set_channelId iprot#readString
            else
              iprot#skip _t6432)
          | 2 -> (if _t6432 = Protocol.T_STRING then
              _str6431#set_locale iprot#readString
            else
              iprot#skip _t6432)
          | _ -> iprot#skip _t6432);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6431

class getChannelNotificationSetting_result =
object (self)
  val mutable _success : channelNotificationSetting option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getChannelNotificationSetting_result.success") | Some _x6434 -> _x6434
  method set_success _x6434 = _success <- Some _x6434
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getChannelNotificationSetting_result.e") | Some _x6435 -> _x6435
  method set_e _x6435 = _e <- Some _x6435
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChannelNotificationSetting_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChannelNotificationSetting_result (iprot : Protocol.t) =
  let _str6438 = new getChannelNotificationSetting_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6439,_id6440) = iprot#readFieldBegin in
        if _t6439 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6440 with 
          | 0 -> (if _t6439 = Protocol.T_STRUCT then
              _str6438#set_success (read_channelNotificationSetting iprot)
            else
              iprot#skip _t6439)
          | 1 -> (if _t6439 = Protocol.T_STRUCT then
              _str6438#set_e (read_channelException iprot)
            else
              iprot#skip _t6439)
          | _ -> iprot#skip _t6439);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6438

class getChannelNotificationSettings_args =
object (self)
  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "getChannelNotificationSettings_args.locale") | Some _x6441 -> _x6441
  method set_locale _x6441 = _locale <- Some _x6441
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChannelNotificationSettings_args";
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChannelNotificationSettings_args (iprot : Protocol.t) =
  let _str6444 = new getChannelNotificationSettings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6445,_id6446) = iprot#readFieldBegin in
        if _t6445 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6446 with 
          | 1 -> (if _t6445 = Protocol.T_STRING then
              _str6444#set_locale iprot#readString
            else
              iprot#skip _t6445)
          | _ -> iprot#skip _t6445);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6444

class getChannelNotificationSettings_result =
object (self)
  val mutable _success : channelNotificationSetting list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getChannelNotificationSettings_result.success") | Some _x6447 -> _x6447
  method set_success _x6447 = _success <- Some _x6447
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getChannelNotificationSettings_result.e") | Some _x6448 -> _x6448
  method set_e _x6448 = _e <- Some _x6448
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChannelNotificationSettings_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter6451 ->         _iter6451#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChannelNotificationSettings_result (iprot : Protocol.t) =
  let _str6452 = new getChannelNotificationSettings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6453,_id6454) = iprot#readFieldBegin in
        if _t6453 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6454 with 
          | 0 -> (if _t6453 = Protocol.T_LIST then
              _str6452#set_success 
                (let (_etype6458,_size6455) = iprot#readListBegin in
                  let _con6459 = (Array.to_list (Array.init _size6455 (fun _ -> (read_channelNotificationSetting iprot)))) in
                    iprot#readListEnd; _con6459)
            else
              iprot#skip _t6453)
          | 1 -> (if _t6453 = Protocol.T_STRUCT then
              _str6452#set_e (read_channelException iprot)
            else
              iprot#skip _t6453)
          | _ -> iprot#skip _t6453);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6452

class getChannels_args =
object (self)
  val mutable _lastSynced : Int64.t option = None
  method get_lastSynced = _lastSynced
  method grab_lastSynced = match _lastSynced with None->raise (Field_empty "getChannels_args.lastSynced") | Some _x6460 -> _x6460
  method set_lastSynced _x6460 = _lastSynced <- Some _x6460
  method unset_lastSynced = _lastSynced <- None
  method reset_lastSynced = _lastSynced <- None

  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "getChannels_args.locale") | Some _x6461 -> _x6461
  method set_locale _x6461 = _locale <- Some _x6461
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChannels_args";
    (match _lastSynced with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastSynced",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChannels_args (iprot : Protocol.t) =
  let _str6464 = new getChannels_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6465,_id6466) = iprot#readFieldBegin in
        if _t6465 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6466 with 
          | 2 -> (if _t6465 = Protocol.T_I64 then
              _str6464#set_lastSynced iprot#readI64
            else
              iprot#skip _t6465)
          | 3 -> (if _t6465 = Protocol.T_STRING then
              _str6464#set_locale iprot#readString
            else
              iprot#skip _t6465)
          | _ -> iprot#skip _t6465);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6464

class getChannels_result =
object (self)
  val mutable _success : channelInfos option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getChannels_result.success") | Some _x6467 -> _x6467
  method set_success _x6467 = _success <- Some _x6467
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getChannels_result.e") | Some _x6468 -> _x6468
  method set_e _x6468 = _e <- Some _x6468
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChannels_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChannels_result (iprot : Protocol.t) =
  let _str6471 = new getChannels_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6472,_id6473) = iprot#readFieldBegin in
        if _t6472 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6473 with 
          | 0 -> (if _t6472 = Protocol.T_STRUCT then
              _str6471#set_success (read_channelInfos iprot)
            else
              iprot#skip _t6472)
          | 1 -> (if _t6472 = Protocol.T_STRUCT then
              _str6471#set_e (read_channelException iprot)
            else
              iprot#skip _t6472)
          | _ -> iprot#skip _t6472);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6471

class getDomains_args =
object (self)
  val mutable _lastSynced : Int64.t option = None
  method get_lastSynced = _lastSynced
  method grab_lastSynced = match _lastSynced with None->raise (Field_empty "getDomains_args.lastSynced") | Some _x6474 -> _x6474
  method set_lastSynced _x6474 = _lastSynced <- Some _x6474
  method unset_lastSynced = _lastSynced <- None
  method reset_lastSynced = _lastSynced <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getDomains_args";
    (match _lastSynced with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastSynced",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getDomains_args (iprot : Protocol.t) =
  let _str6477 = new getDomains_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6478,_id6479) = iprot#readFieldBegin in
        if _t6478 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6479 with 
          | 2 -> (if _t6478 = Protocol.T_I64 then
              _str6477#set_lastSynced iprot#readI64
            else
              iprot#skip _t6478)
          | _ -> iprot#skip _t6478);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6477

class getDomains_result =
object (self)
  val mutable _success : channelDomains option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getDomains_result.success") | Some _x6480 -> _x6480
  method set_success _x6480 = _success <- Some _x6480
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getDomains_result.e") | Some _x6481 -> _x6481
  method set_e _x6481 = _e <- Some _x6481
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getDomains_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getDomains_result (iprot : Protocol.t) =
  let _str6484 = new getDomains_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6485,_id6486) = iprot#readFieldBegin in
        if _t6485 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6486 with 
          | 0 -> (if _t6485 = Protocol.T_STRUCT then
              _str6484#set_success (read_channelDomains iprot)
            else
              iprot#skip _t6485)
          | 1 -> (if _t6485 = Protocol.T_STRUCT then
              _str6484#set_e (read_channelException iprot)
            else
              iprot#skip _t6485)
          | _ -> iprot#skip _t6485);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6484

class getFriendChannelMatrices_args =
object (self)
  val mutable _channelIds : string list option = None
  method get_channelIds = _channelIds
  method grab_channelIds = match _channelIds with None->raise (Field_empty "getFriendChannelMatrices_args.channelIds") | Some _x6487 -> _x6487
  method set_channelIds _x6487 = _channelIds <- Some _x6487
  method unset_channelIds = _channelIds <- None
  method reset_channelIds = _channelIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFriendChannelMatrices_args";
    (match _channelIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelIds",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6490 ->         oprot#writeString(_iter6490);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFriendChannelMatrices_args (iprot : Protocol.t) =
  let _str6491 = new getFriendChannelMatrices_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6492,_id6493) = iprot#readFieldBegin in
        if _t6492 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6493 with 
          | 1 -> (if _t6492 = Protocol.T_LIST then
              _str6491#set_channelIds 
                (let (_etype6497,_size6494) = iprot#readListBegin in
                  let _con6498 = (Array.to_list (Array.init _size6494 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6498)
            else
              iprot#skip _t6492)
          | _ -> iprot#skip _t6492);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6491

class getFriendChannelMatrices_result =
object (self)
  val mutable _success : friendChannelMatricesResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getFriendChannelMatrices_result.success") | Some _x6499 -> _x6499
  method set_success _x6499 = _success <- Some _x6499
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getFriendChannelMatrices_result.e") | Some _x6500 -> _x6500
  method set_e _x6500 = _e <- Some _x6500
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFriendChannelMatrices_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFriendChannelMatrices_result (iprot : Protocol.t) =
  let _str6503 = new getFriendChannelMatrices_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6504,_id6505) = iprot#readFieldBegin in
        if _t6504 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6505 with 
          | 0 -> (if _t6504 = Protocol.T_STRUCT then
              _str6503#set_success (read_friendChannelMatricesResponse iprot)
            else
              iprot#skip _t6504)
          | 1 -> (if _t6504 = Protocol.T_STRUCT then
              _str6503#set_e (read_channelException iprot)
            else
              iprot#skip _t6504)
          | _ -> iprot#skip _t6504);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6503

class updateChannelSettings_args =
object (self)
  val mutable _channelSettings : channelSettings option = None
  method get_channelSettings = _channelSettings
  method grab_channelSettings = match _channelSettings with None->raise (Field_empty "updateChannelSettings_args.channelSettings") | Some _x6506 -> _x6506
  method set_channelSettings _x6506 = _channelSettings <- Some _x6506
  method unset_channelSettings = _channelSettings <- None
  method reset_channelSettings = _channelSettings <- None

  method copy =
      let _new = Oo.copy self in
      if _channelSettings <> None then
        _new#set_channelSettings self#grab_channelSettings#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateChannelSettings_args";
    (match _channelSettings with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelSettings",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateChannelSettings_args (iprot : Protocol.t) =
  let _str6509 = new updateChannelSettings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6510,_id6511) = iprot#readFieldBegin in
        if _t6510 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6511 with 
          | 1 -> (if _t6510 = Protocol.T_STRUCT then
              _str6509#set_channelSettings (read_channelSettings iprot)
            else
              iprot#skip _t6510)
          | _ -> iprot#skip _t6510);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6509

class updateChannelSettings_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateChannelSettings_result.success") | Some _x6512 -> _x6512
  method set_success _x6512 = _success <- Some _x6512
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateChannelSettings_result.e") | Some _x6513 -> _x6513
  method set_e _x6513 = _e <- Some _x6513
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateChannelSettings_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateChannelSettings_result (iprot : Protocol.t) =
  let _str6516 = new updateChannelSettings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6517,_id6518) = iprot#readFieldBegin in
        if _t6517 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6518 with 
          | 0 -> (if _t6517 = Protocol.T_BOOL then
              _str6516#set_success iprot#readBool
            else
              iprot#skip _t6517)
          | 1 -> (if _t6517 = Protocol.T_STRUCT then
              _str6516#set_e (read_channelException iprot)
            else
              iprot#skip _t6517)
          | _ -> iprot#skip _t6517);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6516

class getCommonDomains_args =
object (self)
  val mutable _lastSynced : Int64.t option = None
  method get_lastSynced = _lastSynced
  method grab_lastSynced = match _lastSynced with None->raise (Field_empty "getCommonDomains_args.lastSynced") | Some _x6519 -> _x6519
  method set_lastSynced _x6519 = _lastSynced <- Some _x6519
  method unset_lastSynced = _lastSynced <- None
  method reset_lastSynced = _lastSynced <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCommonDomains_args";
    (match _lastSynced with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastSynced",Protocol.T_I64,1);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCommonDomains_args (iprot : Protocol.t) =
  let _str6522 = new getCommonDomains_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6523,_id6524) = iprot#readFieldBegin in
        if _t6523 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6524 with 
          | 1 -> (if _t6523 = Protocol.T_I64 then
              _str6522#set_lastSynced iprot#readI64
            else
              iprot#skip _t6523)
          | _ -> iprot#skip _t6523);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6522

class getCommonDomains_result =
object (self)
  val mutable _success : channelDomains option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCommonDomains_result.success") | Some _x6525 -> _x6525
  method set_success _x6525 = _success <- Some _x6525
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCommonDomains_result.e") | Some _x6526 -> _x6526
  method set_e _x6526 = _e <- Some _x6526
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCommonDomains_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCommonDomains_result (iprot : Protocol.t) =
  let _str6529 = new getCommonDomains_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6530,_id6531) = iprot#readFieldBegin in
        if _t6530 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6531 with 
          | 0 -> (if _t6530 = Protocol.T_STRUCT then
              _str6529#set_success (read_channelDomains iprot)
            else
              iprot#skip _t6530)
          | 1 -> (if _t6530 = Protocol.T_STRUCT then
              _str6529#set_e (read_channelException iprot)
            else
              iprot#skip _t6530)
          | _ -> iprot#skip _t6530);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6529

class getNotificationBadgeCount_args =
object (self)
  val mutable _localRev : Int64.t option = None
  method get_localRev = _localRev
  method grab_localRev = match _localRev with None->raise (Field_empty "getNotificationBadgeCount_args.localRev") | Some _x6532 -> _x6532
  method set_localRev _x6532 = _localRev <- Some _x6532
  method unset_localRev = _localRev <- None
  method reset_localRev = _localRev <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNotificationBadgeCount_args";
    (match _localRev with None -> () | Some _v -> 
      oprot#writeFieldBegin("localRev",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNotificationBadgeCount_args (iprot : Protocol.t) =
  let _str6535 = new getNotificationBadgeCount_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6536,_id6537) = iprot#readFieldBegin in
        if _t6536 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6537 with 
          | 2 -> (if _t6536 = Protocol.T_I64 then
              _str6535#set_localRev iprot#readI64
            else
              iprot#skip _t6536)
          | _ -> iprot#skip _t6536);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6535

class getNotificationBadgeCount_result =
object (self)
  val mutable _success : Int32.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getNotificationBadgeCount_result.success") | Some _x6538 -> _x6538
  method set_success _x6538 = _success <- Some _x6538
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getNotificationBadgeCount_result.e") | Some _x6539 -> _x6539
  method set_e _x6539 = _e <- Some _x6539
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNotificationBadgeCount_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I32,0);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNotificationBadgeCount_result (iprot : Protocol.t) =
  let _str6542 = new getNotificationBadgeCount_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6543,_id6544) = iprot#readFieldBegin in
        if _t6543 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6544 with 
          | 0 -> (if _t6543 = Protocol.T_I32 then
              _str6542#set_success iprot#readI32
            else
              iprot#skip _t6543)
          | 1 -> (if _t6543 = Protocol.T_STRUCT then
              _str6542#set_e (read_channelException iprot)
            else
              iprot#skip _t6543)
          | _ -> iprot#skip _t6543);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6542

class issueChannelToken_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "issueChannelToken_args.channelId") | Some _x6545 -> _x6545
  method set_channelId _x6545 = _channelId <- Some _x6545
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueChannelToken_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueChannelToken_args (iprot : Protocol.t) =
  let _str6548 = new issueChannelToken_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6549,_id6550) = iprot#readFieldBegin in
        if _t6549 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6550 with 
          | 1 -> (if _t6549 = Protocol.T_STRING then
              _str6548#set_channelId iprot#readString
            else
              iprot#skip _t6549)
          | _ -> iprot#skip _t6549);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6548

class issueChannelToken_result =
object (self)
  val mutable _success : channelToken option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "issueChannelToken_result.success") | Some _x6551 -> _x6551
  method set_success _x6551 = _success <- Some _x6551
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "issueChannelToken_result.e") | Some _x6552 -> _x6552
  method set_e _x6552 = _e <- Some _x6552
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueChannelToken_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueChannelToken_result (iprot : Protocol.t) =
  let _str6555 = new issueChannelToken_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6556,_id6557) = iprot#readFieldBegin in
        if _t6556 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6557 with 
          | 0 -> (if _t6556 = Protocol.T_STRUCT then
              _str6555#set_success (read_channelToken iprot)
            else
              iprot#skip _t6556)
          | 1 -> (if _t6556 = Protocol.T_STRUCT then
              _str6555#set_e (read_channelException iprot)
            else
              iprot#skip _t6556)
          | _ -> iprot#skip _t6556);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6555

class issueRequestToken_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "issueRequestToken_args.channelId") | Some _x6558 -> _x6558
  method set_channelId _x6558 = _channelId <- Some _x6558
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _otpId : string option = None
  method get_otpId = _otpId
  method grab_otpId = match _otpId with None->raise (Field_empty "issueRequestToken_args.otpId") | Some _x6559 -> _x6559
  method set_otpId _x6559 = _otpId <- Some _x6559
  method unset_otpId = _otpId <- None
  method reset_otpId = _otpId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueRequestToken_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _otpId with None -> () | Some _v -> 
      oprot#writeFieldBegin("otpId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueRequestToken_args (iprot : Protocol.t) =
  let _str6562 = new issueRequestToken_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6563,_id6564) = iprot#readFieldBegin in
        if _t6563 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6564 with 
          | 1 -> (if _t6563 = Protocol.T_STRING then
              _str6562#set_channelId iprot#readString
            else
              iprot#skip _t6563)
          | 2 -> (if _t6563 = Protocol.T_STRING then
              _str6562#set_otpId iprot#readString
            else
              iprot#skip _t6563)
          | _ -> iprot#skip _t6563);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6562

class issueRequestToken_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "issueRequestToken_result.success") | Some _x6565 -> _x6565
  method set_success _x6565 = _success <- Some _x6565
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "issueRequestToken_result.e") | Some _x6566 -> _x6566
  method set_e _x6566 = _e <- Some _x6566
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueRequestToken_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueRequestToken_result (iprot : Protocol.t) =
  let _str6569 = new issueRequestToken_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6570,_id6571) = iprot#readFieldBegin in
        if _t6570 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6571 with 
          | 0 -> (if _t6570 = Protocol.T_STRING then
              _str6569#set_success iprot#readString
            else
              iprot#skip _t6570)
          | 1 -> (if _t6570 = Protocol.T_STRUCT then
              _str6569#set_e (read_channelException iprot)
            else
              iprot#skip _t6570)
          | _ -> iprot#skip _t6570);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6569

class issueRequestTokenWithAuthScheme_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "issueRequestTokenWithAuthScheme_args.channelId") | Some _x6572 -> _x6572
  method set_channelId _x6572 = _channelId <- Some _x6572
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _otpId : string option = None
  method get_otpId = _otpId
  method grab_otpId = match _otpId with None->raise (Field_empty "issueRequestTokenWithAuthScheme_args.otpId") | Some _x6573 -> _x6573
  method set_otpId _x6573 = _otpId <- Some _x6573
  method unset_otpId = _otpId <- None
  method reset_otpId = _otpId <- None

  val mutable _authScheme : string list option = None
  method get_authScheme = _authScheme
  method grab_authScheme = match _authScheme with None->raise (Field_empty "issueRequestTokenWithAuthScheme_args.authScheme") | Some _x6574 -> _x6574
  method set_authScheme _x6574 = _authScheme <- Some _x6574
  method unset_authScheme = _authScheme <- None
  method reset_authScheme = _authScheme <- None

  val mutable _returnUrl : string option = None
  method get_returnUrl = _returnUrl
  method grab_returnUrl = match _returnUrl with None->raise (Field_empty "issueRequestTokenWithAuthScheme_args.returnUrl") | Some _x6575 -> _x6575
  method set_returnUrl _x6575 = _returnUrl <- Some _x6575
  method unset_returnUrl = _returnUrl <- None
  method reset_returnUrl = _returnUrl <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueRequestTokenWithAuthScheme_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _otpId with None -> () | Some _v -> 
      oprot#writeFieldBegin("otpId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _authScheme with None -> () | Some _v -> 
      oprot#writeFieldBegin("authScheme",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6578 ->         oprot#writeString(_iter6578);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _returnUrl with None -> () | Some _v -> 
      oprot#writeFieldBegin("returnUrl",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueRequestTokenWithAuthScheme_args (iprot : Protocol.t) =
  let _str6579 = new issueRequestTokenWithAuthScheme_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6580,_id6581) = iprot#readFieldBegin in
        if _t6580 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6581 with 
          | 1 -> (if _t6580 = Protocol.T_STRING then
              _str6579#set_channelId iprot#readString
            else
              iprot#skip _t6580)
          | 2 -> (if _t6580 = Protocol.T_STRING then
              _str6579#set_otpId iprot#readString
            else
              iprot#skip _t6580)
          | 3 -> (if _t6580 = Protocol.T_LIST then
              _str6579#set_authScheme 
                (let (_etype6585,_size6582) = iprot#readListBegin in
                  let _con6586 = (Array.to_list (Array.init _size6582 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6586)
            else
              iprot#skip _t6580)
          | 4 -> (if _t6580 = Protocol.T_STRING then
              _str6579#set_returnUrl iprot#readString
            else
              iprot#skip _t6580)
          | _ -> iprot#skip _t6580);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6579

class issueRequestTokenWithAuthScheme_result =
object (self)
  val mutable _success : requestTokenResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "issueRequestTokenWithAuthScheme_result.success") | Some _x6587 -> _x6587
  method set_success _x6587 = _success <- Some _x6587
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "issueRequestTokenWithAuthScheme_result.e") | Some _x6588 -> _x6588
  method set_e _x6588 = _e <- Some _x6588
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueRequestTokenWithAuthScheme_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueRequestTokenWithAuthScheme_result (iprot : Protocol.t) =
  let _str6591 = new issueRequestTokenWithAuthScheme_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6592,_id6593) = iprot#readFieldBegin in
        if _t6592 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6593 with 
          | 0 -> (if _t6592 = Protocol.T_STRUCT then
              _str6591#set_success (read_requestTokenResponse iprot)
            else
              iprot#skip _t6592)
          | 1 -> (if _t6592 = Protocol.T_STRUCT then
              _str6591#set_e (read_channelException iprot)
            else
              iprot#skip _t6592)
          | _ -> iprot#skip _t6592);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6591

class issueRequestTokenForAutoLogin_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "issueRequestTokenForAutoLogin_args.channelId") | Some _x6594 -> _x6594
  method set_channelId _x6594 = _channelId <- Some _x6594
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _otpId : string option = None
  method get_otpId = _otpId
  method grab_otpId = match _otpId with None->raise (Field_empty "issueRequestTokenForAutoLogin_args.otpId") | Some _x6595 -> _x6595
  method set_otpId _x6595 = _otpId <- Some _x6595
  method unset_otpId = _otpId <- None
  method reset_otpId = _otpId <- None

  val mutable _redirectUrl : string option = None
  method get_redirectUrl = _redirectUrl
  method grab_redirectUrl = match _redirectUrl with None->raise (Field_empty "issueRequestTokenForAutoLogin_args.redirectUrl") | Some _x6596 -> _x6596
  method set_redirectUrl _x6596 = _redirectUrl <- Some _x6596
  method unset_redirectUrl = _redirectUrl <- None
  method reset_redirectUrl = _redirectUrl <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueRequestTokenForAutoLogin_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _otpId with None -> () | Some _v -> 
      oprot#writeFieldBegin("otpId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _redirectUrl with None -> () | Some _v -> 
      oprot#writeFieldBegin("redirectUrl",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueRequestTokenForAutoLogin_args (iprot : Protocol.t) =
  let _str6599 = new issueRequestTokenForAutoLogin_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6600,_id6601) = iprot#readFieldBegin in
        if _t6600 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6601 with 
          | 2 -> (if _t6600 = Protocol.T_STRING then
              _str6599#set_channelId iprot#readString
            else
              iprot#skip _t6600)
          | 3 -> (if _t6600 = Protocol.T_STRING then
              _str6599#set_otpId iprot#readString
            else
              iprot#skip _t6600)
          | 4 -> (if _t6600 = Protocol.T_STRING then
              _str6599#set_redirectUrl iprot#readString
            else
              iprot#skip _t6600)
          | _ -> iprot#skip _t6600);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6599

class issueRequestTokenForAutoLogin_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "issueRequestTokenForAutoLogin_result.success") | Some _x6602 -> _x6602
  method set_success _x6602 = _success <- Some _x6602
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "issueRequestTokenForAutoLogin_result.e") | Some _x6603 -> _x6603
  method set_e _x6603 = _e <- Some _x6603
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueRequestTokenForAutoLogin_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueRequestTokenForAutoLogin_result (iprot : Protocol.t) =
  let _str6606 = new issueRequestTokenForAutoLogin_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6607,_id6608) = iprot#readFieldBegin in
        if _t6607 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6608 with 
          | 0 -> (if _t6607 = Protocol.T_STRING then
              _str6606#set_success iprot#readString
            else
              iprot#skip _t6607)
          | 1 -> (if _t6607 = Protocol.T_STRUCT then
              _str6606#set_e (read_channelException iprot)
            else
              iprot#skip _t6607)
          | _ -> iprot#skip _t6607);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6606

class getUpdatedChannelIds_args =
object (self)
  val mutable _channelIds : channelIdWithLastUpdated list option = None
  method get_channelIds = _channelIds
  method grab_channelIds = match _channelIds with None->raise (Field_empty "getUpdatedChannelIds_args.channelIds") | Some _x6609 -> _x6609
  method set_channelIds _x6609 = _channelIds <- Some _x6609
  method unset_channelIds = _channelIds <- None
  method reset_channelIds = _channelIds <- None

  method copy =
      let _new = Oo.copy self in
      if _channelIds <> None then
        _new#set_channelIds (List.map (fun x -> x#copy) self#grab_channelIds);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUpdatedChannelIds_args";
    (match _channelIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelIds",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter6612 ->         _iter6612#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUpdatedChannelIds_args (iprot : Protocol.t) =
  let _str6613 = new getUpdatedChannelIds_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6614,_id6615) = iprot#readFieldBegin in
        if _t6614 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6615 with 
          | 1 -> (if _t6614 = Protocol.T_LIST then
              _str6613#set_channelIds 
                (let (_etype6619,_size6616) = iprot#readListBegin in
                  let _con6620 = (Array.to_list (Array.init _size6616 (fun _ -> (read_channelIdWithLastUpdated iprot)))) in
                    iprot#readListEnd; _con6620)
            else
              iprot#skip _t6614)
          | _ -> iprot#skip _t6614);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6613

class getUpdatedChannelIds_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUpdatedChannelIds_result.success") | Some _x6621 -> _x6621
  method set_success _x6621 = _success <- Some _x6621
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUpdatedChannelIds_result.e") | Some _x6622 -> _x6622
  method set_e _x6622 = _e <- Some _x6622
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUpdatedChannelIds_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6625 ->         oprot#writeString(_iter6625);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUpdatedChannelIds_result (iprot : Protocol.t) =
  let _str6626 = new getUpdatedChannelIds_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6627,_id6628) = iprot#readFieldBegin in
        if _t6627 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6628 with 
          | 0 -> (if _t6627 = Protocol.T_LIST then
              _str6626#set_success 
                (let (_etype6632,_size6629) = iprot#readListBegin in
                  let _con6633 = (Array.to_list (Array.init _size6629 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6633)
            else
              iprot#skip _t6627)
          | 1 -> (if _t6627 = Protocol.T_STRUCT then
              _str6626#set_e (read_channelException iprot)
            else
              iprot#skip _t6627)
          | _ -> iprot#skip _t6627);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6626

class reserveCoinUse_args =
object (self)
  val mutable _request : coinUseReservation option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "reserveCoinUse_args.request") | Some _x6634 -> _x6634
  method set_request _x6634 = _request <- Some _x6634
  method unset_request = _request <- None
  method reset_request = _request <- None

  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "reserveCoinUse_args.locale") | Some _x6635 -> _x6635
  method set_locale _x6635 = _locale <- Some _x6635
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reserveCoinUse_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reserveCoinUse_args (iprot : Protocol.t) =
  let _str6638 = new reserveCoinUse_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6639,_id6640) = iprot#readFieldBegin in
        if _t6639 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6640 with 
          | 2 -> (if _t6639 = Protocol.T_STRUCT then
              _str6638#set_request (read_coinUseReservation iprot)
            else
              iprot#skip _t6639)
          | 3 -> (if _t6639 = Protocol.T_STRING then
              _str6638#set_locale iprot#readString
            else
              iprot#skip _t6639)
          | _ -> iprot#skip _t6639);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6638

class reserveCoinUse_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reserveCoinUse_result.success") | Some _x6641 -> _x6641
  method set_success _x6641 = _success <- Some _x6641
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reserveCoinUse_result.e") | Some _x6642 -> _x6642
  method set_e _x6642 = _e <- Some _x6642
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reserveCoinUse_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reserveCoinUse_result (iprot : Protocol.t) =
  let _str6645 = new reserveCoinUse_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6646,_id6647) = iprot#readFieldBegin in
        if _t6646 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6647 with 
          | 0 -> (if _t6646 = Protocol.T_STRING then
              _str6645#set_success iprot#readString
            else
              iprot#skip _t6646)
          | 1 -> (if _t6646 = Protocol.T_STRUCT then
              _str6645#set_e (read_channelException iprot)
            else
              iprot#skip _t6646)
          | _ -> iprot#skip _t6646);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6645

class revokeChannel_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "revokeChannel_args.channelId") | Some _x6648 -> _x6648
  method set_channelId _x6648 = _channelId <- Some _x6648
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "revokeChannel_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_revokeChannel_args (iprot : Protocol.t) =
  let _str6651 = new revokeChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6652,_id6653) = iprot#readFieldBegin in
        if _t6652 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6653 with 
          | 1 -> (if _t6652 = Protocol.T_STRING then
              _str6651#set_channelId iprot#readString
            else
              iprot#skip _t6652)
          | _ -> iprot#skip _t6652);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6651

class revokeChannel_result =
object (self)
  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "revokeChannel_result.e") | Some _x6654 -> _x6654
  method set_e _x6654 = _e <- Some _x6654
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "revokeChannel_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_revokeChannel_result (iprot : Protocol.t) =
  let _str6657 = new revokeChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6658,_id6659) = iprot#readFieldBegin in
        if _t6658 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6659 with 
          | 1 -> (if _t6658 = Protocol.T_STRUCT then
              _str6657#set_e (read_channelException iprot)
            else
              iprot#skip _t6658)
          | _ -> iprot#skip _t6658);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6657

class syncChannelData_args =
object (self)
  val mutable _lastSynced : Int64.t option = None
  method get_lastSynced = _lastSynced
  method grab_lastSynced = match _lastSynced with None->raise (Field_empty "syncChannelData_args.lastSynced") | Some _x6660 -> _x6660
  method set_lastSynced _x6660 = _lastSynced <- Some _x6660
  method unset_lastSynced = _lastSynced <- None
  method reset_lastSynced = _lastSynced <- None

  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "syncChannelData_args.locale") | Some _x6661 -> _x6661
  method set_locale _x6661 = _locale <- Some _x6661
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "syncChannelData_args";
    (match _lastSynced with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastSynced",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_syncChannelData_args (iprot : Protocol.t) =
  let _str6664 = new syncChannelData_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6665,_id6666) = iprot#readFieldBegin in
        if _t6665 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6666 with 
          | 2 -> (if _t6665 = Protocol.T_I64 then
              _str6664#set_lastSynced iprot#readI64
            else
              iprot#skip _t6665)
          | 3 -> (if _t6665 = Protocol.T_STRING then
              _str6664#set_locale iprot#readString
            else
              iprot#skip _t6665)
          | _ -> iprot#skip _t6665);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6664

class syncChannelData_result =
object (self)
  val mutable _success : channelSyncDatas option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "syncChannelData_result.success") | Some _x6667 -> _x6667
  method set_success _x6667 = _success <- Some _x6667
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "syncChannelData_result.e") | Some _x6668 -> _x6668
  method set_e _x6668 = _e <- Some _x6668
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "syncChannelData_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_syncChannelData_result (iprot : Protocol.t) =
  let _str6671 = new syncChannelData_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6672,_id6673) = iprot#readFieldBegin in
        if _t6672 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6673 with 
          | 0 -> (if _t6672 = Protocol.T_STRUCT then
              _str6671#set_success (read_channelSyncDatas iprot)
            else
              iprot#skip _t6672)
          | 1 -> (if _t6672 = Protocol.T_STRUCT then
              _str6671#set_e (read_channelException iprot)
            else
              iprot#skip _t6672)
          | _ -> iprot#skip _t6672);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6671

class updateChannelNotificationSetting_args =
object (self)
  val mutable _setting : channelNotificationSetting list option = None
  method get_setting = _setting
  method grab_setting = match _setting with None->raise (Field_empty "updateChannelNotificationSetting_args.setting") | Some _x6674 -> _x6674
  method set_setting _x6674 = _setting <- Some _x6674
  method unset_setting = _setting <- None
  method reset_setting = _setting <- None

  method copy =
      let _new = Oo.copy self in
      if _setting <> None then
        _new#set_setting (List.map (fun x -> x#copy) self#grab_setting);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateChannelNotificationSetting_args";
    (match _setting with None -> () | Some _v -> 
      oprot#writeFieldBegin("setting",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter6677 ->         _iter6677#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateChannelNotificationSetting_args (iprot : Protocol.t) =
  let _str6678 = new updateChannelNotificationSetting_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6679,_id6680) = iprot#readFieldBegin in
        if _t6679 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6680 with 
          | 1 -> (if _t6679 = Protocol.T_LIST then
              _str6678#set_setting 
                (let (_etype6684,_size6681) = iprot#readListBegin in
                  let _con6685 = (Array.to_list (Array.init _size6681 (fun _ -> (read_channelNotificationSetting iprot)))) in
                    iprot#readListEnd; _con6685)
            else
              iprot#skip _t6679)
          | _ -> iprot#skip _t6679);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6678

class updateChannelNotificationSetting_result =
object (self)
  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateChannelNotificationSetting_result.e") | Some _x6686 -> _x6686
  method set_e _x6686 = _e <- Some _x6686
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateChannelNotificationSetting_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateChannelNotificationSetting_result (iprot : Protocol.t) =
  let _str6689 = new updateChannelNotificationSetting_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6690,_id6691) = iprot#readFieldBegin in
        if _t6690 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6691 with 
          | 1 -> (if _t6690 = Protocol.T_STRUCT then
              _str6689#set_e (read_channelException iprot)
            else
              iprot#skip _t6690)
          | _ -> iprot#skip _t6690);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6689

class virtual iface =
object (self)
  method virtual issueOTP : string option -> oTPResult
  method virtual approveChannelAndIssueChannelToken : string option -> channelToken
  method virtual approveChannelAndIssueRequestToken : string option -> string option -> string
  method virtual fetchNotificationItems : Int64.t option -> notificationFetchResult
  method virtual getApprovedChannels : Int64.t option -> string option -> approvedChannelInfos
  method virtual getChannelInfo : string option -> string option -> channelInfo
  method virtual getChannelNotificationSetting : string option -> string option -> channelNotificationSetting
  method virtual getChannelNotificationSettings : string option -> channelNotificationSetting list
  method virtual getChannels : Int64.t option -> string option -> channelInfos
  method virtual getDomains : Int64.t option -> channelDomains
  method virtual getFriendChannelMatrices : string list option -> friendChannelMatricesResponse
  method virtual updateChannelSettings : channelSettings option -> bool
  method virtual getCommonDomains : Int64.t option -> channelDomains
  method virtual getNotificationBadgeCount : Int64.t option -> Int32.t
  method virtual issueChannelToken : string option -> channelToken
  method virtual issueRequestToken : string option -> string option -> string
  method virtual issueRequestTokenWithAuthScheme : string option -> string option -> string list option -> string option -> requestTokenResponse
  method virtual issueRequestTokenForAutoLogin : string option -> string option -> string option -> string
  method virtual getUpdatedChannelIds : channelIdWithLastUpdated list option -> string list
  method virtual reserveCoinUse : coinUseReservation option -> string option -> string
  method virtual revokeChannel : string option -> unit
  method virtual syncChannelData : Int64.t option -> string option -> channelSyncDatas
  method virtual updateChannelNotificationSetting : channelNotificationSetting list option -> unit
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method issueOTP channelId = 
    self#send_issueOTP channelId;
    self#recv_issueOTP
  method private send_issueOTP channelId = 
    oprot#writeMessageBegin ("issueOTP", Protocol.CALL, seqid);
    let args = new issueOTP_args in
      args#set_channelId channelId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_issueOTP  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_issueOTP_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "issueOTP failed: unknown result")))
  method approveChannelAndIssueChannelToken channelId = 
    self#send_approveChannelAndIssueChannelToken channelId;
    self#recv_approveChannelAndIssueChannelToken
  method private send_approveChannelAndIssueChannelToken channelId = 
    oprot#writeMessageBegin ("approveChannelAndIssueChannelToken", Protocol.CALL, seqid);
    let args = new approveChannelAndIssueChannelToken_args in
      args#set_channelId channelId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_approveChannelAndIssueChannelToken  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_approveChannelAndIssueChannelToken_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "approveChannelAndIssueChannelToken failed: unknown result")))
  method approveChannelAndIssueRequestToken channelId otpId = 
    self#send_approveChannelAndIssueRequestToken channelId otpId;
    self#recv_approveChannelAndIssueRequestToken
  method private send_approveChannelAndIssueRequestToken channelId otpId = 
    oprot#writeMessageBegin ("approveChannelAndIssueRequestToken", Protocol.CALL, seqid);
    let args = new approveChannelAndIssueRequestToken_args in
      args#set_channelId channelId;
      args#set_otpId otpId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_approveChannelAndIssueRequestToken  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_approveChannelAndIssueRequestToken_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "approveChannelAndIssueRequestToken failed: unknown result")))
  method fetchNotificationItems localRev = 
    self#send_fetchNotificationItems localRev;
    self#recv_fetchNotificationItems
  method private send_fetchNotificationItems localRev = 
    oprot#writeMessageBegin ("fetchNotificationItems", Protocol.CALL, seqid);
    let args = new fetchNotificationItems_args in
      args#set_localRev localRev;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_fetchNotificationItems  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_fetchNotificationItems_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "fetchNotificationItems failed: unknown result")))
  method getApprovedChannels lastSynced locale = 
    self#send_getApprovedChannels lastSynced locale;
    self#recv_getApprovedChannels
  method private send_getApprovedChannels lastSynced locale = 
    oprot#writeMessageBegin ("getApprovedChannels", Protocol.CALL, seqid);
    let args = new getApprovedChannels_args in
      args#set_lastSynced lastSynced;
      args#set_locale locale;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getApprovedChannels  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getApprovedChannels_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getApprovedChannels failed: unknown result")))
  method getChannelInfo channelId locale = 
    self#send_getChannelInfo channelId locale;
    self#recv_getChannelInfo
  method private send_getChannelInfo channelId locale = 
    oprot#writeMessageBegin ("getChannelInfo", Protocol.CALL, seqid);
    let args = new getChannelInfo_args in
      args#set_channelId channelId;
      args#set_locale locale;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getChannelInfo  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getChannelInfo_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getChannelInfo failed: unknown result")))
  method getChannelNotificationSetting channelId locale = 
    self#send_getChannelNotificationSetting channelId locale;
    self#recv_getChannelNotificationSetting
  method private send_getChannelNotificationSetting channelId locale = 
    oprot#writeMessageBegin ("getChannelNotificationSetting", Protocol.CALL, seqid);
    let args = new getChannelNotificationSetting_args in
      args#set_channelId channelId;
      args#set_locale locale;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getChannelNotificationSetting  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getChannelNotificationSetting_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getChannelNotificationSetting failed: unknown result")))
  method getChannelNotificationSettings locale = 
    self#send_getChannelNotificationSettings locale;
    self#recv_getChannelNotificationSettings
  method private send_getChannelNotificationSettings locale = 
    oprot#writeMessageBegin ("getChannelNotificationSettings", Protocol.CALL, seqid);
    let args = new getChannelNotificationSettings_args in
      args#set_locale locale;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getChannelNotificationSettings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getChannelNotificationSettings_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getChannelNotificationSettings failed: unknown result")))
  method getChannels lastSynced locale = 
    self#send_getChannels lastSynced locale;
    self#recv_getChannels
  method private send_getChannels lastSynced locale = 
    oprot#writeMessageBegin ("getChannels", Protocol.CALL, seqid);
    let args = new getChannels_args in
      args#set_lastSynced lastSynced;
      args#set_locale locale;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getChannels  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getChannels_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getChannels failed: unknown result")))
  method getDomains lastSynced = 
    self#send_getDomains lastSynced;
    self#recv_getDomains
  method private send_getDomains lastSynced = 
    oprot#writeMessageBegin ("getDomains", Protocol.CALL, seqid);
    let args = new getDomains_args in
      args#set_lastSynced lastSynced;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getDomains  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getDomains_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getDomains failed: unknown result")))
  method getFriendChannelMatrices channelIds = 
    self#send_getFriendChannelMatrices channelIds;
    self#recv_getFriendChannelMatrices
  method private send_getFriendChannelMatrices channelIds = 
    oprot#writeMessageBegin ("getFriendChannelMatrices", Protocol.CALL, seqid);
    let args = new getFriendChannelMatrices_args in
      args#set_channelIds channelIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getFriendChannelMatrices  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getFriendChannelMatrices_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getFriendChannelMatrices failed: unknown result")))
  method updateChannelSettings channelSettings = 
    self#send_updateChannelSettings channelSettings;
    self#recv_updateChannelSettings
  method private send_updateChannelSettings channelSettings = 
    oprot#writeMessageBegin ("updateChannelSettings", Protocol.CALL, seqid);
    let args = new updateChannelSettings_args in
      args#set_channelSettings channelSettings;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateChannelSettings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateChannelSettings_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateChannelSettings failed: unknown result")))
  method getCommonDomains lastSynced = 
    self#send_getCommonDomains lastSynced;
    self#recv_getCommonDomains
  method private send_getCommonDomains lastSynced = 
    oprot#writeMessageBegin ("getCommonDomains", Protocol.CALL, seqid);
    let args = new getCommonDomains_args in
      args#set_lastSynced lastSynced;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCommonDomains  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCommonDomains_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCommonDomains failed: unknown result")))
  method getNotificationBadgeCount localRev = 
    self#send_getNotificationBadgeCount localRev;
    self#recv_getNotificationBadgeCount
  method private send_getNotificationBadgeCount localRev = 
    oprot#writeMessageBegin ("getNotificationBadgeCount", Protocol.CALL, seqid);
    let args = new getNotificationBadgeCount_args in
      args#set_localRev localRev;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getNotificationBadgeCount  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getNotificationBadgeCount_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getNotificationBadgeCount failed: unknown result")))
  method issueChannelToken channelId = 
    self#send_issueChannelToken channelId;
    self#recv_issueChannelToken
  method private send_issueChannelToken channelId = 
    oprot#writeMessageBegin ("issueChannelToken", Protocol.CALL, seqid);
    let args = new issueChannelToken_args in
      args#set_channelId channelId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_issueChannelToken  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_issueChannelToken_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "issueChannelToken failed: unknown result")))
  method issueRequestToken channelId otpId = 
    self#send_issueRequestToken channelId otpId;
    self#recv_issueRequestToken
  method private send_issueRequestToken channelId otpId = 
    oprot#writeMessageBegin ("issueRequestToken", Protocol.CALL, seqid);
    let args = new issueRequestToken_args in
      args#set_channelId channelId;
      args#set_otpId otpId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_issueRequestToken  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_issueRequestToken_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "issueRequestToken failed: unknown result")))
  method issueRequestTokenWithAuthScheme channelId otpId authScheme returnUrl = 
    self#send_issueRequestTokenWithAuthScheme channelId otpId authScheme returnUrl;
    self#recv_issueRequestTokenWithAuthScheme
  method private send_issueRequestTokenWithAuthScheme channelId otpId authScheme returnUrl = 
    oprot#writeMessageBegin ("issueRequestTokenWithAuthScheme", Protocol.CALL, seqid);
    let args = new issueRequestTokenWithAuthScheme_args in
      args#set_channelId channelId;
      args#set_otpId otpId;
      args#set_authScheme authScheme;
      args#set_returnUrl returnUrl;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_issueRequestTokenWithAuthScheme  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_issueRequestTokenWithAuthScheme_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "issueRequestTokenWithAuthScheme failed: unknown result")))
  method issueRequestTokenForAutoLogin channelId otpId redirectUrl = 
    self#send_issueRequestTokenForAutoLogin channelId otpId redirectUrl;
    self#recv_issueRequestTokenForAutoLogin
  method private send_issueRequestTokenForAutoLogin channelId otpId redirectUrl = 
    oprot#writeMessageBegin ("issueRequestTokenForAutoLogin", Protocol.CALL, seqid);
    let args = new issueRequestTokenForAutoLogin_args in
      args#set_channelId channelId;
      args#set_otpId otpId;
      args#set_redirectUrl redirectUrl;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_issueRequestTokenForAutoLogin  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_issueRequestTokenForAutoLogin_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "issueRequestTokenForAutoLogin failed: unknown result")))
  method getUpdatedChannelIds channelIds = 
    self#send_getUpdatedChannelIds channelIds;
    self#recv_getUpdatedChannelIds
  method private send_getUpdatedChannelIds channelIds = 
    oprot#writeMessageBegin ("getUpdatedChannelIds", Protocol.CALL, seqid);
    let args = new getUpdatedChannelIds_args in
      args#set_channelIds channelIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUpdatedChannelIds  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUpdatedChannelIds_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUpdatedChannelIds failed: unknown result")))
  method reserveCoinUse request locale = 
    self#send_reserveCoinUse request locale;
    self#recv_reserveCoinUse
  method private send_reserveCoinUse request locale = 
    oprot#writeMessageBegin ("reserveCoinUse", Protocol.CALL, seqid);
    let args = new reserveCoinUse_args in
      args#set_request request;
      args#set_locale locale;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reserveCoinUse  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reserveCoinUse_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reserveCoinUse failed: unknown result")))
  method revokeChannel channelId = 
    self#send_revokeChannel channelId;
    self#recv_revokeChannel
  method private send_revokeChannel channelId = 
    oprot#writeMessageBegin ("revokeChannel", Protocol.CALL, seqid);
    let args = new revokeChannel_args in
      args#set_channelId channelId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_revokeChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_revokeChannel_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (ChannelException _v));
        ()
  method syncChannelData lastSynced locale = 
    self#send_syncChannelData lastSynced locale;
    self#recv_syncChannelData
  method private send_syncChannelData lastSynced locale = 
    oprot#writeMessageBegin ("syncChannelData", Protocol.CALL, seqid);
    let args = new syncChannelData_args in
      args#set_lastSynced lastSynced;
      args#set_locale locale;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_syncChannelData  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_syncChannelData_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "syncChannelData failed: unknown result")))
  method updateChannelNotificationSetting setting = 
    self#send_updateChannelNotificationSetting setting;
    self#recv_updateChannelNotificationSetting
  method private send_updateChannelNotificationSetting setting = 
    oprot#writeMessageBegin ("updateChannelNotificationSetting", Protocol.CALL, seqid);
    let args = new updateChannelNotificationSetting_args in
      args#set_setting setting;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateChannelNotificationSetting  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateChannelNotificationSetting_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (ChannelException _v));
        ()
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 23
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_issueOTP (seqid, iprot, oprot) =
    let args = read_issueOTP_args iprot in
      iprot#readMessageEnd;
      let result = new issueOTP_result in
        (try
          result#set_success (handler#issueOTP args#get_channelId);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("issueOTP", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_approveChannelAndIssueChannelToken (seqid, iprot, oprot) =
    let args = read_approveChannelAndIssueChannelToken_args iprot in
      iprot#readMessageEnd;
      let result = new approveChannelAndIssueChannelToken_result in
        (try
          result#set_success (handler#approveChannelAndIssueChannelToken args#get_channelId);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("approveChannelAndIssueChannelToken", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_approveChannelAndIssueRequestToken (seqid, iprot, oprot) =
    let args = read_approveChannelAndIssueRequestToken_args iprot in
      iprot#readMessageEnd;
      let result = new approveChannelAndIssueRequestToken_result in
        (try
          result#set_success (handler#approveChannelAndIssueRequestToken args#get_channelId args#get_otpId);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("approveChannelAndIssueRequestToken", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_fetchNotificationItems (seqid, iprot, oprot) =
    let args = read_fetchNotificationItems_args iprot in
      iprot#readMessageEnd;
      let result = new fetchNotificationItems_result in
        (try
          result#set_success (handler#fetchNotificationItems args#get_localRev);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("fetchNotificationItems", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getApprovedChannels (seqid, iprot, oprot) =
    let args = read_getApprovedChannels_args iprot in
      iprot#readMessageEnd;
      let result = new getApprovedChannels_result in
        (try
          result#set_success (handler#getApprovedChannels args#get_lastSynced args#get_locale);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getApprovedChannels", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getChannelInfo (seqid, iprot, oprot) =
    let args = read_getChannelInfo_args iprot in
      iprot#readMessageEnd;
      let result = new getChannelInfo_result in
        (try
          result#set_success (handler#getChannelInfo args#get_channelId args#get_locale);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getChannelInfo", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getChannelNotificationSetting (seqid, iprot, oprot) =
    let args = read_getChannelNotificationSetting_args iprot in
      iprot#readMessageEnd;
      let result = new getChannelNotificationSetting_result in
        (try
          result#set_success (handler#getChannelNotificationSetting args#get_channelId args#get_locale);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getChannelNotificationSetting", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getChannelNotificationSettings (seqid, iprot, oprot) =
    let args = read_getChannelNotificationSettings_args iprot in
      iprot#readMessageEnd;
      let result = new getChannelNotificationSettings_result in
        (try
          result#set_success (handler#getChannelNotificationSettings args#get_locale);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getChannelNotificationSettings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getChannels (seqid, iprot, oprot) =
    let args = read_getChannels_args iprot in
      iprot#readMessageEnd;
      let result = new getChannels_result in
        (try
          result#set_success (handler#getChannels args#get_lastSynced args#get_locale);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getChannels", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getDomains (seqid, iprot, oprot) =
    let args = read_getDomains_args iprot in
      iprot#readMessageEnd;
      let result = new getDomains_result in
        (try
          result#set_success (handler#getDomains args#get_lastSynced);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getDomains", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getFriendChannelMatrices (seqid, iprot, oprot) =
    let args = read_getFriendChannelMatrices_args iprot in
      iprot#readMessageEnd;
      let result = new getFriendChannelMatrices_result in
        (try
          result#set_success (handler#getFriendChannelMatrices args#get_channelIds);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getFriendChannelMatrices", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateChannelSettings (seqid, iprot, oprot) =
    let args = read_updateChannelSettings_args iprot in
      iprot#readMessageEnd;
      let result = new updateChannelSettings_result in
        (try
          result#set_success (handler#updateChannelSettings args#get_channelSettings);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateChannelSettings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCommonDomains (seqid, iprot, oprot) =
    let args = read_getCommonDomains_args iprot in
      iprot#readMessageEnd;
      let result = new getCommonDomains_result in
        (try
          result#set_success (handler#getCommonDomains args#get_lastSynced);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCommonDomains", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getNotificationBadgeCount (seqid, iprot, oprot) =
    let args = read_getNotificationBadgeCount_args iprot in
      iprot#readMessageEnd;
      let result = new getNotificationBadgeCount_result in
        (try
          result#set_success (handler#getNotificationBadgeCount args#get_localRev);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getNotificationBadgeCount", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_issueChannelToken (seqid, iprot, oprot) =
    let args = read_issueChannelToken_args iprot in
      iprot#readMessageEnd;
      let result = new issueChannelToken_result in
        (try
          result#set_success (handler#issueChannelToken args#get_channelId);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("issueChannelToken", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_issueRequestToken (seqid, iprot, oprot) =
    let args = read_issueRequestToken_args iprot in
      iprot#readMessageEnd;
      let result = new issueRequestToken_result in
        (try
          result#set_success (handler#issueRequestToken args#get_channelId args#get_otpId);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("issueRequestToken", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_issueRequestTokenWithAuthScheme (seqid, iprot, oprot) =
    let args = read_issueRequestTokenWithAuthScheme_args iprot in
      iprot#readMessageEnd;
      let result = new issueRequestTokenWithAuthScheme_result in
        (try
          result#set_success (handler#issueRequestTokenWithAuthScheme args#get_channelId args#get_otpId args#get_authScheme args#get_returnUrl);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("issueRequestTokenWithAuthScheme", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_issueRequestTokenForAutoLogin (seqid, iprot, oprot) =
    let args = read_issueRequestTokenForAutoLogin_args iprot in
      iprot#readMessageEnd;
      let result = new issueRequestTokenForAutoLogin_result in
        (try
          result#set_success (handler#issueRequestTokenForAutoLogin args#get_channelId args#get_otpId args#get_redirectUrl);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("issueRequestTokenForAutoLogin", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUpdatedChannelIds (seqid, iprot, oprot) =
    let args = read_getUpdatedChannelIds_args iprot in
      iprot#readMessageEnd;
      let result = new getUpdatedChannelIds_result in
        (try
          result#set_success (handler#getUpdatedChannelIds args#get_channelIds);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUpdatedChannelIds", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reserveCoinUse (seqid, iprot, oprot) =
    let args = read_reserveCoinUse_args iprot in
      iprot#readMessageEnd;
      let result = new reserveCoinUse_result in
        (try
          result#set_success (handler#reserveCoinUse args#get_request args#get_locale);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reserveCoinUse", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_revokeChannel (seqid, iprot, oprot) =
    let args = read_revokeChannel_args iprot in
      iprot#readMessageEnd;
      let result = new revokeChannel_result in
        (try
          (handler#revokeChannel args#get_channelId);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("revokeChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_syncChannelData (seqid, iprot, oprot) =
    let args = read_syncChannelData_args iprot in
      iprot#readMessageEnd;
      let result = new syncChannelData_result in
        (try
          result#set_success (handler#syncChannelData args#get_lastSynced args#get_locale);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("syncChannelData", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateChannelNotificationSetting (seqid, iprot, oprot) =
    let args = read_updateChannelNotificationSetting_args iprot in
      iprot#readMessageEnd;
      let result = new updateChannelNotificationSetting_result in
        (try
          (handler#updateChannelNotificationSetting args#get_setting);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateChannelNotificationSetting", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "issueOTP" self#process_issueOTP;
    Hashtbl.add processMap "approveChannelAndIssueChannelToken" self#process_approveChannelAndIssueChannelToken;
    Hashtbl.add processMap "approveChannelAndIssueRequestToken" self#process_approveChannelAndIssueRequestToken;
    Hashtbl.add processMap "fetchNotificationItems" self#process_fetchNotificationItems;
    Hashtbl.add processMap "getApprovedChannels" self#process_getApprovedChannels;
    Hashtbl.add processMap "getChannelInfo" self#process_getChannelInfo;
    Hashtbl.add processMap "getChannelNotificationSetting" self#process_getChannelNotificationSetting;
    Hashtbl.add processMap "getChannelNotificationSettings" self#process_getChannelNotificationSettings;
    Hashtbl.add processMap "getChannels" self#process_getChannels;
    Hashtbl.add processMap "getDomains" self#process_getDomains;
    Hashtbl.add processMap "getFriendChannelMatrices" self#process_getFriendChannelMatrices;
    Hashtbl.add processMap "updateChannelSettings" self#process_updateChannelSettings;
    Hashtbl.add processMap "getCommonDomains" self#process_getCommonDomains;
    Hashtbl.add processMap "getNotificationBadgeCount" self#process_getNotificationBadgeCount;
    Hashtbl.add processMap "issueChannelToken" self#process_issueChannelToken;
    Hashtbl.add processMap "issueRequestToken" self#process_issueRequestToken;
    Hashtbl.add processMap "issueRequestTokenWithAuthScheme" self#process_issueRequestTokenWithAuthScheme;
    Hashtbl.add processMap "issueRequestTokenForAutoLogin" self#process_issueRequestTokenForAutoLogin;
    Hashtbl.add processMap "getUpdatedChannelIds" self#process_getUpdatedChannelIds;
    Hashtbl.add processMap "reserveCoinUse" self#process_reserveCoinUse;
    Hashtbl.add processMap "revokeChannel" self#process_revokeChannel;
    Hashtbl.add processMap "syncChannelData" self#process_syncChannelData;
    Hashtbl.add processMap "updateChannelNotificationSetting" self#process_updateChannelNotificationSetting;
end

