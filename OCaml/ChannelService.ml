(*
 Autogenerated by Thrift Compiler (0.13.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class issueOTP_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "issueOTP_args.channelId") | Some _x5746 -> _x5746
  method set_channelId _x5746 = _channelId <- Some _x5746
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueOTP_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueOTP_args (iprot : Protocol.t) =
  let _str5749 = new issueOTP_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5750,_id5751) = iprot#readFieldBegin in
        if _t5750 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5751 with 
          | 2 -> (if _t5750 = Protocol.T_STRING then
              _str5749#set_channelId iprot#readString
            else
              iprot#skip _t5750)
          | _ -> iprot#skip _t5750);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5749

class issueOTP_result =
object (self)
  val mutable _success : oTPResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "issueOTP_result.success") | Some _x5752 -> _x5752
  method set_success _x5752 = _success <- Some _x5752
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "issueOTP_result.e") | Some _x5753 -> _x5753
  method set_e _x5753 = _e <- Some _x5753
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueOTP_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueOTP_result (iprot : Protocol.t) =
  let _str5756 = new issueOTP_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5757,_id5758) = iprot#readFieldBegin in
        if _t5757 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5758 with 
          | 0 -> (if _t5757 = Protocol.T_STRUCT then
              _str5756#set_success (read_oTPResult iprot)
            else
              iprot#skip _t5757)
          | 1 -> (if _t5757 = Protocol.T_STRUCT then
              _str5756#set_e (read_channelException iprot)
            else
              iprot#skip _t5757)
          | _ -> iprot#skip _t5757);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5756

class approveChannelAndIssueChannelToken_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "approveChannelAndIssueChannelToken_args.channelId") | Some _x5759 -> _x5759
  method set_channelId _x5759 = _channelId <- Some _x5759
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "approveChannelAndIssueChannelToken_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_approveChannelAndIssueChannelToken_args (iprot : Protocol.t) =
  let _str5762 = new approveChannelAndIssueChannelToken_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5763,_id5764) = iprot#readFieldBegin in
        if _t5763 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5764 with 
          | 1 -> (if _t5763 = Protocol.T_STRING then
              _str5762#set_channelId iprot#readString
            else
              iprot#skip _t5763)
          | _ -> iprot#skip _t5763);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5762

class approveChannelAndIssueChannelToken_result =
object (self)
  val mutable _success : channelToken option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "approveChannelAndIssueChannelToken_result.success") | Some _x5765 -> _x5765
  method set_success _x5765 = _success <- Some _x5765
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "approveChannelAndIssueChannelToken_result.e") | Some _x5766 -> _x5766
  method set_e _x5766 = _e <- Some _x5766
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "approveChannelAndIssueChannelToken_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_approveChannelAndIssueChannelToken_result (iprot : Protocol.t) =
  let _str5769 = new approveChannelAndIssueChannelToken_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5770,_id5771) = iprot#readFieldBegin in
        if _t5770 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5771 with 
          | 0 -> (if _t5770 = Protocol.T_STRUCT then
              _str5769#set_success (read_channelToken iprot)
            else
              iprot#skip _t5770)
          | 1 -> (if _t5770 = Protocol.T_STRUCT then
              _str5769#set_e (read_channelException iprot)
            else
              iprot#skip _t5770)
          | _ -> iprot#skip _t5770);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5769

class approveChannelAndIssueRequestToken_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "approveChannelAndIssueRequestToken_args.channelId") | Some _x5772 -> _x5772
  method set_channelId _x5772 = _channelId <- Some _x5772
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _otpId : string option = None
  method get_otpId = _otpId
  method grab_otpId = match _otpId with None->raise (Field_empty "approveChannelAndIssueRequestToken_args.otpId") | Some _x5773 -> _x5773
  method set_otpId _x5773 = _otpId <- Some _x5773
  method unset_otpId = _otpId <- None
  method reset_otpId = _otpId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "approveChannelAndIssueRequestToken_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _otpId with None -> () | Some _v -> 
      oprot#writeFieldBegin("otpId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_approveChannelAndIssueRequestToken_args (iprot : Protocol.t) =
  let _str5776 = new approveChannelAndIssueRequestToken_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5777,_id5778) = iprot#readFieldBegin in
        if _t5777 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5778 with 
          | 1 -> (if _t5777 = Protocol.T_STRING then
              _str5776#set_channelId iprot#readString
            else
              iprot#skip _t5777)
          | 2 -> (if _t5777 = Protocol.T_STRING then
              _str5776#set_otpId iprot#readString
            else
              iprot#skip _t5777)
          | _ -> iprot#skip _t5777);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5776

class approveChannelAndIssueRequestToken_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "approveChannelAndIssueRequestToken_result.success") | Some _x5779 -> _x5779
  method set_success _x5779 = _success <- Some _x5779
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "approveChannelAndIssueRequestToken_result.e") | Some _x5780 -> _x5780
  method set_e _x5780 = _e <- Some _x5780
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "approveChannelAndIssueRequestToken_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_approveChannelAndIssueRequestToken_result (iprot : Protocol.t) =
  let _str5783 = new approveChannelAndIssueRequestToken_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5784,_id5785) = iprot#readFieldBegin in
        if _t5784 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5785 with 
          | 0 -> (if _t5784 = Protocol.T_STRING then
              _str5783#set_success iprot#readString
            else
              iprot#skip _t5784)
          | 1 -> (if _t5784 = Protocol.T_STRUCT then
              _str5783#set_e (read_channelException iprot)
            else
              iprot#skip _t5784)
          | _ -> iprot#skip _t5784);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5783

class fetchNotificationItems_args =
object (self)
  val mutable _localRev : Int64.t option = None
  method get_localRev = _localRev
  method grab_localRev = match _localRev with None->raise (Field_empty "fetchNotificationItems_args.localRev") | Some _x5786 -> _x5786
  method set_localRev _x5786 = _localRev <- Some _x5786
  method unset_localRev = _localRev <- None
  method reset_localRev = _localRev <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchNotificationItems_args";
    (match _localRev with None -> () | Some _v -> 
      oprot#writeFieldBegin("localRev",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchNotificationItems_args (iprot : Protocol.t) =
  let _str5789 = new fetchNotificationItems_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5790,_id5791) = iprot#readFieldBegin in
        if _t5790 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5791 with 
          | 2 -> (if _t5790 = Protocol.T_I64 then
              _str5789#set_localRev iprot#readI64
            else
              iprot#skip _t5790)
          | _ -> iprot#skip _t5790);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5789

class fetchNotificationItems_result =
object (self)
  val mutable _success : notificationFetchResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "fetchNotificationItems_result.success") | Some _x5792 -> _x5792
  method set_success _x5792 = _success <- Some _x5792
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "fetchNotificationItems_result.e") | Some _x5793 -> _x5793
  method set_e _x5793 = _e <- Some _x5793
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchNotificationItems_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchNotificationItems_result (iprot : Protocol.t) =
  let _str5796 = new fetchNotificationItems_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5797,_id5798) = iprot#readFieldBegin in
        if _t5797 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5798 with 
          | 0 -> (if _t5797 = Protocol.T_STRUCT then
              _str5796#set_success (read_notificationFetchResult iprot)
            else
              iprot#skip _t5797)
          | 1 -> (if _t5797 = Protocol.T_STRUCT then
              _str5796#set_e (read_channelException iprot)
            else
              iprot#skip _t5797)
          | _ -> iprot#skip _t5797);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5796

class getApprovedChannels_args =
object (self)
  val mutable _lastSynced : Int64.t option = None
  method get_lastSynced = _lastSynced
  method grab_lastSynced = match _lastSynced with None->raise (Field_empty "getApprovedChannels_args.lastSynced") | Some _x5799 -> _x5799
  method set_lastSynced _x5799 = _lastSynced <- Some _x5799
  method unset_lastSynced = _lastSynced <- None
  method reset_lastSynced = _lastSynced <- None

  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "getApprovedChannels_args.locale") | Some _x5800 -> _x5800
  method set_locale _x5800 = _locale <- Some _x5800
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getApprovedChannels_args";
    (match _lastSynced with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastSynced",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getApprovedChannels_args (iprot : Protocol.t) =
  let _str5803 = new getApprovedChannels_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5804,_id5805) = iprot#readFieldBegin in
        if _t5804 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5805 with 
          | 2 -> (if _t5804 = Protocol.T_I64 then
              _str5803#set_lastSynced iprot#readI64
            else
              iprot#skip _t5804)
          | 3 -> (if _t5804 = Protocol.T_STRING then
              _str5803#set_locale iprot#readString
            else
              iprot#skip _t5804)
          | _ -> iprot#skip _t5804);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5803

class getApprovedChannels_result =
object (self)
  val mutable _success : approvedChannelInfos option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getApprovedChannels_result.success") | Some _x5806 -> _x5806
  method set_success _x5806 = _success <- Some _x5806
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getApprovedChannels_result.e") | Some _x5807 -> _x5807
  method set_e _x5807 = _e <- Some _x5807
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getApprovedChannels_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getApprovedChannels_result (iprot : Protocol.t) =
  let _str5810 = new getApprovedChannels_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5811,_id5812) = iprot#readFieldBegin in
        if _t5811 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5812 with 
          | 0 -> (if _t5811 = Protocol.T_STRUCT then
              _str5810#set_success (read_approvedChannelInfos iprot)
            else
              iprot#skip _t5811)
          | 1 -> (if _t5811 = Protocol.T_STRUCT then
              _str5810#set_e (read_channelException iprot)
            else
              iprot#skip _t5811)
          | _ -> iprot#skip _t5811);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5810

class getChannelInfo_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "getChannelInfo_args.channelId") | Some _x5813 -> _x5813
  method set_channelId _x5813 = _channelId <- Some _x5813
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "getChannelInfo_args.locale") | Some _x5814 -> _x5814
  method set_locale _x5814 = _locale <- Some _x5814
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChannelInfo_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChannelInfo_args (iprot : Protocol.t) =
  let _str5817 = new getChannelInfo_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5818,_id5819) = iprot#readFieldBegin in
        if _t5818 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5819 with 
          | 2 -> (if _t5818 = Protocol.T_STRING then
              _str5817#set_channelId iprot#readString
            else
              iprot#skip _t5818)
          | 3 -> (if _t5818 = Protocol.T_STRING then
              _str5817#set_locale iprot#readString
            else
              iprot#skip _t5818)
          | _ -> iprot#skip _t5818);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5817

class getChannelInfo_result =
object (self)
  val mutable _success : channelInfo option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getChannelInfo_result.success") | Some _x5820 -> _x5820
  method set_success _x5820 = _success <- Some _x5820
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getChannelInfo_result.e") | Some _x5821 -> _x5821
  method set_e _x5821 = _e <- Some _x5821
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChannelInfo_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChannelInfo_result (iprot : Protocol.t) =
  let _str5824 = new getChannelInfo_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5825,_id5826) = iprot#readFieldBegin in
        if _t5825 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5826 with 
          | 0 -> (if _t5825 = Protocol.T_STRUCT then
              _str5824#set_success (read_channelInfo iprot)
            else
              iprot#skip _t5825)
          | 1 -> (if _t5825 = Protocol.T_STRUCT then
              _str5824#set_e (read_channelException iprot)
            else
              iprot#skip _t5825)
          | _ -> iprot#skip _t5825);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5824

class getChannelNotificationSetting_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "getChannelNotificationSetting_args.channelId") | Some _x5827 -> _x5827
  method set_channelId _x5827 = _channelId <- Some _x5827
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "getChannelNotificationSetting_args.locale") | Some _x5828 -> _x5828
  method set_locale _x5828 = _locale <- Some _x5828
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChannelNotificationSetting_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChannelNotificationSetting_args (iprot : Protocol.t) =
  let _str5831 = new getChannelNotificationSetting_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5832,_id5833) = iprot#readFieldBegin in
        if _t5832 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5833 with 
          | 1 -> (if _t5832 = Protocol.T_STRING then
              _str5831#set_channelId iprot#readString
            else
              iprot#skip _t5832)
          | 2 -> (if _t5832 = Protocol.T_STRING then
              _str5831#set_locale iprot#readString
            else
              iprot#skip _t5832)
          | _ -> iprot#skip _t5832);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5831

class getChannelNotificationSetting_result =
object (self)
  val mutable _success : channelNotificationSetting option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getChannelNotificationSetting_result.success") | Some _x5834 -> _x5834
  method set_success _x5834 = _success <- Some _x5834
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getChannelNotificationSetting_result.e") | Some _x5835 -> _x5835
  method set_e _x5835 = _e <- Some _x5835
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChannelNotificationSetting_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChannelNotificationSetting_result (iprot : Protocol.t) =
  let _str5838 = new getChannelNotificationSetting_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5839,_id5840) = iprot#readFieldBegin in
        if _t5839 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5840 with 
          | 0 -> (if _t5839 = Protocol.T_STRUCT then
              _str5838#set_success (read_channelNotificationSetting iprot)
            else
              iprot#skip _t5839)
          | 1 -> (if _t5839 = Protocol.T_STRUCT then
              _str5838#set_e (read_channelException iprot)
            else
              iprot#skip _t5839)
          | _ -> iprot#skip _t5839);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5838

class getChannelNotificationSettings_args =
object (self)
  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "getChannelNotificationSettings_args.locale") | Some _x5841 -> _x5841
  method set_locale _x5841 = _locale <- Some _x5841
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChannelNotificationSettings_args";
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChannelNotificationSettings_args (iprot : Protocol.t) =
  let _str5844 = new getChannelNotificationSettings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5845,_id5846) = iprot#readFieldBegin in
        if _t5845 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5846 with 
          | 1 -> (if _t5845 = Protocol.T_STRING then
              _str5844#set_locale iprot#readString
            else
              iprot#skip _t5845)
          | _ -> iprot#skip _t5845);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5844

class getChannelNotificationSettings_result =
object (self)
  val mutable _success : channelNotificationSetting list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getChannelNotificationSettings_result.success") | Some _x5847 -> _x5847
  method set_success _x5847 = _success <- Some _x5847
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getChannelNotificationSettings_result.e") | Some _x5848 -> _x5848
  method set_e _x5848 = _e <- Some _x5848
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChannelNotificationSettings_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter5851 ->         _iter5851#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChannelNotificationSettings_result (iprot : Protocol.t) =
  let _str5852 = new getChannelNotificationSettings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5853,_id5854) = iprot#readFieldBegin in
        if _t5853 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5854 with 
          | 0 -> (if _t5853 = Protocol.T_LIST then
              _str5852#set_success 
                (let (_etype5858,_size5855) = iprot#readListBegin in
                  let _con5859 = (Array.to_list (Array.init _size5855 (fun _ -> (read_channelNotificationSetting iprot)))) in
                    iprot#readListEnd; _con5859)
            else
              iprot#skip _t5853)
          | 1 -> (if _t5853 = Protocol.T_STRUCT then
              _str5852#set_e (read_channelException iprot)
            else
              iprot#skip _t5853)
          | _ -> iprot#skip _t5853);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5852

class getChannels_args =
object (self)
  val mutable _lastSynced : Int64.t option = None
  method get_lastSynced = _lastSynced
  method grab_lastSynced = match _lastSynced with None->raise (Field_empty "getChannels_args.lastSynced") | Some _x5860 -> _x5860
  method set_lastSynced _x5860 = _lastSynced <- Some _x5860
  method unset_lastSynced = _lastSynced <- None
  method reset_lastSynced = _lastSynced <- None

  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "getChannels_args.locale") | Some _x5861 -> _x5861
  method set_locale _x5861 = _locale <- Some _x5861
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChannels_args";
    (match _lastSynced with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastSynced",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChannels_args (iprot : Protocol.t) =
  let _str5864 = new getChannels_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5865,_id5866) = iprot#readFieldBegin in
        if _t5865 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5866 with 
          | 2 -> (if _t5865 = Protocol.T_I64 then
              _str5864#set_lastSynced iprot#readI64
            else
              iprot#skip _t5865)
          | 3 -> (if _t5865 = Protocol.T_STRING then
              _str5864#set_locale iprot#readString
            else
              iprot#skip _t5865)
          | _ -> iprot#skip _t5865);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5864

class getChannels_result =
object (self)
  val mutable _success : channelInfos option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getChannels_result.success") | Some _x5867 -> _x5867
  method set_success _x5867 = _success <- Some _x5867
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getChannels_result.e") | Some _x5868 -> _x5868
  method set_e _x5868 = _e <- Some _x5868
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getChannels_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getChannels_result (iprot : Protocol.t) =
  let _str5871 = new getChannels_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5872,_id5873) = iprot#readFieldBegin in
        if _t5872 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5873 with 
          | 0 -> (if _t5872 = Protocol.T_STRUCT then
              _str5871#set_success (read_channelInfos iprot)
            else
              iprot#skip _t5872)
          | 1 -> (if _t5872 = Protocol.T_STRUCT then
              _str5871#set_e (read_channelException iprot)
            else
              iprot#skip _t5872)
          | _ -> iprot#skip _t5872);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5871

class getDomains_args =
object (self)
  val mutable _lastSynced : Int64.t option = None
  method get_lastSynced = _lastSynced
  method grab_lastSynced = match _lastSynced with None->raise (Field_empty "getDomains_args.lastSynced") | Some _x5874 -> _x5874
  method set_lastSynced _x5874 = _lastSynced <- Some _x5874
  method unset_lastSynced = _lastSynced <- None
  method reset_lastSynced = _lastSynced <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getDomains_args";
    (match _lastSynced with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastSynced",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getDomains_args (iprot : Protocol.t) =
  let _str5877 = new getDomains_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5878,_id5879) = iprot#readFieldBegin in
        if _t5878 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5879 with 
          | 2 -> (if _t5878 = Protocol.T_I64 then
              _str5877#set_lastSynced iprot#readI64
            else
              iprot#skip _t5878)
          | _ -> iprot#skip _t5878);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5877

class getDomains_result =
object (self)
  val mutable _success : channelDomains option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getDomains_result.success") | Some _x5880 -> _x5880
  method set_success _x5880 = _success <- Some _x5880
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getDomains_result.e") | Some _x5881 -> _x5881
  method set_e _x5881 = _e <- Some _x5881
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getDomains_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getDomains_result (iprot : Protocol.t) =
  let _str5884 = new getDomains_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5885,_id5886) = iprot#readFieldBegin in
        if _t5885 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5886 with 
          | 0 -> (if _t5885 = Protocol.T_STRUCT then
              _str5884#set_success (read_channelDomains iprot)
            else
              iprot#skip _t5885)
          | 1 -> (if _t5885 = Protocol.T_STRUCT then
              _str5884#set_e (read_channelException iprot)
            else
              iprot#skip _t5885)
          | _ -> iprot#skip _t5885);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5884

class getFriendChannelMatrices_args =
object (self)
  val mutable _channelIds : string list option = None
  method get_channelIds = _channelIds
  method grab_channelIds = match _channelIds with None->raise (Field_empty "getFriendChannelMatrices_args.channelIds") | Some _x5887 -> _x5887
  method set_channelIds _x5887 = _channelIds <- Some _x5887
  method unset_channelIds = _channelIds <- None
  method reset_channelIds = _channelIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFriendChannelMatrices_args";
    (match _channelIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelIds",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5890 ->         oprot#writeString(_iter5890);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFriendChannelMatrices_args (iprot : Protocol.t) =
  let _str5891 = new getFriendChannelMatrices_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5892,_id5893) = iprot#readFieldBegin in
        if _t5892 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5893 with 
          | 1 -> (if _t5892 = Protocol.T_LIST then
              _str5891#set_channelIds 
                (let (_etype5897,_size5894) = iprot#readListBegin in
                  let _con5898 = (Array.to_list (Array.init _size5894 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5898)
            else
              iprot#skip _t5892)
          | _ -> iprot#skip _t5892);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5891

class getFriendChannelMatrices_result =
object (self)
  val mutable _success : friendChannelMatricesResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getFriendChannelMatrices_result.success") | Some _x5899 -> _x5899
  method set_success _x5899 = _success <- Some _x5899
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getFriendChannelMatrices_result.e") | Some _x5900 -> _x5900
  method set_e _x5900 = _e <- Some _x5900
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFriendChannelMatrices_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFriendChannelMatrices_result (iprot : Protocol.t) =
  let _str5903 = new getFriendChannelMatrices_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5904,_id5905) = iprot#readFieldBegin in
        if _t5904 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5905 with 
          | 0 -> (if _t5904 = Protocol.T_STRUCT then
              _str5903#set_success (read_friendChannelMatricesResponse iprot)
            else
              iprot#skip _t5904)
          | 1 -> (if _t5904 = Protocol.T_STRUCT then
              _str5903#set_e (read_channelException iprot)
            else
              iprot#skip _t5904)
          | _ -> iprot#skip _t5904);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5903

class updateChannelSettings_args =
object (self)
  val mutable _channelSettings : channelSettings option = None
  method get_channelSettings = _channelSettings
  method grab_channelSettings = match _channelSettings with None->raise (Field_empty "updateChannelSettings_args.channelSettings") | Some _x5906 -> _x5906
  method set_channelSettings _x5906 = _channelSettings <- Some _x5906
  method unset_channelSettings = _channelSettings <- None
  method reset_channelSettings = _channelSettings <- None

  method copy =
      let _new = Oo.copy self in
      if _channelSettings <> None then
        _new#set_channelSettings self#grab_channelSettings#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateChannelSettings_args";
    (match _channelSettings with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelSettings",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateChannelSettings_args (iprot : Protocol.t) =
  let _str5909 = new updateChannelSettings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5910,_id5911) = iprot#readFieldBegin in
        if _t5910 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5911 with 
          | 1 -> (if _t5910 = Protocol.T_STRUCT then
              _str5909#set_channelSettings (read_channelSettings iprot)
            else
              iprot#skip _t5910)
          | _ -> iprot#skip _t5910);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5909

class updateChannelSettings_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateChannelSettings_result.success") | Some _x5912 -> _x5912
  method set_success _x5912 = _success <- Some _x5912
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateChannelSettings_result.e") | Some _x5913 -> _x5913
  method set_e _x5913 = _e <- Some _x5913
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateChannelSettings_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateChannelSettings_result (iprot : Protocol.t) =
  let _str5916 = new updateChannelSettings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5917,_id5918) = iprot#readFieldBegin in
        if _t5917 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5918 with 
          | 0 -> (if _t5917 = Protocol.T_BOOL then
              _str5916#set_success iprot#readBool
            else
              iprot#skip _t5917)
          | 1 -> (if _t5917 = Protocol.T_STRUCT then
              _str5916#set_e (read_channelException iprot)
            else
              iprot#skip _t5917)
          | _ -> iprot#skip _t5917);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5916

class getCommonDomains_args =
object (self)
  val mutable _lastSynced : Int64.t option = None
  method get_lastSynced = _lastSynced
  method grab_lastSynced = match _lastSynced with None->raise (Field_empty "getCommonDomains_args.lastSynced") | Some _x5919 -> _x5919
  method set_lastSynced _x5919 = _lastSynced <- Some _x5919
  method unset_lastSynced = _lastSynced <- None
  method reset_lastSynced = _lastSynced <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCommonDomains_args";
    (match _lastSynced with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastSynced",Protocol.T_I64,1);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCommonDomains_args (iprot : Protocol.t) =
  let _str5922 = new getCommonDomains_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5923,_id5924) = iprot#readFieldBegin in
        if _t5923 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5924 with 
          | 1 -> (if _t5923 = Protocol.T_I64 then
              _str5922#set_lastSynced iprot#readI64
            else
              iprot#skip _t5923)
          | _ -> iprot#skip _t5923);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5922

class getCommonDomains_result =
object (self)
  val mutable _success : channelDomains option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCommonDomains_result.success") | Some _x5925 -> _x5925
  method set_success _x5925 = _success <- Some _x5925
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCommonDomains_result.e") | Some _x5926 -> _x5926
  method set_e _x5926 = _e <- Some _x5926
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCommonDomains_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCommonDomains_result (iprot : Protocol.t) =
  let _str5929 = new getCommonDomains_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5930,_id5931) = iprot#readFieldBegin in
        if _t5930 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5931 with 
          | 0 -> (if _t5930 = Protocol.T_STRUCT then
              _str5929#set_success (read_channelDomains iprot)
            else
              iprot#skip _t5930)
          | 1 -> (if _t5930 = Protocol.T_STRUCT then
              _str5929#set_e (read_channelException iprot)
            else
              iprot#skip _t5930)
          | _ -> iprot#skip _t5930);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5929

class getNotificationBadgeCount_args =
object (self)
  val mutable _localRev : Int64.t option = None
  method get_localRev = _localRev
  method grab_localRev = match _localRev with None->raise (Field_empty "getNotificationBadgeCount_args.localRev") | Some _x5932 -> _x5932
  method set_localRev _x5932 = _localRev <- Some _x5932
  method unset_localRev = _localRev <- None
  method reset_localRev = _localRev <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNotificationBadgeCount_args";
    (match _localRev with None -> () | Some _v -> 
      oprot#writeFieldBegin("localRev",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNotificationBadgeCount_args (iprot : Protocol.t) =
  let _str5935 = new getNotificationBadgeCount_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5936,_id5937) = iprot#readFieldBegin in
        if _t5936 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5937 with 
          | 2 -> (if _t5936 = Protocol.T_I64 then
              _str5935#set_localRev iprot#readI64
            else
              iprot#skip _t5936)
          | _ -> iprot#skip _t5936);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5935

class getNotificationBadgeCount_result =
object (self)
  val mutable _success : Int32.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getNotificationBadgeCount_result.success") | Some _x5938 -> _x5938
  method set_success _x5938 = _success <- Some _x5938
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getNotificationBadgeCount_result.e") | Some _x5939 -> _x5939
  method set_e _x5939 = _e <- Some _x5939
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNotificationBadgeCount_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I32,0);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNotificationBadgeCount_result (iprot : Protocol.t) =
  let _str5942 = new getNotificationBadgeCount_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5943,_id5944) = iprot#readFieldBegin in
        if _t5943 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5944 with 
          | 0 -> (if _t5943 = Protocol.T_I32 then
              _str5942#set_success iprot#readI32
            else
              iprot#skip _t5943)
          | 1 -> (if _t5943 = Protocol.T_STRUCT then
              _str5942#set_e (read_channelException iprot)
            else
              iprot#skip _t5943)
          | _ -> iprot#skip _t5943);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5942

class issueChannelToken_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "issueChannelToken_args.channelId") | Some _x5945 -> _x5945
  method set_channelId _x5945 = _channelId <- Some _x5945
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueChannelToken_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueChannelToken_args (iprot : Protocol.t) =
  let _str5948 = new issueChannelToken_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5949,_id5950) = iprot#readFieldBegin in
        if _t5949 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5950 with 
          | 1 -> (if _t5949 = Protocol.T_STRING then
              _str5948#set_channelId iprot#readString
            else
              iprot#skip _t5949)
          | _ -> iprot#skip _t5949);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5948

class issueChannelToken_result =
object (self)
  val mutable _success : channelToken option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "issueChannelToken_result.success") | Some _x5951 -> _x5951
  method set_success _x5951 = _success <- Some _x5951
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "issueChannelToken_result.e") | Some _x5952 -> _x5952
  method set_e _x5952 = _e <- Some _x5952
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueChannelToken_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueChannelToken_result (iprot : Protocol.t) =
  let _str5955 = new issueChannelToken_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5956,_id5957) = iprot#readFieldBegin in
        if _t5956 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5957 with 
          | 0 -> (if _t5956 = Protocol.T_STRUCT then
              _str5955#set_success (read_channelToken iprot)
            else
              iprot#skip _t5956)
          | 1 -> (if _t5956 = Protocol.T_STRUCT then
              _str5955#set_e (read_channelException iprot)
            else
              iprot#skip _t5956)
          | _ -> iprot#skip _t5956);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5955

class issueRequestToken_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "issueRequestToken_args.channelId") | Some _x5958 -> _x5958
  method set_channelId _x5958 = _channelId <- Some _x5958
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _otpId : string option = None
  method get_otpId = _otpId
  method grab_otpId = match _otpId with None->raise (Field_empty "issueRequestToken_args.otpId") | Some _x5959 -> _x5959
  method set_otpId _x5959 = _otpId <- Some _x5959
  method unset_otpId = _otpId <- None
  method reset_otpId = _otpId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueRequestToken_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _otpId with None -> () | Some _v -> 
      oprot#writeFieldBegin("otpId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueRequestToken_args (iprot : Protocol.t) =
  let _str5962 = new issueRequestToken_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5963,_id5964) = iprot#readFieldBegin in
        if _t5963 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5964 with 
          | 1 -> (if _t5963 = Protocol.T_STRING then
              _str5962#set_channelId iprot#readString
            else
              iprot#skip _t5963)
          | 2 -> (if _t5963 = Protocol.T_STRING then
              _str5962#set_otpId iprot#readString
            else
              iprot#skip _t5963)
          | _ -> iprot#skip _t5963);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5962

class issueRequestToken_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "issueRequestToken_result.success") | Some _x5965 -> _x5965
  method set_success _x5965 = _success <- Some _x5965
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "issueRequestToken_result.e") | Some _x5966 -> _x5966
  method set_e _x5966 = _e <- Some _x5966
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueRequestToken_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueRequestToken_result (iprot : Protocol.t) =
  let _str5969 = new issueRequestToken_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5970,_id5971) = iprot#readFieldBegin in
        if _t5970 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5971 with 
          | 0 -> (if _t5970 = Protocol.T_STRING then
              _str5969#set_success iprot#readString
            else
              iprot#skip _t5970)
          | 1 -> (if _t5970 = Protocol.T_STRUCT then
              _str5969#set_e (read_channelException iprot)
            else
              iprot#skip _t5970)
          | _ -> iprot#skip _t5970);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5969

class issueRequestTokenWithAuthScheme_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "issueRequestTokenWithAuthScheme_args.channelId") | Some _x5972 -> _x5972
  method set_channelId _x5972 = _channelId <- Some _x5972
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _otpId : string option = None
  method get_otpId = _otpId
  method grab_otpId = match _otpId with None->raise (Field_empty "issueRequestTokenWithAuthScheme_args.otpId") | Some _x5973 -> _x5973
  method set_otpId _x5973 = _otpId <- Some _x5973
  method unset_otpId = _otpId <- None
  method reset_otpId = _otpId <- None

  val mutable _authScheme : string list option = None
  method get_authScheme = _authScheme
  method grab_authScheme = match _authScheme with None->raise (Field_empty "issueRequestTokenWithAuthScheme_args.authScheme") | Some _x5974 -> _x5974
  method set_authScheme _x5974 = _authScheme <- Some _x5974
  method unset_authScheme = _authScheme <- None
  method reset_authScheme = _authScheme <- None

  val mutable _returnUrl : string option = None
  method get_returnUrl = _returnUrl
  method grab_returnUrl = match _returnUrl with None->raise (Field_empty "issueRequestTokenWithAuthScheme_args.returnUrl") | Some _x5975 -> _x5975
  method set_returnUrl _x5975 = _returnUrl <- Some _x5975
  method unset_returnUrl = _returnUrl <- None
  method reset_returnUrl = _returnUrl <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueRequestTokenWithAuthScheme_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _otpId with None -> () | Some _v -> 
      oprot#writeFieldBegin("otpId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _authScheme with None -> () | Some _v -> 
      oprot#writeFieldBegin("authScheme",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5978 ->         oprot#writeString(_iter5978);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _returnUrl with None -> () | Some _v -> 
      oprot#writeFieldBegin("returnUrl",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueRequestTokenWithAuthScheme_args (iprot : Protocol.t) =
  let _str5979 = new issueRequestTokenWithAuthScheme_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5980,_id5981) = iprot#readFieldBegin in
        if _t5980 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5981 with 
          | 1 -> (if _t5980 = Protocol.T_STRING then
              _str5979#set_channelId iprot#readString
            else
              iprot#skip _t5980)
          | 2 -> (if _t5980 = Protocol.T_STRING then
              _str5979#set_otpId iprot#readString
            else
              iprot#skip _t5980)
          | 3 -> (if _t5980 = Protocol.T_LIST then
              _str5979#set_authScheme 
                (let (_etype5985,_size5982) = iprot#readListBegin in
                  let _con5986 = (Array.to_list (Array.init _size5982 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5986)
            else
              iprot#skip _t5980)
          | 4 -> (if _t5980 = Protocol.T_STRING then
              _str5979#set_returnUrl iprot#readString
            else
              iprot#skip _t5980)
          | _ -> iprot#skip _t5980);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5979

class issueRequestTokenWithAuthScheme_result =
object (self)
  val mutable _success : requestTokenResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "issueRequestTokenWithAuthScheme_result.success") | Some _x5987 -> _x5987
  method set_success _x5987 = _success <- Some _x5987
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "issueRequestTokenWithAuthScheme_result.e") | Some _x5988 -> _x5988
  method set_e _x5988 = _e <- Some _x5988
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueRequestTokenWithAuthScheme_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueRequestTokenWithAuthScheme_result (iprot : Protocol.t) =
  let _str5991 = new issueRequestTokenWithAuthScheme_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5992,_id5993) = iprot#readFieldBegin in
        if _t5992 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5993 with 
          | 0 -> (if _t5992 = Protocol.T_STRUCT then
              _str5991#set_success (read_requestTokenResponse iprot)
            else
              iprot#skip _t5992)
          | 1 -> (if _t5992 = Protocol.T_STRUCT then
              _str5991#set_e (read_channelException iprot)
            else
              iprot#skip _t5992)
          | _ -> iprot#skip _t5992);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5991

class issueRequestTokenForAutoLogin_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "issueRequestTokenForAutoLogin_args.channelId") | Some _x5994 -> _x5994
  method set_channelId _x5994 = _channelId <- Some _x5994
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  val mutable _otpId : string option = None
  method get_otpId = _otpId
  method grab_otpId = match _otpId with None->raise (Field_empty "issueRequestTokenForAutoLogin_args.otpId") | Some _x5995 -> _x5995
  method set_otpId _x5995 = _otpId <- Some _x5995
  method unset_otpId = _otpId <- None
  method reset_otpId = _otpId <- None

  val mutable _redirectUrl : string option = None
  method get_redirectUrl = _redirectUrl
  method grab_redirectUrl = match _redirectUrl with None->raise (Field_empty "issueRequestTokenForAutoLogin_args.redirectUrl") | Some _x5996 -> _x5996
  method set_redirectUrl _x5996 = _redirectUrl <- Some _x5996
  method unset_redirectUrl = _redirectUrl <- None
  method reset_redirectUrl = _redirectUrl <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueRequestTokenForAutoLogin_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _otpId with None -> () | Some _v -> 
      oprot#writeFieldBegin("otpId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _redirectUrl with None -> () | Some _v -> 
      oprot#writeFieldBegin("redirectUrl",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueRequestTokenForAutoLogin_args (iprot : Protocol.t) =
  let _str5999 = new issueRequestTokenForAutoLogin_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6000,_id6001) = iprot#readFieldBegin in
        if _t6000 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6001 with 
          | 2 -> (if _t6000 = Protocol.T_STRING then
              _str5999#set_channelId iprot#readString
            else
              iprot#skip _t6000)
          | 3 -> (if _t6000 = Protocol.T_STRING then
              _str5999#set_otpId iprot#readString
            else
              iprot#skip _t6000)
          | 4 -> (if _t6000 = Protocol.T_STRING then
              _str5999#set_redirectUrl iprot#readString
            else
              iprot#skip _t6000)
          | _ -> iprot#skip _t6000);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5999

class issueRequestTokenForAutoLogin_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "issueRequestTokenForAutoLogin_result.success") | Some _x6002 -> _x6002
  method set_success _x6002 = _success <- Some _x6002
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "issueRequestTokenForAutoLogin_result.e") | Some _x6003 -> _x6003
  method set_e _x6003 = _e <- Some _x6003
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "issueRequestTokenForAutoLogin_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_issueRequestTokenForAutoLogin_result (iprot : Protocol.t) =
  let _str6006 = new issueRequestTokenForAutoLogin_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6007,_id6008) = iprot#readFieldBegin in
        if _t6007 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6008 with 
          | 0 -> (if _t6007 = Protocol.T_STRING then
              _str6006#set_success iprot#readString
            else
              iprot#skip _t6007)
          | 1 -> (if _t6007 = Protocol.T_STRUCT then
              _str6006#set_e (read_channelException iprot)
            else
              iprot#skip _t6007)
          | _ -> iprot#skip _t6007);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6006

class getUpdatedChannelIds_args =
object (self)
  val mutable _channelIds : channelIdWithLastUpdated list option = None
  method get_channelIds = _channelIds
  method grab_channelIds = match _channelIds with None->raise (Field_empty "getUpdatedChannelIds_args.channelIds") | Some _x6009 -> _x6009
  method set_channelIds _x6009 = _channelIds <- Some _x6009
  method unset_channelIds = _channelIds <- None
  method reset_channelIds = _channelIds <- None

  method copy =
      let _new = Oo.copy self in
      if _channelIds <> None then
        _new#set_channelIds (List.map (fun x -> x#copy) self#grab_channelIds);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUpdatedChannelIds_args";
    (match _channelIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelIds",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter6012 ->         _iter6012#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUpdatedChannelIds_args (iprot : Protocol.t) =
  let _str6013 = new getUpdatedChannelIds_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6014,_id6015) = iprot#readFieldBegin in
        if _t6014 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6015 with 
          | 1 -> (if _t6014 = Protocol.T_LIST then
              _str6013#set_channelIds 
                (let (_etype6019,_size6016) = iprot#readListBegin in
                  let _con6020 = (Array.to_list (Array.init _size6016 (fun _ -> (read_channelIdWithLastUpdated iprot)))) in
                    iprot#readListEnd; _con6020)
            else
              iprot#skip _t6014)
          | _ -> iprot#skip _t6014);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6013

class getUpdatedChannelIds_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUpdatedChannelIds_result.success") | Some _x6021 -> _x6021
  method set_success _x6021 = _success <- Some _x6021
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUpdatedChannelIds_result.e") | Some _x6022 -> _x6022
  method set_e _x6022 = _e <- Some _x6022
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUpdatedChannelIds_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6025 ->         oprot#writeString(_iter6025);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUpdatedChannelIds_result (iprot : Protocol.t) =
  let _str6026 = new getUpdatedChannelIds_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6027,_id6028) = iprot#readFieldBegin in
        if _t6027 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6028 with 
          | 0 -> (if _t6027 = Protocol.T_LIST then
              _str6026#set_success 
                (let (_etype6032,_size6029) = iprot#readListBegin in
                  let _con6033 = (Array.to_list (Array.init _size6029 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6033)
            else
              iprot#skip _t6027)
          | 1 -> (if _t6027 = Protocol.T_STRUCT then
              _str6026#set_e (read_channelException iprot)
            else
              iprot#skip _t6027)
          | _ -> iprot#skip _t6027);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6026

class reserveCoinUse_args =
object (self)
  val mutable _request : coinUseReservation option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "reserveCoinUse_args.request") | Some _x6034 -> _x6034
  method set_request _x6034 = _request <- Some _x6034
  method unset_request = _request <- None
  method reset_request = _request <- None

  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "reserveCoinUse_args.locale") | Some _x6035 -> _x6035
  method set_locale _x6035 = _locale <- Some _x6035
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reserveCoinUse_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reserveCoinUse_args (iprot : Protocol.t) =
  let _str6038 = new reserveCoinUse_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6039,_id6040) = iprot#readFieldBegin in
        if _t6039 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6040 with 
          | 2 -> (if _t6039 = Protocol.T_STRUCT then
              _str6038#set_request (read_coinUseReservation iprot)
            else
              iprot#skip _t6039)
          | 3 -> (if _t6039 = Protocol.T_STRING then
              _str6038#set_locale iprot#readString
            else
              iprot#skip _t6039)
          | _ -> iprot#skip _t6039);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6038

class reserveCoinUse_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reserveCoinUse_result.success") | Some _x6041 -> _x6041
  method set_success _x6041 = _success <- Some _x6041
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reserveCoinUse_result.e") | Some _x6042 -> _x6042
  method set_e _x6042 = _e <- Some _x6042
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reserveCoinUse_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reserveCoinUse_result (iprot : Protocol.t) =
  let _str6045 = new reserveCoinUse_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6046,_id6047) = iprot#readFieldBegin in
        if _t6046 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6047 with 
          | 0 -> (if _t6046 = Protocol.T_STRING then
              _str6045#set_success iprot#readString
            else
              iprot#skip _t6046)
          | 1 -> (if _t6046 = Protocol.T_STRUCT then
              _str6045#set_e (read_channelException iprot)
            else
              iprot#skip _t6046)
          | _ -> iprot#skip _t6046);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6045

class revokeChannel_args =
object (self)
  val mutable _channelId : string option = None
  method get_channelId = _channelId
  method grab_channelId = match _channelId with None->raise (Field_empty "revokeChannel_args.channelId") | Some _x6048 -> _x6048
  method set_channelId _x6048 = _channelId <- Some _x6048
  method unset_channelId = _channelId <- None
  method reset_channelId = _channelId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "revokeChannel_args";
    (match _channelId with None -> () | Some _v -> 
      oprot#writeFieldBegin("channelId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_revokeChannel_args (iprot : Protocol.t) =
  let _str6051 = new revokeChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6052,_id6053) = iprot#readFieldBegin in
        if _t6052 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6053 with 
          | 1 -> (if _t6052 = Protocol.T_STRING then
              _str6051#set_channelId iprot#readString
            else
              iprot#skip _t6052)
          | _ -> iprot#skip _t6052);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6051

class revokeChannel_result =
object (self)
  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "revokeChannel_result.e") | Some _x6054 -> _x6054
  method set_e _x6054 = _e <- Some _x6054
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "revokeChannel_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_revokeChannel_result (iprot : Protocol.t) =
  let _str6057 = new revokeChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6058,_id6059) = iprot#readFieldBegin in
        if _t6058 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6059 with 
          | 1 -> (if _t6058 = Protocol.T_STRUCT then
              _str6057#set_e (read_channelException iprot)
            else
              iprot#skip _t6058)
          | _ -> iprot#skip _t6058);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6057

class syncChannelData_args =
object (self)
  val mutable _lastSynced : Int64.t option = None
  method get_lastSynced = _lastSynced
  method grab_lastSynced = match _lastSynced with None->raise (Field_empty "syncChannelData_args.lastSynced") | Some _x6060 -> _x6060
  method set_lastSynced _x6060 = _lastSynced <- Some _x6060
  method unset_lastSynced = _lastSynced <- None
  method reset_lastSynced = _lastSynced <- None

  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "syncChannelData_args.locale") | Some _x6061 -> _x6061
  method set_locale _x6061 = _locale <- Some _x6061
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "syncChannelData_args";
    (match _lastSynced with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastSynced",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_syncChannelData_args (iprot : Protocol.t) =
  let _str6064 = new syncChannelData_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6065,_id6066) = iprot#readFieldBegin in
        if _t6065 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6066 with 
          | 2 -> (if _t6065 = Protocol.T_I64 then
              _str6064#set_lastSynced iprot#readI64
            else
              iprot#skip _t6065)
          | 3 -> (if _t6065 = Protocol.T_STRING then
              _str6064#set_locale iprot#readString
            else
              iprot#skip _t6065)
          | _ -> iprot#skip _t6065);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6064

class syncChannelData_result =
object (self)
  val mutable _success : channelSyncDatas option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "syncChannelData_result.success") | Some _x6067 -> _x6067
  method set_success _x6067 = _success <- Some _x6067
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "syncChannelData_result.e") | Some _x6068 -> _x6068
  method set_e _x6068 = _e <- Some _x6068
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "syncChannelData_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_syncChannelData_result (iprot : Protocol.t) =
  let _str6071 = new syncChannelData_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6072,_id6073) = iprot#readFieldBegin in
        if _t6072 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6073 with 
          | 0 -> (if _t6072 = Protocol.T_STRUCT then
              _str6071#set_success (read_channelSyncDatas iprot)
            else
              iprot#skip _t6072)
          | 1 -> (if _t6072 = Protocol.T_STRUCT then
              _str6071#set_e (read_channelException iprot)
            else
              iprot#skip _t6072)
          | _ -> iprot#skip _t6072);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6071

class updateChannelNotificationSetting_args =
object (self)
  val mutable _setting : channelNotificationSetting list option = None
  method get_setting = _setting
  method grab_setting = match _setting with None->raise (Field_empty "updateChannelNotificationSetting_args.setting") | Some _x6074 -> _x6074
  method set_setting _x6074 = _setting <- Some _x6074
  method unset_setting = _setting <- None
  method reset_setting = _setting <- None

  method copy =
      let _new = Oo.copy self in
      if _setting <> None then
        _new#set_setting (List.map (fun x -> x#copy) self#grab_setting);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateChannelNotificationSetting_args";
    (match _setting with None -> () | Some _v -> 
      oprot#writeFieldBegin("setting",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter6077 ->         _iter6077#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateChannelNotificationSetting_args (iprot : Protocol.t) =
  let _str6078 = new updateChannelNotificationSetting_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6079,_id6080) = iprot#readFieldBegin in
        if _t6079 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6080 with 
          | 1 -> (if _t6079 = Protocol.T_LIST then
              _str6078#set_setting 
                (let (_etype6084,_size6081) = iprot#readListBegin in
                  let _con6085 = (Array.to_list (Array.init _size6081 (fun _ -> (read_channelNotificationSetting iprot)))) in
                    iprot#readListEnd; _con6085)
            else
              iprot#skip _t6079)
          | _ -> iprot#skip _t6079);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6078

class updateChannelNotificationSetting_result =
object (self)
  val mutable _e : channelException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateChannelNotificationSetting_result.e") | Some _x6086 -> _x6086
  method set_e _x6086 = _e <- Some _x6086
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateChannelNotificationSetting_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateChannelNotificationSetting_result (iprot : Protocol.t) =
  let _str6089 = new updateChannelNotificationSetting_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6090,_id6091) = iprot#readFieldBegin in
        if _t6090 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6091 with 
          | 1 -> (if _t6090 = Protocol.T_STRUCT then
              _str6089#set_e (read_channelException iprot)
            else
              iprot#skip _t6090)
          | _ -> iprot#skip _t6090);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6089

class virtual iface =
object (self)
  method virtual issueOTP : string option -> oTPResult
  method virtual approveChannelAndIssueChannelToken : string option -> channelToken
  method virtual approveChannelAndIssueRequestToken : string option -> string option -> string
  method virtual fetchNotificationItems : Int64.t option -> notificationFetchResult
  method virtual getApprovedChannels : Int64.t option -> string option -> approvedChannelInfos
  method virtual getChannelInfo : string option -> string option -> channelInfo
  method virtual getChannelNotificationSetting : string option -> string option -> channelNotificationSetting
  method virtual getChannelNotificationSettings : string option -> channelNotificationSetting list
  method virtual getChannels : Int64.t option -> string option -> channelInfos
  method virtual getDomains : Int64.t option -> channelDomains
  method virtual getFriendChannelMatrices : string list option -> friendChannelMatricesResponse
  method virtual updateChannelSettings : channelSettings option -> bool
  method virtual getCommonDomains : Int64.t option -> channelDomains
  method virtual getNotificationBadgeCount : Int64.t option -> Int32.t
  method virtual issueChannelToken : string option -> channelToken
  method virtual issueRequestToken : string option -> string option -> string
  method virtual issueRequestTokenWithAuthScheme : string option -> string option -> string list option -> string option -> requestTokenResponse
  method virtual issueRequestTokenForAutoLogin : string option -> string option -> string option -> string
  method virtual getUpdatedChannelIds : channelIdWithLastUpdated list option -> string list
  method virtual reserveCoinUse : coinUseReservation option -> string option -> string
  method virtual revokeChannel : string option -> unit
  method virtual syncChannelData : Int64.t option -> string option -> channelSyncDatas
  method virtual updateChannelNotificationSetting : channelNotificationSetting list option -> unit
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method issueOTP channelId = 
    self#send_issueOTP channelId;
    self#recv_issueOTP
  method private send_issueOTP channelId = 
    oprot#writeMessageBegin ("issueOTP", Protocol.CALL, seqid);
    let args = new issueOTP_args in
      args#set_channelId channelId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_issueOTP  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_issueOTP_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "issueOTP failed: unknown result")))
  method approveChannelAndIssueChannelToken channelId = 
    self#send_approveChannelAndIssueChannelToken channelId;
    self#recv_approveChannelAndIssueChannelToken
  method private send_approveChannelAndIssueChannelToken channelId = 
    oprot#writeMessageBegin ("approveChannelAndIssueChannelToken", Protocol.CALL, seqid);
    let args = new approveChannelAndIssueChannelToken_args in
      args#set_channelId channelId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_approveChannelAndIssueChannelToken  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_approveChannelAndIssueChannelToken_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "approveChannelAndIssueChannelToken failed: unknown result")))
  method approveChannelAndIssueRequestToken channelId otpId = 
    self#send_approveChannelAndIssueRequestToken channelId otpId;
    self#recv_approveChannelAndIssueRequestToken
  method private send_approveChannelAndIssueRequestToken channelId otpId = 
    oprot#writeMessageBegin ("approveChannelAndIssueRequestToken", Protocol.CALL, seqid);
    let args = new approveChannelAndIssueRequestToken_args in
      args#set_channelId channelId;
      args#set_otpId otpId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_approveChannelAndIssueRequestToken  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_approveChannelAndIssueRequestToken_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "approveChannelAndIssueRequestToken failed: unknown result")))
  method fetchNotificationItems localRev = 
    self#send_fetchNotificationItems localRev;
    self#recv_fetchNotificationItems
  method private send_fetchNotificationItems localRev = 
    oprot#writeMessageBegin ("fetchNotificationItems", Protocol.CALL, seqid);
    let args = new fetchNotificationItems_args in
      args#set_localRev localRev;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_fetchNotificationItems  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_fetchNotificationItems_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "fetchNotificationItems failed: unknown result")))
  method getApprovedChannels lastSynced locale = 
    self#send_getApprovedChannels lastSynced locale;
    self#recv_getApprovedChannels
  method private send_getApprovedChannels lastSynced locale = 
    oprot#writeMessageBegin ("getApprovedChannels", Protocol.CALL, seqid);
    let args = new getApprovedChannels_args in
      args#set_lastSynced lastSynced;
      args#set_locale locale;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getApprovedChannels  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getApprovedChannels_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getApprovedChannels failed: unknown result")))
  method getChannelInfo channelId locale = 
    self#send_getChannelInfo channelId locale;
    self#recv_getChannelInfo
  method private send_getChannelInfo channelId locale = 
    oprot#writeMessageBegin ("getChannelInfo", Protocol.CALL, seqid);
    let args = new getChannelInfo_args in
      args#set_channelId channelId;
      args#set_locale locale;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getChannelInfo  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getChannelInfo_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getChannelInfo failed: unknown result")))
  method getChannelNotificationSetting channelId locale = 
    self#send_getChannelNotificationSetting channelId locale;
    self#recv_getChannelNotificationSetting
  method private send_getChannelNotificationSetting channelId locale = 
    oprot#writeMessageBegin ("getChannelNotificationSetting", Protocol.CALL, seqid);
    let args = new getChannelNotificationSetting_args in
      args#set_channelId channelId;
      args#set_locale locale;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getChannelNotificationSetting  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getChannelNotificationSetting_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getChannelNotificationSetting failed: unknown result")))
  method getChannelNotificationSettings locale = 
    self#send_getChannelNotificationSettings locale;
    self#recv_getChannelNotificationSettings
  method private send_getChannelNotificationSettings locale = 
    oprot#writeMessageBegin ("getChannelNotificationSettings", Protocol.CALL, seqid);
    let args = new getChannelNotificationSettings_args in
      args#set_locale locale;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getChannelNotificationSettings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getChannelNotificationSettings_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getChannelNotificationSettings failed: unknown result")))
  method getChannels lastSynced locale = 
    self#send_getChannels lastSynced locale;
    self#recv_getChannels
  method private send_getChannels lastSynced locale = 
    oprot#writeMessageBegin ("getChannels", Protocol.CALL, seqid);
    let args = new getChannels_args in
      args#set_lastSynced lastSynced;
      args#set_locale locale;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getChannels  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getChannels_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getChannels failed: unknown result")))
  method getDomains lastSynced = 
    self#send_getDomains lastSynced;
    self#recv_getDomains
  method private send_getDomains lastSynced = 
    oprot#writeMessageBegin ("getDomains", Protocol.CALL, seqid);
    let args = new getDomains_args in
      args#set_lastSynced lastSynced;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getDomains  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getDomains_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getDomains failed: unknown result")))
  method getFriendChannelMatrices channelIds = 
    self#send_getFriendChannelMatrices channelIds;
    self#recv_getFriendChannelMatrices
  method private send_getFriendChannelMatrices channelIds = 
    oprot#writeMessageBegin ("getFriendChannelMatrices", Protocol.CALL, seqid);
    let args = new getFriendChannelMatrices_args in
      args#set_channelIds channelIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getFriendChannelMatrices  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getFriendChannelMatrices_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getFriendChannelMatrices failed: unknown result")))
  method updateChannelSettings channelSettings = 
    self#send_updateChannelSettings channelSettings;
    self#recv_updateChannelSettings
  method private send_updateChannelSettings channelSettings = 
    oprot#writeMessageBegin ("updateChannelSettings", Protocol.CALL, seqid);
    let args = new updateChannelSettings_args in
      args#set_channelSettings channelSettings;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateChannelSettings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateChannelSettings_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateChannelSettings failed: unknown result")))
  method getCommonDomains lastSynced = 
    self#send_getCommonDomains lastSynced;
    self#recv_getCommonDomains
  method private send_getCommonDomains lastSynced = 
    oprot#writeMessageBegin ("getCommonDomains", Protocol.CALL, seqid);
    let args = new getCommonDomains_args in
      args#set_lastSynced lastSynced;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCommonDomains  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCommonDomains_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCommonDomains failed: unknown result")))
  method getNotificationBadgeCount localRev = 
    self#send_getNotificationBadgeCount localRev;
    self#recv_getNotificationBadgeCount
  method private send_getNotificationBadgeCount localRev = 
    oprot#writeMessageBegin ("getNotificationBadgeCount", Protocol.CALL, seqid);
    let args = new getNotificationBadgeCount_args in
      args#set_localRev localRev;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getNotificationBadgeCount  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getNotificationBadgeCount_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getNotificationBadgeCount failed: unknown result")))
  method issueChannelToken channelId = 
    self#send_issueChannelToken channelId;
    self#recv_issueChannelToken
  method private send_issueChannelToken channelId = 
    oprot#writeMessageBegin ("issueChannelToken", Protocol.CALL, seqid);
    let args = new issueChannelToken_args in
      args#set_channelId channelId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_issueChannelToken  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_issueChannelToken_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "issueChannelToken failed: unknown result")))
  method issueRequestToken channelId otpId = 
    self#send_issueRequestToken channelId otpId;
    self#recv_issueRequestToken
  method private send_issueRequestToken channelId otpId = 
    oprot#writeMessageBegin ("issueRequestToken", Protocol.CALL, seqid);
    let args = new issueRequestToken_args in
      args#set_channelId channelId;
      args#set_otpId otpId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_issueRequestToken  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_issueRequestToken_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "issueRequestToken failed: unknown result")))
  method issueRequestTokenWithAuthScheme channelId otpId authScheme returnUrl = 
    self#send_issueRequestTokenWithAuthScheme channelId otpId authScheme returnUrl;
    self#recv_issueRequestTokenWithAuthScheme
  method private send_issueRequestTokenWithAuthScheme channelId otpId authScheme returnUrl = 
    oprot#writeMessageBegin ("issueRequestTokenWithAuthScheme", Protocol.CALL, seqid);
    let args = new issueRequestTokenWithAuthScheme_args in
      args#set_channelId channelId;
      args#set_otpId otpId;
      args#set_authScheme authScheme;
      args#set_returnUrl returnUrl;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_issueRequestTokenWithAuthScheme  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_issueRequestTokenWithAuthScheme_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "issueRequestTokenWithAuthScheme failed: unknown result")))
  method issueRequestTokenForAutoLogin channelId otpId redirectUrl = 
    self#send_issueRequestTokenForAutoLogin channelId otpId redirectUrl;
    self#recv_issueRequestTokenForAutoLogin
  method private send_issueRequestTokenForAutoLogin channelId otpId redirectUrl = 
    oprot#writeMessageBegin ("issueRequestTokenForAutoLogin", Protocol.CALL, seqid);
    let args = new issueRequestTokenForAutoLogin_args in
      args#set_channelId channelId;
      args#set_otpId otpId;
      args#set_redirectUrl redirectUrl;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_issueRequestTokenForAutoLogin  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_issueRequestTokenForAutoLogin_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "issueRequestTokenForAutoLogin failed: unknown result")))
  method getUpdatedChannelIds channelIds = 
    self#send_getUpdatedChannelIds channelIds;
    self#recv_getUpdatedChannelIds
  method private send_getUpdatedChannelIds channelIds = 
    oprot#writeMessageBegin ("getUpdatedChannelIds", Protocol.CALL, seqid);
    let args = new getUpdatedChannelIds_args in
      args#set_channelIds channelIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUpdatedChannelIds  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUpdatedChannelIds_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUpdatedChannelIds failed: unknown result")))
  method reserveCoinUse request locale = 
    self#send_reserveCoinUse request locale;
    self#recv_reserveCoinUse
  method private send_reserveCoinUse request locale = 
    oprot#writeMessageBegin ("reserveCoinUse", Protocol.CALL, seqid);
    let args = new reserveCoinUse_args in
      args#set_request request;
      args#set_locale locale;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reserveCoinUse  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reserveCoinUse_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reserveCoinUse failed: unknown result")))
  method revokeChannel channelId = 
    self#send_revokeChannel channelId;
    self#recv_revokeChannel
  method private send_revokeChannel channelId = 
    oprot#writeMessageBegin ("revokeChannel", Protocol.CALL, seqid);
    let args = new revokeChannel_args in
      args#set_channelId channelId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_revokeChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_revokeChannel_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (ChannelException _v));
        ()
  method syncChannelData lastSynced locale = 
    self#send_syncChannelData lastSynced locale;
    self#recv_syncChannelData
  method private send_syncChannelData lastSynced locale = 
    oprot#writeMessageBegin ("syncChannelData", Protocol.CALL, seqid);
    let args = new syncChannelData_args in
      args#set_lastSynced lastSynced;
      args#set_locale locale;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_syncChannelData  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_syncChannelData_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (ChannelException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "syncChannelData failed: unknown result")))
  method updateChannelNotificationSetting setting = 
    self#send_updateChannelNotificationSetting setting;
    self#recv_updateChannelNotificationSetting
  method private send_updateChannelNotificationSetting setting = 
    oprot#writeMessageBegin ("updateChannelNotificationSetting", Protocol.CALL, seqid);
    let args = new updateChannelNotificationSetting_args in
      args#set_setting setting;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateChannelNotificationSetting  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateChannelNotificationSetting_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (ChannelException _v));
        ()
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 23
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_issueOTP (seqid, iprot, oprot) =
    let args = read_issueOTP_args iprot in
      iprot#readMessageEnd;
      let result = new issueOTP_result in
        (try
          result#set_success (handler#issueOTP args#get_channelId);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("issueOTP", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_approveChannelAndIssueChannelToken (seqid, iprot, oprot) =
    let args = read_approveChannelAndIssueChannelToken_args iprot in
      iprot#readMessageEnd;
      let result = new approveChannelAndIssueChannelToken_result in
        (try
          result#set_success (handler#approveChannelAndIssueChannelToken args#get_channelId);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("approveChannelAndIssueChannelToken", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_approveChannelAndIssueRequestToken (seqid, iprot, oprot) =
    let args = read_approveChannelAndIssueRequestToken_args iprot in
      iprot#readMessageEnd;
      let result = new approveChannelAndIssueRequestToken_result in
        (try
          result#set_success (handler#approveChannelAndIssueRequestToken args#get_channelId args#get_otpId);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("approveChannelAndIssueRequestToken", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_fetchNotificationItems (seqid, iprot, oprot) =
    let args = read_fetchNotificationItems_args iprot in
      iprot#readMessageEnd;
      let result = new fetchNotificationItems_result in
        (try
          result#set_success (handler#fetchNotificationItems args#get_localRev);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("fetchNotificationItems", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getApprovedChannels (seqid, iprot, oprot) =
    let args = read_getApprovedChannels_args iprot in
      iprot#readMessageEnd;
      let result = new getApprovedChannels_result in
        (try
          result#set_success (handler#getApprovedChannels args#get_lastSynced args#get_locale);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getApprovedChannels", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getChannelInfo (seqid, iprot, oprot) =
    let args = read_getChannelInfo_args iprot in
      iprot#readMessageEnd;
      let result = new getChannelInfo_result in
        (try
          result#set_success (handler#getChannelInfo args#get_channelId args#get_locale);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getChannelInfo", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getChannelNotificationSetting (seqid, iprot, oprot) =
    let args = read_getChannelNotificationSetting_args iprot in
      iprot#readMessageEnd;
      let result = new getChannelNotificationSetting_result in
        (try
          result#set_success (handler#getChannelNotificationSetting args#get_channelId args#get_locale);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getChannelNotificationSetting", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getChannelNotificationSettings (seqid, iprot, oprot) =
    let args = read_getChannelNotificationSettings_args iprot in
      iprot#readMessageEnd;
      let result = new getChannelNotificationSettings_result in
        (try
          result#set_success (handler#getChannelNotificationSettings args#get_locale);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getChannelNotificationSettings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getChannels (seqid, iprot, oprot) =
    let args = read_getChannels_args iprot in
      iprot#readMessageEnd;
      let result = new getChannels_result in
        (try
          result#set_success (handler#getChannels args#get_lastSynced args#get_locale);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getChannels", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getDomains (seqid, iprot, oprot) =
    let args = read_getDomains_args iprot in
      iprot#readMessageEnd;
      let result = new getDomains_result in
        (try
          result#set_success (handler#getDomains args#get_lastSynced);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getDomains", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getFriendChannelMatrices (seqid, iprot, oprot) =
    let args = read_getFriendChannelMatrices_args iprot in
      iprot#readMessageEnd;
      let result = new getFriendChannelMatrices_result in
        (try
          result#set_success (handler#getFriendChannelMatrices args#get_channelIds);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getFriendChannelMatrices", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateChannelSettings (seqid, iprot, oprot) =
    let args = read_updateChannelSettings_args iprot in
      iprot#readMessageEnd;
      let result = new updateChannelSettings_result in
        (try
          result#set_success (handler#updateChannelSettings args#get_channelSettings);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateChannelSettings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCommonDomains (seqid, iprot, oprot) =
    let args = read_getCommonDomains_args iprot in
      iprot#readMessageEnd;
      let result = new getCommonDomains_result in
        (try
          result#set_success (handler#getCommonDomains args#get_lastSynced);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCommonDomains", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getNotificationBadgeCount (seqid, iprot, oprot) =
    let args = read_getNotificationBadgeCount_args iprot in
      iprot#readMessageEnd;
      let result = new getNotificationBadgeCount_result in
        (try
          result#set_success (handler#getNotificationBadgeCount args#get_localRev);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getNotificationBadgeCount", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_issueChannelToken (seqid, iprot, oprot) =
    let args = read_issueChannelToken_args iprot in
      iprot#readMessageEnd;
      let result = new issueChannelToken_result in
        (try
          result#set_success (handler#issueChannelToken args#get_channelId);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("issueChannelToken", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_issueRequestToken (seqid, iprot, oprot) =
    let args = read_issueRequestToken_args iprot in
      iprot#readMessageEnd;
      let result = new issueRequestToken_result in
        (try
          result#set_success (handler#issueRequestToken args#get_channelId args#get_otpId);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("issueRequestToken", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_issueRequestTokenWithAuthScheme (seqid, iprot, oprot) =
    let args = read_issueRequestTokenWithAuthScheme_args iprot in
      iprot#readMessageEnd;
      let result = new issueRequestTokenWithAuthScheme_result in
        (try
          result#set_success (handler#issueRequestTokenWithAuthScheme args#get_channelId args#get_otpId args#get_authScheme args#get_returnUrl);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("issueRequestTokenWithAuthScheme", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_issueRequestTokenForAutoLogin (seqid, iprot, oprot) =
    let args = read_issueRequestTokenForAutoLogin_args iprot in
      iprot#readMessageEnd;
      let result = new issueRequestTokenForAutoLogin_result in
        (try
          result#set_success (handler#issueRequestTokenForAutoLogin args#get_channelId args#get_otpId args#get_redirectUrl);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("issueRequestTokenForAutoLogin", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUpdatedChannelIds (seqid, iprot, oprot) =
    let args = read_getUpdatedChannelIds_args iprot in
      iprot#readMessageEnd;
      let result = new getUpdatedChannelIds_result in
        (try
          result#set_success (handler#getUpdatedChannelIds args#get_channelIds);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUpdatedChannelIds", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reserveCoinUse (seqid, iprot, oprot) =
    let args = read_reserveCoinUse_args iprot in
      iprot#readMessageEnd;
      let result = new reserveCoinUse_result in
        (try
          result#set_success (handler#reserveCoinUse args#get_request args#get_locale);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reserveCoinUse", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_revokeChannel (seqid, iprot, oprot) =
    let args = read_revokeChannel_args iprot in
      iprot#readMessageEnd;
      let result = new revokeChannel_result in
        (try
          (handler#revokeChannel args#get_channelId);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("revokeChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_syncChannelData (seqid, iprot, oprot) =
    let args = read_syncChannelData_args iprot in
      iprot#readMessageEnd;
      let result = new syncChannelData_result in
        (try
          result#set_success (handler#syncChannelData args#get_lastSynced args#get_locale);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("syncChannelData", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateChannelNotificationSetting (seqid, iprot, oprot) =
    let args = read_updateChannelNotificationSetting_args iprot in
      iprot#readMessageEnd;
      let result = new updateChannelNotificationSetting_result in
        (try
          (handler#updateChannelNotificationSetting args#get_setting);
        with
          | ChannelException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateChannelNotificationSetting", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "issueOTP" self#process_issueOTP;
    Hashtbl.add processMap "approveChannelAndIssueChannelToken" self#process_approveChannelAndIssueChannelToken;
    Hashtbl.add processMap "approveChannelAndIssueRequestToken" self#process_approveChannelAndIssueRequestToken;
    Hashtbl.add processMap "fetchNotificationItems" self#process_fetchNotificationItems;
    Hashtbl.add processMap "getApprovedChannels" self#process_getApprovedChannels;
    Hashtbl.add processMap "getChannelInfo" self#process_getChannelInfo;
    Hashtbl.add processMap "getChannelNotificationSetting" self#process_getChannelNotificationSetting;
    Hashtbl.add processMap "getChannelNotificationSettings" self#process_getChannelNotificationSettings;
    Hashtbl.add processMap "getChannels" self#process_getChannels;
    Hashtbl.add processMap "getDomains" self#process_getDomains;
    Hashtbl.add processMap "getFriendChannelMatrices" self#process_getFriendChannelMatrices;
    Hashtbl.add processMap "updateChannelSettings" self#process_updateChannelSettings;
    Hashtbl.add processMap "getCommonDomains" self#process_getCommonDomains;
    Hashtbl.add processMap "getNotificationBadgeCount" self#process_getNotificationBadgeCount;
    Hashtbl.add processMap "issueChannelToken" self#process_issueChannelToken;
    Hashtbl.add processMap "issueRequestToken" self#process_issueRequestToken;
    Hashtbl.add processMap "issueRequestTokenWithAuthScheme" self#process_issueRequestTokenWithAuthScheme;
    Hashtbl.add processMap "issueRequestTokenForAutoLogin" self#process_issueRequestTokenForAutoLogin;
    Hashtbl.add processMap "getUpdatedChannelIds" self#process_getUpdatedChannelIds;
    Hashtbl.add processMap "reserveCoinUse" self#process_reserveCoinUse;
    Hashtbl.add processMap "revokeChannel" self#process_revokeChannel;
    Hashtbl.add processMap "syncChannelData" self#process_syncChannelData;
    Hashtbl.add processMap "updateChannelNotificationSetting" self#process_updateChannelNotificationSetting;
end

