(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class findBuddyContactsByQuery_args =
object (self)
  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "findBuddyContactsByQuery_args.language") | Some _x5704 -> _x5704
  method set_language _x5704 = _language <- Some _x5704
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "findBuddyContactsByQuery_args.country") | Some _x5705 -> _x5705
  method set_country _x5705 = _country <- Some _x5705
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _query : string option = None
  method get_query = _query
  method grab_query = match _query with None->raise (Field_empty "findBuddyContactsByQuery_args.query") | Some _x5706 -> _x5706
  method set_query _x5706 = _query <- Some _x5706
  method unset_query = _query <- None
  method reset_query = _query <- None

  val mutable _fromIndex : Int32.t option = None
  method get_fromIndex = _fromIndex
  method grab_fromIndex = match _fromIndex with None->raise (Field_empty "findBuddyContactsByQuery_args.fromIndex") | Some _x5707 -> _x5707
  method set_fromIndex _x5707 = _fromIndex <- Some _x5707
  method unset_fromIndex = _fromIndex <- None
  method reset_fromIndex = _fromIndex <- None

  val mutable _count : Int32.t option = None
  method get_count = _count
  method grab_count = match _count with None->raise (Field_empty "findBuddyContactsByQuery_args.count") | Some _x5708 -> _x5708
  method set_count _x5708 = _count <- Some _x5708
  method unset_count = _count <- None
  method reset_count = _count <- None

  val mutable _requestSource : BuddySearchRequestSource.t option = None
  method get_requestSource = _requestSource
  method grab_requestSource = match _requestSource with None->raise (Field_empty "findBuddyContactsByQuery_args.requestSource") | Some _x5709 -> _x5709
  method set_requestSource _x5709 = _requestSource <- Some _x5709
  method unset_requestSource = _requestSource <- None
  method reset_requestSource = _requestSource <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findBuddyContactsByQuery_args";
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _query with None -> () | Some _v -> 
      oprot#writeFieldBegin("query",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _fromIndex with None -> () | Some _v -> 
      oprot#writeFieldBegin("fromIndex",Protocol.T_I32,5);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _count with None -> () | Some _v -> 
      oprot#writeFieldBegin("count",Protocol.T_I32,6);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _requestSource with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestSource",Protocol.T_I32,7);
      oprot#writeI32(BuddySearchRequestSource.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findBuddyContactsByQuery_args (iprot : Protocol.t) =
  let _str5712 = new findBuddyContactsByQuery_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5713,_id5714) = iprot#readFieldBegin in
        if _t5713 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5714 with 
          | 2 -> (if _t5713 = Protocol.T_STRING then
              _str5712#set_language iprot#readString
            else
              iprot#skip _t5713)
          | 3 -> (if _t5713 = Protocol.T_STRING then
              _str5712#set_country iprot#readString
            else
              iprot#skip _t5713)
          | 4 -> (if _t5713 = Protocol.T_STRING then
              _str5712#set_query iprot#readString
            else
              iprot#skip _t5713)
          | 5 -> (if _t5713 = Protocol.T_I32 then
              _str5712#set_fromIndex iprot#readI32
            else
              iprot#skip _t5713)
          | 6 -> (if _t5713 = Protocol.T_I32 then
              _str5712#set_count iprot#readI32
            else
              iprot#skip _t5713)
          | 7 -> (if _t5713 = Protocol.T_I32 then
              _str5712#set_requestSource (BuddySearchRequestSource.of_i iprot#readI32)
            else
              iprot#skip _t5713)
          | _ -> iprot#skip _t5713);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5712

class findBuddyContactsByQuery_result =
object (self)
  val mutable _success : buddySearchResult list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findBuddyContactsByQuery_result.success") | Some _x5715 -> _x5715
  method set_success _x5715 = _success <- Some _x5715
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findBuddyContactsByQuery_result.e") | Some _x5716 -> _x5716
  method set_e _x5716 = _e <- Some _x5716
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findBuddyContactsByQuery_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter5719 ->         _iter5719#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findBuddyContactsByQuery_result (iprot : Protocol.t) =
  let _str5720 = new findBuddyContactsByQuery_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5721,_id5722) = iprot#readFieldBegin in
        if _t5721 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5722 with 
          | 0 -> (if _t5721 = Protocol.T_LIST then
              _str5720#set_success 
                (let (_etype5726,_size5723) = iprot#readListBegin in
                  let _con5727 = (Array.to_list (Array.init _size5723 (fun _ -> (read_buddySearchResult iprot)))) in
                    iprot#readListEnd; _con5727)
            else
              iprot#skip _t5721)
          | 1 -> (if _t5721 = Protocol.T_STRUCT then
              _str5720#set_e (read_talkException iprot)
            else
              iprot#skip _t5721)
          | _ -> iprot#skip _t5721);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5720

class getBuddyContacts_args =
object (self)
  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getBuddyContacts_args.language") | Some _x5728 -> _x5728
  method set_language _x5728 = _language <- Some _x5728
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getBuddyContacts_args.country") | Some _x5729 -> _x5729
  method set_country _x5729 = _country <- Some _x5729
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _classification : string option = None
  method get_classification = _classification
  method grab_classification = match _classification with None->raise (Field_empty "getBuddyContacts_args.classification") | Some _x5730 -> _x5730
  method set_classification _x5730 = _classification <- Some _x5730
  method unset_classification = _classification <- None
  method reset_classification = _classification <- None

  val mutable _fromIndex : Int32.t option = None
  method get_fromIndex = _fromIndex
  method grab_fromIndex = match _fromIndex with None->raise (Field_empty "getBuddyContacts_args.fromIndex") | Some _x5731 -> _x5731
  method set_fromIndex _x5731 = _fromIndex <- Some _x5731
  method unset_fromIndex = _fromIndex <- None
  method reset_fromIndex = _fromIndex <- None

  val mutable _count : Int32.t option = None
  method get_count = _count
  method grab_count = match _count with None->raise (Field_empty "getBuddyContacts_args.count") | Some _x5732 -> _x5732
  method set_count _x5732 = _count <- Some _x5732
  method unset_count = _count <- None
  method reset_count = _count <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyContacts_args";
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _classification with None -> () | Some _v -> 
      oprot#writeFieldBegin("classification",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _fromIndex with None -> () | Some _v -> 
      oprot#writeFieldBegin("fromIndex",Protocol.T_I32,5);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _count with None -> () | Some _v -> 
      oprot#writeFieldBegin("count",Protocol.T_I32,6);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyContacts_args (iprot : Protocol.t) =
  let _str5735 = new getBuddyContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5736,_id5737) = iprot#readFieldBegin in
        if _t5736 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5737 with 
          | 2 -> (if _t5736 = Protocol.T_STRING then
              _str5735#set_language iprot#readString
            else
              iprot#skip _t5736)
          | 3 -> (if _t5736 = Protocol.T_STRING then
              _str5735#set_country iprot#readString
            else
              iprot#skip _t5736)
          | 4 -> (if _t5736 = Protocol.T_STRING then
              _str5735#set_classification iprot#readString
            else
              iprot#skip _t5736)
          | 5 -> (if _t5736 = Protocol.T_I32 then
              _str5735#set_fromIndex iprot#readI32
            else
              iprot#skip _t5736)
          | 6 -> (if _t5736 = Protocol.T_I32 then
              _str5735#set_count iprot#readI32
            else
              iprot#skip _t5736)
          | _ -> iprot#skip _t5736);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5735

class getBuddyContacts_result =
object (self)
  val mutable _success : contact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBuddyContacts_result.success") | Some _x5738 -> _x5738
  method set_success _x5738 = _success <- Some _x5738
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBuddyContacts_result.e") | Some _x5739 -> _x5739
  method set_e _x5739 = _e <- Some _x5739
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter5742 ->         _iter5742#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyContacts_result (iprot : Protocol.t) =
  let _str5743 = new getBuddyContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5744,_id5745) = iprot#readFieldBegin in
        if _t5744 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5745 with 
          | 0 -> (if _t5744 = Protocol.T_LIST then
              _str5743#set_success 
                (let (_etype5749,_size5746) = iprot#readListBegin in
                  let _con5750 = (Array.to_list (Array.init _size5746 (fun _ -> (read_contact iprot)))) in
                    iprot#readListEnd; _con5750)
            else
              iprot#skip _t5744)
          | 1 -> (if _t5744 = Protocol.T_STRUCT then
              _str5743#set_e (read_talkException iprot)
            else
              iprot#skip _t5744)
          | _ -> iprot#skip _t5744);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5743

class getBuddyDetail_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "getBuddyDetail_args.buddyMid") | Some _x5751 -> _x5751
  method set_buddyMid _x5751 = _buddyMid <- Some _x5751
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyDetail_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyDetail_args (iprot : Protocol.t) =
  let _str5754 = new getBuddyDetail_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5755,_id5756) = iprot#readFieldBegin in
        if _t5755 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5756 with 
          | 4 -> (if _t5755 = Protocol.T_STRING then
              _str5754#set_buddyMid iprot#readString
            else
              iprot#skip _t5755)
          | _ -> iprot#skip _t5755);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5754

class getBuddyDetail_result =
object (self)
  val mutable _success : buddyDetail option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBuddyDetail_result.success") | Some _x5757 -> _x5757
  method set_success _x5757 = _success <- Some _x5757
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBuddyDetail_result.e") | Some _x5758 -> _x5758
  method set_e _x5758 = _e <- Some _x5758
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyDetail_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyDetail_result (iprot : Protocol.t) =
  let _str5761 = new getBuddyDetail_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5762,_id5763) = iprot#readFieldBegin in
        if _t5762 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5763 with 
          | 0 -> (if _t5762 = Protocol.T_STRUCT then
              _str5761#set_success (read_buddyDetail iprot)
            else
              iprot#skip _t5762)
          | 1 -> (if _t5762 = Protocol.T_STRUCT then
              _str5761#set_e (read_talkException iprot)
            else
              iprot#skip _t5762)
          | _ -> iprot#skip _t5762);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5761

class getBuddyOnAir_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "getBuddyOnAir_args.buddyMid") | Some _x5764 -> _x5764
  method set_buddyMid _x5764 = _buddyMid <- Some _x5764
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyOnAir_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyOnAir_args (iprot : Protocol.t) =
  let _str5767 = new getBuddyOnAir_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5768,_id5769) = iprot#readFieldBegin in
        if _t5768 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5769 with 
          | 4 -> (if _t5768 = Protocol.T_STRING then
              _str5767#set_buddyMid iprot#readString
            else
              iprot#skip _t5768)
          | _ -> iprot#skip _t5768);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5767

class getBuddyOnAir_result =
object (self)
  val mutable _success : buddyOnAir option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBuddyOnAir_result.success") | Some _x5770 -> _x5770
  method set_success _x5770 = _success <- Some _x5770
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBuddyOnAir_result.e") | Some _x5771 -> _x5771
  method set_e _x5771 = _e <- Some _x5771
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyOnAir_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyOnAir_result (iprot : Protocol.t) =
  let _str5774 = new getBuddyOnAir_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5775,_id5776) = iprot#readFieldBegin in
        if _t5775 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5776 with 
          | 0 -> (if _t5775 = Protocol.T_STRUCT then
              _str5774#set_success (read_buddyOnAir iprot)
            else
              iprot#skip _t5775)
          | 1 -> (if _t5775 = Protocol.T_STRUCT then
              _str5774#set_e (read_talkException iprot)
            else
              iprot#skip _t5775)
          | _ -> iprot#skip _t5775);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5774

class getCountriesHavingBuddy_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCountriesHavingBuddy_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCountriesHavingBuddy_args (iprot : Protocol.t) =
  let _str5779 = new getCountriesHavingBuddy_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5780,_id5781) = iprot#readFieldBegin in
        if _t5780 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5781 with 
          | _ -> iprot#skip _t5780);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5779

class getCountriesHavingBuddy_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCountriesHavingBuddy_result.success") | Some _x5782 -> _x5782
  method set_success _x5782 = _success <- Some _x5782
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCountriesHavingBuddy_result.e") | Some _x5783 -> _x5783
  method set_e _x5783 = _e <- Some _x5783
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCountriesHavingBuddy_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5786 ->         oprot#writeString(_iter5786);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCountriesHavingBuddy_result (iprot : Protocol.t) =
  let _str5787 = new getCountriesHavingBuddy_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5788,_id5789) = iprot#readFieldBegin in
        if _t5788 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5789 with 
          | 0 -> (if _t5788 = Protocol.T_LIST then
              _str5787#set_success 
                (let (_etype5793,_size5790) = iprot#readListBegin in
                  let _con5794 = (Array.to_list (Array.init _size5790 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5794)
            else
              iprot#skip _t5788)
          | 1 -> (if _t5788 = Protocol.T_STRUCT then
              _str5787#set_e (read_talkException iprot)
            else
              iprot#skip _t5788)
          | _ -> iprot#skip _t5788);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5787

class getNewlyReleasedBuddyIds_args =
object (self)
  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getNewlyReleasedBuddyIds_args.country") | Some _x5795 -> _x5795
  method set_country _x5795 = _country <- Some _x5795
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNewlyReleasedBuddyIds_args";
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNewlyReleasedBuddyIds_args (iprot : Protocol.t) =
  let _str5798 = new getNewlyReleasedBuddyIds_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5799,_id5800) = iprot#readFieldBegin in
        if _t5799 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5800 with 
          | 3 -> (if _t5799 = Protocol.T_STRING then
              _str5798#set_country iprot#readString
            else
              iprot#skip _t5799)
          | _ -> iprot#skip _t5799);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5798

class getNewlyReleasedBuddyIds_result =
object (self)
  val mutable _success : (string,Int64.t) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getNewlyReleasedBuddyIds_result.success") | Some _x5801 -> _x5801
  method set_success _x5801 = _success <- Some _x5801
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getNewlyReleasedBuddyIds_result.e") | Some _x5802 -> _x5802
  method set_e _x5802 = _e <- Some _x5802
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNewlyReleasedBuddyIds_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_I64,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter5805 -> fun _viter5806 -> 
        oprot#writeString(_kiter5805);
        oprot#writeI64(_viter5806);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNewlyReleasedBuddyIds_result (iprot : Protocol.t) =
  let _str5807 = new getNewlyReleasedBuddyIds_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5808,_id5809) = iprot#readFieldBegin in
        if _t5808 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5809 with 
          | 0 -> (if _t5808 = Protocol.T_MAP then
              _str5807#set_success 
                (let (_ktype5811,_vtype5812,_size5810) = iprot#readMapBegin in
                let _con5814 = Hashtbl.create _size5810 in
                  for i = 1 to _size5810 do
                    let _k = iprot#readString in
                    let _v = iprot#readI64 in
                      Hashtbl.add _con5814 _k _v
                  done; iprot#readMapEnd; _con5814)
            else
              iprot#skip _t5808)
          | 1 -> (if _t5808 = Protocol.T_STRUCT then
              _str5807#set_e (read_talkException iprot)
            else
              iprot#skip _t5808)
          | _ -> iprot#skip _t5808);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5807

class getPopularBuddyBanner_args =
object (self)
  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPopularBuddyBanner_args.language") | Some _x5815 -> _x5815
  method set_language _x5815 = _language <- Some _x5815
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getPopularBuddyBanner_args.country") | Some _x5816 -> _x5816
  method set_country _x5816 = _country <- Some _x5816
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _applicationType : ApplicationType.t option = None
  method get_applicationType = _applicationType
  method grab_applicationType = match _applicationType with None->raise (Field_empty "getPopularBuddyBanner_args.applicationType") | Some _x5817 -> _x5817
  method set_applicationType _x5817 = _applicationType <- Some _x5817
  method unset_applicationType = _applicationType <- None
  method reset_applicationType = _applicationType <- None

  val mutable _resourceSpecification : string option = None
  method get_resourceSpecification = _resourceSpecification
  method grab_resourceSpecification = match _resourceSpecification with None->raise (Field_empty "getPopularBuddyBanner_args.resourceSpecification") | Some _x5818 -> _x5818
  method set_resourceSpecification _x5818 = _resourceSpecification <- Some _x5818
  method unset_resourceSpecification = _resourceSpecification <- None
  method reset_resourceSpecification = _resourceSpecification <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPopularBuddyBanner_args";
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _applicationType with None -> () | Some _v -> 
      oprot#writeFieldBegin("applicationType",Protocol.T_I32,4);
      oprot#writeI32(ApplicationType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _resourceSpecification with None -> () | Some _v -> 
      oprot#writeFieldBegin("resourceSpecification",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPopularBuddyBanner_args (iprot : Protocol.t) =
  let _str5821 = new getPopularBuddyBanner_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5822,_id5823) = iprot#readFieldBegin in
        if _t5822 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5823 with 
          | 2 -> (if _t5822 = Protocol.T_STRING then
              _str5821#set_language iprot#readString
            else
              iprot#skip _t5822)
          | 3 -> (if _t5822 = Protocol.T_STRING then
              _str5821#set_country iprot#readString
            else
              iprot#skip _t5822)
          | 4 -> (if _t5822 = Protocol.T_I32 then
              _str5821#set_applicationType (ApplicationType.of_i iprot#readI32)
            else
              iprot#skip _t5822)
          | 5 -> (if _t5822 = Protocol.T_STRING then
              _str5821#set_resourceSpecification iprot#readString
            else
              iprot#skip _t5822)
          | _ -> iprot#skip _t5822);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5821

class getPopularBuddyBanner_result =
object (self)
  val mutable _success : buddyBanner option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPopularBuddyBanner_result.success") | Some _x5824 -> _x5824
  method set_success _x5824 = _success <- Some _x5824
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPopularBuddyBanner_result.e") | Some _x5825 -> _x5825
  method set_e _x5825 = _e <- Some _x5825
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPopularBuddyBanner_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPopularBuddyBanner_result (iprot : Protocol.t) =
  let _str5828 = new getPopularBuddyBanner_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5829,_id5830) = iprot#readFieldBegin in
        if _t5829 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5830 with 
          | 0 -> (if _t5829 = Protocol.T_STRUCT then
              _str5828#set_success (read_buddyBanner iprot)
            else
              iprot#skip _t5829)
          | 1 -> (if _t5829 = Protocol.T_STRUCT then
              _str5828#set_e (read_talkException iprot)
            else
              iprot#skip _t5829)
          | _ -> iprot#skip _t5829);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5828

class getPopularBuddyLists_args =
object (self)
  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPopularBuddyLists_args.language") | Some _x5831 -> _x5831
  method set_language _x5831 = _language <- Some _x5831
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getPopularBuddyLists_args.country") | Some _x5832 -> _x5832
  method set_country _x5832 = _country <- Some _x5832
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPopularBuddyLists_args";
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPopularBuddyLists_args (iprot : Protocol.t) =
  let _str5835 = new getPopularBuddyLists_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5836,_id5837) = iprot#readFieldBegin in
        if _t5836 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5837 with 
          | 2 -> (if _t5836 = Protocol.T_STRING then
              _str5835#set_language iprot#readString
            else
              iprot#skip _t5836)
          | 3 -> (if _t5836 = Protocol.T_STRING then
              _str5835#set_country iprot#readString
            else
              iprot#skip _t5836)
          | _ -> iprot#skip _t5836);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5835

class getPopularBuddyLists_result =
object (self)
  val mutable _success : buddyList list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPopularBuddyLists_result.success") | Some _x5838 -> _x5838
  method set_success _x5838 = _success <- Some _x5838
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPopularBuddyLists_result.e") | Some _x5839 -> _x5839
  method set_e _x5839 = _e <- Some _x5839
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPopularBuddyLists_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter5842 ->         _iter5842#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPopularBuddyLists_result (iprot : Protocol.t) =
  let _str5843 = new getPopularBuddyLists_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5844,_id5845) = iprot#readFieldBegin in
        if _t5844 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5845 with 
          | 0 -> (if _t5844 = Protocol.T_LIST then
              _str5843#set_success 
                (let (_etype5849,_size5846) = iprot#readListBegin in
                  let _con5850 = (Array.to_list (Array.init _size5846 (fun _ -> (read_buddyList iprot)))) in
                    iprot#readListEnd; _con5850)
            else
              iprot#skip _t5844)
          | 1 -> (if _t5844 = Protocol.T_STRUCT then
              _str5843#set_e (read_talkException iprot)
            else
              iprot#skip _t5844)
          | _ -> iprot#skip _t5844);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5843

class getPromotedBuddyContacts_args =
object (self)
  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPromotedBuddyContacts_args.language") | Some _x5851 -> _x5851
  method set_language _x5851 = _language <- Some _x5851
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getPromotedBuddyContacts_args.country") | Some _x5852 -> _x5852
  method set_country _x5852 = _country <- Some _x5852
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPromotedBuddyContacts_args";
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPromotedBuddyContacts_args (iprot : Protocol.t) =
  let _str5855 = new getPromotedBuddyContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5856,_id5857) = iprot#readFieldBegin in
        if _t5856 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5857 with 
          | 2 -> (if _t5856 = Protocol.T_STRING then
              _str5855#set_language iprot#readString
            else
              iprot#skip _t5856)
          | 3 -> (if _t5856 = Protocol.T_STRING then
              _str5855#set_country iprot#readString
            else
              iprot#skip _t5856)
          | _ -> iprot#skip _t5856);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5855

class getPromotedBuddyContacts_result =
object (self)
  val mutable _success : contact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPromotedBuddyContacts_result.success") | Some _x5858 -> _x5858
  method set_success _x5858 = _success <- Some _x5858
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPromotedBuddyContacts_result.e") | Some _x5859 -> _x5859
  method set_e _x5859 = _e <- Some _x5859
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPromotedBuddyContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter5862 ->         _iter5862#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPromotedBuddyContacts_result (iprot : Protocol.t) =
  let _str5863 = new getPromotedBuddyContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5864,_id5865) = iprot#readFieldBegin in
        if _t5864 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5865 with 
          | 0 -> (if _t5864 = Protocol.T_LIST then
              _str5863#set_success 
                (let (_etype5869,_size5866) = iprot#readListBegin in
                  let _con5870 = (Array.to_list (Array.init _size5866 (fun _ -> (read_contact iprot)))) in
                    iprot#readListEnd; _con5870)
            else
              iprot#skip _t5864)
          | 1 -> (if _t5864 = Protocol.T_STRUCT then
              _str5863#set_e (read_talkException iprot)
            else
              iprot#skip _t5864)
          | _ -> iprot#skip _t5864);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5863

class virtual iface =
object (self)
  method virtual findBuddyContactsByQuery : string option -> string option -> string option -> Int32.t option -> Int32.t option -> BuddySearchRequestSource.t option -> buddySearchResult list
  method virtual getBuddyContacts : string option -> string option -> string option -> Int32.t option -> Int32.t option -> contact list
  method virtual getBuddyDetail : string option -> buddyDetail
  method virtual getBuddyOnAir : string option -> buddyOnAir
  method virtual getCountriesHavingBuddy : string list
  method virtual getNewlyReleasedBuddyIds : string option -> (string,Int64.t) Hashtbl.t
  method virtual getPopularBuddyBanner : string option -> string option -> ApplicationType.t option -> string option -> buddyBanner
  method virtual getPopularBuddyLists : string option -> string option -> buddyList list
  method virtual getPromotedBuddyContacts : string option -> string option -> contact list
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method findBuddyContactsByQuery language country query fromIndex count requestSource = 
    self#send_findBuddyContactsByQuery language country query fromIndex count requestSource;
    self#recv_findBuddyContactsByQuery
  method private send_findBuddyContactsByQuery language country query fromIndex count requestSource = 
    oprot#writeMessageBegin ("findBuddyContactsByQuery", Protocol.CALL, seqid);
    let args = new findBuddyContactsByQuery_args in
      args#set_language language;
      args#set_country country;
      args#set_query query;
      args#set_fromIndex fromIndex;
      args#set_count count;
      args#set_requestSource requestSource;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findBuddyContactsByQuery  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findBuddyContactsByQuery_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findBuddyContactsByQuery failed: unknown result")))
  method getBuddyContacts language country classification fromIndex count = 
    self#send_getBuddyContacts language country classification fromIndex count;
    self#recv_getBuddyContacts
  method private send_getBuddyContacts language country classification fromIndex count = 
    oprot#writeMessageBegin ("getBuddyContacts", Protocol.CALL, seqid);
    let args = new getBuddyContacts_args in
      args#set_language language;
      args#set_country country;
      args#set_classification classification;
      args#set_fromIndex fromIndex;
      args#set_count count;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBuddyContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBuddyContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBuddyContacts failed: unknown result")))
  method getBuddyDetail buddyMid = 
    self#send_getBuddyDetail buddyMid;
    self#recv_getBuddyDetail
  method private send_getBuddyDetail buddyMid = 
    oprot#writeMessageBegin ("getBuddyDetail", Protocol.CALL, seqid);
    let args = new getBuddyDetail_args in
      args#set_buddyMid buddyMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBuddyDetail  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBuddyDetail_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBuddyDetail failed: unknown result")))
  method getBuddyOnAir buddyMid = 
    self#send_getBuddyOnAir buddyMid;
    self#recv_getBuddyOnAir
  method private send_getBuddyOnAir buddyMid = 
    oprot#writeMessageBegin ("getBuddyOnAir", Protocol.CALL, seqid);
    let args = new getBuddyOnAir_args in
      args#set_buddyMid buddyMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBuddyOnAir  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBuddyOnAir_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBuddyOnAir failed: unknown result")))
  method getCountriesHavingBuddy  = 
    self#send_getCountriesHavingBuddy;
    self#recv_getCountriesHavingBuddy
  method private send_getCountriesHavingBuddy  = 
    oprot#writeMessageBegin ("getCountriesHavingBuddy", Protocol.CALL, seqid);
    let args = new getCountriesHavingBuddy_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCountriesHavingBuddy  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCountriesHavingBuddy_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCountriesHavingBuddy failed: unknown result")))
  method getNewlyReleasedBuddyIds country = 
    self#send_getNewlyReleasedBuddyIds country;
    self#recv_getNewlyReleasedBuddyIds
  method private send_getNewlyReleasedBuddyIds country = 
    oprot#writeMessageBegin ("getNewlyReleasedBuddyIds", Protocol.CALL, seqid);
    let args = new getNewlyReleasedBuddyIds_args in
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getNewlyReleasedBuddyIds  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getNewlyReleasedBuddyIds_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getNewlyReleasedBuddyIds failed: unknown result")))
  method getPopularBuddyBanner language country applicationType resourceSpecification = 
    self#send_getPopularBuddyBanner language country applicationType resourceSpecification;
    self#recv_getPopularBuddyBanner
  method private send_getPopularBuddyBanner language country applicationType resourceSpecification = 
    oprot#writeMessageBegin ("getPopularBuddyBanner", Protocol.CALL, seqid);
    let args = new getPopularBuddyBanner_args in
      args#set_language language;
      args#set_country country;
      args#set_applicationType applicationType;
      args#set_resourceSpecification resourceSpecification;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPopularBuddyBanner  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPopularBuddyBanner_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPopularBuddyBanner failed: unknown result")))
  method getPopularBuddyLists language country = 
    self#send_getPopularBuddyLists language country;
    self#recv_getPopularBuddyLists
  method private send_getPopularBuddyLists language country = 
    oprot#writeMessageBegin ("getPopularBuddyLists", Protocol.CALL, seqid);
    let args = new getPopularBuddyLists_args in
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPopularBuddyLists  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPopularBuddyLists_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPopularBuddyLists failed: unknown result")))
  method getPromotedBuddyContacts language country = 
    self#send_getPromotedBuddyContacts language country;
    self#recv_getPromotedBuddyContacts
  method private send_getPromotedBuddyContacts language country = 
    oprot#writeMessageBegin ("getPromotedBuddyContacts", Protocol.CALL, seqid);
    let args = new getPromotedBuddyContacts_args in
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPromotedBuddyContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPromotedBuddyContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPromotedBuddyContacts failed: unknown result")))
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 9
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_findBuddyContactsByQuery (seqid, iprot, oprot) =
    let args = read_findBuddyContactsByQuery_args iprot in
      iprot#readMessageEnd;
      let result = new findBuddyContactsByQuery_result in
        (try
          result#set_success (handler#findBuddyContactsByQuery args#get_language args#get_country args#get_query args#get_fromIndex args#get_count args#get_requestSource);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findBuddyContactsByQuery", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBuddyContacts (seqid, iprot, oprot) =
    let args = read_getBuddyContacts_args iprot in
      iprot#readMessageEnd;
      let result = new getBuddyContacts_result in
        (try
          result#set_success (handler#getBuddyContacts args#get_language args#get_country args#get_classification args#get_fromIndex args#get_count);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBuddyContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBuddyDetail (seqid, iprot, oprot) =
    let args = read_getBuddyDetail_args iprot in
      iprot#readMessageEnd;
      let result = new getBuddyDetail_result in
        (try
          result#set_success (handler#getBuddyDetail args#get_buddyMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBuddyDetail", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBuddyOnAir (seqid, iprot, oprot) =
    let args = read_getBuddyOnAir_args iprot in
      iprot#readMessageEnd;
      let result = new getBuddyOnAir_result in
        (try
          result#set_success (handler#getBuddyOnAir args#get_buddyMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBuddyOnAir", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCountriesHavingBuddy (seqid, iprot, oprot) =
    let _ = read_getCountriesHavingBuddy_args iprot in
      iprot#readMessageEnd;
      let result = new getCountriesHavingBuddy_result in
        (try
          result#set_success (handler#getCountriesHavingBuddy);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCountriesHavingBuddy", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getNewlyReleasedBuddyIds (seqid, iprot, oprot) =
    let args = read_getNewlyReleasedBuddyIds_args iprot in
      iprot#readMessageEnd;
      let result = new getNewlyReleasedBuddyIds_result in
        (try
          result#set_success (handler#getNewlyReleasedBuddyIds args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getNewlyReleasedBuddyIds", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPopularBuddyBanner (seqid, iprot, oprot) =
    let args = read_getPopularBuddyBanner_args iprot in
      iprot#readMessageEnd;
      let result = new getPopularBuddyBanner_result in
        (try
          result#set_success (handler#getPopularBuddyBanner args#get_language args#get_country args#get_applicationType args#get_resourceSpecification);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPopularBuddyBanner", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPopularBuddyLists (seqid, iprot, oprot) =
    let args = read_getPopularBuddyLists_args iprot in
      iprot#readMessageEnd;
      let result = new getPopularBuddyLists_result in
        (try
          result#set_success (handler#getPopularBuddyLists args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPopularBuddyLists", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPromotedBuddyContacts (seqid, iprot, oprot) =
    let args = read_getPromotedBuddyContacts_args iprot in
      iprot#readMessageEnd;
      let result = new getPromotedBuddyContacts_result in
        (try
          result#set_success (handler#getPromotedBuddyContacts args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPromotedBuddyContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "findBuddyContactsByQuery" self#process_findBuddyContactsByQuery;
    Hashtbl.add processMap "getBuddyContacts" self#process_getBuddyContacts;
    Hashtbl.add processMap "getBuddyDetail" self#process_getBuddyDetail;
    Hashtbl.add processMap "getBuddyOnAir" self#process_getBuddyOnAir;
    Hashtbl.add processMap "getCountriesHavingBuddy" self#process_getCountriesHavingBuddy;
    Hashtbl.add processMap "getNewlyReleasedBuddyIds" self#process_getNewlyReleasedBuddyIds;
    Hashtbl.add processMap "getPopularBuddyBanner" self#process_getPopularBuddyBanner;
    Hashtbl.add processMap "getPopularBuddyLists" self#process_getPopularBuddyLists;
    Hashtbl.add processMap "getPromotedBuddyContacts" self#process_getPromotedBuddyContacts;
end

