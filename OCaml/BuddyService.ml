(*
 Autogenerated by Thrift Compiler (0.14.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class findBuddyContactsByQuery_args =
object (self)
  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "findBuddyContactsByQuery_args.language") | Some _x5104 -> _x5104
  method set_language _x5104 = _language <- Some _x5104
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "findBuddyContactsByQuery_args.country") | Some _x5105 -> _x5105
  method set_country _x5105 = _country <- Some _x5105
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _query : string option = None
  method get_query = _query
  method grab_query = match _query with None->raise (Field_empty "findBuddyContactsByQuery_args.query") | Some _x5106 -> _x5106
  method set_query _x5106 = _query <- Some _x5106
  method unset_query = _query <- None
  method reset_query = _query <- None

  val mutable _fromIndex : Int32.t option = None
  method get_fromIndex = _fromIndex
  method grab_fromIndex = match _fromIndex with None->raise (Field_empty "findBuddyContactsByQuery_args.fromIndex") | Some _x5107 -> _x5107
  method set_fromIndex _x5107 = _fromIndex <- Some _x5107
  method unset_fromIndex = _fromIndex <- None
  method reset_fromIndex = _fromIndex <- None

  val mutable _count : Int32.t option = None
  method get_count = _count
  method grab_count = match _count with None->raise (Field_empty "findBuddyContactsByQuery_args.count") | Some _x5108 -> _x5108
  method set_count _x5108 = _count <- Some _x5108
  method unset_count = _count <- None
  method reset_count = _count <- None

  val mutable _requestSource : BuddySearchRequestSource.t option = None
  method get_requestSource = _requestSource
  method grab_requestSource = match _requestSource with None->raise (Field_empty "findBuddyContactsByQuery_args.requestSource") | Some _x5109 -> _x5109
  method set_requestSource _x5109 = _requestSource <- Some _x5109
  method unset_requestSource = _requestSource <- None
  method reset_requestSource = _requestSource <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findBuddyContactsByQuery_args";
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _query with None -> () | Some _v -> 
      oprot#writeFieldBegin("query",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _fromIndex with None -> () | Some _v -> 
      oprot#writeFieldBegin("fromIndex",Protocol.T_I32,5);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _count with None -> () | Some _v -> 
      oprot#writeFieldBegin("count",Protocol.T_I32,6);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _requestSource with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestSource",Protocol.T_I32,7);
      oprot#writeI32(BuddySearchRequestSource.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findBuddyContactsByQuery_args (iprot : Protocol.t) =
  let _str5112 = new findBuddyContactsByQuery_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5113,_id5114) = iprot#readFieldBegin in
        if _t5113 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5114 with 
          | 2 -> (if _t5113 = Protocol.T_STRING then
              _str5112#set_language iprot#readString
            else
              iprot#skip _t5113)
          | 3 -> (if _t5113 = Protocol.T_STRING then
              _str5112#set_country iprot#readString
            else
              iprot#skip _t5113)
          | 4 -> (if _t5113 = Protocol.T_STRING then
              _str5112#set_query iprot#readString
            else
              iprot#skip _t5113)
          | 5 -> (if _t5113 = Protocol.T_I32 then
              _str5112#set_fromIndex iprot#readI32
            else
              iprot#skip _t5113)
          | 6 -> (if _t5113 = Protocol.T_I32 then
              _str5112#set_count iprot#readI32
            else
              iprot#skip _t5113)
          | 7 -> (if _t5113 = Protocol.T_I32 then
              _str5112#set_requestSource (BuddySearchRequestSource.of_i iprot#readI32)
            else
              iprot#skip _t5113)
          | _ -> iprot#skip _t5113);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5112

class findBuddyContactsByQuery_result =
object (self)
  val mutable _success : buddySearchResult list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findBuddyContactsByQuery_result.success") | Some _x5115 -> _x5115
  method set_success _x5115 = _success <- Some _x5115
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findBuddyContactsByQuery_result.e") | Some _x5116 -> _x5116
  method set_e _x5116 = _e <- Some _x5116
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findBuddyContactsByQuery_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter5119 ->         _iter5119#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findBuddyContactsByQuery_result (iprot : Protocol.t) =
  let _str5120 = new findBuddyContactsByQuery_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5121,_id5122) = iprot#readFieldBegin in
        if _t5121 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5122 with 
          | 0 -> (if _t5121 = Protocol.T_LIST then
              _str5120#set_success 
                (let (_etype5126,_size5123) = iprot#readListBegin in
                  let _con5127 = (Array.to_list (Array.init _size5123 (fun _ -> (read_buddySearchResult iprot)))) in
                    iprot#readListEnd; _con5127)
            else
              iprot#skip _t5121)
          | 1 -> (if _t5121 = Protocol.T_STRUCT then
              _str5120#set_e (read_talkException iprot)
            else
              iprot#skip _t5121)
          | _ -> iprot#skip _t5121);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5120

class getBuddyContacts_args =
object (self)
  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getBuddyContacts_args.language") | Some _x5128 -> _x5128
  method set_language _x5128 = _language <- Some _x5128
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getBuddyContacts_args.country") | Some _x5129 -> _x5129
  method set_country _x5129 = _country <- Some _x5129
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _classification : string option = None
  method get_classification = _classification
  method grab_classification = match _classification with None->raise (Field_empty "getBuddyContacts_args.classification") | Some _x5130 -> _x5130
  method set_classification _x5130 = _classification <- Some _x5130
  method unset_classification = _classification <- None
  method reset_classification = _classification <- None

  val mutable _fromIndex : Int32.t option = None
  method get_fromIndex = _fromIndex
  method grab_fromIndex = match _fromIndex with None->raise (Field_empty "getBuddyContacts_args.fromIndex") | Some _x5131 -> _x5131
  method set_fromIndex _x5131 = _fromIndex <- Some _x5131
  method unset_fromIndex = _fromIndex <- None
  method reset_fromIndex = _fromIndex <- None

  val mutable _count : Int32.t option = None
  method get_count = _count
  method grab_count = match _count with None->raise (Field_empty "getBuddyContacts_args.count") | Some _x5132 -> _x5132
  method set_count _x5132 = _count <- Some _x5132
  method unset_count = _count <- None
  method reset_count = _count <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyContacts_args";
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _classification with None -> () | Some _v -> 
      oprot#writeFieldBegin("classification",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _fromIndex with None -> () | Some _v -> 
      oprot#writeFieldBegin("fromIndex",Protocol.T_I32,5);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _count with None -> () | Some _v -> 
      oprot#writeFieldBegin("count",Protocol.T_I32,6);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyContacts_args (iprot : Protocol.t) =
  let _str5135 = new getBuddyContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5136,_id5137) = iprot#readFieldBegin in
        if _t5136 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5137 with 
          | 2 -> (if _t5136 = Protocol.T_STRING then
              _str5135#set_language iprot#readString
            else
              iprot#skip _t5136)
          | 3 -> (if _t5136 = Protocol.T_STRING then
              _str5135#set_country iprot#readString
            else
              iprot#skip _t5136)
          | 4 -> (if _t5136 = Protocol.T_STRING then
              _str5135#set_classification iprot#readString
            else
              iprot#skip _t5136)
          | 5 -> (if _t5136 = Protocol.T_I32 then
              _str5135#set_fromIndex iprot#readI32
            else
              iprot#skip _t5136)
          | 6 -> (if _t5136 = Protocol.T_I32 then
              _str5135#set_count iprot#readI32
            else
              iprot#skip _t5136)
          | _ -> iprot#skip _t5136);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5135

class getBuddyContacts_result =
object (self)
  val mutable _success : contact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBuddyContacts_result.success") | Some _x5138 -> _x5138
  method set_success _x5138 = _success <- Some _x5138
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBuddyContacts_result.e") | Some _x5139 -> _x5139
  method set_e _x5139 = _e <- Some _x5139
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter5142 ->         _iter5142#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyContacts_result (iprot : Protocol.t) =
  let _str5143 = new getBuddyContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5144,_id5145) = iprot#readFieldBegin in
        if _t5144 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5145 with 
          | 0 -> (if _t5144 = Protocol.T_LIST then
              _str5143#set_success 
                (let (_etype5149,_size5146) = iprot#readListBegin in
                  let _con5150 = (Array.to_list (Array.init _size5146 (fun _ -> (read_contact iprot)))) in
                    iprot#readListEnd; _con5150)
            else
              iprot#skip _t5144)
          | 1 -> (if _t5144 = Protocol.T_STRUCT then
              _str5143#set_e (read_talkException iprot)
            else
              iprot#skip _t5144)
          | _ -> iprot#skip _t5144);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5143

class getBuddyDetail_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "getBuddyDetail_args.buddyMid") | Some _x5151 -> _x5151
  method set_buddyMid _x5151 = _buddyMid <- Some _x5151
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyDetail_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyDetail_args (iprot : Protocol.t) =
  let _str5154 = new getBuddyDetail_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5155,_id5156) = iprot#readFieldBegin in
        if _t5155 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5156 with 
          | 4 -> (if _t5155 = Protocol.T_STRING then
              _str5154#set_buddyMid iprot#readString
            else
              iprot#skip _t5155)
          | _ -> iprot#skip _t5155);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5154

class getBuddyDetail_result =
object (self)
  val mutable _success : buddyDetail option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBuddyDetail_result.success") | Some _x5157 -> _x5157
  method set_success _x5157 = _success <- Some _x5157
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBuddyDetail_result.e") | Some _x5158 -> _x5158
  method set_e _x5158 = _e <- Some _x5158
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyDetail_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyDetail_result (iprot : Protocol.t) =
  let _str5161 = new getBuddyDetail_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5162,_id5163) = iprot#readFieldBegin in
        if _t5162 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5163 with 
          | 0 -> (if _t5162 = Protocol.T_STRUCT then
              _str5161#set_success (read_buddyDetail iprot)
            else
              iprot#skip _t5162)
          | 1 -> (if _t5162 = Protocol.T_STRUCT then
              _str5161#set_e (read_talkException iprot)
            else
              iprot#skip _t5162)
          | _ -> iprot#skip _t5162);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5161

class getBuddyOnAir_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "getBuddyOnAir_args.buddyMid") | Some _x5164 -> _x5164
  method set_buddyMid _x5164 = _buddyMid <- Some _x5164
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyOnAir_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyOnAir_args (iprot : Protocol.t) =
  let _str5167 = new getBuddyOnAir_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5168,_id5169) = iprot#readFieldBegin in
        if _t5168 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5169 with 
          | 4 -> (if _t5168 = Protocol.T_STRING then
              _str5167#set_buddyMid iprot#readString
            else
              iprot#skip _t5168)
          | _ -> iprot#skip _t5168);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5167

class getBuddyOnAir_result =
object (self)
  val mutable _success : buddyOnAir option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBuddyOnAir_result.success") | Some _x5170 -> _x5170
  method set_success _x5170 = _success <- Some _x5170
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBuddyOnAir_result.e") | Some _x5171 -> _x5171
  method set_e _x5171 = _e <- Some _x5171
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyOnAir_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyOnAir_result (iprot : Protocol.t) =
  let _str5174 = new getBuddyOnAir_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5175,_id5176) = iprot#readFieldBegin in
        if _t5175 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5176 with 
          | 0 -> (if _t5175 = Protocol.T_STRUCT then
              _str5174#set_success (read_buddyOnAir iprot)
            else
              iprot#skip _t5175)
          | 1 -> (if _t5175 = Protocol.T_STRUCT then
              _str5174#set_e (read_talkException iprot)
            else
              iprot#skip _t5175)
          | _ -> iprot#skip _t5175);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5174

class getCountriesHavingBuddy_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCountriesHavingBuddy_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCountriesHavingBuddy_args (iprot : Protocol.t) =
  let _str5179 = new getCountriesHavingBuddy_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5180,_id5181) = iprot#readFieldBegin in
        if _t5180 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5181 with 
          | _ -> iprot#skip _t5180);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5179

class getCountriesHavingBuddy_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCountriesHavingBuddy_result.success") | Some _x5182 -> _x5182
  method set_success _x5182 = _success <- Some _x5182
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCountriesHavingBuddy_result.e") | Some _x5183 -> _x5183
  method set_e _x5183 = _e <- Some _x5183
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCountriesHavingBuddy_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5186 ->         oprot#writeString(_iter5186);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCountriesHavingBuddy_result (iprot : Protocol.t) =
  let _str5187 = new getCountriesHavingBuddy_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5188,_id5189) = iprot#readFieldBegin in
        if _t5188 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5189 with 
          | 0 -> (if _t5188 = Protocol.T_LIST then
              _str5187#set_success 
                (let (_etype5193,_size5190) = iprot#readListBegin in
                  let _con5194 = (Array.to_list (Array.init _size5190 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5194)
            else
              iprot#skip _t5188)
          | 1 -> (if _t5188 = Protocol.T_STRUCT then
              _str5187#set_e (read_talkException iprot)
            else
              iprot#skip _t5188)
          | _ -> iprot#skip _t5188);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5187

class getNewlyReleasedBuddyIds_args =
object (self)
  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getNewlyReleasedBuddyIds_args.country") | Some _x5195 -> _x5195
  method set_country _x5195 = _country <- Some _x5195
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNewlyReleasedBuddyIds_args";
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNewlyReleasedBuddyIds_args (iprot : Protocol.t) =
  let _str5198 = new getNewlyReleasedBuddyIds_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5199,_id5200) = iprot#readFieldBegin in
        if _t5199 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5200 with 
          | 3 -> (if _t5199 = Protocol.T_STRING then
              _str5198#set_country iprot#readString
            else
              iprot#skip _t5199)
          | _ -> iprot#skip _t5199);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5198

class getNewlyReleasedBuddyIds_result =
object (self)
  val mutable _success : (string,Int64.t) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getNewlyReleasedBuddyIds_result.success") | Some _x5201 -> _x5201
  method set_success _x5201 = _success <- Some _x5201
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getNewlyReleasedBuddyIds_result.e") | Some _x5202 -> _x5202
  method set_e _x5202 = _e <- Some _x5202
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNewlyReleasedBuddyIds_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_I64,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter5205 -> fun _viter5206 -> 
        oprot#writeString(_kiter5205);
        oprot#writeI64(_viter5206);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNewlyReleasedBuddyIds_result (iprot : Protocol.t) =
  let _str5207 = new getNewlyReleasedBuddyIds_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5208,_id5209) = iprot#readFieldBegin in
        if _t5208 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5209 with 
          | 0 -> (if _t5208 = Protocol.T_MAP then
              _str5207#set_success 
                (let (_ktype5211,_vtype5212,_size5210) = iprot#readMapBegin in
                let _con5214 = Hashtbl.create _size5210 in
                  for i = 1 to _size5210 do
                    let _k = iprot#readString in
                    let _v = iprot#readI64 in
                      Hashtbl.add _con5214 _k _v
                  done; iprot#readMapEnd; _con5214)
            else
              iprot#skip _t5208)
          | 1 -> (if _t5208 = Protocol.T_STRUCT then
              _str5207#set_e (read_talkException iprot)
            else
              iprot#skip _t5208)
          | _ -> iprot#skip _t5208);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5207

class getPopularBuddyBanner_args =
object (self)
  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPopularBuddyBanner_args.language") | Some _x5215 -> _x5215
  method set_language _x5215 = _language <- Some _x5215
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getPopularBuddyBanner_args.country") | Some _x5216 -> _x5216
  method set_country _x5216 = _country <- Some _x5216
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _applicationType : ApplicationType.t option = None
  method get_applicationType = _applicationType
  method grab_applicationType = match _applicationType with None->raise (Field_empty "getPopularBuddyBanner_args.applicationType") | Some _x5217 -> _x5217
  method set_applicationType _x5217 = _applicationType <- Some _x5217
  method unset_applicationType = _applicationType <- None
  method reset_applicationType = _applicationType <- None

  val mutable _resourceSpecification : string option = None
  method get_resourceSpecification = _resourceSpecification
  method grab_resourceSpecification = match _resourceSpecification with None->raise (Field_empty "getPopularBuddyBanner_args.resourceSpecification") | Some _x5218 -> _x5218
  method set_resourceSpecification _x5218 = _resourceSpecification <- Some _x5218
  method unset_resourceSpecification = _resourceSpecification <- None
  method reset_resourceSpecification = _resourceSpecification <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPopularBuddyBanner_args";
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _applicationType with None -> () | Some _v -> 
      oprot#writeFieldBegin("applicationType",Protocol.T_I32,4);
      oprot#writeI32(ApplicationType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _resourceSpecification with None -> () | Some _v -> 
      oprot#writeFieldBegin("resourceSpecification",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPopularBuddyBanner_args (iprot : Protocol.t) =
  let _str5221 = new getPopularBuddyBanner_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5222,_id5223) = iprot#readFieldBegin in
        if _t5222 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5223 with 
          | 2 -> (if _t5222 = Protocol.T_STRING then
              _str5221#set_language iprot#readString
            else
              iprot#skip _t5222)
          | 3 -> (if _t5222 = Protocol.T_STRING then
              _str5221#set_country iprot#readString
            else
              iprot#skip _t5222)
          | 4 -> (if _t5222 = Protocol.T_I32 then
              _str5221#set_applicationType (ApplicationType.of_i iprot#readI32)
            else
              iprot#skip _t5222)
          | 5 -> (if _t5222 = Protocol.T_STRING then
              _str5221#set_resourceSpecification iprot#readString
            else
              iprot#skip _t5222)
          | _ -> iprot#skip _t5222);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5221

class getPopularBuddyBanner_result =
object (self)
  val mutable _success : buddyBanner option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPopularBuddyBanner_result.success") | Some _x5224 -> _x5224
  method set_success _x5224 = _success <- Some _x5224
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPopularBuddyBanner_result.e") | Some _x5225 -> _x5225
  method set_e _x5225 = _e <- Some _x5225
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPopularBuddyBanner_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPopularBuddyBanner_result (iprot : Protocol.t) =
  let _str5228 = new getPopularBuddyBanner_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5229,_id5230) = iprot#readFieldBegin in
        if _t5229 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5230 with 
          | 0 -> (if _t5229 = Protocol.T_STRUCT then
              _str5228#set_success (read_buddyBanner iprot)
            else
              iprot#skip _t5229)
          | 1 -> (if _t5229 = Protocol.T_STRUCT then
              _str5228#set_e (read_talkException iprot)
            else
              iprot#skip _t5229)
          | _ -> iprot#skip _t5229);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5228

class getPopularBuddyLists_args =
object (self)
  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPopularBuddyLists_args.language") | Some _x5231 -> _x5231
  method set_language _x5231 = _language <- Some _x5231
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getPopularBuddyLists_args.country") | Some _x5232 -> _x5232
  method set_country _x5232 = _country <- Some _x5232
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPopularBuddyLists_args";
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPopularBuddyLists_args (iprot : Protocol.t) =
  let _str5235 = new getPopularBuddyLists_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5236,_id5237) = iprot#readFieldBegin in
        if _t5236 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5237 with 
          | 2 -> (if _t5236 = Protocol.T_STRING then
              _str5235#set_language iprot#readString
            else
              iprot#skip _t5236)
          | 3 -> (if _t5236 = Protocol.T_STRING then
              _str5235#set_country iprot#readString
            else
              iprot#skip _t5236)
          | _ -> iprot#skip _t5236);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5235

class getPopularBuddyLists_result =
object (self)
  val mutable _success : buddyList list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPopularBuddyLists_result.success") | Some _x5238 -> _x5238
  method set_success _x5238 = _success <- Some _x5238
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPopularBuddyLists_result.e") | Some _x5239 -> _x5239
  method set_e _x5239 = _e <- Some _x5239
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPopularBuddyLists_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter5242 ->         _iter5242#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPopularBuddyLists_result (iprot : Protocol.t) =
  let _str5243 = new getPopularBuddyLists_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5244,_id5245) = iprot#readFieldBegin in
        if _t5244 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5245 with 
          | 0 -> (if _t5244 = Protocol.T_LIST then
              _str5243#set_success 
                (let (_etype5249,_size5246) = iprot#readListBegin in
                  let _con5250 = (Array.to_list (Array.init _size5246 (fun _ -> (read_buddyList iprot)))) in
                    iprot#readListEnd; _con5250)
            else
              iprot#skip _t5244)
          | 1 -> (if _t5244 = Protocol.T_STRUCT then
              _str5243#set_e (read_talkException iprot)
            else
              iprot#skip _t5244)
          | _ -> iprot#skip _t5244);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5243

class getPromotedBuddyContacts_args =
object (self)
  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPromotedBuddyContacts_args.language") | Some _x5251 -> _x5251
  method set_language _x5251 = _language <- Some _x5251
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getPromotedBuddyContacts_args.country") | Some _x5252 -> _x5252
  method set_country _x5252 = _country <- Some _x5252
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPromotedBuddyContacts_args";
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPromotedBuddyContacts_args (iprot : Protocol.t) =
  let _str5255 = new getPromotedBuddyContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5256,_id5257) = iprot#readFieldBegin in
        if _t5256 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5257 with 
          | 2 -> (if _t5256 = Protocol.T_STRING then
              _str5255#set_language iprot#readString
            else
              iprot#skip _t5256)
          | 3 -> (if _t5256 = Protocol.T_STRING then
              _str5255#set_country iprot#readString
            else
              iprot#skip _t5256)
          | _ -> iprot#skip _t5256);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5255

class getPromotedBuddyContacts_result =
object (self)
  val mutable _success : contact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPromotedBuddyContacts_result.success") | Some _x5258 -> _x5258
  method set_success _x5258 = _success <- Some _x5258
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPromotedBuddyContacts_result.e") | Some _x5259 -> _x5259
  method set_e _x5259 = _e <- Some _x5259
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPromotedBuddyContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter5262 ->         _iter5262#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPromotedBuddyContacts_result (iprot : Protocol.t) =
  let _str5263 = new getPromotedBuddyContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5264,_id5265) = iprot#readFieldBegin in
        if _t5264 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5265 with 
          | 0 -> (if _t5264 = Protocol.T_LIST then
              _str5263#set_success 
                (let (_etype5269,_size5266) = iprot#readListBegin in
                  let _con5270 = (Array.to_list (Array.init _size5266 (fun _ -> (read_contact iprot)))) in
                    iprot#readListEnd; _con5270)
            else
              iprot#skip _t5264)
          | 1 -> (if _t5264 = Protocol.T_STRUCT then
              _str5263#set_e (read_talkException iprot)
            else
              iprot#skip _t5264)
          | _ -> iprot#skip _t5264);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5263

class virtual iface =
object (self)
  method virtual findBuddyContactsByQuery : string option -> string option -> string option -> Int32.t option -> Int32.t option -> BuddySearchRequestSource.t option -> buddySearchResult list
  method virtual getBuddyContacts : string option -> string option -> string option -> Int32.t option -> Int32.t option -> contact list
  method virtual getBuddyDetail : string option -> buddyDetail
  method virtual getBuddyOnAir : string option -> buddyOnAir
  method virtual getCountriesHavingBuddy : string list
  method virtual getNewlyReleasedBuddyIds : string option -> (string,Int64.t) Hashtbl.t
  method virtual getPopularBuddyBanner : string option -> string option -> ApplicationType.t option -> string option -> buddyBanner
  method virtual getPopularBuddyLists : string option -> string option -> buddyList list
  method virtual getPromotedBuddyContacts : string option -> string option -> contact list
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method findBuddyContactsByQuery language country query fromIndex count requestSource = 
    self#send_findBuddyContactsByQuery language country query fromIndex count requestSource;
    self#recv_findBuddyContactsByQuery
  method private send_findBuddyContactsByQuery language country query fromIndex count requestSource = 
    oprot#writeMessageBegin ("findBuddyContactsByQuery", Protocol.CALL, seqid);
    let args = new findBuddyContactsByQuery_args in
      args#set_language language;
      args#set_country country;
      args#set_query query;
      args#set_fromIndex fromIndex;
      args#set_count count;
      args#set_requestSource requestSource;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findBuddyContactsByQuery  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findBuddyContactsByQuery_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findBuddyContactsByQuery failed: unknown result")))
  method getBuddyContacts language country classification fromIndex count = 
    self#send_getBuddyContacts language country classification fromIndex count;
    self#recv_getBuddyContacts
  method private send_getBuddyContacts language country classification fromIndex count = 
    oprot#writeMessageBegin ("getBuddyContacts", Protocol.CALL, seqid);
    let args = new getBuddyContacts_args in
      args#set_language language;
      args#set_country country;
      args#set_classification classification;
      args#set_fromIndex fromIndex;
      args#set_count count;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBuddyContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBuddyContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBuddyContacts failed: unknown result")))
  method getBuddyDetail buddyMid = 
    self#send_getBuddyDetail buddyMid;
    self#recv_getBuddyDetail
  method private send_getBuddyDetail buddyMid = 
    oprot#writeMessageBegin ("getBuddyDetail", Protocol.CALL, seqid);
    let args = new getBuddyDetail_args in
      args#set_buddyMid buddyMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBuddyDetail  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBuddyDetail_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBuddyDetail failed: unknown result")))
  method getBuddyOnAir buddyMid = 
    self#send_getBuddyOnAir buddyMid;
    self#recv_getBuddyOnAir
  method private send_getBuddyOnAir buddyMid = 
    oprot#writeMessageBegin ("getBuddyOnAir", Protocol.CALL, seqid);
    let args = new getBuddyOnAir_args in
      args#set_buddyMid buddyMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBuddyOnAir  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBuddyOnAir_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBuddyOnAir failed: unknown result")))
  method getCountriesHavingBuddy  = 
    self#send_getCountriesHavingBuddy;
    self#recv_getCountriesHavingBuddy
  method private send_getCountriesHavingBuddy  = 
    oprot#writeMessageBegin ("getCountriesHavingBuddy", Protocol.CALL, seqid);
    let args = new getCountriesHavingBuddy_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCountriesHavingBuddy  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCountriesHavingBuddy_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCountriesHavingBuddy failed: unknown result")))
  method getNewlyReleasedBuddyIds country = 
    self#send_getNewlyReleasedBuddyIds country;
    self#recv_getNewlyReleasedBuddyIds
  method private send_getNewlyReleasedBuddyIds country = 
    oprot#writeMessageBegin ("getNewlyReleasedBuddyIds", Protocol.CALL, seqid);
    let args = new getNewlyReleasedBuddyIds_args in
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getNewlyReleasedBuddyIds  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getNewlyReleasedBuddyIds_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getNewlyReleasedBuddyIds failed: unknown result")))
  method getPopularBuddyBanner language country applicationType resourceSpecification = 
    self#send_getPopularBuddyBanner language country applicationType resourceSpecification;
    self#recv_getPopularBuddyBanner
  method private send_getPopularBuddyBanner language country applicationType resourceSpecification = 
    oprot#writeMessageBegin ("getPopularBuddyBanner", Protocol.CALL, seqid);
    let args = new getPopularBuddyBanner_args in
      args#set_language language;
      args#set_country country;
      args#set_applicationType applicationType;
      args#set_resourceSpecification resourceSpecification;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPopularBuddyBanner  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPopularBuddyBanner_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPopularBuddyBanner failed: unknown result")))
  method getPopularBuddyLists language country = 
    self#send_getPopularBuddyLists language country;
    self#recv_getPopularBuddyLists
  method private send_getPopularBuddyLists language country = 
    oprot#writeMessageBegin ("getPopularBuddyLists", Protocol.CALL, seqid);
    let args = new getPopularBuddyLists_args in
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPopularBuddyLists  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPopularBuddyLists_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPopularBuddyLists failed: unknown result")))
  method getPromotedBuddyContacts language country = 
    self#send_getPromotedBuddyContacts language country;
    self#recv_getPromotedBuddyContacts
  method private send_getPromotedBuddyContacts language country = 
    oprot#writeMessageBegin ("getPromotedBuddyContacts", Protocol.CALL, seqid);
    let args = new getPromotedBuddyContacts_args in
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPromotedBuddyContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPromotedBuddyContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPromotedBuddyContacts failed: unknown result")))
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 9
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_findBuddyContactsByQuery (seqid, iprot, oprot) =
    let args = read_findBuddyContactsByQuery_args iprot in
      iprot#readMessageEnd;
      let result = new findBuddyContactsByQuery_result in
        (try
          result#set_success (handler#findBuddyContactsByQuery args#get_language args#get_country args#get_query args#get_fromIndex args#get_count args#get_requestSource);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findBuddyContactsByQuery", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBuddyContacts (seqid, iprot, oprot) =
    let args = read_getBuddyContacts_args iprot in
      iprot#readMessageEnd;
      let result = new getBuddyContacts_result in
        (try
          result#set_success (handler#getBuddyContacts args#get_language args#get_country args#get_classification args#get_fromIndex args#get_count);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBuddyContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBuddyDetail (seqid, iprot, oprot) =
    let args = read_getBuddyDetail_args iprot in
      iprot#readMessageEnd;
      let result = new getBuddyDetail_result in
        (try
          result#set_success (handler#getBuddyDetail args#get_buddyMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBuddyDetail", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBuddyOnAir (seqid, iprot, oprot) =
    let args = read_getBuddyOnAir_args iprot in
      iprot#readMessageEnd;
      let result = new getBuddyOnAir_result in
        (try
          result#set_success (handler#getBuddyOnAir args#get_buddyMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBuddyOnAir", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCountriesHavingBuddy (seqid, iprot, oprot) =
    let _ = read_getCountriesHavingBuddy_args iprot in
      iprot#readMessageEnd;
      let result = new getCountriesHavingBuddy_result in
        (try
          result#set_success (handler#getCountriesHavingBuddy);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCountriesHavingBuddy", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getNewlyReleasedBuddyIds (seqid, iprot, oprot) =
    let args = read_getNewlyReleasedBuddyIds_args iprot in
      iprot#readMessageEnd;
      let result = new getNewlyReleasedBuddyIds_result in
        (try
          result#set_success (handler#getNewlyReleasedBuddyIds args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getNewlyReleasedBuddyIds", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPopularBuddyBanner (seqid, iprot, oprot) =
    let args = read_getPopularBuddyBanner_args iprot in
      iprot#readMessageEnd;
      let result = new getPopularBuddyBanner_result in
        (try
          result#set_success (handler#getPopularBuddyBanner args#get_language args#get_country args#get_applicationType args#get_resourceSpecification);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPopularBuddyBanner", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPopularBuddyLists (seqid, iprot, oprot) =
    let args = read_getPopularBuddyLists_args iprot in
      iprot#readMessageEnd;
      let result = new getPopularBuddyLists_result in
        (try
          result#set_success (handler#getPopularBuddyLists args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPopularBuddyLists", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPromotedBuddyContacts (seqid, iprot, oprot) =
    let args = read_getPromotedBuddyContacts_args iprot in
      iprot#readMessageEnd;
      let result = new getPromotedBuddyContacts_result in
        (try
          result#set_success (handler#getPromotedBuddyContacts args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPromotedBuddyContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "findBuddyContactsByQuery" self#process_findBuddyContactsByQuery;
    Hashtbl.add processMap "getBuddyContacts" self#process_getBuddyContacts;
    Hashtbl.add processMap "getBuddyDetail" self#process_getBuddyDetail;
    Hashtbl.add processMap "getBuddyOnAir" self#process_getBuddyOnAir;
    Hashtbl.add processMap "getCountriesHavingBuddy" self#process_getCountriesHavingBuddy;
    Hashtbl.add processMap "getNewlyReleasedBuddyIds" self#process_getNewlyReleasedBuddyIds;
    Hashtbl.add processMap "getPopularBuddyBanner" self#process_getPopularBuddyBanner;
    Hashtbl.add processMap "getPopularBuddyLists" self#process_getPopularBuddyLists;
    Hashtbl.add processMap "getPromotedBuddyContacts" self#process_getPromotedBuddyContacts;
end

