(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class getSquareChatAnnouncements_args =
object (self)
  val mutable _request : getSquareChatAnnouncementsRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareChatAnnouncements_args.request") | Some _x12379 -> _x12379
  method set_request _x12379 = _request <- Some _x12379
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareChatAnnouncements_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareChatAnnouncements_args (iprot : Protocol.t) =
  let _str12382 = new getSquareChatAnnouncements_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12383,_id12384) = iprot#readFieldBegin in
        if _t12383 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12384 with 
          | 1 -> (if _t12383 = Protocol.T_STRUCT then
              _str12382#set_request (read_getSquareChatAnnouncementsRequest iprot)
            else
              iprot#skip _t12383)
          | _ -> iprot#skip _t12383);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12382

class getSquareChatAnnouncements_result =
object (self)
  val mutable _success : getSquareChatAnnouncementsResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareChatAnnouncements_result.success") | Some _x12385 -> _x12385
  method set_success _x12385 = _success <- Some _x12385
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareChatAnnouncements_result.e") | Some _x12386 -> _x12386
  method set_e _x12386 = _e <- Some _x12386
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareChatAnnouncements_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareChatAnnouncements_result (iprot : Protocol.t) =
  let _str12389 = new getSquareChatAnnouncements_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12390,_id12391) = iprot#readFieldBegin in
        if _t12390 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12391 with 
          | 0 -> (if _t12390 = Protocol.T_STRUCT then
              _str12389#set_success (read_getSquareChatAnnouncementsResponse iprot)
            else
              iprot#skip _t12390)
          | 1 -> (if _t12390 = Protocol.T_STRUCT then
              _str12389#set_e (read_squareException iprot)
            else
              iprot#skip _t12390)
          | _ -> iprot#skip _t12390);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12389

class deleteSquareChatAnnouncement_args =
object (self)
  val mutable _request : deleteSquareChatAnnouncementRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "deleteSquareChatAnnouncement_args.request") | Some _x12392 -> _x12392
  method set_request _x12392 = _request <- Some _x12392
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteSquareChatAnnouncement_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteSquareChatAnnouncement_args (iprot : Protocol.t) =
  let _str12395 = new deleteSquareChatAnnouncement_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12396,_id12397) = iprot#readFieldBegin in
        if _t12396 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12397 with 
          | 1 -> (if _t12396 = Protocol.T_STRUCT then
              _str12395#set_request (read_deleteSquareChatAnnouncementRequest iprot)
            else
              iprot#skip _t12396)
          | _ -> iprot#skip _t12396);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12395

class deleteSquareChatAnnouncement_result =
object (self)
  val mutable _success : deleteSquareChatAnnouncementResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "deleteSquareChatAnnouncement_result.success") | Some _x12398 -> _x12398
  method set_success _x12398 = _success <- Some _x12398
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "deleteSquareChatAnnouncement_result.e") | Some _x12399 -> _x12399
  method set_e _x12399 = _e <- Some _x12399
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteSquareChatAnnouncement_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteSquareChatAnnouncement_result (iprot : Protocol.t) =
  let _str12402 = new deleteSquareChatAnnouncement_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12403,_id12404) = iprot#readFieldBegin in
        if _t12403 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12404 with 
          | 0 -> (if _t12403 = Protocol.T_STRUCT then
              _str12402#set_success (read_deleteSquareChatAnnouncementResponse iprot)
            else
              iprot#skip _t12403)
          | 1 -> (if _t12403 = Protocol.T_STRUCT then
              _str12402#set_e (read_squareException iprot)
            else
              iprot#skip _t12403)
          | _ -> iprot#skip _t12403);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12402

class createSquareChatAnnouncement_args =
object (self)
  val mutable _request : createSquareChatAnnouncementRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "createSquareChatAnnouncement_args.request") | Some _x12405 -> _x12405
  method set_request _x12405 = _request <- Some _x12405
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createSquareChatAnnouncement_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createSquareChatAnnouncement_args (iprot : Protocol.t) =
  let _str12408 = new createSquareChatAnnouncement_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12409,_id12410) = iprot#readFieldBegin in
        if _t12409 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12410 with 
          | 1 -> (if _t12409 = Protocol.T_STRUCT then
              _str12408#set_request (read_createSquareChatAnnouncementRequest iprot)
            else
              iprot#skip _t12409)
          | _ -> iprot#skip _t12409);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12408

class createSquareChatAnnouncement_result =
object (self)
  val mutable _success : createSquareChatAnnouncementResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createSquareChatAnnouncement_result.success") | Some _x12411 -> _x12411
  method set_success _x12411 = _success <- Some _x12411
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createSquareChatAnnouncement_result.e") | Some _x12412 -> _x12412
  method set_e _x12412 = _e <- Some _x12412
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createSquareChatAnnouncement_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createSquareChatAnnouncement_result (iprot : Protocol.t) =
  let _str12415 = new createSquareChatAnnouncement_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12416,_id12417) = iprot#readFieldBegin in
        if _t12416 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12417 with 
          | 0 -> (if _t12416 = Protocol.T_STRUCT then
              _str12415#set_success (read_createSquareChatAnnouncementResponse iprot)
            else
              iprot#skip _t12416)
          | 1 -> (if _t12416 = Protocol.T_STRUCT then
              _str12415#set_e (read_squareException iprot)
            else
              iprot#skip _t12416)
          | _ -> iprot#skip _t12416);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12415

class getNoteStatus_args =
object (self)
  val mutable _request : getNoteStatusRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getNoteStatus_args.request") | Some _x12418 -> _x12418
  method set_request _x12418 = _request <- Some _x12418
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNoteStatus_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNoteStatus_args (iprot : Protocol.t) =
  let _str12421 = new getNoteStatus_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12422,_id12423) = iprot#readFieldBegin in
        if _t12422 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12423 with 
          | 1 -> (if _t12422 = Protocol.T_STRUCT then
              _str12421#set_request (read_getNoteStatusRequest iprot)
            else
              iprot#skip _t12422)
          | _ -> iprot#skip _t12422);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12421

class getNoteStatus_result =
object (self)
  val mutable _success : getNoteStatusResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getNoteStatus_result.success") | Some _x12424 -> _x12424
  method set_success _x12424 = _success <- Some _x12424
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getNoteStatus_result.e") | Some _x12425 -> _x12425
  method set_e _x12425 = _e <- Some _x12425
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNoteStatus_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNoteStatus_result (iprot : Protocol.t) =
  let _str12428 = new getNoteStatus_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12429,_id12430) = iprot#readFieldBegin in
        if _t12429 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12430 with 
          | 0 -> (if _t12429 = Protocol.T_STRUCT then
              _str12428#set_success (read_getNoteStatusResponse iprot)
            else
              iprot#skip _t12429)
          | 1 -> (if _t12429 = Protocol.T_STRUCT then
              _str12428#set_e (read_squareException iprot)
            else
              iprot#skip _t12429)
          | _ -> iprot#skip _t12429);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12428

class getSquareStatus_args =
object (self)
  val mutable _request : getSquareStatusRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareStatus_args.request") | Some _x12431 -> _x12431
  method set_request _x12431 = _request <- Some _x12431
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareStatus_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareStatus_args (iprot : Protocol.t) =
  let _str12434 = new getSquareStatus_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12435,_id12436) = iprot#readFieldBegin in
        if _t12435 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12436 with 
          | 1 -> (if _t12435 = Protocol.T_STRUCT then
              _str12434#set_request (read_getSquareStatusRequest iprot)
            else
              iprot#skip _t12435)
          | _ -> iprot#skip _t12435);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12434

class getSquareStatus_result =
object (self)
  val mutable _success : getSquareStatusResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareStatus_result.success") | Some _x12437 -> _x12437
  method set_success _x12437 = _success <- Some _x12437
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareStatus_result.e") | Some _x12438 -> _x12438
  method set_e _x12438 = _e <- Some _x12438
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareStatus_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareStatus_result (iprot : Protocol.t) =
  let _str12441 = new getSquareStatus_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12442,_id12443) = iprot#readFieldBegin in
        if _t12442 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12443 with 
          | 0 -> (if _t12442 = Protocol.T_STRUCT then
              _str12441#set_success (read_getSquareStatusResponse iprot)
            else
              iprot#skip _t12442)
          | 1 -> (if _t12442 = Protocol.T_STRUCT then
              _str12441#set_e (read_squareException iprot)
            else
              iprot#skip _t12442)
          | _ -> iprot#skip _t12442);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12441

class reportSquareMember_args =
object (self)
  val mutable _request : reportSquareMemberRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "reportSquareMember_args.request") | Some _x12444 -> _x12444
  method set_request _x12444 = _request <- Some _x12444
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSquareMember_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSquareMember_args (iprot : Protocol.t) =
  let _str12447 = new reportSquareMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12448,_id12449) = iprot#readFieldBegin in
        if _t12448 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12449 with 
          | 1 -> (if _t12448 = Protocol.T_STRUCT then
              _str12447#set_request (read_reportSquareMemberRequest iprot)
            else
              iprot#skip _t12448)
          | _ -> iprot#skip _t12448);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12447

class reportSquareMember_result =
object (self)
  val mutable _success : reportSquareMemberResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reportSquareMember_result.success") | Some _x12450 -> _x12450
  method set_success _x12450 = _success <- Some _x12450
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportSquareMember_result.e") | Some _x12451 -> _x12451
  method set_e _x12451 = _e <- Some _x12451
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSquareMember_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSquareMember_result (iprot : Protocol.t) =
  let _str12454 = new reportSquareMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12455,_id12456) = iprot#readFieldBegin in
        if _t12455 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12456 with 
          | 0 -> (if _t12455 = Protocol.T_STRUCT then
              _str12454#set_success (read_reportSquareMemberResponse iprot)
            else
              iprot#skip _t12455)
          | 1 -> (if _t12455 = Protocol.T_STRUCT then
              _str12454#set_e (read_squareException iprot)
            else
              iprot#skip _t12455)
          | _ -> iprot#skip _t12455);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12454

class reportSquareMessage_args =
object (self)
  val mutable _request : reportSquareMessageRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "reportSquareMessage_args.request") | Some _x12457 -> _x12457
  method set_request _x12457 = _request <- Some _x12457
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSquareMessage_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSquareMessage_args (iprot : Protocol.t) =
  let _str12460 = new reportSquareMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12461,_id12462) = iprot#readFieldBegin in
        if _t12461 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12462 with 
          | 1 -> (if _t12461 = Protocol.T_STRUCT then
              _str12460#set_request (read_reportSquareMessageRequest iprot)
            else
              iprot#skip _t12461)
          | _ -> iprot#skip _t12461);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12460

class reportSquareMessage_result =
object (self)
  val mutable _success : reportSquareMessageResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reportSquareMessage_result.success") | Some _x12463 -> _x12463
  method set_success _x12463 = _success <- Some _x12463
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportSquareMessage_result.e") | Some _x12464 -> _x12464
  method set_e _x12464 = _e <- Some _x12464
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSquareMessage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSquareMessage_result (iprot : Protocol.t) =
  let _str12467 = new reportSquareMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12468,_id12469) = iprot#readFieldBegin in
        if _t12468 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12469 with 
          | 0 -> (if _t12468 = Protocol.T_STRUCT then
              _str12467#set_success (read_reportSquareMessageResponse iprot)
            else
              iprot#skip _t12468)
          | 1 -> (if _t12468 = Protocol.T_STRUCT then
              _str12467#set_e (read_squareException iprot)
            else
              iprot#skip _t12468)
          | _ -> iprot#skip _t12468);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12467

class reportSquareChat_args =
object (self)
  val mutable _request : reportSquareChatRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "reportSquareChat_args.request") | Some _x12470 -> _x12470
  method set_request _x12470 = _request <- Some _x12470
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSquareChat_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSquareChat_args (iprot : Protocol.t) =
  let _str12473 = new reportSquareChat_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12474,_id12475) = iprot#readFieldBegin in
        if _t12474 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12475 with 
          | 1 -> (if _t12474 = Protocol.T_STRUCT then
              _str12473#set_request (read_reportSquareChatRequest iprot)
            else
              iprot#skip _t12474)
          | _ -> iprot#skip _t12474);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12473

class reportSquareChat_result =
object (self)
  val mutable _success : reportSquareChatResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reportSquareChat_result.success") | Some _x12476 -> _x12476
  method set_success _x12476 = _success <- Some _x12476
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportSquareChat_result.e") | Some _x12477 -> _x12477
  method set_e _x12477 = _e <- Some _x12477
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSquareChat_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSquareChat_result (iprot : Protocol.t) =
  let _str12480 = new reportSquareChat_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12481,_id12482) = iprot#readFieldBegin in
        if _t12481 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12482 with 
          | 0 -> (if _t12481 = Protocol.T_STRUCT then
              _str12480#set_success (read_reportSquareChatResponse iprot)
            else
              iprot#skip _t12481)
          | 1 -> (if _t12481 = Protocol.T_STRUCT then
              _str12480#set_e (read_squareException iprot)
            else
              iprot#skip _t12481)
          | _ -> iprot#skip _t12481);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12480

class reportSquare_args =
object (self)
  val mutable _request : reportSquareRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "reportSquare_args.request") | Some _x12483 -> _x12483
  method set_request _x12483 = _request <- Some _x12483
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSquare_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSquare_args (iprot : Protocol.t) =
  let _str12486 = new reportSquare_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12487,_id12488) = iprot#readFieldBegin in
        if _t12487 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12488 with 
          | 1 -> (if _t12487 = Protocol.T_STRUCT then
              _str12486#set_request (read_reportSquareRequest iprot)
            else
              iprot#skip _t12487)
          | _ -> iprot#skip _t12487);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12486

class reportSquare_result =
object (self)
  val mutable _success : reportSquareResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reportSquare_result.success") | Some _x12489 -> _x12489
  method set_success _x12489 = _success <- Some _x12489
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportSquare_result.e") | Some _x12490 -> _x12490
  method set_e _x12490 = _e <- Some _x12490
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSquare_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSquare_result (iprot : Protocol.t) =
  let _str12493 = new reportSquare_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12494,_id12495) = iprot#readFieldBegin in
        if _t12494 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12495 with 
          | 0 -> (if _t12494 = Protocol.T_STRUCT then
              _str12493#set_success (read_reportSquareResponse iprot)
            else
              iprot#skip _t12494)
          | 1 -> (if _t12494 = Protocol.T_STRUCT then
              _str12493#set_e (read_squareException iprot)
            else
              iprot#skip _t12494)
          | _ -> iprot#skip _t12494);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12493

class updateSquareMemberRelation_args =
object (self)
  val mutable _request : updateSquareMemberRelationRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "updateSquareMemberRelation_args.request") | Some _x12496 -> _x12496
  method set_request _x12496 = _request <- Some _x12496
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareMemberRelation_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareMemberRelation_args (iprot : Protocol.t) =
  let _str12499 = new updateSquareMemberRelation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12500,_id12501) = iprot#readFieldBegin in
        if _t12500 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12501 with 
          | 1 -> (if _t12500 = Protocol.T_STRUCT then
              _str12499#set_request (read_updateSquareMemberRelationRequest iprot)
            else
              iprot#skip _t12500)
          | _ -> iprot#skip _t12500);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12499

class updateSquareMemberRelation_result =
object (self)
  val mutable _success : updateSquareMemberRelationResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSquareMemberRelation_result.success") | Some _x12502 -> _x12502
  method set_success _x12502 = _success <- Some _x12502
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSquareMemberRelation_result.e") | Some _x12503 -> _x12503
  method set_e _x12503 = _e <- Some _x12503
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareMemberRelation_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareMemberRelation_result (iprot : Protocol.t) =
  let _str12506 = new updateSquareMemberRelation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12507,_id12508) = iprot#readFieldBegin in
        if _t12507 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12508 with 
          | 0 -> (if _t12507 = Protocol.T_STRUCT then
              _str12506#set_success (read_updateSquareMemberRelationResponse iprot)
            else
              iprot#skip _t12507)
          | 1 -> (if _t12507 = Protocol.T_STRUCT then
              _str12506#set_e (read_squareException iprot)
            else
              iprot#skip _t12507)
          | _ -> iprot#skip _t12507);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12506

class updateSquareAuthority_args =
object (self)
  val mutable _request : updateSquareAuthorityRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "updateSquareAuthority_args.request") | Some _x12509 -> _x12509
  method set_request _x12509 = _request <- Some _x12509
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareAuthority_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareAuthority_args (iprot : Protocol.t) =
  let _str12512 = new updateSquareAuthority_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12513,_id12514) = iprot#readFieldBegin in
        if _t12513 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12514 with 
          | 1 -> (if _t12513 = Protocol.T_STRUCT then
              _str12512#set_request (read_updateSquareAuthorityRequest iprot)
            else
              iprot#skip _t12513)
          | _ -> iprot#skip _t12513);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12512

class updateSquareAuthority_result =
object (self)
  val mutable _success : updateSquareAuthorityResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSquareAuthority_result.success") | Some _x12515 -> _x12515
  method set_success _x12515 = _success <- Some _x12515
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSquareAuthority_result.e") | Some _x12516 -> _x12516
  method set_e _x12516 = _e <- Some _x12516
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareAuthority_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareAuthority_result (iprot : Protocol.t) =
  let _str12519 = new updateSquareAuthority_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12520,_id12521) = iprot#readFieldBegin in
        if _t12520 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12521 with 
          | 0 -> (if _t12520 = Protocol.T_STRUCT then
              _str12519#set_success (read_updateSquareAuthorityResponse iprot)
            else
              iprot#skip _t12520)
          | 1 -> (if _t12520 = Protocol.T_STRUCT then
              _str12519#set_e (read_squareException iprot)
            else
              iprot#skip _t12520)
          | _ -> iprot#skip _t12520);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12519

class updateSquareChatMember_args =
object (self)
  val mutable _request : updateSquareChatMemberRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "updateSquareChatMember_args.request") | Some _x12522 -> _x12522
  method set_request _x12522 = _request <- Some _x12522
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareChatMember_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareChatMember_args (iprot : Protocol.t) =
  let _str12525 = new updateSquareChatMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12526,_id12527) = iprot#readFieldBegin in
        if _t12526 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12527 with 
          | 1 -> (if _t12526 = Protocol.T_STRUCT then
              _str12525#set_request (read_updateSquareChatMemberRequest iprot)
            else
              iprot#skip _t12526)
          | _ -> iprot#skip _t12526);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12525

class updateSquareChatMember_result =
object (self)
  val mutable _success : updateSquareChatMemberResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSquareChatMember_result.success") | Some _x12528 -> _x12528
  method set_success _x12528 = _success <- Some _x12528
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSquareChatMember_result.e") | Some _x12529 -> _x12529
  method set_e _x12529 = _e <- Some _x12529
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareChatMember_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareChatMember_result (iprot : Protocol.t) =
  let _str12532 = new updateSquareChatMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12533,_id12534) = iprot#readFieldBegin in
        if _t12533 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12534 with 
          | 0 -> (if _t12533 = Protocol.T_STRUCT then
              _str12532#set_success (read_updateSquareChatMemberResponse iprot)
            else
              iprot#skip _t12533)
          | 1 -> (if _t12533 = Protocol.T_STRUCT then
              _str12532#set_e (read_squareException iprot)
            else
              iprot#skip _t12533)
          | _ -> iprot#skip _t12533);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12532

class updateSquareChat_args =
object (self)
  val mutable _request : updateSquareChatRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "updateSquareChat_args.request") | Some _x12535 -> _x12535
  method set_request _x12535 = _request <- Some _x12535
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareChat_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareChat_args (iprot : Protocol.t) =
  let _str12538 = new updateSquareChat_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12539,_id12540) = iprot#readFieldBegin in
        if _t12539 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12540 with 
          | 1 -> (if _t12539 = Protocol.T_STRUCT then
              _str12538#set_request (read_updateSquareChatRequest iprot)
            else
              iprot#skip _t12539)
          | _ -> iprot#skip _t12539);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12538

class updateSquareChat_result =
object (self)
  val mutable _success : updateSquareChatResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSquareChat_result.success") | Some _x12541 -> _x12541
  method set_success _x12541 = _success <- Some _x12541
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSquareChat_result.e") | Some _x12542 -> _x12542
  method set_e _x12542 = _e <- Some _x12542
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareChat_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareChat_result (iprot : Protocol.t) =
  let _str12545 = new updateSquareChat_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12546,_id12547) = iprot#readFieldBegin in
        if _t12546 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12547 with 
          | 0 -> (if _t12546 = Protocol.T_STRUCT then
              _str12545#set_success (read_updateSquareChatResponse iprot)
            else
              iprot#skip _t12546)
          | 1 -> (if _t12546 = Protocol.T_STRUCT then
              _str12545#set_e (read_squareException iprot)
            else
              iprot#skip _t12546)
          | _ -> iprot#skip _t12546);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12545

class refreshSubscriptions_args =
object (self)
  val mutable _request : refreshSubscriptionsRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "refreshSubscriptions_args.request") | Some _x12548 -> _x12548
  method set_request _x12548 = _request <- Some _x12548
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "refreshSubscriptions_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_refreshSubscriptions_args (iprot : Protocol.t) =
  let _str12551 = new refreshSubscriptions_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12552,_id12553) = iprot#readFieldBegin in
        if _t12552 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12553 with 
          | 1 -> (if _t12552 = Protocol.T_STRUCT then
              _str12551#set_request (read_refreshSubscriptionsRequest iprot)
            else
              iprot#skip _t12552)
          | _ -> iprot#skip _t12552);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12551

class refreshSubscriptions_result =
object (self)
  val mutable _success : refreshSubscriptionsResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "refreshSubscriptions_result.success") | Some _x12554 -> _x12554
  method set_success _x12554 = _success <- Some _x12554
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "refreshSubscriptions_result.e") | Some _x12555 -> _x12555
  method set_e _x12555 = _e <- Some _x12555
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "refreshSubscriptions_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_refreshSubscriptions_result (iprot : Protocol.t) =
  let _str12558 = new refreshSubscriptions_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12559,_id12560) = iprot#readFieldBegin in
        if _t12559 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12560 with 
          | 0 -> (if _t12559 = Protocol.T_STRUCT then
              _str12558#set_success (read_refreshSubscriptionsResponse iprot)
            else
              iprot#skip _t12559)
          | 1 -> (if _t12559 = Protocol.T_STRUCT then
              _str12558#set_e (read_squareException iprot)
            else
              iprot#skip _t12559)
          | _ -> iprot#skip _t12559);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12558

class removeSubscriptions_args =
object (self)
  val mutable _request : removeSubscriptionsRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "removeSubscriptions_args.request") | Some _x12561 -> _x12561
  method set_request _x12561 = _request <- Some _x12561
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeSubscriptions_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeSubscriptions_args (iprot : Protocol.t) =
  let _str12564 = new removeSubscriptions_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12565,_id12566) = iprot#readFieldBegin in
        if _t12565 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12566 with 
          | 1 -> (if _t12565 = Protocol.T_STRUCT then
              _str12564#set_request (read_removeSubscriptionsRequest iprot)
            else
              iprot#skip _t12565)
          | _ -> iprot#skip _t12565);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12564

class removeSubscriptions_result =
object (self)
  val mutable _success : removeSubscriptionsResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "removeSubscriptions_result.success") | Some _x12567 -> _x12567
  method set_success _x12567 = _success <- Some _x12567
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeSubscriptions_result.e") | Some _x12568 -> _x12568
  method set_e _x12568 = _e <- Some _x12568
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeSubscriptions_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeSubscriptions_result (iprot : Protocol.t) =
  let _str12571 = new removeSubscriptions_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12572,_id12573) = iprot#readFieldBegin in
        if _t12572 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12573 with 
          | 0 -> (if _t12572 = Protocol.T_STRUCT then
              _str12571#set_success (read_removeSubscriptionsResponse iprot)
            else
              iprot#skip _t12572)
          | 1 -> (if _t12572 = Protocol.T_STRUCT then
              _str12571#set_e (read_squareException iprot)
            else
              iprot#skip _t12572)
          | _ -> iprot#skip _t12572);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12571

class rejectSquareMembers_args =
object (self)
  val mutable _request : rejectSquareMembersRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "rejectSquareMembers_args.request") | Some _x12574 -> _x12574
  method set_request _x12574 = _request <- Some _x12574
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "rejectSquareMembers_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_rejectSquareMembers_args (iprot : Protocol.t) =
  let _str12577 = new rejectSquareMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12578,_id12579) = iprot#readFieldBegin in
        if _t12578 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12579 with 
          | 1 -> (if _t12578 = Protocol.T_STRUCT then
              _str12577#set_request (read_rejectSquareMembersRequest iprot)
            else
              iprot#skip _t12578)
          | _ -> iprot#skip _t12578);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12577

class rejectSquareMembers_result =
object (self)
  val mutable _success : rejectSquareMembersResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "rejectSquareMembers_result.success") | Some _x12580 -> _x12580
  method set_success _x12580 = _success <- Some _x12580
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "rejectSquareMembers_result.e") | Some _x12581 -> _x12581
  method set_e _x12581 = _e <- Some _x12581
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "rejectSquareMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_rejectSquareMembers_result (iprot : Protocol.t) =
  let _str12584 = new rejectSquareMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12585,_id12586) = iprot#readFieldBegin in
        if _t12585 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12586 with 
          | 0 -> (if _t12585 = Protocol.T_STRUCT then
              _str12584#set_success (read_rejectSquareMembersResponse iprot)
            else
              iprot#skip _t12585)
          | 1 -> (if _t12585 = Protocol.T_STRUCT then
              _str12584#set_e (read_squareException iprot)
            else
              iprot#skip _t12585)
          | _ -> iprot#skip _t12585);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12584

class updateSquareMembers_args =
object (self)
  val mutable _request : updateSquareMembersRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "updateSquareMembers_args.request") | Some _x12587 -> _x12587
  method set_request _x12587 = _request <- Some _x12587
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareMembers_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareMembers_args (iprot : Protocol.t) =
  let _str12590 = new updateSquareMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12591,_id12592) = iprot#readFieldBegin in
        if _t12591 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12592 with 
          | 1 -> (if _t12591 = Protocol.T_STRUCT then
              _str12590#set_request (read_updateSquareMembersRequest iprot)
            else
              iprot#skip _t12591)
          | _ -> iprot#skip _t12591);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12590

class updateSquareMembers_result =
object (self)
  val mutable _success : updateSquareMembersResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSquareMembers_result.success") | Some _x12593 -> _x12593
  method set_success _x12593 = _success <- Some _x12593
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSquareMembers_result.e") | Some _x12594 -> _x12594
  method set_e _x12594 = _e <- Some _x12594
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareMembers_result (iprot : Protocol.t) =
  let _str12597 = new updateSquareMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12598,_id12599) = iprot#readFieldBegin in
        if _t12598 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12599 with 
          | 0 -> (if _t12598 = Protocol.T_STRUCT then
              _str12597#set_success (read_updateSquareMembersResponse iprot)
            else
              iprot#skip _t12598)
          | 1 -> (if _t12598 = Protocol.T_STRUCT then
              _str12597#set_e (read_squareException iprot)
            else
              iprot#skip _t12598)
          | _ -> iprot#skip _t12598);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12597

class updateSquareMember_args =
object (self)
  val mutable _request : updateSquareMemberRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "updateSquareMember_args.request") | Some _x12600 -> _x12600
  method set_request _x12600 = _request <- Some _x12600
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareMember_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareMember_args (iprot : Protocol.t) =
  let _str12603 = new updateSquareMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12604,_id12605) = iprot#readFieldBegin in
        if _t12604 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12605 with 
          | 1 -> (if _t12604 = Protocol.T_STRUCT then
              _str12603#set_request (read_updateSquareMemberRequest iprot)
            else
              iprot#skip _t12604)
          | _ -> iprot#skip _t12604);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12603

class updateSquareMember_result =
object (self)
  val mutable _success : updateSquareMemberResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSquareMember_result.success") | Some _x12606 -> _x12606
  method set_success _x12606 = _success <- Some _x12606
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSquareMember_result.e") | Some _x12607 -> _x12607
  method set_e _x12607 = _e <- Some _x12607
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareMember_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareMember_result (iprot : Protocol.t) =
  let _str12610 = new updateSquareMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12611,_id12612) = iprot#readFieldBegin in
        if _t12611 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12612 with 
          | 0 -> (if _t12611 = Protocol.T_STRUCT then
              _str12610#set_success (read_updateSquareMemberResponse iprot)
            else
              iprot#skip _t12611)
          | 1 -> (if _t12611 = Protocol.T_STRUCT then
              _str12610#set_e (read_squareException iprot)
            else
              iprot#skip _t12611)
          | _ -> iprot#skip _t12611);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12610

class updateSquareFeatureSet_args =
object (self)
  val mutable _request : updateSquareFeatureSetRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "updateSquareFeatureSet_args.request") | Some _x12613 -> _x12613
  method set_request _x12613 = _request <- Some _x12613
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareFeatureSet_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareFeatureSet_args (iprot : Protocol.t) =
  let _str12616 = new updateSquareFeatureSet_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12617,_id12618) = iprot#readFieldBegin in
        if _t12617 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12618 with 
          | 1 -> (if _t12617 = Protocol.T_STRUCT then
              _str12616#set_request (read_updateSquareFeatureSetRequest iprot)
            else
              iprot#skip _t12617)
          | _ -> iprot#skip _t12617);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12616

class updateSquareFeatureSet_result =
object (self)
  val mutable _success : updateSquareFeatureSetResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSquareFeatureSet_result.success") | Some _x12619 -> _x12619
  method set_success _x12619 = _success <- Some _x12619
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSquareFeatureSet_result.e") | Some _x12620 -> _x12620
  method set_e _x12620 = _e <- Some _x12620
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareFeatureSet_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareFeatureSet_result (iprot : Protocol.t) =
  let _str12623 = new updateSquareFeatureSet_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12624,_id12625) = iprot#readFieldBegin in
        if _t12624 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12625 with 
          | 0 -> (if _t12624 = Protocol.T_STRUCT then
              _str12623#set_success (read_updateSquareFeatureSetResponse iprot)
            else
              iprot#skip _t12624)
          | 1 -> (if _t12624 = Protocol.T_STRUCT then
              _str12623#set_e (read_squareException iprot)
            else
              iprot#skip _t12624)
          | _ -> iprot#skip _t12624);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12623

class getSquareFeatureSet_args =
object (self)
  val mutable _request : getSquareFeatureSetRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareFeatureSet_args.request") | Some _x12626 -> _x12626
  method set_request _x12626 = _request <- Some _x12626
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareFeatureSet_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareFeatureSet_args (iprot : Protocol.t) =
  let _str12629 = new getSquareFeatureSet_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12630,_id12631) = iprot#readFieldBegin in
        if _t12630 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12631 with 
          | 1 -> (if _t12630 = Protocol.T_STRUCT then
              _str12629#set_request (read_getSquareFeatureSetRequest iprot)
            else
              iprot#skip _t12630)
          | _ -> iprot#skip _t12630);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12629

class getSquareFeatureSet_result =
object (self)
  val mutable _success : getSquareFeatureSetResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareFeatureSet_result.success") | Some _x12632 -> _x12632
  method set_success _x12632 = _success <- Some _x12632
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareFeatureSet_result.e") | Some _x12633 -> _x12633
  method set_e _x12633 = _e <- Some _x12633
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareFeatureSet_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareFeatureSet_result (iprot : Protocol.t) =
  let _str12636 = new getSquareFeatureSet_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12637,_id12638) = iprot#readFieldBegin in
        if _t12637 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12638 with 
          | 0 -> (if _t12637 = Protocol.T_STRUCT then
              _str12636#set_success (read_getSquareFeatureSetResponse iprot)
            else
              iprot#skip _t12637)
          | 1 -> (if _t12637 = Protocol.T_STRUCT then
              _str12636#set_e (read_squareException iprot)
            else
              iprot#skip _t12637)
          | _ -> iprot#skip _t12637);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12636

class searchSquares_args =
object (self)
  val mutable _request : searchSquaresRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "searchSquares_args.request") | Some _x12639 -> _x12639
  method set_request _x12639 = _request <- Some _x12639
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "searchSquares_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_searchSquares_args (iprot : Protocol.t) =
  let _str12642 = new searchSquares_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12643,_id12644) = iprot#readFieldBegin in
        if _t12643 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12644 with 
          | 1 -> (if _t12643 = Protocol.T_STRUCT then
              _str12642#set_request (read_searchSquaresRequest iprot)
            else
              iprot#skip _t12643)
          | _ -> iprot#skip _t12643);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12642

class searchSquares_result =
object (self)
  val mutable _success : searchSquaresResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "searchSquares_result.success") | Some _x12645 -> _x12645
  method set_success _x12645 = _success <- Some _x12645
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "searchSquares_result.e") | Some _x12646 -> _x12646
  method set_e _x12646 = _e <- Some _x12646
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "searchSquares_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_searchSquares_result (iprot : Protocol.t) =
  let _str12649 = new searchSquares_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12650,_id12651) = iprot#readFieldBegin in
        if _t12650 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12651 with 
          | 0 -> (if _t12650 = Protocol.T_STRUCT then
              _str12649#set_success (read_searchSquaresResponse iprot)
            else
              iprot#skip _t12650)
          | 1 -> (if _t12650 = Protocol.T_STRUCT then
              _str12649#set_e (read_squareException iprot)
            else
              iprot#skip _t12650)
          | _ -> iprot#skip _t12650);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12649

class updateSquare_args =
object (self)
  val mutable _request : updateSquareRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "updateSquare_args.request") | Some _x12652 -> _x12652
  method set_request _x12652 = _request <- Some _x12652
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquare_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquare_args (iprot : Protocol.t) =
  let _str12655 = new updateSquare_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12656,_id12657) = iprot#readFieldBegin in
        if _t12656 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12657 with 
          | 1 -> (if _t12656 = Protocol.T_STRUCT then
              _str12655#set_request (read_updateSquareRequest iprot)
            else
              iprot#skip _t12656)
          | _ -> iprot#skip _t12656);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12655

class updateSquare_result =
object (self)
  val mutable _success : updateSquareResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSquare_result.success") | Some _x12658 -> _x12658
  method set_success _x12658 = _success <- Some _x12658
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSquare_result.e") | Some _x12659 -> _x12659
  method set_e _x12659 = _e <- Some _x12659
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquare_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquare_result (iprot : Protocol.t) =
  let _str12662 = new updateSquare_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12663,_id12664) = iprot#readFieldBegin in
        if _t12663 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12664 with 
          | 0 -> (if _t12663 = Protocol.T_STRUCT then
              _str12662#set_success (read_updateSquareResponse iprot)
            else
              iprot#skip _t12663)
          | 1 -> (if _t12663 = Protocol.T_STRUCT then
              _str12662#set_e (read_squareException iprot)
            else
              iprot#skip _t12663)
          | _ -> iprot#skip _t12663);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12662

class getCategories_args =
object (self)
  val mutable _request : getSquareCategoriesRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getCategories_args.request") | Some _x12665 -> _x12665
  method set_request _x12665 = _request <- Some _x12665
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCategories_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCategories_args (iprot : Protocol.t) =
  let _str12668 = new getCategories_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12669,_id12670) = iprot#readFieldBegin in
        if _t12669 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12670 with 
          | 1 -> (if _t12669 = Protocol.T_STRUCT then
              _str12668#set_request (read_getSquareCategoriesRequest iprot)
            else
              iprot#skip _t12669)
          | _ -> iprot#skip _t12669);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12668

class getCategories_result =
object (self)
  val mutable _success : getSquareCategoriesResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCategories_result.success") | Some _x12671 -> _x12671
  method set_success _x12671 = _success <- Some _x12671
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCategories_result.e") | Some _x12672 -> _x12672
  method set_e _x12672 = _e <- Some _x12672
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCategories_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCategories_result (iprot : Protocol.t) =
  let _str12675 = new getCategories_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12676,_id12677) = iprot#readFieldBegin in
        if _t12676 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12677 with 
          | 0 -> (if _t12676 = Protocol.T_STRUCT then
              _str12675#set_success (read_getSquareCategoriesResponse iprot)
            else
              iprot#skip _t12676)
          | 1 -> (if _t12676 = Protocol.T_STRUCT then
              _str12675#set_e (read_squareException iprot)
            else
              iprot#skip _t12676)
          | _ -> iprot#skip _t12676);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12675

class searchSquareMembers_args =
object (self)
  val mutable _request : searchSquareMembersRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "searchSquareMembers_args.request") | Some _x12678 -> _x12678
  method set_request _x12678 = _request <- Some _x12678
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "searchSquareMembers_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_searchSquareMembers_args (iprot : Protocol.t) =
  let _str12681 = new searchSquareMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12682,_id12683) = iprot#readFieldBegin in
        if _t12682 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12683 with 
          | 1 -> (if _t12682 = Protocol.T_STRUCT then
              _str12681#set_request (read_searchSquareMembersRequest iprot)
            else
              iprot#skip _t12682)
          | _ -> iprot#skip _t12682);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12681

class searchSquareMembers_result =
object (self)
  val mutable _success : searchSquareMembersResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "searchSquareMembers_result.success") | Some _x12684 -> _x12684
  method set_success _x12684 = _success <- Some _x12684
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "searchSquareMembers_result.e") | Some _x12685 -> _x12685
  method set_e _x12685 = _e <- Some _x12685
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "searchSquareMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_searchSquareMembers_result (iprot : Protocol.t) =
  let _str12688 = new searchSquareMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12689,_id12690) = iprot#readFieldBegin in
        if _t12689 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12690 with 
          | 0 -> (if _t12689 = Protocol.T_STRUCT then
              _str12688#set_success (read_searchSquareMembersResponse iprot)
            else
              iprot#skip _t12689)
          | 1 -> (if _t12689 = Protocol.T_STRUCT then
              _str12688#set_e (read_squareException iprot)
            else
              iprot#skip _t12689)
          | _ -> iprot#skip _t12689);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12688

class fetchSquareChatEvents_args =
object (self)
  val mutable _request : fetchSquareChatEventsRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "fetchSquareChatEvents_args.request") | Some _x12691 -> _x12691
  method set_request _x12691 = _request <- Some _x12691
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchSquareChatEvents_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchSquareChatEvents_args (iprot : Protocol.t) =
  let _str12694 = new fetchSquareChatEvents_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12695,_id12696) = iprot#readFieldBegin in
        if _t12695 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12696 with 
          | 1 -> (if _t12695 = Protocol.T_STRUCT then
              _str12694#set_request (read_fetchSquareChatEventsRequest iprot)
            else
              iprot#skip _t12695)
          | _ -> iprot#skip _t12695);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12694

class fetchSquareChatEvents_result =
object (self)
  val mutable _success : fetchSquareChatEventsResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "fetchSquareChatEvents_result.success") | Some _x12697 -> _x12697
  method set_success _x12697 = _success <- Some _x12697
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "fetchSquareChatEvents_result.e") | Some _x12698 -> _x12698
  method set_e _x12698 = _e <- Some _x12698
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchSquareChatEvents_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchSquareChatEvents_result (iprot : Protocol.t) =
  let _str12701 = new fetchSquareChatEvents_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12702,_id12703) = iprot#readFieldBegin in
        if _t12702 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12703 with 
          | 0 -> (if _t12702 = Protocol.T_STRUCT then
              _str12701#set_success (read_fetchSquareChatEventsResponse iprot)
            else
              iprot#skip _t12702)
          | 1 -> (if _t12702 = Protocol.T_STRUCT then
              _str12701#set_e (read_squareException iprot)
            else
              iprot#skip _t12702)
          | _ -> iprot#skip _t12702);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12701

class fetchMyEvents_args =
object (self)
  val mutable _request : fetchMyEventsRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "fetchMyEvents_args.request") | Some _x12704 -> _x12704
  method set_request _x12704 = _request <- Some _x12704
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchMyEvents_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchMyEvents_args (iprot : Protocol.t) =
  let _str12707 = new fetchMyEvents_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12708,_id12709) = iprot#readFieldBegin in
        if _t12708 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12709 with 
          | 1 -> (if _t12708 = Protocol.T_STRUCT then
              _str12707#set_request (read_fetchMyEventsRequest iprot)
            else
              iprot#skip _t12708)
          | _ -> iprot#skip _t12708);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12707

class fetchMyEvents_result =
object (self)
  val mutable _success : fetchMyEventsResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "fetchMyEvents_result.success") | Some _x12710 -> _x12710
  method set_success _x12710 = _success <- Some _x12710
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "fetchMyEvents_result.e") | Some _x12711 -> _x12711
  method set_e _x12711 = _e <- Some _x12711
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchMyEvents_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchMyEvents_result (iprot : Protocol.t) =
  let _str12714 = new fetchMyEvents_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12715,_id12716) = iprot#readFieldBegin in
        if _t12715 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12716 with 
          | 0 -> (if _t12715 = Protocol.T_STRUCT then
              _str12714#set_success (read_fetchMyEventsResponse iprot)
            else
              iprot#skip _t12715)
          | 1 -> (if _t12715 = Protocol.T_STRUCT then
              _str12714#set_e (read_squareException iprot)
            else
              iprot#skip _t12715)
          | _ -> iprot#skip _t12715);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12714

class markAsRead_args =
object (self)
  val mutable _request : markAsReadRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "markAsRead_args.request") | Some _x12717 -> _x12717
  method set_request _x12717 = _request <- Some _x12717
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "markAsRead_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_markAsRead_args (iprot : Protocol.t) =
  let _str12720 = new markAsRead_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12721,_id12722) = iprot#readFieldBegin in
        if _t12721 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12722 with 
          | 1 -> (if _t12721 = Protocol.T_STRUCT then
              _str12720#set_request (read_markAsReadRequest iprot)
            else
              iprot#skip _t12721)
          | _ -> iprot#skip _t12721);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12720

class markAsRead_result =
object (self)
  val mutable _success : markAsReadResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "markAsRead_result.success") | Some _x12723 -> _x12723
  method set_success _x12723 = _success <- Some _x12723
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "markAsRead_result.e") | Some _x12724 -> _x12724
  method set_e _x12724 = _e <- Some _x12724
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "markAsRead_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_markAsRead_result (iprot : Protocol.t) =
  let _str12727 = new markAsRead_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12728,_id12729) = iprot#readFieldBegin in
        if _t12728 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12729 with 
          | 0 -> (if _t12728 = Protocol.T_STRUCT then
              _str12727#set_success (read_markAsReadResponse iprot)
            else
              iprot#skip _t12728)
          | 1 -> (if _t12728 = Protocol.T_STRUCT then
              _str12727#set_e (read_squareException iprot)
            else
              iprot#skip _t12728)
          | _ -> iprot#skip _t12728);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12727

class getSquareAuthority_args =
object (self)
  val mutable _request : getSquareAuthorityRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareAuthority_args.request") | Some _x12730 -> _x12730
  method set_request _x12730 = _request <- Some _x12730
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareAuthority_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareAuthority_args (iprot : Protocol.t) =
  let _str12733 = new getSquareAuthority_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12734,_id12735) = iprot#readFieldBegin in
        if _t12734 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12735 with 
          | 1 -> (if _t12734 = Protocol.T_STRUCT then
              _str12733#set_request (read_getSquareAuthorityRequest iprot)
            else
              iprot#skip _t12734)
          | _ -> iprot#skip _t12734);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12733

class getSquareAuthority_result =
object (self)
  val mutable _success : getSquareAuthorityResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareAuthority_result.success") | Some _x12736 -> _x12736
  method set_success _x12736 = _success <- Some _x12736
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareAuthority_result.e") | Some _x12737 -> _x12737
  method set_e _x12737 = _e <- Some _x12737
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareAuthority_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareAuthority_result (iprot : Protocol.t) =
  let _str12740 = new getSquareAuthority_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12741,_id12742) = iprot#readFieldBegin in
        if _t12741 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12742 with 
          | 0 -> (if _t12741 = Protocol.T_STRUCT then
              _str12740#set_success (read_getSquareAuthorityResponse iprot)
            else
              iprot#skip _t12741)
          | 1 -> (if _t12741 = Protocol.T_STRUCT then
              _str12740#set_e (read_squareException iprot)
            else
              iprot#skip _t12741)
          | _ -> iprot#skip _t12741);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12740

class sendMessage_args =
object (self)
  val mutable _request : sendMessageRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "sendMessage_args.request") | Some _x12743 -> _x12743
  method set_request _x12743 = _request <- Some _x12743
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessage_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessage_args (iprot : Protocol.t) =
  let _str12746 = new sendMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12747,_id12748) = iprot#readFieldBegin in
        if _t12747 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12748 with 
          | 1 -> (if _t12747 = Protocol.T_STRUCT then
              _str12746#set_request (read_sendMessageRequest iprot)
            else
              iprot#skip _t12747)
          | _ -> iprot#skip _t12747);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12746

class sendMessage_result =
object (self)
  val mutable _success : sendMessageResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendMessage_result.success") | Some _x12749 -> _x12749
  method set_success _x12749 = _success <- Some _x12749
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendMessage_result.e") | Some _x12750 -> _x12750
  method set_e _x12750 = _e <- Some _x12750
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessage_result (iprot : Protocol.t) =
  let _str12753 = new sendMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12754,_id12755) = iprot#readFieldBegin in
        if _t12754 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12755 with 
          | 0 -> (if _t12754 = Protocol.T_STRUCT then
              _str12753#set_success (read_sendMessageResponse iprot)
            else
              iprot#skip _t12754)
          | 1 -> (if _t12754 = Protocol.T_STRUCT then
              _str12753#set_e (read_squareException iprot)
            else
              iprot#skip _t12754)
          | _ -> iprot#skip _t12754);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12753

class leaveSquare_args =
object (self)
  val mutable _request : leaveSquareRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "leaveSquare_args.request") | Some _x12756 -> _x12756
  method set_request _x12756 = _request <- Some _x12756
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "leaveSquare_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_leaveSquare_args (iprot : Protocol.t) =
  let _str12759 = new leaveSquare_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12760,_id12761) = iprot#readFieldBegin in
        if _t12760 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12761 with 
          | 1 -> (if _t12760 = Protocol.T_STRUCT then
              _str12759#set_request (read_leaveSquareRequest iprot)
            else
              iprot#skip _t12760)
          | _ -> iprot#skip _t12760);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12759

class leaveSquare_result =
object (self)
  val mutable _success : leaveSquareResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "leaveSquare_result.success") | Some _x12762 -> _x12762
  method set_success _x12762 = _success <- Some _x12762
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "leaveSquare_result.e") | Some _x12763 -> _x12763
  method set_e _x12763 = _e <- Some _x12763
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "leaveSquare_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_leaveSquare_result (iprot : Protocol.t) =
  let _str12766 = new leaveSquare_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12767,_id12768) = iprot#readFieldBegin in
        if _t12767 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12768 with 
          | 0 -> (if _t12767 = Protocol.T_STRUCT then
              _str12766#set_success (read_leaveSquareResponse iprot)
            else
              iprot#skip _t12767)
          | 1 -> (if _t12767 = Protocol.T_STRUCT then
              _str12766#set_e (read_squareException iprot)
            else
              iprot#skip _t12767)
          | _ -> iprot#skip _t12767);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12766

class leaveSquareChat_args =
object (self)
  val mutable _request : leaveSquareChatRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "leaveSquareChat_args.request") | Some _x12769 -> _x12769
  method set_request _x12769 = _request <- Some _x12769
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "leaveSquareChat_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_leaveSquareChat_args (iprot : Protocol.t) =
  let _str12772 = new leaveSquareChat_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12773,_id12774) = iprot#readFieldBegin in
        if _t12773 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12774 with 
          | 1 -> (if _t12773 = Protocol.T_STRUCT then
              _str12772#set_request (read_leaveSquareChatRequest iprot)
            else
              iprot#skip _t12773)
          | _ -> iprot#skip _t12773);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12772

class leaveSquareChat_result =
object (self)
  val mutable _success : leaveSquareChatResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "leaveSquareChat_result.success") | Some _x12775 -> _x12775
  method set_success _x12775 = _success <- Some _x12775
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "leaveSquareChat_result.e") | Some _x12776 -> _x12776
  method set_e _x12776 = _e <- Some _x12776
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "leaveSquareChat_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_leaveSquareChat_result (iprot : Protocol.t) =
  let _str12779 = new leaveSquareChat_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12780,_id12781) = iprot#readFieldBegin in
        if _t12780 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12781 with 
          | 0 -> (if _t12780 = Protocol.T_STRUCT then
              _str12779#set_success (read_leaveSquareChatResponse iprot)
            else
              iprot#skip _t12780)
          | 1 -> (if _t12780 = Protocol.T_STRUCT then
              _str12779#set_e (read_squareException iprot)
            else
              iprot#skip _t12780)
          | _ -> iprot#skip _t12780);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12779

class joinSquareChat_args =
object (self)
  val mutable _request : joinSquareChatRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "joinSquareChat_args.request") | Some _x12782 -> _x12782
  method set_request _x12782 = _request <- Some _x12782
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "joinSquareChat_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_joinSquareChat_args (iprot : Protocol.t) =
  let _str12785 = new joinSquareChat_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12786,_id12787) = iprot#readFieldBegin in
        if _t12786 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12787 with 
          | 1 -> (if _t12786 = Protocol.T_STRUCT then
              _str12785#set_request (read_joinSquareChatRequest iprot)
            else
              iprot#skip _t12786)
          | _ -> iprot#skip _t12786);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12785

class joinSquareChat_result =
object (self)
  val mutable _success : joinSquareChatResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "joinSquareChat_result.success") | Some _x12788 -> _x12788
  method set_success _x12788 = _success <- Some _x12788
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "joinSquareChat_result.e") | Some _x12789 -> _x12789
  method set_e _x12789 = _e <- Some _x12789
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "joinSquareChat_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_joinSquareChat_result (iprot : Protocol.t) =
  let _str12792 = new joinSquareChat_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12793,_id12794) = iprot#readFieldBegin in
        if _t12793 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12794 with 
          | 0 -> (if _t12793 = Protocol.T_STRUCT then
              _str12792#set_success (read_joinSquareChatResponse iprot)
            else
              iprot#skip _t12793)
          | 1 -> (if _t12793 = Protocol.T_STRUCT then
              _str12792#set_e (read_squareException iprot)
            else
              iprot#skip _t12793)
          | _ -> iprot#skip _t12793);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12792

class joinSquare_args =
object (self)
  val mutable _request : joinSquareRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "joinSquare_args.request") | Some _x12795 -> _x12795
  method set_request _x12795 = _request <- Some _x12795
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "joinSquare_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_joinSquare_args (iprot : Protocol.t) =
  let _str12798 = new joinSquare_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12799,_id12800) = iprot#readFieldBegin in
        if _t12799 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12800 with 
          | 1 -> (if _t12799 = Protocol.T_STRUCT then
              _str12798#set_request (read_joinSquareRequest iprot)
            else
              iprot#skip _t12799)
          | _ -> iprot#skip _t12799);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12798

class joinSquare_result =
object (self)
  val mutable _success : joinSquareResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "joinSquare_result.success") | Some _x12801 -> _x12801
  method set_success _x12801 = _success <- Some _x12801
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "joinSquare_result.e") | Some _x12802 -> _x12802
  method set_e _x12802 = _e <- Some _x12802
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "joinSquare_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_joinSquare_result (iprot : Protocol.t) =
  let _str12805 = new joinSquare_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12806,_id12807) = iprot#readFieldBegin in
        if _t12806 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12807 with 
          | 0 -> (if _t12806 = Protocol.T_STRUCT then
              _str12805#set_success (read_joinSquareResponse iprot)
            else
              iprot#skip _t12806)
          | 1 -> (if _t12806 = Protocol.T_STRUCT then
              _str12805#set_e (read_squareException iprot)
            else
              iprot#skip _t12806)
          | _ -> iprot#skip _t12806);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12805

class inviteToSquare_args =
object (self)
  val mutable _request : inviteToSquareRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "inviteToSquare_args.request") | Some _x12808 -> _x12808
  method set_request _x12808 = _request <- Some _x12808
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteToSquare_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteToSquare_args (iprot : Protocol.t) =
  let _str12811 = new inviteToSquare_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12812,_id12813) = iprot#readFieldBegin in
        if _t12812 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12813 with 
          | 1 -> (if _t12812 = Protocol.T_STRUCT then
              _str12811#set_request (read_inviteToSquareRequest iprot)
            else
              iprot#skip _t12812)
          | _ -> iprot#skip _t12812);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12811

class inviteToSquare_result =
object (self)
  val mutable _success : inviteToSquareResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "inviteToSquare_result.success") | Some _x12814 -> _x12814
  method set_success _x12814 = _success <- Some _x12814
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "inviteToSquare_result.e") | Some _x12815 -> _x12815
  method set_e _x12815 = _e <- Some _x12815
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteToSquare_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteToSquare_result (iprot : Protocol.t) =
  let _str12818 = new inviteToSquare_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12819,_id12820) = iprot#readFieldBegin in
        if _t12819 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12820 with 
          | 0 -> (if _t12819 = Protocol.T_STRUCT then
              _str12818#set_success (read_inviteToSquareResponse iprot)
            else
              iprot#skip _t12819)
          | 1 -> (if _t12819 = Protocol.T_STRUCT then
              _str12818#set_e (read_squareException iprot)
            else
              iprot#skip _t12819)
          | _ -> iprot#skip _t12819);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12818

class inviteToSquareChat_args =
object (self)
  val mutable _request : inviteToSquareChatRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "inviteToSquareChat_args.request") | Some _x12821 -> _x12821
  method set_request _x12821 = _request <- Some _x12821
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteToSquareChat_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteToSquareChat_args (iprot : Protocol.t) =
  let _str12824 = new inviteToSquareChat_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12825,_id12826) = iprot#readFieldBegin in
        if _t12825 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12826 with 
          | 1 -> (if _t12825 = Protocol.T_STRUCT then
              _str12824#set_request (read_inviteToSquareChatRequest iprot)
            else
              iprot#skip _t12825)
          | _ -> iprot#skip _t12825);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12824

class inviteToSquareChat_result =
object (self)
  val mutable _success : inviteToSquareChatResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "inviteToSquareChat_result.success") | Some _x12827 -> _x12827
  method set_success _x12827 = _success <- Some _x12827
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "inviteToSquareChat_result.e") | Some _x12828 -> _x12828
  method set_e _x12828 = _e <- Some _x12828
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteToSquareChat_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteToSquareChat_result (iprot : Protocol.t) =
  let _str12831 = new inviteToSquareChat_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12832,_id12833) = iprot#readFieldBegin in
        if _t12832 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12833 with 
          | 0 -> (if _t12832 = Protocol.T_STRUCT then
              _str12831#set_success (read_inviteToSquareChatResponse iprot)
            else
              iprot#skip _t12832)
          | 1 -> (if _t12832 = Protocol.T_STRUCT then
              _str12831#set_e (read_squareException iprot)
            else
              iprot#skip _t12832)
          | _ -> iprot#skip _t12832);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12831

class getSquareMember_args =
object (self)
  val mutable _request : getSquareMemberRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareMember_args.request") | Some _x12834 -> _x12834
  method set_request _x12834 = _request <- Some _x12834
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareMember_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareMember_args (iprot : Protocol.t) =
  let _str12837 = new getSquareMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12838,_id12839) = iprot#readFieldBegin in
        if _t12838 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12839 with 
          | 1 -> (if _t12838 = Protocol.T_STRUCT then
              _str12837#set_request (read_getSquareMemberRequest iprot)
            else
              iprot#skip _t12838)
          | _ -> iprot#skip _t12838);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12837

class getSquareMember_result =
object (self)
  val mutable _success : getSquareMemberResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareMember_result.success") | Some _x12840 -> _x12840
  method set_success _x12840 = _success <- Some _x12840
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareMember_result.e") | Some _x12841 -> _x12841
  method set_e _x12841 = _e <- Some _x12841
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareMember_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareMember_result (iprot : Protocol.t) =
  let _str12844 = new getSquareMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12845,_id12846) = iprot#readFieldBegin in
        if _t12845 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12846 with 
          | 0 -> (if _t12845 = Protocol.T_STRUCT then
              _str12844#set_success (read_getSquareMemberResponse iprot)
            else
              iprot#skip _t12845)
          | 1 -> (if _t12845 = Protocol.T_STRUCT then
              _str12844#set_e (read_squareException iprot)
            else
              iprot#skip _t12845)
          | _ -> iprot#skip _t12845);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12844

class getSquareMembers_args =
object (self)
  val mutable _request : getSquareMembersRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareMembers_args.request") | Some _x12847 -> _x12847
  method set_request _x12847 = _request <- Some _x12847
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareMembers_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareMembers_args (iprot : Protocol.t) =
  let _str12850 = new getSquareMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12851,_id12852) = iprot#readFieldBegin in
        if _t12851 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12852 with 
          | 1 -> (if _t12851 = Protocol.T_STRUCT then
              _str12850#set_request (read_getSquareMembersRequest iprot)
            else
              iprot#skip _t12851)
          | _ -> iprot#skip _t12851);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12850

class getSquareMembers_result =
object (self)
  val mutable _success : getSquareMembersResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareMembers_result.success") | Some _x12853 -> _x12853
  method set_success _x12853 = _success <- Some _x12853
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareMembers_result.e") | Some _x12854 -> _x12854
  method set_e _x12854 = _e <- Some _x12854
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareMembers_result (iprot : Protocol.t) =
  let _str12857 = new getSquareMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12858,_id12859) = iprot#readFieldBegin in
        if _t12858 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12859 with 
          | 0 -> (if _t12858 = Protocol.T_STRUCT then
              _str12857#set_success (read_getSquareMembersResponse iprot)
            else
              iprot#skip _t12858)
          | 1 -> (if _t12858 = Protocol.T_STRUCT then
              _str12857#set_e (read_squareException iprot)
            else
              iprot#skip _t12858)
          | _ -> iprot#skip _t12858);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12857

class getSquareMemberRelation_args =
object (self)
  val mutable _request : getSquareMemberRelationRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareMemberRelation_args.request") | Some _x12860 -> _x12860
  method set_request _x12860 = _request <- Some _x12860
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareMemberRelation_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareMemberRelation_args (iprot : Protocol.t) =
  let _str12863 = new getSquareMemberRelation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12864,_id12865) = iprot#readFieldBegin in
        if _t12864 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12865 with 
          | 1 -> (if _t12864 = Protocol.T_STRUCT then
              _str12863#set_request (read_getSquareMemberRelationRequest iprot)
            else
              iprot#skip _t12864)
          | _ -> iprot#skip _t12864);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12863

class getSquareMemberRelation_result =
object (self)
  val mutable _success : getSquareMemberRelationResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareMemberRelation_result.success") | Some _x12866 -> _x12866
  method set_success _x12866 = _success <- Some _x12866
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareMemberRelation_result.e") | Some _x12867 -> _x12867
  method set_e _x12867 = _e <- Some _x12867
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareMemberRelation_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareMemberRelation_result (iprot : Protocol.t) =
  let _str12870 = new getSquareMemberRelation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12871,_id12872) = iprot#readFieldBegin in
        if _t12871 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12872 with 
          | 0 -> (if _t12871 = Protocol.T_STRUCT then
              _str12870#set_success (read_getSquareMemberRelationResponse iprot)
            else
              iprot#skip _t12871)
          | 1 -> (if _t12871 = Protocol.T_STRUCT then
              _str12870#set_e (read_squareException iprot)
            else
              iprot#skip _t12871)
          | _ -> iprot#skip _t12871);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12870

class getSquareMemberRelations_args =
object (self)
  val mutable _request : getSquareMemberRelationsRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareMemberRelations_args.request") | Some _x12873 -> _x12873
  method set_request _x12873 = _request <- Some _x12873
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareMemberRelations_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareMemberRelations_args (iprot : Protocol.t) =
  let _str12876 = new getSquareMemberRelations_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12877,_id12878) = iprot#readFieldBegin in
        if _t12877 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12878 with 
          | 1 -> (if _t12877 = Protocol.T_STRUCT then
              _str12876#set_request (read_getSquareMemberRelationsRequest iprot)
            else
              iprot#skip _t12877)
          | _ -> iprot#skip _t12877);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12876

class getSquareMemberRelations_result =
object (self)
  val mutable _success : getSquareMemberRelationsResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareMemberRelations_result.success") | Some _x12879 -> _x12879
  method set_success _x12879 = _success <- Some _x12879
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareMemberRelations_result.e") | Some _x12880 -> _x12880
  method set_e _x12880 = _e <- Some _x12880
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareMemberRelations_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareMemberRelations_result (iprot : Protocol.t) =
  let _str12883 = new getSquareMemberRelations_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12884,_id12885) = iprot#readFieldBegin in
        if _t12884 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12885 with 
          | 0 -> (if _t12884 = Protocol.T_STRUCT then
              _str12883#set_success (read_getSquareMemberRelationsResponse iprot)
            else
              iprot#skip _t12884)
          | 1 -> (if _t12884 = Protocol.T_STRUCT then
              _str12883#set_e (read_squareException iprot)
            else
              iprot#skip _t12884)
          | _ -> iprot#skip _t12884);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12883

class getSquareChatMembers_args =
object (self)
  val mutable _request : getSquareChatMembersRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareChatMembers_args.request") | Some _x12886 -> _x12886
  method set_request _x12886 = _request <- Some _x12886
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareChatMembers_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareChatMembers_args (iprot : Protocol.t) =
  let _str12889 = new getSquareChatMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12890,_id12891) = iprot#readFieldBegin in
        if _t12890 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12891 with 
          | 1 -> (if _t12890 = Protocol.T_STRUCT then
              _str12889#set_request (read_getSquareChatMembersRequest iprot)
            else
              iprot#skip _t12890)
          | _ -> iprot#skip _t12890);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12889

class getSquareChatMembers_result =
object (self)
  val mutable _success : getSquareChatMembersResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareChatMembers_result.success") | Some _x12892 -> _x12892
  method set_success _x12892 = _success <- Some _x12892
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareChatMembers_result.e") | Some _x12893 -> _x12893
  method set_e _x12893 = _e <- Some _x12893
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareChatMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareChatMembers_result (iprot : Protocol.t) =
  let _str12896 = new getSquareChatMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12897,_id12898) = iprot#readFieldBegin in
        if _t12897 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12898 with 
          | 0 -> (if _t12897 = Protocol.T_STRUCT then
              _str12896#set_success (read_getSquareChatMembersResponse iprot)
            else
              iprot#skip _t12897)
          | 1 -> (if _t12897 = Protocol.T_STRUCT then
              _str12896#set_e (read_squareException iprot)
            else
              iprot#skip _t12897)
          | _ -> iprot#skip _t12897);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12896

class getSquareChatStatus_args =
object (self)
  val mutable _request : getSquareChatStatusRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareChatStatus_args.request") | Some _x12899 -> _x12899
  method set_request _x12899 = _request <- Some _x12899
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareChatStatus_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareChatStatus_args (iprot : Protocol.t) =
  let _str12902 = new getSquareChatStatus_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12903,_id12904) = iprot#readFieldBegin in
        if _t12903 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12904 with 
          | 1 -> (if _t12903 = Protocol.T_STRUCT then
              _str12902#set_request (read_getSquareChatStatusRequest iprot)
            else
              iprot#skip _t12903)
          | _ -> iprot#skip _t12903);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12902

class getSquareChatStatus_result =
object (self)
  val mutable _success : getSquareChatStatusResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareChatStatus_result.success") | Some _x12905 -> _x12905
  method set_success _x12905 = _success <- Some _x12905
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareChatStatus_result.e") | Some _x12906 -> _x12906
  method set_e _x12906 = _e <- Some _x12906
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareChatStatus_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareChatStatus_result (iprot : Protocol.t) =
  let _str12909 = new getSquareChatStatus_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12910,_id12911) = iprot#readFieldBegin in
        if _t12910 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12911 with 
          | 0 -> (if _t12910 = Protocol.T_STRUCT then
              _str12909#set_success (read_getSquareChatStatusResponse iprot)
            else
              iprot#skip _t12910)
          | 1 -> (if _t12910 = Protocol.T_STRUCT then
              _str12909#set_e (read_squareException iprot)
            else
              iprot#skip _t12910)
          | _ -> iprot#skip _t12910);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12909

class getSquareChat_args =
object (self)
  val mutable _request : getSquareChatRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareChat_args.request") | Some _x12912 -> _x12912
  method set_request _x12912 = _request <- Some _x12912
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareChat_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareChat_args (iprot : Protocol.t) =
  let _str12915 = new getSquareChat_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12916,_id12917) = iprot#readFieldBegin in
        if _t12916 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12917 with 
          | 1 -> (if _t12916 = Protocol.T_STRUCT then
              _str12915#set_request (read_getSquareChatRequest iprot)
            else
              iprot#skip _t12916)
          | _ -> iprot#skip _t12916);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12915

class getSquareChat_result =
object (self)
  val mutable _success : getSquareChatResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareChat_result.success") | Some _x12918 -> _x12918
  method set_success _x12918 = _success <- Some _x12918
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareChat_result.e") | Some _x12919 -> _x12919
  method set_e _x12919 = _e <- Some _x12919
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareChat_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareChat_result (iprot : Protocol.t) =
  let _str12922 = new getSquareChat_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12923,_id12924) = iprot#readFieldBegin in
        if _t12923 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12924 with 
          | 0 -> (if _t12923 = Protocol.T_STRUCT then
              _str12922#set_success (read_getSquareChatResponse iprot)
            else
              iprot#skip _t12923)
          | 1 -> (if _t12923 = Protocol.T_STRUCT then
              _str12922#set_e (read_squareException iprot)
            else
              iprot#skip _t12923)
          | _ -> iprot#skip _t12923);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12922

class getSquare_args =
object (self)
  val mutable _request : getSquareRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquare_args.request") | Some _x12925 -> _x12925
  method set_request _x12925 = _request <- Some _x12925
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquare_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquare_args (iprot : Protocol.t) =
  let _str12928 = new getSquare_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12929,_id12930) = iprot#readFieldBegin in
        if _t12929 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12930 with 
          | 1 -> (if _t12929 = Protocol.T_STRUCT then
              _str12928#set_request (read_getSquareRequest iprot)
            else
              iprot#skip _t12929)
          | _ -> iprot#skip _t12929);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12928

class getSquare_result =
object (self)
  val mutable _success : getSquareResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquare_result.success") | Some _x12931 -> _x12931
  method set_success _x12931 = _success <- Some _x12931
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquare_result.e") | Some _x12932 -> _x12932
  method set_e _x12932 = _e <- Some _x12932
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquare_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquare_result (iprot : Protocol.t) =
  let _str12935 = new getSquare_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12936,_id12937) = iprot#readFieldBegin in
        if _t12936 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12937 with 
          | 0 -> (if _t12936 = Protocol.T_STRUCT then
              _str12935#set_success (read_getSquareResponse iprot)
            else
              iprot#skip _t12936)
          | 1 -> (if _t12936 = Protocol.T_STRUCT then
              _str12935#set_e (read_squareException iprot)
            else
              iprot#skip _t12936)
          | _ -> iprot#skip _t12936);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12935

class getJoinedSquares_args =
object (self)
  val mutable _request : getJoinedSquaresRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getJoinedSquares_args.request") | Some _x12938 -> _x12938
  method set_request _x12938 = _request <- Some _x12938
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinedSquares_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinedSquares_args (iprot : Protocol.t) =
  let _str12941 = new getJoinedSquares_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12942,_id12943) = iprot#readFieldBegin in
        if _t12942 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12943 with 
          | 1 -> (if _t12942 = Protocol.T_STRUCT then
              _str12941#set_request (read_getJoinedSquaresRequest iprot)
            else
              iprot#skip _t12942)
          | _ -> iprot#skip _t12942);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12941

class getJoinedSquares_result =
object (self)
  val mutable _success : getJoinedSquaresResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getJoinedSquares_result.success") | Some _x12944 -> _x12944
  method set_success _x12944 = _success <- Some _x12944
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getJoinedSquares_result.e") | Some _x12945 -> _x12945
  method set_e _x12945 = _e <- Some _x12945
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinedSquares_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinedSquares_result (iprot : Protocol.t) =
  let _str12948 = new getJoinedSquares_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12949,_id12950) = iprot#readFieldBegin in
        if _t12949 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12950 with 
          | 0 -> (if _t12949 = Protocol.T_STRUCT then
              _str12948#set_success (read_getJoinedSquaresResponse iprot)
            else
              iprot#skip _t12949)
          | 1 -> (if _t12949 = Protocol.T_STRUCT then
              _str12948#set_e (read_squareException iprot)
            else
              iprot#skip _t12949)
          | _ -> iprot#skip _t12949);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12948

class getJoinedSquareChats_args =
object (self)
  val mutable _request : getJoinedSquareChatsRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getJoinedSquareChats_args.request") | Some _x12951 -> _x12951
  method set_request _x12951 = _request <- Some _x12951
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinedSquareChats_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinedSquareChats_args (iprot : Protocol.t) =
  let _str12954 = new getJoinedSquareChats_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12955,_id12956) = iprot#readFieldBegin in
        if _t12955 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12956 with 
          | 1 -> (if _t12955 = Protocol.T_STRUCT then
              _str12954#set_request (read_getJoinedSquareChatsRequest iprot)
            else
              iprot#skip _t12955)
          | _ -> iprot#skip _t12955);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12954

class getJoinedSquareChats_result =
object (self)
  val mutable _success : getJoinedSquareChatsResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getJoinedSquareChats_result.success") | Some _x12957 -> _x12957
  method set_success _x12957 = _success <- Some _x12957
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getJoinedSquareChats_result.e") | Some _x12958 -> _x12958
  method set_e _x12958 = _e <- Some _x12958
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinedSquareChats_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinedSquareChats_result (iprot : Protocol.t) =
  let _str12961 = new getJoinedSquareChats_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12962,_id12963) = iprot#readFieldBegin in
        if _t12962 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12963 with 
          | 0 -> (if _t12962 = Protocol.T_STRUCT then
              _str12961#set_success (read_getJoinedSquareChatsResponse iprot)
            else
              iprot#skip _t12962)
          | 1 -> (if _t12962 = Protocol.T_STRUCT then
              _str12961#set_e (read_squareException iprot)
            else
              iprot#skip _t12962)
          | _ -> iprot#skip _t12962);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12961

class approveSquareMembers_args =
object (self)
  val mutable _request : approveSquareMembersRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "approveSquareMembers_args.request") | Some _x12964 -> _x12964
  method set_request _x12964 = _request <- Some _x12964
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "approveSquareMembers_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_approveSquareMembers_args (iprot : Protocol.t) =
  let _str12967 = new approveSquareMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12968,_id12969) = iprot#readFieldBegin in
        if _t12968 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12969 with 
          | 1 -> (if _t12968 = Protocol.T_STRUCT then
              _str12967#set_request (read_approveSquareMembersRequest iprot)
            else
              iprot#skip _t12968)
          | _ -> iprot#skip _t12968);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12967

class approveSquareMembers_result =
object (self)
  val mutable _success : approveSquareMembersResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "approveSquareMembers_result.success") | Some _x12970 -> _x12970
  method set_success _x12970 = _success <- Some _x12970
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "approveSquareMembers_result.e") | Some _x12971 -> _x12971
  method set_e _x12971 = _e <- Some _x12971
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "approveSquareMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_approveSquareMembers_result (iprot : Protocol.t) =
  let _str12974 = new approveSquareMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12975,_id12976) = iprot#readFieldBegin in
        if _t12975 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12976 with 
          | 0 -> (if _t12975 = Protocol.T_STRUCT then
              _str12974#set_success (read_approveSquareMembersResponse iprot)
            else
              iprot#skip _t12975)
          | 1 -> (if _t12975 = Protocol.T_STRUCT then
              _str12974#set_e (read_squareException iprot)
            else
              iprot#skip _t12975)
          | _ -> iprot#skip _t12975);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12974

class createSquareChat_args =
object (self)
  val mutable _request : createSquareChatRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "createSquareChat_args.request") | Some _x12977 -> _x12977
  method set_request _x12977 = _request <- Some _x12977
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createSquareChat_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createSquareChat_args (iprot : Protocol.t) =
  let _str12980 = new createSquareChat_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12981,_id12982) = iprot#readFieldBegin in
        if _t12981 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12982 with 
          | 1 -> (if _t12981 = Protocol.T_STRUCT then
              _str12980#set_request (read_createSquareChatRequest iprot)
            else
              iprot#skip _t12981)
          | _ -> iprot#skip _t12981);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12980

class createSquareChat_result =
object (self)
  val mutable _success : createSquareChatResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createSquareChat_result.success") | Some _x12983 -> _x12983
  method set_success _x12983 = _success <- Some _x12983
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createSquareChat_result.e") | Some _x12984 -> _x12984
  method set_e _x12984 = _e <- Some _x12984
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createSquareChat_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createSquareChat_result (iprot : Protocol.t) =
  let _str12987 = new createSquareChat_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12988,_id12989) = iprot#readFieldBegin in
        if _t12988 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12989 with 
          | 0 -> (if _t12988 = Protocol.T_STRUCT then
              _str12987#set_success (read_createSquareChatResponse iprot)
            else
              iprot#skip _t12988)
          | 1 -> (if _t12988 = Protocol.T_STRUCT then
              _str12987#set_e (read_squareException iprot)
            else
              iprot#skip _t12988)
          | _ -> iprot#skip _t12988);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12987

class createSquare_args =
object (self)
  val mutable _request : createSquareRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "createSquare_args.request") | Some _x12990 -> _x12990
  method set_request _x12990 = _request <- Some _x12990
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createSquare_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createSquare_args (iprot : Protocol.t) =
  let _str12993 = new createSquare_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12994,_id12995) = iprot#readFieldBegin in
        if _t12994 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12995 with 
          | 1 -> (if _t12994 = Protocol.T_STRUCT then
              _str12993#set_request (read_createSquareRequest iprot)
            else
              iprot#skip _t12994)
          | _ -> iprot#skip _t12994);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12993

class createSquare_result =
object (self)
  val mutable _success : createSquareResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createSquare_result.success") | Some _x12996 -> _x12996
  method set_success _x12996 = _success <- Some _x12996
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createSquare_result.e") | Some _x12997 -> _x12997
  method set_e _x12997 = _e <- Some _x12997
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createSquare_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createSquare_result (iprot : Protocol.t) =
  let _str13000 = new createSquare_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t13001,_id13002) = iprot#readFieldBegin in
        if _t13001 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id13002 with 
          | 0 -> (if _t13001 = Protocol.T_STRUCT then
              _str13000#set_success (read_createSquareResponse iprot)
            else
              iprot#skip _t13001)
          | 1 -> (if _t13001 = Protocol.T_STRUCT then
              _str13000#set_e (read_squareException iprot)
            else
              iprot#skip _t13001)
          | _ -> iprot#skip _t13001);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str13000

class deleteSquareChat_args =
object (self)
  val mutable _request : deleteSquareChatRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "deleteSquareChat_args.request") | Some _x13003 -> _x13003
  method set_request _x13003 = _request <- Some _x13003
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteSquareChat_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteSquareChat_args (iprot : Protocol.t) =
  let _str13006 = new deleteSquareChat_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t13007,_id13008) = iprot#readFieldBegin in
        if _t13007 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id13008 with 
          | 1 -> (if _t13007 = Protocol.T_STRUCT then
              _str13006#set_request (read_deleteSquareChatRequest iprot)
            else
              iprot#skip _t13007)
          | _ -> iprot#skip _t13007);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str13006

class deleteSquareChat_result =
object (self)
  val mutable _success : deleteSquareChatResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "deleteSquareChat_result.success") | Some _x13009 -> _x13009
  method set_success _x13009 = _success <- Some _x13009
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "deleteSquareChat_result.e") | Some _x13010 -> _x13010
  method set_e _x13010 = _e <- Some _x13010
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteSquareChat_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteSquareChat_result (iprot : Protocol.t) =
  let _str13013 = new deleteSquareChat_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t13014,_id13015) = iprot#readFieldBegin in
        if _t13014 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id13015 with 
          | 0 -> (if _t13014 = Protocol.T_STRUCT then
              _str13013#set_success (read_deleteSquareChatResponse iprot)
            else
              iprot#skip _t13014)
          | 1 -> (if _t13014 = Protocol.T_STRUCT then
              _str13013#set_e (read_squareException iprot)
            else
              iprot#skip _t13014)
          | _ -> iprot#skip _t13014);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str13013

class deleteSquare_args =
object (self)
  val mutable _request : deleteSquareRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "deleteSquare_args.request") | Some _x13016 -> _x13016
  method set_request _x13016 = _request <- Some _x13016
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteSquare_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteSquare_args (iprot : Protocol.t) =
  let _str13019 = new deleteSquare_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t13020,_id13021) = iprot#readFieldBegin in
        if _t13020 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id13021 with 
          | 1 -> (if _t13020 = Protocol.T_STRUCT then
              _str13019#set_request (read_deleteSquareRequest iprot)
            else
              iprot#skip _t13020)
          | _ -> iprot#skip _t13020);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str13019

class deleteSquare_result =
object (self)
  val mutable _success : deleteSquareResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "deleteSquare_result.success") | Some _x13022 -> _x13022
  method set_success _x13022 = _success <- Some _x13022
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "deleteSquare_result.e") | Some _x13023 -> _x13023
  method set_e _x13023 = _e <- Some _x13023
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteSquare_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteSquare_result (iprot : Protocol.t) =
  let _str13026 = new deleteSquare_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t13027,_id13028) = iprot#readFieldBegin in
        if _t13027 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id13028 with 
          | 0 -> (if _t13027 = Protocol.T_STRUCT then
              _str13026#set_success (read_deleteSquareResponse iprot)
            else
              iprot#skip _t13027)
          | 1 -> (if _t13027 = Protocol.T_STRUCT then
              _str13026#set_e (read_squareException iprot)
            else
              iprot#skip _t13027)
          | _ -> iprot#skip _t13027);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str13026

class destroyMessage_args =
object (self)
  val mutable _request : destroyMessageRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "destroyMessage_args.request") | Some _x13029 -> _x13029
  method set_request _x13029 = _request <- Some _x13029
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "destroyMessage_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_destroyMessage_args (iprot : Protocol.t) =
  let _str13032 = new destroyMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t13033,_id13034) = iprot#readFieldBegin in
        if _t13033 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id13034 with 
          | 1 -> (if _t13033 = Protocol.T_STRUCT then
              _str13032#set_request (read_destroyMessageRequest iprot)
            else
              iprot#skip _t13033)
          | _ -> iprot#skip _t13033);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str13032

class destroyMessage_result =
object (self)
  val mutable _success : destroyMessageResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "destroyMessage_result.success") | Some _x13035 -> _x13035
  method set_success _x13035 = _success <- Some _x13035
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "destroyMessage_result.e") | Some _x13036 -> _x13036
  method set_e _x13036 = _e <- Some _x13036
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "destroyMessage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_destroyMessage_result (iprot : Protocol.t) =
  let _str13039 = new destroyMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t13040,_id13041) = iprot#readFieldBegin in
        if _t13040 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id13041 with 
          | 0 -> (if _t13040 = Protocol.T_STRUCT then
              _str13039#set_success (read_destroyMessageResponse iprot)
            else
              iprot#skip _t13040)
          | 1 -> (if _t13040 = Protocol.T_STRUCT then
              _str13039#set_e (read_squareException iprot)
            else
              iprot#skip _t13040)
          | _ -> iprot#skip _t13040);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str13039

class getJoinableSquareChats_args =
object (self)
  val mutable _request : getJoinableSquareChatsRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getJoinableSquareChats_args.request") | Some _x13042 -> _x13042
  method set_request _x13042 = _request <- Some _x13042
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinableSquareChats_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinableSquareChats_args (iprot : Protocol.t) =
  let _str13045 = new getJoinableSquareChats_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t13046,_id13047) = iprot#readFieldBegin in
        if _t13046 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id13047 with 
          | 1 -> (if _t13046 = Protocol.T_STRUCT then
              _str13045#set_request (read_getJoinableSquareChatsRequest iprot)
            else
              iprot#skip _t13046)
          | _ -> iprot#skip _t13046);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str13045

class getJoinableSquareChats_result =
object (self)
  val mutable _success : getJoinableSquareChatsResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getJoinableSquareChats_result.success") | Some _x13048 -> _x13048
  method set_success _x13048 = _success <- Some _x13048
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getJoinableSquareChats_result.e") | Some _x13049 -> _x13049
  method set_e _x13049 = _e <- Some _x13049
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinableSquareChats_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinableSquareChats_result (iprot : Protocol.t) =
  let _str13052 = new getJoinableSquareChats_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t13053,_id13054) = iprot#readFieldBegin in
        if _t13053 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id13054 with 
          | 0 -> (if _t13053 = Protocol.T_STRUCT then
              _str13052#set_success (read_getJoinableSquareChatsResponse iprot)
            else
              iprot#skip _t13053)
          | 1 -> (if _t13053 = Protocol.T_STRUCT then
              _str13052#set_e (read_squareException iprot)
            else
              iprot#skip _t13053)
          | _ -> iprot#skip _t13053);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str13052

class getInvitationTicketUrl_args =
object (self)
  val mutable _request : getInvitationTicketUrlRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getInvitationTicketUrl_args.request") | Some _x13055 -> _x13055
  method set_request _x13055 = _request <- Some _x13055
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getInvitationTicketUrl_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getInvitationTicketUrl_args (iprot : Protocol.t) =
  let _str13058 = new getInvitationTicketUrl_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t13059,_id13060) = iprot#readFieldBegin in
        if _t13059 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id13060 with 
          | 1 -> (if _t13059 = Protocol.T_STRUCT then
              _str13058#set_request (read_getInvitationTicketUrlRequest iprot)
            else
              iprot#skip _t13059)
          | _ -> iprot#skip _t13059);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str13058

class getInvitationTicketUrl_result =
object (self)
  val mutable _success : getInvitationTicketUrlResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getInvitationTicketUrl_result.success") | Some _x13061 -> _x13061
  method set_success _x13061 = _success <- Some _x13061
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getInvitationTicketUrl_result.e") | Some _x13062 -> _x13062
  method set_e _x13062 = _e <- Some _x13062
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getInvitationTicketUrl_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getInvitationTicketUrl_result (iprot : Protocol.t) =
  let _str13065 = new getInvitationTicketUrl_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t13066,_id13067) = iprot#readFieldBegin in
        if _t13066 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id13067 with 
          | 0 -> (if _t13066 = Protocol.T_STRUCT then
              _str13065#set_success (read_getInvitationTicketUrlResponse iprot)
            else
              iprot#skip _t13066)
          | 1 -> (if _t13066 = Protocol.T_STRUCT then
              _str13065#set_e (read_squareException iprot)
            else
              iprot#skip _t13066)
          | _ -> iprot#skip _t13066);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str13065

class findSquareByInvitationTicket_args =
object (self)
  val mutable _request : findSquareByInvitationTicketRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "findSquareByInvitationTicket_args.request") | Some _x13068 -> _x13068
  method set_request _x13068 = _request <- Some _x13068
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findSquareByInvitationTicket_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findSquareByInvitationTicket_args (iprot : Protocol.t) =
  let _str13071 = new findSquareByInvitationTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t13072,_id13073) = iprot#readFieldBegin in
        if _t13072 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id13073 with 
          | 1 -> (if _t13072 = Protocol.T_STRUCT then
              _str13071#set_request (read_findSquareByInvitationTicketRequest iprot)
            else
              iprot#skip _t13072)
          | _ -> iprot#skip _t13072);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str13071

class findSquareByInvitationTicket_result =
object (self)
  val mutable _success : findSquareByInvitationTicketResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findSquareByInvitationTicket_result.success") | Some _x13074 -> _x13074
  method set_success _x13074 = _success <- Some _x13074
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findSquareByInvitationTicket_result.e") | Some _x13075 -> _x13075
  method set_e _x13075 = _e <- Some _x13075
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findSquareByInvitationTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findSquareByInvitationTicket_result (iprot : Protocol.t) =
  let _str13078 = new findSquareByInvitationTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t13079,_id13080) = iprot#readFieldBegin in
        if _t13079 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id13080 with 
          | 0 -> (if _t13079 = Protocol.T_STRUCT then
              _str13078#set_success (read_findSquareByInvitationTicketResponse iprot)
            else
              iprot#skip _t13079)
          | 1 -> (if _t13079 = Protocol.T_STRUCT then
              _str13078#set_e (read_squareException iprot)
            else
              iprot#skip _t13079)
          | _ -> iprot#skip _t13079);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str13078

class virtual iface =
object (self)
  method virtual getSquareChatAnnouncements : getSquareChatAnnouncementsRequest option -> getSquareChatAnnouncementsResponse
  method virtual deleteSquareChatAnnouncement : deleteSquareChatAnnouncementRequest option -> deleteSquareChatAnnouncementResponse
  method virtual createSquareChatAnnouncement : createSquareChatAnnouncementRequest option -> createSquareChatAnnouncementResponse
  method virtual getNoteStatus : getNoteStatusRequest option -> getNoteStatusResponse
  method virtual getSquareStatus : getSquareStatusRequest option -> getSquareStatusResponse
  method virtual reportSquareMember : reportSquareMemberRequest option -> reportSquareMemberResponse
  method virtual reportSquareMessage : reportSquareMessageRequest option -> reportSquareMessageResponse
  method virtual reportSquareChat : reportSquareChatRequest option -> reportSquareChatResponse
  method virtual reportSquare : reportSquareRequest option -> reportSquareResponse
  method virtual updateSquareMemberRelation : updateSquareMemberRelationRequest option -> updateSquareMemberRelationResponse
  method virtual updateSquareAuthority : updateSquareAuthorityRequest option -> updateSquareAuthorityResponse
  method virtual updateSquareChatMember : updateSquareChatMemberRequest option -> updateSquareChatMemberResponse
  method virtual updateSquareChat : updateSquareChatRequest option -> updateSquareChatResponse
  method virtual refreshSubscriptions : refreshSubscriptionsRequest option -> refreshSubscriptionsResponse
  method virtual removeSubscriptions : removeSubscriptionsRequest option -> removeSubscriptionsResponse
  method virtual rejectSquareMembers : rejectSquareMembersRequest option -> rejectSquareMembersResponse
  method virtual updateSquareMembers : updateSquareMembersRequest option -> updateSquareMembersResponse
  method virtual updateSquareMember : updateSquareMemberRequest option -> updateSquareMemberResponse
  method virtual updateSquareFeatureSet : updateSquareFeatureSetRequest option -> updateSquareFeatureSetResponse
  method virtual getSquareFeatureSet : getSquareFeatureSetRequest option -> getSquareFeatureSetResponse
  method virtual searchSquares : searchSquaresRequest option -> searchSquaresResponse
  method virtual updateSquare : updateSquareRequest option -> updateSquareResponse
  method virtual getCategories : getSquareCategoriesRequest option -> getSquareCategoriesResponse
  method virtual searchSquareMembers : searchSquareMembersRequest option -> searchSquareMembersResponse
  method virtual fetchSquareChatEvents : fetchSquareChatEventsRequest option -> fetchSquareChatEventsResponse
  method virtual fetchMyEvents : fetchMyEventsRequest option -> fetchMyEventsResponse
  method virtual markAsRead : markAsReadRequest option -> markAsReadResponse
  method virtual getSquareAuthority : getSquareAuthorityRequest option -> getSquareAuthorityResponse
  method virtual sendMessage : sendMessageRequest option -> sendMessageResponse
  method virtual leaveSquare : leaveSquareRequest option -> leaveSquareResponse
  method virtual leaveSquareChat : leaveSquareChatRequest option -> leaveSquareChatResponse
  method virtual joinSquareChat : joinSquareChatRequest option -> joinSquareChatResponse
  method virtual joinSquare : joinSquareRequest option -> joinSquareResponse
  method virtual inviteToSquare : inviteToSquareRequest option -> inviteToSquareResponse
  method virtual inviteToSquareChat : inviteToSquareChatRequest option -> inviteToSquareChatResponse
  method virtual getSquareMember : getSquareMemberRequest option -> getSquareMemberResponse
  method virtual getSquareMembers : getSquareMembersRequest option -> getSquareMembersResponse
  method virtual getSquareMemberRelation : getSquareMemberRelationRequest option -> getSquareMemberRelationResponse
  method virtual getSquareMemberRelations : getSquareMemberRelationsRequest option -> getSquareMemberRelationsResponse
  method virtual getSquareChatMembers : getSquareChatMembersRequest option -> getSquareChatMembersResponse
  method virtual getSquareChatStatus : getSquareChatStatusRequest option -> getSquareChatStatusResponse
  method virtual getSquareChat : getSquareChatRequest option -> getSquareChatResponse
  method virtual getSquare : getSquareRequest option -> getSquareResponse
  method virtual getJoinedSquares : getJoinedSquaresRequest option -> getJoinedSquaresResponse
  method virtual getJoinedSquareChats : getJoinedSquareChatsRequest option -> getJoinedSquareChatsResponse
  method virtual approveSquareMembers : approveSquareMembersRequest option -> approveSquareMembersResponse
  method virtual createSquareChat : createSquareChatRequest option -> createSquareChatResponse
  method virtual createSquare : createSquareRequest option -> createSquareResponse
  method virtual deleteSquareChat : deleteSquareChatRequest option -> deleteSquareChatResponse
  method virtual deleteSquare : deleteSquareRequest option -> deleteSquareResponse
  method virtual destroyMessage : destroyMessageRequest option -> destroyMessageResponse
  method virtual getJoinableSquareChats : getJoinableSquareChatsRequest option -> getJoinableSquareChatsResponse
  method virtual getInvitationTicketUrl : getInvitationTicketUrlRequest option -> getInvitationTicketUrlResponse
  method virtual findSquareByInvitationTicket : findSquareByInvitationTicketRequest option -> findSquareByInvitationTicketResponse
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method getSquareChatAnnouncements request = 
    self#send_getSquareChatAnnouncements request;
    self#recv_getSquareChatAnnouncements
  method private send_getSquareChatAnnouncements request = 
    oprot#writeMessageBegin ("getSquareChatAnnouncements", Protocol.CALL, seqid);
    let args = new getSquareChatAnnouncements_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareChatAnnouncements  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareChatAnnouncements_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareChatAnnouncements failed: unknown result")))
  method deleteSquareChatAnnouncement request = 
    self#send_deleteSquareChatAnnouncement request;
    self#recv_deleteSquareChatAnnouncement
  method private send_deleteSquareChatAnnouncement request = 
    oprot#writeMessageBegin ("deleteSquareChatAnnouncement", Protocol.CALL, seqid);
    let args = new deleteSquareChatAnnouncement_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_deleteSquareChatAnnouncement  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_deleteSquareChatAnnouncement_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "deleteSquareChatAnnouncement failed: unknown result")))
  method createSquareChatAnnouncement request = 
    self#send_createSquareChatAnnouncement request;
    self#recv_createSquareChatAnnouncement
  method private send_createSquareChatAnnouncement request = 
    oprot#writeMessageBegin ("createSquareChatAnnouncement", Protocol.CALL, seqid);
    let args = new createSquareChatAnnouncement_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createSquareChatAnnouncement  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createSquareChatAnnouncement_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createSquareChatAnnouncement failed: unknown result")))
  method getNoteStatus request = 
    self#send_getNoteStatus request;
    self#recv_getNoteStatus
  method private send_getNoteStatus request = 
    oprot#writeMessageBegin ("getNoteStatus", Protocol.CALL, seqid);
    let args = new getNoteStatus_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getNoteStatus  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getNoteStatus_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getNoteStatus failed: unknown result")))
  method getSquareStatus request = 
    self#send_getSquareStatus request;
    self#recv_getSquareStatus
  method private send_getSquareStatus request = 
    oprot#writeMessageBegin ("getSquareStatus", Protocol.CALL, seqid);
    let args = new getSquareStatus_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareStatus  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareStatus_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareStatus failed: unknown result")))
  method reportSquareMember request = 
    self#send_reportSquareMember request;
    self#recv_reportSquareMember
  method private send_reportSquareMember request = 
    oprot#writeMessageBegin ("reportSquareMember", Protocol.CALL, seqid);
    let args = new reportSquareMember_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportSquareMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportSquareMember_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reportSquareMember failed: unknown result")))
  method reportSquareMessage request = 
    self#send_reportSquareMessage request;
    self#recv_reportSquareMessage
  method private send_reportSquareMessage request = 
    oprot#writeMessageBegin ("reportSquareMessage", Protocol.CALL, seqid);
    let args = new reportSquareMessage_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportSquareMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportSquareMessage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reportSquareMessage failed: unknown result")))
  method reportSquareChat request = 
    self#send_reportSquareChat request;
    self#recv_reportSquareChat
  method private send_reportSquareChat request = 
    oprot#writeMessageBegin ("reportSquareChat", Protocol.CALL, seqid);
    let args = new reportSquareChat_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportSquareChat  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportSquareChat_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reportSquareChat failed: unknown result")))
  method reportSquare request = 
    self#send_reportSquare request;
    self#recv_reportSquare
  method private send_reportSquare request = 
    oprot#writeMessageBegin ("reportSquare", Protocol.CALL, seqid);
    let args = new reportSquare_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportSquare  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportSquare_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reportSquare failed: unknown result")))
  method updateSquareMemberRelation request = 
    self#send_updateSquareMemberRelation request;
    self#recv_updateSquareMemberRelation
  method private send_updateSquareMemberRelation request = 
    oprot#writeMessageBegin ("updateSquareMemberRelation", Protocol.CALL, seqid);
    let args = new updateSquareMemberRelation_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSquareMemberRelation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSquareMemberRelation_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSquareMemberRelation failed: unknown result")))
  method updateSquareAuthority request = 
    self#send_updateSquareAuthority request;
    self#recv_updateSquareAuthority
  method private send_updateSquareAuthority request = 
    oprot#writeMessageBegin ("updateSquareAuthority", Protocol.CALL, seqid);
    let args = new updateSquareAuthority_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSquareAuthority  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSquareAuthority_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSquareAuthority failed: unknown result")))
  method updateSquareChatMember request = 
    self#send_updateSquareChatMember request;
    self#recv_updateSquareChatMember
  method private send_updateSquareChatMember request = 
    oprot#writeMessageBegin ("updateSquareChatMember", Protocol.CALL, seqid);
    let args = new updateSquareChatMember_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSquareChatMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSquareChatMember_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSquareChatMember failed: unknown result")))
  method updateSquareChat request = 
    self#send_updateSquareChat request;
    self#recv_updateSquareChat
  method private send_updateSquareChat request = 
    oprot#writeMessageBegin ("updateSquareChat", Protocol.CALL, seqid);
    let args = new updateSquareChat_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSquareChat  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSquareChat_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSquareChat failed: unknown result")))
  method refreshSubscriptions request = 
    self#send_refreshSubscriptions request;
    self#recv_refreshSubscriptions
  method private send_refreshSubscriptions request = 
    oprot#writeMessageBegin ("refreshSubscriptions", Protocol.CALL, seqid);
    let args = new refreshSubscriptions_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_refreshSubscriptions  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_refreshSubscriptions_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "refreshSubscriptions failed: unknown result")))
  method removeSubscriptions request = 
    self#send_removeSubscriptions request;
    self#recv_removeSubscriptions
  method private send_removeSubscriptions request = 
    oprot#writeMessageBegin ("removeSubscriptions", Protocol.CALL, seqid);
    let args = new removeSubscriptions_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeSubscriptions  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeSubscriptions_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "removeSubscriptions failed: unknown result")))
  method rejectSquareMembers request = 
    self#send_rejectSquareMembers request;
    self#recv_rejectSquareMembers
  method private send_rejectSquareMembers request = 
    oprot#writeMessageBegin ("rejectSquareMembers", Protocol.CALL, seqid);
    let args = new rejectSquareMembers_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_rejectSquareMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_rejectSquareMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "rejectSquareMembers failed: unknown result")))
  method updateSquareMembers request = 
    self#send_updateSquareMembers request;
    self#recv_updateSquareMembers
  method private send_updateSquareMembers request = 
    oprot#writeMessageBegin ("updateSquareMembers", Protocol.CALL, seqid);
    let args = new updateSquareMembers_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSquareMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSquareMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSquareMembers failed: unknown result")))
  method updateSquareMember request = 
    self#send_updateSquareMember request;
    self#recv_updateSquareMember
  method private send_updateSquareMember request = 
    oprot#writeMessageBegin ("updateSquareMember", Protocol.CALL, seqid);
    let args = new updateSquareMember_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSquareMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSquareMember_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSquareMember failed: unknown result")))
  method updateSquareFeatureSet request = 
    self#send_updateSquareFeatureSet request;
    self#recv_updateSquareFeatureSet
  method private send_updateSquareFeatureSet request = 
    oprot#writeMessageBegin ("updateSquareFeatureSet", Protocol.CALL, seqid);
    let args = new updateSquareFeatureSet_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSquareFeatureSet  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSquareFeatureSet_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSquareFeatureSet failed: unknown result")))
  method getSquareFeatureSet request = 
    self#send_getSquareFeatureSet request;
    self#recv_getSquareFeatureSet
  method private send_getSquareFeatureSet request = 
    oprot#writeMessageBegin ("getSquareFeatureSet", Protocol.CALL, seqid);
    let args = new getSquareFeatureSet_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareFeatureSet  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareFeatureSet_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareFeatureSet failed: unknown result")))
  method searchSquares request = 
    self#send_searchSquares request;
    self#recv_searchSquares
  method private send_searchSquares request = 
    oprot#writeMessageBegin ("searchSquares", Protocol.CALL, seqid);
    let args = new searchSquares_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_searchSquares  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_searchSquares_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "searchSquares failed: unknown result")))
  method updateSquare request = 
    self#send_updateSquare request;
    self#recv_updateSquare
  method private send_updateSquare request = 
    oprot#writeMessageBegin ("updateSquare", Protocol.CALL, seqid);
    let args = new updateSquare_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSquare  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSquare_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSquare failed: unknown result")))
  method getCategories request = 
    self#send_getCategories request;
    self#recv_getCategories
  method private send_getCategories request = 
    oprot#writeMessageBegin ("getCategories", Protocol.CALL, seqid);
    let args = new getCategories_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCategories  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCategories_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCategories failed: unknown result")))
  method searchSquareMembers request = 
    self#send_searchSquareMembers request;
    self#recv_searchSquareMembers
  method private send_searchSquareMembers request = 
    oprot#writeMessageBegin ("searchSquareMembers", Protocol.CALL, seqid);
    let args = new searchSquareMembers_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_searchSquareMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_searchSquareMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "searchSquareMembers failed: unknown result")))
  method fetchSquareChatEvents request = 
    self#send_fetchSquareChatEvents request;
    self#recv_fetchSquareChatEvents
  method private send_fetchSquareChatEvents request = 
    oprot#writeMessageBegin ("fetchSquareChatEvents", Protocol.CALL, seqid);
    let args = new fetchSquareChatEvents_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_fetchSquareChatEvents  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_fetchSquareChatEvents_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "fetchSquareChatEvents failed: unknown result")))
  method fetchMyEvents request = 
    self#send_fetchMyEvents request;
    self#recv_fetchMyEvents
  method private send_fetchMyEvents request = 
    oprot#writeMessageBegin ("fetchMyEvents", Protocol.CALL, seqid);
    let args = new fetchMyEvents_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_fetchMyEvents  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_fetchMyEvents_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "fetchMyEvents failed: unknown result")))
  method markAsRead request = 
    self#send_markAsRead request;
    self#recv_markAsRead
  method private send_markAsRead request = 
    oprot#writeMessageBegin ("markAsRead", Protocol.CALL, seqid);
    let args = new markAsRead_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_markAsRead  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_markAsRead_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "markAsRead failed: unknown result")))
  method getSquareAuthority request = 
    self#send_getSquareAuthority request;
    self#recv_getSquareAuthority
  method private send_getSquareAuthority request = 
    oprot#writeMessageBegin ("getSquareAuthority", Protocol.CALL, seqid);
    let args = new getSquareAuthority_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareAuthority  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareAuthority_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareAuthority failed: unknown result")))
  method sendMessage request = 
    self#send_sendMessage request;
    self#recv_sendMessage
  method private send_sendMessage request = 
    oprot#writeMessageBegin ("sendMessage", Protocol.CALL, seqid);
    let args = new sendMessage_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendMessage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendMessage failed: unknown result")))
  method leaveSquare request = 
    self#send_leaveSquare request;
    self#recv_leaveSquare
  method private send_leaveSquare request = 
    oprot#writeMessageBegin ("leaveSquare", Protocol.CALL, seqid);
    let args = new leaveSquare_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_leaveSquare  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_leaveSquare_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "leaveSquare failed: unknown result")))
  method leaveSquareChat request = 
    self#send_leaveSquareChat request;
    self#recv_leaveSquareChat
  method private send_leaveSquareChat request = 
    oprot#writeMessageBegin ("leaveSquareChat", Protocol.CALL, seqid);
    let args = new leaveSquareChat_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_leaveSquareChat  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_leaveSquareChat_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "leaveSquareChat failed: unknown result")))
  method joinSquareChat request = 
    self#send_joinSquareChat request;
    self#recv_joinSquareChat
  method private send_joinSquareChat request = 
    oprot#writeMessageBegin ("joinSquareChat", Protocol.CALL, seqid);
    let args = new joinSquareChat_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_joinSquareChat  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_joinSquareChat_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "joinSquareChat failed: unknown result")))
  method joinSquare request = 
    self#send_joinSquare request;
    self#recv_joinSquare
  method private send_joinSquare request = 
    oprot#writeMessageBegin ("joinSquare", Protocol.CALL, seqid);
    let args = new joinSquare_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_joinSquare  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_joinSquare_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "joinSquare failed: unknown result")))
  method inviteToSquare request = 
    self#send_inviteToSquare request;
    self#recv_inviteToSquare
  method private send_inviteToSquare request = 
    oprot#writeMessageBegin ("inviteToSquare", Protocol.CALL, seqid);
    let args = new inviteToSquare_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_inviteToSquare  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_inviteToSquare_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "inviteToSquare failed: unknown result")))
  method inviteToSquareChat request = 
    self#send_inviteToSquareChat request;
    self#recv_inviteToSquareChat
  method private send_inviteToSquareChat request = 
    oprot#writeMessageBegin ("inviteToSquareChat", Protocol.CALL, seqid);
    let args = new inviteToSquareChat_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_inviteToSquareChat  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_inviteToSquareChat_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "inviteToSquareChat failed: unknown result")))
  method getSquareMember request = 
    self#send_getSquareMember request;
    self#recv_getSquareMember
  method private send_getSquareMember request = 
    oprot#writeMessageBegin ("getSquareMember", Protocol.CALL, seqid);
    let args = new getSquareMember_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareMember_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareMember failed: unknown result")))
  method getSquareMembers request = 
    self#send_getSquareMembers request;
    self#recv_getSquareMembers
  method private send_getSquareMembers request = 
    oprot#writeMessageBegin ("getSquareMembers", Protocol.CALL, seqid);
    let args = new getSquareMembers_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareMembers failed: unknown result")))
  method getSquareMemberRelation request = 
    self#send_getSquareMemberRelation request;
    self#recv_getSquareMemberRelation
  method private send_getSquareMemberRelation request = 
    oprot#writeMessageBegin ("getSquareMemberRelation", Protocol.CALL, seqid);
    let args = new getSquareMemberRelation_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareMemberRelation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareMemberRelation_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareMemberRelation failed: unknown result")))
  method getSquareMemberRelations request = 
    self#send_getSquareMemberRelations request;
    self#recv_getSquareMemberRelations
  method private send_getSquareMemberRelations request = 
    oprot#writeMessageBegin ("getSquareMemberRelations", Protocol.CALL, seqid);
    let args = new getSquareMemberRelations_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareMemberRelations  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareMemberRelations_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareMemberRelations failed: unknown result")))
  method getSquareChatMembers request = 
    self#send_getSquareChatMembers request;
    self#recv_getSquareChatMembers
  method private send_getSquareChatMembers request = 
    oprot#writeMessageBegin ("getSquareChatMembers", Protocol.CALL, seqid);
    let args = new getSquareChatMembers_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareChatMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareChatMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareChatMembers failed: unknown result")))
  method getSquareChatStatus request = 
    self#send_getSquareChatStatus request;
    self#recv_getSquareChatStatus
  method private send_getSquareChatStatus request = 
    oprot#writeMessageBegin ("getSquareChatStatus", Protocol.CALL, seqid);
    let args = new getSquareChatStatus_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareChatStatus  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareChatStatus_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareChatStatus failed: unknown result")))
  method getSquareChat request = 
    self#send_getSquareChat request;
    self#recv_getSquareChat
  method private send_getSquareChat request = 
    oprot#writeMessageBegin ("getSquareChat", Protocol.CALL, seqid);
    let args = new getSquareChat_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareChat  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareChat_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareChat failed: unknown result")))
  method getSquare request = 
    self#send_getSquare request;
    self#recv_getSquare
  method private send_getSquare request = 
    oprot#writeMessageBegin ("getSquare", Protocol.CALL, seqid);
    let args = new getSquare_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquare  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquare_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquare failed: unknown result")))
  method getJoinedSquares request = 
    self#send_getJoinedSquares request;
    self#recv_getJoinedSquares
  method private send_getJoinedSquares request = 
    oprot#writeMessageBegin ("getJoinedSquares", Protocol.CALL, seqid);
    let args = new getJoinedSquares_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getJoinedSquares  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getJoinedSquares_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getJoinedSquares failed: unknown result")))
  method getJoinedSquareChats request = 
    self#send_getJoinedSquareChats request;
    self#recv_getJoinedSquareChats
  method private send_getJoinedSquareChats request = 
    oprot#writeMessageBegin ("getJoinedSquareChats", Protocol.CALL, seqid);
    let args = new getJoinedSquareChats_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getJoinedSquareChats  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getJoinedSquareChats_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getJoinedSquareChats failed: unknown result")))
  method approveSquareMembers request = 
    self#send_approveSquareMembers request;
    self#recv_approveSquareMembers
  method private send_approveSquareMembers request = 
    oprot#writeMessageBegin ("approveSquareMembers", Protocol.CALL, seqid);
    let args = new approveSquareMembers_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_approveSquareMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_approveSquareMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "approveSquareMembers failed: unknown result")))
  method createSquareChat request = 
    self#send_createSquareChat request;
    self#recv_createSquareChat
  method private send_createSquareChat request = 
    oprot#writeMessageBegin ("createSquareChat", Protocol.CALL, seqid);
    let args = new createSquareChat_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createSquareChat  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createSquareChat_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createSquareChat failed: unknown result")))
  method createSquare request = 
    self#send_createSquare request;
    self#recv_createSquare
  method private send_createSquare request = 
    oprot#writeMessageBegin ("createSquare", Protocol.CALL, seqid);
    let args = new createSquare_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createSquare  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createSquare_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createSquare failed: unknown result")))
  method deleteSquareChat request = 
    self#send_deleteSquareChat request;
    self#recv_deleteSquareChat
  method private send_deleteSquareChat request = 
    oprot#writeMessageBegin ("deleteSquareChat", Protocol.CALL, seqid);
    let args = new deleteSquareChat_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_deleteSquareChat  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_deleteSquareChat_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "deleteSquareChat failed: unknown result")))
  method deleteSquare request = 
    self#send_deleteSquare request;
    self#recv_deleteSquare
  method private send_deleteSquare request = 
    oprot#writeMessageBegin ("deleteSquare", Protocol.CALL, seqid);
    let args = new deleteSquare_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_deleteSquare  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_deleteSquare_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "deleteSquare failed: unknown result")))
  method destroyMessage request = 
    self#send_destroyMessage request;
    self#recv_destroyMessage
  method private send_destroyMessage request = 
    oprot#writeMessageBegin ("destroyMessage", Protocol.CALL, seqid);
    let args = new destroyMessage_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_destroyMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_destroyMessage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "destroyMessage failed: unknown result")))
  method getJoinableSquareChats request = 
    self#send_getJoinableSquareChats request;
    self#recv_getJoinableSquareChats
  method private send_getJoinableSquareChats request = 
    oprot#writeMessageBegin ("getJoinableSquareChats", Protocol.CALL, seqid);
    let args = new getJoinableSquareChats_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getJoinableSquareChats  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getJoinableSquareChats_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getJoinableSquareChats failed: unknown result")))
  method getInvitationTicketUrl request = 
    self#send_getInvitationTicketUrl request;
    self#recv_getInvitationTicketUrl
  method private send_getInvitationTicketUrl request = 
    oprot#writeMessageBegin ("getInvitationTicketUrl", Protocol.CALL, seqid);
    let args = new getInvitationTicketUrl_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getInvitationTicketUrl  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getInvitationTicketUrl_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getInvitationTicketUrl failed: unknown result")))
  method findSquareByInvitationTicket request = 
    self#send_findSquareByInvitationTicket request;
    self#recv_findSquareByInvitationTicket
  method private send_findSquareByInvitationTicket request = 
    oprot#writeMessageBegin ("findSquareByInvitationTicket", Protocol.CALL, seqid);
    let args = new findSquareByInvitationTicket_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findSquareByInvitationTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findSquareByInvitationTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findSquareByInvitationTicket failed: unknown result")))
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 54
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_getSquareChatAnnouncements (seqid, iprot, oprot) =
    let args = read_getSquareChatAnnouncements_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareChatAnnouncements_result in
        (try
          result#set_success (handler#getSquareChatAnnouncements args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareChatAnnouncements", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_deleteSquareChatAnnouncement (seqid, iprot, oprot) =
    let args = read_deleteSquareChatAnnouncement_args iprot in
      iprot#readMessageEnd;
      let result = new deleteSquareChatAnnouncement_result in
        (try
          result#set_success (handler#deleteSquareChatAnnouncement args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("deleteSquareChatAnnouncement", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createSquareChatAnnouncement (seqid, iprot, oprot) =
    let args = read_createSquareChatAnnouncement_args iprot in
      iprot#readMessageEnd;
      let result = new createSquareChatAnnouncement_result in
        (try
          result#set_success (handler#createSquareChatAnnouncement args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createSquareChatAnnouncement", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getNoteStatus (seqid, iprot, oprot) =
    let args = read_getNoteStatus_args iprot in
      iprot#readMessageEnd;
      let result = new getNoteStatus_result in
        (try
          result#set_success (handler#getNoteStatus args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getNoteStatus", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareStatus (seqid, iprot, oprot) =
    let args = read_getSquareStatus_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareStatus_result in
        (try
          result#set_success (handler#getSquareStatus args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareStatus", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportSquareMember (seqid, iprot, oprot) =
    let args = read_reportSquareMember_args iprot in
      iprot#readMessageEnd;
      let result = new reportSquareMember_result in
        (try
          result#set_success (handler#reportSquareMember args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportSquareMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportSquareMessage (seqid, iprot, oprot) =
    let args = read_reportSquareMessage_args iprot in
      iprot#readMessageEnd;
      let result = new reportSquareMessage_result in
        (try
          result#set_success (handler#reportSquareMessage args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportSquareMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportSquareChat (seqid, iprot, oprot) =
    let args = read_reportSquareChat_args iprot in
      iprot#readMessageEnd;
      let result = new reportSquareChat_result in
        (try
          result#set_success (handler#reportSquareChat args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportSquareChat", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportSquare (seqid, iprot, oprot) =
    let args = read_reportSquare_args iprot in
      iprot#readMessageEnd;
      let result = new reportSquare_result in
        (try
          result#set_success (handler#reportSquare args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportSquare", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSquareMemberRelation (seqid, iprot, oprot) =
    let args = read_updateSquareMemberRelation_args iprot in
      iprot#readMessageEnd;
      let result = new updateSquareMemberRelation_result in
        (try
          result#set_success (handler#updateSquareMemberRelation args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSquareMemberRelation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSquareAuthority (seqid, iprot, oprot) =
    let args = read_updateSquareAuthority_args iprot in
      iprot#readMessageEnd;
      let result = new updateSquareAuthority_result in
        (try
          result#set_success (handler#updateSquareAuthority args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSquareAuthority", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSquareChatMember (seqid, iprot, oprot) =
    let args = read_updateSquareChatMember_args iprot in
      iprot#readMessageEnd;
      let result = new updateSquareChatMember_result in
        (try
          result#set_success (handler#updateSquareChatMember args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSquareChatMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSquareChat (seqid, iprot, oprot) =
    let args = read_updateSquareChat_args iprot in
      iprot#readMessageEnd;
      let result = new updateSquareChat_result in
        (try
          result#set_success (handler#updateSquareChat args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSquareChat", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_refreshSubscriptions (seqid, iprot, oprot) =
    let args = read_refreshSubscriptions_args iprot in
      iprot#readMessageEnd;
      let result = new refreshSubscriptions_result in
        (try
          result#set_success (handler#refreshSubscriptions args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("refreshSubscriptions", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeSubscriptions (seqid, iprot, oprot) =
    let args = read_removeSubscriptions_args iprot in
      iprot#readMessageEnd;
      let result = new removeSubscriptions_result in
        (try
          result#set_success (handler#removeSubscriptions args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeSubscriptions", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_rejectSquareMembers (seqid, iprot, oprot) =
    let args = read_rejectSquareMembers_args iprot in
      iprot#readMessageEnd;
      let result = new rejectSquareMembers_result in
        (try
          result#set_success (handler#rejectSquareMembers args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("rejectSquareMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSquareMembers (seqid, iprot, oprot) =
    let args = read_updateSquareMembers_args iprot in
      iprot#readMessageEnd;
      let result = new updateSquareMembers_result in
        (try
          result#set_success (handler#updateSquareMembers args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSquareMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSquareMember (seqid, iprot, oprot) =
    let args = read_updateSquareMember_args iprot in
      iprot#readMessageEnd;
      let result = new updateSquareMember_result in
        (try
          result#set_success (handler#updateSquareMember args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSquareMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSquareFeatureSet (seqid, iprot, oprot) =
    let args = read_updateSquareFeatureSet_args iprot in
      iprot#readMessageEnd;
      let result = new updateSquareFeatureSet_result in
        (try
          result#set_success (handler#updateSquareFeatureSet args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSquareFeatureSet", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareFeatureSet (seqid, iprot, oprot) =
    let args = read_getSquareFeatureSet_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareFeatureSet_result in
        (try
          result#set_success (handler#getSquareFeatureSet args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareFeatureSet", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_searchSquares (seqid, iprot, oprot) =
    let args = read_searchSquares_args iprot in
      iprot#readMessageEnd;
      let result = new searchSquares_result in
        (try
          result#set_success (handler#searchSquares args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("searchSquares", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSquare (seqid, iprot, oprot) =
    let args = read_updateSquare_args iprot in
      iprot#readMessageEnd;
      let result = new updateSquare_result in
        (try
          result#set_success (handler#updateSquare args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSquare", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCategories (seqid, iprot, oprot) =
    let args = read_getCategories_args iprot in
      iprot#readMessageEnd;
      let result = new getCategories_result in
        (try
          result#set_success (handler#getCategories args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCategories", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_searchSquareMembers (seqid, iprot, oprot) =
    let args = read_searchSquareMembers_args iprot in
      iprot#readMessageEnd;
      let result = new searchSquareMembers_result in
        (try
          result#set_success (handler#searchSquareMembers args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("searchSquareMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_fetchSquareChatEvents (seqid, iprot, oprot) =
    let args = read_fetchSquareChatEvents_args iprot in
      iprot#readMessageEnd;
      let result = new fetchSquareChatEvents_result in
        (try
          result#set_success (handler#fetchSquareChatEvents args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("fetchSquareChatEvents", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_fetchMyEvents (seqid, iprot, oprot) =
    let args = read_fetchMyEvents_args iprot in
      iprot#readMessageEnd;
      let result = new fetchMyEvents_result in
        (try
          result#set_success (handler#fetchMyEvents args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("fetchMyEvents", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_markAsRead (seqid, iprot, oprot) =
    let args = read_markAsRead_args iprot in
      iprot#readMessageEnd;
      let result = new markAsRead_result in
        (try
          result#set_success (handler#markAsRead args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("markAsRead", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareAuthority (seqid, iprot, oprot) =
    let args = read_getSquareAuthority_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareAuthority_result in
        (try
          result#set_success (handler#getSquareAuthority args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareAuthority", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendMessage (seqid, iprot, oprot) =
    let args = read_sendMessage_args iprot in
      iprot#readMessageEnd;
      let result = new sendMessage_result in
        (try
          result#set_success (handler#sendMessage args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_leaveSquare (seqid, iprot, oprot) =
    let args = read_leaveSquare_args iprot in
      iprot#readMessageEnd;
      let result = new leaveSquare_result in
        (try
          result#set_success (handler#leaveSquare args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("leaveSquare", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_leaveSquareChat (seqid, iprot, oprot) =
    let args = read_leaveSquareChat_args iprot in
      iprot#readMessageEnd;
      let result = new leaveSquareChat_result in
        (try
          result#set_success (handler#leaveSquareChat args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("leaveSquareChat", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_joinSquareChat (seqid, iprot, oprot) =
    let args = read_joinSquareChat_args iprot in
      iprot#readMessageEnd;
      let result = new joinSquareChat_result in
        (try
          result#set_success (handler#joinSquareChat args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("joinSquareChat", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_joinSquare (seqid, iprot, oprot) =
    let args = read_joinSquare_args iprot in
      iprot#readMessageEnd;
      let result = new joinSquare_result in
        (try
          result#set_success (handler#joinSquare args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("joinSquare", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_inviteToSquare (seqid, iprot, oprot) =
    let args = read_inviteToSquare_args iprot in
      iprot#readMessageEnd;
      let result = new inviteToSquare_result in
        (try
          result#set_success (handler#inviteToSquare args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("inviteToSquare", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_inviteToSquareChat (seqid, iprot, oprot) =
    let args = read_inviteToSquareChat_args iprot in
      iprot#readMessageEnd;
      let result = new inviteToSquareChat_result in
        (try
          result#set_success (handler#inviteToSquareChat args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("inviteToSquareChat", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareMember (seqid, iprot, oprot) =
    let args = read_getSquareMember_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareMember_result in
        (try
          result#set_success (handler#getSquareMember args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareMembers (seqid, iprot, oprot) =
    let args = read_getSquareMembers_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareMembers_result in
        (try
          result#set_success (handler#getSquareMembers args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareMemberRelation (seqid, iprot, oprot) =
    let args = read_getSquareMemberRelation_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareMemberRelation_result in
        (try
          result#set_success (handler#getSquareMemberRelation args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareMemberRelation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareMemberRelations (seqid, iprot, oprot) =
    let args = read_getSquareMemberRelations_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareMemberRelations_result in
        (try
          result#set_success (handler#getSquareMemberRelations args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareMemberRelations", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareChatMembers (seqid, iprot, oprot) =
    let args = read_getSquareChatMembers_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareChatMembers_result in
        (try
          result#set_success (handler#getSquareChatMembers args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareChatMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareChatStatus (seqid, iprot, oprot) =
    let args = read_getSquareChatStatus_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareChatStatus_result in
        (try
          result#set_success (handler#getSquareChatStatus args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareChatStatus", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareChat (seqid, iprot, oprot) =
    let args = read_getSquareChat_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareChat_result in
        (try
          result#set_success (handler#getSquareChat args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareChat", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquare (seqid, iprot, oprot) =
    let args = read_getSquare_args iprot in
      iprot#readMessageEnd;
      let result = new getSquare_result in
        (try
          result#set_success (handler#getSquare args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquare", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getJoinedSquares (seqid, iprot, oprot) =
    let args = read_getJoinedSquares_args iprot in
      iprot#readMessageEnd;
      let result = new getJoinedSquares_result in
        (try
          result#set_success (handler#getJoinedSquares args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getJoinedSquares", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getJoinedSquareChats (seqid, iprot, oprot) =
    let args = read_getJoinedSquareChats_args iprot in
      iprot#readMessageEnd;
      let result = new getJoinedSquareChats_result in
        (try
          result#set_success (handler#getJoinedSquareChats args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getJoinedSquareChats", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_approveSquareMembers (seqid, iprot, oprot) =
    let args = read_approveSquareMembers_args iprot in
      iprot#readMessageEnd;
      let result = new approveSquareMembers_result in
        (try
          result#set_success (handler#approveSquareMembers args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("approveSquareMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createSquareChat (seqid, iprot, oprot) =
    let args = read_createSquareChat_args iprot in
      iprot#readMessageEnd;
      let result = new createSquareChat_result in
        (try
          result#set_success (handler#createSquareChat args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createSquareChat", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createSquare (seqid, iprot, oprot) =
    let args = read_createSquare_args iprot in
      iprot#readMessageEnd;
      let result = new createSquare_result in
        (try
          result#set_success (handler#createSquare args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createSquare", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_deleteSquareChat (seqid, iprot, oprot) =
    let args = read_deleteSquareChat_args iprot in
      iprot#readMessageEnd;
      let result = new deleteSquareChat_result in
        (try
          result#set_success (handler#deleteSquareChat args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("deleteSquareChat", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_deleteSquare (seqid, iprot, oprot) =
    let args = read_deleteSquare_args iprot in
      iprot#readMessageEnd;
      let result = new deleteSquare_result in
        (try
          result#set_success (handler#deleteSquare args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("deleteSquare", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_destroyMessage (seqid, iprot, oprot) =
    let args = read_destroyMessage_args iprot in
      iprot#readMessageEnd;
      let result = new destroyMessage_result in
        (try
          result#set_success (handler#destroyMessage args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("destroyMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getJoinableSquareChats (seqid, iprot, oprot) =
    let args = read_getJoinableSquareChats_args iprot in
      iprot#readMessageEnd;
      let result = new getJoinableSquareChats_result in
        (try
          result#set_success (handler#getJoinableSquareChats args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getJoinableSquareChats", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getInvitationTicketUrl (seqid, iprot, oprot) =
    let args = read_getInvitationTicketUrl_args iprot in
      iprot#readMessageEnd;
      let result = new getInvitationTicketUrl_result in
        (try
          result#set_success (handler#getInvitationTicketUrl args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getInvitationTicketUrl", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findSquareByInvitationTicket (seqid, iprot, oprot) =
    let args = read_findSquareByInvitationTicket_args iprot in
      iprot#readMessageEnd;
      let result = new findSquareByInvitationTicket_result in
        (try
          result#set_success (handler#findSquareByInvitationTicket args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findSquareByInvitationTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "getSquareChatAnnouncements" self#process_getSquareChatAnnouncements;
    Hashtbl.add processMap "deleteSquareChatAnnouncement" self#process_deleteSquareChatAnnouncement;
    Hashtbl.add processMap "createSquareChatAnnouncement" self#process_createSquareChatAnnouncement;
    Hashtbl.add processMap "getNoteStatus" self#process_getNoteStatus;
    Hashtbl.add processMap "getSquareStatus" self#process_getSquareStatus;
    Hashtbl.add processMap "reportSquareMember" self#process_reportSquareMember;
    Hashtbl.add processMap "reportSquareMessage" self#process_reportSquareMessage;
    Hashtbl.add processMap "reportSquareChat" self#process_reportSquareChat;
    Hashtbl.add processMap "reportSquare" self#process_reportSquare;
    Hashtbl.add processMap "updateSquareMemberRelation" self#process_updateSquareMemberRelation;
    Hashtbl.add processMap "updateSquareAuthority" self#process_updateSquareAuthority;
    Hashtbl.add processMap "updateSquareChatMember" self#process_updateSquareChatMember;
    Hashtbl.add processMap "updateSquareChat" self#process_updateSquareChat;
    Hashtbl.add processMap "refreshSubscriptions" self#process_refreshSubscriptions;
    Hashtbl.add processMap "removeSubscriptions" self#process_removeSubscriptions;
    Hashtbl.add processMap "rejectSquareMembers" self#process_rejectSquareMembers;
    Hashtbl.add processMap "updateSquareMembers" self#process_updateSquareMembers;
    Hashtbl.add processMap "updateSquareMember" self#process_updateSquareMember;
    Hashtbl.add processMap "updateSquareFeatureSet" self#process_updateSquareFeatureSet;
    Hashtbl.add processMap "getSquareFeatureSet" self#process_getSquareFeatureSet;
    Hashtbl.add processMap "searchSquares" self#process_searchSquares;
    Hashtbl.add processMap "updateSquare" self#process_updateSquare;
    Hashtbl.add processMap "getCategories" self#process_getCategories;
    Hashtbl.add processMap "searchSquareMembers" self#process_searchSquareMembers;
    Hashtbl.add processMap "fetchSquareChatEvents" self#process_fetchSquareChatEvents;
    Hashtbl.add processMap "fetchMyEvents" self#process_fetchMyEvents;
    Hashtbl.add processMap "markAsRead" self#process_markAsRead;
    Hashtbl.add processMap "getSquareAuthority" self#process_getSquareAuthority;
    Hashtbl.add processMap "sendMessage" self#process_sendMessage;
    Hashtbl.add processMap "leaveSquare" self#process_leaveSquare;
    Hashtbl.add processMap "leaveSquareChat" self#process_leaveSquareChat;
    Hashtbl.add processMap "joinSquareChat" self#process_joinSquareChat;
    Hashtbl.add processMap "joinSquare" self#process_joinSquare;
    Hashtbl.add processMap "inviteToSquare" self#process_inviteToSquare;
    Hashtbl.add processMap "inviteToSquareChat" self#process_inviteToSquareChat;
    Hashtbl.add processMap "getSquareMember" self#process_getSquareMember;
    Hashtbl.add processMap "getSquareMembers" self#process_getSquareMembers;
    Hashtbl.add processMap "getSquareMemberRelation" self#process_getSquareMemberRelation;
    Hashtbl.add processMap "getSquareMemberRelations" self#process_getSquareMemberRelations;
    Hashtbl.add processMap "getSquareChatMembers" self#process_getSquareChatMembers;
    Hashtbl.add processMap "getSquareChatStatus" self#process_getSquareChatStatus;
    Hashtbl.add processMap "getSquareChat" self#process_getSquareChat;
    Hashtbl.add processMap "getSquare" self#process_getSquare;
    Hashtbl.add processMap "getJoinedSquares" self#process_getJoinedSquares;
    Hashtbl.add processMap "getJoinedSquareChats" self#process_getJoinedSquareChats;
    Hashtbl.add processMap "approveSquareMembers" self#process_approveSquareMembers;
    Hashtbl.add processMap "createSquareChat" self#process_createSquareChat;
    Hashtbl.add processMap "createSquare" self#process_createSquare;
    Hashtbl.add processMap "deleteSquareChat" self#process_deleteSquareChat;
    Hashtbl.add processMap "deleteSquare" self#process_deleteSquare;
    Hashtbl.add processMap "destroyMessage" self#process_destroyMessage;
    Hashtbl.add processMap "getJoinableSquareChats" self#process_getJoinableSquareChats;
    Hashtbl.add processMap "getInvitationTicketUrl" self#process_getInvitationTicketUrl;
    Hashtbl.add processMap "findSquareByInvitationTicket" self#process_findSquareByInvitationTicket;
end

