(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class getSquareChatAnnouncements_args =
object (self)
  val mutable _request : getSquareChatAnnouncementsRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareChatAnnouncements_args.request") | Some _x11712 -> _x11712
  method set_request _x11712 = _request <- Some _x11712
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareChatAnnouncements_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareChatAnnouncements_args (iprot : Protocol.t) =
  let _str11715 = new getSquareChatAnnouncements_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11716,_id11717) = iprot#readFieldBegin in
        if _t11716 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11717 with 
          | 1 -> (if _t11716 = Protocol.T_STRUCT then
              _str11715#set_request (read_getSquareChatAnnouncementsRequest iprot)
            else
              iprot#skip _t11716)
          | _ -> iprot#skip _t11716);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11715

class getSquareChatAnnouncements_result =
object (self)
  val mutable _success : getSquareChatAnnouncementsResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareChatAnnouncements_result.success") | Some _x11718 -> _x11718
  method set_success _x11718 = _success <- Some _x11718
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareChatAnnouncements_result.e") | Some _x11719 -> _x11719
  method set_e _x11719 = _e <- Some _x11719
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareChatAnnouncements_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareChatAnnouncements_result (iprot : Protocol.t) =
  let _str11722 = new getSquareChatAnnouncements_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11723,_id11724) = iprot#readFieldBegin in
        if _t11723 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11724 with 
          | 0 -> (if _t11723 = Protocol.T_STRUCT then
              _str11722#set_success (read_getSquareChatAnnouncementsResponse iprot)
            else
              iprot#skip _t11723)
          | 1 -> (if _t11723 = Protocol.T_STRUCT then
              _str11722#set_e (read_squareException iprot)
            else
              iprot#skip _t11723)
          | _ -> iprot#skip _t11723);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11722

class deleteSquareChatAnnouncement_args =
object (self)
  val mutable _request : deleteSquareChatAnnouncementRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "deleteSquareChatAnnouncement_args.request") | Some _x11725 -> _x11725
  method set_request _x11725 = _request <- Some _x11725
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteSquareChatAnnouncement_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteSquareChatAnnouncement_args (iprot : Protocol.t) =
  let _str11728 = new deleteSquareChatAnnouncement_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11729,_id11730) = iprot#readFieldBegin in
        if _t11729 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11730 with 
          | 1 -> (if _t11729 = Protocol.T_STRUCT then
              _str11728#set_request (read_deleteSquareChatAnnouncementRequest iprot)
            else
              iprot#skip _t11729)
          | _ -> iprot#skip _t11729);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11728

class deleteSquareChatAnnouncement_result =
object (self)
  val mutable _success : deleteSquareChatAnnouncementResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "deleteSquareChatAnnouncement_result.success") | Some _x11731 -> _x11731
  method set_success _x11731 = _success <- Some _x11731
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "deleteSquareChatAnnouncement_result.e") | Some _x11732 -> _x11732
  method set_e _x11732 = _e <- Some _x11732
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteSquareChatAnnouncement_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteSquareChatAnnouncement_result (iprot : Protocol.t) =
  let _str11735 = new deleteSquareChatAnnouncement_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11736,_id11737) = iprot#readFieldBegin in
        if _t11736 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11737 with 
          | 0 -> (if _t11736 = Protocol.T_STRUCT then
              _str11735#set_success (read_deleteSquareChatAnnouncementResponse iprot)
            else
              iprot#skip _t11736)
          | 1 -> (if _t11736 = Protocol.T_STRUCT then
              _str11735#set_e (read_squareException iprot)
            else
              iprot#skip _t11736)
          | _ -> iprot#skip _t11736);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11735

class createSquareChatAnnouncement_args =
object (self)
  val mutable _request : createSquareChatAnnouncementRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "createSquareChatAnnouncement_args.request") | Some _x11738 -> _x11738
  method set_request _x11738 = _request <- Some _x11738
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createSquareChatAnnouncement_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createSquareChatAnnouncement_args (iprot : Protocol.t) =
  let _str11741 = new createSquareChatAnnouncement_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11742,_id11743) = iprot#readFieldBegin in
        if _t11742 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11743 with 
          | 1 -> (if _t11742 = Protocol.T_STRUCT then
              _str11741#set_request (read_createSquareChatAnnouncementRequest iprot)
            else
              iprot#skip _t11742)
          | _ -> iprot#skip _t11742);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11741

class createSquareChatAnnouncement_result =
object (self)
  val mutable _success : createSquareChatAnnouncementResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createSquareChatAnnouncement_result.success") | Some _x11744 -> _x11744
  method set_success _x11744 = _success <- Some _x11744
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createSquareChatAnnouncement_result.e") | Some _x11745 -> _x11745
  method set_e _x11745 = _e <- Some _x11745
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createSquareChatAnnouncement_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createSquareChatAnnouncement_result (iprot : Protocol.t) =
  let _str11748 = new createSquareChatAnnouncement_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11749,_id11750) = iprot#readFieldBegin in
        if _t11749 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11750 with 
          | 0 -> (if _t11749 = Protocol.T_STRUCT then
              _str11748#set_success (read_createSquareChatAnnouncementResponse iprot)
            else
              iprot#skip _t11749)
          | 1 -> (if _t11749 = Protocol.T_STRUCT then
              _str11748#set_e (read_squareException iprot)
            else
              iprot#skip _t11749)
          | _ -> iprot#skip _t11749);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11748

class getNoteStatus_args =
object (self)
  val mutable _request : getNoteStatusRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getNoteStatus_args.request") | Some _x11751 -> _x11751
  method set_request _x11751 = _request <- Some _x11751
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNoteStatus_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNoteStatus_args (iprot : Protocol.t) =
  let _str11754 = new getNoteStatus_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11755,_id11756) = iprot#readFieldBegin in
        if _t11755 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11756 with 
          | 1 -> (if _t11755 = Protocol.T_STRUCT then
              _str11754#set_request (read_getNoteStatusRequest iprot)
            else
              iprot#skip _t11755)
          | _ -> iprot#skip _t11755);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11754

class getNoteStatus_result =
object (self)
  val mutable _success : getNoteStatusResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getNoteStatus_result.success") | Some _x11757 -> _x11757
  method set_success _x11757 = _success <- Some _x11757
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getNoteStatus_result.e") | Some _x11758 -> _x11758
  method set_e _x11758 = _e <- Some _x11758
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNoteStatus_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNoteStatus_result (iprot : Protocol.t) =
  let _str11761 = new getNoteStatus_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11762,_id11763) = iprot#readFieldBegin in
        if _t11762 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11763 with 
          | 0 -> (if _t11762 = Protocol.T_STRUCT then
              _str11761#set_success (read_getNoteStatusResponse iprot)
            else
              iprot#skip _t11762)
          | 1 -> (if _t11762 = Protocol.T_STRUCT then
              _str11761#set_e (read_squareException iprot)
            else
              iprot#skip _t11762)
          | _ -> iprot#skip _t11762);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11761

class getSquareStatus_args =
object (self)
  val mutable _request : getSquareStatusRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareStatus_args.request") | Some _x11764 -> _x11764
  method set_request _x11764 = _request <- Some _x11764
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareStatus_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareStatus_args (iprot : Protocol.t) =
  let _str11767 = new getSquareStatus_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11768,_id11769) = iprot#readFieldBegin in
        if _t11768 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11769 with 
          | 1 -> (if _t11768 = Protocol.T_STRUCT then
              _str11767#set_request (read_getSquareStatusRequest iprot)
            else
              iprot#skip _t11768)
          | _ -> iprot#skip _t11768);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11767

class getSquareStatus_result =
object (self)
  val mutable _success : getSquareStatusResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareStatus_result.success") | Some _x11770 -> _x11770
  method set_success _x11770 = _success <- Some _x11770
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareStatus_result.e") | Some _x11771 -> _x11771
  method set_e _x11771 = _e <- Some _x11771
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareStatus_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareStatus_result (iprot : Protocol.t) =
  let _str11774 = new getSquareStatus_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11775,_id11776) = iprot#readFieldBegin in
        if _t11775 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11776 with 
          | 0 -> (if _t11775 = Protocol.T_STRUCT then
              _str11774#set_success (read_getSquareStatusResponse iprot)
            else
              iprot#skip _t11775)
          | 1 -> (if _t11775 = Protocol.T_STRUCT then
              _str11774#set_e (read_squareException iprot)
            else
              iprot#skip _t11775)
          | _ -> iprot#skip _t11775);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11774

class reportSquareMember_args =
object (self)
  val mutable _request : reportSquareMemberRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "reportSquareMember_args.request") | Some _x11777 -> _x11777
  method set_request _x11777 = _request <- Some _x11777
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSquareMember_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSquareMember_args (iprot : Protocol.t) =
  let _str11780 = new reportSquareMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11781,_id11782) = iprot#readFieldBegin in
        if _t11781 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11782 with 
          | 1 -> (if _t11781 = Protocol.T_STRUCT then
              _str11780#set_request (read_reportSquareMemberRequest iprot)
            else
              iprot#skip _t11781)
          | _ -> iprot#skip _t11781);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11780

class reportSquareMember_result =
object (self)
  val mutable _success : reportSquareMemberResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reportSquareMember_result.success") | Some _x11783 -> _x11783
  method set_success _x11783 = _success <- Some _x11783
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportSquareMember_result.e") | Some _x11784 -> _x11784
  method set_e _x11784 = _e <- Some _x11784
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSquareMember_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSquareMember_result (iprot : Protocol.t) =
  let _str11787 = new reportSquareMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11788,_id11789) = iprot#readFieldBegin in
        if _t11788 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11789 with 
          | 0 -> (if _t11788 = Protocol.T_STRUCT then
              _str11787#set_success (read_reportSquareMemberResponse iprot)
            else
              iprot#skip _t11788)
          | 1 -> (if _t11788 = Protocol.T_STRUCT then
              _str11787#set_e (read_squareException iprot)
            else
              iprot#skip _t11788)
          | _ -> iprot#skip _t11788);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11787

class reportSquareMessage_args =
object (self)
  val mutable _request : reportSquareMessageRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "reportSquareMessage_args.request") | Some _x11790 -> _x11790
  method set_request _x11790 = _request <- Some _x11790
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSquareMessage_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSquareMessage_args (iprot : Protocol.t) =
  let _str11793 = new reportSquareMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11794,_id11795) = iprot#readFieldBegin in
        if _t11794 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11795 with 
          | 1 -> (if _t11794 = Protocol.T_STRUCT then
              _str11793#set_request (read_reportSquareMessageRequest iprot)
            else
              iprot#skip _t11794)
          | _ -> iprot#skip _t11794);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11793

class reportSquareMessage_result =
object (self)
  val mutable _success : reportSquareMessageResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reportSquareMessage_result.success") | Some _x11796 -> _x11796
  method set_success _x11796 = _success <- Some _x11796
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportSquareMessage_result.e") | Some _x11797 -> _x11797
  method set_e _x11797 = _e <- Some _x11797
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSquareMessage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSquareMessage_result (iprot : Protocol.t) =
  let _str11800 = new reportSquareMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11801,_id11802) = iprot#readFieldBegin in
        if _t11801 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11802 with 
          | 0 -> (if _t11801 = Protocol.T_STRUCT then
              _str11800#set_success (read_reportSquareMessageResponse iprot)
            else
              iprot#skip _t11801)
          | 1 -> (if _t11801 = Protocol.T_STRUCT then
              _str11800#set_e (read_squareException iprot)
            else
              iprot#skip _t11801)
          | _ -> iprot#skip _t11801);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11800

class reportSquareChat_args =
object (self)
  val mutable _request : reportSquareChatRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "reportSquareChat_args.request") | Some _x11803 -> _x11803
  method set_request _x11803 = _request <- Some _x11803
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSquareChat_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSquareChat_args (iprot : Protocol.t) =
  let _str11806 = new reportSquareChat_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11807,_id11808) = iprot#readFieldBegin in
        if _t11807 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11808 with 
          | 1 -> (if _t11807 = Protocol.T_STRUCT then
              _str11806#set_request (read_reportSquareChatRequest iprot)
            else
              iprot#skip _t11807)
          | _ -> iprot#skip _t11807);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11806

class reportSquareChat_result =
object (self)
  val mutable _success : reportSquareChatResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reportSquareChat_result.success") | Some _x11809 -> _x11809
  method set_success _x11809 = _success <- Some _x11809
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportSquareChat_result.e") | Some _x11810 -> _x11810
  method set_e _x11810 = _e <- Some _x11810
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSquareChat_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSquareChat_result (iprot : Protocol.t) =
  let _str11813 = new reportSquareChat_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11814,_id11815) = iprot#readFieldBegin in
        if _t11814 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11815 with 
          | 0 -> (if _t11814 = Protocol.T_STRUCT then
              _str11813#set_success (read_reportSquareChatResponse iprot)
            else
              iprot#skip _t11814)
          | 1 -> (if _t11814 = Protocol.T_STRUCT then
              _str11813#set_e (read_squareException iprot)
            else
              iprot#skip _t11814)
          | _ -> iprot#skip _t11814);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11813

class reportSquare_args =
object (self)
  val mutable _request : reportSquareRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "reportSquare_args.request") | Some _x11816 -> _x11816
  method set_request _x11816 = _request <- Some _x11816
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSquare_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSquare_args (iprot : Protocol.t) =
  let _str11819 = new reportSquare_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11820,_id11821) = iprot#readFieldBegin in
        if _t11820 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11821 with 
          | 1 -> (if _t11820 = Protocol.T_STRUCT then
              _str11819#set_request (read_reportSquareRequest iprot)
            else
              iprot#skip _t11820)
          | _ -> iprot#skip _t11820);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11819

class reportSquare_result =
object (self)
  val mutable _success : reportSquareResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reportSquare_result.success") | Some _x11822 -> _x11822
  method set_success _x11822 = _success <- Some _x11822
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reportSquare_result.e") | Some _x11823 -> _x11823
  method set_e _x11823 = _e <- Some _x11823
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reportSquare_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reportSquare_result (iprot : Protocol.t) =
  let _str11826 = new reportSquare_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11827,_id11828) = iprot#readFieldBegin in
        if _t11827 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11828 with 
          | 0 -> (if _t11827 = Protocol.T_STRUCT then
              _str11826#set_success (read_reportSquareResponse iprot)
            else
              iprot#skip _t11827)
          | 1 -> (if _t11827 = Protocol.T_STRUCT then
              _str11826#set_e (read_squareException iprot)
            else
              iprot#skip _t11827)
          | _ -> iprot#skip _t11827);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11826

class updateSquareMemberRelation_args =
object (self)
  val mutable _request : updateSquareMemberRelationRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "updateSquareMemberRelation_args.request") | Some _x11829 -> _x11829
  method set_request _x11829 = _request <- Some _x11829
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareMemberRelation_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareMemberRelation_args (iprot : Protocol.t) =
  let _str11832 = new updateSquareMemberRelation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11833,_id11834) = iprot#readFieldBegin in
        if _t11833 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11834 with 
          | 1 -> (if _t11833 = Protocol.T_STRUCT then
              _str11832#set_request (read_updateSquareMemberRelationRequest iprot)
            else
              iprot#skip _t11833)
          | _ -> iprot#skip _t11833);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11832

class updateSquareMemberRelation_result =
object (self)
  val mutable _success : updateSquareMemberRelationResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSquareMemberRelation_result.success") | Some _x11835 -> _x11835
  method set_success _x11835 = _success <- Some _x11835
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSquareMemberRelation_result.e") | Some _x11836 -> _x11836
  method set_e _x11836 = _e <- Some _x11836
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareMemberRelation_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareMemberRelation_result (iprot : Protocol.t) =
  let _str11839 = new updateSquareMemberRelation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11840,_id11841) = iprot#readFieldBegin in
        if _t11840 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11841 with 
          | 0 -> (if _t11840 = Protocol.T_STRUCT then
              _str11839#set_success (read_updateSquareMemberRelationResponse iprot)
            else
              iprot#skip _t11840)
          | 1 -> (if _t11840 = Protocol.T_STRUCT then
              _str11839#set_e (read_squareException iprot)
            else
              iprot#skip _t11840)
          | _ -> iprot#skip _t11840);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11839

class updateSquareAuthority_args =
object (self)
  val mutable _request : updateSquareAuthorityRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "updateSquareAuthority_args.request") | Some _x11842 -> _x11842
  method set_request _x11842 = _request <- Some _x11842
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareAuthority_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareAuthority_args (iprot : Protocol.t) =
  let _str11845 = new updateSquareAuthority_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11846,_id11847) = iprot#readFieldBegin in
        if _t11846 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11847 with 
          | 1 -> (if _t11846 = Protocol.T_STRUCT then
              _str11845#set_request (read_updateSquareAuthorityRequest iprot)
            else
              iprot#skip _t11846)
          | _ -> iprot#skip _t11846);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11845

class updateSquareAuthority_result =
object (self)
  val mutable _success : updateSquareAuthorityResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSquareAuthority_result.success") | Some _x11848 -> _x11848
  method set_success _x11848 = _success <- Some _x11848
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSquareAuthority_result.e") | Some _x11849 -> _x11849
  method set_e _x11849 = _e <- Some _x11849
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareAuthority_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareAuthority_result (iprot : Protocol.t) =
  let _str11852 = new updateSquareAuthority_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11853,_id11854) = iprot#readFieldBegin in
        if _t11853 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11854 with 
          | 0 -> (if _t11853 = Protocol.T_STRUCT then
              _str11852#set_success (read_updateSquareAuthorityResponse iprot)
            else
              iprot#skip _t11853)
          | 1 -> (if _t11853 = Protocol.T_STRUCT then
              _str11852#set_e (read_squareException iprot)
            else
              iprot#skip _t11853)
          | _ -> iprot#skip _t11853);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11852

class updateSquareChatMember_args =
object (self)
  val mutable _request : updateSquareChatMemberRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "updateSquareChatMember_args.request") | Some _x11855 -> _x11855
  method set_request _x11855 = _request <- Some _x11855
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareChatMember_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareChatMember_args (iprot : Protocol.t) =
  let _str11858 = new updateSquareChatMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11859,_id11860) = iprot#readFieldBegin in
        if _t11859 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11860 with 
          | 1 -> (if _t11859 = Protocol.T_STRUCT then
              _str11858#set_request (read_updateSquareChatMemberRequest iprot)
            else
              iprot#skip _t11859)
          | _ -> iprot#skip _t11859);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11858

class updateSquareChatMember_result =
object (self)
  val mutable _success : updateSquareChatMemberResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSquareChatMember_result.success") | Some _x11861 -> _x11861
  method set_success _x11861 = _success <- Some _x11861
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSquareChatMember_result.e") | Some _x11862 -> _x11862
  method set_e _x11862 = _e <- Some _x11862
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareChatMember_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareChatMember_result (iprot : Protocol.t) =
  let _str11865 = new updateSquareChatMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11866,_id11867) = iprot#readFieldBegin in
        if _t11866 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11867 with 
          | 0 -> (if _t11866 = Protocol.T_STRUCT then
              _str11865#set_success (read_updateSquareChatMemberResponse iprot)
            else
              iprot#skip _t11866)
          | 1 -> (if _t11866 = Protocol.T_STRUCT then
              _str11865#set_e (read_squareException iprot)
            else
              iprot#skip _t11866)
          | _ -> iprot#skip _t11866);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11865

class updateSquareChat_args =
object (self)
  val mutable _request : updateSquareChatRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "updateSquareChat_args.request") | Some _x11868 -> _x11868
  method set_request _x11868 = _request <- Some _x11868
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareChat_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareChat_args (iprot : Protocol.t) =
  let _str11871 = new updateSquareChat_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11872,_id11873) = iprot#readFieldBegin in
        if _t11872 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11873 with 
          | 1 -> (if _t11872 = Protocol.T_STRUCT then
              _str11871#set_request (read_updateSquareChatRequest iprot)
            else
              iprot#skip _t11872)
          | _ -> iprot#skip _t11872);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11871

class updateSquareChat_result =
object (self)
  val mutable _success : updateSquareChatResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSquareChat_result.success") | Some _x11874 -> _x11874
  method set_success _x11874 = _success <- Some _x11874
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSquareChat_result.e") | Some _x11875 -> _x11875
  method set_e _x11875 = _e <- Some _x11875
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareChat_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareChat_result (iprot : Protocol.t) =
  let _str11878 = new updateSquareChat_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11879,_id11880) = iprot#readFieldBegin in
        if _t11879 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11880 with 
          | 0 -> (if _t11879 = Protocol.T_STRUCT then
              _str11878#set_success (read_updateSquareChatResponse iprot)
            else
              iprot#skip _t11879)
          | 1 -> (if _t11879 = Protocol.T_STRUCT then
              _str11878#set_e (read_squareException iprot)
            else
              iprot#skip _t11879)
          | _ -> iprot#skip _t11879);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11878

class refreshSubscriptions_args =
object (self)
  val mutable _request : refreshSubscriptionsRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "refreshSubscriptions_args.request") | Some _x11881 -> _x11881
  method set_request _x11881 = _request <- Some _x11881
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "refreshSubscriptions_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_refreshSubscriptions_args (iprot : Protocol.t) =
  let _str11884 = new refreshSubscriptions_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11885,_id11886) = iprot#readFieldBegin in
        if _t11885 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11886 with 
          | 1 -> (if _t11885 = Protocol.T_STRUCT then
              _str11884#set_request (read_refreshSubscriptionsRequest iprot)
            else
              iprot#skip _t11885)
          | _ -> iprot#skip _t11885);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11884

class refreshSubscriptions_result =
object (self)
  val mutable _success : refreshSubscriptionsResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "refreshSubscriptions_result.success") | Some _x11887 -> _x11887
  method set_success _x11887 = _success <- Some _x11887
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "refreshSubscriptions_result.e") | Some _x11888 -> _x11888
  method set_e _x11888 = _e <- Some _x11888
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "refreshSubscriptions_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_refreshSubscriptions_result (iprot : Protocol.t) =
  let _str11891 = new refreshSubscriptions_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11892,_id11893) = iprot#readFieldBegin in
        if _t11892 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11893 with 
          | 0 -> (if _t11892 = Protocol.T_STRUCT then
              _str11891#set_success (read_refreshSubscriptionsResponse iprot)
            else
              iprot#skip _t11892)
          | 1 -> (if _t11892 = Protocol.T_STRUCT then
              _str11891#set_e (read_squareException iprot)
            else
              iprot#skip _t11892)
          | _ -> iprot#skip _t11892);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11891

class removeSubscriptions_args =
object (self)
  val mutable _request : removeSubscriptionsRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "removeSubscriptions_args.request") | Some _x11894 -> _x11894
  method set_request _x11894 = _request <- Some _x11894
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeSubscriptions_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeSubscriptions_args (iprot : Protocol.t) =
  let _str11897 = new removeSubscriptions_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11898,_id11899) = iprot#readFieldBegin in
        if _t11898 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11899 with 
          | 1 -> (if _t11898 = Protocol.T_STRUCT then
              _str11897#set_request (read_removeSubscriptionsRequest iprot)
            else
              iprot#skip _t11898)
          | _ -> iprot#skip _t11898);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11897

class removeSubscriptions_result =
object (self)
  val mutable _success : removeSubscriptionsResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "removeSubscriptions_result.success") | Some _x11900 -> _x11900
  method set_success _x11900 = _success <- Some _x11900
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeSubscriptions_result.e") | Some _x11901 -> _x11901
  method set_e _x11901 = _e <- Some _x11901
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeSubscriptions_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeSubscriptions_result (iprot : Protocol.t) =
  let _str11904 = new removeSubscriptions_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11905,_id11906) = iprot#readFieldBegin in
        if _t11905 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11906 with 
          | 0 -> (if _t11905 = Protocol.T_STRUCT then
              _str11904#set_success (read_removeSubscriptionsResponse iprot)
            else
              iprot#skip _t11905)
          | 1 -> (if _t11905 = Protocol.T_STRUCT then
              _str11904#set_e (read_squareException iprot)
            else
              iprot#skip _t11905)
          | _ -> iprot#skip _t11905);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11904

class rejectSquareMembers_args =
object (self)
  val mutable _request : rejectSquareMembersRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "rejectSquareMembers_args.request") | Some _x11907 -> _x11907
  method set_request _x11907 = _request <- Some _x11907
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "rejectSquareMembers_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_rejectSquareMembers_args (iprot : Protocol.t) =
  let _str11910 = new rejectSquareMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11911,_id11912) = iprot#readFieldBegin in
        if _t11911 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11912 with 
          | 1 -> (if _t11911 = Protocol.T_STRUCT then
              _str11910#set_request (read_rejectSquareMembersRequest iprot)
            else
              iprot#skip _t11911)
          | _ -> iprot#skip _t11911);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11910

class rejectSquareMembers_result =
object (self)
  val mutable _success : rejectSquareMembersResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "rejectSquareMembers_result.success") | Some _x11913 -> _x11913
  method set_success _x11913 = _success <- Some _x11913
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "rejectSquareMembers_result.e") | Some _x11914 -> _x11914
  method set_e _x11914 = _e <- Some _x11914
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "rejectSquareMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_rejectSquareMembers_result (iprot : Protocol.t) =
  let _str11917 = new rejectSquareMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11918,_id11919) = iprot#readFieldBegin in
        if _t11918 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11919 with 
          | 0 -> (if _t11918 = Protocol.T_STRUCT then
              _str11917#set_success (read_rejectSquareMembersResponse iprot)
            else
              iprot#skip _t11918)
          | 1 -> (if _t11918 = Protocol.T_STRUCT then
              _str11917#set_e (read_squareException iprot)
            else
              iprot#skip _t11918)
          | _ -> iprot#skip _t11918);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11917

class updateSquareMembers_args =
object (self)
  val mutable _request : updateSquareMembersRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "updateSquareMembers_args.request") | Some _x11920 -> _x11920
  method set_request _x11920 = _request <- Some _x11920
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareMembers_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareMembers_args (iprot : Protocol.t) =
  let _str11923 = new updateSquareMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11924,_id11925) = iprot#readFieldBegin in
        if _t11924 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11925 with 
          | 1 -> (if _t11924 = Protocol.T_STRUCT then
              _str11923#set_request (read_updateSquareMembersRequest iprot)
            else
              iprot#skip _t11924)
          | _ -> iprot#skip _t11924);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11923

class updateSquareMembers_result =
object (self)
  val mutable _success : updateSquareMembersResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSquareMembers_result.success") | Some _x11926 -> _x11926
  method set_success _x11926 = _success <- Some _x11926
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSquareMembers_result.e") | Some _x11927 -> _x11927
  method set_e _x11927 = _e <- Some _x11927
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareMembers_result (iprot : Protocol.t) =
  let _str11930 = new updateSquareMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11931,_id11932) = iprot#readFieldBegin in
        if _t11931 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11932 with 
          | 0 -> (if _t11931 = Protocol.T_STRUCT then
              _str11930#set_success (read_updateSquareMembersResponse iprot)
            else
              iprot#skip _t11931)
          | 1 -> (if _t11931 = Protocol.T_STRUCT then
              _str11930#set_e (read_squareException iprot)
            else
              iprot#skip _t11931)
          | _ -> iprot#skip _t11931);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11930

class updateSquareMember_args =
object (self)
  val mutable _request : updateSquareMemberRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "updateSquareMember_args.request") | Some _x11933 -> _x11933
  method set_request _x11933 = _request <- Some _x11933
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareMember_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareMember_args (iprot : Protocol.t) =
  let _str11936 = new updateSquareMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11937,_id11938) = iprot#readFieldBegin in
        if _t11937 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11938 with 
          | 1 -> (if _t11937 = Protocol.T_STRUCT then
              _str11936#set_request (read_updateSquareMemberRequest iprot)
            else
              iprot#skip _t11937)
          | _ -> iprot#skip _t11937);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11936

class updateSquareMember_result =
object (self)
  val mutable _success : updateSquareMemberResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSquareMember_result.success") | Some _x11939 -> _x11939
  method set_success _x11939 = _success <- Some _x11939
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSquareMember_result.e") | Some _x11940 -> _x11940
  method set_e _x11940 = _e <- Some _x11940
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareMember_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareMember_result (iprot : Protocol.t) =
  let _str11943 = new updateSquareMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11944,_id11945) = iprot#readFieldBegin in
        if _t11944 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11945 with 
          | 0 -> (if _t11944 = Protocol.T_STRUCT then
              _str11943#set_success (read_updateSquareMemberResponse iprot)
            else
              iprot#skip _t11944)
          | 1 -> (if _t11944 = Protocol.T_STRUCT then
              _str11943#set_e (read_squareException iprot)
            else
              iprot#skip _t11944)
          | _ -> iprot#skip _t11944);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11943

class updateSquareFeatureSet_args =
object (self)
  val mutable _request : updateSquareFeatureSetRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "updateSquareFeatureSet_args.request") | Some _x11946 -> _x11946
  method set_request _x11946 = _request <- Some _x11946
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareFeatureSet_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareFeatureSet_args (iprot : Protocol.t) =
  let _str11949 = new updateSquareFeatureSet_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11950,_id11951) = iprot#readFieldBegin in
        if _t11950 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11951 with 
          | 1 -> (if _t11950 = Protocol.T_STRUCT then
              _str11949#set_request (read_updateSquareFeatureSetRequest iprot)
            else
              iprot#skip _t11950)
          | _ -> iprot#skip _t11950);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11949

class updateSquareFeatureSet_result =
object (self)
  val mutable _success : updateSquareFeatureSetResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSquareFeatureSet_result.success") | Some _x11952 -> _x11952
  method set_success _x11952 = _success <- Some _x11952
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSquareFeatureSet_result.e") | Some _x11953 -> _x11953
  method set_e _x11953 = _e <- Some _x11953
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquareFeatureSet_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquareFeatureSet_result (iprot : Protocol.t) =
  let _str11956 = new updateSquareFeatureSet_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11957,_id11958) = iprot#readFieldBegin in
        if _t11957 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11958 with 
          | 0 -> (if _t11957 = Protocol.T_STRUCT then
              _str11956#set_success (read_updateSquareFeatureSetResponse iprot)
            else
              iprot#skip _t11957)
          | 1 -> (if _t11957 = Protocol.T_STRUCT then
              _str11956#set_e (read_squareException iprot)
            else
              iprot#skip _t11957)
          | _ -> iprot#skip _t11957);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11956

class getSquareFeatureSet_args =
object (self)
  val mutable _request : getSquareFeatureSetRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareFeatureSet_args.request") | Some _x11959 -> _x11959
  method set_request _x11959 = _request <- Some _x11959
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareFeatureSet_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareFeatureSet_args (iprot : Protocol.t) =
  let _str11962 = new getSquareFeatureSet_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11963,_id11964) = iprot#readFieldBegin in
        if _t11963 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11964 with 
          | 1 -> (if _t11963 = Protocol.T_STRUCT then
              _str11962#set_request (read_getSquareFeatureSetRequest iprot)
            else
              iprot#skip _t11963)
          | _ -> iprot#skip _t11963);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11962

class getSquareFeatureSet_result =
object (self)
  val mutable _success : getSquareFeatureSetResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareFeatureSet_result.success") | Some _x11965 -> _x11965
  method set_success _x11965 = _success <- Some _x11965
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareFeatureSet_result.e") | Some _x11966 -> _x11966
  method set_e _x11966 = _e <- Some _x11966
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareFeatureSet_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareFeatureSet_result (iprot : Protocol.t) =
  let _str11969 = new getSquareFeatureSet_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11970,_id11971) = iprot#readFieldBegin in
        if _t11970 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11971 with 
          | 0 -> (if _t11970 = Protocol.T_STRUCT then
              _str11969#set_success (read_getSquareFeatureSetResponse iprot)
            else
              iprot#skip _t11970)
          | 1 -> (if _t11970 = Protocol.T_STRUCT then
              _str11969#set_e (read_squareException iprot)
            else
              iprot#skip _t11970)
          | _ -> iprot#skip _t11970);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11969

class searchSquares_args =
object (self)
  val mutable _request : searchSquaresRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "searchSquares_args.request") | Some _x11972 -> _x11972
  method set_request _x11972 = _request <- Some _x11972
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "searchSquares_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_searchSquares_args (iprot : Protocol.t) =
  let _str11975 = new searchSquares_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11976,_id11977) = iprot#readFieldBegin in
        if _t11976 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11977 with 
          | 1 -> (if _t11976 = Protocol.T_STRUCT then
              _str11975#set_request (read_searchSquaresRequest iprot)
            else
              iprot#skip _t11976)
          | _ -> iprot#skip _t11976);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11975

class searchSquares_result =
object (self)
  val mutable _success : searchSquaresResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "searchSquares_result.success") | Some _x11978 -> _x11978
  method set_success _x11978 = _success <- Some _x11978
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "searchSquares_result.e") | Some _x11979 -> _x11979
  method set_e _x11979 = _e <- Some _x11979
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "searchSquares_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_searchSquares_result (iprot : Protocol.t) =
  let _str11982 = new searchSquares_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11983,_id11984) = iprot#readFieldBegin in
        if _t11983 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11984 with 
          | 0 -> (if _t11983 = Protocol.T_STRUCT then
              _str11982#set_success (read_searchSquaresResponse iprot)
            else
              iprot#skip _t11983)
          | 1 -> (if _t11983 = Protocol.T_STRUCT then
              _str11982#set_e (read_squareException iprot)
            else
              iprot#skip _t11983)
          | _ -> iprot#skip _t11983);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11982

class updateSquare_args =
object (self)
  val mutable _request : updateSquareRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "updateSquare_args.request") | Some _x11985 -> _x11985
  method set_request _x11985 = _request <- Some _x11985
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquare_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquare_args (iprot : Protocol.t) =
  let _str11988 = new updateSquare_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11989,_id11990) = iprot#readFieldBegin in
        if _t11989 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11990 with 
          | 1 -> (if _t11989 = Protocol.T_STRUCT then
              _str11988#set_request (read_updateSquareRequest iprot)
            else
              iprot#skip _t11989)
          | _ -> iprot#skip _t11989);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11988

class updateSquare_result =
object (self)
  val mutable _success : updateSquareResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateSquare_result.success") | Some _x11991 -> _x11991
  method set_success _x11991 = _success <- Some _x11991
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateSquare_result.e") | Some _x11992 -> _x11992
  method set_e _x11992 = _e <- Some _x11992
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateSquare_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateSquare_result (iprot : Protocol.t) =
  let _str11995 = new updateSquare_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11996,_id11997) = iprot#readFieldBegin in
        if _t11996 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11997 with 
          | 0 -> (if _t11996 = Protocol.T_STRUCT then
              _str11995#set_success (read_updateSquareResponse iprot)
            else
              iprot#skip _t11996)
          | 1 -> (if _t11996 = Protocol.T_STRUCT then
              _str11995#set_e (read_squareException iprot)
            else
              iprot#skip _t11996)
          | _ -> iprot#skip _t11996);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11995

class getCategories_args =
object (self)
  val mutable _request : getSquareCategoriesRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getCategories_args.request") | Some _x11998 -> _x11998
  method set_request _x11998 = _request <- Some _x11998
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCategories_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCategories_args (iprot : Protocol.t) =
  let _str12001 = new getCategories_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12002,_id12003) = iprot#readFieldBegin in
        if _t12002 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12003 with 
          | 1 -> (if _t12002 = Protocol.T_STRUCT then
              _str12001#set_request (read_getSquareCategoriesRequest iprot)
            else
              iprot#skip _t12002)
          | _ -> iprot#skip _t12002);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12001

class getCategories_result =
object (self)
  val mutable _success : getSquareCategoriesResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCategories_result.success") | Some _x12004 -> _x12004
  method set_success _x12004 = _success <- Some _x12004
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCategories_result.e") | Some _x12005 -> _x12005
  method set_e _x12005 = _e <- Some _x12005
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCategories_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCategories_result (iprot : Protocol.t) =
  let _str12008 = new getCategories_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12009,_id12010) = iprot#readFieldBegin in
        if _t12009 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12010 with 
          | 0 -> (if _t12009 = Protocol.T_STRUCT then
              _str12008#set_success (read_getSquareCategoriesResponse iprot)
            else
              iprot#skip _t12009)
          | 1 -> (if _t12009 = Protocol.T_STRUCT then
              _str12008#set_e (read_squareException iprot)
            else
              iprot#skip _t12009)
          | _ -> iprot#skip _t12009);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12008

class searchSquareMembers_args =
object (self)
  val mutable _request : searchSquareMembersRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "searchSquareMembers_args.request") | Some _x12011 -> _x12011
  method set_request _x12011 = _request <- Some _x12011
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "searchSquareMembers_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_searchSquareMembers_args (iprot : Protocol.t) =
  let _str12014 = new searchSquareMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12015,_id12016) = iprot#readFieldBegin in
        if _t12015 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12016 with 
          | 1 -> (if _t12015 = Protocol.T_STRUCT then
              _str12014#set_request (read_searchSquareMembersRequest iprot)
            else
              iprot#skip _t12015)
          | _ -> iprot#skip _t12015);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12014

class searchSquareMembers_result =
object (self)
  val mutable _success : searchSquareMembersResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "searchSquareMembers_result.success") | Some _x12017 -> _x12017
  method set_success _x12017 = _success <- Some _x12017
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "searchSquareMembers_result.e") | Some _x12018 -> _x12018
  method set_e _x12018 = _e <- Some _x12018
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "searchSquareMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_searchSquareMembers_result (iprot : Protocol.t) =
  let _str12021 = new searchSquareMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12022,_id12023) = iprot#readFieldBegin in
        if _t12022 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12023 with 
          | 0 -> (if _t12022 = Protocol.T_STRUCT then
              _str12021#set_success (read_searchSquareMembersResponse iprot)
            else
              iprot#skip _t12022)
          | 1 -> (if _t12022 = Protocol.T_STRUCT then
              _str12021#set_e (read_squareException iprot)
            else
              iprot#skip _t12022)
          | _ -> iprot#skip _t12022);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12021

class fetchSquareChatEvents_args =
object (self)
  val mutable _request : fetchSquareChatEventsRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "fetchSquareChatEvents_args.request") | Some _x12024 -> _x12024
  method set_request _x12024 = _request <- Some _x12024
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchSquareChatEvents_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchSquareChatEvents_args (iprot : Protocol.t) =
  let _str12027 = new fetchSquareChatEvents_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12028,_id12029) = iprot#readFieldBegin in
        if _t12028 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12029 with 
          | 1 -> (if _t12028 = Protocol.T_STRUCT then
              _str12027#set_request (read_fetchSquareChatEventsRequest iprot)
            else
              iprot#skip _t12028)
          | _ -> iprot#skip _t12028);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12027

class fetchSquareChatEvents_result =
object (self)
  val mutable _success : fetchSquareChatEventsResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "fetchSquareChatEvents_result.success") | Some _x12030 -> _x12030
  method set_success _x12030 = _success <- Some _x12030
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "fetchSquareChatEvents_result.e") | Some _x12031 -> _x12031
  method set_e _x12031 = _e <- Some _x12031
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchSquareChatEvents_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchSquareChatEvents_result (iprot : Protocol.t) =
  let _str12034 = new fetchSquareChatEvents_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12035,_id12036) = iprot#readFieldBegin in
        if _t12035 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12036 with 
          | 0 -> (if _t12035 = Protocol.T_STRUCT then
              _str12034#set_success (read_fetchSquareChatEventsResponse iprot)
            else
              iprot#skip _t12035)
          | 1 -> (if _t12035 = Protocol.T_STRUCT then
              _str12034#set_e (read_squareException iprot)
            else
              iprot#skip _t12035)
          | _ -> iprot#skip _t12035);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12034

class fetchMyEvents_args =
object (self)
  val mutable _request : fetchMyEventsRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "fetchMyEvents_args.request") | Some _x12037 -> _x12037
  method set_request _x12037 = _request <- Some _x12037
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchMyEvents_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchMyEvents_args (iprot : Protocol.t) =
  let _str12040 = new fetchMyEvents_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12041,_id12042) = iprot#readFieldBegin in
        if _t12041 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12042 with 
          | 1 -> (if _t12041 = Protocol.T_STRUCT then
              _str12040#set_request (read_fetchMyEventsRequest iprot)
            else
              iprot#skip _t12041)
          | _ -> iprot#skip _t12041);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12040

class fetchMyEvents_result =
object (self)
  val mutable _success : fetchMyEventsResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "fetchMyEvents_result.success") | Some _x12043 -> _x12043
  method set_success _x12043 = _success <- Some _x12043
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "fetchMyEvents_result.e") | Some _x12044 -> _x12044
  method set_e _x12044 = _e <- Some _x12044
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "fetchMyEvents_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_fetchMyEvents_result (iprot : Protocol.t) =
  let _str12047 = new fetchMyEvents_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12048,_id12049) = iprot#readFieldBegin in
        if _t12048 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12049 with 
          | 0 -> (if _t12048 = Protocol.T_STRUCT then
              _str12047#set_success (read_fetchMyEventsResponse iprot)
            else
              iprot#skip _t12048)
          | 1 -> (if _t12048 = Protocol.T_STRUCT then
              _str12047#set_e (read_squareException iprot)
            else
              iprot#skip _t12048)
          | _ -> iprot#skip _t12048);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12047

class markAsRead_args =
object (self)
  val mutable _request : markAsReadRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "markAsRead_args.request") | Some _x12050 -> _x12050
  method set_request _x12050 = _request <- Some _x12050
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "markAsRead_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_markAsRead_args (iprot : Protocol.t) =
  let _str12053 = new markAsRead_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12054,_id12055) = iprot#readFieldBegin in
        if _t12054 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12055 with 
          | 1 -> (if _t12054 = Protocol.T_STRUCT then
              _str12053#set_request (read_markAsReadRequest iprot)
            else
              iprot#skip _t12054)
          | _ -> iprot#skip _t12054);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12053

class markAsRead_result =
object (self)
  val mutable _success : markAsReadResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "markAsRead_result.success") | Some _x12056 -> _x12056
  method set_success _x12056 = _success <- Some _x12056
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "markAsRead_result.e") | Some _x12057 -> _x12057
  method set_e _x12057 = _e <- Some _x12057
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "markAsRead_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_markAsRead_result (iprot : Protocol.t) =
  let _str12060 = new markAsRead_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12061,_id12062) = iprot#readFieldBegin in
        if _t12061 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12062 with 
          | 0 -> (if _t12061 = Protocol.T_STRUCT then
              _str12060#set_success (read_markAsReadResponse iprot)
            else
              iprot#skip _t12061)
          | 1 -> (if _t12061 = Protocol.T_STRUCT then
              _str12060#set_e (read_squareException iprot)
            else
              iprot#skip _t12061)
          | _ -> iprot#skip _t12061);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12060

class getSquareAuthority_args =
object (self)
  val mutable _request : getSquareAuthorityRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareAuthority_args.request") | Some _x12063 -> _x12063
  method set_request _x12063 = _request <- Some _x12063
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareAuthority_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareAuthority_args (iprot : Protocol.t) =
  let _str12066 = new getSquareAuthority_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12067,_id12068) = iprot#readFieldBegin in
        if _t12067 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12068 with 
          | 1 -> (if _t12067 = Protocol.T_STRUCT then
              _str12066#set_request (read_getSquareAuthorityRequest iprot)
            else
              iprot#skip _t12067)
          | _ -> iprot#skip _t12067);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12066

class getSquareAuthority_result =
object (self)
  val mutable _success : getSquareAuthorityResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareAuthority_result.success") | Some _x12069 -> _x12069
  method set_success _x12069 = _success <- Some _x12069
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareAuthority_result.e") | Some _x12070 -> _x12070
  method set_e _x12070 = _e <- Some _x12070
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareAuthority_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareAuthority_result (iprot : Protocol.t) =
  let _str12073 = new getSquareAuthority_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12074,_id12075) = iprot#readFieldBegin in
        if _t12074 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12075 with 
          | 0 -> (if _t12074 = Protocol.T_STRUCT then
              _str12073#set_success (read_getSquareAuthorityResponse iprot)
            else
              iprot#skip _t12074)
          | 1 -> (if _t12074 = Protocol.T_STRUCT then
              _str12073#set_e (read_squareException iprot)
            else
              iprot#skip _t12074)
          | _ -> iprot#skip _t12074);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12073

class sendMessage_args =
object (self)
  val mutable _request : sendMessageRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "sendMessage_args.request") | Some _x12076 -> _x12076
  method set_request _x12076 = _request <- Some _x12076
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessage_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessage_args (iprot : Protocol.t) =
  let _str12079 = new sendMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12080,_id12081) = iprot#readFieldBegin in
        if _t12080 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12081 with 
          | 1 -> (if _t12080 = Protocol.T_STRUCT then
              _str12079#set_request (read_sendMessageRequest iprot)
            else
              iprot#skip _t12080)
          | _ -> iprot#skip _t12080);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12079

class sendMessage_result =
object (self)
  val mutable _success : sendMessageResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendMessage_result.success") | Some _x12082 -> _x12082
  method set_success _x12082 = _success <- Some _x12082
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendMessage_result.e") | Some _x12083 -> _x12083
  method set_e _x12083 = _e <- Some _x12083
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessage_result (iprot : Protocol.t) =
  let _str12086 = new sendMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12087,_id12088) = iprot#readFieldBegin in
        if _t12087 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12088 with 
          | 0 -> (if _t12087 = Protocol.T_STRUCT then
              _str12086#set_success (read_sendMessageResponse iprot)
            else
              iprot#skip _t12087)
          | 1 -> (if _t12087 = Protocol.T_STRUCT then
              _str12086#set_e (read_squareException iprot)
            else
              iprot#skip _t12087)
          | _ -> iprot#skip _t12087);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12086

class leaveSquare_args =
object (self)
  val mutable _request : leaveSquareRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "leaveSquare_args.request") | Some _x12089 -> _x12089
  method set_request _x12089 = _request <- Some _x12089
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "leaveSquare_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_leaveSquare_args (iprot : Protocol.t) =
  let _str12092 = new leaveSquare_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12093,_id12094) = iprot#readFieldBegin in
        if _t12093 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12094 with 
          | 1 -> (if _t12093 = Protocol.T_STRUCT then
              _str12092#set_request (read_leaveSquareRequest iprot)
            else
              iprot#skip _t12093)
          | _ -> iprot#skip _t12093);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12092

class leaveSquare_result =
object (self)
  val mutable _success : leaveSquareResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "leaveSquare_result.success") | Some _x12095 -> _x12095
  method set_success _x12095 = _success <- Some _x12095
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "leaveSquare_result.e") | Some _x12096 -> _x12096
  method set_e _x12096 = _e <- Some _x12096
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "leaveSquare_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_leaveSquare_result (iprot : Protocol.t) =
  let _str12099 = new leaveSquare_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12100,_id12101) = iprot#readFieldBegin in
        if _t12100 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12101 with 
          | 0 -> (if _t12100 = Protocol.T_STRUCT then
              _str12099#set_success (read_leaveSquareResponse iprot)
            else
              iprot#skip _t12100)
          | 1 -> (if _t12100 = Protocol.T_STRUCT then
              _str12099#set_e (read_squareException iprot)
            else
              iprot#skip _t12100)
          | _ -> iprot#skip _t12100);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12099

class leaveSquareChat_args =
object (self)
  val mutable _request : leaveSquareChatRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "leaveSquareChat_args.request") | Some _x12102 -> _x12102
  method set_request _x12102 = _request <- Some _x12102
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "leaveSquareChat_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_leaveSquareChat_args (iprot : Protocol.t) =
  let _str12105 = new leaveSquareChat_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12106,_id12107) = iprot#readFieldBegin in
        if _t12106 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12107 with 
          | 1 -> (if _t12106 = Protocol.T_STRUCT then
              _str12105#set_request (read_leaveSquareChatRequest iprot)
            else
              iprot#skip _t12106)
          | _ -> iprot#skip _t12106);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12105

class leaveSquareChat_result =
object (self)
  val mutable _success : leaveSquareChatResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "leaveSquareChat_result.success") | Some _x12108 -> _x12108
  method set_success _x12108 = _success <- Some _x12108
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "leaveSquareChat_result.e") | Some _x12109 -> _x12109
  method set_e _x12109 = _e <- Some _x12109
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "leaveSquareChat_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_leaveSquareChat_result (iprot : Protocol.t) =
  let _str12112 = new leaveSquareChat_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12113,_id12114) = iprot#readFieldBegin in
        if _t12113 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12114 with 
          | 0 -> (if _t12113 = Protocol.T_STRUCT then
              _str12112#set_success (read_leaveSquareChatResponse iprot)
            else
              iprot#skip _t12113)
          | 1 -> (if _t12113 = Protocol.T_STRUCT then
              _str12112#set_e (read_squareException iprot)
            else
              iprot#skip _t12113)
          | _ -> iprot#skip _t12113);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12112

class joinSquareChat_args =
object (self)
  val mutable _request : joinSquareChatRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "joinSquareChat_args.request") | Some _x12115 -> _x12115
  method set_request _x12115 = _request <- Some _x12115
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "joinSquareChat_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_joinSquareChat_args (iprot : Protocol.t) =
  let _str12118 = new joinSquareChat_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12119,_id12120) = iprot#readFieldBegin in
        if _t12119 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12120 with 
          | 1 -> (if _t12119 = Protocol.T_STRUCT then
              _str12118#set_request (read_joinSquareChatRequest iprot)
            else
              iprot#skip _t12119)
          | _ -> iprot#skip _t12119);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12118

class joinSquareChat_result =
object (self)
  val mutable _success : joinSquareChatResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "joinSquareChat_result.success") | Some _x12121 -> _x12121
  method set_success _x12121 = _success <- Some _x12121
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "joinSquareChat_result.e") | Some _x12122 -> _x12122
  method set_e _x12122 = _e <- Some _x12122
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "joinSquareChat_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_joinSquareChat_result (iprot : Protocol.t) =
  let _str12125 = new joinSquareChat_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12126,_id12127) = iprot#readFieldBegin in
        if _t12126 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12127 with 
          | 0 -> (if _t12126 = Protocol.T_STRUCT then
              _str12125#set_success (read_joinSquareChatResponse iprot)
            else
              iprot#skip _t12126)
          | 1 -> (if _t12126 = Protocol.T_STRUCT then
              _str12125#set_e (read_squareException iprot)
            else
              iprot#skip _t12126)
          | _ -> iprot#skip _t12126);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12125

class joinSquare_args =
object (self)
  val mutable _request : joinSquareRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "joinSquare_args.request") | Some _x12128 -> _x12128
  method set_request _x12128 = _request <- Some _x12128
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "joinSquare_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_joinSquare_args (iprot : Protocol.t) =
  let _str12131 = new joinSquare_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12132,_id12133) = iprot#readFieldBegin in
        if _t12132 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12133 with 
          | 1 -> (if _t12132 = Protocol.T_STRUCT then
              _str12131#set_request (read_joinSquareRequest iprot)
            else
              iprot#skip _t12132)
          | _ -> iprot#skip _t12132);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12131

class joinSquare_result =
object (self)
  val mutable _success : joinSquareResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "joinSquare_result.success") | Some _x12134 -> _x12134
  method set_success _x12134 = _success <- Some _x12134
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "joinSquare_result.e") | Some _x12135 -> _x12135
  method set_e _x12135 = _e <- Some _x12135
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "joinSquare_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_joinSquare_result (iprot : Protocol.t) =
  let _str12138 = new joinSquare_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12139,_id12140) = iprot#readFieldBegin in
        if _t12139 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12140 with 
          | 0 -> (if _t12139 = Protocol.T_STRUCT then
              _str12138#set_success (read_joinSquareResponse iprot)
            else
              iprot#skip _t12139)
          | 1 -> (if _t12139 = Protocol.T_STRUCT then
              _str12138#set_e (read_squareException iprot)
            else
              iprot#skip _t12139)
          | _ -> iprot#skip _t12139);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12138

class inviteToSquare_args =
object (self)
  val mutable _request : inviteToSquareRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "inviteToSquare_args.request") | Some _x12141 -> _x12141
  method set_request _x12141 = _request <- Some _x12141
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteToSquare_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteToSquare_args (iprot : Protocol.t) =
  let _str12144 = new inviteToSquare_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12145,_id12146) = iprot#readFieldBegin in
        if _t12145 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12146 with 
          | 1 -> (if _t12145 = Protocol.T_STRUCT then
              _str12144#set_request (read_inviteToSquareRequest iprot)
            else
              iprot#skip _t12145)
          | _ -> iprot#skip _t12145);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12144

class inviteToSquare_result =
object (self)
  val mutable _success : inviteToSquareResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "inviteToSquare_result.success") | Some _x12147 -> _x12147
  method set_success _x12147 = _success <- Some _x12147
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "inviteToSquare_result.e") | Some _x12148 -> _x12148
  method set_e _x12148 = _e <- Some _x12148
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteToSquare_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteToSquare_result (iprot : Protocol.t) =
  let _str12151 = new inviteToSquare_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12152,_id12153) = iprot#readFieldBegin in
        if _t12152 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12153 with 
          | 0 -> (if _t12152 = Protocol.T_STRUCT then
              _str12151#set_success (read_inviteToSquareResponse iprot)
            else
              iprot#skip _t12152)
          | 1 -> (if _t12152 = Protocol.T_STRUCT then
              _str12151#set_e (read_squareException iprot)
            else
              iprot#skip _t12152)
          | _ -> iprot#skip _t12152);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12151

class inviteToSquareChat_args =
object (self)
  val mutable _request : inviteToSquareChatRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "inviteToSquareChat_args.request") | Some _x12154 -> _x12154
  method set_request _x12154 = _request <- Some _x12154
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteToSquareChat_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteToSquareChat_args (iprot : Protocol.t) =
  let _str12157 = new inviteToSquareChat_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12158,_id12159) = iprot#readFieldBegin in
        if _t12158 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12159 with 
          | 1 -> (if _t12158 = Protocol.T_STRUCT then
              _str12157#set_request (read_inviteToSquareChatRequest iprot)
            else
              iprot#skip _t12158)
          | _ -> iprot#skip _t12158);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12157

class inviteToSquareChat_result =
object (self)
  val mutable _success : inviteToSquareChatResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "inviteToSquareChat_result.success") | Some _x12160 -> _x12160
  method set_success _x12160 = _success <- Some _x12160
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "inviteToSquareChat_result.e") | Some _x12161 -> _x12161
  method set_e _x12161 = _e <- Some _x12161
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteToSquareChat_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteToSquareChat_result (iprot : Protocol.t) =
  let _str12164 = new inviteToSquareChat_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12165,_id12166) = iprot#readFieldBegin in
        if _t12165 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12166 with 
          | 0 -> (if _t12165 = Protocol.T_STRUCT then
              _str12164#set_success (read_inviteToSquareChatResponse iprot)
            else
              iprot#skip _t12165)
          | 1 -> (if _t12165 = Protocol.T_STRUCT then
              _str12164#set_e (read_squareException iprot)
            else
              iprot#skip _t12165)
          | _ -> iprot#skip _t12165);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12164

class getSquareMember_args =
object (self)
  val mutable _request : getSquareMemberRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareMember_args.request") | Some _x12167 -> _x12167
  method set_request _x12167 = _request <- Some _x12167
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareMember_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareMember_args (iprot : Protocol.t) =
  let _str12170 = new getSquareMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12171,_id12172) = iprot#readFieldBegin in
        if _t12171 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12172 with 
          | 1 -> (if _t12171 = Protocol.T_STRUCT then
              _str12170#set_request (read_getSquareMemberRequest iprot)
            else
              iprot#skip _t12171)
          | _ -> iprot#skip _t12171);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12170

class getSquareMember_result =
object (self)
  val mutable _success : getSquareMemberResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareMember_result.success") | Some _x12173 -> _x12173
  method set_success _x12173 = _success <- Some _x12173
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareMember_result.e") | Some _x12174 -> _x12174
  method set_e _x12174 = _e <- Some _x12174
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareMember_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareMember_result (iprot : Protocol.t) =
  let _str12177 = new getSquareMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12178,_id12179) = iprot#readFieldBegin in
        if _t12178 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12179 with 
          | 0 -> (if _t12178 = Protocol.T_STRUCT then
              _str12177#set_success (read_getSquareMemberResponse iprot)
            else
              iprot#skip _t12178)
          | 1 -> (if _t12178 = Protocol.T_STRUCT then
              _str12177#set_e (read_squareException iprot)
            else
              iprot#skip _t12178)
          | _ -> iprot#skip _t12178);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12177

class getSquareMembers_args =
object (self)
  val mutable _request : getSquareMembersRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareMembers_args.request") | Some _x12180 -> _x12180
  method set_request _x12180 = _request <- Some _x12180
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareMembers_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareMembers_args (iprot : Protocol.t) =
  let _str12183 = new getSquareMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12184,_id12185) = iprot#readFieldBegin in
        if _t12184 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12185 with 
          | 1 -> (if _t12184 = Protocol.T_STRUCT then
              _str12183#set_request (read_getSquareMembersRequest iprot)
            else
              iprot#skip _t12184)
          | _ -> iprot#skip _t12184);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12183

class getSquareMembers_result =
object (self)
  val mutable _success : getSquareMembersResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareMembers_result.success") | Some _x12186 -> _x12186
  method set_success _x12186 = _success <- Some _x12186
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareMembers_result.e") | Some _x12187 -> _x12187
  method set_e _x12187 = _e <- Some _x12187
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareMembers_result (iprot : Protocol.t) =
  let _str12190 = new getSquareMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12191,_id12192) = iprot#readFieldBegin in
        if _t12191 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12192 with 
          | 0 -> (if _t12191 = Protocol.T_STRUCT then
              _str12190#set_success (read_getSquareMembersResponse iprot)
            else
              iprot#skip _t12191)
          | 1 -> (if _t12191 = Protocol.T_STRUCT then
              _str12190#set_e (read_squareException iprot)
            else
              iprot#skip _t12191)
          | _ -> iprot#skip _t12191);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12190

class getSquareMemberRelation_args =
object (self)
  val mutable _request : getSquareMemberRelationRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareMemberRelation_args.request") | Some _x12193 -> _x12193
  method set_request _x12193 = _request <- Some _x12193
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareMemberRelation_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareMemberRelation_args (iprot : Protocol.t) =
  let _str12196 = new getSquareMemberRelation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12197,_id12198) = iprot#readFieldBegin in
        if _t12197 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12198 with 
          | 1 -> (if _t12197 = Protocol.T_STRUCT then
              _str12196#set_request (read_getSquareMemberRelationRequest iprot)
            else
              iprot#skip _t12197)
          | _ -> iprot#skip _t12197);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12196

class getSquareMemberRelation_result =
object (self)
  val mutable _success : getSquareMemberRelationResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareMemberRelation_result.success") | Some _x12199 -> _x12199
  method set_success _x12199 = _success <- Some _x12199
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareMemberRelation_result.e") | Some _x12200 -> _x12200
  method set_e _x12200 = _e <- Some _x12200
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareMemberRelation_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareMemberRelation_result (iprot : Protocol.t) =
  let _str12203 = new getSquareMemberRelation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12204,_id12205) = iprot#readFieldBegin in
        if _t12204 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12205 with 
          | 0 -> (if _t12204 = Protocol.T_STRUCT then
              _str12203#set_success (read_getSquareMemberRelationResponse iprot)
            else
              iprot#skip _t12204)
          | 1 -> (if _t12204 = Protocol.T_STRUCT then
              _str12203#set_e (read_squareException iprot)
            else
              iprot#skip _t12204)
          | _ -> iprot#skip _t12204);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12203

class getSquareMemberRelations_args =
object (self)
  val mutable _request : getSquareMemberRelationsRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareMemberRelations_args.request") | Some _x12206 -> _x12206
  method set_request _x12206 = _request <- Some _x12206
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareMemberRelations_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareMemberRelations_args (iprot : Protocol.t) =
  let _str12209 = new getSquareMemberRelations_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12210,_id12211) = iprot#readFieldBegin in
        if _t12210 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12211 with 
          | 1 -> (if _t12210 = Protocol.T_STRUCT then
              _str12209#set_request (read_getSquareMemberRelationsRequest iprot)
            else
              iprot#skip _t12210)
          | _ -> iprot#skip _t12210);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12209

class getSquareMemberRelations_result =
object (self)
  val mutable _success : getSquareMemberRelationsResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareMemberRelations_result.success") | Some _x12212 -> _x12212
  method set_success _x12212 = _success <- Some _x12212
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareMemberRelations_result.e") | Some _x12213 -> _x12213
  method set_e _x12213 = _e <- Some _x12213
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareMemberRelations_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareMemberRelations_result (iprot : Protocol.t) =
  let _str12216 = new getSquareMemberRelations_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12217,_id12218) = iprot#readFieldBegin in
        if _t12217 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12218 with 
          | 0 -> (if _t12217 = Protocol.T_STRUCT then
              _str12216#set_success (read_getSquareMemberRelationsResponse iprot)
            else
              iprot#skip _t12217)
          | 1 -> (if _t12217 = Protocol.T_STRUCT then
              _str12216#set_e (read_squareException iprot)
            else
              iprot#skip _t12217)
          | _ -> iprot#skip _t12217);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12216

class getSquareChatMembers_args =
object (self)
  val mutable _request : getSquareChatMembersRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareChatMembers_args.request") | Some _x12219 -> _x12219
  method set_request _x12219 = _request <- Some _x12219
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareChatMembers_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareChatMembers_args (iprot : Protocol.t) =
  let _str12222 = new getSquareChatMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12223,_id12224) = iprot#readFieldBegin in
        if _t12223 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12224 with 
          | 1 -> (if _t12223 = Protocol.T_STRUCT then
              _str12222#set_request (read_getSquareChatMembersRequest iprot)
            else
              iprot#skip _t12223)
          | _ -> iprot#skip _t12223);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12222

class getSquareChatMembers_result =
object (self)
  val mutable _success : getSquareChatMembersResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareChatMembers_result.success") | Some _x12225 -> _x12225
  method set_success _x12225 = _success <- Some _x12225
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareChatMembers_result.e") | Some _x12226 -> _x12226
  method set_e _x12226 = _e <- Some _x12226
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareChatMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareChatMembers_result (iprot : Protocol.t) =
  let _str12229 = new getSquareChatMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12230,_id12231) = iprot#readFieldBegin in
        if _t12230 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12231 with 
          | 0 -> (if _t12230 = Protocol.T_STRUCT then
              _str12229#set_success (read_getSquareChatMembersResponse iprot)
            else
              iprot#skip _t12230)
          | 1 -> (if _t12230 = Protocol.T_STRUCT then
              _str12229#set_e (read_squareException iprot)
            else
              iprot#skip _t12230)
          | _ -> iprot#skip _t12230);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12229

class getSquareChatStatus_args =
object (self)
  val mutable _request : getSquareChatStatusRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareChatStatus_args.request") | Some _x12232 -> _x12232
  method set_request _x12232 = _request <- Some _x12232
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareChatStatus_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareChatStatus_args (iprot : Protocol.t) =
  let _str12235 = new getSquareChatStatus_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12236,_id12237) = iprot#readFieldBegin in
        if _t12236 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12237 with 
          | 1 -> (if _t12236 = Protocol.T_STRUCT then
              _str12235#set_request (read_getSquareChatStatusRequest iprot)
            else
              iprot#skip _t12236)
          | _ -> iprot#skip _t12236);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12235

class getSquareChatStatus_result =
object (self)
  val mutable _success : getSquareChatStatusResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareChatStatus_result.success") | Some _x12238 -> _x12238
  method set_success _x12238 = _success <- Some _x12238
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareChatStatus_result.e") | Some _x12239 -> _x12239
  method set_e _x12239 = _e <- Some _x12239
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareChatStatus_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareChatStatus_result (iprot : Protocol.t) =
  let _str12242 = new getSquareChatStatus_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12243,_id12244) = iprot#readFieldBegin in
        if _t12243 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12244 with 
          | 0 -> (if _t12243 = Protocol.T_STRUCT then
              _str12242#set_success (read_getSquareChatStatusResponse iprot)
            else
              iprot#skip _t12243)
          | 1 -> (if _t12243 = Protocol.T_STRUCT then
              _str12242#set_e (read_squareException iprot)
            else
              iprot#skip _t12243)
          | _ -> iprot#skip _t12243);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12242

class getSquareChat_args =
object (self)
  val mutable _request : getSquareChatRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquareChat_args.request") | Some _x12245 -> _x12245
  method set_request _x12245 = _request <- Some _x12245
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareChat_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareChat_args (iprot : Protocol.t) =
  let _str12248 = new getSquareChat_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12249,_id12250) = iprot#readFieldBegin in
        if _t12249 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12250 with 
          | 1 -> (if _t12249 = Protocol.T_STRUCT then
              _str12248#set_request (read_getSquareChatRequest iprot)
            else
              iprot#skip _t12249)
          | _ -> iprot#skip _t12249);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12248

class getSquareChat_result =
object (self)
  val mutable _success : getSquareChatResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquareChat_result.success") | Some _x12251 -> _x12251
  method set_success _x12251 = _success <- Some _x12251
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquareChat_result.e") | Some _x12252 -> _x12252
  method set_e _x12252 = _e <- Some _x12252
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquareChat_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquareChat_result (iprot : Protocol.t) =
  let _str12255 = new getSquareChat_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12256,_id12257) = iprot#readFieldBegin in
        if _t12256 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12257 with 
          | 0 -> (if _t12256 = Protocol.T_STRUCT then
              _str12255#set_success (read_getSquareChatResponse iprot)
            else
              iprot#skip _t12256)
          | 1 -> (if _t12256 = Protocol.T_STRUCT then
              _str12255#set_e (read_squareException iprot)
            else
              iprot#skip _t12256)
          | _ -> iprot#skip _t12256);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12255

class getSquare_args =
object (self)
  val mutable _request : getSquareRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getSquare_args.request") | Some _x12258 -> _x12258
  method set_request _x12258 = _request <- Some _x12258
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquare_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquare_args (iprot : Protocol.t) =
  let _str12261 = new getSquare_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12262,_id12263) = iprot#readFieldBegin in
        if _t12262 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12263 with 
          | 1 -> (if _t12262 = Protocol.T_STRUCT then
              _str12261#set_request (read_getSquareRequest iprot)
            else
              iprot#skip _t12262)
          | _ -> iprot#skip _t12262);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12261

class getSquare_result =
object (self)
  val mutable _success : getSquareResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSquare_result.success") | Some _x12264 -> _x12264
  method set_success _x12264 = _success <- Some _x12264
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSquare_result.e") | Some _x12265 -> _x12265
  method set_e _x12265 = _e <- Some _x12265
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSquare_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSquare_result (iprot : Protocol.t) =
  let _str12268 = new getSquare_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12269,_id12270) = iprot#readFieldBegin in
        if _t12269 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12270 with 
          | 0 -> (if _t12269 = Protocol.T_STRUCT then
              _str12268#set_success (read_getSquareResponse iprot)
            else
              iprot#skip _t12269)
          | 1 -> (if _t12269 = Protocol.T_STRUCT then
              _str12268#set_e (read_squareException iprot)
            else
              iprot#skip _t12269)
          | _ -> iprot#skip _t12269);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12268

class getJoinedSquares_args =
object (self)
  val mutable _request : getJoinedSquaresRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getJoinedSquares_args.request") | Some _x12271 -> _x12271
  method set_request _x12271 = _request <- Some _x12271
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinedSquares_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinedSquares_args (iprot : Protocol.t) =
  let _str12274 = new getJoinedSquares_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12275,_id12276) = iprot#readFieldBegin in
        if _t12275 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12276 with 
          | 1 -> (if _t12275 = Protocol.T_STRUCT then
              _str12274#set_request (read_getJoinedSquaresRequest iprot)
            else
              iprot#skip _t12275)
          | _ -> iprot#skip _t12275);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12274

class getJoinedSquares_result =
object (self)
  val mutable _success : getJoinedSquaresResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getJoinedSquares_result.success") | Some _x12277 -> _x12277
  method set_success _x12277 = _success <- Some _x12277
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getJoinedSquares_result.e") | Some _x12278 -> _x12278
  method set_e _x12278 = _e <- Some _x12278
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinedSquares_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinedSquares_result (iprot : Protocol.t) =
  let _str12281 = new getJoinedSquares_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12282,_id12283) = iprot#readFieldBegin in
        if _t12282 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12283 with 
          | 0 -> (if _t12282 = Protocol.T_STRUCT then
              _str12281#set_success (read_getJoinedSquaresResponse iprot)
            else
              iprot#skip _t12282)
          | 1 -> (if _t12282 = Protocol.T_STRUCT then
              _str12281#set_e (read_squareException iprot)
            else
              iprot#skip _t12282)
          | _ -> iprot#skip _t12282);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12281

class getJoinedSquareChats_args =
object (self)
  val mutable _request : getJoinedSquareChatsRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getJoinedSquareChats_args.request") | Some _x12284 -> _x12284
  method set_request _x12284 = _request <- Some _x12284
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinedSquareChats_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinedSquareChats_args (iprot : Protocol.t) =
  let _str12287 = new getJoinedSquareChats_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12288,_id12289) = iprot#readFieldBegin in
        if _t12288 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12289 with 
          | 1 -> (if _t12288 = Protocol.T_STRUCT then
              _str12287#set_request (read_getJoinedSquareChatsRequest iprot)
            else
              iprot#skip _t12288)
          | _ -> iprot#skip _t12288);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12287

class getJoinedSquareChats_result =
object (self)
  val mutable _success : getJoinedSquareChatsResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getJoinedSquareChats_result.success") | Some _x12290 -> _x12290
  method set_success _x12290 = _success <- Some _x12290
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getJoinedSquareChats_result.e") | Some _x12291 -> _x12291
  method set_e _x12291 = _e <- Some _x12291
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinedSquareChats_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinedSquareChats_result (iprot : Protocol.t) =
  let _str12294 = new getJoinedSquareChats_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12295,_id12296) = iprot#readFieldBegin in
        if _t12295 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12296 with 
          | 0 -> (if _t12295 = Protocol.T_STRUCT then
              _str12294#set_success (read_getJoinedSquareChatsResponse iprot)
            else
              iprot#skip _t12295)
          | 1 -> (if _t12295 = Protocol.T_STRUCT then
              _str12294#set_e (read_squareException iprot)
            else
              iprot#skip _t12295)
          | _ -> iprot#skip _t12295);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12294

class approveSquareMembers_args =
object (self)
  val mutable _request : approveSquareMembersRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "approveSquareMembers_args.request") | Some _x12297 -> _x12297
  method set_request _x12297 = _request <- Some _x12297
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "approveSquareMembers_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_approveSquareMembers_args (iprot : Protocol.t) =
  let _str12300 = new approveSquareMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12301,_id12302) = iprot#readFieldBegin in
        if _t12301 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12302 with 
          | 1 -> (if _t12301 = Protocol.T_STRUCT then
              _str12300#set_request (read_approveSquareMembersRequest iprot)
            else
              iprot#skip _t12301)
          | _ -> iprot#skip _t12301);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12300

class approveSquareMembers_result =
object (self)
  val mutable _success : approveSquareMembersResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "approveSquareMembers_result.success") | Some _x12303 -> _x12303
  method set_success _x12303 = _success <- Some _x12303
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "approveSquareMembers_result.e") | Some _x12304 -> _x12304
  method set_e _x12304 = _e <- Some _x12304
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "approveSquareMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_approveSquareMembers_result (iprot : Protocol.t) =
  let _str12307 = new approveSquareMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12308,_id12309) = iprot#readFieldBegin in
        if _t12308 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12309 with 
          | 0 -> (if _t12308 = Protocol.T_STRUCT then
              _str12307#set_success (read_approveSquareMembersResponse iprot)
            else
              iprot#skip _t12308)
          | 1 -> (if _t12308 = Protocol.T_STRUCT then
              _str12307#set_e (read_squareException iprot)
            else
              iprot#skip _t12308)
          | _ -> iprot#skip _t12308);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12307

class createSquareChat_args =
object (self)
  val mutable _request : createSquareChatRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "createSquareChat_args.request") | Some _x12310 -> _x12310
  method set_request _x12310 = _request <- Some _x12310
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createSquareChat_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createSquareChat_args (iprot : Protocol.t) =
  let _str12313 = new createSquareChat_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12314,_id12315) = iprot#readFieldBegin in
        if _t12314 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12315 with 
          | 1 -> (if _t12314 = Protocol.T_STRUCT then
              _str12313#set_request (read_createSquareChatRequest iprot)
            else
              iprot#skip _t12314)
          | _ -> iprot#skip _t12314);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12313

class createSquareChat_result =
object (self)
  val mutable _success : createSquareChatResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createSquareChat_result.success") | Some _x12316 -> _x12316
  method set_success _x12316 = _success <- Some _x12316
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createSquareChat_result.e") | Some _x12317 -> _x12317
  method set_e _x12317 = _e <- Some _x12317
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createSquareChat_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createSquareChat_result (iprot : Protocol.t) =
  let _str12320 = new createSquareChat_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12321,_id12322) = iprot#readFieldBegin in
        if _t12321 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12322 with 
          | 0 -> (if _t12321 = Protocol.T_STRUCT then
              _str12320#set_success (read_createSquareChatResponse iprot)
            else
              iprot#skip _t12321)
          | 1 -> (if _t12321 = Protocol.T_STRUCT then
              _str12320#set_e (read_squareException iprot)
            else
              iprot#skip _t12321)
          | _ -> iprot#skip _t12321);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12320

class createSquare_args =
object (self)
  val mutable _request : createSquareRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "createSquare_args.request") | Some _x12323 -> _x12323
  method set_request _x12323 = _request <- Some _x12323
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createSquare_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createSquare_args (iprot : Protocol.t) =
  let _str12326 = new createSquare_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12327,_id12328) = iprot#readFieldBegin in
        if _t12327 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12328 with 
          | 1 -> (if _t12327 = Protocol.T_STRUCT then
              _str12326#set_request (read_createSquareRequest iprot)
            else
              iprot#skip _t12327)
          | _ -> iprot#skip _t12327);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12326

class createSquare_result =
object (self)
  val mutable _success : createSquareResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createSquare_result.success") | Some _x12329 -> _x12329
  method set_success _x12329 = _success <- Some _x12329
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createSquare_result.e") | Some _x12330 -> _x12330
  method set_e _x12330 = _e <- Some _x12330
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createSquare_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createSquare_result (iprot : Protocol.t) =
  let _str12333 = new createSquare_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12334,_id12335) = iprot#readFieldBegin in
        if _t12334 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12335 with 
          | 0 -> (if _t12334 = Protocol.T_STRUCT then
              _str12333#set_success (read_createSquareResponse iprot)
            else
              iprot#skip _t12334)
          | 1 -> (if _t12334 = Protocol.T_STRUCT then
              _str12333#set_e (read_squareException iprot)
            else
              iprot#skip _t12334)
          | _ -> iprot#skip _t12334);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12333

class deleteSquareChat_args =
object (self)
  val mutable _request : deleteSquareChatRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "deleteSquareChat_args.request") | Some _x12336 -> _x12336
  method set_request _x12336 = _request <- Some _x12336
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteSquareChat_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteSquareChat_args (iprot : Protocol.t) =
  let _str12339 = new deleteSquareChat_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12340,_id12341) = iprot#readFieldBegin in
        if _t12340 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12341 with 
          | 1 -> (if _t12340 = Protocol.T_STRUCT then
              _str12339#set_request (read_deleteSquareChatRequest iprot)
            else
              iprot#skip _t12340)
          | _ -> iprot#skip _t12340);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12339

class deleteSquareChat_result =
object (self)
  val mutable _success : deleteSquareChatResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "deleteSquareChat_result.success") | Some _x12342 -> _x12342
  method set_success _x12342 = _success <- Some _x12342
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "deleteSquareChat_result.e") | Some _x12343 -> _x12343
  method set_e _x12343 = _e <- Some _x12343
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteSquareChat_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteSquareChat_result (iprot : Protocol.t) =
  let _str12346 = new deleteSquareChat_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12347,_id12348) = iprot#readFieldBegin in
        if _t12347 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12348 with 
          | 0 -> (if _t12347 = Protocol.T_STRUCT then
              _str12346#set_success (read_deleteSquareChatResponse iprot)
            else
              iprot#skip _t12347)
          | 1 -> (if _t12347 = Protocol.T_STRUCT then
              _str12346#set_e (read_squareException iprot)
            else
              iprot#skip _t12347)
          | _ -> iprot#skip _t12347);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12346

class deleteSquare_args =
object (self)
  val mutable _request : deleteSquareRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "deleteSquare_args.request") | Some _x12349 -> _x12349
  method set_request _x12349 = _request <- Some _x12349
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteSquare_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteSquare_args (iprot : Protocol.t) =
  let _str12352 = new deleteSquare_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12353,_id12354) = iprot#readFieldBegin in
        if _t12353 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12354 with 
          | 1 -> (if _t12353 = Protocol.T_STRUCT then
              _str12352#set_request (read_deleteSquareRequest iprot)
            else
              iprot#skip _t12353)
          | _ -> iprot#skip _t12353);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12352

class deleteSquare_result =
object (self)
  val mutable _success : deleteSquareResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "deleteSquare_result.success") | Some _x12355 -> _x12355
  method set_success _x12355 = _success <- Some _x12355
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "deleteSquare_result.e") | Some _x12356 -> _x12356
  method set_e _x12356 = _e <- Some _x12356
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteSquare_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteSquare_result (iprot : Protocol.t) =
  let _str12359 = new deleteSquare_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12360,_id12361) = iprot#readFieldBegin in
        if _t12360 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12361 with 
          | 0 -> (if _t12360 = Protocol.T_STRUCT then
              _str12359#set_success (read_deleteSquareResponse iprot)
            else
              iprot#skip _t12360)
          | 1 -> (if _t12360 = Protocol.T_STRUCT then
              _str12359#set_e (read_squareException iprot)
            else
              iprot#skip _t12360)
          | _ -> iprot#skip _t12360);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12359

class destroyMessage_args =
object (self)
  val mutable _request : destroyMessageRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "destroyMessage_args.request") | Some _x12362 -> _x12362
  method set_request _x12362 = _request <- Some _x12362
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "destroyMessage_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_destroyMessage_args (iprot : Protocol.t) =
  let _str12365 = new destroyMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12366,_id12367) = iprot#readFieldBegin in
        if _t12366 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12367 with 
          | 1 -> (if _t12366 = Protocol.T_STRUCT then
              _str12365#set_request (read_destroyMessageRequest iprot)
            else
              iprot#skip _t12366)
          | _ -> iprot#skip _t12366);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12365

class destroyMessage_result =
object (self)
  val mutable _success : destroyMessageResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "destroyMessage_result.success") | Some _x12368 -> _x12368
  method set_success _x12368 = _success <- Some _x12368
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "destroyMessage_result.e") | Some _x12369 -> _x12369
  method set_e _x12369 = _e <- Some _x12369
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "destroyMessage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_destroyMessage_result (iprot : Protocol.t) =
  let _str12372 = new destroyMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12373,_id12374) = iprot#readFieldBegin in
        if _t12373 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12374 with 
          | 0 -> (if _t12373 = Protocol.T_STRUCT then
              _str12372#set_success (read_destroyMessageResponse iprot)
            else
              iprot#skip _t12373)
          | 1 -> (if _t12373 = Protocol.T_STRUCT then
              _str12372#set_e (read_squareException iprot)
            else
              iprot#skip _t12373)
          | _ -> iprot#skip _t12373);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12372

class getJoinableSquareChats_args =
object (self)
  val mutable _request : getJoinableSquareChatsRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getJoinableSquareChats_args.request") | Some _x12375 -> _x12375
  method set_request _x12375 = _request <- Some _x12375
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinableSquareChats_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinableSquareChats_args (iprot : Protocol.t) =
  let _str12378 = new getJoinableSquareChats_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12379,_id12380) = iprot#readFieldBegin in
        if _t12379 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12380 with 
          | 1 -> (if _t12379 = Protocol.T_STRUCT then
              _str12378#set_request (read_getJoinableSquareChatsRequest iprot)
            else
              iprot#skip _t12379)
          | _ -> iprot#skip _t12379);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12378

class getJoinableSquareChats_result =
object (self)
  val mutable _success : getJoinableSquareChatsResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getJoinableSquareChats_result.success") | Some _x12381 -> _x12381
  method set_success _x12381 = _success <- Some _x12381
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getJoinableSquareChats_result.e") | Some _x12382 -> _x12382
  method set_e _x12382 = _e <- Some _x12382
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinableSquareChats_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinableSquareChats_result (iprot : Protocol.t) =
  let _str12385 = new getJoinableSquareChats_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12386,_id12387) = iprot#readFieldBegin in
        if _t12386 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12387 with 
          | 0 -> (if _t12386 = Protocol.T_STRUCT then
              _str12385#set_success (read_getJoinableSquareChatsResponse iprot)
            else
              iprot#skip _t12386)
          | 1 -> (if _t12386 = Protocol.T_STRUCT then
              _str12385#set_e (read_squareException iprot)
            else
              iprot#skip _t12386)
          | _ -> iprot#skip _t12386);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12385

class getInvitationTicketUrl_args =
object (self)
  val mutable _request : getInvitationTicketUrlRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getInvitationTicketUrl_args.request") | Some _x12388 -> _x12388
  method set_request _x12388 = _request <- Some _x12388
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getInvitationTicketUrl_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getInvitationTicketUrl_args (iprot : Protocol.t) =
  let _str12391 = new getInvitationTicketUrl_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12392,_id12393) = iprot#readFieldBegin in
        if _t12392 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12393 with 
          | 1 -> (if _t12392 = Protocol.T_STRUCT then
              _str12391#set_request (read_getInvitationTicketUrlRequest iprot)
            else
              iprot#skip _t12392)
          | _ -> iprot#skip _t12392);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12391

class getInvitationTicketUrl_result =
object (self)
  val mutable _success : getInvitationTicketUrlResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getInvitationTicketUrl_result.success") | Some _x12394 -> _x12394
  method set_success _x12394 = _success <- Some _x12394
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getInvitationTicketUrl_result.e") | Some _x12395 -> _x12395
  method set_e _x12395 = _e <- Some _x12395
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getInvitationTicketUrl_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getInvitationTicketUrl_result (iprot : Protocol.t) =
  let _str12398 = new getInvitationTicketUrl_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12399,_id12400) = iprot#readFieldBegin in
        if _t12399 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12400 with 
          | 0 -> (if _t12399 = Protocol.T_STRUCT then
              _str12398#set_success (read_getInvitationTicketUrlResponse iprot)
            else
              iprot#skip _t12399)
          | 1 -> (if _t12399 = Protocol.T_STRUCT then
              _str12398#set_e (read_squareException iprot)
            else
              iprot#skip _t12399)
          | _ -> iprot#skip _t12399);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12398

class findSquareByInvitationTicket_args =
object (self)
  val mutable _request : findSquareByInvitationTicketRequest option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "findSquareByInvitationTicket_args.request") | Some _x12401 -> _x12401
  method set_request _x12401 = _request <- Some _x12401
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findSquareByInvitationTicket_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findSquareByInvitationTicket_args (iprot : Protocol.t) =
  let _str12404 = new findSquareByInvitationTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12405,_id12406) = iprot#readFieldBegin in
        if _t12405 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12406 with 
          | 1 -> (if _t12405 = Protocol.T_STRUCT then
              _str12404#set_request (read_findSquareByInvitationTicketRequest iprot)
            else
              iprot#skip _t12405)
          | _ -> iprot#skip _t12405);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12404

class findSquareByInvitationTicket_result =
object (self)
  val mutable _success : findSquareByInvitationTicketResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findSquareByInvitationTicket_result.success") | Some _x12407 -> _x12407
  method set_success _x12407 = _success <- Some _x12407
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : squareException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findSquareByInvitationTicket_result.e") | Some _x12408 -> _x12408
  method set_e _x12408 = _e <- Some _x12408
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findSquareByInvitationTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findSquareByInvitationTicket_result (iprot : Protocol.t) =
  let _str12411 = new findSquareByInvitationTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12412,_id12413) = iprot#readFieldBegin in
        if _t12412 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12413 with 
          | 0 -> (if _t12412 = Protocol.T_STRUCT then
              _str12411#set_success (read_findSquareByInvitationTicketResponse iprot)
            else
              iprot#skip _t12412)
          | 1 -> (if _t12412 = Protocol.T_STRUCT then
              _str12411#set_e (read_squareException iprot)
            else
              iprot#skip _t12412)
          | _ -> iprot#skip _t12412);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12411

class virtual iface =
object (self)
  method virtual getSquareChatAnnouncements : getSquareChatAnnouncementsRequest option -> getSquareChatAnnouncementsResponse
  method virtual deleteSquareChatAnnouncement : deleteSquareChatAnnouncementRequest option -> deleteSquareChatAnnouncementResponse
  method virtual createSquareChatAnnouncement : createSquareChatAnnouncementRequest option -> createSquareChatAnnouncementResponse
  method virtual getNoteStatus : getNoteStatusRequest option -> getNoteStatusResponse
  method virtual getSquareStatus : getSquareStatusRequest option -> getSquareStatusResponse
  method virtual reportSquareMember : reportSquareMemberRequest option -> reportSquareMemberResponse
  method virtual reportSquareMessage : reportSquareMessageRequest option -> reportSquareMessageResponse
  method virtual reportSquareChat : reportSquareChatRequest option -> reportSquareChatResponse
  method virtual reportSquare : reportSquareRequest option -> reportSquareResponse
  method virtual updateSquareMemberRelation : updateSquareMemberRelationRequest option -> updateSquareMemberRelationResponse
  method virtual updateSquareAuthority : updateSquareAuthorityRequest option -> updateSquareAuthorityResponse
  method virtual updateSquareChatMember : updateSquareChatMemberRequest option -> updateSquareChatMemberResponse
  method virtual updateSquareChat : updateSquareChatRequest option -> updateSquareChatResponse
  method virtual refreshSubscriptions : refreshSubscriptionsRequest option -> refreshSubscriptionsResponse
  method virtual removeSubscriptions : removeSubscriptionsRequest option -> removeSubscriptionsResponse
  method virtual rejectSquareMembers : rejectSquareMembersRequest option -> rejectSquareMembersResponse
  method virtual updateSquareMembers : updateSquareMembersRequest option -> updateSquareMembersResponse
  method virtual updateSquareMember : updateSquareMemberRequest option -> updateSquareMemberResponse
  method virtual updateSquareFeatureSet : updateSquareFeatureSetRequest option -> updateSquareFeatureSetResponse
  method virtual getSquareFeatureSet : getSquareFeatureSetRequest option -> getSquareFeatureSetResponse
  method virtual searchSquares : searchSquaresRequest option -> searchSquaresResponse
  method virtual updateSquare : updateSquareRequest option -> updateSquareResponse
  method virtual getCategories : getSquareCategoriesRequest option -> getSquareCategoriesResponse
  method virtual searchSquareMembers : searchSquareMembersRequest option -> searchSquareMembersResponse
  method virtual fetchSquareChatEvents : fetchSquareChatEventsRequest option -> fetchSquareChatEventsResponse
  method virtual fetchMyEvents : fetchMyEventsRequest option -> fetchMyEventsResponse
  method virtual markAsRead : markAsReadRequest option -> markAsReadResponse
  method virtual getSquareAuthority : getSquareAuthorityRequest option -> getSquareAuthorityResponse
  method virtual sendMessage : sendMessageRequest option -> sendMessageResponse
  method virtual leaveSquare : leaveSquareRequest option -> leaveSquareResponse
  method virtual leaveSquareChat : leaveSquareChatRequest option -> leaveSquareChatResponse
  method virtual joinSquareChat : joinSquareChatRequest option -> joinSquareChatResponse
  method virtual joinSquare : joinSquareRequest option -> joinSquareResponse
  method virtual inviteToSquare : inviteToSquareRequest option -> inviteToSquareResponse
  method virtual inviteToSquareChat : inviteToSquareChatRequest option -> inviteToSquareChatResponse
  method virtual getSquareMember : getSquareMemberRequest option -> getSquareMemberResponse
  method virtual getSquareMembers : getSquareMembersRequest option -> getSquareMembersResponse
  method virtual getSquareMemberRelation : getSquareMemberRelationRequest option -> getSquareMemberRelationResponse
  method virtual getSquareMemberRelations : getSquareMemberRelationsRequest option -> getSquareMemberRelationsResponse
  method virtual getSquareChatMembers : getSquareChatMembersRequest option -> getSquareChatMembersResponse
  method virtual getSquareChatStatus : getSquareChatStatusRequest option -> getSquareChatStatusResponse
  method virtual getSquareChat : getSquareChatRequest option -> getSquareChatResponse
  method virtual getSquare : getSquareRequest option -> getSquareResponse
  method virtual getJoinedSquares : getJoinedSquaresRequest option -> getJoinedSquaresResponse
  method virtual getJoinedSquareChats : getJoinedSquareChatsRequest option -> getJoinedSquareChatsResponse
  method virtual approveSquareMembers : approveSquareMembersRequest option -> approveSquareMembersResponse
  method virtual createSquareChat : createSquareChatRequest option -> createSquareChatResponse
  method virtual createSquare : createSquareRequest option -> createSquareResponse
  method virtual deleteSquareChat : deleteSquareChatRequest option -> deleteSquareChatResponse
  method virtual deleteSquare : deleteSquareRequest option -> deleteSquareResponse
  method virtual destroyMessage : destroyMessageRequest option -> destroyMessageResponse
  method virtual getJoinableSquareChats : getJoinableSquareChatsRequest option -> getJoinableSquareChatsResponse
  method virtual getInvitationTicketUrl : getInvitationTicketUrlRequest option -> getInvitationTicketUrlResponse
  method virtual findSquareByInvitationTicket : findSquareByInvitationTicketRequest option -> findSquareByInvitationTicketResponse
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method getSquareChatAnnouncements request = 
    self#send_getSquareChatAnnouncements request;
    self#recv_getSquareChatAnnouncements
  method private send_getSquareChatAnnouncements request = 
    oprot#writeMessageBegin ("getSquareChatAnnouncements", Protocol.CALL, seqid);
    let args = new getSquareChatAnnouncements_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareChatAnnouncements  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareChatAnnouncements_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareChatAnnouncements failed: unknown result")))
  method deleteSquareChatAnnouncement request = 
    self#send_deleteSquareChatAnnouncement request;
    self#recv_deleteSquareChatAnnouncement
  method private send_deleteSquareChatAnnouncement request = 
    oprot#writeMessageBegin ("deleteSquareChatAnnouncement", Protocol.CALL, seqid);
    let args = new deleteSquareChatAnnouncement_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_deleteSquareChatAnnouncement  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_deleteSquareChatAnnouncement_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "deleteSquareChatAnnouncement failed: unknown result")))
  method createSquareChatAnnouncement request = 
    self#send_createSquareChatAnnouncement request;
    self#recv_createSquareChatAnnouncement
  method private send_createSquareChatAnnouncement request = 
    oprot#writeMessageBegin ("createSquareChatAnnouncement", Protocol.CALL, seqid);
    let args = new createSquareChatAnnouncement_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createSquareChatAnnouncement  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createSquareChatAnnouncement_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createSquareChatAnnouncement failed: unknown result")))
  method getNoteStatus request = 
    self#send_getNoteStatus request;
    self#recv_getNoteStatus
  method private send_getNoteStatus request = 
    oprot#writeMessageBegin ("getNoteStatus", Protocol.CALL, seqid);
    let args = new getNoteStatus_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getNoteStatus  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getNoteStatus_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getNoteStatus failed: unknown result")))
  method getSquareStatus request = 
    self#send_getSquareStatus request;
    self#recv_getSquareStatus
  method private send_getSquareStatus request = 
    oprot#writeMessageBegin ("getSquareStatus", Protocol.CALL, seqid);
    let args = new getSquareStatus_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareStatus  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareStatus_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareStatus failed: unknown result")))
  method reportSquareMember request = 
    self#send_reportSquareMember request;
    self#recv_reportSquareMember
  method private send_reportSquareMember request = 
    oprot#writeMessageBegin ("reportSquareMember", Protocol.CALL, seqid);
    let args = new reportSquareMember_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportSquareMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportSquareMember_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reportSquareMember failed: unknown result")))
  method reportSquareMessage request = 
    self#send_reportSquareMessage request;
    self#recv_reportSquareMessage
  method private send_reportSquareMessage request = 
    oprot#writeMessageBegin ("reportSquareMessage", Protocol.CALL, seqid);
    let args = new reportSquareMessage_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportSquareMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportSquareMessage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reportSquareMessage failed: unknown result")))
  method reportSquareChat request = 
    self#send_reportSquareChat request;
    self#recv_reportSquareChat
  method private send_reportSquareChat request = 
    oprot#writeMessageBegin ("reportSquareChat", Protocol.CALL, seqid);
    let args = new reportSquareChat_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportSquareChat  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportSquareChat_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reportSquareChat failed: unknown result")))
  method reportSquare request = 
    self#send_reportSquare request;
    self#recv_reportSquare
  method private send_reportSquare request = 
    oprot#writeMessageBegin ("reportSquare", Protocol.CALL, seqid);
    let args = new reportSquare_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reportSquare  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reportSquare_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reportSquare failed: unknown result")))
  method updateSquareMemberRelation request = 
    self#send_updateSquareMemberRelation request;
    self#recv_updateSquareMemberRelation
  method private send_updateSquareMemberRelation request = 
    oprot#writeMessageBegin ("updateSquareMemberRelation", Protocol.CALL, seqid);
    let args = new updateSquareMemberRelation_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSquareMemberRelation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSquareMemberRelation_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSquareMemberRelation failed: unknown result")))
  method updateSquareAuthority request = 
    self#send_updateSquareAuthority request;
    self#recv_updateSquareAuthority
  method private send_updateSquareAuthority request = 
    oprot#writeMessageBegin ("updateSquareAuthority", Protocol.CALL, seqid);
    let args = new updateSquareAuthority_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSquareAuthority  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSquareAuthority_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSquareAuthority failed: unknown result")))
  method updateSquareChatMember request = 
    self#send_updateSquareChatMember request;
    self#recv_updateSquareChatMember
  method private send_updateSquareChatMember request = 
    oprot#writeMessageBegin ("updateSquareChatMember", Protocol.CALL, seqid);
    let args = new updateSquareChatMember_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSquareChatMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSquareChatMember_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSquareChatMember failed: unknown result")))
  method updateSquareChat request = 
    self#send_updateSquareChat request;
    self#recv_updateSquareChat
  method private send_updateSquareChat request = 
    oprot#writeMessageBegin ("updateSquareChat", Protocol.CALL, seqid);
    let args = new updateSquareChat_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSquareChat  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSquareChat_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSquareChat failed: unknown result")))
  method refreshSubscriptions request = 
    self#send_refreshSubscriptions request;
    self#recv_refreshSubscriptions
  method private send_refreshSubscriptions request = 
    oprot#writeMessageBegin ("refreshSubscriptions", Protocol.CALL, seqid);
    let args = new refreshSubscriptions_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_refreshSubscriptions  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_refreshSubscriptions_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "refreshSubscriptions failed: unknown result")))
  method removeSubscriptions request = 
    self#send_removeSubscriptions request;
    self#recv_removeSubscriptions
  method private send_removeSubscriptions request = 
    oprot#writeMessageBegin ("removeSubscriptions", Protocol.CALL, seqid);
    let args = new removeSubscriptions_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeSubscriptions  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeSubscriptions_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "removeSubscriptions failed: unknown result")))
  method rejectSquareMembers request = 
    self#send_rejectSquareMembers request;
    self#recv_rejectSquareMembers
  method private send_rejectSquareMembers request = 
    oprot#writeMessageBegin ("rejectSquareMembers", Protocol.CALL, seqid);
    let args = new rejectSquareMembers_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_rejectSquareMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_rejectSquareMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "rejectSquareMembers failed: unknown result")))
  method updateSquareMembers request = 
    self#send_updateSquareMembers request;
    self#recv_updateSquareMembers
  method private send_updateSquareMembers request = 
    oprot#writeMessageBegin ("updateSquareMembers", Protocol.CALL, seqid);
    let args = new updateSquareMembers_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSquareMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSquareMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSquareMembers failed: unknown result")))
  method updateSquareMember request = 
    self#send_updateSquareMember request;
    self#recv_updateSquareMember
  method private send_updateSquareMember request = 
    oprot#writeMessageBegin ("updateSquareMember", Protocol.CALL, seqid);
    let args = new updateSquareMember_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSquareMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSquareMember_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSquareMember failed: unknown result")))
  method updateSquareFeatureSet request = 
    self#send_updateSquareFeatureSet request;
    self#recv_updateSquareFeatureSet
  method private send_updateSquareFeatureSet request = 
    oprot#writeMessageBegin ("updateSquareFeatureSet", Protocol.CALL, seqid);
    let args = new updateSquareFeatureSet_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSquareFeatureSet  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSquareFeatureSet_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSquareFeatureSet failed: unknown result")))
  method getSquareFeatureSet request = 
    self#send_getSquareFeatureSet request;
    self#recv_getSquareFeatureSet
  method private send_getSquareFeatureSet request = 
    oprot#writeMessageBegin ("getSquareFeatureSet", Protocol.CALL, seqid);
    let args = new getSquareFeatureSet_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareFeatureSet  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareFeatureSet_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareFeatureSet failed: unknown result")))
  method searchSquares request = 
    self#send_searchSquares request;
    self#recv_searchSquares
  method private send_searchSquares request = 
    oprot#writeMessageBegin ("searchSquares", Protocol.CALL, seqid);
    let args = new searchSquares_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_searchSquares  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_searchSquares_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "searchSquares failed: unknown result")))
  method updateSquare request = 
    self#send_updateSquare request;
    self#recv_updateSquare
  method private send_updateSquare request = 
    oprot#writeMessageBegin ("updateSquare", Protocol.CALL, seqid);
    let args = new updateSquare_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateSquare  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateSquare_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateSquare failed: unknown result")))
  method getCategories request = 
    self#send_getCategories request;
    self#recv_getCategories
  method private send_getCategories request = 
    oprot#writeMessageBegin ("getCategories", Protocol.CALL, seqid);
    let args = new getCategories_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCategories  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCategories_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCategories failed: unknown result")))
  method searchSquareMembers request = 
    self#send_searchSquareMembers request;
    self#recv_searchSquareMembers
  method private send_searchSquareMembers request = 
    oprot#writeMessageBegin ("searchSquareMembers", Protocol.CALL, seqid);
    let args = new searchSquareMembers_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_searchSquareMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_searchSquareMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "searchSquareMembers failed: unknown result")))
  method fetchSquareChatEvents request = 
    self#send_fetchSquareChatEvents request;
    self#recv_fetchSquareChatEvents
  method private send_fetchSquareChatEvents request = 
    oprot#writeMessageBegin ("fetchSquareChatEvents", Protocol.CALL, seqid);
    let args = new fetchSquareChatEvents_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_fetchSquareChatEvents  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_fetchSquareChatEvents_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "fetchSquareChatEvents failed: unknown result")))
  method fetchMyEvents request = 
    self#send_fetchMyEvents request;
    self#recv_fetchMyEvents
  method private send_fetchMyEvents request = 
    oprot#writeMessageBegin ("fetchMyEvents", Protocol.CALL, seqid);
    let args = new fetchMyEvents_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_fetchMyEvents  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_fetchMyEvents_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "fetchMyEvents failed: unknown result")))
  method markAsRead request = 
    self#send_markAsRead request;
    self#recv_markAsRead
  method private send_markAsRead request = 
    oprot#writeMessageBegin ("markAsRead", Protocol.CALL, seqid);
    let args = new markAsRead_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_markAsRead  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_markAsRead_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "markAsRead failed: unknown result")))
  method getSquareAuthority request = 
    self#send_getSquareAuthority request;
    self#recv_getSquareAuthority
  method private send_getSquareAuthority request = 
    oprot#writeMessageBegin ("getSquareAuthority", Protocol.CALL, seqid);
    let args = new getSquareAuthority_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareAuthority  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareAuthority_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareAuthority failed: unknown result")))
  method sendMessage request = 
    self#send_sendMessage request;
    self#recv_sendMessage
  method private send_sendMessage request = 
    oprot#writeMessageBegin ("sendMessage", Protocol.CALL, seqid);
    let args = new sendMessage_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendMessage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendMessage failed: unknown result")))
  method leaveSquare request = 
    self#send_leaveSquare request;
    self#recv_leaveSquare
  method private send_leaveSquare request = 
    oprot#writeMessageBegin ("leaveSquare", Protocol.CALL, seqid);
    let args = new leaveSquare_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_leaveSquare  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_leaveSquare_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "leaveSquare failed: unknown result")))
  method leaveSquareChat request = 
    self#send_leaveSquareChat request;
    self#recv_leaveSquareChat
  method private send_leaveSquareChat request = 
    oprot#writeMessageBegin ("leaveSquareChat", Protocol.CALL, seqid);
    let args = new leaveSquareChat_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_leaveSquareChat  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_leaveSquareChat_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "leaveSquareChat failed: unknown result")))
  method joinSquareChat request = 
    self#send_joinSquareChat request;
    self#recv_joinSquareChat
  method private send_joinSquareChat request = 
    oprot#writeMessageBegin ("joinSquareChat", Protocol.CALL, seqid);
    let args = new joinSquareChat_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_joinSquareChat  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_joinSquareChat_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "joinSquareChat failed: unknown result")))
  method joinSquare request = 
    self#send_joinSquare request;
    self#recv_joinSquare
  method private send_joinSquare request = 
    oprot#writeMessageBegin ("joinSquare", Protocol.CALL, seqid);
    let args = new joinSquare_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_joinSquare  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_joinSquare_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "joinSquare failed: unknown result")))
  method inviteToSquare request = 
    self#send_inviteToSquare request;
    self#recv_inviteToSquare
  method private send_inviteToSquare request = 
    oprot#writeMessageBegin ("inviteToSquare", Protocol.CALL, seqid);
    let args = new inviteToSquare_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_inviteToSquare  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_inviteToSquare_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "inviteToSquare failed: unknown result")))
  method inviteToSquareChat request = 
    self#send_inviteToSquareChat request;
    self#recv_inviteToSquareChat
  method private send_inviteToSquareChat request = 
    oprot#writeMessageBegin ("inviteToSquareChat", Protocol.CALL, seqid);
    let args = new inviteToSquareChat_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_inviteToSquareChat  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_inviteToSquareChat_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "inviteToSquareChat failed: unknown result")))
  method getSquareMember request = 
    self#send_getSquareMember request;
    self#recv_getSquareMember
  method private send_getSquareMember request = 
    oprot#writeMessageBegin ("getSquareMember", Protocol.CALL, seqid);
    let args = new getSquareMember_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareMember_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareMember failed: unknown result")))
  method getSquareMembers request = 
    self#send_getSquareMembers request;
    self#recv_getSquareMembers
  method private send_getSquareMembers request = 
    oprot#writeMessageBegin ("getSquareMembers", Protocol.CALL, seqid);
    let args = new getSquareMembers_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareMembers failed: unknown result")))
  method getSquareMemberRelation request = 
    self#send_getSquareMemberRelation request;
    self#recv_getSquareMemberRelation
  method private send_getSquareMemberRelation request = 
    oprot#writeMessageBegin ("getSquareMemberRelation", Protocol.CALL, seqid);
    let args = new getSquareMemberRelation_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareMemberRelation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareMemberRelation_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareMemberRelation failed: unknown result")))
  method getSquareMemberRelations request = 
    self#send_getSquareMemberRelations request;
    self#recv_getSquareMemberRelations
  method private send_getSquareMemberRelations request = 
    oprot#writeMessageBegin ("getSquareMemberRelations", Protocol.CALL, seqid);
    let args = new getSquareMemberRelations_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareMemberRelations  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareMemberRelations_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareMemberRelations failed: unknown result")))
  method getSquareChatMembers request = 
    self#send_getSquareChatMembers request;
    self#recv_getSquareChatMembers
  method private send_getSquareChatMembers request = 
    oprot#writeMessageBegin ("getSquareChatMembers", Protocol.CALL, seqid);
    let args = new getSquareChatMembers_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareChatMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareChatMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareChatMembers failed: unknown result")))
  method getSquareChatStatus request = 
    self#send_getSquareChatStatus request;
    self#recv_getSquareChatStatus
  method private send_getSquareChatStatus request = 
    oprot#writeMessageBegin ("getSquareChatStatus", Protocol.CALL, seqid);
    let args = new getSquareChatStatus_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareChatStatus  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareChatStatus_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareChatStatus failed: unknown result")))
  method getSquareChat request = 
    self#send_getSquareChat request;
    self#recv_getSquareChat
  method private send_getSquareChat request = 
    oprot#writeMessageBegin ("getSquareChat", Protocol.CALL, seqid);
    let args = new getSquareChat_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquareChat  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquareChat_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquareChat failed: unknown result")))
  method getSquare request = 
    self#send_getSquare request;
    self#recv_getSquare
  method private send_getSquare request = 
    oprot#writeMessageBegin ("getSquare", Protocol.CALL, seqid);
    let args = new getSquare_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSquare  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSquare_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSquare failed: unknown result")))
  method getJoinedSquares request = 
    self#send_getJoinedSquares request;
    self#recv_getJoinedSquares
  method private send_getJoinedSquares request = 
    oprot#writeMessageBegin ("getJoinedSquares", Protocol.CALL, seqid);
    let args = new getJoinedSquares_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getJoinedSquares  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getJoinedSquares_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getJoinedSquares failed: unknown result")))
  method getJoinedSquareChats request = 
    self#send_getJoinedSquareChats request;
    self#recv_getJoinedSquareChats
  method private send_getJoinedSquareChats request = 
    oprot#writeMessageBegin ("getJoinedSquareChats", Protocol.CALL, seqid);
    let args = new getJoinedSquareChats_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getJoinedSquareChats  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getJoinedSquareChats_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getJoinedSquareChats failed: unknown result")))
  method approveSquareMembers request = 
    self#send_approveSquareMembers request;
    self#recv_approveSquareMembers
  method private send_approveSquareMembers request = 
    oprot#writeMessageBegin ("approveSquareMembers", Protocol.CALL, seqid);
    let args = new approveSquareMembers_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_approveSquareMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_approveSquareMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "approveSquareMembers failed: unknown result")))
  method createSquareChat request = 
    self#send_createSquareChat request;
    self#recv_createSquareChat
  method private send_createSquareChat request = 
    oprot#writeMessageBegin ("createSquareChat", Protocol.CALL, seqid);
    let args = new createSquareChat_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createSquareChat  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createSquareChat_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createSquareChat failed: unknown result")))
  method createSquare request = 
    self#send_createSquare request;
    self#recv_createSquare
  method private send_createSquare request = 
    oprot#writeMessageBegin ("createSquare", Protocol.CALL, seqid);
    let args = new createSquare_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createSquare  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createSquare_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createSquare failed: unknown result")))
  method deleteSquareChat request = 
    self#send_deleteSquareChat request;
    self#recv_deleteSquareChat
  method private send_deleteSquareChat request = 
    oprot#writeMessageBegin ("deleteSquareChat", Protocol.CALL, seqid);
    let args = new deleteSquareChat_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_deleteSquareChat  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_deleteSquareChat_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "deleteSquareChat failed: unknown result")))
  method deleteSquare request = 
    self#send_deleteSquare request;
    self#recv_deleteSquare
  method private send_deleteSquare request = 
    oprot#writeMessageBegin ("deleteSquare", Protocol.CALL, seqid);
    let args = new deleteSquare_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_deleteSquare  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_deleteSquare_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "deleteSquare failed: unknown result")))
  method destroyMessage request = 
    self#send_destroyMessage request;
    self#recv_destroyMessage
  method private send_destroyMessage request = 
    oprot#writeMessageBegin ("destroyMessage", Protocol.CALL, seqid);
    let args = new destroyMessage_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_destroyMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_destroyMessage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "destroyMessage failed: unknown result")))
  method getJoinableSquareChats request = 
    self#send_getJoinableSquareChats request;
    self#recv_getJoinableSquareChats
  method private send_getJoinableSquareChats request = 
    oprot#writeMessageBegin ("getJoinableSquareChats", Protocol.CALL, seqid);
    let args = new getJoinableSquareChats_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getJoinableSquareChats  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getJoinableSquareChats_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getJoinableSquareChats failed: unknown result")))
  method getInvitationTicketUrl request = 
    self#send_getInvitationTicketUrl request;
    self#recv_getInvitationTicketUrl
  method private send_getInvitationTicketUrl request = 
    oprot#writeMessageBegin ("getInvitationTicketUrl", Protocol.CALL, seqid);
    let args = new getInvitationTicketUrl_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getInvitationTicketUrl  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getInvitationTicketUrl_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getInvitationTicketUrl failed: unknown result")))
  method findSquareByInvitationTicket request = 
    self#send_findSquareByInvitationTicket request;
    self#recv_findSquareByInvitationTicket
  method private send_findSquareByInvitationTicket request = 
    oprot#writeMessageBegin ("findSquareByInvitationTicket", Protocol.CALL, seqid);
    let args = new findSquareByInvitationTicket_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findSquareByInvitationTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findSquareByInvitationTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (SquareException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findSquareByInvitationTicket failed: unknown result")))
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 54
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_getSquareChatAnnouncements (seqid, iprot, oprot) =
    let args = read_getSquareChatAnnouncements_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareChatAnnouncements_result in
        (try
          result#set_success (handler#getSquareChatAnnouncements args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareChatAnnouncements", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_deleteSquareChatAnnouncement (seqid, iprot, oprot) =
    let args = read_deleteSquareChatAnnouncement_args iprot in
      iprot#readMessageEnd;
      let result = new deleteSquareChatAnnouncement_result in
        (try
          result#set_success (handler#deleteSquareChatAnnouncement args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("deleteSquareChatAnnouncement", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createSquareChatAnnouncement (seqid, iprot, oprot) =
    let args = read_createSquareChatAnnouncement_args iprot in
      iprot#readMessageEnd;
      let result = new createSquareChatAnnouncement_result in
        (try
          result#set_success (handler#createSquareChatAnnouncement args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createSquareChatAnnouncement", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getNoteStatus (seqid, iprot, oprot) =
    let args = read_getNoteStatus_args iprot in
      iprot#readMessageEnd;
      let result = new getNoteStatus_result in
        (try
          result#set_success (handler#getNoteStatus args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getNoteStatus", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareStatus (seqid, iprot, oprot) =
    let args = read_getSquareStatus_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareStatus_result in
        (try
          result#set_success (handler#getSquareStatus args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareStatus", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportSquareMember (seqid, iprot, oprot) =
    let args = read_reportSquareMember_args iprot in
      iprot#readMessageEnd;
      let result = new reportSquareMember_result in
        (try
          result#set_success (handler#reportSquareMember args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportSquareMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportSquareMessage (seqid, iprot, oprot) =
    let args = read_reportSquareMessage_args iprot in
      iprot#readMessageEnd;
      let result = new reportSquareMessage_result in
        (try
          result#set_success (handler#reportSquareMessage args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportSquareMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportSquareChat (seqid, iprot, oprot) =
    let args = read_reportSquareChat_args iprot in
      iprot#readMessageEnd;
      let result = new reportSquareChat_result in
        (try
          result#set_success (handler#reportSquareChat args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportSquareChat", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reportSquare (seqid, iprot, oprot) =
    let args = read_reportSquare_args iprot in
      iprot#readMessageEnd;
      let result = new reportSquare_result in
        (try
          result#set_success (handler#reportSquare args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reportSquare", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSquareMemberRelation (seqid, iprot, oprot) =
    let args = read_updateSquareMemberRelation_args iprot in
      iprot#readMessageEnd;
      let result = new updateSquareMemberRelation_result in
        (try
          result#set_success (handler#updateSquareMemberRelation args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSquareMemberRelation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSquareAuthority (seqid, iprot, oprot) =
    let args = read_updateSquareAuthority_args iprot in
      iprot#readMessageEnd;
      let result = new updateSquareAuthority_result in
        (try
          result#set_success (handler#updateSquareAuthority args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSquareAuthority", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSquareChatMember (seqid, iprot, oprot) =
    let args = read_updateSquareChatMember_args iprot in
      iprot#readMessageEnd;
      let result = new updateSquareChatMember_result in
        (try
          result#set_success (handler#updateSquareChatMember args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSquareChatMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSquareChat (seqid, iprot, oprot) =
    let args = read_updateSquareChat_args iprot in
      iprot#readMessageEnd;
      let result = new updateSquareChat_result in
        (try
          result#set_success (handler#updateSquareChat args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSquareChat", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_refreshSubscriptions (seqid, iprot, oprot) =
    let args = read_refreshSubscriptions_args iprot in
      iprot#readMessageEnd;
      let result = new refreshSubscriptions_result in
        (try
          result#set_success (handler#refreshSubscriptions args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("refreshSubscriptions", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeSubscriptions (seqid, iprot, oprot) =
    let args = read_removeSubscriptions_args iprot in
      iprot#readMessageEnd;
      let result = new removeSubscriptions_result in
        (try
          result#set_success (handler#removeSubscriptions args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeSubscriptions", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_rejectSquareMembers (seqid, iprot, oprot) =
    let args = read_rejectSquareMembers_args iprot in
      iprot#readMessageEnd;
      let result = new rejectSquareMembers_result in
        (try
          result#set_success (handler#rejectSquareMembers args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("rejectSquareMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSquareMembers (seqid, iprot, oprot) =
    let args = read_updateSquareMembers_args iprot in
      iprot#readMessageEnd;
      let result = new updateSquareMembers_result in
        (try
          result#set_success (handler#updateSquareMembers args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSquareMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSquareMember (seqid, iprot, oprot) =
    let args = read_updateSquareMember_args iprot in
      iprot#readMessageEnd;
      let result = new updateSquareMember_result in
        (try
          result#set_success (handler#updateSquareMember args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSquareMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSquareFeatureSet (seqid, iprot, oprot) =
    let args = read_updateSquareFeatureSet_args iprot in
      iprot#readMessageEnd;
      let result = new updateSquareFeatureSet_result in
        (try
          result#set_success (handler#updateSquareFeatureSet args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSquareFeatureSet", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareFeatureSet (seqid, iprot, oprot) =
    let args = read_getSquareFeatureSet_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareFeatureSet_result in
        (try
          result#set_success (handler#getSquareFeatureSet args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareFeatureSet", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_searchSquares (seqid, iprot, oprot) =
    let args = read_searchSquares_args iprot in
      iprot#readMessageEnd;
      let result = new searchSquares_result in
        (try
          result#set_success (handler#searchSquares args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("searchSquares", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateSquare (seqid, iprot, oprot) =
    let args = read_updateSquare_args iprot in
      iprot#readMessageEnd;
      let result = new updateSquare_result in
        (try
          result#set_success (handler#updateSquare args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateSquare", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCategories (seqid, iprot, oprot) =
    let args = read_getCategories_args iprot in
      iprot#readMessageEnd;
      let result = new getCategories_result in
        (try
          result#set_success (handler#getCategories args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCategories", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_searchSquareMembers (seqid, iprot, oprot) =
    let args = read_searchSquareMembers_args iprot in
      iprot#readMessageEnd;
      let result = new searchSquareMembers_result in
        (try
          result#set_success (handler#searchSquareMembers args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("searchSquareMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_fetchSquareChatEvents (seqid, iprot, oprot) =
    let args = read_fetchSquareChatEvents_args iprot in
      iprot#readMessageEnd;
      let result = new fetchSquareChatEvents_result in
        (try
          result#set_success (handler#fetchSquareChatEvents args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("fetchSquareChatEvents", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_fetchMyEvents (seqid, iprot, oprot) =
    let args = read_fetchMyEvents_args iprot in
      iprot#readMessageEnd;
      let result = new fetchMyEvents_result in
        (try
          result#set_success (handler#fetchMyEvents args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("fetchMyEvents", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_markAsRead (seqid, iprot, oprot) =
    let args = read_markAsRead_args iprot in
      iprot#readMessageEnd;
      let result = new markAsRead_result in
        (try
          result#set_success (handler#markAsRead args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("markAsRead", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareAuthority (seqid, iprot, oprot) =
    let args = read_getSquareAuthority_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareAuthority_result in
        (try
          result#set_success (handler#getSquareAuthority args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareAuthority", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendMessage (seqid, iprot, oprot) =
    let args = read_sendMessage_args iprot in
      iprot#readMessageEnd;
      let result = new sendMessage_result in
        (try
          result#set_success (handler#sendMessage args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_leaveSquare (seqid, iprot, oprot) =
    let args = read_leaveSquare_args iprot in
      iprot#readMessageEnd;
      let result = new leaveSquare_result in
        (try
          result#set_success (handler#leaveSquare args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("leaveSquare", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_leaveSquareChat (seqid, iprot, oprot) =
    let args = read_leaveSquareChat_args iprot in
      iprot#readMessageEnd;
      let result = new leaveSquareChat_result in
        (try
          result#set_success (handler#leaveSquareChat args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("leaveSquareChat", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_joinSquareChat (seqid, iprot, oprot) =
    let args = read_joinSquareChat_args iprot in
      iprot#readMessageEnd;
      let result = new joinSquareChat_result in
        (try
          result#set_success (handler#joinSquareChat args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("joinSquareChat", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_joinSquare (seqid, iprot, oprot) =
    let args = read_joinSquare_args iprot in
      iprot#readMessageEnd;
      let result = new joinSquare_result in
        (try
          result#set_success (handler#joinSquare args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("joinSquare", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_inviteToSquare (seqid, iprot, oprot) =
    let args = read_inviteToSquare_args iprot in
      iprot#readMessageEnd;
      let result = new inviteToSquare_result in
        (try
          result#set_success (handler#inviteToSquare args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("inviteToSquare", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_inviteToSquareChat (seqid, iprot, oprot) =
    let args = read_inviteToSquareChat_args iprot in
      iprot#readMessageEnd;
      let result = new inviteToSquareChat_result in
        (try
          result#set_success (handler#inviteToSquareChat args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("inviteToSquareChat", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareMember (seqid, iprot, oprot) =
    let args = read_getSquareMember_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareMember_result in
        (try
          result#set_success (handler#getSquareMember args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareMembers (seqid, iprot, oprot) =
    let args = read_getSquareMembers_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareMembers_result in
        (try
          result#set_success (handler#getSquareMembers args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareMemberRelation (seqid, iprot, oprot) =
    let args = read_getSquareMemberRelation_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareMemberRelation_result in
        (try
          result#set_success (handler#getSquareMemberRelation args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareMemberRelation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareMemberRelations (seqid, iprot, oprot) =
    let args = read_getSquareMemberRelations_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareMemberRelations_result in
        (try
          result#set_success (handler#getSquareMemberRelations args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareMemberRelations", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareChatMembers (seqid, iprot, oprot) =
    let args = read_getSquareChatMembers_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareChatMembers_result in
        (try
          result#set_success (handler#getSquareChatMembers args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareChatMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareChatStatus (seqid, iprot, oprot) =
    let args = read_getSquareChatStatus_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareChatStatus_result in
        (try
          result#set_success (handler#getSquareChatStatus args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareChatStatus", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquareChat (seqid, iprot, oprot) =
    let args = read_getSquareChat_args iprot in
      iprot#readMessageEnd;
      let result = new getSquareChat_result in
        (try
          result#set_success (handler#getSquareChat args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquareChat", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSquare (seqid, iprot, oprot) =
    let args = read_getSquare_args iprot in
      iprot#readMessageEnd;
      let result = new getSquare_result in
        (try
          result#set_success (handler#getSquare args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSquare", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getJoinedSquares (seqid, iprot, oprot) =
    let args = read_getJoinedSquares_args iprot in
      iprot#readMessageEnd;
      let result = new getJoinedSquares_result in
        (try
          result#set_success (handler#getJoinedSquares args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getJoinedSquares", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getJoinedSquareChats (seqid, iprot, oprot) =
    let args = read_getJoinedSquareChats_args iprot in
      iprot#readMessageEnd;
      let result = new getJoinedSquareChats_result in
        (try
          result#set_success (handler#getJoinedSquareChats args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getJoinedSquareChats", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_approveSquareMembers (seqid, iprot, oprot) =
    let args = read_approveSquareMembers_args iprot in
      iprot#readMessageEnd;
      let result = new approveSquareMembers_result in
        (try
          result#set_success (handler#approveSquareMembers args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("approveSquareMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createSquareChat (seqid, iprot, oprot) =
    let args = read_createSquareChat_args iprot in
      iprot#readMessageEnd;
      let result = new createSquareChat_result in
        (try
          result#set_success (handler#createSquareChat args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createSquareChat", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createSquare (seqid, iprot, oprot) =
    let args = read_createSquare_args iprot in
      iprot#readMessageEnd;
      let result = new createSquare_result in
        (try
          result#set_success (handler#createSquare args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createSquare", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_deleteSquareChat (seqid, iprot, oprot) =
    let args = read_deleteSquareChat_args iprot in
      iprot#readMessageEnd;
      let result = new deleteSquareChat_result in
        (try
          result#set_success (handler#deleteSquareChat args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("deleteSquareChat", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_deleteSquare (seqid, iprot, oprot) =
    let args = read_deleteSquare_args iprot in
      iprot#readMessageEnd;
      let result = new deleteSquare_result in
        (try
          result#set_success (handler#deleteSquare args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("deleteSquare", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_destroyMessage (seqid, iprot, oprot) =
    let args = read_destroyMessage_args iprot in
      iprot#readMessageEnd;
      let result = new destroyMessage_result in
        (try
          result#set_success (handler#destroyMessage args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("destroyMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getJoinableSquareChats (seqid, iprot, oprot) =
    let args = read_getJoinableSquareChats_args iprot in
      iprot#readMessageEnd;
      let result = new getJoinableSquareChats_result in
        (try
          result#set_success (handler#getJoinableSquareChats args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getJoinableSquareChats", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getInvitationTicketUrl (seqid, iprot, oprot) =
    let args = read_getInvitationTicketUrl_args iprot in
      iprot#readMessageEnd;
      let result = new getInvitationTicketUrl_result in
        (try
          result#set_success (handler#getInvitationTicketUrl args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getInvitationTicketUrl", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findSquareByInvitationTicket (seqid, iprot, oprot) =
    let args = read_findSquareByInvitationTicket_args iprot in
      iprot#readMessageEnd;
      let result = new findSquareByInvitationTicket_result in
        (try
          result#set_success (handler#findSquareByInvitationTicket args#get_request);
        with
          | SquareException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findSquareByInvitationTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "getSquareChatAnnouncements" self#process_getSquareChatAnnouncements;
    Hashtbl.add processMap "deleteSquareChatAnnouncement" self#process_deleteSquareChatAnnouncement;
    Hashtbl.add processMap "createSquareChatAnnouncement" self#process_createSquareChatAnnouncement;
    Hashtbl.add processMap "getNoteStatus" self#process_getNoteStatus;
    Hashtbl.add processMap "getSquareStatus" self#process_getSquareStatus;
    Hashtbl.add processMap "reportSquareMember" self#process_reportSquareMember;
    Hashtbl.add processMap "reportSquareMessage" self#process_reportSquareMessage;
    Hashtbl.add processMap "reportSquareChat" self#process_reportSquareChat;
    Hashtbl.add processMap "reportSquare" self#process_reportSquare;
    Hashtbl.add processMap "updateSquareMemberRelation" self#process_updateSquareMemberRelation;
    Hashtbl.add processMap "updateSquareAuthority" self#process_updateSquareAuthority;
    Hashtbl.add processMap "updateSquareChatMember" self#process_updateSquareChatMember;
    Hashtbl.add processMap "updateSquareChat" self#process_updateSquareChat;
    Hashtbl.add processMap "refreshSubscriptions" self#process_refreshSubscriptions;
    Hashtbl.add processMap "removeSubscriptions" self#process_removeSubscriptions;
    Hashtbl.add processMap "rejectSquareMembers" self#process_rejectSquareMembers;
    Hashtbl.add processMap "updateSquareMembers" self#process_updateSquareMembers;
    Hashtbl.add processMap "updateSquareMember" self#process_updateSquareMember;
    Hashtbl.add processMap "updateSquareFeatureSet" self#process_updateSquareFeatureSet;
    Hashtbl.add processMap "getSquareFeatureSet" self#process_getSquareFeatureSet;
    Hashtbl.add processMap "searchSquares" self#process_searchSquares;
    Hashtbl.add processMap "updateSquare" self#process_updateSquare;
    Hashtbl.add processMap "getCategories" self#process_getCategories;
    Hashtbl.add processMap "searchSquareMembers" self#process_searchSquareMembers;
    Hashtbl.add processMap "fetchSquareChatEvents" self#process_fetchSquareChatEvents;
    Hashtbl.add processMap "fetchMyEvents" self#process_fetchMyEvents;
    Hashtbl.add processMap "markAsRead" self#process_markAsRead;
    Hashtbl.add processMap "getSquareAuthority" self#process_getSquareAuthority;
    Hashtbl.add processMap "sendMessage" self#process_sendMessage;
    Hashtbl.add processMap "leaveSquare" self#process_leaveSquare;
    Hashtbl.add processMap "leaveSquareChat" self#process_leaveSquareChat;
    Hashtbl.add processMap "joinSquareChat" self#process_joinSquareChat;
    Hashtbl.add processMap "joinSquare" self#process_joinSquare;
    Hashtbl.add processMap "inviteToSquare" self#process_inviteToSquare;
    Hashtbl.add processMap "inviteToSquareChat" self#process_inviteToSquareChat;
    Hashtbl.add processMap "getSquareMember" self#process_getSquareMember;
    Hashtbl.add processMap "getSquareMembers" self#process_getSquareMembers;
    Hashtbl.add processMap "getSquareMemberRelation" self#process_getSquareMemberRelation;
    Hashtbl.add processMap "getSquareMemberRelations" self#process_getSquareMemberRelations;
    Hashtbl.add processMap "getSquareChatMembers" self#process_getSquareChatMembers;
    Hashtbl.add processMap "getSquareChatStatus" self#process_getSquareChatStatus;
    Hashtbl.add processMap "getSquareChat" self#process_getSquareChat;
    Hashtbl.add processMap "getSquare" self#process_getSquare;
    Hashtbl.add processMap "getJoinedSquares" self#process_getJoinedSquares;
    Hashtbl.add processMap "getJoinedSquareChats" self#process_getJoinedSquareChats;
    Hashtbl.add processMap "approveSquareMembers" self#process_approveSquareMembers;
    Hashtbl.add processMap "createSquareChat" self#process_createSquareChat;
    Hashtbl.add processMap "createSquare" self#process_createSquare;
    Hashtbl.add processMap "deleteSquareChat" self#process_deleteSquareChat;
    Hashtbl.add processMap "deleteSquare" self#process_deleteSquare;
    Hashtbl.add processMap "destroyMessage" self#process_destroyMessage;
    Hashtbl.add processMap "getJoinableSquareChats" self#process_getJoinableSquareChats;
    Hashtbl.add processMap "getInvitationTicketUrl" self#process_getInvitationTicketUrl;
    Hashtbl.add processMap "findSquareByInvitationTicket" self#process_findSquareByInvitationTicket;
end

