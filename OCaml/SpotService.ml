(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class lookupByPhoneNumber_args =
object (self)
  val mutable _countryAreaCode : string option = None
  method get_countryAreaCode = _countryAreaCode
  method grab_countryAreaCode = match _countryAreaCode with None->raise (Field_empty "lookupByPhoneNumber_args.countryAreaCode") | Some _x4676 -> _x4676
  method set_countryAreaCode _x4676 = _countryAreaCode <- Some _x4676
  method unset_countryAreaCode = _countryAreaCode <- None
  method reset_countryAreaCode = _countryAreaCode <- None

  val mutable _phoneNumber : string option = None
  method get_phoneNumber = _phoneNumber
  method grab_phoneNumber = match _phoneNumber with None->raise (Field_empty "lookupByPhoneNumber_args.phoneNumber") | Some _x4677 -> _x4677
  method set_phoneNumber _x4677 = _phoneNumber <- Some _x4677
  method unset_phoneNumber = _phoneNumber <- None
  method reset_phoneNumber = _phoneNumber <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "lookupByPhoneNumber_args";
    (match _countryAreaCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("countryAreaCode",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _phoneNumber with None -> () | Some _v -> 
      oprot#writeFieldBegin("phoneNumber",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_lookupByPhoneNumber_args (iprot : Protocol.t) =
  let _str4680 = new lookupByPhoneNumber_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4681,_id4682) = iprot#readFieldBegin in
        if _t4681 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4682 with 
          | 2 -> (if _t4681 = Protocol.T_STRING then
              _str4680#set_countryAreaCode iprot#readString
            else
              iprot#skip _t4681)
          | 3 -> (if _t4681 = Protocol.T_STRING then
              _str4680#set_phoneNumber iprot#readString
            else
              iprot#skip _t4681)
          | _ -> iprot#skip _t4681);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4680

class lookupByPhoneNumber_result =
object (self)
  val mutable _success : spotPhoneNumberResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "lookupByPhoneNumber_result.success") | Some _x4683 -> _x4683
  method set_success _x4683 = _success <- Some _x4683
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "lookupByPhoneNumber_result.e") | Some _x4684 -> _x4684
  method set_e _x4684 = _e <- Some _x4684
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "lookupByPhoneNumber_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_lookupByPhoneNumber_result (iprot : Protocol.t) =
  let _str4687 = new lookupByPhoneNumber_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4688,_id4689) = iprot#readFieldBegin in
        if _t4688 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4689 with 
          | 0 -> (if _t4688 = Protocol.T_STRUCT then
              _str4687#set_success (read_spotPhoneNumberResponse iprot)
            else
              iprot#skip _t4688)
          | 1 -> (if _t4688 = Protocol.T_STRUCT then
              _str4687#set_e (read_talkException iprot)
            else
              iprot#skip _t4688)
          | _ -> iprot#skip _t4688);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4687

class lookupNearby_args =
object (self)
  val mutable _location : location option = None
  method get_location = _location
  method grab_location = match _location with None->raise (Field_empty "lookupNearby_args.location") | Some _x4690 -> _x4690
  method set_location _x4690 = _location <- Some _x4690
  method unset_location = _location <- None
  method reset_location = _location <- None

  val mutable _category : SpotCategory.t option = None
  method get_category = _category
  method grab_category = match _category with None->raise (Field_empty "lookupNearby_args.category") | Some _x4691 -> _x4691
  method set_category _x4691 = _category <- Some _x4691
  method unset_category = _category <- None
  method reset_category = _category <- None

  val mutable _query : string option = None
  method get_query = _query
  method grab_query = match _query with None->raise (Field_empty "lookupNearby_args.query") | Some _x4692 -> _x4692
  method set_query _x4692 = _query <- Some _x4692
  method unset_query = _query <- None
  method reset_query = _query <- None

  val mutable _countryAreaCode : string option = None
  method get_countryAreaCode = _countryAreaCode
  method grab_countryAreaCode = match _countryAreaCode with None->raise (Field_empty "lookupNearby_args.countryAreaCode") | Some _x4693 -> _x4693
  method set_countryAreaCode _x4693 = _countryAreaCode <- Some _x4693
  method unset_countryAreaCode = _countryAreaCode <- None
  method reset_countryAreaCode = _countryAreaCode <- None

  method copy =
      let _new = Oo.copy self in
      if _location <> None then
        _new#set_location self#grab_location#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "lookupNearby_args";
    (match _location with None -> () | Some _v -> 
      oprot#writeFieldBegin("location",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _category with None -> () | Some _v -> 
      oprot#writeFieldBegin("category",Protocol.T_I32,3);
      oprot#writeI32(SpotCategory.to_i _v);
      oprot#writeFieldEnd
    );
    (match _query with None -> () | Some _v -> 
      oprot#writeFieldBegin("query",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _countryAreaCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("countryAreaCode",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_lookupNearby_args (iprot : Protocol.t) =
  let _str4696 = new lookupNearby_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4697,_id4698) = iprot#readFieldBegin in
        if _t4697 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4698 with 
          | 2 -> (if _t4697 = Protocol.T_STRUCT then
              _str4696#set_location (read_location iprot)
            else
              iprot#skip _t4697)
          | 3 -> (if _t4697 = Protocol.T_I32 then
              _str4696#set_category (SpotCategory.of_i iprot#readI32)
            else
              iprot#skip _t4697)
          | 4 -> (if _t4697 = Protocol.T_STRING then
              _str4696#set_query iprot#readString
            else
              iprot#skip _t4697)
          | 5 -> (if _t4697 = Protocol.T_STRING then
              _str4696#set_countryAreaCode iprot#readString
            else
              iprot#skip _t4697)
          | _ -> iprot#skip _t4697);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4696

class lookupNearby_result =
object (self)
  val mutable _success : spotNearbyResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "lookupNearby_result.success") | Some _x4699 -> _x4699
  method set_success _x4699 = _success <- Some _x4699
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "lookupNearby_result.e") | Some _x4700 -> _x4700
  method set_e _x4700 = _e <- Some _x4700
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "lookupNearby_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_lookupNearby_result (iprot : Protocol.t) =
  let _str4703 = new lookupNearby_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4704,_id4705) = iprot#readFieldBegin in
        if _t4704 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4705 with 
          | 0 -> (if _t4704 = Protocol.T_STRUCT then
              _str4703#set_success (read_spotNearbyResponse iprot)
            else
              iprot#skip _t4704)
          | 1 -> (if _t4704 = Protocol.T_STRUCT then
              _str4703#set_e (read_talkException iprot)
            else
              iprot#skip _t4704)
          | _ -> iprot#skip _t4704);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4703

class virtual iface =
object (self)
  method virtual lookupByPhoneNumber : string option -> string option -> spotPhoneNumberResponse
  method virtual lookupNearby : location option -> SpotCategory.t option -> string option -> string option -> spotNearbyResponse
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method lookupByPhoneNumber countryAreaCode phoneNumber = 
    self#send_lookupByPhoneNumber countryAreaCode phoneNumber;
    self#recv_lookupByPhoneNumber
  method private send_lookupByPhoneNumber countryAreaCode phoneNumber = 
    oprot#writeMessageBegin ("lookupByPhoneNumber", Protocol.CALL, seqid);
    let args = new lookupByPhoneNumber_args in
      args#set_countryAreaCode countryAreaCode;
      args#set_phoneNumber phoneNumber;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_lookupByPhoneNumber  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_lookupByPhoneNumber_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "lookupByPhoneNumber failed: unknown result")))
  method lookupNearby location category query countryAreaCode = 
    self#send_lookupNearby location category query countryAreaCode;
    self#recv_lookupNearby
  method private send_lookupNearby location category query countryAreaCode = 
    oprot#writeMessageBegin ("lookupNearby", Protocol.CALL, seqid);
    let args = new lookupNearby_args in
      args#set_location location;
      args#set_category category;
      args#set_query query;
      args#set_countryAreaCode countryAreaCode;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_lookupNearby  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_lookupNearby_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "lookupNearby failed: unknown result")))
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 2
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_lookupByPhoneNumber (seqid, iprot, oprot) =
    let args = read_lookupByPhoneNumber_args iprot in
      iprot#readMessageEnd;
      let result = new lookupByPhoneNumber_result in
        (try
          result#set_success (handler#lookupByPhoneNumber args#get_countryAreaCode args#get_phoneNumber);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("lookupByPhoneNumber", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_lookupNearby (seqid, iprot, oprot) =
    let args = read_lookupNearby_args iprot in
      iprot#readMessageEnd;
      let result = new lookupNearby_result in
        (try
          result#set_success (handler#lookupNearby args#get_location args#get_category args#get_query args#get_countryAreaCode);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("lookupNearby", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "lookupByPhoneNumber" self#process_lookupByPhoneNumber;
    Hashtbl.add processMap "lookupNearby" self#process_lookupNearby;
end

