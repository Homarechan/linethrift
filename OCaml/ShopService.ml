(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class buyCoinProduct_args =
object (self)
  val mutable _paymentReservation : paymentReservation option = None
  method get_paymentReservation = _paymentReservation
  method grab_paymentReservation = match _paymentReservation with None->raise (Field_empty "buyCoinProduct_args.paymentReservation") | Some _x6745 -> _x6745
  method set_paymentReservation _x6745 = _paymentReservation <- Some _x6745
  method unset_paymentReservation = _paymentReservation <- None
  method reset_paymentReservation = _paymentReservation <- None

  method copy =
      let _new = Oo.copy self in
      if _paymentReservation <> None then
        _new#set_paymentReservation self#grab_paymentReservation#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "buyCoinProduct_args";
    (match _paymentReservation with None -> () | Some _v -> 
      oprot#writeFieldBegin("paymentReservation",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_buyCoinProduct_args (iprot : Protocol.t) =
  let _str6748 = new buyCoinProduct_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6749,_id6750) = iprot#readFieldBegin in
        if _t6749 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6750 with 
          | 2 -> (if _t6749 = Protocol.T_STRUCT then
              _str6748#set_paymentReservation (read_paymentReservation iprot)
            else
              iprot#skip _t6749)
          | _ -> iprot#skip _t6749);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6748

class buyCoinProduct_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "buyCoinProduct_result.e") | Some _x6751 -> _x6751
  method set_e _x6751 = _e <- Some _x6751
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "buyCoinProduct_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_buyCoinProduct_result (iprot : Protocol.t) =
  let _str6754 = new buyCoinProduct_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6755,_id6756) = iprot#readFieldBegin in
        if _t6755 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6756 with 
          | 1 -> (if _t6755 = Protocol.T_STRUCT then
              _str6754#set_e (read_talkException iprot)
            else
              iprot#skip _t6755)
          | _ -> iprot#skip _t6755);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6754

class buyFreeProduct_args =
object (self)
  val mutable _receiverMid : string option = None
  method get_receiverMid = _receiverMid
  method grab_receiverMid = match _receiverMid with None->raise (Field_empty "buyFreeProduct_args.receiverMid") | Some _x6757 -> _x6757
  method set_receiverMid _x6757 = _receiverMid <- Some _x6757
  method unset_receiverMid = _receiverMid <- None
  method reset_receiverMid = _receiverMid <- None

  val mutable _productId : string option = None
  method get_productId = _productId
  method grab_productId = match _productId with None->raise (Field_empty "buyFreeProduct_args.productId") | Some _x6758 -> _x6758
  method set_productId _x6758 = _productId <- Some _x6758
  method unset_productId = _productId <- None
  method reset_productId = _productId <- None

  val mutable _messageTemplate : Int32.t option = None
  method get_messageTemplate = _messageTemplate
  method grab_messageTemplate = match _messageTemplate with None->raise (Field_empty "buyFreeProduct_args.messageTemplate") | Some _x6759 -> _x6759
  method set_messageTemplate _x6759 = _messageTemplate <- Some _x6759
  method unset_messageTemplate = _messageTemplate <- None
  method reset_messageTemplate = _messageTemplate <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "buyFreeProduct_args.language") | Some _x6760 -> _x6760
  method set_language _x6760 = _language <- Some _x6760
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "buyFreeProduct_args.country") | Some _x6761 -> _x6761
  method set_country _x6761 = _country <- Some _x6761
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _packageId : Int64.t option = None
  method get_packageId = _packageId
  method grab_packageId = match _packageId with None->raise (Field_empty "buyFreeProduct_args.packageId") | Some _x6762 -> _x6762
  method set_packageId _x6762 = _packageId <- Some _x6762
  method unset_packageId = _packageId <- None
  method reset_packageId = _packageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "buyFreeProduct_args";
    (match _receiverMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("receiverMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _productId with None -> () | Some _v -> 
      oprot#writeFieldBegin("productId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageTemplate with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageTemplate",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _packageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("packageId",Protocol.T_I64,7);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_buyFreeProduct_args (iprot : Protocol.t) =
  let _str6765 = new buyFreeProduct_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6766,_id6767) = iprot#readFieldBegin in
        if _t6766 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6767 with 
          | 2 -> (if _t6766 = Protocol.T_STRING then
              _str6765#set_receiverMid iprot#readString
            else
              iprot#skip _t6766)
          | 3 -> (if _t6766 = Protocol.T_STRING then
              _str6765#set_productId iprot#readString
            else
              iprot#skip _t6766)
          | 4 -> (if _t6766 = Protocol.T_I32 then
              _str6765#set_messageTemplate iprot#readI32
            else
              iprot#skip _t6766)
          | 5 -> (if _t6766 = Protocol.T_STRING then
              _str6765#set_language iprot#readString
            else
              iprot#skip _t6766)
          | 6 -> (if _t6766 = Protocol.T_STRING then
              _str6765#set_country iprot#readString
            else
              iprot#skip _t6766)
          | 7 -> (if _t6766 = Protocol.T_I64 then
              _str6765#set_packageId iprot#readI64
            else
              iprot#skip _t6766)
          | _ -> iprot#skip _t6766);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6765

class buyFreeProduct_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "buyFreeProduct_result.e") | Some _x6768 -> _x6768
  method set_e _x6768 = _e <- Some _x6768
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "buyFreeProduct_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_buyFreeProduct_result (iprot : Protocol.t) =
  let _str6771 = new buyFreeProduct_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6772,_id6773) = iprot#readFieldBegin in
        if _t6772 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6773 with 
          | 1 -> (if _t6772 = Protocol.T_STRUCT then
              _str6771#set_e (read_talkException iprot)
            else
              iprot#skip _t6772)
          | _ -> iprot#skip _t6772);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6771

class buyMustbuyProduct_args =
object (self)
  val mutable _receiverMid : string option = None
  method get_receiverMid = _receiverMid
  method grab_receiverMid = match _receiverMid with None->raise (Field_empty "buyMustbuyProduct_args.receiverMid") | Some _x6774 -> _x6774
  method set_receiverMid _x6774 = _receiverMid <- Some _x6774
  method unset_receiverMid = _receiverMid <- None
  method reset_receiverMid = _receiverMid <- None

  val mutable _productId : string option = None
  method get_productId = _productId
  method grab_productId = match _productId with None->raise (Field_empty "buyMustbuyProduct_args.productId") | Some _x6775 -> _x6775
  method set_productId _x6775 = _productId <- Some _x6775
  method unset_productId = _productId <- None
  method reset_productId = _productId <- None

  val mutable _messageTemplate : Int32.t option = None
  method get_messageTemplate = _messageTemplate
  method grab_messageTemplate = match _messageTemplate with None->raise (Field_empty "buyMustbuyProduct_args.messageTemplate") | Some _x6776 -> _x6776
  method set_messageTemplate _x6776 = _messageTemplate <- Some _x6776
  method unset_messageTemplate = _messageTemplate <- None
  method reset_messageTemplate = _messageTemplate <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "buyMustbuyProduct_args.language") | Some _x6777 -> _x6777
  method set_language _x6777 = _language <- Some _x6777
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "buyMustbuyProduct_args.country") | Some _x6778 -> _x6778
  method set_country _x6778 = _country <- Some _x6778
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _packageId : Int64.t option = None
  method get_packageId = _packageId
  method grab_packageId = match _packageId with None->raise (Field_empty "buyMustbuyProduct_args.packageId") | Some _x6779 -> _x6779
  method set_packageId _x6779 = _packageId <- Some _x6779
  method unset_packageId = _packageId <- None
  method reset_packageId = _packageId <- None

  val mutable _serialNumber : string option = None
  method get_serialNumber = _serialNumber
  method grab_serialNumber = match _serialNumber with None->raise (Field_empty "buyMustbuyProduct_args.serialNumber") | Some _x6780 -> _x6780
  method set_serialNumber _x6780 = _serialNumber <- Some _x6780
  method unset_serialNumber = _serialNumber <- None
  method reset_serialNumber = _serialNumber <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "buyMustbuyProduct_args";
    (match _receiverMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("receiverMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _productId with None -> () | Some _v -> 
      oprot#writeFieldBegin("productId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageTemplate with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageTemplate",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _packageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("packageId",Protocol.T_I64,7);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _serialNumber with None -> () | Some _v -> 
      oprot#writeFieldBegin("serialNumber",Protocol.T_STRING,8);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_buyMustbuyProduct_args (iprot : Protocol.t) =
  let _str6783 = new buyMustbuyProduct_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6784,_id6785) = iprot#readFieldBegin in
        if _t6784 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6785 with 
          | 2 -> (if _t6784 = Protocol.T_STRING then
              _str6783#set_receiverMid iprot#readString
            else
              iprot#skip _t6784)
          | 3 -> (if _t6784 = Protocol.T_STRING then
              _str6783#set_productId iprot#readString
            else
              iprot#skip _t6784)
          | 4 -> (if _t6784 = Protocol.T_I32 then
              _str6783#set_messageTemplate iprot#readI32
            else
              iprot#skip _t6784)
          | 5 -> (if _t6784 = Protocol.T_STRING then
              _str6783#set_language iprot#readString
            else
              iprot#skip _t6784)
          | 6 -> (if _t6784 = Protocol.T_STRING then
              _str6783#set_country iprot#readString
            else
              iprot#skip _t6784)
          | 7 -> (if _t6784 = Protocol.T_I64 then
              _str6783#set_packageId iprot#readI64
            else
              iprot#skip _t6784)
          | 8 -> (if _t6784 = Protocol.T_STRING then
              _str6783#set_serialNumber iprot#readString
            else
              iprot#skip _t6784)
          | _ -> iprot#skip _t6784);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6783

class buyMustbuyProduct_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "buyMustbuyProduct_result.e") | Some _x6786 -> _x6786
  method set_e _x6786 = _e <- Some _x6786
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "buyMustbuyProduct_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_buyMustbuyProduct_result (iprot : Protocol.t) =
  let _str6789 = new buyMustbuyProduct_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6790,_id6791) = iprot#readFieldBegin in
        if _t6790 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6791 with 
          | 1 -> (if _t6790 = Protocol.T_STRUCT then
              _str6789#set_e (read_talkException iprot)
            else
              iprot#skip _t6790)
          | _ -> iprot#skip _t6790);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6789

class checkCanReceivePresent_args =
object (self)
  val mutable _recipientMid : string option = None
  method get_recipientMid = _recipientMid
  method grab_recipientMid = match _recipientMid with None->raise (Field_empty "checkCanReceivePresent_args.recipientMid") | Some _x6792 -> _x6792
  method set_recipientMid _x6792 = _recipientMid <- Some _x6792
  method unset_recipientMid = _recipientMid <- None
  method reset_recipientMid = _recipientMid <- None

  val mutable _packageId : Int64.t option = None
  method get_packageId = _packageId
  method grab_packageId = match _packageId with None->raise (Field_empty "checkCanReceivePresent_args.packageId") | Some _x6793 -> _x6793
  method set_packageId _x6793 = _packageId <- Some _x6793
  method unset_packageId = _packageId <- None
  method reset_packageId = _packageId <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "checkCanReceivePresent_args.language") | Some _x6794 -> _x6794
  method set_language _x6794 = _language <- Some _x6794
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "checkCanReceivePresent_args.country") | Some _x6795 -> _x6795
  method set_country _x6795 = _country <- Some _x6795
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkCanReceivePresent_args";
    (match _recipientMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("recipientMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _packageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("packageId",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkCanReceivePresent_args (iprot : Protocol.t) =
  let _str6798 = new checkCanReceivePresent_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6799,_id6800) = iprot#readFieldBegin in
        if _t6799 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6800 with 
          | 2 -> (if _t6799 = Protocol.T_STRING then
              _str6798#set_recipientMid iprot#readString
            else
              iprot#skip _t6799)
          | 3 -> (if _t6799 = Protocol.T_I64 then
              _str6798#set_packageId iprot#readI64
            else
              iprot#skip _t6799)
          | 4 -> (if _t6799 = Protocol.T_STRING then
              _str6798#set_language iprot#readString
            else
              iprot#skip _t6799)
          | 5 -> (if _t6799 = Protocol.T_STRING then
              _str6798#set_country iprot#readString
            else
              iprot#skip _t6799)
          | _ -> iprot#skip _t6799);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6798

class checkCanReceivePresent_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "checkCanReceivePresent_result.e") | Some _x6801 -> _x6801
  method set_e _x6801 = _e <- Some _x6801
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkCanReceivePresent_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkCanReceivePresent_result (iprot : Protocol.t) =
  let _str6804 = new checkCanReceivePresent_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6805,_id6806) = iprot#readFieldBegin in
        if _t6805 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6806 with 
          | 1 -> (if _t6805 = Protocol.T_STRUCT then
              _str6804#set_e (read_talkException iprot)
            else
              iprot#skip _t6805)
          | _ -> iprot#skip _t6805);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6804

class getActivePurchases_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getActivePurchases_args.start") | Some _x6807 -> _x6807
  method set_start _x6807 = _start <- Some _x6807
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getActivePurchases_args.size") | Some _x6808 -> _x6808
  method set_size _x6808 = _size <- Some _x6808
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getActivePurchases_args.language") | Some _x6809 -> _x6809
  method set_language _x6809 = _language <- Some _x6809
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getActivePurchases_args.country") | Some _x6810 -> _x6810
  method set_country _x6810 = _country <- Some _x6810
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActivePurchases_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActivePurchases_args (iprot : Protocol.t) =
  let _str6813 = new getActivePurchases_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6814,_id6815) = iprot#readFieldBegin in
        if _t6814 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6815 with 
          | 2 -> (if _t6814 = Protocol.T_I64 then
              _str6813#set_start iprot#readI64
            else
              iprot#skip _t6814)
          | 3 -> (if _t6814 = Protocol.T_I32 then
              _str6813#set_size iprot#readI32
            else
              iprot#skip _t6814)
          | 4 -> (if _t6814 = Protocol.T_STRING then
              _str6813#set_language iprot#readString
            else
              iprot#skip _t6814)
          | 5 -> (if _t6814 = Protocol.T_STRING then
              _str6813#set_country iprot#readString
            else
              iprot#skip _t6814)
          | _ -> iprot#skip _t6814);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6813

class getActivePurchases_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getActivePurchases_result.success") | Some _x6816 -> _x6816
  method set_success _x6816 = _success <- Some _x6816
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getActivePurchases_result.e") | Some _x6817 -> _x6817
  method set_e _x6817 = _e <- Some _x6817
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActivePurchases_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActivePurchases_result (iprot : Protocol.t) =
  let _str6820 = new getActivePurchases_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6821,_id6822) = iprot#readFieldBegin in
        if _t6821 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6822 with 
          | 0 -> (if _t6821 = Protocol.T_STRUCT then
              _str6820#set_success (read_productList iprot)
            else
              iprot#skip _t6821)
          | 1 -> (if _t6821 = Protocol.T_STRUCT then
              _str6820#set_e (read_talkException iprot)
            else
              iprot#skip _t6821)
          | _ -> iprot#skip _t6821);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6820

class getActivePurchaseVersions_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getActivePurchaseVersions_args.start") | Some _x6823 -> _x6823
  method set_start _x6823 = _start <- Some _x6823
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getActivePurchaseVersions_args.size") | Some _x6824 -> _x6824
  method set_size _x6824 = _size <- Some _x6824
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getActivePurchaseVersions_args.language") | Some _x6825 -> _x6825
  method set_language _x6825 = _language <- Some _x6825
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getActivePurchaseVersions_args.country") | Some _x6826 -> _x6826
  method set_country _x6826 = _country <- Some _x6826
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActivePurchaseVersions_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActivePurchaseVersions_args (iprot : Protocol.t) =
  let _str6829 = new getActivePurchaseVersions_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6830,_id6831) = iprot#readFieldBegin in
        if _t6830 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6831 with 
          | 2 -> (if _t6830 = Protocol.T_I64 then
              _str6829#set_start iprot#readI64
            else
              iprot#skip _t6830)
          | 3 -> (if _t6830 = Protocol.T_I32 then
              _str6829#set_size iprot#readI32
            else
              iprot#skip _t6830)
          | 4 -> (if _t6830 = Protocol.T_STRING then
              _str6829#set_language iprot#readString
            else
              iprot#skip _t6830)
          | 5 -> (if _t6830 = Protocol.T_STRING then
              _str6829#set_country iprot#readString
            else
              iprot#skip _t6830)
          | _ -> iprot#skip _t6830);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6829

class getActivePurchaseVersions_result =
object (self)
  val mutable _success : productSimpleList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getActivePurchaseVersions_result.success") | Some _x6832 -> _x6832
  method set_success _x6832 = _success <- Some _x6832
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getActivePurchaseVersions_result.e") | Some _x6833 -> _x6833
  method set_e _x6833 = _e <- Some _x6833
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActivePurchaseVersions_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActivePurchaseVersions_result (iprot : Protocol.t) =
  let _str6836 = new getActivePurchaseVersions_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6837,_id6838) = iprot#readFieldBegin in
        if _t6837 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6838 with 
          | 0 -> (if _t6837 = Protocol.T_STRUCT then
              _str6836#set_success (read_productSimpleList iprot)
            else
              iprot#skip _t6837)
          | 1 -> (if _t6837 = Protocol.T_STRUCT then
              _str6836#set_e (read_talkException iprot)
            else
              iprot#skip _t6837)
          | _ -> iprot#skip _t6837);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6836

class getCoinProducts_args =
object (self)
  val mutable _appStoreCode : PaymentType.t option = None
  method get_appStoreCode = _appStoreCode
  method grab_appStoreCode = match _appStoreCode with None->raise (Field_empty "getCoinProducts_args.appStoreCode") | Some _x6839 -> _x6839
  method set_appStoreCode _x6839 = _appStoreCode <- Some _x6839
  method unset_appStoreCode = _appStoreCode <- None
  method reset_appStoreCode = _appStoreCode <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getCoinProducts_args.country") | Some _x6840 -> _x6840
  method set_country _x6840 = _country <- Some _x6840
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getCoinProducts_args.language") | Some _x6841 -> _x6841
  method set_language _x6841 = _language <- Some _x6841
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCoinProducts_args";
    (match _appStoreCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("appStoreCode",Protocol.T_I32,2);
      oprot#writeI32(PaymentType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCoinProducts_args (iprot : Protocol.t) =
  let _str6844 = new getCoinProducts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6845,_id6846) = iprot#readFieldBegin in
        if _t6845 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6846 with 
          | 2 -> (if _t6845 = Protocol.T_I32 then
              _str6844#set_appStoreCode (PaymentType.of_i iprot#readI32)
            else
              iprot#skip _t6845)
          | 3 -> (if _t6845 = Protocol.T_STRING then
              _str6844#set_country iprot#readString
            else
              iprot#skip _t6845)
          | 4 -> (if _t6845 = Protocol.T_STRING then
              _str6844#set_language iprot#readString
            else
              iprot#skip _t6845)
          | _ -> iprot#skip _t6845);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6844

class getCoinProducts_result =
object (self)
  val mutable _success : coinProductItem list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCoinProducts_result.success") | Some _x6847 -> _x6847
  method set_success _x6847 = _success <- Some _x6847
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCoinProducts_result.e") | Some _x6848 -> _x6848
  method set_e _x6848 = _e <- Some _x6848
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCoinProducts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter6851 ->         _iter6851#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCoinProducts_result (iprot : Protocol.t) =
  let _str6852 = new getCoinProducts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6853,_id6854) = iprot#readFieldBegin in
        if _t6853 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6854 with 
          | 0 -> (if _t6853 = Protocol.T_LIST then
              _str6852#set_success 
                (let (_etype6858,_size6855) = iprot#readListBegin in
                  let _con6859 = (Array.to_list (Array.init _size6855 (fun _ -> (read_coinProductItem iprot)))) in
                    iprot#readListEnd; _con6859)
            else
              iprot#skip _t6853)
          | 1 -> (if _t6853 = Protocol.T_STRUCT then
              _str6852#set_e (read_talkException iprot)
            else
              iprot#skip _t6853)
          | _ -> iprot#skip _t6853);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6852

class getCoinProductsByPgCode_args =
object (self)
  val mutable _appStoreCode : PaymentType.t option = None
  method get_appStoreCode = _appStoreCode
  method grab_appStoreCode = match _appStoreCode with None->raise (Field_empty "getCoinProductsByPgCode_args.appStoreCode") | Some _x6860 -> _x6860
  method set_appStoreCode _x6860 = _appStoreCode <- Some _x6860
  method unset_appStoreCode = _appStoreCode <- None
  method reset_appStoreCode = _appStoreCode <- None

  val mutable _pgCode : PaymentPgType.t option = None
  method get_pgCode = _pgCode
  method grab_pgCode = match _pgCode with None->raise (Field_empty "getCoinProductsByPgCode_args.pgCode") | Some _x6861 -> _x6861
  method set_pgCode _x6861 = _pgCode <- Some _x6861
  method unset_pgCode = _pgCode <- None
  method reset_pgCode = _pgCode <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getCoinProductsByPgCode_args.country") | Some _x6862 -> _x6862
  method set_country _x6862 = _country <- Some _x6862
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getCoinProductsByPgCode_args.language") | Some _x6863 -> _x6863
  method set_language _x6863 = _language <- Some _x6863
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCoinProductsByPgCode_args";
    (match _appStoreCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("appStoreCode",Protocol.T_I32,2);
      oprot#writeI32(PaymentType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _pgCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("pgCode",Protocol.T_I32,3);
      oprot#writeI32(PaymentPgType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCoinProductsByPgCode_args (iprot : Protocol.t) =
  let _str6866 = new getCoinProductsByPgCode_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6867,_id6868) = iprot#readFieldBegin in
        if _t6867 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6868 with 
          | 2 -> (if _t6867 = Protocol.T_I32 then
              _str6866#set_appStoreCode (PaymentType.of_i iprot#readI32)
            else
              iprot#skip _t6867)
          | 3 -> (if _t6867 = Protocol.T_I32 then
              _str6866#set_pgCode (PaymentPgType.of_i iprot#readI32)
            else
              iprot#skip _t6867)
          | 4 -> (if _t6867 = Protocol.T_STRING then
              _str6866#set_country iprot#readString
            else
              iprot#skip _t6867)
          | 5 -> (if _t6867 = Protocol.T_STRING then
              _str6866#set_language iprot#readString
            else
              iprot#skip _t6867)
          | _ -> iprot#skip _t6867);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6866

class getCoinProductsByPgCode_result =
object (self)
  val mutable _success : coinProductItem list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCoinProductsByPgCode_result.success") | Some _x6869 -> _x6869
  method set_success _x6869 = _success <- Some _x6869
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCoinProductsByPgCode_result.e") | Some _x6870 -> _x6870
  method set_e _x6870 = _e <- Some _x6870
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCoinProductsByPgCode_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter6873 ->         _iter6873#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCoinProductsByPgCode_result (iprot : Protocol.t) =
  let _str6874 = new getCoinProductsByPgCode_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6875,_id6876) = iprot#readFieldBegin in
        if _t6875 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6876 with 
          | 0 -> (if _t6875 = Protocol.T_LIST then
              _str6874#set_success 
                (let (_etype6880,_size6877) = iprot#readListBegin in
                  let _con6881 = (Array.to_list (Array.init _size6877 (fun _ -> (read_coinProductItem iprot)))) in
                    iprot#readListEnd; _con6881)
            else
              iprot#skip _t6875)
          | 1 -> (if _t6875 = Protocol.T_STRUCT then
              _str6874#set_e (read_talkException iprot)
            else
              iprot#skip _t6875)
          | _ -> iprot#skip _t6875);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6874

class getCoinPurchaseHistory_args =
object (self)
  val mutable _request : coinHistoryCondition option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getCoinPurchaseHistory_args.request") | Some _x6882 -> _x6882
  method set_request _x6882 = _request <- Some _x6882
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCoinPurchaseHistory_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCoinPurchaseHistory_args (iprot : Protocol.t) =
  let _str6885 = new getCoinPurchaseHistory_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6886,_id6887) = iprot#readFieldBegin in
        if _t6886 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6887 with 
          | 2 -> (if _t6886 = Protocol.T_STRUCT then
              _str6885#set_request (read_coinHistoryCondition iprot)
            else
              iprot#skip _t6886)
          | _ -> iprot#skip _t6886);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6885

class getCoinPurchaseHistory_result =
object (self)
  val mutable _success : coinHistoryResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCoinPurchaseHistory_result.success") | Some _x6888 -> _x6888
  method set_success _x6888 = _success <- Some _x6888
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCoinPurchaseHistory_result.e") | Some _x6889 -> _x6889
  method set_e _x6889 = _e <- Some _x6889
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCoinPurchaseHistory_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCoinPurchaseHistory_result (iprot : Protocol.t) =
  let _str6892 = new getCoinPurchaseHistory_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6893,_id6894) = iprot#readFieldBegin in
        if _t6893 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6894 with 
          | 0 -> (if _t6893 = Protocol.T_STRUCT then
              _str6892#set_success (read_coinHistoryResult iprot)
            else
              iprot#skip _t6893)
          | 1 -> (if _t6893 = Protocol.T_STRUCT then
              _str6892#set_e (read_talkException iprot)
            else
              iprot#skip _t6893)
          | _ -> iprot#skip _t6893);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6892

class getCoinUseAndRefundHistory_args =
object (self)
  val mutable _request : coinHistoryCondition option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getCoinUseAndRefundHistory_args.request") | Some _x6895 -> _x6895
  method set_request _x6895 = _request <- Some _x6895
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCoinUseAndRefundHistory_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCoinUseAndRefundHistory_args (iprot : Protocol.t) =
  let _str6898 = new getCoinUseAndRefundHistory_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6899,_id6900) = iprot#readFieldBegin in
        if _t6899 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6900 with 
          | 2 -> (if _t6899 = Protocol.T_STRUCT then
              _str6898#set_request (read_coinHistoryCondition iprot)
            else
              iprot#skip _t6899)
          | _ -> iprot#skip _t6899);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6898

class getCoinUseAndRefundHistory_result =
object (self)
  val mutable _success : coinHistoryResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCoinUseAndRefundHistory_result.success") | Some _x6901 -> _x6901
  method set_success _x6901 = _success <- Some _x6901
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCoinUseAndRefundHistory_result.e") | Some _x6902 -> _x6902
  method set_e _x6902 = _e <- Some _x6902
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCoinUseAndRefundHistory_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCoinUseAndRefundHistory_result (iprot : Protocol.t) =
  let _str6905 = new getCoinUseAndRefundHistory_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6906,_id6907) = iprot#readFieldBegin in
        if _t6906 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6907 with 
          | 0 -> (if _t6906 = Protocol.T_STRUCT then
              _str6905#set_success (read_coinHistoryResult iprot)
            else
              iprot#skip _t6906)
          | 1 -> (if _t6906 = Protocol.T_STRUCT then
              _str6905#set_e (read_talkException iprot)
            else
              iprot#skip _t6906)
          | _ -> iprot#skip _t6906);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6905

class getDownloads_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getDownloads_args.start") | Some _x6908 -> _x6908
  method set_start _x6908 = _start <- Some _x6908
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getDownloads_args.size") | Some _x6909 -> _x6909
  method set_size _x6909 = _size <- Some _x6909
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getDownloads_args.language") | Some _x6910 -> _x6910
  method set_language _x6910 = _language <- Some _x6910
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getDownloads_args.country") | Some _x6911 -> _x6911
  method set_country _x6911 = _country <- Some _x6911
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getDownloads_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getDownloads_args (iprot : Protocol.t) =
  let _str6914 = new getDownloads_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6915,_id6916) = iprot#readFieldBegin in
        if _t6915 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6916 with 
          | 2 -> (if _t6915 = Protocol.T_I64 then
              _str6914#set_start iprot#readI64
            else
              iprot#skip _t6915)
          | 3 -> (if _t6915 = Protocol.T_I32 then
              _str6914#set_size iprot#readI32
            else
              iprot#skip _t6915)
          | 4 -> (if _t6915 = Protocol.T_STRING then
              _str6914#set_language iprot#readString
            else
              iprot#skip _t6915)
          | 5 -> (if _t6915 = Protocol.T_STRING then
              _str6914#set_country iprot#readString
            else
              iprot#skip _t6915)
          | _ -> iprot#skip _t6915);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6914

class getDownloads_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getDownloads_result.success") | Some _x6917 -> _x6917
  method set_success _x6917 = _success <- Some _x6917
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getDownloads_result.e") | Some _x6918 -> _x6918
  method set_e _x6918 = _e <- Some _x6918
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getDownloads_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getDownloads_result (iprot : Protocol.t) =
  let _str6921 = new getDownloads_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6922,_id6923) = iprot#readFieldBegin in
        if _t6922 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6923 with 
          | 0 -> (if _t6922 = Protocol.T_STRUCT then
              _str6921#set_success (read_productList iprot)
            else
              iprot#skip _t6922)
          | 1 -> (if _t6922 = Protocol.T_STRUCT then
              _str6921#set_e (read_talkException iprot)
            else
              iprot#skip _t6922)
          | _ -> iprot#skip _t6922);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6921

class getEventPackages_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getEventPackages_args.start") | Some _x6924 -> _x6924
  method set_start _x6924 = _start <- Some _x6924
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getEventPackages_args.size") | Some _x6925 -> _x6925
  method set_size _x6925 = _size <- Some _x6925
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getEventPackages_args.language") | Some _x6926 -> _x6926
  method set_language _x6926 = _language <- Some _x6926
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getEventPackages_args.country") | Some _x6927 -> _x6927
  method set_country _x6927 = _country <- Some _x6927
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getEventPackages_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getEventPackages_args (iprot : Protocol.t) =
  let _str6930 = new getEventPackages_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6931,_id6932) = iprot#readFieldBegin in
        if _t6931 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6932 with 
          | 2 -> (if _t6931 = Protocol.T_I64 then
              _str6930#set_start iprot#readI64
            else
              iprot#skip _t6931)
          | 3 -> (if _t6931 = Protocol.T_I32 then
              _str6930#set_size iprot#readI32
            else
              iprot#skip _t6931)
          | 4 -> (if _t6931 = Protocol.T_STRING then
              _str6930#set_language iprot#readString
            else
              iprot#skip _t6931)
          | 5 -> (if _t6931 = Protocol.T_STRING then
              _str6930#set_country iprot#readString
            else
              iprot#skip _t6931)
          | _ -> iprot#skip _t6931);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6930

class getEventPackages_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getEventPackages_result.success") | Some _x6933 -> _x6933
  method set_success _x6933 = _success <- Some _x6933
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getEventPackages_result.e") | Some _x6934 -> _x6934
  method set_e _x6934 = _e <- Some _x6934
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getEventPackages_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getEventPackages_result (iprot : Protocol.t) =
  let _str6937 = new getEventPackages_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6938,_id6939) = iprot#readFieldBegin in
        if _t6938 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6939 with 
          | 0 -> (if _t6938 = Protocol.T_STRUCT then
              _str6937#set_success (read_productList iprot)
            else
              iprot#skip _t6938)
          | 1 -> (if _t6938 = Protocol.T_STRUCT then
              _str6937#set_e (read_talkException iprot)
            else
              iprot#skip _t6938)
          | _ -> iprot#skip _t6938);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6937

class getNewlyReleasedPackages_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getNewlyReleasedPackages_args.start") | Some _x6940 -> _x6940
  method set_start _x6940 = _start <- Some _x6940
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getNewlyReleasedPackages_args.size") | Some _x6941 -> _x6941
  method set_size _x6941 = _size <- Some _x6941
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getNewlyReleasedPackages_args.language") | Some _x6942 -> _x6942
  method set_language _x6942 = _language <- Some _x6942
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getNewlyReleasedPackages_args.country") | Some _x6943 -> _x6943
  method set_country _x6943 = _country <- Some _x6943
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNewlyReleasedPackages_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNewlyReleasedPackages_args (iprot : Protocol.t) =
  let _str6946 = new getNewlyReleasedPackages_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6947,_id6948) = iprot#readFieldBegin in
        if _t6947 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6948 with 
          | 2 -> (if _t6947 = Protocol.T_I64 then
              _str6946#set_start iprot#readI64
            else
              iprot#skip _t6947)
          | 3 -> (if _t6947 = Protocol.T_I32 then
              _str6946#set_size iprot#readI32
            else
              iprot#skip _t6947)
          | 4 -> (if _t6947 = Protocol.T_STRING then
              _str6946#set_language iprot#readString
            else
              iprot#skip _t6947)
          | 5 -> (if _t6947 = Protocol.T_STRING then
              _str6946#set_country iprot#readString
            else
              iprot#skip _t6947)
          | _ -> iprot#skip _t6947);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6946

class getNewlyReleasedPackages_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getNewlyReleasedPackages_result.success") | Some _x6949 -> _x6949
  method set_success _x6949 = _success <- Some _x6949
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getNewlyReleasedPackages_result.e") | Some _x6950 -> _x6950
  method set_e _x6950 = _e <- Some _x6950
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNewlyReleasedPackages_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNewlyReleasedPackages_result (iprot : Protocol.t) =
  let _str6953 = new getNewlyReleasedPackages_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6954,_id6955) = iprot#readFieldBegin in
        if _t6954 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6955 with 
          | 0 -> (if _t6954 = Protocol.T_STRUCT then
              _str6953#set_success (read_productList iprot)
            else
              iprot#skip _t6954)
          | 1 -> (if _t6954 = Protocol.T_STRUCT then
              _str6953#set_e (read_talkException iprot)
            else
              iprot#skip _t6954)
          | _ -> iprot#skip _t6954);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6953

class getPopularPackages_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getPopularPackages_args.start") | Some _x6956 -> _x6956
  method set_start _x6956 = _start <- Some _x6956
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getPopularPackages_args.size") | Some _x6957 -> _x6957
  method set_size _x6957 = _size <- Some _x6957
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPopularPackages_args.language") | Some _x6958 -> _x6958
  method set_language _x6958 = _language <- Some _x6958
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getPopularPackages_args.country") | Some _x6959 -> _x6959
  method set_country _x6959 = _country <- Some _x6959
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPopularPackages_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPopularPackages_args (iprot : Protocol.t) =
  let _str6962 = new getPopularPackages_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6963,_id6964) = iprot#readFieldBegin in
        if _t6963 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6964 with 
          | 2 -> (if _t6963 = Protocol.T_I64 then
              _str6962#set_start iprot#readI64
            else
              iprot#skip _t6963)
          | 3 -> (if _t6963 = Protocol.T_I32 then
              _str6962#set_size iprot#readI32
            else
              iprot#skip _t6963)
          | 4 -> (if _t6963 = Protocol.T_STRING then
              _str6962#set_language iprot#readString
            else
              iprot#skip _t6963)
          | 5 -> (if _t6963 = Protocol.T_STRING then
              _str6962#set_country iprot#readString
            else
              iprot#skip _t6963)
          | _ -> iprot#skip _t6963);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6962

class getPopularPackages_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPopularPackages_result.success") | Some _x6965 -> _x6965
  method set_success _x6965 = _success <- Some _x6965
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPopularPackages_result.e") | Some _x6966 -> _x6966
  method set_e _x6966 = _e <- Some _x6966
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPopularPackages_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPopularPackages_result (iprot : Protocol.t) =
  let _str6969 = new getPopularPackages_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6970,_id6971) = iprot#readFieldBegin in
        if _t6970 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6971 with 
          | 0 -> (if _t6970 = Protocol.T_STRUCT then
              _str6969#set_success (read_productList iprot)
            else
              iprot#skip _t6970)
          | 1 -> (if _t6970 = Protocol.T_STRUCT then
              _str6969#set_e (read_talkException iprot)
            else
              iprot#skip _t6970)
          | _ -> iprot#skip _t6970);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6969

class getPresentsReceived_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getPresentsReceived_args.start") | Some _x6972 -> _x6972
  method set_start _x6972 = _start <- Some _x6972
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getPresentsReceived_args.size") | Some _x6973 -> _x6973
  method set_size _x6973 = _size <- Some _x6973
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPresentsReceived_args.language") | Some _x6974 -> _x6974
  method set_language _x6974 = _language <- Some _x6974
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getPresentsReceived_args.country") | Some _x6975 -> _x6975
  method set_country _x6975 = _country <- Some _x6975
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPresentsReceived_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPresentsReceived_args (iprot : Protocol.t) =
  let _str6978 = new getPresentsReceived_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6979,_id6980) = iprot#readFieldBegin in
        if _t6979 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6980 with 
          | 2 -> (if _t6979 = Protocol.T_I64 then
              _str6978#set_start iprot#readI64
            else
              iprot#skip _t6979)
          | 3 -> (if _t6979 = Protocol.T_I32 then
              _str6978#set_size iprot#readI32
            else
              iprot#skip _t6979)
          | 4 -> (if _t6979 = Protocol.T_STRING then
              _str6978#set_language iprot#readString
            else
              iprot#skip _t6979)
          | 5 -> (if _t6979 = Protocol.T_STRING then
              _str6978#set_country iprot#readString
            else
              iprot#skip _t6979)
          | _ -> iprot#skip _t6979);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6978

class getPresentsReceived_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPresentsReceived_result.success") | Some _x6981 -> _x6981
  method set_success _x6981 = _success <- Some _x6981
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPresentsReceived_result.e") | Some _x6982 -> _x6982
  method set_e _x6982 = _e <- Some _x6982
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPresentsReceived_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPresentsReceived_result (iprot : Protocol.t) =
  let _str6985 = new getPresentsReceived_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6986,_id6987) = iprot#readFieldBegin in
        if _t6986 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6987 with 
          | 0 -> (if _t6986 = Protocol.T_STRUCT then
              _str6985#set_success (read_productList iprot)
            else
              iprot#skip _t6986)
          | 1 -> (if _t6986 = Protocol.T_STRUCT then
              _str6985#set_e (read_talkException iprot)
            else
              iprot#skip _t6986)
          | _ -> iprot#skip _t6986);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6985

class getPresentsSent_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getPresentsSent_args.start") | Some _x6988 -> _x6988
  method set_start _x6988 = _start <- Some _x6988
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getPresentsSent_args.size") | Some _x6989 -> _x6989
  method set_size _x6989 = _size <- Some _x6989
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPresentsSent_args.language") | Some _x6990 -> _x6990
  method set_language _x6990 = _language <- Some _x6990
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getPresentsSent_args.country") | Some _x6991 -> _x6991
  method set_country _x6991 = _country <- Some _x6991
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPresentsSent_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPresentsSent_args (iprot : Protocol.t) =
  let _str6994 = new getPresentsSent_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6995,_id6996) = iprot#readFieldBegin in
        if _t6995 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6996 with 
          | 2 -> (if _t6995 = Protocol.T_I64 then
              _str6994#set_start iprot#readI64
            else
              iprot#skip _t6995)
          | 3 -> (if _t6995 = Protocol.T_I32 then
              _str6994#set_size iprot#readI32
            else
              iprot#skip _t6995)
          | 4 -> (if _t6995 = Protocol.T_STRING then
              _str6994#set_language iprot#readString
            else
              iprot#skip _t6995)
          | 5 -> (if _t6995 = Protocol.T_STRING then
              _str6994#set_country iprot#readString
            else
              iprot#skip _t6995)
          | _ -> iprot#skip _t6995);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6994

class getPresentsSent_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPresentsSent_result.success") | Some _x6997 -> _x6997
  method set_success _x6997 = _success <- Some _x6997
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPresentsSent_result.e") | Some _x6998 -> _x6998
  method set_e _x6998 = _e <- Some _x6998
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPresentsSent_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPresentsSent_result (iprot : Protocol.t) =
  let _str7001 = new getPresentsSent_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7002,_id7003) = iprot#readFieldBegin in
        if _t7002 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7003 with 
          | 0 -> (if _t7002 = Protocol.T_STRUCT then
              _str7001#set_success (read_productList iprot)
            else
              iprot#skip _t7002)
          | 1 -> (if _t7002 = Protocol.T_STRUCT then
              _str7001#set_e (read_talkException iprot)
            else
              iprot#skip _t7002)
          | _ -> iprot#skip _t7002);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7001

class getProduct_args =
object (self)
  val mutable _packageID : Int64.t option = None
  method get_packageID = _packageID
  method grab_packageID = match _packageID with None->raise (Field_empty "getProduct_args.packageID") | Some _x7004 -> _x7004
  method set_packageID _x7004 = _packageID <- Some _x7004
  method unset_packageID = _packageID <- None
  method reset_packageID = _packageID <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getProduct_args.language") | Some _x7005 -> _x7005
  method set_language _x7005 = _language <- Some _x7005
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getProduct_args.country") | Some _x7006 -> _x7006
  method set_country _x7006 = _country <- Some _x7006
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProduct_args";
    (match _packageID with None -> () | Some _v -> 
      oprot#writeFieldBegin("packageID",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProduct_args (iprot : Protocol.t) =
  let _str7009 = new getProduct_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7010,_id7011) = iprot#readFieldBegin in
        if _t7010 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7011 with 
          | 2 -> (if _t7010 = Protocol.T_I64 then
              _str7009#set_packageID iprot#readI64
            else
              iprot#skip _t7010)
          | 3 -> (if _t7010 = Protocol.T_STRING then
              _str7009#set_language iprot#readString
            else
              iprot#skip _t7010)
          | 4 -> (if _t7010 = Protocol.T_STRING then
              _str7009#set_country iprot#readString
            else
              iprot#skip _t7010)
          | _ -> iprot#skip _t7010);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7009

class getProduct_result =
object (self)
  val mutable _success : product option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProduct_result.success") | Some _x7012 -> _x7012
  method set_success _x7012 = _success <- Some _x7012
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getProduct_result.e") | Some _x7013 -> _x7013
  method set_e _x7013 = _e <- Some _x7013
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProduct_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProduct_result (iprot : Protocol.t) =
  let _str7016 = new getProduct_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7017,_id7018) = iprot#readFieldBegin in
        if _t7017 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7018 with 
          | 0 -> (if _t7017 = Protocol.T_STRUCT then
              _str7016#set_success (read_product iprot)
            else
              iprot#skip _t7017)
          | 1 -> (if _t7017 = Protocol.T_STRUCT then
              _str7016#set_e (read_talkException iprot)
            else
              iprot#skip _t7017)
          | _ -> iprot#skip _t7017);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7016

class getProductList_args =
object (self)
  val mutable _productIdList : string list option = None
  method get_productIdList = _productIdList
  method grab_productIdList = match _productIdList with None->raise (Field_empty "getProductList_args.productIdList") | Some _x7019 -> _x7019
  method set_productIdList _x7019 = _productIdList <- Some _x7019
  method unset_productIdList = _productIdList <- None
  method reset_productIdList = _productIdList <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getProductList_args.language") | Some _x7020 -> _x7020
  method set_language _x7020 = _language <- Some _x7020
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getProductList_args.country") | Some _x7021 -> _x7021
  method set_country _x7021 = _country <- Some _x7021
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProductList_args";
    (match _productIdList with None -> () | Some _v -> 
      oprot#writeFieldBegin("productIdList",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7024 ->         oprot#writeString(_iter7024);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProductList_args (iprot : Protocol.t) =
  let _str7025 = new getProductList_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7026,_id7027) = iprot#readFieldBegin in
        if _t7026 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7027 with 
          | 2 -> (if _t7026 = Protocol.T_LIST then
              _str7025#set_productIdList 
                (let (_etype7031,_size7028) = iprot#readListBegin in
                  let _con7032 = (Array.to_list (Array.init _size7028 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7032)
            else
              iprot#skip _t7026)
          | 3 -> (if _t7026 = Protocol.T_STRING then
              _str7025#set_language iprot#readString
            else
              iprot#skip _t7026)
          | 4 -> (if _t7026 = Protocol.T_STRING then
              _str7025#set_country iprot#readString
            else
              iprot#skip _t7026)
          | _ -> iprot#skip _t7026);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7025

class getProductList_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProductList_result.success") | Some _x7033 -> _x7033
  method set_success _x7033 = _success <- Some _x7033
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getProductList_result.e") | Some _x7034 -> _x7034
  method set_e _x7034 = _e <- Some _x7034
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProductList_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProductList_result (iprot : Protocol.t) =
  let _str7037 = new getProductList_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7038,_id7039) = iprot#readFieldBegin in
        if _t7038 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7039 with 
          | 0 -> (if _t7038 = Protocol.T_STRUCT then
              _str7037#set_success (read_productList iprot)
            else
              iprot#skip _t7038)
          | 1 -> (if _t7038 = Protocol.T_STRUCT then
              _str7037#set_e (read_talkException iprot)
            else
              iprot#skip _t7038)
          | _ -> iprot#skip _t7038);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7037

class getProductListWithCarrier_args =
object (self)
  val mutable _productIdList : string list option = None
  method get_productIdList = _productIdList
  method grab_productIdList = match _productIdList with None->raise (Field_empty "getProductListWithCarrier_args.productIdList") | Some _x7040 -> _x7040
  method set_productIdList _x7040 = _productIdList <- Some _x7040
  method unset_productIdList = _productIdList <- None
  method reset_productIdList = _productIdList <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getProductListWithCarrier_args.language") | Some _x7041 -> _x7041
  method set_language _x7041 = _language <- Some _x7041
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getProductListWithCarrier_args.country") | Some _x7042 -> _x7042
  method set_country _x7042 = _country <- Some _x7042
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _carrierCode : string option = None
  method get_carrierCode = _carrierCode
  method grab_carrierCode = match _carrierCode with None->raise (Field_empty "getProductListWithCarrier_args.carrierCode") | Some _x7043 -> _x7043
  method set_carrierCode _x7043 = _carrierCode <- Some _x7043
  method unset_carrierCode = _carrierCode <- None
  method reset_carrierCode = _carrierCode <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProductListWithCarrier_args";
    (match _productIdList with None -> () | Some _v -> 
      oprot#writeFieldBegin("productIdList",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter7046 ->         oprot#writeString(_iter7046);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _carrierCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("carrierCode",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProductListWithCarrier_args (iprot : Protocol.t) =
  let _str7047 = new getProductListWithCarrier_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7048,_id7049) = iprot#readFieldBegin in
        if _t7048 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7049 with 
          | 2 -> (if _t7048 = Protocol.T_LIST then
              _str7047#set_productIdList 
                (let (_etype7053,_size7050) = iprot#readListBegin in
                  let _con7054 = (Array.to_list (Array.init _size7050 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con7054)
            else
              iprot#skip _t7048)
          | 3 -> (if _t7048 = Protocol.T_STRING then
              _str7047#set_language iprot#readString
            else
              iprot#skip _t7048)
          | 4 -> (if _t7048 = Protocol.T_STRING then
              _str7047#set_country iprot#readString
            else
              iprot#skip _t7048)
          | 5 -> (if _t7048 = Protocol.T_STRING then
              _str7047#set_carrierCode iprot#readString
            else
              iprot#skip _t7048)
          | _ -> iprot#skip _t7048);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7047

class getProductListWithCarrier_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProductListWithCarrier_result.success") | Some _x7055 -> _x7055
  method set_success _x7055 = _success <- Some _x7055
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getProductListWithCarrier_result.e") | Some _x7056 -> _x7056
  method set_e _x7056 = _e <- Some _x7056
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProductListWithCarrier_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProductListWithCarrier_result (iprot : Protocol.t) =
  let _str7059 = new getProductListWithCarrier_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7060,_id7061) = iprot#readFieldBegin in
        if _t7060 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7061 with 
          | 0 -> (if _t7060 = Protocol.T_STRUCT then
              _str7059#set_success (read_productList iprot)
            else
              iprot#skip _t7060)
          | 1 -> (if _t7060 = Protocol.T_STRUCT then
              _str7059#set_e (read_talkException iprot)
            else
              iprot#skip _t7060)
          | _ -> iprot#skip _t7060);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7059

class getProductWithCarrier_args =
object (self)
  val mutable _packageID : Int64.t option = None
  method get_packageID = _packageID
  method grab_packageID = match _packageID with None->raise (Field_empty "getProductWithCarrier_args.packageID") | Some _x7062 -> _x7062
  method set_packageID _x7062 = _packageID <- Some _x7062
  method unset_packageID = _packageID <- None
  method reset_packageID = _packageID <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getProductWithCarrier_args.language") | Some _x7063 -> _x7063
  method set_language _x7063 = _language <- Some _x7063
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getProductWithCarrier_args.country") | Some _x7064 -> _x7064
  method set_country _x7064 = _country <- Some _x7064
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _carrierCode : string option = None
  method get_carrierCode = _carrierCode
  method grab_carrierCode = match _carrierCode with None->raise (Field_empty "getProductWithCarrier_args.carrierCode") | Some _x7065 -> _x7065
  method set_carrierCode _x7065 = _carrierCode <- Some _x7065
  method unset_carrierCode = _carrierCode <- None
  method reset_carrierCode = _carrierCode <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProductWithCarrier_args";
    (match _packageID with None -> () | Some _v -> 
      oprot#writeFieldBegin("packageID",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _carrierCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("carrierCode",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProductWithCarrier_args (iprot : Protocol.t) =
  let _str7068 = new getProductWithCarrier_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7069,_id7070) = iprot#readFieldBegin in
        if _t7069 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7070 with 
          | 2 -> (if _t7069 = Protocol.T_I64 then
              _str7068#set_packageID iprot#readI64
            else
              iprot#skip _t7069)
          | 3 -> (if _t7069 = Protocol.T_STRING then
              _str7068#set_language iprot#readString
            else
              iprot#skip _t7069)
          | 4 -> (if _t7069 = Protocol.T_STRING then
              _str7068#set_country iprot#readString
            else
              iprot#skip _t7069)
          | 5 -> (if _t7069 = Protocol.T_STRING then
              _str7068#set_carrierCode iprot#readString
            else
              iprot#skip _t7069)
          | _ -> iprot#skip _t7069);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7068

class getProductWithCarrier_result =
object (self)
  val mutable _success : product option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProductWithCarrier_result.success") | Some _x7071 -> _x7071
  method set_success _x7071 = _success <- Some _x7071
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getProductWithCarrier_result.e") | Some _x7072 -> _x7072
  method set_e _x7072 = _e <- Some _x7072
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProductWithCarrier_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProductWithCarrier_result (iprot : Protocol.t) =
  let _str7075 = new getProductWithCarrier_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7076,_id7077) = iprot#readFieldBegin in
        if _t7076 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7077 with 
          | 0 -> (if _t7076 = Protocol.T_STRUCT then
              _str7075#set_success (read_product iprot)
            else
              iprot#skip _t7076)
          | 1 -> (if _t7076 = Protocol.T_STRUCT then
              _str7075#set_e (read_talkException iprot)
            else
              iprot#skip _t7076)
          | _ -> iprot#skip _t7076);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7075

class getPurchaseHistory_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getPurchaseHistory_args.start") | Some _x7078 -> _x7078
  method set_start _x7078 = _start <- Some _x7078
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getPurchaseHistory_args.size") | Some _x7079 -> _x7079
  method set_size _x7079 = _size <- Some _x7079
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPurchaseHistory_args.language") | Some _x7080 -> _x7080
  method set_language _x7080 = _language <- Some _x7080
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getPurchaseHistory_args.country") | Some _x7081 -> _x7081
  method set_country _x7081 = _country <- Some _x7081
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPurchaseHistory_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPurchaseHistory_args (iprot : Protocol.t) =
  let _str7084 = new getPurchaseHistory_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7085,_id7086) = iprot#readFieldBegin in
        if _t7085 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7086 with 
          | 2 -> (if _t7085 = Protocol.T_I64 then
              _str7084#set_start iprot#readI64
            else
              iprot#skip _t7085)
          | 3 -> (if _t7085 = Protocol.T_I32 then
              _str7084#set_size iprot#readI32
            else
              iprot#skip _t7085)
          | 4 -> (if _t7085 = Protocol.T_STRING then
              _str7084#set_language iprot#readString
            else
              iprot#skip _t7085)
          | 5 -> (if _t7085 = Protocol.T_STRING then
              _str7084#set_country iprot#readString
            else
              iprot#skip _t7085)
          | _ -> iprot#skip _t7085);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7084

class getPurchaseHistory_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPurchaseHistory_result.success") | Some _x7087 -> _x7087
  method set_success _x7087 = _success <- Some _x7087
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPurchaseHistory_result.e") | Some _x7088 -> _x7088
  method set_e _x7088 = _e <- Some _x7088
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPurchaseHistory_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPurchaseHistory_result (iprot : Protocol.t) =
  let _str7091 = new getPurchaseHistory_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7092,_id7093) = iprot#readFieldBegin in
        if _t7092 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7093 with 
          | 0 -> (if _t7092 = Protocol.T_STRUCT then
              _str7091#set_success (read_productList iprot)
            else
              iprot#skip _t7092)
          | 1 -> (if _t7092 = Protocol.T_STRUCT then
              _str7091#set_e (read_talkException iprot)
            else
              iprot#skip _t7092)
          | _ -> iprot#skip _t7092);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7091

class getTotalBalance_args =
object (self)
  val mutable _appStoreCode : PaymentType.t option = None
  method get_appStoreCode = _appStoreCode
  method grab_appStoreCode = match _appStoreCode with None->raise (Field_empty "getTotalBalance_args.appStoreCode") | Some _x7094 -> _x7094
  method set_appStoreCode _x7094 = _appStoreCode <- Some _x7094
  method unset_appStoreCode = _appStoreCode <- None
  method reset_appStoreCode = _appStoreCode <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getTotalBalance_args";
    (match _appStoreCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("appStoreCode",Protocol.T_I32,2);
      oprot#writeI32(PaymentType.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getTotalBalance_args (iprot : Protocol.t) =
  let _str7097 = new getTotalBalance_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7098,_id7099) = iprot#readFieldBegin in
        if _t7098 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7099 with 
          | 2 -> (if _t7098 = Protocol.T_I32 then
              _str7097#set_appStoreCode (PaymentType.of_i iprot#readI32)
            else
              iprot#skip _t7098)
          | _ -> iprot#skip _t7098);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7097

class getTotalBalance_result =
object (self)
  val mutable _success : coin option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getTotalBalance_result.success") | Some _x7100 -> _x7100
  method set_success _x7100 = _success <- Some _x7100
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getTotalBalance_result.e") | Some _x7101 -> _x7101
  method set_e _x7101 = _e <- Some _x7101
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getTotalBalance_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getTotalBalance_result (iprot : Protocol.t) =
  let _str7104 = new getTotalBalance_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7105,_id7106) = iprot#readFieldBegin in
        if _t7105 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7106 with 
          | 0 -> (if _t7105 = Protocol.T_STRUCT then
              _str7104#set_success (read_coin iprot)
            else
              iprot#skip _t7105)
          | 1 -> (if _t7105 = Protocol.T_STRUCT then
              _str7104#set_e (read_talkException iprot)
            else
              iprot#skip _t7105)
          | _ -> iprot#skip _t7105);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7104

class notifyDownloaded_args =
object (self)
  val mutable _packageId : Int64.t option = None
  method get_packageId = _packageId
  method grab_packageId = match _packageId with None->raise (Field_empty "notifyDownloaded_args.packageId") | Some _x7107 -> _x7107
  method set_packageId _x7107 = _packageId <- Some _x7107
  method unset_packageId = _packageId <- None
  method reset_packageId = _packageId <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "notifyDownloaded_args.language") | Some _x7108 -> _x7108
  method set_language _x7108 = _language <- Some _x7108
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyDownloaded_args";
    (match _packageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("packageId",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyDownloaded_args (iprot : Protocol.t) =
  let _str7111 = new notifyDownloaded_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7112,_id7113) = iprot#readFieldBegin in
        if _t7112 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7113 with 
          | 2 -> (if _t7112 = Protocol.T_I64 then
              _str7111#set_packageId iprot#readI64
            else
              iprot#skip _t7112)
          | 3 -> (if _t7112 = Protocol.T_STRING then
              _str7111#set_language iprot#readString
            else
              iprot#skip _t7112)
          | _ -> iprot#skip _t7112);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7111

class notifyDownloaded_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "notifyDownloaded_result.success") | Some _x7114 -> _x7114
  method set_success _x7114 = _success <- Some _x7114
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyDownloaded_result.e") | Some _x7115 -> _x7115
  method set_e _x7115 = _e <- Some _x7115
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyDownloaded_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyDownloaded_result (iprot : Protocol.t) =
  let _str7118 = new notifyDownloaded_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7119,_id7120) = iprot#readFieldBegin in
        if _t7119 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7120 with 
          | 0 -> (if _t7119 = Protocol.T_I64 then
              _str7118#set_success iprot#readI64
            else
              iprot#skip _t7119)
          | 1 -> (if _t7119 = Protocol.T_STRUCT then
              _str7118#set_e (read_talkException iprot)
            else
              iprot#skip _t7119)
          | _ -> iprot#skip _t7119);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7118

class reserveCoinPurchase_args =
object (self)
  val mutable _request : coinPurchaseReservation option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "reserveCoinPurchase_args.request") | Some _x7121 -> _x7121
  method set_request _x7121 = _request <- Some _x7121
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reserveCoinPurchase_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reserveCoinPurchase_args (iprot : Protocol.t) =
  let _str7124 = new reserveCoinPurchase_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7125,_id7126) = iprot#readFieldBegin in
        if _t7125 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7126 with 
          | 2 -> (if _t7125 = Protocol.T_STRUCT then
              _str7124#set_request (read_coinPurchaseReservation iprot)
            else
              iprot#skip _t7125)
          | _ -> iprot#skip _t7125);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7124

class reserveCoinPurchase_result =
object (self)
  val mutable _success : paymentReservationResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reserveCoinPurchase_result.success") | Some _x7127 -> _x7127
  method set_success _x7127 = _success <- Some _x7127
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reserveCoinPurchase_result.e") | Some _x7128 -> _x7128
  method set_e _x7128 = _e <- Some _x7128
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reserveCoinPurchase_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reserveCoinPurchase_result (iprot : Protocol.t) =
  let _str7131 = new reserveCoinPurchase_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7132,_id7133) = iprot#readFieldBegin in
        if _t7132 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7133 with 
          | 0 -> (if _t7132 = Protocol.T_STRUCT then
              _str7131#set_success (read_paymentReservationResult iprot)
            else
              iprot#skip _t7132)
          | 1 -> (if _t7132 = Protocol.T_STRUCT then
              _str7131#set_e (read_talkException iprot)
            else
              iprot#skip _t7132)
          | _ -> iprot#skip _t7132);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7131

class reservePayment_args =
object (self)
  val mutable _paymentReservation : paymentReservation option = None
  method get_paymentReservation = _paymentReservation
  method grab_paymentReservation = match _paymentReservation with None->raise (Field_empty "reservePayment_args.paymentReservation") | Some _x7134 -> _x7134
  method set_paymentReservation _x7134 = _paymentReservation <- Some _x7134
  method unset_paymentReservation = _paymentReservation <- None
  method reset_paymentReservation = _paymentReservation <- None

  method copy =
      let _new = Oo.copy self in
      if _paymentReservation <> None then
        _new#set_paymentReservation self#grab_paymentReservation#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reservePayment_args";
    (match _paymentReservation with None -> () | Some _v -> 
      oprot#writeFieldBegin("paymentReservation",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reservePayment_args (iprot : Protocol.t) =
  let _str7137 = new reservePayment_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7138,_id7139) = iprot#readFieldBegin in
        if _t7138 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7139 with 
          | 2 -> (if _t7138 = Protocol.T_STRUCT then
              _str7137#set_paymentReservation (read_paymentReservation iprot)
            else
              iprot#skip _t7138)
          | _ -> iprot#skip _t7138);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7137

class reservePayment_result =
object (self)
  val mutable _success : paymentReservationResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reservePayment_result.success") | Some _x7140 -> _x7140
  method set_success _x7140 = _success <- Some _x7140
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reservePayment_result.e") | Some _x7141 -> _x7141
  method set_e _x7141 = _e <- Some _x7141
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reservePayment_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reservePayment_result (iprot : Protocol.t) =
  let _str7144 = new reservePayment_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t7145,_id7146) = iprot#readFieldBegin in
        if _t7145 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id7146 with 
          | 0 -> (if _t7145 = Protocol.T_STRUCT then
              _str7144#set_success (read_paymentReservationResult iprot)
            else
              iprot#skip _t7145)
          | 1 -> (if _t7145 = Protocol.T_STRUCT then
              _str7144#set_e (read_talkException iprot)
            else
              iprot#skip _t7145)
          | _ -> iprot#skip _t7145);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str7144

class virtual iface =
object (self)
  method virtual buyCoinProduct : paymentReservation option -> unit
  method virtual buyFreeProduct : string option -> string option -> Int32.t option -> string option -> string option -> Int64.t option -> unit
  method virtual buyMustbuyProduct : string option -> string option -> Int32.t option -> string option -> string option -> Int64.t option -> string option -> unit
  method virtual checkCanReceivePresent : string option -> Int64.t option -> string option -> string option -> unit
  method virtual getActivePurchases : Int64.t option -> Int32.t option -> string option -> string option -> productList
  method virtual getActivePurchaseVersions : Int64.t option -> Int32.t option -> string option -> string option -> productSimpleList
  method virtual getCoinProducts : PaymentType.t option -> string option -> string option -> coinProductItem list
  method virtual getCoinProductsByPgCode : PaymentType.t option -> PaymentPgType.t option -> string option -> string option -> coinProductItem list
  method virtual getCoinPurchaseHistory : coinHistoryCondition option -> coinHistoryResult
  method virtual getCoinUseAndRefundHistory : coinHistoryCondition option -> coinHistoryResult
  method virtual getDownloads : Int64.t option -> Int32.t option -> string option -> string option -> productList
  method virtual getEventPackages : Int64.t option -> Int32.t option -> string option -> string option -> productList
  method virtual getNewlyReleasedPackages : Int64.t option -> Int32.t option -> string option -> string option -> productList
  method virtual getPopularPackages : Int64.t option -> Int32.t option -> string option -> string option -> productList
  method virtual getPresentsReceived : Int64.t option -> Int32.t option -> string option -> string option -> productList
  method virtual getPresentsSent : Int64.t option -> Int32.t option -> string option -> string option -> productList
  method virtual getProduct : Int64.t option -> string option -> string option -> product
  method virtual getProductList : string list option -> string option -> string option -> productList
  method virtual getProductListWithCarrier : string list option -> string option -> string option -> string option -> productList
  method virtual getProductWithCarrier : Int64.t option -> string option -> string option -> string option -> product
  method virtual getPurchaseHistory : Int64.t option -> Int32.t option -> string option -> string option -> productList
  method virtual getTotalBalance : PaymentType.t option -> coin
  method virtual notifyDownloaded : Int64.t option -> string option -> Int64.t
  method virtual reserveCoinPurchase : coinPurchaseReservation option -> paymentReservationResult
  method virtual reservePayment : paymentReservation option -> paymentReservationResult
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method buyCoinProduct paymentReservation = 
    self#send_buyCoinProduct paymentReservation;
    self#recv_buyCoinProduct
  method private send_buyCoinProduct paymentReservation = 
    oprot#writeMessageBegin ("buyCoinProduct", Protocol.CALL, seqid);
    let args = new buyCoinProduct_args in
      args#set_paymentReservation paymentReservation;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_buyCoinProduct  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_buyCoinProduct_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method buyFreeProduct receiverMid productId messageTemplate language country packageId = 
    self#send_buyFreeProduct receiverMid productId messageTemplate language country packageId;
    self#recv_buyFreeProduct
  method private send_buyFreeProduct receiverMid productId messageTemplate language country packageId = 
    oprot#writeMessageBegin ("buyFreeProduct", Protocol.CALL, seqid);
    let args = new buyFreeProduct_args in
      args#set_receiverMid receiverMid;
      args#set_productId productId;
      args#set_messageTemplate messageTemplate;
      args#set_language language;
      args#set_country country;
      args#set_packageId packageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_buyFreeProduct  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_buyFreeProduct_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method buyMustbuyProduct receiverMid productId messageTemplate language country packageId serialNumber = 
    self#send_buyMustbuyProduct receiverMid productId messageTemplate language country packageId serialNumber;
    self#recv_buyMustbuyProduct
  method private send_buyMustbuyProduct receiverMid productId messageTemplate language country packageId serialNumber = 
    oprot#writeMessageBegin ("buyMustbuyProduct", Protocol.CALL, seqid);
    let args = new buyMustbuyProduct_args in
      args#set_receiverMid receiverMid;
      args#set_productId productId;
      args#set_messageTemplate messageTemplate;
      args#set_language language;
      args#set_country country;
      args#set_packageId packageId;
      args#set_serialNumber serialNumber;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_buyMustbuyProduct  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_buyMustbuyProduct_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method checkCanReceivePresent recipientMid packageId language country = 
    self#send_checkCanReceivePresent recipientMid packageId language country;
    self#recv_checkCanReceivePresent
  method private send_checkCanReceivePresent recipientMid packageId language country = 
    oprot#writeMessageBegin ("checkCanReceivePresent", Protocol.CALL, seqid);
    let args = new checkCanReceivePresent_args in
      args#set_recipientMid recipientMid;
      args#set_packageId packageId;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_checkCanReceivePresent  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_checkCanReceivePresent_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method getActivePurchases start size language country = 
    self#send_getActivePurchases start size language country;
    self#recv_getActivePurchases
  method private send_getActivePurchases start size language country = 
    oprot#writeMessageBegin ("getActivePurchases", Protocol.CALL, seqid);
    let args = new getActivePurchases_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getActivePurchases  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getActivePurchases_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getActivePurchases failed: unknown result")))
  method getActivePurchaseVersions start size language country = 
    self#send_getActivePurchaseVersions start size language country;
    self#recv_getActivePurchaseVersions
  method private send_getActivePurchaseVersions start size language country = 
    oprot#writeMessageBegin ("getActivePurchaseVersions", Protocol.CALL, seqid);
    let args = new getActivePurchaseVersions_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getActivePurchaseVersions  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getActivePurchaseVersions_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getActivePurchaseVersions failed: unknown result")))
  method getCoinProducts appStoreCode country language = 
    self#send_getCoinProducts appStoreCode country language;
    self#recv_getCoinProducts
  method private send_getCoinProducts appStoreCode country language = 
    oprot#writeMessageBegin ("getCoinProducts", Protocol.CALL, seqid);
    let args = new getCoinProducts_args in
      args#set_appStoreCode appStoreCode;
      args#set_country country;
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCoinProducts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCoinProducts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCoinProducts failed: unknown result")))
  method getCoinProductsByPgCode appStoreCode pgCode country language = 
    self#send_getCoinProductsByPgCode appStoreCode pgCode country language;
    self#recv_getCoinProductsByPgCode
  method private send_getCoinProductsByPgCode appStoreCode pgCode country language = 
    oprot#writeMessageBegin ("getCoinProductsByPgCode", Protocol.CALL, seqid);
    let args = new getCoinProductsByPgCode_args in
      args#set_appStoreCode appStoreCode;
      args#set_pgCode pgCode;
      args#set_country country;
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCoinProductsByPgCode  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCoinProductsByPgCode_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCoinProductsByPgCode failed: unknown result")))
  method getCoinPurchaseHistory request = 
    self#send_getCoinPurchaseHistory request;
    self#recv_getCoinPurchaseHistory
  method private send_getCoinPurchaseHistory request = 
    oprot#writeMessageBegin ("getCoinPurchaseHistory", Protocol.CALL, seqid);
    let args = new getCoinPurchaseHistory_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCoinPurchaseHistory  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCoinPurchaseHistory_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCoinPurchaseHistory failed: unknown result")))
  method getCoinUseAndRefundHistory request = 
    self#send_getCoinUseAndRefundHistory request;
    self#recv_getCoinUseAndRefundHistory
  method private send_getCoinUseAndRefundHistory request = 
    oprot#writeMessageBegin ("getCoinUseAndRefundHistory", Protocol.CALL, seqid);
    let args = new getCoinUseAndRefundHistory_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCoinUseAndRefundHistory  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCoinUseAndRefundHistory_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCoinUseAndRefundHistory failed: unknown result")))
  method getDownloads start size language country = 
    self#send_getDownloads start size language country;
    self#recv_getDownloads
  method private send_getDownloads start size language country = 
    oprot#writeMessageBegin ("getDownloads", Protocol.CALL, seqid);
    let args = new getDownloads_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getDownloads  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getDownloads_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getDownloads failed: unknown result")))
  method getEventPackages start size language country = 
    self#send_getEventPackages start size language country;
    self#recv_getEventPackages
  method private send_getEventPackages start size language country = 
    oprot#writeMessageBegin ("getEventPackages", Protocol.CALL, seqid);
    let args = new getEventPackages_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getEventPackages  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getEventPackages_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getEventPackages failed: unknown result")))
  method getNewlyReleasedPackages start size language country = 
    self#send_getNewlyReleasedPackages start size language country;
    self#recv_getNewlyReleasedPackages
  method private send_getNewlyReleasedPackages start size language country = 
    oprot#writeMessageBegin ("getNewlyReleasedPackages", Protocol.CALL, seqid);
    let args = new getNewlyReleasedPackages_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getNewlyReleasedPackages  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getNewlyReleasedPackages_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getNewlyReleasedPackages failed: unknown result")))
  method getPopularPackages start size language country = 
    self#send_getPopularPackages start size language country;
    self#recv_getPopularPackages
  method private send_getPopularPackages start size language country = 
    oprot#writeMessageBegin ("getPopularPackages", Protocol.CALL, seqid);
    let args = new getPopularPackages_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPopularPackages  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPopularPackages_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPopularPackages failed: unknown result")))
  method getPresentsReceived start size language country = 
    self#send_getPresentsReceived start size language country;
    self#recv_getPresentsReceived
  method private send_getPresentsReceived start size language country = 
    oprot#writeMessageBegin ("getPresentsReceived", Protocol.CALL, seqid);
    let args = new getPresentsReceived_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPresentsReceived  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPresentsReceived_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPresentsReceived failed: unknown result")))
  method getPresentsSent start size language country = 
    self#send_getPresentsSent start size language country;
    self#recv_getPresentsSent
  method private send_getPresentsSent start size language country = 
    oprot#writeMessageBegin ("getPresentsSent", Protocol.CALL, seqid);
    let args = new getPresentsSent_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPresentsSent  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPresentsSent_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPresentsSent failed: unknown result")))
  method getProduct packageID language country = 
    self#send_getProduct packageID language country;
    self#recv_getProduct
  method private send_getProduct packageID language country = 
    oprot#writeMessageBegin ("getProduct", Protocol.CALL, seqid);
    let args = new getProduct_args in
      args#set_packageID packageID;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProduct  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProduct_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProduct failed: unknown result")))
  method getProductList productIdList language country = 
    self#send_getProductList productIdList language country;
    self#recv_getProductList
  method private send_getProductList productIdList language country = 
    oprot#writeMessageBegin ("getProductList", Protocol.CALL, seqid);
    let args = new getProductList_args in
      args#set_productIdList productIdList;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProductList  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProductList_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProductList failed: unknown result")))
  method getProductListWithCarrier productIdList language country carrierCode = 
    self#send_getProductListWithCarrier productIdList language country carrierCode;
    self#recv_getProductListWithCarrier
  method private send_getProductListWithCarrier productIdList language country carrierCode = 
    oprot#writeMessageBegin ("getProductListWithCarrier", Protocol.CALL, seqid);
    let args = new getProductListWithCarrier_args in
      args#set_productIdList productIdList;
      args#set_language language;
      args#set_country country;
      args#set_carrierCode carrierCode;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProductListWithCarrier  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProductListWithCarrier_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProductListWithCarrier failed: unknown result")))
  method getProductWithCarrier packageID language country carrierCode = 
    self#send_getProductWithCarrier packageID language country carrierCode;
    self#recv_getProductWithCarrier
  method private send_getProductWithCarrier packageID language country carrierCode = 
    oprot#writeMessageBegin ("getProductWithCarrier", Protocol.CALL, seqid);
    let args = new getProductWithCarrier_args in
      args#set_packageID packageID;
      args#set_language language;
      args#set_country country;
      args#set_carrierCode carrierCode;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProductWithCarrier  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProductWithCarrier_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProductWithCarrier failed: unknown result")))
  method getPurchaseHistory start size language country = 
    self#send_getPurchaseHistory start size language country;
    self#recv_getPurchaseHistory
  method private send_getPurchaseHistory start size language country = 
    oprot#writeMessageBegin ("getPurchaseHistory", Protocol.CALL, seqid);
    let args = new getPurchaseHistory_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPurchaseHistory  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPurchaseHistory_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPurchaseHistory failed: unknown result")))
  method getTotalBalance appStoreCode = 
    self#send_getTotalBalance appStoreCode;
    self#recv_getTotalBalance
  method private send_getTotalBalance appStoreCode = 
    oprot#writeMessageBegin ("getTotalBalance", Protocol.CALL, seqid);
    let args = new getTotalBalance_args in
      args#set_appStoreCode appStoreCode;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getTotalBalance  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getTotalBalance_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getTotalBalance failed: unknown result")))
  method notifyDownloaded packageId language = 
    self#send_notifyDownloaded packageId language;
    self#recv_notifyDownloaded
  method private send_notifyDownloaded packageId language = 
    oprot#writeMessageBegin ("notifyDownloaded", Protocol.CALL, seqid);
    let args = new notifyDownloaded_args in
      args#set_packageId packageId;
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyDownloaded  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyDownloaded_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "notifyDownloaded failed: unknown result")))
  method reserveCoinPurchase request = 
    self#send_reserveCoinPurchase request;
    self#recv_reserveCoinPurchase
  method private send_reserveCoinPurchase request = 
    oprot#writeMessageBegin ("reserveCoinPurchase", Protocol.CALL, seqid);
    let args = new reserveCoinPurchase_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reserveCoinPurchase  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reserveCoinPurchase_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reserveCoinPurchase failed: unknown result")))
  method reservePayment paymentReservation = 
    self#send_reservePayment paymentReservation;
    self#recv_reservePayment
  method private send_reservePayment paymentReservation = 
    oprot#writeMessageBegin ("reservePayment", Protocol.CALL, seqid);
    let args = new reservePayment_args in
      args#set_paymentReservation paymentReservation;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reservePayment  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reservePayment_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reservePayment failed: unknown result")))
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 25
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_buyCoinProduct (seqid, iprot, oprot) =
    let args = read_buyCoinProduct_args iprot in
      iprot#readMessageEnd;
      let result = new buyCoinProduct_result in
        (try
          (handler#buyCoinProduct args#get_paymentReservation);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("buyCoinProduct", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_buyFreeProduct (seqid, iprot, oprot) =
    let args = read_buyFreeProduct_args iprot in
      iprot#readMessageEnd;
      let result = new buyFreeProduct_result in
        (try
          (handler#buyFreeProduct args#get_receiverMid args#get_productId args#get_messageTemplate args#get_language args#get_country args#get_packageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("buyFreeProduct", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_buyMustbuyProduct (seqid, iprot, oprot) =
    let args = read_buyMustbuyProduct_args iprot in
      iprot#readMessageEnd;
      let result = new buyMustbuyProduct_result in
        (try
          (handler#buyMustbuyProduct args#get_receiverMid args#get_productId args#get_messageTemplate args#get_language args#get_country args#get_packageId args#get_serialNumber);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("buyMustbuyProduct", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_checkCanReceivePresent (seqid, iprot, oprot) =
    let args = read_checkCanReceivePresent_args iprot in
      iprot#readMessageEnd;
      let result = new checkCanReceivePresent_result in
        (try
          (handler#checkCanReceivePresent args#get_recipientMid args#get_packageId args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("checkCanReceivePresent", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getActivePurchases (seqid, iprot, oprot) =
    let args = read_getActivePurchases_args iprot in
      iprot#readMessageEnd;
      let result = new getActivePurchases_result in
        (try
          result#set_success (handler#getActivePurchases args#get_start args#get_size args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getActivePurchases", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getActivePurchaseVersions (seqid, iprot, oprot) =
    let args = read_getActivePurchaseVersions_args iprot in
      iprot#readMessageEnd;
      let result = new getActivePurchaseVersions_result in
        (try
          result#set_success (handler#getActivePurchaseVersions args#get_start args#get_size args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getActivePurchaseVersions", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCoinProducts (seqid, iprot, oprot) =
    let args = read_getCoinProducts_args iprot in
      iprot#readMessageEnd;
      let result = new getCoinProducts_result in
        (try
          result#set_success (handler#getCoinProducts args#get_appStoreCode args#get_country args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCoinProducts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCoinProductsByPgCode (seqid, iprot, oprot) =
    let args = read_getCoinProductsByPgCode_args iprot in
      iprot#readMessageEnd;
      let result = new getCoinProductsByPgCode_result in
        (try
          result#set_success (handler#getCoinProductsByPgCode args#get_appStoreCode args#get_pgCode args#get_country args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCoinProductsByPgCode", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCoinPurchaseHistory (seqid, iprot, oprot) =
    let args = read_getCoinPurchaseHistory_args iprot in
      iprot#readMessageEnd;
      let result = new getCoinPurchaseHistory_result in
        (try
          result#set_success (handler#getCoinPurchaseHistory args#get_request);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCoinPurchaseHistory", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCoinUseAndRefundHistory (seqid, iprot, oprot) =
    let args = read_getCoinUseAndRefundHistory_args iprot in
      iprot#readMessageEnd;
      let result = new getCoinUseAndRefundHistory_result in
        (try
          result#set_success (handler#getCoinUseAndRefundHistory args#get_request);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCoinUseAndRefundHistory", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getDownloads (seqid, iprot, oprot) =
    let args = read_getDownloads_args iprot in
      iprot#readMessageEnd;
      let result = new getDownloads_result in
        (try
          result#set_success (handler#getDownloads args#get_start args#get_size args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getDownloads", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getEventPackages (seqid, iprot, oprot) =
    let args = read_getEventPackages_args iprot in
      iprot#readMessageEnd;
      let result = new getEventPackages_result in
        (try
          result#set_success (handler#getEventPackages args#get_start args#get_size args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getEventPackages", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getNewlyReleasedPackages (seqid, iprot, oprot) =
    let args = read_getNewlyReleasedPackages_args iprot in
      iprot#readMessageEnd;
      let result = new getNewlyReleasedPackages_result in
        (try
          result#set_success (handler#getNewlyReleasedPackages args#get_start args#get_size args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getNewlyReleasedPackages", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPopularPackages (seqid, iprot, oprot) =
    let args = read_getPopularPackages_args iprot in
      iprot#readMessageEnd;
      let result = new getPopularPackages_result in
        (try
          result#set_success (handler#getPopularPackages args#get_start args#get_size args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPopularPackages", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPresentsReceived (seqid, iprot, oprot) =
    let args = read_getPresentsReceived_args iprot in
      iprot#readMessageEnd;
      let result = new getPresentsReceived_result in
        (try
          result#set_success (handler#getPresentsReceived args#get_start args#get_size args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPresentsReceived", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPresentsSent (seqid, iprot, oprot) =
    let args = read_getPresentsSent_args iprot in
      iprot#readMessageEnd;
      let result = new getPresentsSent_result in
        (try
          result#set_success (handler#getPresentsSent args#get_start args#get_size args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPresentsSent", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProduct (seqid, iprot, oprot) =
    let args = read_getProduct_args iprot in
      iprot#readMessageEnd;
      let result = new getProduct_result in
        (try
          result#set_success (handler#getProduct args#get_packageID args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getProduct", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProductList (seqid, iprot, oprot) =
    let args = read_getProductList_args iprot in
      iprot#readMessageEnd;
      let result = new getProductList_result in
        (try
          result#set_success (handler#getProductList args#get_productIdList args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getProductList", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProductListWithCarrier (seqid, iprot, oprot) =
    let args = read_getProductListWithCarrier_args iprot in
      iprot#readMessageEnd;
      let result = new getProductListWithCarrier_result in
        (try
          result#set_success (handler#getProductListWithCarrier args#get_productIdList args#get_language args#get_country args#get_carrierCode);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getProductListWithCarrier", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProductWithCarrier (seqid, iprot, oprot) =
    let args = read_getProductWithCarrier_args iprot in
      iprot#readMessageEnd;
      let result = new getProductWithCarrier_result in
        (try
          result#set_success (handler#getProductWithCarrier args#get_packageID args#get_language args#get_country args#get_carrierCode);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getProductWithCarrier", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPurchaseHistory (seqid, iprot, oprot) =
    let args = read_getPurchaseHistory_args iprot in
      iprot#readMessageEnd;
      let result = new getPurchaseHistory_result in
        (try
          result#set_success (handler#getPurchaseHistory args#get_start args#get_size args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPurchaseHistory", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getTotalBalance (seqid, iprot, oprot) =
    let args = read_getTotalBalance_args iprot in
      iprot#readMessageEnd;
      let result = new getTotalBalance_result in
        (try
          result#set_success (handler#getTotalBalance args#get_appStoreCode);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getTotalBalance", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyDownloaded (seqid, iprot, oprot) =
    let args = read_notifyDownloaded_args iprot in
      iprot#readMessageEnd;
      let result = new notifyDownloaded_result in
        (try
          result#set_success (handler#notifyDownloaded args#get_packageId args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyDownloaded", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reserveCoinPurchase (seqid, iprot, oprot) =
    let args = read_reserveCoinPurchase_args iprot in
      iprot#readMessageEnd;
      let result = new reserveCoinPurchase_result in
        (try
          result#set_success (handler#reserveCoinPurchase args#get_request);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reserveCoinPurchase", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reservePayment (seqid, iprot, oprot) =
    let args = read_reservePayment_args iprot in
      iprot#readMessageEnd;
      let result = new reservePayment_result in
        (try
          result#set_success (handler#reservePayment args#get_paymentReservation);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reservePayment", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "buyCoinProduct" self#process_buyCoinProduct;
    Hashtbl.add processMap "buyFreeProduct" self#process_buyFreeProduct;
    Hashtbl.add processMap "buyMustbuyProduct" self#process_buyMustbuyProduct;
    Hashtbl.add processMap "checkCanReceivePresent" self#process_checkCanReceivePresent;
    Hashtbl.add processMap "getActivePurchases" self#process_getActivePurchases;
    Hashtbl.add processMap "getActivePurchaseVersions" self#process_getActivePurchaseVersions;
    Hashtbl.add processMap "getCoinProducts" self#process_getCoinProducts;
    Hashtbl.add processMap "getCoinProductsByPgCode" self#process_getCoinProductsByPgCode;
    Hashtbl.add processMap "getCoinPurchaseHistory" self#process_getCoinPurchaseHistory;
    Hashtbl.add processMap "getCoinUseAndRefundHistory" self#process_getCoinUseAndRefundHistory;
    Hashtbl.add processMap "getDownloads" self#process_getDownloads;
    Hashtbl.add processMap "getEventPackages" self#process_getEventPackages;
    Hashtbl.add processMap "getNewlyReleasedPackages" self#process_getNewlyReleasedPackages;
    Hashtbl.add processMap "getPopularPackages" self#process_getPopularPackages;
    Hashtbl.add processMap "getPresentsReceived" self#process_getPresentsReceived;
    Hashtbl.add processMap "getPresentsSent" self#process_getPresentsSent;
    Hashtbl.add processMap "getProduct" self#process_getProduct;
    Hashtbl.add processMap "getProductList" self#process_getProductList;
    Hashtbl.add processMap "getProductListWithCarrier" self#process_getProductListWithCarrier;
    Hashtbl.add processMap "getProductWithCarrier" self#process_getProductWithCarrier;
    Hashtbl.add processMap "getPurchaseHistory" self#process_getPurchaseHistory;
    Hashtbl.add processMap "getTotalBalance" self#process_getTotalBalance;
    Hashtbl.add processMap "notifyDownloaded" self#process_notifyDownloaded;
    Hashtbl.add processMap "reserveCoinPurchase" self#process_reserveCoinPurchase;
    Hashtbl.add processMap "reservePayment" self#process_reservePayment;
end

