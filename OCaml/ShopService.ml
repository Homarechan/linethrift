(*
 Autogenerated by Thrift Compiler (0.13.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class buyCoinProduct_args =
object (self)
  val mutable _paymentReservation : paymentReservation option = None
  method get_paymentReservation = _paymentReservation
  method grab_paymentReservation = match _paymentReservation with None->raise (Field_empty "buyCoinProduct_args.paymentReservation") | Some _x6145 -> _x6145
  method set_paymentReservation _x6145 = _paymentReservation <- Some _x6145
  method unset_paymentReservation = _paymentReservation <- None
  method reset_paymentReservation = _paymentReservation <- None

  method copy =
      let _new = Oo.copy self in
      if _paymentReservation <> None then
        _new#set_paymentReservation self#grab_paymentReservation#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "buyCoinProduct_args";
    (match _paymentReservation with None -> () | Some _v -> 
      oprot#writeFieldBegin("paymentReservation",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_buyCoinProduct_args (iprot : Protocol.t) =
  let _str6148 = new buyCoinProduct_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6149,_id6150) = iprot#readFieldBegin in
        if _t6149 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6150 with 
          | 2 -> (if _t6149 = Protocol.T_STRUCT then
              _str6148#set_paymentReservation (read_paymentReservation iprot)
            else
              iprot#skip _t6149)
          | _ -> iprot#skip _t6149);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6148

class buyCoinProduct_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "buyCoinProduct_result.e") | Some _x6151 -> _x6151
  method set_e _x6151 = _e <- Some _x6151
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "buyCoinProduct_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_buyCoinProduct_result (iprot : Protocol.t) =
  let _str6154 = new buyCoinProduct_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6155,_id6156) = iprot#readFieldBegin in
        if _t6155 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6156 with 
          | 1 -> (if _t6155 = Protocol.T_STRUCT then
              _str6154#set_e (read_talkException iprot)
            else
              iprot#skip _t6155)
          | _ -> iprot#skip _t6155);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6154

class buyFreeProduct_args =
object (self)
  val mutable _receiverMid : string option = None
  method get_receiverMid = _receiverMid
  method grab_receiverMid = match _receiverMid with None->raise (Field_empty "buyFreeProduct_args.receiverMid") | Some _x6157 -> _x6157
  method set_receiverMid _x6157 = _receiverMid <- Some _x6157
  method unset_receiverMid = _receiverMid <- None
  method reset_receiverMid = _receiverMid <- None

  val mutable _productId : string option = None
  method get_productId = _productId
  method grab_productId = match _productId with None->raise (Field_empty "buyFreeProduct_args.productId") | Some _x6158 -> _x6158
  method set_productId _x6158 = _productId <- Some _x6158
  method unset_productId = _productId <- None
  method reset_productId = _productId <- None

  val mutable _messageTemplate : Int32.t option = None
  method get_messageTemplate = _messageTemplate
  method grab_messageTemplate = match _messageTemplate with None->raise (Field_empty "buyFreeProduct_args.messageTemplate") | Some _x6159 -> _x6159
  method set_messageTemplate _x6159 = _messageTemplate <- Some _x6159
  method unset_messageTemplate = _messageTemplate <- None
  method reset_messageTemplate = _messageTemplate <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "buyFreeProduct_args.language") | Some _x6160 -> _x6160
  method set_language _x6160 = _language <- Some _x6160
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "buyFreeProduct_args.country") | Some _x6161 -> _x6161
  method set_country _x6161 = _country <- Some _x6161
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _packageId : Int64.t option = None
  method get_packageId = _packageId
  method grab_packageId = match _packageId with None->raise (Field_empty "buyFreeProduct_args.packageId") | Some _x6162 -> _x6162
  method set_packageId _x6162 = _packageId <- Some _x6162
  method unset_packageId = _packageId <- None
  method reset_packageId = _packageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "buyFreeProduct_args";
    (match _receiverMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("receiverMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _productId with None -> () | Some _v -> 
      oprot#writeFieldBegin("productId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageTemplate with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageTemplate",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _packageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("packageId",Protocol.T_I64,7);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_buyFreeProduct_args (iprot : Protocol.t) =
  let _str6165 = new buyFreeProduct_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6166,_id6167) = iprot#readFieldBegin in
        if _t6166 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6167 with 
          | 2 -> (if _t6166 = Protocol.T_STRING then
              _str6165#set_receiverMid iprot#readString
            else
              iprot#skip _t6166)
          | 3 -> (if _t6166 = Protocol.T_STRING then
              _str6165#set_productId iprot#readString
            else
              iprot#skip _t6166)
          | 4 -> (if _t6166 = Protocol.T_I32 then
              _str6165#set_messageTemplate iprot#readI32
            else
              iprot#skip _t6166)
          | 5 -> (if _t6166 = Protocol.T_STRING then
              _str6165#set_language iprot#readString
            else
              iprot#skip _t6166)
          | 6 -> (if _t6166 = Protocol.T_STRING then
              _str6165#set_country iprot#readString
            else
              iprot#skip _t6166)
          | 7 -> (if _t6166 = Protocol.T_I64 then
              _str6165#set_packageId iprot#readI64
            else
              iprot#skip _t6166)
          | _ -> iprot#skip _t6166);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6165

class buyFreeProduct_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "buyFreeProduct_result.e") | Some _x6168 -> _x6168
  method set_e _x6168 = _e <- Some _x6168
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "buyFreeProduct_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_buyFreeProduct_result (iprot : Protocol.t) =
  let _str6171 = new buyFreeProduct_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6172,_id6173) = iprot#readFieldBegin in
        if _t6172 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6173 with 
          | 1 -> (if _t6172 = Protocol.T_STRUCT then
              _str6171#set_e (read_talkException iprot)
            else
              iprot#skip _t6172)
          | _ -> iprot#skip _t6172);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6171

class buyMustbuyProduct_args =
object (self)
  val mutable _receiverMid : string option = None
  method get_receiverMid = _receiverMid
  method grab_receiverMid = match _receiverMid with None->raise (Field_empty "buyMustbuyProduct_args.receiverMid") | Some _x6174 -> _x6174
  method set_receiverMid _x6174 = _receiverMid <- Some _x6174
  method unset_receiverMid = _receiverMid <- None
  method reset_receiverMid = _receiverMid <- None

  val mutable _productId : string option = None
  method get_productId = _productId
  method grab_productId = match _productId with None->raise (Field_empty "buyMustbuyProduct_args.productId") | Some _x6175 -> _x6175
  method set_productId _x6175 = _productId <- Some _x6175
  method unset_productId = _productId <- None
  method reset_productId = _productId <- None

  val mutable _messageTemplate : Int32.t option = None
  method get_messageTemplate = _messageTemplate
  method grab_messageTemplate = match _messageTemplate with None->raise (Field_empty "buyMustbuyProduct_args.messageTemplate") | Some _x6176 -> _x6176
  method set_messageTemplate _x6176 = _messageTemplate <- Some _x6176
  method unset_messageTemplate = _messageTemplate <- None
  method reset_messageTemplate = _messageTemplate <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "buyMustbuyProduct_args.language") | Some _x6177 -> _x6177
  method set_language _x6177 = _language <- Some _x6177
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "buyMustbuyProduct_args.country") | Some _x6178 -> _x6178
  method set_country _x6178 = _country <- Some _x6178
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _packageId : Int64.t option = None
  method get_packageId = _packageId
  method grab_packageId = match _packageId with None->raise (Field_empty "buyMustbuyProduct_args.packageId") | Some _x6179 -> _x6179
  method set_packageId _x6179 = _packageId <- Some _x6179
  method unset_packageId = _packageId <- None
  method reset_packageId = _packageId <- None

  val mutable _serialNumber : string option = None
  method get_serialNumber = _serialNumber
  method grab_serialNumber = match _serialNumber with None->raise (Field_empty "buyMustbuyProduct_args.serialNumber") | Some _x6180 -> _x6180
  method set_serialNumber _x6180 = _serialNumber <- Some _x6180
  method unset_serialNumber = _serialNumber <- None
  method reset_serialNumber = _serialNumber <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "buyMustbuyProduct_args";
    (match _receiverMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("receiverMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _productId with None -> () | Some _v -> 
      oprot#writeFieldBegin("productId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageTemplate with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageTemplate",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _packageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("packageId",Protocol.T_I64,7);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _serialNumber with None -> () | Some _v -> 
      oprot#writeFieldBegin("serialNumber",Protocol.T_STRING,8);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_buyMustbuyProduct_args (iprot : Protocol.t) =
  let _str6183 = new buyMustbuyProduct_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6184,_id6185) = iprot#readFieldBegin in
        if _t6184 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6185 with 
          | 2 -> (if _t6184 = Protocol.T_STRING then
              _str6183#set_receiverMid iprot#readString
            else
              iprot#skip _t6184)
          | 3 -> (if _t6184 = Protocol.T_STRING then
              _str6183#set_productId iprot#readString
            else
              iprot#skip _t6184)
          | 4 -> (if _t6184 = Protocol.T_I32 then
              _str6183#set_messageTemplate iprot#readI32
            else
              iprot#skip _t6184)
          | 5 -> (if _t6184 = Protocol.T_STRING then
              _str6183#set_language iprot#readString
            else
              iprot#skip _t6184)
          | 6 -> (if _t6184 = Protocol.T_STRING then
              _str6183#set_country iprot#readString
            else
              iprot#skip _t6184)
          | 7 -> (if _t6184 = Protocol.T_I64 then
              _str6183#set_packageId iprot#readI64
            else
              iprot#skip _t6184)
          | 8 -> (if _t6184 = Protocol.T_STRING then
              _str6183#set_serialNumber iprot#readString
            else
              iprot#skip _t6184)
          | _ -> iprot#skip _t6184);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6183

class buyMustbuyProduct_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "buyMustbuyProduct_result.e") | Some _x6186 -> _x6186
  method set_e _x6186 = _e <- Some _x6186
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "buyMustbuyProduct_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_buyMustbuyProduct_result (iprot : Protocol.t) =
  let _str6189 = new buyMustbuyProduct_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6190,_id6191) = iprot#readFieldBegin in
        if _t6190 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6191 with 
          | 1 -> (if _t6190 = Protocol.T_STRUCT then
              _str6189#set_e (read_talkException iprot)
            else
              iprot#skip _t6190)
          | _ -> iprot#skip _t6190);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6189

class checkCanReceivePresent_args =
object (self)
  val mutable _recipientMid : string option = None
  method get_recipientMid = _recipientMid
  method grab_recipientMid = match _recipientMid with None->raise (Field_empty "checkCanReceivePresent_args.recipientMid") | Some _x6192 -> _x6192
  method set_recipientMid _x6192 = _recipientMid <- Some _x6192
  method unset_recipientMid = _recipientMid <- None
  method reset_recipientMid = _recipientMid <- None

  val mutable _packageId : Int64.t option = None
  method get_packageId = _packageId
  method grab_packageId = match _packageId with None->raise (Field_empty "checkCanReceivePresent_args.packageId") | Some _x6193 -> _x6193
  method set_packageId _x6193 = _packageId <- Some _x6193
  method unset_packageId = _packageId <- None
  method reset_packageId = _packageId <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "checkCanReceivePresent_args.language") | Some _x6194 -> _x6194
  method set_language _x6194 = _language <- Some _x6194
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "checkCanReceivePresent_args.country") | Some _x6195 -> _x6195
  method set_country _x6195 = _country <- Some _x6195
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkCanReceivePresent_args";
    (match _recipientMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("recipientMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _packageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("packageId",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkCanReceivePresent_args (iprot : Protocol.t) =
  let _str6198 = new checkCanReceivePresent_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6199,_id6200) = iprot#readFieldBegin in
        if _t6199 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6200 with 
          | 2 -> (if _t6199 = Protocol.T_STRING then
              _str6198#set_recipientMid iprot#readString
            else
              iprot#skip _t6199)
          | 3 -> (if _t6199 = Protocol.T_I64 then
              _str6198#set_packageId iprot#readI64
            else
              iprot#skip _t6199)
          | 4 -> (if _t6199 = Protocol.T_STRING then
              _str6198#set_language iprot#readString
            else
              iprot#skip _t6199)
          | 5 -> (if _t6199 = Protocol.T_STRING then
              _str6198#set_country iprot#readString
            else
              iprot#skip _t6199)
          | _ -> iprot#skip _t6199);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6198

class checkCanReceivePresent_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "checkCanReceivePresent_result.e") | Some _x6201 -> _x6201
  method set_e _x6201 = _e <- Some _x6201
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkCanReceivePresent_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkCanReceivePresent_result (iprot : Protocol.t) =
  let _str6204 = new checkCanReceivePresent_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6205,_id6206) = iprot#readFieldBegin in
        if _t6205 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6206 with 
          | 1 -> (if _t6205 = Protocol.T_STRUCT then
              _str6204#set_e (read_talkException iprot)
            else
              iprot#skip _t6205)
          | _ -> iprot#skip _t6205);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6204

class getActivePurchases_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getActivePurchases_args.start") | Some _x6207 -> _x6207
  method set_start _x6207 = _start <- Some _x6207
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getActivePurchases_args.size") | Some _x6208 -> _x6208
  method set_size _x6208 = _size <- Some _x6208
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getActivePurchases_args.language") | Some _x6209 -> _x6209
  method set_language _x6209 = _language <- Some _x6209
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getActivePurchases_args.country") | Some _x6210 -> _x6210
  method set_country _x6210 = _country <- Some _x6210
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActivePurchases_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActivePurchases_args (iprot : Protocol.t) =
  let _str6213 = new getActivePurchases_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6214,_id6215) = iprot#readFieldBegin in
        if _t6214 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6215 with 
          | 2 -> (if _t6214 = Protocol.T_I64 then
              _str6213#set_start iprot#readI64
            else
              iprot#skip _t6214)
          | 3 -> (if _t6214 = Protocol.T_I32 then
              _str6213#set_size iprot#readI32
            else
              iprot#skip _t6214)
          | 4 -> (if _t6214 = Protocol.T_STRING then
              _str6213#set_language iprot#readString
            else
              iprot#skip _t6214)
          | 5 -> (if _t6214 = Protocol.T_STRING then
              _str6213#set_country iprot#readString
            else
              iprot#skip _t6214)
          | _ -> iprot#skip _t6214);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6213

class getActivePurchases_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getActivePurchases_result.success") | Some _x6216 -> _x6216
  method set_success _x6216 = _success <- Some _x6216
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getActivePurchases_result.e") | Some _x6217 -> _x6217
  method set_e _x6217 = _e <- Some _x6217
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActivePurchases_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActivePurchases_result (iprot : Protocol.t) =
  let _str6220 = new getActivePurchases_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6221,_id6222) = iprot#readFieldBegin in
        if _t6221 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6222 with 
          | 0 -> (if _t6221 = Protocol.T_STRUCT then
              _str6220#set_success (read_productList iprot)
            else
              iprot#skip _t6221)
          | 1 -> (if _t6221 = Protocol.T_STRUCT then
              _str6220#set_e (read_talkException iprot)
            else
              iprot#skip _t6221)
          | _ -> iprot#skip _t6221);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6220

class getActivePurchaseVersions_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getActivePurchaseVersions_args.start") | Some _x6223 -> _x6223
  method set_start _x6223 = _start <- Some _x6223
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getActivePurchaseVersions_args.size") | Some _x6224 -> _x6224
  method set_size _x6224 = _size <- Some _x6224
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getActivePurchaseVersions_args.language") | Some _x6225 -> _x6225
  method set_language _x6225 = _language <- Some _x6225
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getActivePurchaseVersions_args.country") | Some _x6226 -> _x6226
  method set_country _x6226 = _country <- Some _x6226
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActivePurchaseVersions_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActivePurchaseVersions_args (iprot : Protocol.t) =
  let _str6229 = new getActivePurchaseVersions_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6230,_id6231) = iprot#readFieldBegin in
        if _t6230 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6231 with 
          | 2 -> (if _t6230 = Protocol.T_I64 then
              _str6229#set_start iprot#readI64
            else
              iprot#skip _t6230)
          | 3 -> (if _t6230 = Protocol.T_I32 then
              _str6229#set_size iprot#readI32
            else
              iprot#skip _t6230)
          | 4 -> (if _t6230 = Protocol.T_STRING then
              _str6229#set_language iprot#readString
            else
              iprot#skip _t6230)
          | 5 -> (if _t6230 = Protocol.T_STRING then
              _str6229#set_country iprot#readString
            else
              iprot#skip _t6230)
          | _ -> iprot#skip _t6230);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6229

class getActivePurchaseVersions_result =
object (self)
  val mutable _success : productSimpleList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getActivePurchaseVersions_result.success") | Some _x6232 -> _x6232
  method set_success _x6232 = _success <- Some _x6232
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getActivePurchaseVersions_result.e") | Some _x6233 -> _x6233
  method set_e _x6233 = _e <- Some _x6233
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActivePurchaseVersions_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActivePurchaseVersions_result (iprot : Protocol.t) =
  let _str6236 = new getActivePurchaseVersions_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6237,_id6238) = iprot#readFieldBegin in
        if _t6237 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6238 with 
          | 0 -> (if _t6237 = Protocol.T_STRUCT then
              _str6236#set_success (read_productSimpleList iprot)
            else
              iprot#skip _t6237)
          | 1 -> (if _t6237 = Protocol.T_STRUCT then
              _str6236#set_e (read_talkException iprot)
            else
              iprot#skip _t6237)
          | _ -> iprot#skip _t6237);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6236

class getCoinProducts_args =
object (self)
  val mutable _appStoreCode : PaymentType.t option = None
  method get_appStoreCode = _appStoreCode
  method grab_appStoreCode = match _appStoreCode with None->raise (Field_empty "getCoinProducts_args.appStoreCode") | Some _x6239 -> _x6239
  method set_appStoreCode _x6239 = _appStoreCode <- Some _x6239
  method unset_appStoreCode = _appStoreCode <- None
  method reset_appStoreCode = _appStoreCode <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getCoinProducts_args.country") | Some _x6240 -> _x6240
  method set_country _x6240 = _country <- Some _x6240
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getCoinProducts_args.language") | Some _x6241 -> _x6241
  method set_language _x6241 = _language <- Some _x6241
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCoinProducts_args";
    (match _appStoreCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("appStoreCode",Protocol.T_I32,2);
      oprot#writeI32(PaymentType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCoinProducts_args (iprot : Protocol.t) =
  let _str6244 = new getCoinProducts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6245,_id6246) = iprot#readFieldBegin in
        if _t6245 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6246 with 
          | 2 -> (if _t6245 = Protocol.T_I32 then
              _str6244#set_appStoreCode (PaymentType.of_i iprot#readI32)
            else
              iprot#skip _t6245)
          | 3 -> (if _t6245 = Protocol.T_STRING then
              _str6244#set_country iprot#readString
            else
              iprot#skip _t6245)
          | 4 -> (if _t6245 = Protocol.T_STRING then
              _str6244#set_language iprot#readString
            else
              iprot#skip _t6245)
          | _ -> iprot#skip _t6245);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6244

class getCoinProducts_result =
object (self)
  val mutable _success : coinProductItem list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCoinProducts_result.success") | Some _x6247 -> _x6247
  method set_success _x6247 = _success <- Some _x6247
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCoinProducts_result.e") | Some _x6248 -> _x6248
  method set_e _x6248 = _e <- Some _x6248
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCoinProducts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter6251 ->         _iter6251#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCoinProducts_result (iprot : Protocol.t) =
  let _str6252 = new getCoinProducts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6253,_id6254) = iprot#readFieldBegin in
        if _t6253 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6254 with 
          | 0 -> (if _t6253 = Protocol.T_LIST then
              _str6252#set_success 
                (let (_etype6258,_size6255) = iprot#readListBegin in
                  let _con6259 = (Array.to_list (Array.init _size6255 (fun _ -> (read_coinProductItem iprot)))) in
                    iprot#readListEnd; _con6259)
            else
              iprot#skip _t6253)
          | 1 -> (if _t6253 = Protocol.T_STRUCT then
              _str6252#set_e (read_talkException iprot)
            else
              iprot#skip _t6253)
          | _ -> iprot#skip _t6253);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6252

class getCoinProductsByPgCode_args =
object (self)
  val mutable _appStoreCode : PaymentType.t option = None
  method get_appStoreCode = _appStoreCode
  method grab_appStoreCode = match _appStoreCode with None->raise (Field_empty "getCoinProductsByPgCode_args.appStoreCode") | Some _x6260 -> _x6260
  method set_appStoreCode _x6260 = _appStoreCode <- Some _x6260
  method unset_appStoreCode = _appStoreCode <- None
  method reset_appStoreCode = _appStoreCode <- None

  val mutable _pgCode : PaymentPgType.t option = None
  method get_pgCode = _pgCode
  method grab_pgCode = match _pgCode with None->raise (Field_empty "getCoinProductsByPgCode_args.pgCode") | Some _x6261 -> _x6261
  method set_pgCode _x6261 = _pgCode <- Some _x6261
  method unset_pgCode = _pgCode <- None
  method reset_pgCode = _pgCode <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getCoinProductsByPgCode_args.country") | Some _x6262 -> _x6262
  method set_country _x6262 = _country <- Some _x6262
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getCoinProductsByPgCode_args.language") | Some _x6263 -> _x6263
  method set_language _x6263 = _language <- Some _x6263
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCoinProductsByPgCode_args";
    (match _appStoreCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("appStoreCode",Protocol.T_I32,2);
      oprot#writeI32(PaymentType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _pgCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("pgCode",Protocol.T_I32,3);
      oprot#writeI32(PaymentPgType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCoinProductsByPgCode_args (iprot : Protocol.t) =
  let _str6266 = new getCoinProductsByPgCode_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6267,_id6268) = iprot#readFieldBegin in
        if _t6267 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6268 with 
          | 2 -> (if _t6267 = Protocol.T_I32 then
              _str6266#set_appStoreCode (PaymentType.of_i iprot#readI32)
            else
              iprot#skip _t6267)
          | 3 -> (if _t6267 = Protocol.T_I32 then
              _str6266#set_pgCode (PaymentPgType.of_i iprot#readI32)
            else
              iprot#skip _t6267)
          | 4 -> (if _t6267 = Protocol.T_STRING then
              _str6266#set_country iprot#readString
            else
              iprot#skip _t6267)
          | 5 -> (if _t6267 = Protocol.T_STRING then
              _str6266#set_language iprot#readString
            else
              iprot#skip _t6267)
          | _ -> iprot#skip _t6267);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6266

class getCoinProductsByPgCode_result =
object (self)
  val mutable _success : coinProductItem list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCoinProductsByPgCode_result.success") | Some _x6269 -> _x6269
  method set_success _x6269 = _success <- Some _x6269
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCoinProductsByPgCode_result.e") | Some _x6270 -> _x6270
  method set_e _x6270 = _e <- Some _x6270
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCoinProductsByPgCode_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter6273 ->         _iter6273#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCoinProductsByPgCode_result (iprot : Protocol.t) =
  let _str6274 = new getCoinProductsByPgCode_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6275,_id6276) = iprot#readFieldBegin in
        if _t6275 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6276 with 
          | 0 -> (if _t6275 = Protocol.T_LIST then
              _str6274#set_success 
                (let (_etype6280,_size6277) = iprot#readListBegin in
                  let _con6281 = (Array.to_list (Array.init _size6277 (fun _ -> (read_coinProductItem iprot)))) in
                    iprot#readListEnd; _con6281)
            else
              iprot#skip _t6275)
          | 1 -> (if _t6275 = Protocol.T_STRUCT then
              _str6274#set_e (read_talkException iprot)
            else
              iprot#skip _t6275)
          | _ -> iprot#skip _t6275);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6274

class getCoinPurchaseHistory_args =
object (self)
  val mutable _request : coinHistoryCondition option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getCoinPurchaseHistory_args.request") | Some _x6282 -> _x6282
  method set_request _x6282 = _request <- Some _x6282
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCoinPurchaseHistory_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCoinPurchaseHistory_args (iprot : Protocol.t) =
  let _str6285 = new getCoinPurchaseHistory_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6286,_id6287) = iprot#readFieldBegin in
        if _t6286 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6287 with 
          | 2 -> (if _t6286 = Protocol.T_STRUCT then
              _str6285#set_request (read_coinHistoryCondition iprot)
            else
              iprot#skip _t6286)
          | _ -> iprot#skip _t6286);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6285

class getCoinPurchaseHistory_result =
object (self)
  val mutable _success : coinHistoryResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCoinPurchaseHistory_result.success") | Some _x6288 -> _x6288
  method set_success _x6288 = _success <- Some _x6288
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCoinPurchaseHistory_result.e") | Some _x6289 -> _x6289
  method set_e _x6289 = _e <- Some _x6289
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCoinPurchaseHistory_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCoinPurchaseHistory_result (iprot : Protocol.t) =
  let _str6292 = new getCoinPurchaseHistory_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6293,_id6294) = iprot#readFieldBegin in
        if _t6293 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6294 with 
          | 0 -> (if _t6293 = Protocol.T_STRUCT then
              _str6292#set_success (read_coinHistoryResult iprot)
            else
              iprot#skip _t6293)
          | 1 -> (if _t6293 = Protocol.T_STRUCT then
              _str6292#set_e (read_talkException iprot)
            else
              iprot#skip _t6293)
          | _ -> iprot#skip _t6293);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6292

class getCoinUseAndRefundHistory_args =
object (self)
  val mutable _request : coinHistoryCondition option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getCoinUseAndRefundHistory_args.request") | Some _x6295 -> _x6295
  method set_request _x6295 = _request <- Some _x6295
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCoinUseAndRefundHistory_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCoinUseAndRefundHistory_args (iprot : Protocol.t) =
  let _str6298 = new getCoinUseAndRefundHistory_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6299,_id6300) = iprot#readFieldBegin in
        if _t6299 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6300 with 
          | 2 -> (if _t6299 = Protocol.T_STRUCT then
              _str6298#set_request (read_coinHistoryCondition iprot)
            else
              iprot#skip _t6299)
          | _ -> iprot#skip _t6299);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6298

class getCoinUseAndRefundHistory_result =
object (self)
  val mutable _success : coinHistoryResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCoinUseAndRefundHistory_result.success") | Some _x6301 -> _x6301
  method set_success _x6301 = _success <- Some _x6301
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCoinUseAndRefundHistory_result.e") | Some _x6302 -> _x6302
  method set_e _x6302 = _e <- Some _x6302
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCoinUseAndRefundHistory_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCoinUseAndRefundHistory_result (iprot : Protocol.t) =
  let _str6305 = new getCoinUseAndRefundHistory_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6306,_id6307) = iprot#readFieldBegin in
        if _t6306 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6307 with 
          | 0 -> (if _t6306 = Protocol.T_STRUCT then
              _str6305#set_success (read_coinHistoryResult iprot)
            else
              iprot#skip _t6306)
          | 1 -> (if _t6306 = Protocol.T_STRUCT then
              _str6305#set_e (read_talkException iprot)
            else
              iprot#skip _t6306)
          | _ -> iprot#skip _t6306);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6305

class getDownloads_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getDownloads_args.start") | Some _x6308 -> _x6308
  method set_start _x6308 = _start <- Some _x6308
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getDownloads_args.size") | Some _x6309 -> _x6309
  method set_size _x6309 = _size <- Some _x6309
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getDownloads_args.language") | Some _x6310 -> _x6310
  method set_language _x6310 = _language <- Some _x6310
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getDownloads_args.country") | Some _x6311 -> _x6311
  method set_country _x6311 = _country <- Some _x6311
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getDownloads_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getDownloads_args (iprot : Protocol.t) =
  let _str6314 = new getDownloads_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6315,_id6316) = iprot#readFieldBegin in
        if _t6315 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6316 with 
          | 2 -> (if _t6315 = Protocol.T_I64 then
              _str6314#set_start iprot#readI64
            else
              iprot#skip _t6315)
          | 3 -> (if _t6315 = Protocol.T_I32 then
              _str6314#set_size iprot#readI32
            else
              iprot#skip _t6315)
          | 4 -> (if _t6315 = Protocol.T_STRING then
              _str6314#set_language iprot#readString
            else
              iprot#skip _t6315)
          | 5 -> (if _t6315 = Protocol.T_STRING then
              _str6314#set_country iprot#readString
            else
              iprot#skip _t6315)
          | _ -> iprot#skip _t6315);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6314

class getDownloads_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getDownloads_result.success") | Some _x6317 -> _x6317
  method set_success _x6317 = _success <- Some _x6317
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getDownloads_result.e") | Some _x6318 -> _x6318
  method set_e _x6318 = _e <- Some _x6318
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getDownloads_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getDownloads_result (iprot : Protocol.t) =
  let _str6321 = new getDownloads_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6322,_id6323) = iprot#readFieldBegin in
        if _t6322 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6323 with 
          | 0 -> (if _t6322 = Protocol.T_STRUCT then
              _str6321#set_success (read_productList iprot)
            else
              iprot#skip _t6322)
          | 1 -> (if _t6322 = Protocol.T_STRUCT then
              _str6321#set_e (read_talkException iprot)
            else
              iprot#skip _t6322)
          | _ -> iprot#skip _t6322);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6321

class getEventPackages_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getEventPackages_args.start") | Some _x6324 -> _x6324
  method set_start _x6324 = _start <- Some _x6324
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getEventPackages_args.size") | Some _x6325 -> _x6325
  method set_size _x6325 = _size <- Some _x6325
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getEventPackages_args.language") | Some _x6326 -> _x6326
  method set_language _x6326 = _language <- Some _x6326
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getEventPackages_args.country") | Some _x6327 -> _x6327
  method set_country _x6327 = _country <- Some _x6327
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getEventPackages_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getEventPackages_args (iprot : Protocol.t) =
  let _str6330 = new getEventPackages_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6331,_id6332) = iprot#readFieldBegin in
        if _t6331 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6332 with 
          | 2 -> (if _t6331 = Protocol.T_I64 then
              _str6330#set_start iprot#readI64
            else
              iprot#skip _t6331)
          | 3 -> (if _t6331 = Protocol.T_I32 then
              _str6330#set_size iprot#readI32
            else
              iprot#skip _t6331)
          | 4 -> (if _t6331 = Protocol.T_STRING then
              _str6330#set_language iprot#readString
            else
              iprot#skip _t6331)
          | 5 -> (if _t6331 = Protocol.T_STRING then
              _str6330#set_country iprot#readString
            else
              iprot#skip _t6331)
          | _ -> iprot#skip _t6331);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6330

class getEventPackages_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getEventPackages_result.success") | Some _x6333 -> _x6333
  method set_success _x6333 = _success <- Some _x6333
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getEventPackages_result.e") | Some _x6334 -> _x6334
  method set_e _x6334 = _e <- Some _x6334
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getEventPackages_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getEventPackages_result (iprot : Protocol.t) =
  let _str6337 = new getEventPackages_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6338,_id6339) = iprot#readFieldBegin in
        if _t6338 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6339 with 
          | 0 -> (if _t6338 = Protocol.T_STRUCT then
              _str6337#set_success (read_productList iprot)
            else
              iprot#skip _t6338)
          | 1 -> (if _t6338 = Protocol.T_STRUCT then
              _str6337#set_e (read_talkException iprot)
            else
              iprot#skip _t6338)
          | _ -> iprot#skip _t6338);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6337

class getNewlyReleasedPackages_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getNewlyReleasedPackages_args.start") | Some _x6340 -> _x6340
  method set_start _x6340 = _start <- Some _x6340
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getNewlyReleasedPackages_args.size") | Some _x6341 -> _x6341
  method set_size _x6341 = _size <- Some _x6341
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getNewlyReleasedPackages_args.language") | Some _x6342 -> _x6342
  method set_language _x6342 = _language <- Some _x6342
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getNewlyReleasedPackages_args.country") | Some _x6343 -> _x6343
  method set_country _x6343 = _country <- Some _x6343
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNewlyReleasedPackages_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNewlyReleasedPackages_args (iprot : Protocol.t) =
  let _str6346 = new getNewlyReleasedPackages_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6347,_id6348) = iprot#readFieldBegin in
        if _t6347 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6348 with 
          | 2 -> (if _t6347 = Protocol.T_I64 then
              _str6346#set_start iprot#readI64
            else
              iprot#skip _t6347)
          | 3 -> (if _t6347 = Protocol.T_I32 then
              _str6346#set_size iprot#readI32
            else
              iprot#skip _t6347)
          | 4 -> (if _t6347 = Protocol.T_STRING then
              _str6346#set_language iprot#readString
            else
              iprot#skip _t6347)
          | 5 -> (if _t6347 = Protocol.T_STRING then
              _str6346#set_country iprot#readString
            else
              iprot#skip _t6347)
          | _ -> iprot#skip _t6347);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6346

class getNewlyReleasedPackages_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getNewlyReleasedPackages_result.success") | Some _x6349 -> _x6349
  method set_success _x6349 = _success <- Some _x6349
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getNewlyReleasedPackages_result.e") | Some _x6350 -> _x6350
  method set_e _x6350 = _e <- Some _x6350
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNewlyReleasedPackages_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNewlyReleasedPackages_result (iprot : Protocol.t) =
  let _str6353 = new getNewlyReleasedPackages_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6354,_id6355) = iprot#readFieldBegin in
        if _t6354 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6355 with 
          | 0 -> (if _t6354 = Protocol.T_STRUCT then
              _str6353#set_success (read_productList iprot)
            else
              iprot#skip _t6354)
          | 1 -> (if _t6354 = Protocol.T_STRUCT then
              _str6353#set_e (read_talkException iprot)
            else
              iprot#skip _t6354)
          | _ -> iprot#skip _t6354);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6353

class getPopularPackages_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getPopularPackages_args.start") | Some _x6356 -> _x6356
  method set_start _x6356 = _start <- Some _x6356
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getPopularPackages_args.size") | Some _x6357 -> _x6357
  method set_size _x6357 = _size <- Some _x6357
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPopularPackages_args.language") | Some _x6358 -> _x6358
  method set_language _x6358 = _language <- Some _x6358
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getPopularPackages_args.country") | Some _x6359 -> _x6359
  method set_country _x6359 = _country <- Some _x6359
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPopularPackages_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPopularPackages_args (iprot : Protocol.t) =
  let _str6362 = new getPopularPackages_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6363,_id6364) = iprot#readFieldBegin in
        if _t6363 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6364 with 
          | 2 -> (if _t6363 = Protocol.T_I64 then
              _str6362#set_start iprot#readI64
            else
              iprot#skip _t6363)
          | 3 -> (if _t6363 = Protocol.T_I32 then
              _str6362#set_size iprot#readI32
            else
              iprot#skip _t6363)
          | 4 -> (if _t6363 = Protocol.T_STRING then
              _str6362#set_language iprot#readString
            else
              iprot#skip _t6363)
          | 5 -> (if _t6363 = Protocol.T_STRING then
              _str6362#set_country iprot#readString
            else
              iprot#skip _t6363)
          | _ -> iprot#skip _t6363);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6362

class getPopularPackages_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPopularPackages_result.success") | Some _x6365 -> _x6365
  method set_success _x6365 = _success <- Some _x6365
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPopularPackages_result.e") | Some _x6366 -> _x6366
  method set_e _x6366 = _e <- Some _x6366
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPopularPackages_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPopularPackages_result (iprot : Protocol.t) =
  let _str6369 = new getPopularPackages_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6370,_id6371) = iprot#readFieldBegin in
        if _t6370 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6371 with 
          | 0 -> (if _t6370 = Protocol.T_STRUCT then
              _str6369#set_success (read_productList iprot)
            else
              iprot#skip _t6370)
          | 1 -> (if _t6370 = Protocol.T_STRUCT then
              _str6369#set_e (read_talkException iprot)
            else
              iprot#skip _t6370)
          | _ -> iprot#skip _t6370);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6369

class getPresentsReceived_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getPresentsReceived_args.start") | Some _x6372 -> _x6372
  method set_start _x6372 = _start <- Some _x6372
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getPresentsReceived_args.size") | Some _x6373 -> _x6373
  method set_size _x6373 = _size <- Some _x6373
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPresentsReceived_args.language") | Some _x6374 -> _x6374
  method set_language _x6374 = _language <- Some _x6374
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getPresentsReceived_args.country") | Some _x6375 -> _x6375
  method set_country _x6375 = _country <- Some _x6375
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPresentsReceived_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPresentsReceived_args (iprot : Protocol.t) =
  let _str6378 = new getPresentsReceived_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6379,_id6380) = iprot#readFieldBegin in
        if _t6379 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6380 with 
          | 2 -> (if _t6379 = Protocol.T_I64 then
              _str6378#set_start iprot#readI64
            else
              iprot#skip _t6379)
          | 3 -> (if _t6379 = Protocol.T_I32 then
              _str6378#set_size iprot#readI32
            else
              iprot#skip _t6379)
          | 4 -> (if _t6379 = Protocol.T_STRING then
              _str6378#set_language iprot#readString
            else
              iprot#skip _t6379)
          | 5 -> (if _t6379 = Protocol.T_STRING then
              _str6378#set_country iprot#readString
            else
              iprot#skip _t6379)
          | _ -> iprot#skip _t6379);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6378

class getPresentsReceived_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPresentsReceived_result.success") | Some _x6381 -> _x6381
  method set_success _x6381 = _success <- Some _x6381
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPresentsReceived_result.e") | Some _x6382 -> _x6382
  method set_e _x6382 = _e <- Some _x6382
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPresentsReceived_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPresentsReceived_result (iprot : Protocol.t) =
  let _str6385 = new getPresentsReceived_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6386,_id6387) = iprot#readFieldBegin in
        if _t6386 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6387 with 
          | 0 -> (if _t6386 = Protocol.T_STRUCT then
              _str6385#set_success (read_productList iprot)
            else
              iprot#skip _t6386)
          | 1 -> (if _t6386 = Protocol.T_STRUCT then
              _str6385#set_e (read_talkException iprot)
            else
              iprot#skip _t6386)
          | _ -> iprot#skip _t6386);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6385

class getPresentsSent_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getPresentsSent_args.start") | Some _x6388 -> _x6388
  method set_start _x6388 = _start <- Some _x6388
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getPresentsSent_args.size") | Some _x6389 -> _x6389
  method set_size _x6389 = _size <- Some _x6389
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPresentsSent_args.language") | Some _x6390 -> _x6390
  method set_language _x6390 = _language <- Some _x6390
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getPresentsSent_args.country") | Some _x6391 -> _x6391
  method set_country _x6391 = _country <- Some _x6391
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPresentsSent_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPresentsSent_args (iprot : Protocol.t) =
  let _str6394 = new getPresentsSent_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6395,_id6396) = iprot#readFieldBegin in
        if _t6395 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6396 with 
          | 2 -> (if _t6395 = Protocol.T_I64 then
              _str6394#set_start iprot#readI64
            else
              iprot#skip _t6395)
          | 3 -> (if _t6395 = Protocol.T_I32 then
              _str6394#set_size iprot#readI32
            else
              iprot#skip _t6395)
          | 4 -> (if _t6395 = Protocol.T_STRING then
              _str6394#set_language iprot#readString
            else
              iprot#skip _t6395)
          | 5 -> (if _t6395 = Protocol.T_STRING then
              _str6394#set_country iprot#readString
            else
              iprot#skip _t6395)
          | _ -> iprot#skip _t6395);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6394

class getPresentsSent_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPresentsSent_result.success") | Some _x6397 -> _x6397
  method set_success _x6397 = _success <- Some _x6397
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPresentsSent_result.e") | Some _x6398 -> _x6398
  method set_e _x6398 = _e <- Some _x6398
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPresentsSent_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPresentsSent_result (iprot : Protocol.t) =
  let _str6401 = new getPresentsSent_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6402,_id6403) = iprot#readFieldBegin in
        if _t6402 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6403 with 
          | 0 -> (if _t6402 = Protocol.T_STRUCT then
              _str6401#set_success (read_productList iprot)
            else
              iprot#skip _t6402)
          | 1 -> (if _t6402 = Protocol.T_STRUCT then
              _str6401#set_e (read_talkException iprot)
            else
              iprot#skip _t6402)
          | _ -> iprot#skip _t6402);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6401

class getProduct_args =
object (self)
  val mutable _packageID : Int64.t option = None
  method get_packageID = _packageID
  method grab_packageID = match _packageID with None->raise (Field_empty "getProduct_args.packageID") | Some _x6404 -> _x6404
  method set_packageID _x6404 = _packageID <- Some _x6404
  method unset_packageID = _packageID <- None
  method reset_packageID = _packageID <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getProduct_args.language") | Some _x6405 -> _x6405
  method set_language _x6405 = _language <- Some _x6405
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getProduct_args.country") | Some _x6406 -> _x6406
  method set_country _x6406 = _country <- Some _x6406
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProduct_args";
    (match _packageID with None -> () | Some _v -> 
      oprot#writeFieldBegin("packageID",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProduct_args (iprot : Protocol.t) =
  let _str6409 = new getProduct_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6410,_id6411) = iprot#readFieldBegin in
        if _t6410 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6411 with 
          | 2 -> (if _t6410 = Protocol.T_I64 then
              _str6409#set_packageID iprot#readI64
            else
              iprot#skip _t6410)
          | 3 -> (if _t6410 = Protocol.T_STRING then
              _str6409#set_language iprot#readString
            else
              iprot#skip _t6410)
          | 4 -> (if _t6410 = Protocol.T_STRING then
              _str6409#set_country iprot#readString
            else
              iprot#skip _t6410)
          | _ -> iprot#skip _t6410);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6409

class getProduct_result =
object (self)
  val mutable _success : product option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProduct_result.success") | Some _x6412 -> _x6412
  method set_success _x6412 = _success <- Some _x6412
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getProduct_result.e") | Some _x6413 -> _x6413
  method set_e _x6413 = _e <- Some _x6413
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProduct_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProduct_result (iprot : Protocol.t) =
  let _str6416 = new getProduct_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6417,_id6418) = iprot#readFieldBegin in
        if _t6417 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6418 with 
          | 0 -> (if _t6417 = Protocol.T_STRUCT then
              _str6416#set_success (read_product iprot)
            else
              iprot#skip _t6417)
          | 1 -> (if _t6417 = Protocol.T_STRUCT then
              _str6416#set_e (read_talkException iprot)
            else
              iprot#skip _t6417)
          | _ -> iprot#skip _t6417);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6416

class getProductList_args =
object (self)
  val mutable _productIdList : string list option = None
  method get_productIdList = _productIdList
  method grab_productIdList = match _productIdList with None->raise (Field_empty "getProductList_args.productIdList") | Some _x6419 -> _x6419
  method set_productIdList _x6419 = _productIdList <- Some _x6419
  method unset_productIdList = _productIdList <- None
  method reset_productIdList = _productIdList <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getProductList_args.language") | Some _x6420 -> _x6420
  method set_language _x6420 = _language <- Some _x6420
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getProductList_args.country") | Some _x6421 -> _x6421
  method set_country _x6421 = _country <- Some _x6421
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProductList_args";
    (match _productIdList with None -> () | Some _v -> 
      oprot#writeFieldBegin("productIdList",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6424 ->         oprot#writeString(_iter6424);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProductList_args (iprot : Protocol.t) =
  let _str6425 = new getProductList_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6426,_id6427) = iprot#readFieldBegin in
        if _t6426 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6427 with 
          | 2 -> (if _t6426 = Protocol.T_LIST then
              _str6425#set_productIdList 
                (let (_etype6431,_size6428) = iprot#readListBegin in
                  let _con6432 = (Array.to_list (Array.init _size6428 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6432)
            else
              iprot#skip _t6426)
          | 3 -> (if _t6426 = Protocol.T_STRING then
              _str6425#set_language iprot#readString
            else
              iprot#skip _t6426)
          | 4 -> (if _t6426 = Protocol.T_STRING then
              _str6425#set_country iprot#readString
            else
              iprot#skip _t6426)
          | _ -> iprot#skip _t6426);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6425

class getProductList_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProductList_result.success") | Some _x6433 -> _x6433
  method set_success _x6433 = _success <- Some _x6433
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getProductList_result.e") | Some _x6434 -> _x6434
  method set_e _x6434 = _e <- Some _x6434
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProductList_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProductList_result (iprot : Protocol.t) =
  let _str6437 = new getProductList_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6438,_id6439) = iprot#readFieldBegin in
        if _t6438 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6439 with 
          | 0 -> (if _t6438 = Protocol.T_STRUCT then
              _str6437#set_success (read_productList iprot)
            else
              iprot#skip _t6438)
          | 1 -> (if _t6438 = Protocol.T_STRUCT then
              _str6437#set_e (read_talkException iprot)
            else
              iprot#skip _t6438)
          | _ -> iprot#skip _t6438);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6437

class getProductListWithCarrier_args =
object (self)
  val mutable _productIdList : string list option = None
  method get_productIdList = _productIdList
  method grab_productIdList = match _productIdList with None->raise (Field_empty "getProductListWithCarrier_args.productIdList") | Some _x6440 -> _x6440
  method set_productIdList _x6440 = _productIdList <- Some _x6440
  method unset_productIdList = _productIdList <- None
  method reset_productIdList = _productIdList <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getProductListWithCarrier_args.language") | Some _x6441 -> _x6441
  method set_language _x6441 = _language <- Some _x6441
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getProductListWithCarrier_args.country") | Some _x6442 -> _x6442
  method set_country _x6442 = _country <- Some _x6442
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _carrierCode : string option = None
  method get_carrierCode = _carrierCode
  method grab_carrierCode = match _carrierCode with None->raise (Field_empty "getProductListWithCarrier_args.carrierCode") | Some _x6443 -> _x6443
  method set_carrierCode _x6443 = _carrierCode <- Some _x6443
  method unset_carrierCode = _carrierCode <- None
  method reset_carrierCode = _carrierCode <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProductListWithCarrier_args";
    (match _productIdList with None -> () | Some _v -> 
      oprot#writeFieldBegin("productIdList",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6446 ->         oprot#writeString(_iter6446);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _carrierCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("carrierCode",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProductListWithCarrier_args (iprot : Protocol.t) =
  let _str6447 = new getProductListWithCarrier_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6448,_id6449) = iprot#readFieldBegin in
        if _t6448 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6449 with 
          | 2 -> (if _t6448 = Protocol.T_LIST then
              _str6447#set_productIdList 
                (let (_etype6453,_size6450) = iprot#readListBegin in
                  let _con6454 = (Array.to_list (Array.init _size6450 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6454)
            else
              iprot#skip _t6448)
          | 3 -> (if _t6448 = Protocol.T_STRING then
              _str6447#set_language iprot#readString
            else
              iprot#skip _t6448)
          | 4 -> (if _t6448 = Protocol.T_STRING then
              _str6447#set_country iprot#readString
            else
              iprot#skip _t6448)
          | 5 -> (if _t6448 = Protocol.T_STRING then
              _str6447#set_carrierCode iprot#readString
            else
              iprot#skip _t6448)
          | _ -> iprot#skip _t6448);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6447

class getProductListWithCarrier_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProductListWithCarrier_result.success") | Some _x6455 -> _x6455
  method set_success _x6455 = _success <- Some _x6455
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getProductListWithCarrier_result.e") | Some _x6456 -> _x6456
  method set_e _x6456 = _e <- Some _x6456
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProductListWithCarrier_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProductListWithCarrier_result (iprot : Protocol.t) =
  let _str6459 = new getProductListWithCarrier_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6460,_id6461) = iprot#readFieldBegin in
        if _t6460 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6461 with 
          | 0 -> (if _t6460 = Protocol.T_STRUCT then
              _str6459#set_success (read_productList iprot)
            else
              iprot#skip _t6460)
          | 1 -> (if _t6460 = Protocol.T_STRUCT then
              _str6459#set_e (read_talkException iprot)
            else
              iprot#skip _t6460)
          | _ -> iprot#skip _t6460);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6459

class getProductWithCarrier_args =
object (self)
  val mutable _packageID : Int64.t option = None
  method get_packageID = _packageID
  method grab_packageID = match _packageID with None->raise (Field_empty "getProductWithCarrier_args.packageID") | Some _x6462 -> _x6462
  method set_packageID _x6462 = _packageID <- Some _x6462
  method unset_packageID = _packageID <- None
  method reset_packageID = _packageID <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getProductWithCarrier_args.language") | Some _x6463 -> _x6463
  method set_language _x6463 = _language <- Some _x6463
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getProductWithCarrier_args.country") | Some _x6464 -> _x6464
  method set_country _x6464 = _country <- Some _x6464
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _carrierCode : string option = None
  method get_carrierCode = _carrierCode
  method grab_carrierCode = match _carrierCode with None->raise (Field_empty "getProductWithCarrier_args.carrierCode") | Some _x6465 -> _x6465
  method set_carrierCode _x6465 = _carrierCode <- Some _x6465
  method unset_carrierCode = _carrierCode <- None
  method reset_carrierCode = _carrierCode <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProductWithCarrier_args";
    (match _packageID with None -> () | Some _v -> 
      oprot#writeFieldBegin("packageID",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _carrierCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("carrierCode",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProductWithCarrier_args (iprot : Protocol.t) =
  let _str6468 = new getProductWithCarrier_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6469,_id6470) = iprot#readFieldBegin in
        if _t6469 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6470 with 
          | 2 -> (if _t6469 = Protocol.T_I64 then
              _str6468#set_packageID iprot#readI64
            else
              iprot#skip _t6469)
          | 3 -> (if _t6469 = Protocol.T_STRING then
              _str6468#set_language iprot#readString
            else
              iprot#skip _t6469)
          | 4 -> (if _t6469 = Protocol.T_STRING then
              _str6468#set_country iprot#readString
            else
              iprot#skip _t6469)
          | 5 -> (if _t6469 = Protocol.T_STRING then
              _str6468#set_carrierCode iprot#readString
            else
              iprot#skip _t6469)
          | _ -> iprot#skip _t6469);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6468

class getProductWithCarrier_result =
object (self)
  val mutable _success : product option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProductWithCarrier_result.success") | Some _x6471 -> _x6471
  method set_success _x6471 = _success <- Some _x6471
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getProductWithCarrier_result.e") | Some _x6472 -> _x6472
  method set_e _x6472 = _e <- Some _x6472
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProductWithCarrier_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProductWithCarrier_result (iprot : Protocol.t) =
  let _str6475 = new getProductWithCarrier_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6476,_id6477) = iprot#readFieldBegin in
        if _t6476 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6477 with 
          | 0 -> (if _t6476 = Protocol.T_STRUCT then
              _str6475#set_success (read_product iprot)
            else
              iprot#skip _t6476)
          | 1 -> (if _t6476 = Protocol.T_STRUCT then
              _str6475#set_e (read_talkException iprot)
            else
              iprot#skip _t6476)
          | _ -> iprot#skip _t6476);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6475

class getPurchaseHistory_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getPurchaseHistory_args.start") | Some _x6478 -> _x6478
  method set_start _x6478 = _start <- Some _x6478
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getPurchaseHistory_args.size") | Some _x6479 -> _x6479
  method set_size _x6479 = _size <- Some _x6479
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPurchaseHistory_args.language") | Some _x6480 -> _x6480
  method set_language _x6480 = _language <- Some _x6480
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getPurchaseHistory_args.country") | Some _x6481 -> _x6481
  method set_country _x6481 = _country <- Some _x6481
  method unset_country = _country <- None
  method reset_country = _country <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPurchaseHistory_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPurchaseHistory_args (iprot : Protocol.t) =
  let _str6484 = new getPurchaseHistory_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6485,_id6486) = iprot#readFieldBegin in
        if _t6485 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6486 with 
          | 2 -> (if _t6485 = Protocol.T_I64 then
              _str6484#set_start iprot#readI64
            else
              iprot#skip _t6485)
          | 3 -> (if _t6485 = Protocol.T_I32 then
              _str6484#set_size iprot#readI32
            else
              iprot#skip _t6485)
          | 4 -> (if _t6485 = Protocol.T_STRING then
              _str6484#set_language iprot#readString
            else
              iprot#skip _t6485)
          | 5 -> (if _t6485 = Protocol.T_STRING then
              _str6484#set_country iprot#readString
            else
              iprot#skip _t6485)
          | _ -> iprot#skip _t6485);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6484

class getPurchaseHistory_result =
object (self)
  val mutable _success : productList option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPurchaseHistory_result.success") | Some _x6487 -> _x6487
  method set_success _x6487 = _success <- Some _x6487
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPurchaseHistory_result.e") | Some _x6488 -> _x6488
  method set_e _x6488 = _e <- Some _x6488
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPurchaseHistory_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPurchaseHistory_result (iprot : Protocol.t) =
  let _str6491 = new getPurchaseHistory_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6492,_id6493) = iprot#readFieldBegin in
        if _t6492 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6493 with 
          | 0 -> (if _t6492 = Protocol.T_STRUCT then
              _str6491#set_success (read_productList iprot)
            else
              iprot#skip _t6492)
          | 1 -> (if _t6492 = Protocol.T_STRUCT then
              _str6491#set_e (read_talkException iprot)
            else
              iprot#skip _t6492)
          | _ -> iprot#skip _t6492);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6491

class getTotalBalance_args =
object (self)
  val mutable _appStoreCode : PaymentType.t option = None
  method get_appStoreCode = _appStoreCode
  method grab_appStoreCode = match _appStoreCode with None->raise (Field_empty "getTotalBalance_args.appStoreCode") | Some _x6494 -> _x6494
  method set_appStoreCode _x6494 = _appStoreCode <- Some _x6494
  method unset_appStoreCode = _appStoreCode <- None
  method reset_appStoreCode = _appStoreCode <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getTotalBalance_args";
    (match _appStoreCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("appStoreCode",Protocol.T_I32,2);
      oprot#writeI32(PaymentType.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getTotalBalance_args (iprot : Protocol.t) =
  let _str6497 = new getTotalBalance_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6498,_id6499) = iprot#readFieldBegin in
        if _t6498 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6499 with 
          | 2 -> (if _t6498 = Protocol.T_I32 then
              _str6497#set_appStoreCode (PaymentType.of_i iprot#readI32)
            else
              iprot#skip _t6498)
          | _ -> iprot#skip _t6498);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6497

class getTotalBalance_result =
object (self)
  val mutable _success : coin option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getTotalBalance_result.success") | Some _x6500 -> _x6500
  method set_success _x6500 = _success <- Some _x6500
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getTotalBalance_result.e") | Some _x6501 -> _x6501
  method set_e _x6501 = _e <- Some _x6501
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getTotalBalance_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getTotalBalance_result (iprot : Protocol.t) =
  let _str6504 = new getTotalBalance_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6505,_id6506) = iprot#readFieldBegin in
        if _t6505 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6506 with 
          | 0 -> (if _t6505 = Protocol.T_STRUCT then
              _str6504#set_success (read_coin iprot)
            else
              iprot#skip _t6505)
          | 1 -> (if _t6505 = Protocol.T_STRUCT then
              _str6504#set_e (read_talkException iprot)
            else
              iprot#skip _t6505)
          | _ -> iprot#skip _t6505);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6504

class notifyDownloaded_args =
object (self)
  val mutable _packageId : Int64.t option = None
  method get_packageId = _packageId
  method grab_packageId = match _packageId with None->raise (Field_empty "notifyDownloaded_args.packageId") | Some _x6507 -> _x6507
  method set_packageId _x6507 = _packageId <- Some _x6507
  method unset_packageId = _packageId <- None
  method reset_packageId = _packageId <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "notifyDownloaded_args.language") | Some _x6508 -> _x6508
  method set_language _x6508 = _language <- Some _x6508
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyDownloaded_args";
    (match _packageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("packageId",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyDownloaded_args (iprot : Protocol.t) =
  let _str6511 = new notifyDownloaded_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6512,_id6513) = iprot#readFieldBegin in
        if _t6512 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6513 with 
          | 2 -> (if _t6512 = Protocol.T_I64 then
              _str6511#set_packageId iprot#readI64
            else
              iprot#skip _t6512)
          | 3 -> (if _t6512 = Protocol.T_STRING then
              _str6511#set_language iprot#readString
            else
              iprot#skip _t6512)
          | _ -> iprot#skip _t6512);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6511

class notifyDownloaded_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "notifyDownloaded_result.success") | Some _x6514 -> _x6514
  method set_success _x6514 = _success <- Some _x6514
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyDownloaded_result.e") | Some _x6515 -> _x6515
  method set_e _x6515 = _e <- Some _x6515
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyDownloaded_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyDownloaded_result (iprot : Protocol.t) =
  let _str6518 = new notifyDownloaded_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6519,_id6520) = iprot#readFieldBegin in
        if _t6519 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6520 with 
          | 0 -> (if _t6519 = Protocol.T_I64 then
              _str6518#set_success iprot#readI64
            else
              iprot#skip _t6519)
          | 1 -> (if _t6519 = Protocol.T_STRUCT then
              _str6518#set_e (read_talkException iprot)
            else
              iprot#skip _t6519)
          | _ -> iprot#skip _t6519);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6518

class reserveCoinPurchase_args =
object (self)
  val mutable _request : coinPurchaseReservation option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "reserveCoinPurchase_args.request") | Some _x6521 -> _x6521
  method set_request _x6521 = _request <- Some _x6521
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reserveCoinPurchase_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reserveCoinPurchase_args (iprot : Protocol.t) =
  let _str6524 = new reserveCoinPurchase_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6525,_id6526) = iprot#readFieldBegin in
        if _t6525 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6526 with 
          | 2 -> (if _t6525 = Protocol.T_STRUCT then
              _str6524#set_request (read_coinPurchaseReservation iprot)
            else
              iprot#skip _t6525)
          | _ -> iprot#skip _t6525);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6524

class reserveCoinPurchase_result =
object (self)
  val mutable _success : paymentReservationResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reserveCoinPurchase_result.success") | Some _x6527 -> _x6527
  method set_success _x6527 = _success <- Some _x6527
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reserveCoinPurchase_result.e") | Some _x6528 -> _x6528
  method set_e _x6528 = _e <- Some _x6528
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reserveCoinPurchase_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reserveCoinPurchase_result (iprot : Protocol.t) =
  let _str6531 = new reserveCoinPurchase_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6532,_id6533) = iprot#readFieldBegin in
        if _t6532 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6533 with 
          | 0 -> (if _t6532 = Protocol.T_STRUCT then
              _str6531#set_success (read_paymentReservationResult iprot)
            else
              iprot#skip _t6532)
          | 1 -> (if _t6532 = Protocol.T_STRUCT then
              _str6531#set_e (read_talkException iprot)
            else
              iprot#skip _t6532)
          | _ -> iprot#skip _t6532);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6531

class reservePayment_args =
object (self)
  val mutable _paymentReservation : paymentReservation option = None
  method get_paymentReservation = _paymentReservation
  method grab_paymentReservation = match _paymentReservation with None->raise (Field_empty "reservePayment_args.paymentReservation") | Some _x6534 -> _x6534
  method set_paymentReservation _x6534 = _paymentReservation <- Some _x6534
  method unset_paymentReservation = _paymentReservation <- None
  method reset_paymentReservation = _paymentReservation <- None

  method copy =
      let _new = Oo.copy self in
      if _paymentReservation <> None then
        _new#set_paymentReservation self#grab_paymentReservation#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reservePayment_args";
    (match _paymentReservation with None -> () | Some _v -> 
      oprot#writeFieldBegin("paymentReservation",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reservePayment_args (iprot : Protocol.t) =
  let _str6537 = new reservePayment_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6538,_id6539) = iprot#readFieldBegin in
        if _t6538 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6539 with 
          | 2 -> (if _t6538 = Protocol.T_STRUCT then
              _str6537#set_paymentReservation (read_paymentReservation iprot)
            else
              iprot#skip _t6538)
          | _ -> iprot#skip _t6538);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6537

class reservePayment_result =
object (self)
  val mutable _success : paymentReservationResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reservePayment_result.success") | Some _x6540 -> _x6540
  method set_success _x6540 = _success <- Some _x6540
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reservePayment_result.e") | Some _x6541 -> _x6541
  method set_e _x6541 = _e <- Some _x6541
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reservePayment_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reservePayment_result (iprot : Protocol.t) =
  let _str6544 = new reservePayment_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6545,_id6546) = iprot#readFieldBegin in
        if _t6545 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6546 with 
          | 0 -> (if _t6545 = Protocol.T_STRUCT then
              _str6544#set_success (read_paymentReservationResult iprot)
            else
              iprot#skip _t6545)
          | 1 -> (if _t6545 = Protocol.T_STRUCT then
              _str6544#set_e (read_talkException iprot)
            else
              iprot#skip _t6545)
          | _ -> iprot#skip _t6545);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6544

class virtual iface =
object (self)
  method virtual buyCoinProduct : paymentReservation option -> unit
  method virtual buyFreeProduct : string option -> string option -> Int32.t option -> string option -> string option -> Int64.t option -> unit
  method virtual buyMustbuyProduct : string option -> string option -> Int32.t option -> string option -> string option -> Int64.t option -> string option -> unit
  method virtual checkCanReceivePresent : string option -> Int64.t option -> string option -> string option -> unit
  method virtual getActivePurchases : Int64.t option -> Int32.t option -> string option -> string option -> productList
  method virtual getActivePurchaseVersions : Int64.t option -> Int32.t option -> string option -> string option -> productSimpleList
  method virtual getCoinProducts : PaymentType.t option -> string option -> string option -> coinProductItem list
  method virtual getCoinProductsByPgCode : PaymentType.t option -> PaymentPgType.t option -> string option -> string option -> coinProductItem list
  method virtual getCoinPurchaseHistory : coinHistoryCondition option -> coinHistoryResult
  method virtual getCoinUseAndRefundHistory : coinHistoryCondition option -> coinHistoryResult
  method virtual getDownloads : Int64.t option -> Int32.t option -> string option -> string option -> productList
  method virtual getEventPackages : Int64.t option -> Int32.t option -> string option -> string option -> productList
  method virtual getNewlyReleasedPackages : Int64.t option -> Int32.t option -> string option -> string option -> productList
  method virtual getPopularPackages : Int64.t option -> Int32.t option -> string option -> string option -> productList
  method virtual getPresentsReceived : Int64.t option -> Int32.t option -> string option -> string option -> productList
  method virtual getPresentsSent : Int64.t option -> Int32.t option -> string option -> string option -> productList
  method virtual getProduct : Int64.t option -> string option -> string option -> product
  method virtual getProductList : string list option -> string option -> string option -> productList
  method virtual getProductListWithCarrier : string list option -> string option -> string option -> string option -> productList
  method virtual getProductWithCarrier : Int64.t option -> string option -> string option -> string option -> product
  method virtual getPurchaseHistory : Int64.t option -> Int32.t option -> string option -> string option -> productList
  method virtual getTotalBalance : PaymentType.t option -> coin
  method virtual notifyDownloaded : Int64.t option -> string option -> Int64.t
  method virtual reserveCoinPurchase : coinPurchaseReservation option -> paymentReservationResult
  method virtual reservePayment : paymentReservation option -> paymentReservationResult
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method buyCoinProduct paymentReservation = 
    self#send_buyCoinProduct paymentReservation;
    self#recv_buyCoinProduct
  method private send_buyCoinProduct paymentReservation = 
    oprot#writeMessageBegin ("buyCoinProduct", Protocol.CALL, seqid);
    let args = new buyCoinProduct_args in
      args#set_paymentReservation paymentReservation;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_buyCoinProduct  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_buyCoinProduct_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method buyFreeProduct receiverMid productId messageTemplate language country packageId = 
    self#send_buyFreeProduct receiverMid productId messageTemplate language country packageId;
    self#recv_buyFreeProduct
  method private send_buyFreeProduct receiverMid productId messageTemplate language country packageId = 
    oprot#writeMessageBegin ("buyFreeProduct", Protocol.CALL, seqid);
    let args = new buyFreeProduct_args in
      args#set_receiverMid receiverMid;
      args#set_productId productId;
      args#set_messageTemplate messageTemplate;
      args#set_language language;
      args#set_country country;
      args#set_packageId packageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_buyFreeProduct  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_buyFreeProduct_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method buyMustbuyProduct receiverMid productId messageTemplate language country packageId serialNumber = 
    self#send_buyMustbuyProduct receiverMid productId messageTemplate language country packageId serialNumber;
    self#recv_buyMustbuyProduct
  method private send_buyMustbuyProduct receiverMid productId messageTemplate language country packageId serialNumber = 
    oprot#writeMessageBegin ("buyMustbuyProduct", Protocol.CALL, seqid);
    let args = new buyMustbuyProduct_args in
      args#set_receiverMid receiverMid;
      args#set_productId productId;
      args#set_messageTemplate messageTemplate;
      args#set_language language;
      args#set_country country;
      args#set_packageId packageId;
      args#set_serialNumber serialNumber;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_buyMustbuyProduct  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_buyMustbuyProduct_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method checkCanReceivePresent recipientMid packageId language country = 
    self#send_checkCanReceivePresent recipientMid packageId language country;
    self#recv_checkCanReceivePresent
  method private send_checkCanReceivePresent recipientMid packageId language country = 
    oprot#writeMessageBegin ("checkCanReceivePresent", Protocol.CALL, seqid);
    let args = new checkCanReceivePresent_args in
      args#set_recipientMid recipientMid;
      args#set_packageId packageId;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_checkCanReceivePresent  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_checkCanReceivePresent_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method getActivePurchases start size language country = 
    self#send_getActivePurchases start size language country;
    self#recv_getActivePurchases
  method private send_getActivePurchases start size language country = 
    oprot#writeMessageBegin ("getActivePurchases", Protocol.CALL, seqid);
    let args = new getActivePurchases_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getActivePurchases  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getActivePurchases_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getActivePurchases failed: unknown result")))
  method getActivePurchaseVersions start size language country = 
    self#send_getActivePurchaseVersions start size language country;
    self#recv_getActivePurchaseVersions
  method private send_getActivePurchaseVersions start size language country = 
    oprot#writeMessageBegin ("getActivePurchaseVersions", Protocol.CALL, seqid);
    let args = new getActivePurchaseVersions_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getActivePurchaseVersions  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getActivePurchaseVersions_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getActivePurchaseVersions failed: unknown result")))
  method getCoinProducts appStoreCode country language = 
    self#send_getCoinProducts appStoreCode country language;
    self#recv_getCoinProducts
  method private send_getCoinProducts appStoreCode country language = 
    oprot#writeMessageBegin ("getCoinProducts", Protocol.CALL, seqid);
    let args = new getCoinProducts_args in
      args#set_appStoreCode appStoreCode;
      args#set_country country;
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCoinProducts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCoinProducts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCoinProducts failed: unknown result")))
  method getCoinProductsByPgCode appStoreCode pgCode country language = 
    self#send_getCoinProductsByPgCode appStoreCode pgCode country language;
    self#recv_getCoinProductsByPgCode
  method private send_getCoinProductsByPgCode appStoreCode pgCode country language = 
    oprot#writeMessageBegin ("getCoinProductsByPgCode", Protocol.CALL, seqid);
    let args = new getCoinProductsByPgCode_args in
      args#set_appStoreCode appStoreCode;
      args#set_pgCode pgCode;
      args#set_country country;
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCoinProductsByPgCode  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCoinProductsByPgCode_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCoinProductsByPgCode failed: unknown result")))
  method getCoinPurchaseHistory request = 
    self#send_getCoinPurchaseHistory request;
    self#recv_getCoinPurchaseHistory
  method private send_getCoinPurchaseHistory request = 
    oprot#writeMessageBegin ("getCoinPurchaseHistory", Protocol.CALL, seqid);
    let args = new getCoinPurchaseHistory_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCoinPurchaseHistory  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCoinPurchaseHistory_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCoinPurchaseHistory failed: unknown result")))
  method getCoinUseAndRefundHistory request = 
    self#send_getCoinUseAndRefundHistory request;
    self#recv_getCoinUseAndRefundHistory
  method private send_getCoinUseAndRefundHistory request = 
    oprot#writeMessageBegin ("getCoinUseAndRefundHistory", Protocol.CALL, seqid);
    let args = new getCoinUseAndRefundHistory_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCoinUseAndRefundHistory  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCoinUseAndRefundHistory_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCoinUseAndRefundHistory failed: unknown result")))
  method getDownloads start size language country = 
    self#send_getDownloads start size language country;
    self#recv_getDownloads
  method private send_getDownloads start size language country = 
    oprot#writeMessageBegin ("getDownloads", Protocol.CALL, seqid);
    let args = new getDownloads_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getDownloads  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getDownloads_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getDownloads failed: unknown result")))
  method getEventPackages start size language country = 
    self#send_getEventPackages start size language country;
    self#recv_getEventPackages
  method private send_getEventPackages start size language country = 
    oprot#writeMessageBegin ("getEventPackages", Protocol.CALL, seqid);
    let args = new getEventPackages_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getEventPackages  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getEventPackages_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getEventPackages failed: unknown result")))
  method getNewlyReleasedPackages start size language country = 
    self#send_getNewlyReleasedPackages start size language country;
    self#recv_getNewlyReleasedPackages
  method private send_getNewlyReleasedPackages start size language country = 
    oprot#writeMessageBegin ("getNewlyReleasedPackages", Protocol.CALL, seqid);
    let args = new getNewlyReleasedPackages_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getNewlyReleasedPackages  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getNewlyReleasedPackages_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getNewlyReleasedPackages failed: unknown result")))
  method getPopularPackages start size language country = 
    self#send_getPopularPackages start size language country;
    self#recv_getPopularPackages
  method private send_getPopularPackages start size language country = 
    oprot#writeMessageBegin ("getPopularPackages", Protocol.CALL, seqid);
    let args = new getPopularPackages_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPopularPackages  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPopularPackages_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPopularPackages failed: unknown result")))
  method getPresentsReceived start size language country = 
    self#send_getPresentsReceived start size language country;
    self#recv_getPresentsReceived
  method private send_getPresentsReceived start size language country = 
    oprot#writeMessageBegin ("getPresentsReceived", Protocol.CALL, seqid);
    let args = new getPresentsReceived_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPresentsReceived  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPresentsReceived_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPresentsReceived failed: unknown result")))
  method getPresentsSent start size language country = 
    self#send_getPresentsSent start size language country;
    self#recv_getPresentsSent
  method private send_getPresentsSent start size language country = 
    oprot#writeMessageBegin ("getPresentsSent", Protocol.CALL, seqid);
    let args = new getPresentsSent_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPresentsSent  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPresentsSent_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPresentsSent failed: unknown result")))
  method getProduct packageID language country = 
    self#send_getProduct packageID language country;
    self#recv_getProduct
  method private send_getProduct packageID language country = 
    oprot#writeMessageBegin ("getProduct", Protocol.CALL, seqid);
    let args = new getProduct_args in
      args#set_packageID packageID;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProduct  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProduct_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProduct failed: unknown result")))
  method getProductList productIdList language country = 
    self#send_getProductList productIdList language country;
    self#recv_getProductList
  method private send_getProductList productIdList language country = 
    oprot#writeMessageBegin ("getProductList", Protocol.CALL, seqid);
    let args = new getProductList_args in
      args#set_productIdList productIdList;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProductList  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProductList_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProductList failed: unknown result")))
  method getProductListWithCarrier productIdList language country carrierCode = 
    self#send_getProductListWithCarrier productIdList language country carrierCode;
    self#recv_getProductListWithCarrier
  method private send_getProductListWithCarrier productIdList language country carrierCode = 
    oprot#writeMessageBegin ("getProductListWithCarrier", Protocol.CALL, seqid);
    let args = new getProductListWithCarrier_args in
      args#set_productIdList productIdList;
      args#set_language language;
      args#set_country country;
      args#set_carrierCode carrierCode;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProductListWithCarrier  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProductListWithCarrier_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProductListWithCarrier failed: unknown result")))
  method getProductWithCarrier packageID language country carrierCode = 
    self#send_getProductWithCarrier packageID language country carrierCode;
    self#recv_getProductWithCarrier
  method private send_getProductWithCarrier packageID language country carrierCode = 
    oprot#writeMessageBegin ("getProductWithCarrier", Protocol.CALL, seqid);
    let args = new getProductWithCarrier_args in
      args#set_packageID packageID;
      args#set_language language;
      args#set_country country;
      args#set_carrierCode carrierCode;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProductWithCarrier  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProductWithCarrier_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProductWithCarrier failed: unknown result")))
  method getPurchaseHistory start size language country = 
    self#send_getPurchaseHistory start size language country;
    self#recv_getPurchaseHistory
  method private send_getPurchaseHistory start size language country = 
    oprot#writeMessageBegin ("getPurchaseHistory", Protocol.CALL, seqid);
    let args = new getPurchaseHistory_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#set_country country;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPurchaseHistory  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPurchaseHistory_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPurchaseHistory failed: unknown result")))
  method getTotalBalance appStoreCode = 
    self#send_getTotalBalance appStoreCode;
    self#recv_getTotalBalance
  method private send_getTotalBalance appStoreCode = 
    oprot#writeMessageBegin ("getTotalBalance", Protocol.CALL, seqid);
    let args = new getTotalBalance_args in
      args#set_appStoreCode appStoreCode;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getTotalBalance  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getTotalBalance_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getTotalBalance failed: unknown result")))
  method notifyDownloaded packageId language = 
    self#send_notifyDownloaded packageId language;
    self#recv_notifyDownloaded
  method private send_notifyDownloaded packageId language = 
    oprot#writeMessageBegin ("notifyDownloaded", Protocol.CALL, seqid);
    let args = new notifyDownloaded_args in
      args#set_packageId packageId;
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyDownloaded  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyDownloaded_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "notifyDownloaded failed: unknown result")))
  method reserveCoinPurchase request = 
    self#send_reserveCoinPurchase request;
    self#recv_reserveCoinPurchase
  method private send_reserveCoinPurchase request = 
    oprot#writeMessageBegin ("reserveCoinPurchase", Protocol.CALL, seqid);
    let args = new reserveCoinPurchase_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reserveCoinPurchase  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reserveCoinPurchase_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reserveCoinPurchase failed: unknown result")))
  method reservePayment paymentReservation = 
    self#send_reservePayment paymentReservation;
    self#recv_reservePayment
  method private send_reservePayment paymentReservation = 
    oprot#writeMessageBegin ("reservePayment", Protocol.CALL, seqid);
    let args = new reservePayment_args in
      args#set_paymentReservation paymentReservation;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reservePayment  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reservePayment_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reservePayment failed: unknown result")))
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 25
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_buyCoinProduct (seqid, iprot, oprot) =
    let args = read_buyCoinProduct_args iprot in
      iprot#readMessageEnd;
      let result = new buyCoinProduct_result in
        (try
          (handler#buyCoinProduct args#get_paymentReservation);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("buyCoinProduct", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_buyFreeProduct (seqid, iprot, oprot) =
    let args = read_buyFreeProduct_args iprot in
      iprot#readMessageEnd;
      let result = new buyFreeProduct_result in
        (try
          (handler#buyFreeProduct args#get_receiverMid args#get_productId args#get_messageTemplate args#get_language args#get_country args#get_packageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("buyFreeProduct", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_buyMustbuyProduct (seqid, iprot, oprot) =
    let args = read_buyMustbuyProduct_args iprot in
      iprot#readMessageEnd;
      let result = new buyMustbuyProduct_result in
        (try
          (handler#buyMustbuyProduct args#get_receiverMid args#get_productId args#get_messageTemplate args#get_language args#get_country args#get_packageId args#get_serialNumber);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("buyMustbuyProduct", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_checkCanReceivePresent (seqid, iprot, oprot) =
    let args = read_checkCanReceivePresent_args iprot in
      iprot#readMessageEnd;
      let result = new checkCanReceivePresent_result in
        (try
          (handler#checkCanReceivePresent args#get_recipientMid args#get_packageId args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("checkCanReceivePresent", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getActivePurchases (seqid, iprot, oprot) =
    let args = read_getActivePurchases_args iprot in
      iprot#readMessageEnd;
      let result = new getActivePurchases_result in
        (try
          result#set_success (handler#getActivePurchases args#get_start args#get_size args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getActivePurchases", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getActivePurchaseVersions (seqid, iprot, oprot) =
    let args = read_getActivePurchaseVersions_args iprot in
      iprot#readMessageEnd;
      let result = new getActivePurchaseVersions_result in
        (try
          result#set_success (handler#getActivePurchaseVersions args#get_start args#get_size args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getActivePurchaseVersions", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCoinProducts (seqid, iprot, oprot) =
    let args = read_getCoinProducts_args iprot in
      iprot#readMessageEnd;
      let result = new getCoinProducts_result in
        (try
          result#set_success (handler#getCoinProducts args#get_appStoreCode args#get_country args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCoinProducts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCoinProductsByPgCode (seqid, iprot, oprot) =
    let args = read_getCoinProductsByPgCode_args iprot in
      iprot#readMessageEnd;
      let result = new getCoinProductsByPgCode_result in
        (try
          result#set_success (handler#getCoinProductsByPgCode args#get_appStoreCode args#get_pgCode args#get_country args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCoinProductsByPgCode", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCoinPurchaseHistory (seqid, iprot, oprot) =
    let args = read_getCoinPurchaseHistory_args iprot in
      iprot#readMessageEnd;
      let result = new getCoinPurchaseHistory_result in
        (try
          result#set_success (handler#getCoinPurchaseHistory args#get_request);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCoinPurchaseHistory", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCoinUseAndRefundHistory (seqid, iprot, oprot) =
    let args = read_getCoinUseAndRefundHistory_args iprot in
      iprot#readMessageEnd;
      let result = new getCoinUseAndRefundHistory_result in
        (try
          result#set_success (handler#getCoinUseAndRefundHistory args#get_request);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCoinUseAndRefundHistory", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getDownloads (seqid, iprot, oprot) =
    let args = read_getDownloads_args iprot in
      iprot#readMessageEnd;
      let result = new getDownloads_result in
        (try
          result#set_success (handler#getDownloads args#get_start args#get_size args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getDownloads", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getEventPackages (seqid, iprot, oprot) =
    let args = read_getEventPackages_args iprot in
      iprot#readMessageEnd;
      let result = new getEventPackages_result in
        (try
          result#set_success (handler#getEventPackages args#get_start args#get_size args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getEventPackages", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getNewlyReleasedPackages (seqid, iprot, oprot) =
    let args = read_getNewlyReleasedPackages_args iprot in
      iprot#readMessageEnd;
      let result = new getNewlyReleasedPackages_result in
        (try
          result#set_success (handler#getNewlyReleasedPackages args#get_start args#get_size args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getNewlyReleasedPackages", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPopularPackages (seqid, iprot, oprot) =
    let args = read_getPopularPackages_args iprot in
      iprot#readMessageEnd;
      let result = new getPopularPackages_result in
        (try
          result#set_success (handler#getPopularPackages args#get_start args#get_size args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPopularPackages", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPresentsReceived (seqid, iprot, oprot) =
    let args = read_getPresentsReceived_args iprot in
      iprot#readMessageEnd;
      let result = new getPresentsReceived_result in
        (try
          result#set_success (handler#getPresentsReceived args#get_start args#get_size args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPresentsReceived", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPresentsSent (seqid, iprot, oprot) =
    let args = read_getPresentsSent_args iprot in
      iprot#readMessageEnd;
      let result = new getPresentsSent_result in
        (try
          result#set_success (handler#getPresentsSent args#get_start args#get_size args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPresentsSent", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProduct (seqid, iprot, oprot) =
    let args = read_getProduct_args iprot in
      iprot#readMessageEnd;
      let result = new getProduct_result in
        (try
          result#set_success (handler#getProduct args#get_packageID args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getProduct", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProductList (seqid, iprot, oprot) =
    let args = read_getProductList_args iprot in
      iprot#readMessageEnd;
      let result = new getProductList_result in
        (try
          result#set_success (handler#getProductList args#get_productIdList args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getProductList", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProductListWithCarrier (seqid, iprot, oprot) =
    let args = read_getProductListWithCarrier_args iprot in
      iprot#readMessageEnd;
      let result = new getProductListWithCarrier_result in
        (try
          result#set_success (handler#getProductListWithCarrier args#get_productIdList args#get_language args#get_country args#get_carrierCode);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getProductListWithCarrier", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProductWithCarrier (seqid, iprot, oprot) =
    let args = read_getProductWithCarrier_args iprot in
      iprot#readMessageEnd;
      let result = new getProductWithCarrier_result in
        (try
          result#set_success (handler#getProductWithCarrier args#get_packageID args#get_language args#get_country args#get_carrierCode);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getProductWithCarrier", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPurchaseHistory (seqid, iprot, oprot) =
    let args = read_getPurchaseHistory_args iprot in
      iprot#readMessageEnd;
      let result = new getPurchaseHistory_result in
        (try
          result#set_success (handler#getPurchaseHistory args#get_start args#get_size args#get_language args#get_country);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPurchaseHistory", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getTotalBalance (seqid, iprot, oprot) =
    let args = read_getTotalBalance_args iprot in
      iprot#readMessageEnd;
      let result = new getTotalBalance_result in
        (try
          result#set_success (handler#getTotalBalance args#get_appStoreCode);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getTotalBalance", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyDownloaded (seqid, iprot, oprot) =
    let args = read_notifyDownloaded_args iprot in
      iprot#readMessageEnd;
      let result = new notifyDownloaded_result in
        (try
          result#set_success (handler#notifyDownloaded args#get_packageId args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyDownloaded", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reserveCoinPurchase (seqid, iprot, oprot) =
    let args = read_reserveCoinPurchase_args iprot in
      iprot#readMessageEnd;
      let result = new reserveCoinPurchase_result in
        (try
          result#set_success (handler#reserveCoinPurchase args#get_request);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reserveCoinPurchase", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reservePayment (seqid, iprot, oprot) =
    let args = read_reservePayment_args iprot in
      iprot#readMessageEnd;
      let result = new reservePayment_result in
        (try
          result#set_success (handler#reservePayment args#get_paymentReservation);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reservePayment", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "buyCoinProduct" self#process_buyCoinProduct;
    Hashtbl.add processMap "buyFreeProduct" self#process_buyFreeProduct;
    Hashtbl.add processMap "buyMustbuyProduct" self#process_buyMustbuyProduct;
    Hashtbl.add processMap "checkCanReceivePresent" self#process_checkCanReceivePresent;
    Hashtbl.add processMap "getActivePurchases" self#process_getActivePurchases;
    Hashtbl.add processMap "getActivePurchaseVersions" self#process_getActivePurchaseVersions;
    Hashtbl.add processMap "getCoinProducts" self#process_getCoinProducts;
    Hashtbl.add processMap "getCoinProductsByPgCode" self#process_getCoinProductsByPgCode;
    Hashtbl.add processMap "getCoinPurchaseHistory" self#process_getCoinPurchaseHistory;
    Hashtbl.add processMap "getCoinUseAndRefundHistory" self#process_getCoinUseAndRefundHistory;
    Hashtbl.add processMap "getDownloads" self#process_getDownloads;
    Hashtbl.add processMap "getEventPackages" self#process_getEventPackages;
    Hashtbl.add processMap "getNewlyReleasedPackages" self#process_getNewlyReleasedPackages;
    Hashtbl.add processMap "getPopularPackages" self#process_getPopularPackages;
    Hashtbl.add processMap "getPresentsReceived" self#process_getPresentsReceived;
    Hashtbl.add processMap "getPresentsSent" self#process_getPresentsSent;
    Hashtbl.add processMap "getProduct" self#process_getProduct;
    Hashtbl.add processMap "getProductList" self#process_getProductList;
    Hashtbl.add processMap "getProductListWithCarrier" self#process_getProductListWithCarrier;
    Hashtbl.add processMap "getProductWithCarrier" self#process_getProductWithCarrier;
    Hashtbl.add processMap "getPurchaseHistory" self#process_getPurchaseHistory;
    Hashtbl.add processMap "getTotalBalance" self#process_getTotalBalance;
    Hashtbl.add processMap "notifyDownloaded" self#process_notifyDownloaded;
    Hashtbl.add processMap "reserveCoinPurchase" self#process_reserveCoinPurchase;
    Hashtbl.add processMap "reservePayment" self#process_reservePayment;
end

