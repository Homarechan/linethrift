(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class addBuddyMember_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "addBuddyMember_args.requestId") | Some _x4214 -> _x4214
  method set_requestId _x4214 = _requestId <- Some _x4214
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _userMid : string option = None
  method get_userMid = _userMid
  method grab_userMid = match _userMid with None->raise (Field_empty "addBuddyMember_args.userMid") | Some _x4215 -> _x4215
  method set_userMid _x4215 = _userMid <- Some _x4215
  method unset_userMid = _userMid <- None
  method reset_userMid = _userMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addBuddyMember_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addBuddyMember_args (iprot : Protocol.t) =
  let _str4218 = new addBuddyMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4219,_id4220) = iprot#readFieldBegin in
        if _t4219 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4220 with 
          | 1 -> (if _t4219 = Protocol.T_STRING then
              _str4218#set_requestId iprot#readString
            else
              iprot#skip _t4219)
          | 2 -> (if _t4219 = Protocol.T_STRING then
              _str4218#set_userMid iprot#readString
            else
              iprot#skip _t4219)
          | _ -> iprot#skip _t4219);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4218

class addBuddyMember_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "addBuddyMember_result.e") | Some _x4221 -> _x4221
  method set_e _x4221 = _e <- Some _x4221
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addBuddyMember_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addBuddyMember_result (iprot : Protocol.t) =
  let _str4224 = new addBuddyMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4225,_id4226) = iprot#readFieldBegin in
        if _t4225 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4226 with 
          | 1 -> (if _t4225 = Protocol.T_STRUCT then
              _str4224#set_e (read_talkException iprot)
            else
              iprot#skip _t4225)
          | _ -> iprot#skip _t4225);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4224

class addBuddyMembers_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "addBuddyMembers_args.requestId") | Some _x4227 -> _x4227
  method set_requestId _x4227 = _requestId <- Some _x4227
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _userMids : string list option = None
  method get_userMids = _userMids
  method grab_userMids = match _userMids with None->raise (Field_empty "addBuddyMembers_args.userMids") | Some _x4228 -> _x4228
  method set_userMids _x4228 = _userMids <- Some _x4228
  method unset_userMids = _userMids <- None
  method reset_userMids = _userMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addBuddyMembers_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("userMids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter4231 ->         oprot#writeString(_iter4231);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addBuddyMembers_args (iprot : Protocol.t) =
  let _str4232 = new addBuddyMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4233,_id4234) = iprot#readFieldBegin in
        if _t4233 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4234 with 
          | 1 -> (if _t4233 = Protocol.T_STRING then
              _str4232#set_requestId iprot#readString
            else
              iprot#skip _t4233)
          | 2 -> (if _t4233 = Protocol.T_LIST then
              _str4232#set_userMids 
                (let (_etype4238,_size4235) = iprot#readListBegin in
                  let _con4239 = (Array.to_list (Array.init _size4235 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con4239)
            else
              iprot#skip _t4233)
          | _ -> iprot#skip _t4233);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4232

class addBuddyMembers_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "addBuddyMembers_result.e") | Some _x4240 -> _x4240
  method set_e _x4240 = _e <- Some _x4240
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addBuddyMembers_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addBuddyMembers_result (iprot : Protocol.t) =
  let _str4243 = new addBuddyMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4244,_id4245) = iprot#readFieldBegin in
        if _t4244 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4245 with 
          | 1 -> (if _t4244 = Protocol.T_STRUCT then
              _str4243#set_e (read_talkException iprot)
            else
              iprot#skip _t4244)
          | _ -> iprot#skip _t4244);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4243

class blockBuddyMember_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "blockBuddyMember_args.requestId") | Some _x4246 -> _x4246
  method set_requestId _x4246 = _requestId <- Some _x4246
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "blockBuddyMember_args.mid") | Some _x4247 -> _x4247
  method set_mid _x4247 = _mid <- Some _x4247
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "blockBuddyMember_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_blockBuddyMember_args (iprot : Protocol.t) =
  let _str4250 = new blockBuddyMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4251,_id4252) = iprot#readFieldBegin in
        if _t4251 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4252 with 
          | 1 -> (if _t4251 = Protocol.T_STRING then
              _str4250#set_requestId iprot#readString
            else
              iprot#skip _t4251)
          | 2 -> (if _t4251 = Protocol.T_STRING then
              _str4250#set_mid iprot#readString
            else
              iprot#skip _t4251)
          | _ -> iprot#skip _t4251);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4250

class blockBuddyMember_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "blockBuddyMember_result.e") | Some _x4253 -> _x4253
  method set_e _x4253 = _e <- Some _x4253
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "blockBuddyMember_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_blockBuddyMember_result (iprot : Protocol.t) =
  let _str4256 = new blockBuddyMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4257,_id4258) = iprot#readFieldBegin in
        if _t4257 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4258 with 
          | 1 -> (if _t4257 = Protocol.T_STRUCT then
              _str4256#set_e (read_talkException iprot)
            else
              iprot#skip _t4257)
          | _ -> iprot#skip _t4257);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4256

class commitSendMessagesToAll_args =
object (self)
  val mutable _requestIdList : string list option = None
  method get_requestIdList = _requestIdList
  method grab_requestIdList = match _requestIdList with None->raise (Field_empty "commitSendMessagesToAll_args.requestIdList") | Some _x4259 -> _x4259
  method set_requestIdList _x4259 = _requestIdList <- Some _x4259
  method unset_requestIdList = _requestIdList <- None
  method reset_requestIdList = _requestIdList <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitSendMessagesToAll_args";
    (match _requestIdList with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestIdList",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter4262 ->         oprot#writeString(_iter4262);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitSendMessagesToAll_args (iprot : Protocol.t) =
  let _str4263 = new commitSendMessagesToAll_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4264,_id4265) = iprot#readFieldBegin in
        if _t4264 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4265 with 
          | 1 -> (if _t4264 = Protocol.T_LIST then
              _str4263#set_requestIdList 
                (let (_etype4269,_size4266) = iprot#readListBegin in
                  let _con4270 = (Array.to_list (Array.init _size4266 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con4270)
            else
              iprot#skip _t4264)
          | _ -> iprot#skip _t4264);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4263

class commitSendMessagesToAll_result =
object (self)
  val mutable _success : sendBuddyMessageResult list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "commitSendMessagesToAll_result.success") | Some _x4271 -> _x4271
  method set_success _x4271 = _success <- Some _x4271
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "commitSendMessagesToAll_result.e") | Some _x4272 -> _x4272
  method set_e _x4272 = _e <- Some _x4272
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitSendMessagesToAll_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter4275 ->         _iter4275#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitSendMessagesToAll_result (iprot : Protocol.t) =
  let _str4276 = new commitSendMessagesToAll_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4277,_id4278) = iprot#readFieldBegin in
        if _t4277 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4278 with 
          | 0 -> (if _t4277 = Protocol.T_LIST then
              _str4276#set_success 
                (let (_etype4282,_size4279) = iprot#readListBegin in
                  let _con4283 = (Array.to_list (Array.init _size4279 (fun _ -> (read_sendBuddyMessageResult iprot)))) in
                    iprot#readListEnd; _con4283)
            else
              iprot#skip _t4277)
          | 1 -> (if _t4277 = Protocol.T_STRUCT then
              _str4276#set_e (read_talkException iprot)
            else
              iprot#skip _t4277)
          | _ -> iprot#skip _t4277);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4276

class commitSendMessagesToMids_args =
object (self)
  val mutable _requestIdList : string list option = None
  method get_requestIdList = _requestIdList
  method grab_requestIdList = match _requestIdList with None->raise (Field_empty "commitSendMessagesToMids_args.requestIdList") | Some _x4284 -> _x4284
  method set_requestIdList _x4284 = _requestIdList <- Some _x4284
  method unset_requestIdList = _requestIdList <- None
  method reset_requestIdList = _requestIdList <- None

  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "commitSendMessagesToMids_args.mids") | Some _x4285 -> _x4285
  method set_mids _x4285 = _mids <- Some _x4285
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitSendMessagesToMids_args";
    (match _requestIdList with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestIdList",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter4288 ->         oprot#writeString(_iter4288);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter4289 ->         oprot#writeString(_iter4289);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitSendMessagesToMids_args (iprot : Protocol.t) =
  let _str4290 = new commitSendMessagesToMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4291,_id4292) = iprot#readFieldBegin in
        if _t4291 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4292 with 
          | 1 -> (if _t4291 = Protocol.T_LIST then
              _str4290#set_requestIdList 
                (let (_etype4296,_size4293) = iprot#readListBegin in
                  let _con4297 = (Array.to_list (Array.init _size4293 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con4297)
            else
              iprot#skip _t4291)
          | 2 -> (if _t4291 = Protocol.T_LIST then
              _str4290#set_mids 
                (let (_etype4301,_size4298) = iprot#readListBegin in
                  let _con4302 = (Array.to_list (Array.init _size4298 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con4302)
            else
              iprot#skip _t4291)
          | _ -> iprot#skip _t4291);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4290

class commitSendMessagesToMids_result =
object (self)
  val mutable _success : sendBuddyMessageResult list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "commitSendMessagesToMids_result.success") | Some _x4303 -> _x4303
  method set_success _x4303 = _success <- Some _x4303
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "commitSendMessagesToMids_result.e") | Some _x4304 -> _x4304
  method set_e _x4304 = _e <- Some _x4304
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitSendMessagesToMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter4307 ->         _iter4307#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitSendMessagesToMids_result (iprot : Protocol.t) =
  let _str4308 = new commitSendMessagesToMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4309,_id4310) = iprot#readFieldBegin in
        if _t4309 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4310 with 
          | 0 -> (if _t4309 = Protocol.T_LIST then
              _str4308#set_success 
                (let (_etype4314,_size4311) = iprot#readListBegin in
                  let _con4315 = (Array.to_list (Array.init _size4311 (fun _ -> (read_sendBuddyMessageResult iprot)))) in
                    iprot#readListEnd; _con4315)
            else
              iprot#skip _t4309)
          | 1 -> (if _t4309 = Protocol.T_STRUCT then
              _str4308#set_e (read_talkException iprot)
            else
              iprot#skip _t4309)
          | _ -> iprot#skip _t4309);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4308

class containsBuddyMember_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "containsBuddyMember_args.requestId") | Some _x4316 -> _x4316
  method set_requestId _x4316 = _requestId <- Some _x4316
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _userMid : string option = None
  method get_userMid = _userMid
  method grab_userMid = match _userMid with None->raise (Field_empty "containsBuddyMember_args.userMid") | Some _x4317 -> _x4317
  method set_userMid _x4317 = _userMid <- Some _x4317
  method unset_userMid = _userMid <- None
  method reset_userMid = _userMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "containsBuddyMember_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_containsBuddyMember_args (iprot : Protocol.t) =
  let _str4320 = new containsBuddyMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4321,_id4322) = iprot#readFieldBegin in
        if _t4321 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4322 with 
          | 1 -> (if _t4321 = Protocol.T_STRING then
              _str4320#set_requestId iprot#readString
            else
              iprot#skip _t4321)
          | 2 -> (if _t4321 = Protocol.T_STRING then
              _str4320#set_userMid iprot#readString
            else
              iprot#skip _t4321)
          | _ -> iprot#skip _t4321);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4320

class containsBuddyMember_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "containsBuddyMember_result.success") | Some _x4323 -> _x4323
  method set_success _x4323 = _success <- Some _x4323
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "containsBuddyMember_result.e") | Some _x4324 -> _x4324
  method set_e _x4324 = _e <- Some _x4324
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "containsBuddyMember_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_containsBuddyMember_result (iprot : Protocol.t) =
  let _str4327 = new containsBuddyMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4328,_id4329) = iprot#readFieldBegin in
        if _t4328 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4329 with 
          | 0 -> (if _t4328 = Protocol.T_BOOL then
              _str4327#set_success iprot#readBool
            else
              iprot#skip _t4328)
          | 1 -> (if _t4328 = Protocol.T_STRUCT then
              _str4327#set_e (read_talkException iprot)
            else
              iprot#skip _t4328)
          | _ -> iprot#skip _t4328);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4327

class downloadMessageContent_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "downloadMessageContent_args.requestId") | Some _x4330 -> _x4330
  method set_requestId _x4330 = _requestId <- Some _x4330
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "downloadMessageContent_args.messageId") | Some _x4331 -> _x4331
  method set_messageId _x4331 = _messageId <- Some _x4331
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "downloadMessageContent_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_downloadMessageContent_args (iprot : Protocol.t) =
  let _str4334 = new downloadMessageContent_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4335,_id4336) = iprot#readFieldBegin in
        if _t4335 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4336 with 
          | 1 -> (if _t4335 = Protocol.T_STRING then
              _str4334#set_requestId iprot#readString
            else
              iprot#skip _t4335)
          | 2 -> (if _t4335 = Protocol.T_STRING then
              _str4334#set_messageId iprot#readString
            else
              iprot#skip _t4335)
          | _ -> iprot#skip _t4335);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4334

class downloadMessageContent_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "downloadMessageContent_result.success") | Some _x4337 -> _x4337
  method set_success _x4337 = _success <- Some _x4337
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "downloadMessageContent_result.e") | Some _x4338 -> _x4338
  method set_e _x4338 = _e <- Some _x4338
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "downloadMessageContent_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_downloadMessageContent_result (iprot : Protocol.t) =
  let _str4341 = new downloadMessageContent_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4342,_id4343) = iprot#readFieldBegin in
        if _t4342 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4343 with 
          | 0 -> (if _t4342 = Protocol.T_STRING then
              _str4341#set_success iprot#readString
            else
              iprot#skip _t4342)
          | 1 -> (if _t4342 = Protocol.T_STRUCT then
              _str4341#set_e (read_talkException iprot)
            else
              iprot#skip _t4342)
          | _ -> iprot#skip _t4342);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4341

class downloadMessageContentPreview_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "downloadMessageContentPreview_args.requestId") | Some _x4344 -> _x4344
  method set_requestId _x4344 = _requestId <- Some _x4344
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "downloadMessageContentPreview_args.messageId") | Some _x4345 -> _x4345
  method set_messageId _x4345 = _messageId <- Some _x4345
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "downloadMessageContentPreview_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_downloadMessageContentPreview_args (iprot : Protocol.t) =
  let _str4348 = new downloadMessageContentPreview_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4349,_id4350) = iprot#readFieldBegin in
        if _t4349 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4350 with 
          | 1 -> (if _t4349 = Protocol.T_STRING then
              _str4348#set_requestId iprot#readString
            else
              iprot#skip _t4349)
          | 2 -> (if _t4349 = Protocol.T_STRING then
              _str4348#set_messageId iprot#readString
            else
              iprot#skip _t4349)
          | _ -> iprot#skip _t4349);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4348

class downloadMessageContentPreview_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "downloadMessageContentPreview_result.success") | Some _x4351 -> _x4351
  method set_success _x4351 = _success <- Some _x4351
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "downloadMessageContentPreview_result.e") | Some _x4352 -> _x4352
  method set_e _x4352 = _e <- Some _x4352
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "downloadMessageContentPreview_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_downloadMessageContentPreview_result (iprot : Protocol.t) =
  let _str4355 = new downloadMessageContentPreview_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4356,_id4357) = iprot#readFieldBegin in
        if _t4356 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4357 with 
          | 0 -> (if _t4356 = Protocol.T_STRING then
              _str4355#set_success iprot#readString
            else
              iprot#skip _t4356)
          | 1 -> (if _t4356 = Protocol.T_STRUCT then
              _str4355#set_e (read_talkException iprot)
            else
              iprot#skip _t4356)
          | _ -> iprot#skip _t4356);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4355

class downloadProfileImage_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "downloadProfileImage_args.requestId") | Some _x4358 -> _x4358
  method set_requestId _x4358 = _requestId <- Some _x4358
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "downloadProfileImage_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_downloadProfileImage_args (iprot : Protocol.t) =
  let _str4361 = new downloadProfileImage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4362,_id4363) = iprot#readFieldBegin in
        if _t4362 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4363 with 
          | 1 -> (if _t4362 = Protocol.T_STRING then
              _str4361#set_requestId iprot#readString
            else
              iprot#skip _t4362)
          | _ -> iprot#skip _t4362);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4361

class downloadProfileImage_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "downloadProfileImage_result.success") | Some _x4364 -> _x4364
  method set_success _x4364 = _success <- Some _x4364
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "downloadProfileImage_result.e") | Some _x4365 -> _x4365
  method set_e _x4365 = _e <- Some _x4365
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "downloadProfileImage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_downloadProfileImage_result (iprot : Protocol.t) =
  let _str4368 = new downloadProfileImage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4369,_id4370) = iprot#readFieldBegin in
        if _t4369 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4370 with 
          | 0 -> (if _t4369 = Protocol.T_STRING then
              _str4368#set_success iprot#readString
            else
              iprot#skip _t4369)
          | 1 -> (if _t4369 = Protocol.T_STRUCT then
              _str4368#set_e (read_talkException iprot)
            else
              iprot#skip _t4369)
          | _ -> iprot#skip _t4369);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4368

class downloadProfileImagePreview_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "downloadProfileImagePreview_args.requestId") | Some _x4371 -> _x4371
  method set_requestId _x4371 = _requestId <- Some _x4371
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "downloadProfileImagePreview_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_downloadProfileImagePreview_args (iprot : Protocol.t) =
  let _str4374 = new downloadProfileImagePreview_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4375,_id4376) = iprot#readFieldBegin in
        if _t4375 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4376 with 
          | 1 -> (if _t4375 = Protocol.T_STRING then
              _str4374#set_requestId iprot#readString
            else
              iprot#skip _t4375)
          | _ -> iprot#skip _t4375);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4374

class downloadProfileImagePreview_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "downloadProfileImagePreview_result.success") | Some _x4377 -> _x4377
  method set_success _x4377 = _success <- Some _x4377
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "downloadProfileImagePreview_result.e") | Some _x4378 -> _x4378
  method set_e _x4378 = _e <- Some _x4378
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "downloadProfileImagePreview_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_downloadProfileImagePreview_result (iprot : Protocol.t) =
  let _str4381 = new downloadProfileImagePreview_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4382,_id4383) = iprot#readFieldBegin in
        if _t4382 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4383 with 
          | 0 -> (if _t4382 = Protocol.T_STRING then
              _str4381#set_success iprot#readString
            else
              iprot#skip _t4382)
          | 1 -> (if _t4382 = Protocol.T_STRUCT then
              _str4381#set_e (read_talkException iprot)
            else
              iprot#skip _t4382)
          | _ -> iprot#skip _t4382);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4381

class getActiveMemberCountByBuddyMid_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "getActiveMemberCountByBuddyMid_args.buddyMid") | Some _x4384 -> _x4384
  method set_buddyMid _x4384 = _buddyMid <- Some _x4384
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActiveMemberCountByBuddyMid_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActiveMemberCountByBuddyMid_args (iprot : Protocol.t) =
  let _str4387 = new getActiveMemberCountByBuddyMid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4388,_id4389) = iprot#readFieldBegin in
        if _t4388 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4389 with 
          | 2 -> (if _t4388 = Protocol.T_STRING then
              _str4387#set_buddyMid iprot#readString
            else
              iprot#skip _t4388)
          | _ -> iprot#skip _t4388);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4387

class getActiveMemberCountByBuddyMid_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getActiveMemberCountByBuddyMid_result.success") | Some _x4390 -> _x4390
  method set_success _x4390 = _success <- Some _x4390
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getActiveMemberCountByBuddyMid_result.e") | Some _x4391 -> _x4391
  method set_e _x4391 = _e <- Some _x4391
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActiveMemberCountByBuddyMid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActiveMemberCountByBuddyMid_result (iprot : Protocol.t) =
  let _str4394 = new getActiveMemberCountByBuddyMid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4395,_id4396) = iprot#readFieldBegin in
        if _t4395 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4396 with 
          | 0 -> (if _t4395 = Protocol.T_I64 then
              _str4394#set_success iprot#readI64
            else
              iprot#skip _t4395)
          | 1 -> (if _t4395 = Protocol.T_STRUCT then
              _str4394#set_e (read_talkException iprot)
            else
              iprot#skip _t4395)
          | _ -> iprot#skip _t4395);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4394

class getActiveMemberMidsByBuddyMid_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "getActiveMemberMidsByBuddyMid_args.buddyMid") | Some _x4397 -> _x4397
  method set_buddyMid _x4397 = _buddyMid <- Some _x4397
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActiveMemberMidsByBuddyMid_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActiveMemberMidsByBuddyMid_args (iprot : Protocol.t) =
  let _str4400 = new getActiveMemberMidsByBuddyMid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4401,_id4402) = iprot#readFieldBegin in
        if _t4401 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4402 with 
          | 2 -> (if _t4401 = Protocol.T_STRING then
              _str4400#set_buddyMid iprot#readString
            else
              iprot#skip _t4401)
          | _ -> iprot#skip _t4401);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4400

class getActiveMemberMidsByBuddyMid_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getActiveMemberMidsByBuddyMid_result.success") | Some _x4403 -> _x4403
  method set_success _x4403 = _success <- Some _x4403
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getActiveMemberMidsByBuddyMid_result.e") | Some _x4404 -> _x4404
  method set_e _x4404 = _e <- Some _x4404
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActiveMemberMidsByBuddyMid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter4407 ->         oprot#writeString(_iter4407);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActiveMemberMidsByBuddyMid_result (iprot : Protocol.t) =
  let _str4408 = new getActiveMemberMidsByBuddyMid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4409,_id4410) = iprot#readFieldBegin in
        if _t4409 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4410 with 
          | 0 -> (if _t4409 = Protocol.T_LIST then
              _str4408#set_success 
                (let (_etype4414,_size4411) = iprot#readListBegin in
                  let _con4415 = (Array.to_list (Array.init _size4411 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con4415)
            else
              iprot#skip _t4409)
          | 1 -> (if _t4409 = Protocol.T_STRUCT then
              _str4408#set_e (read_talkException iprot)
            else
              iprot#skip _t4409)
          | _ -> iprot#skip _t4409);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4408

class getAllBuddyMembers_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllBuddyMembers_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllBuddyMembers_args (iprot : Protocol.t) =
  let _str4418 = new getAllBuddyMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4419,_id4420) = iprot#readFieldBegin in
        if _t4419 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4420 with 
          | _ -> iprot#skip _t4419);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4418

class getAllBuddyMembers_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getAllBuddyMembers_result.success") | Some _x4421 -> _x4421
  method set_success _x4421 = _success <- Some _x4421
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getAllBuddyMembers_result.e") | Some _x4422 -> _x4422
  method set_e _x4422 = _e <- Some _x4422
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllBuddyMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter4425 ->         oprot#writeString(_iter4425);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllBuddyMembers_result (iprot : Protocol.t) =
  let _str4426 = new getAllBuddyMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4427,_id4428) = iprot#readFieldBegin in
        if _t4427 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4428 with 
          | 0 -> (if _t4427 = Protocol.T_LIST then
              _str4426#set_success 
                (let (_etype4432,_size4429) = iprot#readListBegin in
                  let _con4433 = (Array.to_list (Array.init _size4429 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con4433)
            else
              iprot#skip _t4427)
          | 1 -> (if _t4427 = Protocol.T_STRUCT then
              _str4426#set_e (read_talkException iprot)
            else
              iprot#skip _t4427)
          | _ -> iprot#skip _t4427);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4426

class getBlockedBuddyMembers_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockedBuddyMembers_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockedBuddyMembers_args (iprot : Protocol.t) =
  let _str4436 = new getBlockedBuddyMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4437,_id4438) = iprot#readFieldBegin in
        if _t4437 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4438 with 
          | _ -> iprot#skip _t4437);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4436

class getBlockedBuddyMembers_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBlockedBuddyMembers_result.success") | Some _x4439 -> _x4439
  method set_success _x4439 = _success <- Some _x4439
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBlockedBuddyMembers_result.e") | Some _x4440 -> _x4440
  method set_e _x4440 = _e <- Some _x4440
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockedBuddyMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter4443 ->         oprot#writeString(_iter4443);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockedBuddyMembers_result (iprot : Protocol.t) =
  let _str4444 = new getBlockedBuddyMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4445,_id4446) = iprot#readFieldBegin in
        if _t4445 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4446 with 
          | 0 -> (if _t4445 = Protocol.T_LIST then
              _str4444#set_success 
                (let (_etype4450,_size4447) = iprot#readListBegin in
                  let _con4451 = (Array.to_list (Array.init _size4447 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con4451)
            else
              iprot#skip _t4445)
          | 1 -> (if _t4445 = Protocol.T_STRUCT then
              _str4444#set_e (read_talkException iprot)
            else
              iprot#skip _t4445)
          | _ -> iprot#skip _t4445);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4444

class getBlockerCountByBuddyMid_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "getBlockerCountByBuddyMid_args.buddyMid") | Some _x4452 -> _x4452
  method set_buddyMid _x4452 = _buddyMid <- Some _x4452
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockerCountByBuddyMid_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockerCountByBuddyMid_args (iprot : Protocol.t) =
  let _str4455 = new getBlockerCountByBuddyMid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4456,_id4457) = iprot#readFieldBegin in
        if _t4456 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4457 with 
          | 2 -> (if _t4456 = Protocol.T_STRING then
              _str4455#set_buddyMid iprot#readString
            else
              iprot#skip _t4456)
          | _ -> iprot#skip _t4456);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4455

class getBlockerCountByBuddyMid_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBlockerCountByBuddyMid_result.success") | Some _x4458 -> _x4458
  method set_success _x4458 = _success <- Some _x4458
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBlockerCountByBuddyMid_result.e") | Some _x4459 -> _x4459
  method set_e _x4459 = _e <- Some _x4459
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockerCountByBuddyMid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockerCountByBuddyMid_result (iprot : Protocol.t) =
  let _str4462 = new getBlockerCountByBuddyMid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4463,_id4464) = iprot#readFieldBegin in
        if _t4463 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4464 with 
          | 0 -> (if _t4463 = Protocol.T_I64 then
              _str4462#set_success iprot#readI64
            else
              iprot#skip _t4463)
          | 1 -> (if _t4463 = Protocol.T_STRUCT then
              _str4462#set_e (read_talkException iprot)
            else
              iprot#skip _t4463)
          | _ -> iprot#skip _t4463);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4462

class getBuddyDetailByMid_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "getBuddyDetailByMid_args.buddyMid") | Some _x4465 -> _x4465
  method set_buddyMid _x4465 = _buddyMid <- Some _x4465
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyDetailByMid_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyDetailByMid_args (iprot : Protocol.t) =
  let _str4468 = new getBuddyDetailByMid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4469,_id4470) = iprot#readFieldBegin in
        if _t4469 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4470 with 
          | 2 -> (if _t4469 = Protocol.T_STRING then
              _str4468#set_buddyMid iprot#readString
            else
              iprot#skip _t4469)
          | _ -> iprot#skip _t4469);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4468

class getBuddyDetailByMid_result =
object (self)
  val mutable _success : buddyDetail option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBuddyDetailByMid_result.success") | Some _x4471 -> _x4471
  method set_success _x4471 = _success <- Some _x4471
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBuddyDetailByMid_result.e") | Some _x4472 -> _x4472
  method set_e _x4472 = _e <- Some _x4472
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyDetailByMid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyDetailByMid_result (iprot : Protocol.t) =
  let _str4475 = new getBuddyDetailByMid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4476,_id4477) = iprot#readFieldBegin in
        if _t4476 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4477 with 
          | 0 -> (if _t4476 = Protocol.T_STRUCT then
              _str4475#set_success (read_buddyDetail iprot)
            else
              iprot#skip _t4476)
          | 1 -> (if _t4476 = Protocol.T_STRUCT then
              _str4475#set_e (read_talkException iprot)
            else
              iprot#skip _t4476)
          | _ -> iprot#skip _t4476);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4475

class getBuddyProfile_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyProfile_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyProfile_args (iprot : Protocol.t) =
  let _str4480 = new getBuddyProfile_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4481,_id4482) = iprot#readFieldBegin in
        if _t4481 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4482 with 
          | _ -> iprot#skip _t4481);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4480

class getBuddyProfile_result =
object (self)
  val mutable _success : buddyProfile option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBuddyProfile_result.success") | Some _x4483 -> _x4483
  method set_success _x4483 = _success <- Some _x4483
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBuddyProfile_result.e") | Some _x4484 -> _x4484
  method set_e _x4484 = _e <- Some _x4484
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyProfile_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyProfile_result (iprot : Protocol.t) =
  let _str4487 = new getBuddyProfile_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4488,_id4489) = iprot#readFieldBegin in
        if _t4488 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4489 with 
          | 0 -> (if _t4488 = Protocol.T_STRUCT then
              _str4487#set_success (read_buddyProfile iprot)
            else
              iprot#skip _t4488)
          | 1 -> (if _t4488 = Protocol.T_STRUCT then
              _str4487#set_e (read_talkException iprot)
            else
              iprot#skip _t4488)
          | _ -> iprot#skip _t4488);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4487

class getContactTicket_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContactTicket_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContactTicket_args (iprot : Protocol.t) =
  let _str4492 = new getContactTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4493,_id4494) = iprot#readFieldBegin in
        if _t4493 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4494 with 
          | _ -> iprot#skip _t4493);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4492

class getContactTicket_result =
object (self)
  val mutable _success : ticket option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getContactTicket_result.success") | Some _x4495 -> _x4495
  method set_success _x4495 = _success <- Some _x4495
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getContactTicket_result.e") | Some _x4496 -> _x4496
  method set_e _x4496 = _e <- Some _x4496
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContactTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContactTicket_result (iprot : Protocol.t) =
  let _str4499 = new getContactTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4500,_id4501) = iprot#readFieldBegin in
        if _t4500 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4501 with 
          | 0 -> (if _t4500 = Protocol.T_STRUCT then
              _str4499#set_success (read_ticket iprot)
            else
              iprot#skip _t4500)
          | 1 -> (if _t4500 = Protocol.T_STRUCT then
              _str4499#set_e (read_talkException iprot)
            else
              iprot#skip _t4500)
          | _ -> iprot#skip _t4500);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4499

class getMemberCountByBuddyMid_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "getMemberCountByBuddyMid_args.buddyMid") | Some _x4502 -> _x4502
  method set_buddyMid _x4502 = _buddyMid <- Some _x4502
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMemberCountByBuddyMid_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMemberCountByBuddyMid_args (iprot : Protocol.t) =
  let _str4505 = new getMemberCountByBuddyMid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4506,_id4507) = iprot#readFieldBegin in
        if _t4506 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4507 with 
          | 2 -> (if _t4506 = Protocol.T_STRING then
              _str4505#set_buddyMid iprot#readString
            else
              iprot#skip _t4506)
          | _ -> iprot#skip _t4506);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4505

class getMemberCountByBuddyMid_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMemberCountByBuddyMid_result.success") | Some _x4508 -> _x4508
  method set_success _x4508 = _success <- Some _x4508
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMemberCountByBuddyMid_result.e") | Some _x4509 -> _x4509
  method set_e _x4509 = _e <- Some _x4509
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMemberCountByBuddyMid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMemberCountByBuddyMid_result (iprot : Protocol.t) =
  let _str4512 = new getMemberCountByBuddyMid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4513,_id4514) = iprot#readFieldBegin in
        if _t4513 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4514 with 
          | 0 -> (if _t4513 = Protocol.T_I64 then
              _str4512#set_success iprot#readI64
            else
              iprot#skip _t4513)
          | 1 -> (if _t4513 = Protocol.T_STRUCT then
              _str4512#set_e (read_talkException iprot)
            else
              iprot#skip _t4513)
          | _ -> iprot#skip _t4513);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4512

class getSendBuddyMessageResult_args =
object (self)
  val mutable _sendBuddyMessageRequestId : string option = None
  method get_sendBuddyMessageRequestId = _sendBuddyMessageRequestId
  method grab_sendBuddyMessageRequestId = match _sendBuddyMessageRequestId with None->raise (Field_empty "getSendBuddyMessageResult_args.sendBuddyMessageRequestId") | Some _x4515 -> _x4515
  method set_sendBuddyMessageRequestId _x4515 = _sendBuddyMessageRequestId <- Some _x4515
  method unset_sendBuddyMessageRequestId = _sendBuddyMessageRequestId <- None
  method reset_sendBuddyMessageRequestId = _sendBuddyMessageRequestId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSendBuddyMessageResult_args";
    (match _sendBuddyMessageRequestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sendBuddyMessageRequestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSendBuddyMessageResult_args (iprot : Protocol.t) =
  let _str4518 = new getSendBuddyMessageResult_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4519,_id4520) = iprot#readFieldBegin in
        if _t4519 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4520 with 
          | 1 -> (if _t4519 = Protocol.T_STRING then
              _str4518#set_sendBuddyMessageRequestId iprot#readString
            else
              iprot#skip _t4519)
          | _ -> iprot#skip _t4519);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4518

class getSendBuddyMessageResult_result =
object (self)
  val mutable _success : sendBuddyMessageResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSendBuddyMessageResult_result.success") | Some _x4521 -> _x4521
  method set_success _x4521 = _success <- Some _x4521
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSendBuddyMessageResult_result.e") | Some _x4522 -> _x4522
  method set_e _x4522 = _e <- Some _x4522
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSendBuddyMessageResult_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSendBuddyMessageResult_result (iprot : Protocol.t) =
  let _str4525 = new getSendBuddyMessageResult_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4526,_id4527) = iprot#readFieldBegin in
        if _t4526 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4527 with 
          | 0 -> (if _t4526 = Protocol.T_STRUCT then
              _str4525#set_success (read_sendBuddyMessageResult iprot)
            else
              iprot#skip _t4526)
          | 1 -> (if _t4526 = Protocol.T_STRUCT then
              _str4525#set_e (read_talkException iprot)
            else
              iprot#skip _t4526)
          | _ -> iprot#skip _t4526);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4525

class getSetBuddyOnAirResult_args =
object (self)
  val mutable _setBuddyOnAirRequestId : string option = None
  method get_setBuddyOnAirRequestId = _setBuddyOnAirRequestId
  method grab_setBuddyOnAirRequestId = match _setBuddyOnAirRequestId with None->raise (Field_empty "getSetBuddyOnAirResult_args.setBuddyOnAirRequestId") | Some _x4528 -> _x4528
  method set_setBuddyOnAirRequestId _x4528 = _setBuddyOnAirRequestId <- Some _x4528
  method unset_setBuddyOnAirRequestId = _setBuddyOnAirRequestId <- None
  method reset_setBuddyOnAirRequestId = _setBuddyOnAirRequestId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSetBuddyOnAirResult_args";
    (match _setBuddyOnAirRequestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("setBuddyOnAirRequestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSetBuddyOnAirResult_args (iprot : Protocol.t) =
  let _str4531 = new getSetBuddyOnAirResult_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4532,_id4533) = iprot#readFieldBegin in
        if _t4532 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4533 with 
          | 1 -> (if _t4532 = Protocol.T_STRING then
              _str4531#set_setBuddyOnAirRequestId iprot#readString
            else
              iprot#skip _t4532)
          | _ -> iprot#skip _t4532);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4531

class getSetBuddyOnAirResult_result =
object (self)
  val mutable _success : setBuddyOnAirResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSetBuddyOnAirResult_result.success") | Some _x4534 -> _x4534
  method set_success _x4534 = _success <- Some _x4534
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSetBuddyOnAirResult_result.e") | Some _x4535 -> _x4535
  method set_e _x4535 = _e <- Some _x4535
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSetBuddyOnAirResult_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSetBuddyOnAirResult_result (iprot : Protocol.t) =
  let _str4538 = new getSetBuddyOnAirResult_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4539,_id4540) = iprot#readFieldBegin in
        if _t4539 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4540 with 
          | 0 -> (if _t4539 = Protocol.T_STRUCT then
              _str4538#set_success (read_setBuddyOnAirResult iprot)
            else
              iprot#skip _t4539)
          | 1 -> (if _t4539 = Protocol.T_STRUCT then
              _str4538#set_e (read_talkException iprot)
            else
              iprot#skip _t4539)
          | _ -> iprot#skip _t4539);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4538

class getUpdateBuddyProfileResult_args =
object (self)
  val mutable _updateBuddyProfileRequestId : string option = None
  method get_updateBuddyProfileRequestId = _updateBuddyProfileRequestId
  method grab_updateBuddyProfileRequestId = match _updateBuddyProfileRequestId with None->raise (Field_empty "getUpdateBuddyProfileResult_args.updateBuddyProfileRequestId") | Some _x4541 -> _x4541
  method set_updateBuddyProfileRequestId _x4541 = _updateBuddyProfileRequestId <- Some _x4541
  method unset_updateBuddyProfileRequestId = _updateBuddyProfileRequestId <- None
  method reset_updateBuddyProfileRequestId = _updateBuddyProfileRequestId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUpdateBuddyProfileResult_args";
    (match _updateBuddyProfileRequestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("updateBuddyProfileRequestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUpdateBuddyProfileResult_args (iprot : Protocol.t) =
  let _str4544 = new getUpdateBuddyProfileResult_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4545,_id4546) = iprot#readFieldBegin in
        if _t4545 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4546 with 
          | 1 -> (if _t4545 = Protocol.T_STRING then
              _str4544#set_updateBuddyProfileRequestId iprot#readString
            else
              iprot#skip _t4545)
          | _ -> iprot#skip _t4545);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4544

class getUpdateBuddyProfileResult_result =
object (self)
  val mutable _success : updateBuddyProfileResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUpdateBuddyProfileResult_result.success") | Some _x4547 -> _x4547
  method set_success _x4547 = _success <- Some _x4547
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUpdateBuddyProfileResult_result.e") | Some _x4548 -> _x4548
  method set_e _x4548 = _e <- Some _x4548
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUpdateBuddyProfileResult_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUpdateBuddyProfileResult_result (iprot : Protocol.t) =
  let _str4551 = new getUpdateBuddyProfileResult_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4552,_id4553) = iprot#readFieldBegin in
        if _t4552 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4553 with 
          | 0 -> (if _t4552 = Protocol.T_STRUCT then
              _str4551#set_success (read_updateBuddyProfileResult iprot)
            else
              iprot#skip _t4552)
          | 1 -> (if _t4552 = Protocol.T_STRUCT then
              _str4551#set_e (read_talkException iprot)
            else
              iprot#skip _t4552)
          | _ -> iprot#skip _t4552);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4551

class isBuddyOnAirByMid_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "isBuddyOnAirByMid_args.buddyMid") | Some _x4554 -> _x4554
  method set_buddyMid _x4554 = _buddyMid <- Some _x4554
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isBuddyOnAirByMid_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isBuddyOnAirByMid_args (iprot : Protocol.t) =
  let _str4557 = new isBuddyOnAirByMid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4558,_id4559) = iprot#readFieldBegin in
        if _t4558 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4559 with 
          | 2 -> (if _t4558 = Protocol.T_STRING then
              _str4557#set_buddyMid iprot#readString
            else
              iprot#skip _t4558)
          | _ -> iprot#skip _t4558);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4557

class isBuddyOnAirByMid_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "isBuddyOnAirByMid_result.success") | Some _x4560 -> _x4560
  method set_success _x4560 = _success <- Some _x4560
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "isBuddyOnAirByMid_result.e") | Some _x4561 -> _x4561
  method set_e _x4561 = _e <- Some _x4561
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isBuddyOnAirByMid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isBuddyOnAirByMid_result (iprot : Protocol.t) =
  let _str4564 = new isBuddyOnAirByMid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4565,_id4566) = iprot#readFieldBegin in
        if _t4565 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4566 with 
          | 0 -> (if _t4565 = Protocol.T_BOOL then
              _str4564#set_success iprot#readBool
            else
              iprot#skip _t4565)
          | 1 -> (if _t4565 = Protocol.T_STRUCT then
              _str4564#set_e (read_talkException iprot)
            else
              iprot#skip _t4565)
          | _ -> iprot#skip _t4565);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4564

class linkAndSendBuddyContentMessageToAllAsync_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "linkAndSendBuddyContentMessageToAllAsync_args.requestId") | Some _x4567 -> _x4567
  method set_requestId _x4567 = _requestId <- Some _x4567
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "linkAndSendBuddyContentMessageToAllAsync_args.msg") | Some _x4568 -> _x4568
  method set_msg _x4568 = _msg <- Some _x4568
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  val mutable _sourceContentId : string option = None
  method get_sourceContentId = _sourceContentId
  method grab_sourceContentId = match _sourceContentId with None->raise (Field_empty "linkAndSendBuddyContentMessageToAllAsync_args.sourceContentId") | Some _x4569 -> _x4569
  method set_sourceContentId _x4569 = _sourceContentId <- Some _x4569
  method unset_sourceContentId = _sourceContentId <- None
  method reset_sourceContentId = _sourceContentId <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "linkAndSendBuddyContentMessageToAllAsync_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _sourceContentId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sourceContentId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_linkAndSendBuddyContentMessageToAllAsync_args (iprot : Protocol.t) =
  let _str4572 = new linkAndSendBuddyContentMessageToAllAsync_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4573,_id4574) = iprot#readFieldBegin in
        if _t4573 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4574 with 
          | 1 -> (if _t4573 = Protocol.T_STRING then
              _str4572#set_requestId iprot#readString
            else
              iprot#skip _t4573)
          | 2 -> (if _t4573 = Protocol.T_STRUCT then
              _str4572#set_msg (read_message iprot)
            else
              iprot#skip _t4573)
          | 3 -> (if _t4573 = Protocol.T_STRING then
              _str4572#set_sourceContentId iprot#readString
            else
              iprot#skip _t4573)
          | _ -> iprot#skip _t4573);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4572

class linkAndSendBuddyContentMessageToAllAsync_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "linkAndSendBuddyContentMessageToAllAsync_result.success") | Some _x4575 -> _x4575
  method set_success _x4575 = _success <- Some _x4575
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "linkAndSendBuddyContentMessageToAllAsync_result.e") | Some _x4576 -> _x4576
  method set_e _x4576 = _e <- Some _x4576
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "linkAndSendBuddyContentMessageToAllAsync_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_linkAndSendBuddyContentMessageToAllAsync_result (iprot : Protocol.t) =
  let _str4579 = new linkAndSendBuddyContentMessageToAllAsync_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4580,_id4581) = iprot#readFieldBegin in
        if _t4580 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4581 with 
          | 0 -> (if _t4580 = Protocol.T_STRING then
              _str4579#set_success iprot#readString
            else
              iprot#skip _t4580)
          | 1 -> (if _t4580 = Protocol.T_STRUCT then
              _str4579#set_e (read_talkException iprot)
            else
              iprot#skip _t4580)
          | _ -> iprot#skip _t4580);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4579

class linkAndSendBuddyContentMessageToMids_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "linkAndSendBuddyContentMessageToMids_args.requestId") | Some _x4582 -> _x4582
  method set_requestId _x4582 = _requestId <- Some _x4582
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "linkAndSendBuddyContentMessageToMids_args.msg") | Some _x4583 -> _x4583
  method set_msg _x4583 = _msg <- Some _x4583
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  val mutable _sourceContentId : string option = None
  method get_sourceContentId = _sourceContentId
  method grab_sourceContentId = match _sourceContentId with None->raise (Field_empty "linkAndSendBuddyContentMessageToMids_args.sourceContentId") | Some _x4584 -> _x4584
  method set_sourceContentId _x4584 = _sourceContentId <- Some _x4584
  method unset_sourceContentId = _sourceContentId <- None
  method reset_sourceContentId = _sourceContentId <- None

  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "linkAndSendBuddyContentMessageToMids_args.mids") | Some _x4585 -> _x4585
  method set_mids _x4585 = _mids <- Some _x4585
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "linkAndSendBuddyContentMessageToMids_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _sourceContentId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sourceContentId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter4588 ->         oprot#writeString(_iter4588);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_linkAndSendBuddyContentMessageToMids_args (iprot : Protocol.t) =
  let _str4589 = new linkAndSendBuddyContentMessageToMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4590,_id4591) = iprot#readFieldBegin in
        if _t4590 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4591 with 
          | 1 -> (if _t4590 = Protocol.T_STRING then
              _str4589#set_requestId iprot#readString
            else
              iprot#skip _t4590)
          | 2 -> (if _t4590 = Protocol.T_STRUCT then
              _str4589#set_msg (read_message iprot)
            else
              iprot#skip _t4590)
          | 3 -> (if _t4590 = Protocol.T_STRING then
              _str4589#set_sourceContentId iprot#readString
            else
              iprot#skip _t4590)
          | 4 -> (if _t4590 = Protocol.T_LIST then
              _str4589#set_mids 
                (let (_etype4595,_size4592) = iprot#readListBegin in
                  let _con4596 = (Array.to_list (Array.init _size4592 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con4596)
            else
              iprot#skip _t4590)
          | _ -> iprot#skip _t4590);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4589

class linkAndSendBuddyContentMessageToMids_result =
object (self)
  val mutable _success : sendBuddyMessageResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "linkAndSendBuddyContentMessageToMids_result.success") | Some _x4597 -> _x4597
  method set_success _x4597 = _success <- Some _x4597
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "linkAndSendBuddyContentMessageToMids_result.e") | Some _x4598 -> _x4598
  method set_e _x4598 = _e <- Some _x4598
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "linkAndSendBuddyContentMessageToMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_linkAndSendBuddyContentMessageToMids_result (iprot : Protocol.t) =
  let _str4601 = new linkAndSendBuddyContentMessageToMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4602,_id4603) = iprot#readFieldBegin in
        if _t4602 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4603 with 
          | 0 -> (if _t4602 = Protocol.T_STRUCT then
              _str4601#set_success (read_sendBuddyMessageResult iprot)
            else
              iprot#skip _t4602)
          | 1 -> (if _t4602 = Protocol.T_STRUCT then
              _str4601#set_e (read_talkException iprot)
            else
              iprot#skip _t4602)
          | _ -> iprot#skip _t4602);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4601

class notifyBuddyBlocked_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "notifyBuddyBlocked_args.buddyMid") | Some _x4604 -> _x4604
  method set_buddyMid _x4604 = _buddyMid <- Some _x4604
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  val mutable _blockerMid : string option = None
  method get_blockerMid = _blockerMid
  method grab_blockerMid = match _blockerMid with None->raise (Field_empty "notifyBuddyBlocked_args.blockerMid") | Some _x4605 -> _x4605
  method set_blockerMid _x4605 = _blockerMid <- Some _x4605
  method unset_blockerMid = _blockerMid <- None
  method reset_blockerMid = _blockerMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyBuddyBlocked_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _blockerMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("blockerMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyBuddyBlocked_args (iprot : Protocol.t) =
  let _str4608 = new notifyBuddyBlocked_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4609,_id4610) = iprot#readFieldBegin in
        if _t4609 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4610 with 
          | 1 -> (if _t4609 = Protocol.T_STRING then
              _str4608#set_buddyMid iprot#readString
            else
              iprot#skip _t4609)
          | 2 -> (if _t4609 = Protocol.T_STRING then
              _str4608#set_blockerMid iprot#readString
            else
              iprot#skip _t4609)
          | _ -> iprot#skip _t4609);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4608

class notifyBuddyBlocked_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyBuddyBlocked_result.e") | Some _x4611 -> _x4611
  method set_e _x4611 = _e <- Some _x4611
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyBuddyBlocked_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyBuddyBlocked_result (iprot : Protocol.t) =
  let _str4614 = new notifyBuddyBlocked_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4615,_id4616) = iprot#readFieldBegin in
        if _t4615 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4616 with 
          | 1 -> (if _t4615 = Protocol.T_STRUCT then
              _str4614#set_e (read_talkException iprot)
            else
              iprot#skip _t4615)
          | _ -> iprot#skip _t4615);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4614

class notifyBuddyUnblocked_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "notifyBuddyUnblocked_args.buddyMid") | Some _x4617 -> _x4617
  method set_buddyMid _x4617 = _buddyMid <- Some _x4617
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  val mutable _blockerMid : string option = None
  method get_blockerMid = _blockerMid
  method grab_blockerMid = match _blockerMid with None->raise (Field_empty "notifyBuddyUnblocked_args.blockerMid") | Some _x4618 -> _x4618
  method set_blockerMid _x4618 = _blockerMid <- Some _x4618
  method unset_blockerMid = _blockerMid <- None
  method reset_blockerMid = _blockerMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyBuddyUnblocked_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _blockerMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("blockerMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyBuddyUnblocked_args (iprot : Protocol.t) =
  let _str4621 = new notifyBuddyUnblocked_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4622,_id4623) = iprot#readFieldBegin in
        if _t4622 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4623 with 
          | 1 -> (if _t4622 = Protocol.T_STRING then
              _str4621#set_buddyMid iprot#readString
            else
              iprot#skip _t4622)
          | 2 -> (if _t4622 = Protocol.T_STRING then
              _str4621#set_blockerMid iprot#readString
            else
              iprot#skip _t4622)
          | _ -> iprot#skip _t4622);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4621

class notifyBuddyUnblocked_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyBuddyUnblocked_result.e") | Some _x4624 -> _x4624
  method set_e _x4624 = _e <- Some _x4624
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyBuddyUnblocked_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyBuddyUnblocked_result (iprot : Protocol.t) =
  let _str4627 = new notifyBuddyUnblocked_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4628,_id4629) = iprot#readFieldBegin in
        if _t4628 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4629 with 
          | 1 -> (if _t4628 = Protocol.T_STRUCT then
              _str4627#set_e (read_talkException iprot)
            else
              iprot#skip _t4628)
          | _ -> iprot#skip _t4628);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4627

class registerBuddy_args =
object (self)
  val mutable _buddyId : string option = None
  method get_buddyId = _buddyId
  method grab_buddyId = match _buddyId with None->raise (Field_empty "registerBuddy_args.buddyId") | Some _x4630 -> _x4630
  method set_buddyId _x4630 = _buddyId <- Some _x4630
  method unset_buddyId = _buddyId <- None
  method reset_buddyId = _buddyId <- None

  val mutable _searchId : string option = None
  method get_searchId = _searchId
  method grab_searchId = match _searchId with None->raise (Field_empty "registerBuddy_args.searchId") | Some _x4631 -> _x4631
  method set_searchId _x4631 = _searchId <- Some _x4631
  method unset_searchId = _searchId <- None
  method reset_searchId = _searchId <- None

  val mutable _displayName : string option = None
  method get_displayName = _displayName
  method grab_displayName = match _displayName with None->raise (Field_empty "registerBuddy_args.displayName") | Some _x4632 -> _x4632
  method set_displayName _x4632 = _displayName <- Some _x4632
  method unset_displayName = _displayName <- None
  method reset_displayName = _displayName <- None

  val mutable _statusMeessage : string option = None
  method get_statusMeessage = _statusMeessage
  method grab_statusMeessage = match _statusMeessage with None->raise (Field_empty "registerBuddy_args.statusMeessage") | Some _x4633 -> _x4633
  method set_statusMeessage _x4633 = _statusMeessage <- Some _x4633
  method unset_statusMeessage = _statusMeessage <- None
  method reset_statusMeessage = _statusMeessage <- None

  val mutable _picture : string option = None
  method get_picture = _picture
  method grab_picture = match _picture with None->raise (Field_empty "registerBuddy_args.picture") | Some _x4634 -> _x4634
  method set_picture _x4634 = _picture <- Some _x4634
  method unset_picture = _picture <- None
  method reset_picture = _picture <- None

  val mutable _settings : (string,string) Hashtbl.t option = None
  method get_settings = _settings
  method grab_settings = match _settings with None->raise (Field_empty "registerBuddy_args.settings") | Some _x4635 -> _x4635
  method set_settings _x4635 = _settings <- Some _x4635
  method unset_settings = _settings <- None
  method reset_settings = _settings <- None

  method copy =
      let _new = Oo.copy self in
      if _settings <> None then
        _new#set_settings (Hashtbl.copy self#grab_settings);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerBuddy_args";
    (match _buddyId with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _searchId with None -> () | Some _v -> 
      oprot#writeFieldBegin("searchId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _displayName with None -> () | Some _v -> 
      oprot#writeFieldBegin("displayName",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _statusMeessage with None -> () | Some _v -> 
      oprot#writeFieldBegin("statusMeessage",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _picture with None -> () | Some _v -> 
      oprot#writeFieldBegin("picture",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _settings with None -> () | Some _v -> 
      oprot#writeFieldBegin("settings",Protocol.T_MAP,7);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter4638 -> fun _viter4639 -> 
        oprot#writeString(_kiter4638);
        oprot#writeString(_viter4639);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerBuddy_args (iprot : Protocol.t) =
  let _str4640 = new registerBuddy_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4641,_id4642) = iprot#readFieldBegin in
        if _t4641 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4642 with 
          | 2 -> (if _t4641 = Protocol.T_STRING then
              _str4640#set_buddyId iprot#readString
            else
              iprot#skip _t4641)
          | 3 -> (if _t4641 = Protocol.T_STRING then
              _str4640#set_searchId iprot#readString
            else
              iprot#skip _t4641)
          | 4 -> (if _t4641 = Protocol.T_STRING then
              _str4640#set_displayName iprot#readString
            else
              iprot#skip _t4641)
          | 5 -> (if _t4641 = Protocol.T_STRING then
              _str4640#set_statusMeessage iprot#readString
            else
              iprot#skip _t4641)
          | 6 -> (if _t4641 = Protocol.T_STRING then
              _str4640#set_picture iprot#readString
            else
              iprot#skip _t4641)
          | 7 -> (if _t4641 = Protocol.T_MAP then
              _str4640#set_settings 
                (let (_ktype4644,_vtype4645,_size4643) = iprot#readMapBegin in
                let _con4647 = Hashtbl.create _size4643 in
                  for i = 1 to _size4643 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con4647 _k _v
                  done; iprot#readMapEnd; _con4647)
            else
              iprot#skip _t4641)
          | _ -> iprot#skip _t4641);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4640

class registerBuddy_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerBuddy_result.success") | Some _x4648 -> _x4648
  method set_success _x4648 = _success <- Some _x4648
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerBuddy_result.e") | Some _x4649 -> _x4649
  method set_e _x4649 = _e <- Some _x4649
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerBuddy_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerBuddy_result (iprot : Protocol.t) =
  let _str4652 = new registerBuddy_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4653,_id4654) = iprot#readFieldBegin in
        if _t4653 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4654 with 
          | 0 -> (if _t4653 = Protocol.T_STRING then
              _str4652#set_success iprot#readString
            else
              iprot#skip _t4653)
          | 1 -> (if _t4653 = Protocol.T_STRUCT then
              _str4652#set_e (read_talkException iprot)
            else
              iprot#skip _t4653)
          | _ -> iprot#skip _t4653);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4652

class registerBuddyAdmin_args =
object (self)
  val mutable _buddyId : string option = None
  method get_buddyId = _buddyId
  method grab_buddyId = match _buddyId with None->raise (Field_empty "registerBuddyAdmin_args.buddyId") | Some _x4655 -> _x4655
  method set_buddyId _x4655 = _buddyId <- Some _x4655
  method unset_buddyId = _buddyId <- None
  method reset_buddyId = _buddyId <- None

  val mutable _searchId : string option = None
  method get_searchId = _searchId
  method grab_searchId = match _searchId with None->raise (Field_empty "registerBuddyAdmin_args.searchId") | Some _x4656 -> _x4656
  method set_searchId _x4656 = _searchId <- Some _x4656
  method unset_searchId = _searchId <- None
  method reset_searchId = _searchId <- None

  val mutable _displayName : string option = None
  method get_displayName = _displayName
  method grab_displayName = match _displayName with None->raise (Field_empty "registerBuddyAdmin_args.displayName") | Some _x4657 -> _x4657
  method set_displayName _x4657 = _displayName <- Some _x4657
  method unset_displayName = _displayName <- None
  method reset_displayName = _displayName <- None

  val mutable _statusMessage : string option = None
  method get_statusMessage = _statusMessage
  method grab_statusMessage = match _statusMessage with None->raise (Field_empty "registerBuddyAdmin_args.statusMessage") | Some _x4658 -> _x4658
  method set_statusMessage _x4658 = _statusMessage <- Some _x4658
  method unset_statusMessage = _statusMessage <- None
  method reset_statusMessage = _statusMessage <- None

  val mutable _picture : string option = None
  method get_picture = _picture
  method grab_picture = match _picture with None->raise (Field_empty "registerBuddyAdmin_args.picture") | Some _x4659 -> _x4659
  method set_picture _x4659 = _picture <- Some _x4659
  method unset_picture = _picture <- None
  method reset_picture = _picture <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerBuddyAdmin_args";
    (match _buddyId with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _searchId with None -> () | Some _v -> 
      oprot#writeFieldBegin("searchId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _displayName with None -> () | Some _v -> 
      oprot#writeFieldBegin("displayName",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _statusMessage with None -> () | Some _v -> 
      oprot#writeFieldBegin("statusMessage",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _picture with None -> () | Some _v -> 
      oprot#writeFieldBegin("picture",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerBuddyAdmin_args (iprot : Protocol.t) =
  let _str4662 = new registerBuddyAdmin_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4663,_id4664) = iprot#readFieldBegin in
        if _t4663 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4664 with 
          | 2 -> (if _t4663 = Protocol.T_STRING then
              _str4662#set_buddyId iprot#readString
            else
              iprot#skip _t4663)
          | 3 -> (if _t4663 = Protocol.T_STRING then
              _str4662#set_searchId iprot#readString
            else
              iprot#skip _t4663)
          | 4 -> (if _t4663 = Protocol.T_STRING then
              _str4662#set_displayName iprot#readString
            else
              iprot#skip _t4663)
          | 5 -> (if _t4663 = Protocol.T_STRING then
              _str4662#set_statusMessage iprot#readString
            else
              iprot#skip _t4663)
          | 6 -> (if _t4663 = Protocol.T_STRING then
              _str4662#set_picture iprot#readString
            else
              iprot#skip _t4663)
          | _ -> iprot#skip _t4663);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4662

class registerBuddyAdmin_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerBuddyAdmin_result.success") | Some _x4665 -> _x4665
  method set_success _x4665 = _success <- Some _x4665
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerBuddyAdmin_result.e") | Some _x4666 -> _x4666
  method set_e _x4666 = _e <- Some _x4666
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerBuddyAdmin_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerBuddyAdmin_result (iprot : Protocol.t) =
  let _str4669 = new registerBuddyAdmin_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4670,_id4671) = iprot#readFieldBegin in
        if _t4670 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4671 with 
          | 0 -> (if _t4670 = Protocol.T_STRING then
              _str4669#set_success iprot#readString
            else
              iprot#skip _t4670)
          | 1 -> (if _t4670 = Protocol.T_STRUCT then
              _str4669#set_e (read_talkException iprot)
            else
              iprot#skip _t4670)
          | _ -> iprot#skip _t4670);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4669

class reissueContactTicket_args =
object (self)
  val mutable _expirationTime : Int64.t option = None
  method get_expirationTime = _expirationTime
  method grab_expirationTime = match _expirationTime with None->raise (Field_empty "reissueContactTicket_args.expirationTime") | Some _x4672 -> _x4672
  method set_expirationTime _x4672 = _expirationTime <- Some _x4672
  method unset_expirationTime = _expirationTime <- None
  method reset_expirationTime = _expirationTime <- None

  val mutable _maxUseCount : Int32.t option = None
  method get_maxUseCount = _maxUseCount
  method grab_maxUseCount = match _maxUseCount with None->raise (Field_empty "reissueContactTicket_args.maxUseCount") | Some _x4673 -> _x4673
  method set_maxUseCount _x4673 = _maxUseCount <- Some _x4673
  method unset_maxUseCount = _maxUseCount <- None
  method reset_maxUseCount = _maxUseCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reissueContactTicket_args";
    (match _expirationTime with None -> () | Some _v -> 
      oprot#writeFieldBegin("expirationTime",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _maxUseCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("maxUseCount",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reissueContactTicket_args (iprot : Protocol.t) =
  let _str4676 = new reissueContactTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4677,_id4678) = iprot#readFieldBegin in
        if _t4677 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4678 with 
          | 3 -> (if _t4677 = Protocol.T_I64 then
              _str4676#set_expirationTime iprot#readI64
            else
              iprot#skip _t4677)
          | 4 -> (if _t4677 = Protocol.T_I32 then
              _str4676#set_maxUseCount iprot#readI32
            else
              iprot#skip _t4677)
          | _ -> iprot#skip _t4677);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4676

class reissueContactTicket_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reissueContactTicket_result.success") | Some _x4679 -> _x4679
  method set_success _x4679 = _success <- Some _x4679
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reissueContactTicket_result.e") | Some _x4680 -> _x4680
  method set_e _x4680 = _e <- Some _x4680
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reissueContactTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reissueContactTicket_result (iprot : Protocol.t) =
  let _str4683 = new reissueContactTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4684,_id4685) = iprot#readFieldBegin in
        if _t4684 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4685 with 
          | 0 -> (if _t4684 = Protocol.T_STRING then
              _str4683#set_success iprot#readString
            else
              iprot#skip _t4684)
          | 1 -> (if _t4684 = Protocol.T_STRUCT then
              _str4683#set_e (read_talkException iprot)
            else
              iprot#skip _t4684)
          | _ -> iprot#skip _t4684);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4683

class removeBuddyMember_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "removeBuddyMember_args.requestId") | Some _x4686 -> _x4686
  method set_requestId _x4686 = _requestId <- Some _x4686
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _userMid : string option = None
  method get_userMid = _userMid
  method grab_userMid = match _userMid with None->raise (Field_empty "removeBuddyMember_args.userMid") | Some _x4687 -> _x4687
  method set_userMid _x4687 = _userMid <- Some _x4687
  method unset_userMid = _userMid <- None
  method reset_userMid = _userMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeBuddyMember_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeBuddyMember_args (iprot : Protocol.t) =
  let _str4690 = new removeBuddyMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4691,_id4692) = iprot#readFieldBegin in
        if _t4691 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4692 with 
          | 1 -> (if _t4691 = Protocol.T_STRING then
              _str4690#set_requestId iprot#readString
            else
              iprot#skip _t4691)
          | 2 -> (if _t4691 = Protocol.T_STRING then
              _str4690#set_userMid iprot#readString
            else
              iprot#skip _t4691)
          | _ -> iprot#skip _t4691);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4690

class removeBuddyMember_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeBuddyMember_result.e") | Some _x4693 -> _x4693
  method set_e _x4693 = _e <- Some _x4693
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeBuddyMember_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeBuddyMember_result (iprot : Protocol.t) =
  let _str4696 = new removeBuddyMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4697,_id4698) = iprot#readFieldBegin in
        if _t4697 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4698 with 
          | 1 -> (if _t4697 = Protocol.T_STRUCT then
              _str4696#set_e (read_talkException iprot)
            else
              iprot#skip _t4697)
          | _ -> iprot#skip _t4697);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4696

class removeBuddyMembers_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "removeBuddyMembers_args.requestId") | Some _x4699 -> _x4699
  method set_requestId _x4699 = _requestId <- Some _x4699
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _userMids : string list option = None
  method get_userMids = _userMids
  method grab_userMids = match _userMids with None->raise (Field_empty "removeBuddyMembers_args.userMids") | Some _x4700 -> _x4700
  method set_userMids _x4700 = _userMids <- Some _x4700
  method unset_userMids = _userMids <- None
  method reset_userMids = _userMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeBuddyMembers_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("userMids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter4703 ->         oprot#writeString(_iter4703);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeBuddyMembers_args (iprot : Protocol.t) =
  let _str4704 = new removeBuddyMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4705,_id4706) = iprot#readFieldBegin in
        if _t4705 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4706 with 
          | 1 -> (if _t4705 = Protocol.T_STRING then
              _str4704#set_requestId iprot#readString
            else
              iprot#skip _t4705)
          | 2 -> (if _t4705 = Protocol.T_LIST then
              _str4704#set_userMids 
                (let (_etype4710,_size4707) = iprot#readListBegin in
                  let _con4711 = (Array.to_list (Array.init _size4707 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con4711)
            else
              iprot#skip _t4705)
          | _ -> iprot#skip _t4705);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4704

class removeBuddyMembers_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeBuddyMembers_result.e") | Some _x4712 -> _x4712
  method set_e _x4712 = _e <- Some _x4712
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeBuddyMembers_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeBuddyMembers_result (iprot : Protocol.t) =
  let _str4715 = new removeBuddyMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4716,_id4717) = iprot#readFieldBegin in
        if _t4716 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4717 with 
          | 1 -> (if _t4716 = Protocol.T_STRUCT then
              _str4715#set_e (read_talkException iprot)
            else
              iprot#skip _t4716)
          | _ -> iprot#skip _t4716);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4715

class sendBuddyContentMessageToAll_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "sendBuddyContentMessageToAll_args.requestId") | Some _x4718 -> _x4718
  method set_requestId _x4718 = _requestId <- Some _x4718
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "sendBuddyContentMessageToAll_args.msg") | Some _x4719 -> _x4719
  method set_msg _x4719 = _msg <- Some _x4719
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  val mutable _content : string option = None
  method get_content = _content
  method grab_content = match _content with None->raise (Field_empty "sendBuddyContentMessageToAll_args.content") | Some _x4720 -> _x4720
  method set_content _x4720 = _content <- Some _x4720
  method unset_content = _content <- None
  method reset_content = _content <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyContentMessageToAll_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _content with None -> () | Some _v -> 
      oprot#writeFieldBegin("content",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyContentMessageToAll_args (iprot : Protocol.t) =
  let _str4723 = new sendBuddyContentMessageToAll_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4724,_id4725) = iprot#readFieldBegin in
        if _t4724 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4725 with 
          | 1 -> (if _t4724 = Protocol.T_STRING then
              _str4723#set_requestId iprot#readString
            else
              iprot#skip _t4724)
          | 2 -> (if _t4724 = Protocol.T_STRUCT then
              _str4723#set_msg (read_message iprot)
            else
              iprot#skip _t4724)
          | 3 -> (if _t4724 = Protocol.T_STRING then
              _str4723#set_content iprot#readString
            else
              iprot#skip _t4724)
          | _ -> iprot#skip _t4724);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4723

class sendBuddyContentMessageToAll_result =
object (self)
  val mutable _success : sendBuddyMessageResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendBuddyContentMessageToAll_result.success") | Some _x4726 -> _x4726
  method set_success _x4726 = _success <- Some _x4726
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendBuddyContentMessageToAll_result.e") | Some _x4727 -> _x4727
  method set_e _x4727 = _e <- Some _x4727
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyContentMessageToAll_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyContentMessageToAll_result (iprot : Protocol.t) =
  let _str4730 = new sendBuddyContentMessageToAll_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4731,_id4732) = iprot#readFieldBegin in
        if _t4731 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4732 with 
          | 0 -> (if _t4731 = Protocol.T_STRUCT then
              _str4730#set_success (read_sendBuddyMessageResult iprot)
            else
              iprot#skip _t4731)
          | 1 -> (if _t4731 = Protocol.T_STRUCT then
              _str4730#set_e (read_talkException iprot)
            else
              iprot#skip _t4731)
          | _ -> iprot#skip _t4731);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4730

class sendBuddyContentMessageToAllAsync_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "sendBuddyContentMessageToAllAsync_args.requestId") | Some _x4733 -> _x4733
  method set_requestId _x4733 = _requestId <- Some _x4733
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "sendBuddyContentMessageToAllAsync_args.msg") | Some _x4734 -> _x4734
  method set_msg _x4734 = _msg <- Some _x4734
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  val mutable _content : string option = None
  method get_content = _content
  method grab_content = match _content with None->raise (Field_empty "sendBuddyContentMessageToAllAsync_args.content") | Some _x4735 -> _x4735
  method set_content _x4735 = _content <- Some _x4735
  method unset_content = _content <- None
  method reset_content = _content <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyContentMessageToAllAsync_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _content with None -> () | Some _v -> 
      oprot#writeFieldBegin("content",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyContentMessageToAllAsync_args (iprot : Protocol.t) =
  let _str4738 = new sendBuddyContentMessageToAllAsync_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4739,_id4740) = iprot#readFieldBegin in
        if _t4739 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4740 with 
          | 1 -> (if _t4739 = Protocol.T_STRING then
              _str4738#set_requestId iprot#readString
            else
              iprot#skip _t4739)
          | 2 -> (if _t4739 = Protocol.T_STRUCT then
              _str4738#set_msg (read_message iprot)
            else
              iprot#skip _t4739)
          | 3 -> (if _t4739 = Protocol.T_STRING then
              _str4738#set_content iprot#readString
            else
              iprot#skip _t4739)
          | _ -> iprot#skip _t4739);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4738

class sendBuddyContentMessageToAllAsync_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendBuddyContentMessageToAllAsync_result.success") | Some _x4741 -> _x4741
  method set_success _x4741 = _success <- Some _x4741
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendBuddyContentMessageToAllAsync_result.e") | Some _x4742 -> _x4742
  method set_e _x4742 = _e <- Some _x4742
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyContentMessageToAllAsync_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyContentMessageToAllAsync_result (iprot : Protocol.t) =
  let _str4745 = new sendBuddyContentMessageToAllAsync_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4746,_id4747) = iprot#readFieldBegin in
        if _t4746 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4747 with 
          | 0 -> (if _t4746 = Protocol.T_STRING then
              _str4745#set_success iprot#readString
            else
              iprot#skip _t4746)
          | 1 -> (if _t4746 = Protocol.T_STRUCT then
              _str4745#set_e (read_talkException iprot)
            else
              iprot#skip _t4746)
          | _ -> iprot#skip _t4746);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4745

class sendBuddyContentMessageToMids_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "sendBuddyContentMessageToMids_args.requestId") | Some _x4748 -> _x4748
  method set_requestId _x4748 = _requestId <- Some _x4748
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "sendBuddyContentMessageToMids_args.msg") | Some _x4749 -> _x4749
  method set_msg _x4749 = _msg <- Some _x4749
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  val mutable _content : string option = None
  method get_content = _content
  method grab_content = match _content with None->raise (Field_empty "sendBuddyContentMessageToMids_args.content") | Some _x4750 -> _x4750
  method set_content _x4750 = _content <- Some _x4750
  method unset_content = _content <- None
  method reset_content = _content <- None

  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "sendBuddyContentMessageToMids_args.mids") | Some _x4751 -> _x4751
  method set_mids _x4751 = _mids <- Some _x4751
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyContentMessageToMids_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _content with None -> () | Some _v -> 
      oprot#writeFieldBegin("content",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter4754 ->         oprot#writeString(_iter4754);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyContentMessageToMids_args (iprot : Protocol.t) =
  let _str4755 = new sendBuddyContentMessageToMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4756,_id4757) = iprot#readFieldBegin in
        if _t4756 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4757 with 
          | 1 -> (if _t4756 = Protocol.T_STRING then
              _str4755#set_requestId iprot#readString
            else
              iprot#skip _t4756)
          | 2 -> (if _t4756 = Protocol.T_STRUCT then
              _str4755#set_msg (read_message iprot)
            else
              iprot#skip _t4756)
          | 3 -> (if _t4756 = Protocol.T_STRING then
              _str4755#set_content iprot#readString
            else
              iprot#skip _t4756)
          | 4 -> (if _t4756 = Protocol.T_LIST then
              _str4755#set_mids 
                (let (_etype4761,_size4758) = iprot#readListBegin in
                  let _con4762 = (Array.to_list (Array.init _size4758 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con4762)
            else
              iprot#skip _t4756)
          | _ -> iprot#skip _t4756);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4755

class sendBuddyContentMessageToMids_result =
object (self)
  val mutable _success : sendBuddyMessageResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendBuddyContentMessageToMids_result.success") | Some _x4763 -> _x4763
  method set_success _x4763 = _success <- Some _x4763
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendBuddyContentMessageToMids_result.e") | Some _x4764 -> _x4764
  method set_e _x4764 = _e <- Some _x4764
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyContentMessageToMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyContentMessageToMids_result (iprot : Protocol.t) =
  let _str4767 = new sendBuddyContentMessageToMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4768,_id4769) = iprot#readFieldBegin in
        if _t4768 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4769 with 
          | 0 -> (if _t4768 = Protocol.T_STRUCT then
              _str4767#set_success (read_sendBuddyMessageResult iprot)
            else
              iprot#skip _t4768)
          | 1 -> (if _t4768 = Protocol.T_STRUCT then
              _str4767#set_e (read_talkException iprot)
            else
              iprot#skip _t4768)
          | _ -> iprot#skip _t4768);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4767

class sendBuddyContentMessageToMidsAsync_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "sendBuddyContentMessageToMidsAsync_args.requestId") | Some _x4770 -> _x4770
  method set_requestId _x4770 = _requestId <- Some _x4770
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "sendBuddyContentMessageToMidsAsync_args.msg") | Some _x4771 -> _x4771
  method set_msg _x4771 = _msg <- Some _x4771
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  val mutable _content : string option = None
  method get_content = _content
  method grab_content = match _content with None->raise (Field_empty "sendBuddyContentMessageToMidsAsync_args.content") | Some _x4772 -> _x4772
  method set_content _x4772 = _content <- Some _x4772
  method unset_content = _content <- None
  method reset_content = _content <- None

  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "sendBuddyContentMessageToMidsAsync_args.mids") | Some _x4773 -> _x4773
  method set_mids _x4773 = _mids <- Some _x4773
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyContentMessageToMidsAsync_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _content with None -> () | Some _v -> 
      oprot#writeFieldBegin("content",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter4776 ->         oprot#writeString(_iter4776);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyContentMessageToMidsAsync_args (iprot : Protocol.t) =
  let _str4777 = new sendBuddyContentMessageToMidsAsync_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4778,_id4779) = iprot#readFieldBegin in
        if _t4778 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4779 with 
          | 1 -> (if _t4778 = Protocol.T_STRING then
              _str4777#set_requestId iprot#readString
            else
              iprot#skip _t4778)
          | 2 -> (if _t4778 = Protocol.T_STRUCT then
              _str4777#set_msg (read_message iprot)
            else
              iprot#skip _t4778)
          | 3 -> (if _t4778 = Protocol.T_STRING then
              _str4777#set_content iprot#readString
            else
              iprot#skip _t4778)
          | 4 -> (if _t4778 = Protocol.T_LIST then
              _str4777#set_mids 
                (let (_etype4783,_size4780) = iprot#readListBegin in
                  let _con4784 = (Array.to_list (Array.init _size4780 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con4784)
            else
              iprot#skip _t4778)
          | _ -> iprot#skip _t4778);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4777

class sendBuddyContentMessageToMidsAsync_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendBuddyContentMessageToMidsAsync_result.success") | Some _x4785 -> _x4785
  method set_success _x4785 = _success <- Some _x4785
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendBuddyContentMessageToMidsAsync_result.e") | Some _x4786 -> _x4786
  method set_e _x4786 = _e <- Some _x4786
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyContentMessageToMidsAsync_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyContentMessageToMidsAsync_result (iprot : Protocol.t) =
  let _str4789 = new sendBuddyContentMessageToMidsAsync_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4790,_id4791) = iprot#readFieldBegin in
        if _t4790 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4791 with 
          | 0 -> (if _t4790 = Protocol.T_STRING then
              _str4789#set_success iprot#readString
            else
              iprot#skip _t4790)
          | 1 -> (if _t4790 = Protocol.T_STRUCT then
              _str4789#set_e (read_talkException iprot)
            else
              iprot#skip _t4790)
          | _ -> iprot#skip _t4790);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4789

class sendBuddyMessageToAll_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "sendBuddyMessageToAll_args.requestId") | Some _x4792 -> _x4792
  method set_requestId _x4792 = _requestId <- Some _x4792
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "sendBuddyMessageToAll_args.msg") | Some _x4793 -> _x4793
  method set_msg _x4793 = _msg <- Some _x4793
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyMessageToAll_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyMessageToAll_args (iprot : Protocol.t) =
  let _str4796 = new sendBuddyMessageToAll_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4797,_id4798) = iprot#readFieldBegin in
        if _t4797 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4798 with 
          | 1 -> (if _t4797 = Protocol.T_STRING then
              _str4796#set_requestId iprot#readString
            else
              iprot#skip _t4797)
          | 2 -> (if _t4797 = Protocol.T_STRUCT then
              _str4796#set_msg (read_message iprot)
            else
              iprot#skip _t4797)
          | _ -> iprot#skip _t4797);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4796

class sendBuddyMessageToAll_result =
object (self)
  val mutable _success : sendBuddyMessageResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendBuddyMessageToAll_result.success") | Some _x4799 -> _x4799
  method set_success _x4799 = _success <- Some _x4799
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendBuddyMessageToAll_result.e") | Some _x4800 -> _x4800
  method set_e _x4800 = _e <- Some _x4800
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyMessageToAll_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyMessageToAll_result (iprot : Protocol.t) =
  let _str4803 = new sendBuddyMessageToAll_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4804,_id4805) = iprot#readFieldBegin in
        if _t4804 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4805 with 
          | 0 -> (if _t4804 = Protocol.T_STRUCT then
              _str4803#set_success (read_sendBuddyMessageResult iprot)
            else
              iprot#skip _t4804)
          | 1 -> (if _t4804 = Protocol.T_STRUCT then
              _str4803#set_e (read_talkException iprot)
            else
              iprot#skip _t4804)
          | _ -> iprot#skip _t4804);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4803

class sendBuddyMessageToAllAsync_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "sendBuddyMessageToAllAsync_args.requestId") | Some _x4806 -> _x4806
  method set_requestId _x4806 = _requestId <- Some _x4806
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "sendBuddyMessageToAllAsync_args.msg") | Some _x4807 -> _x4807
  method set_msg _x4807 = _msg <- Some _x4807
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyMessageToAllAsync_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyMessageToAllAsync_args (iprot : Protocol.t) =
  let _str4810 = new sendBuddyMessageToAllAsync_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4811,_id4812) = iprot#readFieldBegin in
        if _t4811 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4812 with 
          | 1 -> (if _t4811 = Protocol.T_STRING then
              _str4810#set_requestId iprot#readString
            else
              iprot#skip _t4811)
          | 2 -> (if _t4811 = Protocol.T_STRUCT then
              _str4810#set_msg (read_message iprot)
            else
              iprot#skip _t4811)
          | _ -> iprot#skip _t4811);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4810

class sendBuddyMessageToAllAsync_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendBuddyMessageToAllAsync_result.success") | Some _x4813 -> _x4813
  method set_success _x4813 = _success <- Some _x4813
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendBuddyMessageToAllAsync_result.e") | Some _x4814 -> _x4814
  method set_e _x4814 = _e <- Some _x4814
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyMessageToAllAsync_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyMessageToAllAsync_result (iprot : Protocol.t) =
  let _str4817 = new sendBuddyMessageToAllAsync_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4818,_id4819) = iprot#readFieldBegin in
        if _t4818 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4819 with 
          | 0 -> (if _t4818 = Protocol.T_STRING then
              _str4817#set_success iprot#readString
            else
              iprot#skip _t4818)
          | 1 -> (if _t4818 = Protocol.T_STRUCT then
              _str4817#set_e (read_talkException iprot)
            else
              iprot#skip _t4818)
          | _ -> iprot#skip _t4818);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4817

class sendBuddyMessageToMids_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "sendBuddyMessageToMids_args.requestId") | Some _x4820 -> _x4820
  method set_requestId _x4820 = _requestId <- Some _x4820
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "sendBuddyMessageToMids_args.msg") | Some _x4821 -> _x4821
  method set_msg _x4821 = _msg <- Some _x4821
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "sendBuddyMessageToMids_args.mids") | Some _x4822 -> _x4822
  method set_mids _x4822 = _mids <- Some _x4822
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyMessageToMids_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter4825 ->         oprot#writeString(_iter4825);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyMessageToMids_args (iprot : Protocol.t) =
  let _str4826 = new sendBuddyMessageToMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4827,_id4828) = iprot#readFieldBegin in
        if _t4827 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4828 with 
          | 1 -> (if _t4827 = Protocol.T_STRING then
              _str4826#set_requestId iprot#readString
            else
              iprot#skip _t4827)
          | 2 -> (if _t4827 = Protocol.T_STRUCT then
              _str4826#set_msg (read_message iprot)
            else
              iprot#skip _t4827)
          | 3 -> (if _t4827 = Protocol.T_LIST then
              _str4826#set_mids 
                (let (_etype4832,_size4829) = iprot#readListBegin in
                  let _con4833 = (Array.to_list (Array.init _size4829 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con4833)
            else
              iprot#skip _t4827)
          | _ -> iprot#skip _t4827);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4826

class sendBuddyMessageToMids_result =
object (self)
  val mutable _success : sendBuddyMessageResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendBuddyMessageToMids_result.success") | Some _x4834 -> _x4834
  method set_success _x4834 = _success <- Some _x4834
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendBuddyMessageToMids_result.e") | Some _x4835 -> _x4835
  method set_e _x4835 = _e <- Some _x4835
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyMessageToMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyMessageToMids_result (iprot : Protocol.t) =
  let _str4838 = new sendBuddyMessageToMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4839,_id4840) = iprot#readFieldBegin in
        if _t4839 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4840 with 
          | 0 -> (if _t4839 = Protocol.T_STRUCT then
              _str4838#set_success (read_sendBuddyMessageResult iprot)
            else
              iprot#skip _t4839)
          | 1 -> (if _t4839 = Protocol.T_STRUCT then
              _str4838#set_e (read_talkException iprot)
            else
              iprot#skip _t4839)
          | _ -> iprot#skip _t4839);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4838

class sendBuddyMessageToMidsAsync_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "sendBuddyMessageToMidsAsync_args.requestId") | Some _x4841 -> _x4841
  method set_requestId _x4841 = _requestId <- Some _x4841
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "sendBuddyMessageToMidsAsync_args.msg") | Some _x4842 -> _x4842
  method set_msg _x4842 = _msg <- Some _x4842
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "sendBuddyMessageToMidsAsync_args.mids") | Some _x4843 -> _x4843
  method set_mids _x4843 = _mids <- Some _x4843
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyMessageToMidsAsync_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter4846 ->         oprot#writeString(_iter4846);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyMessageToMidsAsync_args (iprot : Protocol.t) =
  let _str4847 = new sendBuddyMessageToMidsAsync_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4848,_id4849) = iprot#readFieldBegin in
        if _t4848 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4849 with 
          | 1 -> (if _t4848 = Protocol.T_STRING then
              _str4847#set_requestId iprot#readString
            else
              iprot#skip _t4848)
          | 2 -> (if _t4848 = Protocol.T_STRUCT then
              _str4847#set_msg (read_message iprot)
            else
              iprot#skip _t4848)
          | 3 -> (if _t4848 = Protocol.T_LIST then
              _str4847#set_mids 
                (let (_etype4853,_size4850) = iprot#readListBegin in
                  let _con4854 = (Array.to_list (Array.init _size4850 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con4854)
            else
              iprot#skip _t4848)
          | _ -> iprot#skip _t4848);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4847

class sendBuddyMessageToMidsAsync_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendBuddyMessageToMidsAsync_result.success") | Some _x4855 -> _x4855
  method set_success _x4855 = _success <- Some _x4855
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendBuddyMessageToMidsAsync_result.e") | Some _x4856 -> _x4856
  method set_e _x4856 = _e <- Some _x4856
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyMessageToMidsAsync_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyMessageToMidsAsync_result (iprot : Protocol.t) =
  let _str4859 = new sendBuddyMessageToMidsAsync_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4860,_id4861) = iprot#readFieldBegin in
        if _t4860 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4861 with 
          | 0 -> (if _t4860 = Protocol.T_STRING then
              _str4859#set_success iprot#readString
            else
              iprot#skip _t4860)
          | 1 -> (if _t4860 = Protocol.T_STRUCT then
              _str4859#set_e (read_talkException iprot)
            else
              iprot#skip _t4860)
          | _ -> iprot#skip _t4860);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4859

class sendIndividualEventToAllAsync_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "sendIndividualEventToAllAsync_args.requestId") | Some _x4862 -> _x4862
  method set_requestId _x4862 = _requestId <- Some _x4862
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "sendIndividualEventToAllAsync_args.buddyMid") | Some _x4863 -> _x4863
  method set_buddyMid _x4863 = _buddyMid <- Some _x4863
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  val mutable _notificationStatus : NotificationStatus.t option = None
  method get_notificationStatus = _notificationStatus
  method grab_notificationStatus = match _notificationStatus with None->raise (Field_empty "sendIndividualEventToAllAsync_args.notificationStatus") | Some _x4864 -> _x4864
  method set_notificationStatus _x4864 = _notificationStatus <- Some _x4864
  method unset_notificationStatus = _notificationStatus <- None
  method reset_notificationStatus = _notificationStatus <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendIndividualEventToAllAsync_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _notificationStatus with None -> () | Some _v -> 
      oprot#writeFieldBegin("notificationStatus",Protocol.T_I32,3);
      oprot#writeI32(NotificationStatus.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendIndividualEventToAllAsync_args (iprot : Protocol.t) =
  let _str4867 = new sendIndividualEventToAllAsync_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4868,_id4869) = iprot#readFieldBegin in
        if _t4868 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4869 with 
          | 1 -> (if _t4868 = Protocol.T_STRING then
              _str4867#set_requestId iprot#readString
            else
              iprot#skip _t4868)
          | 2 -> (if _t4868 = Protocol.T_STRING then
              _str4867#set_buddyMid iprot#readString
            else
              iprot#skip _t4868)
          | 3 -> (if _t4868 = Protocol.T_I32 then
              _str4867#set_notificationStatus (NotificationStatus.of_i iprot#readI32)
            else
              iprot#skip _t4868)
          | _ -> iprot#skip _t4868);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4867

class sendIndividualEventToAllAsync_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendIndividualEventToAllAsync_result.e") | Some _x4870 -> _x4870
  method set_e _x4870 = _e <- Some _x4870
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendIndividualEventToAllAsync_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendIndividualEventToAllAsync_result (iprot : Protocol.t) =
  let _str4873 = new sendIndividualEventToAllAsync_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4874,_id4875) = iprot#readFieldBegin in
        if _t4874 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4875 with 
          | 1 -> (if _t4874 = Protocol.T_STRUCT then
              _str4873#set_e (read_talkException iprot)
            else
              iprot#skip _t4874)
          | _ -> iprot#skip _t4874);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4873

class setBuddyOnAir_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "setBuddyOnAir_args.requestId") | Some _x4876 -> _x4876
  method set_requestId _x4876 = _requestId <- Some _x4876
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _onAir : bool option = None
  method get_onAir = _onAir
  method grab_onAir = match _onAir with None->raise (Field_empty "setBuddyOnAir_args.onAir") | Some _x4877 -> _x4877
  method set_onAir _x4877 = _onAir <- Some _x4877
  method unset_onAir = _onAir <- None
  method reset_onAir = _onAir <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setBuddyOnAir_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _onAir with None -> () | Some _v -> 
      oprot#writeFieldBegin("onAir",Protocol.T_BOOL,2);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setBuddyOnAir_args (iprot : Protocol.t) =
  let _str4880 = new setBuddyOnAir_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4881,_id4882) = iprot#readFieldBegin in
        if _t4881 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4882 with 
          | 1 -> (if _t4881 = Protocol.T_STRING then
              _str4880#set_requestId iprot#readString
            else
              iprot#skip _t4881)
          | 2 -> (if _t4881 = Protocol.T_BOOL then
              _str4880#set_onAir iprot#readBool
            else
              iprot#skip _t4881)
          | _ -> iprot#skip _t4881);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4880

class setBuddyOnAir_result =
object (self)
  val mutable _success : setBuddyOnAirResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "setBuddyOnAir_result.success") | Some _x4883 -> _x4883
  method set_success _x4883 = _success <- Some _x4883
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "setBuddyOnAir_result.e") | Some _x4884 -> _x4884
  method set_e _x4884 = _e <- Some _x4884
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setBuddyOnAir_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setBuddyOnAir_result (iprot : Protocol.t) =
  let _str4887 = new setBuddyOnAir_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4888,_id4889) = iprot#readFieldBegin in
        if _t4888 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4889 with 
          | 0 -> (if _t4888 = Protocol.T_STRUCT then
              _str4887#set_success (read_setBuddyOnAirResult iprot)
            else
              iprot#skip _t4888)
          | 1 -> (if _t4888 = Protocol.T_STRUCT then
              _str4887#set_e (read_talkException iprot)
            else
              iprot#skip _t4888)
          | _ -> iprot#skip _t4888);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4887

class setBuddyOnAirAsync_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "setBuddyOnAirAsync_args.requestId") | Some _x4890 -> _x4890
  method set_requestId _x4890 = _requestId <- Some _x4890
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _onAir : bool option = None
  method get_onAir = _onAir
  method grab_onAir = match _onAir with None->raise (Field_empty "setBuddyOnAirAsync_args.onAir") | Some _x4891 -> _x4891
  method set_onAir _x4891 = _onAir <- Some _x4891
  method unset_onAir = _onAir <- None
  method reset_onAir = _onAir <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setBuddyOnAirAsync_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _onAir with None -> () | Some _v -> 
      oprot#writeFieldBegin("onAir",Protocol.T_BOOL,2);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setBuddyOnAirAsync_args (iprot : Protocol.t) =
  let _str4894 = new setBuddyOnAirAsync_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4895,_id4896) = iprot#readFieldBegin in
        if _t4895 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4896 with 
          | 1 -> (if _t4895 = Protocol.T_STRING then
              _str4894#set_requestId iprot#readString
            else
              iprot#skip _t4895)
          | 2 -> (if _t4895 = Protocol.T_BOOL then
              _str4894#set_onAir iprot#readBool
            else
              iprot#skip _t4895)
          | _ -> iprot#skip _t4895);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4894

class setBuddyOnAirAsync_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "setBuddyOnAirAsync_result.success") | Some _x4897 -> _x4897
  method set_success _x4897 = _success <- Some _x4897
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "setBuddyOnAirAsync_result.e") | Some _x4898 -> _x4898
  method set_e _x4898 = _e <- Some _x4898
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setBuddyOnAirAsync_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setBuddyOnAirAsync_result (iprot : Protocol.t) =
  let _str4901 = new setBuddyOnAirAsync_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4902,_id4903) = iprot#readFieldBegin in
        if _t4902 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4903 with 
          | 0 -> (if _t4902 = Protocol.T_STRING then
              _str4901#set_success iprot#readString
            else
              iprot#skip _t4902)
          | 1 -> (if _t4902 = Protocol.T_STRUCT then
              _str4901#set_e (read_talkException iprot)
            else
              iprot#skip _t4902)
          | _ -> iprot#skip _t4902);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4901

class storeMessage_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "storeMessage_args.requestId") | Some _x4904 -> _x4904
  method set_requestId _x4904 = _requestId <- Some _x4904
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _messageRequest : buddyMessageRequest option = None
  method get_messageRequest = _messageRequest
  method grab_messageRequest = match _messageRequest with None->raise (Field_empty "storeMessage_args.messageRequest") | Some _x4905 -> _x4905
  method set_messageRequest _x4905 = _messageRequest <- Some _x4905
  method unset_messageRequest = _messageRequest <- None
  method reset_messageRequest = _messageRequest <- None

  method copy =
      let _new = Oo.copy self in
      if _messageRequest <> None then
        _new#set_messageRequest self#grab_messageRequest#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "storeMessage_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageRequest with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageRequest",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_storeMessage_args (iprot : Protocol.t) =
  let _str4908 = new storeMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4909,_id4910) = iprot#readFieldBegin in
        if _t4909 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4910 with 
          | 1 -> (if _t4909 = Protocol.T_STRING then
              _str4908#set_requestId iprot#readString
            else
              iprot#skip _t4909)
          | 2 -> (if _t4909 = Protocol.T_STRUCT then
              _str4908#set_messageRequest (read_buddyMessageRequest iprot)
            else
              iprot#skip _t4909)
          | _ -> iprot#skip _t4909);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4908

class storeMessage_result =
object (self)
  val mutable _success : sendBuddyMessageResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "storeMessage_result.success") | Some _x4911 -> _x4911
  method set_success _x4911 = _success <- Some _x4911
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "storeMessage_result.e") | Some _x4912 -> _x4912
  method set_e _x4912 = _e <- Some _x4912
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "storeMessage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_storeMessage_result (iprot : Protocol.t) =
  let _str4915 = new storeMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4916,_id4917) = iprot#readFieldBegin in
        if _t4916 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4917 with 
          | 0 -> (if _t4916 = Protocol.T_STRUCT then
              _str4915#set_success (read_sendBuddyMessageResult iprot)
            else
              iprot#skip _t4916)
          | 1 -> (if _t4916 = Protocol.T_STRUCT then
              _str4915#set_e (read_talkException iprot)
            else
              iprot#skip _t4916)
          | _ -> iprot#skip _t4916);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4915

class unblockBuddyMember_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "unblockBuddyMember_args.requestId") | Some _x4918 -> _x4918
  method set_requestId _x4918 = _requestId <- Some _x4918
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "unblockBuddyMember_args.mid") | Some _x4919 -> _x4919
  method set_mid _x4919 = _mid <- Some _x4919
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unblockBuddyMember_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unblockBuddyMember_args (iprot : Protocol.t) =
  let _str4922 = new unblockBuddyMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4923,_id4924) = iprot#readFieldBegin in
        if _t4923 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4924 with 
          | 1 -> (if _t4923 = Protocol.T_STRING then
              _str4922#set_requestId iprot#readString
            else
              iprot#skip _t4923)
          | 2 -> (if _t4923 = Protocol.T_STRING then
              _str4922#set_mid iprot#readString
            else
              iprot#skip _t4923)
          | _ -> iprot#skip _t4923);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4922

class unblockBuddyMember_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "unblockBuddyMember_result.e") | Some _x4925 -> _x4925
  method set_e _x4925 = _e <- Some _x4925
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unblockBuddyMember_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unblockBuddyMember_result (iprot : Protocol.t) =
  let _str4928 = new unblockBuddyMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4929,_id4930) = iprot#readFieldBegin in
        if _t4929 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4930 with 
          | 1 -> (if _t4929 = Protocol.T_STRUCT then
              _str4928#set_e (read_talkException iprot)
            else
              iprot#skip _t4929)
          | _ -> iprot#skip _t4929);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4928

class unregisterBuddy_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "unregisterBuddy_args.requestId") | Some _x4931 -> _x4931
  method set_requestId _x4931 = _requestId <- Some _x4931
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unregisterBuddy_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unregisterBuddy_args (iprot : Protocol.t) =
  let _str4934 = new unregisterBuddy_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4935,_id4936) = iprot#readFieldBegin in
        if _t4935 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4936 with 
          | 1 -> (if _t4935 = Protocol.T_STRING then
              _str4934#set_requestId iprot#readString
            else
              iprot#skip _t4935)
          | _ -> iprot#skip _t4935);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4934

class unregisterBuddy_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "unregisterBuddy_result.e") | Some _x4937 -> _x4937
  method set_e _x4937 = _e <- Some _x4937
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unregisterBuddy_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unregisterBuddy_result (iprot : Protocol.t) =
  let _str4940 = new unregisterBuddy_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4941,_id4942) = iprot#readFieldBegin in
        if _t4941 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4942 with 
          | 1 -> (if _t4941 = Protocol.T_STRUCT then
              _str4940#set_e (read_talkException iprot)
            else
              iprot#skip _t4941)
          | _ -> iprot#skip _t4941);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4940

class unregisterBuddyAdmin_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "unregisterBuddyAdmin_args.requestId") | Some _x4943 -> _x4943
  method set_requestId _x4943 = _requestId <- Some _x4943
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unregisterBuddyAdmin_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unregisterBuddyAdmin_args (iprot : Protocol.t) =
  let _str4946 = new unregisterBuddyAdmin_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4947,_id4948) = iprot#readFieldBegin in
        if _t4947 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4948 with 
          | 1 -> (if _t4947 = Protocol.T_STRING then
              _str4946#set_requestId iprot#readString
            else
              iprot#skip _t4947)
          | _ -> iprot#skip _t4947);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4946

class unregisterBuddyAdmin_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "unregisterBuddyAdmin_result.e") | Some _x4949 -> _x4949
  method set_e _x4949 = _e <- Some _x4949
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unregisterBuddyAdmin_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unregisterBuddyAdmin_result (iprot : Protocol.t) =
  let _str4952 = new unregisterBuddyAdmin_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4953,_id4954) = iprot#readFieldBegin in
        if _t4953 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4954 with 
          | 1 -> (if _t4953 = Protocol.T_STRUCT then
              _str4952#set_e (read_talkException iprot)
            else
              iprot#skip _t4953)
          | _ -> iprot#skip _t4953);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4952

class updateBuddyAdminProfileAttribute_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "updateBuddyAdminProfileAttribute_args.requestId") | Some _x4955 -> _x4955
  method set_requestId _x4955 = _requestId <- Some _x4955
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _attributes : (string,string) Hashtbl.t option = None
  method get_attributes = _attributes
  method grab_attributes = match _attributes with None->raise (Field_empty "updateBuddyAdminProfileAttribute_args.attributes") | Some _x4956 -> _x4956
  method set_attributes _x4956 = _attributes <- Some _x4956
  method unset_attributes = _attributes <- None
  method reset_attributes = _attributes <- None

  method copy =
      let _new = Oo.copy self in
      if _attributes <> None then
        _new#set_attributes (Hashtbl.copy self#grab_attributes);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyAdminProfileAttribute_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _attributes with None -> () | Some _v -> 
      oprot#writeFieldBegin("attributes",Protocol.T_MAP,2);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter4959 -> fun _viter4960 -> 
        oprot#writeString(_kiter4959);
        oprot#writeString(_viter4960);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyAdminProfileAttribute_args (iprot : Protocol.t) =
  let _str4961 = new updateBuddyAdminProfileAttribute_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4962,_id4963) = iprot#readFieldBegin in
        if _t4962 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4963 with 
          | 1 -> (if _t4962 = Protocol.T_STRING then
              _str4961#set_requestId iprot#readString
            else
              iprot#skip _t4962)
          | 2 -> (if _t4962 = Protocol.T_MAP then
              _str4961#set_attributes 
                (let (_ktype4965,_vtype4966,_size4964) = iprot#readMapBegin in
                let _con4968 = Hashtbl.create _size4964 in
                  for i = 1 to _size4964 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con4968 _k _v
                  done; iprot#readMapEnd; _con4968)
            else
              iprot#skip _t4962)
          | _ -> iprot#skip _t4962);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4961

class updateBuddyAdminProfileAttribute_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateBuddyAdminProfileAttribute_result.e") | Some _x4969 -> _x4969
  method set_e _x4969 = _e <- Some _x4969
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyAdminProfileAttribute_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyAdminProfileAttribute_result (iprot : Protocol.t) =
  let _str4972 = new updateBuddyAdminProfileAttribute_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4973,_id4974) = iprot#readFieldBegin in
        if _t4973 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4974 with 
          | 1 -> (if _t4973 = Protocol.T_STRUCT then
              _str4972#set_e (read_talkException iprot)
            else
              iprot#skip _t4973)
          | _ -> iprot#skip _t4973);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4972

class updateBuddyAdminProfileImage_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "updateBuddyAdminProfileImage_args.requestId") | Some _x4975 -> _x4975
  method set_requestId _x4975 = _requestId <- Some _x4975
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _picture : string option = None
  method get_picture = _picture
  method grab_picture = match _picture with None->raise (Field_empty "updateBuddyAdminProfileImage_args.picture") | Some _x4976 -> _x4976
  method set_picture _x4976 = _picture <- Some _x4976
  method unset_picture = _picture <- None
  method reset_picture = _picture <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyAdminProfileImage_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _picture with None -> () | Some _v -> 
      oprot#writeFieldBegin("picture",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyAdminProfileImage_args (iprot : Protocol.t) =
  let _str4979 = new updateBuddyAdminProfileImage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4980,_id4981) = iprot#readFieldBegin in
        if _t4980 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4981 with 
          | 1 -> (if _t4980 = Protocol.T_STRING then
              _str4979#set_requestId iprot#readString
            else
              iprot#skip _t4980)
          | 2 -> (if _t4980 = Protocol.T_STRING then
              _str4979#set_picture iprot#readString
            else
              iprot#skip _t4980)
          | _ -> iprot#skip _t4980);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4979

class updateBuddyAdminProfileImage_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateBuddyAdminProfileImage_result.e") | Some _x4982 -> _x4982
  method set_e _x4982 = _e <- Some _x4982
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyAdminProfileImage_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyAdminProfileImage_result (iprot : Protocol.t) =
  let _str4985 = new updateBuddyAdminProfileImage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4986,_id4987) = iprot#readFieldBegin in
        if _t4986 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4987 with 
          | 1 -> (if _t4986 = Protocol.T_STRUCT then
              _str4985#set_e (read_talkException iprot)
            else
              iprot#skip _t4986)
          | _ -> iprot#skip _t4986);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4985

class updateBuddyProfileAttributes_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "updateBuddyProfileAttributes_args.requestId") | Some _x4988 -> _x4988
  method set_requestId _x4988 = _requestId <- Some _x4988
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _attributes : (string,string) Hashtbl.t option = None
  method get_attributes = _attributes
  method grab_attributes = match _attributes with None->raise (Field_empty "updateBuddyProfileAttributes_args.attributes") | Some _x4989 -> _x4989
  method set_attributes _x4989 = _attributes <- Some _x4989
  method unset_attributes = _attributes <- None
  method reset_attributes = _attributes <- None

  method copy =
      let _new = Oo.copy self in
      if _attributes <> None then
        _new#set_attributes (Hashtbl.copy self#grab_attributes);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyProfileAttributes_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _attributes with None -> () | Some _v -> 
      oprot#writeFieldBegin("attributes",Protocol.T_MAP,2);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter4992 -> fun _viter4993 -> 
        oprot#writeString(_kiter4992);
        oprot#writeString(_viter4993);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyProfileAttributes_args (iprot : Protocol.t) =
  let _str4994 = new updateBuddyProfileAttributes_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4995,_id4996) = iprot#readFieldBegin in
        if _t4995 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4996 with 
          | 1 -> (if _t4995 = Protocol.T_STRING then
              _str4994#set_requestId iprot#readString
            else
              iprot#skip _t4995)
          | 2 -> (if _t4995 = Protocol.T_MAP then
              _str4994#set_attributes 
                (let (_ktype4998,_vtype4999,_size4997) = iprot#readMapBegin in
                let _con5001 = Hashtbl.create _size4997 in
                  for i = 1 to _size4997 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con5001 _k _v
                  done; iprot#readMapEnd; _con5001)
            else
              iprot#skip _t4995)
          | _ -> iprot#skip _t4995);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4994

class updateBuddyProfileAttributes_result =
object (self)
  val mutable _success : updateBuddyProfileResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateBuddyProfileAttributes_result.success") | Some _x5002 -> _x5002
  method set_success _x5002 = _success <- Some _x5002
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateBuddyProfileAttributes_result.e") | Some _x5003 -> _x5003
  method set_e _x5003 = _e <- Some _x5003
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyProfileAttributes_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyProfileAttributes_result (iprot : Protocol.t) =
  let _str5006 = new updateBuddyProfileAttributes_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5007,_id5008) = iprot#readFieldBegin in
        if _t5007 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5008 with 
          | 0 -> (if _t5007 = Protocol.T_STRUCT then
              _str5006#set_success (read_updateBuddyProfileResult iprot)
            else
              iprot#skip _t5007)
          | 1 -> (if _t5007 = Protocol.T_STRUCT then
              _str5006#set_e (read_talkException iprot)
            else
              iprot#skip _t5007)
          | _ -> iprot#skip _t5007);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5006

class updateBuddyProfileAttributesAsync_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "updateBuddyProfileAttributesAsync_args.requestId") | Some _x5009 -> _x5009
  method set_requestId _x5009 = _requestId <- Some _x5009
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _attributes : (string,string) Hashtbl.t option = None
  method get_attributes = _attributes
  method grab_attributes = match _attributes with None->raise (Field_empty "updateBuddyProfileAttributesAsync_args.attributes") | Some _x5010 -> _x5010
  method set_attributes _x5010 = _attributes <- Some _x5010
  method unset_attributes = _attributes <- None
  method reset_attributes = _attributes <- None

  method copy =
      let _new = Oo.copy self in
      if _attributes <> None then
        _new#set_attributes (Hashtbl.copy self#grab_attributes);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyProfileAttributesAsync_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _attributes with None -> () | Some _v -> 
      oprot#writeFieldBegin("attributes",Protocol.T_MAP,2);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter5013 -> fun _viter5014 -> 
        oprot#writeString(_kiter5013);
        oprot#writeString(_viter5014);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyProfileAttributesAsync_args (iprot : Protocol.t) =
  let _str5015 = new updateBuddyProfileAttributesAsync_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5016,_id5017) = iprot#readFieldBegin in
        if _t5016 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5017 with 
          | 1 -> (if _t5016 = Protocol.T_STRING then
              _str5015#set_requestId iprot#readString
            else
              iprot#skip _t5016)
          | 2 -> (if _t5016 = Protocol.T_MAP then
              _str5015#set_attributes 
                (let (_ktype5019,_vtype5020,_size5018) = iprot#readMapBegin in
                let _con5022 = Hashtbl.create _size5018 in
                  for i = 1 to _size5018 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con5022 _k _v
                  done; iprot#readMapEnd; _con5022)
            else
              iprot#skip _t5016)
          | _ -> iprot#skip _t5016);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5015

class updateBuddyProfileAttributesAsync_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateBuddyProfileAttributesAsync_result.success") | Some _x5023 -> _x5023
  method set_success _x5023 = _success <- Some _x5023
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateBuddyProfileAttributesAsync_result.e") | Some _x5024 -> _x5024
  method set_e _x5024 = _e <- Some _x5024
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyProfileAttributesAsync_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyProfileAttributesAsync_result (iprot : Protocol.t) =
  let _str5027 = new updateBuddyProfileAttributesAsync_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5028,_id5029) = iprot#readFieldBegin in
        if _t5028 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5029 with 
          | 0 -> (if _t5028 = Protocol.T_STRING then
              _str5027#set_success iprot#readString
            else
              iprot#skip _t5028)
          | 1 -> (if _t5028 = Protocol.T_STRUCT then
              _str5027#set_e (read_talkException iprot)
            else
              iprot#skip _t5028)
          | _ -> iprot#skip _t5028);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5027

class updateBuddyProfileImage_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "updateBuddyProfileImage_args.requestId") | Some _x5030 -> _x5030
  method set_requestId _x5030 = _requestId <- Some _x5030
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _image : string option = None
  method get_image = _image
  method grab_image = match _image with None->raise (Field_empty "updateBuddyProfileImage_args.image") | Some _x5031 -> _x5031
  method set_image _x5031 = _image <- Some _x5031
  method unset_image = _image <- None
  method reset_image = _image <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyProfileImage_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _image with None -> () | Some _v -> 
      oprot#writeFieldBegin("image",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyProfileImage_args (iprot : Protocol.t) =
  let _str5034 = new updateBuddyProfileImage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5035,_id5036) = iprot#readFieldBegin in
        if _t5035 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5036 with 
          | 1 -> (if _t5035 = Protocol.T_STRING then
              _str5034#set_requestId iprot#readString
            else
              iprot#skip _t5035)
          | 2 -> (if _t5035 = Protocol.T_STRING then
              _str5034#set_image iprot#readString
            else
              iprot#skip _t5035)
          | _ -> iprot#skip _t5035);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5034

class updateBuddyProfileImage_result =
object (self)
  val mutable _success : updateBuddyProfileResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateBuddyProfileImage_result.success") | Some _x5037 -> _x5037
  method set_success _x5037 = _success <- Some _x5037
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateBuddyProfileImage_result.e") | Some _x5038 -> _x5038
  method set_e _x5038 = _e <- Some _x5038
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyProfileImage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyProfileImage_result (iprot : Protocol.t) =
  let _str5041 = new updateBuddyProfileImage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5042,_id5043) = iprot#readFieldBegin in
        if _t5042 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5043 with 
          | 0 -> (if _t5042 = Protocol.T_STRUCT then
              _str5041#set_success (read_updateBuddyProfileResult iprot)
            else
              iprot#skip _t5042)
          | 1 -> (if _t5042 = Protocol.T_STRUCT then
              _str5041#set_e (read_talkException iprot)
            else
              iprot#skip _t5042)
          | _ -> iprot#skip _t5042);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5041

class updateBuddyProfileImageAsync_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "updateBuddyProfileImageAsync_args.requestId") | Some _x5044 -> _x5044
  method set_requestId _x5044 = _requestId <- Some _x5044
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _image : string option = None
  method get_image = _image
  method grab_image = match _image with None->raise (Field_empty "updateBuddyProfileImageAsync_args.image") | Some _x5045 -> _x5045
  method set_image _x5045 = _image <- Some _x5045
  method unset_image = _image <- None
  method reset_image = _image <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyProfileImageAsync_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _image with None -> () | Some _v -> 
      oprot#writeFieldBegin("image",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyProfileImageAsync_args (iprot : Protocol.t) =
  let _str5048 = new updateBuddyProfileImageAsync_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5049,_id5050) = iprot#readFieldBegin in
        if _t5049 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5050 with 
          | 1 -> (if _t5049 = Protocol.T_STRING then
              _str5048#set_requestId iprot#readString
            else
              iprot#skip _t5049)
          | 2 -> (if _t5049 = Protocol.T_STRING then
              _str5048#set_image iprot#readString
            else
              iprot#skip _t5049)
          | _ -> iprot#skip _t5049);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5048

class updateBuddyProfileImageAsync_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateBuddyProfileImageAsync_result.success") | Some _x5051 -> _x5051
  method set_success _x5051 = _success <- Some _x5051
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateBuddyProfileImageAsync_result.e") | Some _x5052 -> _x5052
  method set_e _x5052 = _e <- Some _x5052
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyProfileImageAsync_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyProfileImageAsync_result (iprot : Protocol.t) =
  let _str5055 = new updateBuddyProfileImageAsync_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5056,_id5057) = iprot#readFieldBegin in
        if _t5056 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5057 with 
          | 0 -> (if _t5056 = Protocol.T_STRING then
              _str5055#set_success iprot#readString
            else
              iprot#skip _t5056)
          | 1 -> (if _t5056 = Protocol.T_STRUCT then
              _str5055#set_e (read_talkException iprot)
            else
              iprot#skip _t5056)
          | _ -> iprot#skip _t5056);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5055

class updateBuddySearchId_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "updateBuddySearchId_args.requestId") | Some _x5058 -> _x5058
  method set_requestId _x5058 = _requestId <- Some _x5058
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _searchId : string option = None
  method get_searchId = _searchId
  method grab_searchId = match _searchId with None->raise (Field_empty "updateBuddySearchId_args.searchId") | Some _x5059 -> _x5059
  method set_searchId _x5059 = _searchId <- Some _x5059
  method unset_searchId = _searchId <- None
  method reset_searchId = _searchId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddySearchId_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _searchId with None -> () | Some _v -> 
      oprot#writeFieldBegin("searchId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddySearchId_args (iprot : Protocol.t) =
  let _str5062 = new updateBuddySearchId_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5063,_id5064) = iprot#readFieldBegin in
        if _t5063 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5064 with 
          | 1 -> (if _t5063 = Protocol.T_STRING then
              _str5062#set_requestId iprot#readString
            else
              iprot#skip _t5063)
          | 2 -> (if _t5063 = Protocol.T_STRING then
              _str5062#set_searchId iprot#readString
            else
              iprot#skip _t5063)
          | _ -> iprot#skip _t5063);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5062

class updateBuddySearchId_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateBuddySearchId_result.e") | Some _x5065 -> _x5065
  method set_e _x5065 = _e <- Some _x5065
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddySearchId_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddySearchId_result (iprot : Protocol.t) =
  let _str5068 = new updateBuddySearchId_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5069,_id5070) = iprot#readFieldBegin in
        if _t5069 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5070 with 
          | 1 -> (if _t5069 = Protocol.T_STRUCT then
              _str5068#set_e (read_talkException iprot)
            else
              iprot#skip _t5069)
          | _ -> iprot#skip _t5069);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5068

class updateBuddySettings_args =
object (self)
  val mutable _settings : (string,string) Hashtbl.t option = None
  method get_settings = _settings
  method grab_settings = match _settings with None->raise (Field_empty "updateBuddySettings_args.settings") | Some _x5071 -> _x5071
  method set_settings _x5071 = _settings <- Some _x5071
  method unset_settings = _settings <- None
  method reset_settings = _settings <- None

  method copy =
      let _new = Oo.copy self in
      if _settings <> None then
        _new#set_settings (Hashtbl.copy self#grab_settings);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddySettings_args";
    (match _settings with None -> () | Some _v -> 
      oprot#writeFieldBegin("settings",Protocol.T_MAP,2);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter5074 -> fun _viter5075 -> 
        oprot#writeString(_kiter5074);
        oprot#writeString(_viter5075);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddySettings_args (iprot : Protocol.t) =
  let _str5076 = new updateBuddySettings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5077,_id5078) = iprot#readFieldBegin in
        if _t5077 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5078 with 
          | 2 -> (if _t5077 = Protocol.T_MAP then
              _str5076#set_settings 
                (let (_ktype5080,_vtype5081,_size5079) = iprot#readMapBegin in
                let _con5083 = Hashtbl.create _size5079 in
                  for i = 1 to _size5079 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con5083 _k _v
                  done; iprot#readMapEnd; _con5083)
            else
              iprot#skip _t5077)
          | _ -> iprot#skip _t5077);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5076

class updateBuddySettings_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateBuddySettings_result.e") | Some _x5084 -> _x5084
  method set_e _x5084 = _e <- Some _x5084
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddySettings_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddySettings_result (iprot : Protocol.t) =
  let _str5087 = new updateBuddySettings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5088,_id5089) = iprot#readFieldBegin in
        if _t5088 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5089 with 
          | 1 -> (if _t5088 = Protocol.T_STRUCT then
              _str5087#set_e (read_talkException iprot)
            else
              iprot#skip _t5088)
          | _ -> iprot#skip _t5088);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5087

class uploadBuddyContent_args =
object (self)
  val mutable _contentType : ContentType.t option = None
  method get_contentType = _contentType
  method grab_contentType = match _contentType with None->raise (Field_empty "uploadBuddyContent_args.contentType") | Some _x5090 -> _x5090
  method set_contentType _x5090 = _contentType <- Some _x5090
  method unset_contentType = _contentType <- None
  method reset_contentType = _contentType <- None

  val mutable _content : string option = None
  method get_content = _content
  method grab_content = match _content with None->raise (Field_empty "uploadBuddyContent_args.content") | Some _x5091 -> _x5091
  method set_content _x5091 = _content <- Some _x5091
  method unset_content = _content <- None
  method reset_content = _content <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "uploadBuddyContent_args";
    (match _contentType with None -> () | Some _v -> 
      oprot#writeFieldBegin("contentType",Protocol.T_I32,2);
      oprot#writeI32(ContentType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _content with None -> () | Some _v -> 
      oprot#writeFieldBegin("content",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_uploadBuddyContent_args (iprot : Protocol.t) =
  let _str5094 = new uploadBuddyContent_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5095,_id5096) = iprot#readFieldBegin in
        if _t5095 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5096 with 
          | 2 -> (if _t5095 = Protocol.T_I32 then
              _str5094#set_contentType (ContentType.of_i iprot#readI32)
            else
              iprot#skip _t5095)
          | 3 -> (if _t5095 = Protocol.T_STRING then
              _str5094#set_content iprot#readString
            else
              iprot#skip _t5095)
          | _ -> iprot#skip _t5095);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5094

class uploadBuddyContent_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "uploadBuddyContent_result.success") | Some _x5097 -> _x5097
  method set_success _x5097 = _success <- Some _x5097
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "uploadBuddyContent_result.e") | Some _x5098 -> _x5098
  method set_e _x5098 = _e <- Some _x5098
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "uploadBuddyContent_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_uploadBuddyContent_result (iprot : Protocol.t) =
  let _str5101 = new uploadBuddyContent_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5102,_id5103) = iprot#readFieldBegin in
        if _t5102 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5103 with 
          | 0 -> (if _t5102 = Protocol.T_STRING then
              _str5101#set_success iprot#readString
            else
              iprot#skip _t5102)
          | 1 -> (if _t5102 = Protocol.T_STRUCT then
              _str5101#set_e (read_talkException iprot)
            else
              iprot#skip _t5102)
          | _ -> iprot#skip _t5102);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5101

class virtual iface =
object (self)
  method virtual addBuddyMember : string option -> string option -> unit
  method virtual addBuddyMembers : string option -> string list option -> unit
  method virtual blockBuddyMember : string option -> string option -> unit
  method virtual commitSendMessagesToAll : string list option -> sendBuddyMessageResult list
  method virtual commitSendMessagesToMids : string list option -> string list option -> sendBuddyMessageResult list
  method virtual containsBuddyMember : string option -> string option -> bool
  method virtual downloadMessageContent : string option -> string option -> string
  method virtual downloadMessageContentPreview : string option -> string option -> string
  method virtual downloadProfileImage : string option -> string
  method virtual downloadProfileImagePreview : string option -> string
  method virtual getActiveMemberCountByBuddyMid : string option -> Int64.t
  method virtual getActiveMemberMidsByBuddyMid : string option -> string list
  method virtual getAllBuddyMembers : string list
  method virtual getBlockedBuddyMembers : string list
  method virtual getBlockerCountByBuddyMid : string option -> Int64.t
  method virtual getBuddyDetailByMid : string option -> buddyDetail
  method virtual getBuddyProfile : buddyProfile
  method virtual getContactTicket : ticket
  method virtual getMemberCountByBuddyMid : string option -> Int64.t
  method virtual getSendBuddyMessageResult : string option -> sendBuddyMessageResult
  method virtual getSetBuddyOnAirResult : string option -> setBuddyOnAirResult
  method virtual getUpdateBuddyProfileResult : string option -> updateBuddyProfileResult
  method virtual isBuddyOnAirByMid : string option -> bool
  method virtual linkAndSendBuddyContentMessageToAllAsync : string option -> message option -> string option -> string
  method virtual linkAndSendBuddyContentMessageToMids : string option -> message option -> string option -> string list option -> sendBuddyMessageResult
  method virtual notifyBuddyBlocked : string option -> string option -> unit
  method virtual notifyBuddyUnblocked : string option -> string option -> unit
  method virtual registerBuddy : string option -> string option -> string option -> string option -> string option -> (string,string) Hashtbl.t option -> string
  method virtual registerBuddyAdmin : string option -> string option -> string option -> string option -> string option -> string
  method virtual reissueContactTicket : Int64.t option -> Int32.t option -> string
  method virtual removeBuddyMember : string option -> string option -> unit
  method virtual removeBuddyMembers : string option -> string list option -> unit
  method virtual sendBuddyContentMessageToAll : string option -> message option -> string option -> sendBuddyMessageResult
  method virtual sendBuddyContentMessageToAllAsync : string option -> message option -> string option -> string
  method virtual sendBuddyContentMessageToMids : string option -> message option -> string option -> string list option -> sendBuddyMessageResult
  method virtual sendBuddyContentMessageToMidsAsync : string option -> message option -> string option -> string list option -> string
  method virtual sendBuddyMessageToAll : string option -> message option -> sendBuddyMessageResult
  method virtual sendBuddyMessageToAllAsync : string option -> message option -> string
  method virtual sendBuddyMessageToMids : string option -> message option -> string list option -> sendBuddyMessageResult
  method virtual sendBuddyMessageToMidsAsync : string option -> message option -> string list option -> string
  method virtual sendIndividualEventToAllAsync : string option -> string option -> NotificationStatus.t option -> unit
  method virtual setBuddyOnAir : string option -> bool option -> setBuddyOnAirResult
  method virtual setBuddyOnAirAsync : string option -> bool option -> string
  method virtual storeMessage : string option -> buddyMessageRequest option -> sendBuddyMessageResult
  method virtual unblockBuddyMember : string option -> string option -> unit
  method virtual unregisterBuddy : string option -> unit
  method virtual unregisterBuddyAdmin : string option -> unit
  method virtual updateBuddyAdminProfileAttribute : string option -> (string,string) Hashtbl.t option -> unit
  method virtual updateBuddyAdminProfileImage : string option -> string option -> unit
  method virtual updateBuddyProfileAttributes : string option -> (string,string) Hashtbl.t option -> updateBuddyProfileResult
  method virtual updateBuddyProfileAttributesAsync : string option -> (string,string) Hashtbl.t option -> string
  method virtual updateBuddyProfileImage : string option -> string option -> updateBuddyProfileResult
  method virtual updateBuddyProfileImageAsync : string option -> string option -> string
  method virtual updateBuddySearchId : string option -> string option -> unit
  method virtual updateBuddySettings : (string,string) Hashtbl.t option -> unit
  method virtual uploadBuddyContent : ContentType.t option -> string option -> string
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method addBuddyMember requestId userMid = 
    self#send_addBuddyMember requestId userMid;
    self#recv_addBuddyMember
  method private send_addBuddyMember requestId userMid = 
    oprot#writeMessageBegin ("addBuddyMember", Protocol.CALL, seqid);
    let args = new addBuddyMember_args in
      args#set_requestId requestId;
      args#set_userMid userMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_addBuddyMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_addBuddyMember_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method addBuddyMembers requestId userMids = 
    self#send_addBuddyMembers requestId userMids;
    self#recv_addBuddyMembers
  method private send_addBuddyMembers requestId userMids = 
    oprot#writeMessageBegin ("addBuddyMembers", Protocol.CALL, seqid);
    let args = new addBuddyMembers_args in
      args#set_requestId requestId;
      args#set_userMids userMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_addBuddyMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_addBuddyMembers_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method blockBuddyMember requestId mid = 
    self#send_blockBuddyMember requestId mid;
    self#recv_blockBuddyMember
  method private send_blockBuddyMember requestId mid = 
    oprot#writeMessageBegin ("blockBuddyMember", Protocol.CALL, seqid);
    let args = new blockBuddyMember_args in
      args#set_requestId requestId;
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_blockBuddyMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_blockBuddyMember_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method commitSendMessagesToAll requestIdList = 
    self#send_commitSendMessagesToAll requestIdList;
    self#recv_commitSendMessagesToAll
  method private send_commitSendMessagesToAll requestIdList = 
    oprot#writeMessageBegin ("commitSendMessagesToAll", Protocol.CALL, seqid);
    let args = new commitSendMessagesToAll_args in
      args#set_requestIdList requestIdList;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_commitSendMessagesToAll  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_commitSendMessagesToAll_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "commitSendMessagesToAll failed: unknown result")))
  method commitSendMessagesToMids requestIdList mids = 
    self#send_commitSendMessagesToMids requestIdList mids;
    self#recv_commitSendMessagesToMids
  method private send_commitSendMessagesToMids requestIdList mids = 
    oprot#writeMessageBegin ("commitSendMessagesToMids", Protocol.CALL, seqid);
    let args = new commitSendMessagesToMids_args in
      args#set_requestIdList requestIdList;
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_commitSendMessagesToMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_commitSendMessagesToMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "commitSendMessagesToMids failed: unknown result")))
  method containsBuddyMember requestId userMid = 
    self#send_containsBuddyMember requestId userMid;
    self#recv_containsBuddyMember
  method private send_containsBuddyMember requestId userMid = 
    oprot#writeMessageBegin ("containsBuddyMember", Protocol.CALL, seqid);
    let args = new containsBuddyMember_args in
      args#set_requestId requestId;
      args#set_userMid userMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_containsBuddyMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_containsBuddyMember_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "containsBuddyMember failed: unknown result")))
  method downloadMessageContent requestId messageId = 
    self#send_downloadMessageContent requestId messageId;
    self#recv_downloadMessageContent
  method private send_downloadMessageContent requestId messageId = 
    oprot#writeMessageBegin ("downloadMessageContent", Protocol.CALL, seqid);
    let args = new downloadMessageContent_args in
      args#set_requestId requestId;
      args#set_messageId messageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_downloadMessageContent  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_downloadMessageContent_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "downloadMessageContent failed: unknown result")))
  method downloadMessageContentPreview requestId messageId = 
    self#send_downloadMessageContentPreview requestId messageId;
    self#recv_downloadMessageContentPreview
  method private send_downloadMessageContentPreview requestId messageId = 
    oprot#writeMessageBegin ("downloadMessageContentPreview", Protocol.CALL, seqid);
    let args = new downloadMessageContentPreview_args in
      args#set_requestId requestId;
      args#set_messageId messageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_downloadMessageContentPreview  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_downloadMessageContentPreview_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "downloadMessageContentPreview failed: unknown result")))
  method downloadProfileImage requestId = 
    self#send_downloadProfileImage requestId;
    self#recv_downloadProfileImage
  method private send_downloadProfileImage requestId = 
    oprot#writeMessageBegin ("downloadProfileImage", Protocol.CALL, seqid);
    let args = new downloadProfileImage_args in
      args#set_requestId requestId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_downloadProfileImage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_downloadProfileImage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "downloadProfileImage failed: unknown result")))
  method downloadProfileImagePreview requestId = 
    self#send_downloadProfileImagePreview requestId;
    self#recv_downloadProfileImagePreview
  method private send_downloadProfileImagePreview requestId = 
    oprot#writeMessageBegin ("downloadProfileImagePreview", Protocol.CALL, seqid);
    let args = new downloadProfileImagePreview_args in
      args#set_requestId requestId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_downloadProfileImagePreview  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_downloadProfileImagePreview_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "downloadProfileImagePreview failed: unknown result")))
  method getActiveMemberCountByBuddyMid buddyMid = 
    self#send_getActiveMemberCountByBuddyMid buddyMid;
    self#recv_getActiveMemberCountByBuddyMid
  method private send_getActiveMemberCountByBuddyMid buddyMid = 
    oprot#writeMessageBegin ("getActiveMemberCountByBuddyMid", Protocol.CALL, seqid);
    let args = new getActiveMemberCountByBuddyMid_args in
      args#set_buddyMid buddyMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getActiveMemberCountByBuddyMid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getActiveMemberCountByBuddyMid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getActiveMemberCountByBuddyMid failed: unknown result")))
  method getActiveMemberMidsByBuddyMid buddyMid = 
    self#send_getActiveMemberMidsByBuddyMid buddyMid;
    self#recv_getActiveMemberMidsByBuddyMid
  method private send_getActiveMemberMidsByBuddyMid buddyMid = 
    oprot#writeMessageBegin ("getActiveMemberMidsByBuddyMid", Protocol.CALL, seqid);
    let args = new getActiveMemberMidsByBuddyMid_args in
      args#set_buddyMid buddyMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getActiveMemberMidsByBuddyMid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getActiveMemberMidsByBuddyMid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getActiveMemberMidsByBuddyMid failed: unknown result")))
  method getAllBuddyMembers  = 
    self#send_getAllBuddyMembers;
    self#recv_getAllBuddyMembers
  method private send_getAllBuddyMembers  = 
    oprot#writeMessageBegin ("getAllBuddyMembers", Protocol.CALL, seqid);
    let args = new getAllBuddyMembers_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getAllBuddyMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getAllBuddyMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getAllBuddyMembers failed: unknown result")))
  method getBlockedBuddyMembers  = 
    self#send_getBlockedBuddyMembers;
    self#recv_getBlockedBuddyMembers
  method private send_getBlockedBuddyMembers  = 
    oprot#writeMessageBegin ("getBlockedBuddyMembers", Protocol.CALL, seqid);
    let args = new getBlockedBuddyMembers_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBlockedBuddyMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBlockedBuddyMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBlockedBuddyMembers failed: unknown result")))
  method getBlockerCountByBuddyMid buddyMid = 
    self#send_getBlockerCountByBuddyMid buddyMid;
    self#recv_getBlockerCountByBuddyMid
  method private send_getBlockerCountByBuddyMid buddyMid = 
    oprot#writeMessageBegin ("getBlockerCountByBuddyMid", Protocol.CALL, seqid);
    let args = new getBlockerCountByBuddyMid_args in
      args#set_buddyMid buddyMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBlockerCountByBuddyMid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBlockerCountByBuddyMid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBlockerCountByBuddyMid failed: unknown result")))
  method getBuddyDetailByMid buddyMid = 
    self#send_getBuddyDetailByMid buddyMid;
    self#recv_getBuddyDetailByMid
  method private send_getBuddyDetailByMid buddyMid = 
    oprot#writeMessageBegin ("getBuddyDetailByMid", Protocol.CALL, seqid);
    let args = new getBuddyDetailByMid_args in
      args#set_buddyMid buddyMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBuddyDetailByMid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBuddyDetailByMid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBuddyDetailByMid failed: unknown result")))
  method getBuddyProfile  = 
    self#send_getBuddyProfile;
    self#recv_getBuddyProfile
  method private send_getBuddyProfile  = 
    oprot#writeMessageBegin ("getBuddyProfile", Protocol.CALL, seqid);
    let args = new getBuddyProfile_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBuddyProfile  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBuddyProfile_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBuddyProfile failed: unknown result")))
  method getContactTicket  = 
    self#send_getContactTicket;
    self#recv_getContactTicket
  method private send_getContactTicket  = 
    oprot#writeMessageBegin ("getContactTicket", Protocol.CALL, seqid);
    let args = new getContactTicket_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getContactTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getContactTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getContactTicket failed: unknown result")))
  method getMemberCountByBuddyMid buddyMid = 
    self#send_getMemberCountByBuddyMid buddyMid;
    self#recv_getMemberCountByBuddyMid
  method private send_getMemberCountByBuddyMid buddyMid = 
    oprot#writeMessageBegin ("getMemberCountByBuddyMid", Protocol.CALL, seqid);
    let args = new getMemberCountByBuddyMid_args in
      args#set_buddyMid buddyMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMemberCountByBuddyMid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMemberCountByBuddyMid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMemberCountByBuddyMid failed: unknown result")))
  method getSendBuddyMessageResult sendBuddyMessageRequestId = 
    self#send_getSendBuddyMessageResult sendBuddyMessageRequestId;
    self#recv_getSendBuddyMessageResult
  method private send_getSendBuddyMessageResult sendBuddyMessageRequestId = 
    oprot#writeMessageBegin ("getSendBuddyMessageResult", Protocol.CALL, seqid);
    let args = new getSendBuddyMessageResult_args in
      args#set_sendBuddyMessageRequestId sendBuddyMessageRequestId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSendBuddyMessageResult  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSendBuddyMessageResult_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSendBuddyMessageResult failed: unknown result")))
  method getSetBuddyOnAirResult setBuddyOnAirRequestId = 
    self#send_getSetBuddyOnAirResult setBuddyOnAirRequestId;
    self#recv_getSetBuddyOnAirResult
  method private send_getSetBuddyOnAirResult setBuddyOnAirRequestId = 
    oprot#writeMessageBegin ("getSetBuddyOnAirResult", Protocol.CALL, seqid);
    let args = new getSetBuddyOnAirResult_args in
      args#set_setBuddyOnAirRequestId setBuddyOnAirRequestId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSetBuddyOnAirResult  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSetBuddyOnAirResult_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSetBuddyOnAirResult failed: unknown result")))
  method getUpdateBuddyProfileResult updateBuddyProfileRequestId = 
    self#send_getUpdateBuddyProfileResult updateBuddyProfileRequestId;
    self#recv_getUpdateBuddyProfileResult
  method private send_getUpdateBuddyProfileResult updateBuddyProfileRequestId = 
    oprot#writeMessageBegin ("getUpdateBuddyProfileResult", Protocol.CALL, seqid);
    let args = new getUpdateBuddyProfileResult_args in
      args#set_updateBuddyProfileRequestId updateBuddyProfileRequestId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUpdateBuddyProfileResult  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUpdateBuddyProfileResult_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUpdateBuddyProfileResult failed: unknown result")))
  method isBuddyOnAirByMid buddyMid = 
    self#send_isBuddyOnAirByMid buddyMid;
    self#recv_isBuddyOnAirByMid
  method private send_isBuddyOnAirByMid buddyMid = 
    oprot#writeMessageBegin ("isBuddyOnAirByMid", Protocol.CALL, seqid);
    let args = new isBuddyOnAirByMid_args in
      args#set_buddyMid buddyMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_isBuddyOnAirByMid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_isBuddyOnAirByMid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "isBuddyOnAirByMid failed: unknown result")))
  method linkAndSendBuddyContentMessageToAllAsync requestId msg sourceContentId = 
    self#send_linkAndSendBuddyContentMessageToAllAsync requestId msg sourceContentId;
    self#recv_linkAndSendBuddyContentMessageToAllAsync
  method private send_linkAndSendBuddyContentMessageToAllAsync requestId msg sourceContentId = 
    oprot#writeMessageBegin ("linkAndSendBuddyContentMessageToAllAsync", Protocol.CALL, seqid);
    let args = new linkAndSendBuddyContentMessageToAllAsync_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#set_sourceContentId sourceContentId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_linkAndSendBuddyContentMessageToAllAsync  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_linkAndSendBuddyContentMessageToAllAsync_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "linkAndSendBuddyContentMessageToAllAsync failed: unknown result")))
  method linkAndSendBuddyContentMessageToMids requestId msg sourceContentId mids = 
    self#send_linkAndSendBuddyContentMessageToMids requestId msg sourceContentId mids;
    self#recv_linkAndSendBuddyContentMessageToMids
  method private send_linkAndSendBuddyContentMessageToMids requestId msg sourceContentId mids = 
    oprot#writeMessageBegin ("linkAndSendBuddyContentMessageToMids", Protocol.CALL, seqid);
    let args = new linkAndSendBuddyContentMessageToMids_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#set_sourceContentId sourceContentId;
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_linkAndSendBuddyContentMessageToMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_linkAndSendBuddyContentMessageToMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "linkAndSendBuddyContentMessageToMids failed: unknown result")))
  method notifyBuddyBlocked buddyMid blockerMid = 
    self#send_notifyBuddyBlocked buddyMid blockerMid;
    self#recv_notifyBuddyBlocked
  method private send_notifyBuddyBlocked buddyMid blockerMid = 
    oprot#writeMessageBegin ("notifyBuddyBlocked", Protocol.CALL, seqid);
    let args = new notifyBuddyBlocked_args in
      args#set_buddyMid buddyMid;
      args#set_blockerMid blockerMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyBuddyBlocked  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyBuddyBlocked_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method notifyBuddyUnblocked buddyMid blockerMid = 
    self#send_notifyBuddyUnblocked buddyMid blockerMid;
    self#recv_notifyBuddyUnblocked
  method private send_notifyBuddyUnblocked buddyMid blockerMid = 
    oprot#writeMessageBegin ("notifyBuddyUnblocked", Protocol.CALL, seqid);
    let args = new notifyBuddyUnblocked_args in
      args#set_buddyMid buddyMid;
      args#set_blockerMid blockerMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyBuddyUnblocked  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyBuddyUnblocked_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method registerBuddy buddyId searchId displayName statusMeessage picture settings = 
    self#send_registerBuddy buddyId searchId displayName statusMeessage picture settings;
    self#recv_registerBuddy
  method private send_registerBuddy buddyId searchId displayName statusMeessage picture settings = 
    oprot#writeMessageBegin ("registerBuddy", Protocol.CALL, seqid);
    let args = new registerBuddy_args in
      args#set_buddyId buddyId;
      args#set_searchId searchId;
      args#set_displayName displayName;
      args#set_statusMeessage statusMeessage;
      args#set_picture picture;
      args#set_settings settings;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerBuddy  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerBuddy_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerBuddy failed: unknown result")))
  method registerBuddyAdmin buddyId searchId displayName statusMessage picture = 
    self#send_registerBuddyAdmin buddyId searchId displayName statusMessage picture;
    self#recv_registerBuddyAdmin
  method private send_registerBuddyAdmin buddyId searchId displayName statusMessage picture = 
    oprot#writeMessageBegin ("registerBuddyAdmin", Protocol.CALL, seqid);
    let args = new registerBuddyAdmin_args in
      args#set_buddyId buddyId;
      args#set_searchId searchId;
      args#set_displayName displayName;
      args#set_statusMessage statusMessage;
      args#set_picture picture;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerBuddyAdmin  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerBuddyAdmin_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerBuddyAdmin failed: unknown result")))
  method reissueContactTicket expirationTime maxUseCount = 
    self#send_reissueContactTicket expirationTime maxUseCount;
    self#recv_reissueContactTicket
  method private send_reissueContactTicket expirationTime maxUseCount = 
    oprot#writeMessageBegin ("reissueContactTicket", Protocol.CALL, seqid);
    let args = new reissueContactTicket_args in
      args#set_expirationTime expirationTime;
      args#set_maxUseCount maxUseCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reissueContactTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reissueContactTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reissueContactTicket failed: unknown result")))
  method removeBuddyMember requestId userMid = 
    self#send_removeBuddyMember requestId userMid;
    self#recv_removeBuddyMember
  method private send_removeBuddyMember requestId userMid = 
    oprot#writeMessageBegin ("removeBuddyMember", Protocol.CALL, seqid);
    let args = new removeBuddyMember_args in
      args#set_requestId requestId;
      args#set_userMid userMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeBuddyMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeBuddyMember_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method removeBuddyMembers requestId userMids = 
    self#send_removeBuddyMembers requestId userMids;
    self#recv_removeBuddyMembers
  method private send_removeBuddyMembers requestId userMids = 
    oprot#writeMessageBegin ("removeBuddyMembers", Protocol.CALL, seqid);
    let args = new removeBuddyMembers_args in
      args#set_requestId requestId;
      args#set_userMids userMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeBuddyMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeBuddyMembers_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method sendBuddyContentMessageToAll requestId msg content = 
    self#send_sendBuddyContentMessageToAll requestId msg content;
    self#recv_sendBuddyContentMessageToAll
  method private send_sendBuddyContentMessageToAll requestId msg content = 
    oprot#writeMessageBegin ("sendBuddyContentMessageToAll", Protocol.CALL, seqid);
    let args = new sendBuddyContentMessageToAll_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#set_content content;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendBuddyContentMessageToAll  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendBuddyContentMessageToAll_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendBuddyContentMessageToAll failed: unknown result")))
  method sendBuddyContentMessageToAllAsync requestId msg content = 
    self#send_sendBuddyContentMessageToAllAsync requestId msg content;
    self#recv_sendBuddyContentMessageToAllAsync
  method private send_sendBuddyContentMessageToAllAsync requestId msg content = 
    oprot#writeMessageBegin ("sendBuddyContentMessageToAllAsync", Protocol.CALL, seqid);
    let args = new sendBuddyContentMessageToAllAsync_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#set_content content;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendBuddyContentMessageToAllAsync  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendBuddyContentMessageToAllAsync_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendBuddyContentMessageToAllAsync failed: unknown result")))
  method sendBuddyContentMessageToMids requestId msg content mids = 
    self#send_sendBuddyContentMessageToMids requestId msg content mids;
    self#recv_sendBuddyContentMessageToMids
  method private send_sendBuddyContentMessageToMids requestId msg content mids = 
    oprot#writeMessageBegin ("sendBuddyContentMessageToMids", Protocol.CALL, seqid);
    let args = new sendBuddyContentMessageToMids_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#set_content content;
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendBuddyContentMessageToMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendBuddyContentMessageToMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendBuddyContentMessageToMids failed: unknown result")))
  method sendBuddyContentMessageToMidsAsync requestId msg content mids = 
    self#send_sendBuddyContentMessageToMidsAsync requestId msg content mids;
    self#recv_sendBuddyContentMessageToMidsAsync
  method private send_sendBuddyContentMessageToMidsAsync requestId msg content mids = 
    oprot#writeMessageBegin ("sendBuddyContentMessageToMidsAsync", Protocol.CALL, seqid);
    let args = new sendBuddyContentMessageToMidsAsync_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#set_content content;
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendBuddyContentMessageToMidsAsync  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendBuddyContentMessageToMidsAsync_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendBuddyContentMessageToMidsAsync failed: unknown result")))
  method sendBuddyMessageToAll requestId msg = 
    self#send_sendBuddyMessageToAll requestId msg;
    self#recv_sendBuddyMessageToAll
  method private send_sendBuddyMessageToAll requestId msg = 
    oprot#writeMessageBegin ("sendBuddyMessageToAll", Protocol.CALL, seqid);
    let args = new sendBuddyMessageToAll_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendBuddyMessageToAll  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendBuddyMessageToAll_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendBuddyMessageToAll failed: unknown result")))
  method sendBuddyMessageToAllAsync requestId msg = 
    self#send_sendBuddyMessageToAllAsync requestId msg;
    self#recv_sendBuddyMessageToAllAsync
  method private send_sendBuddyMessageToAllAsync requestId msg = 
    oprot#writeMessageBegin ("sendBuddyMessageToAllAsync", Protocol.CALL, seqid);
    let args = new sendBuddyMessageToAllAsync_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendBuddyMessageToAllAsync  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendBuddyMessageToAllAsync_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendBuddyMessageToAllAsync failed: unknown result")))
  method sendBuddyMessageToMids requestId msg mids = 
    self#send_sendBuddyMessageToMids requestId msg mids;
    self#recv_sendBuddyMessageToMids
  method private send_sendBuddyMessageToMids requestId msg mids = 
    oprot#writeMessageBegin ("sendBuddyMessageToMids", Protocol.CALL, seqid);
    let args = new sendBuddyMessageToMids_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendBuddyMessageToMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendBuddyMessageToMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendBuddyMessageToMids failed: unknown result")))
  method sendBuddyMessageToMidsAsync requestId msg mids = 
    self#send_sendBuddyMessageToMidsAsync requestId msg mids;
    self#recv_sendBuddyMessageToMidsAsync
  method private send_sendBuddyMessageToMidsAsync requestId msg mids = 
    oprot#writeMessageBegin ("sendBuddyMessageToMidsAsync", Protocol.CALL, seqid);
    let args = new sendBuddyMessageToMidsAsync_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendBuddyMessageToMidsAsync  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendBuddyMessageToMidsAsync_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendBuddyMessageToMidsAsync failed: unknown result")))
  method sendIndividualEventToAllAsync requestId buddyMid notificationStatus = 
    self#send_sendIndividualEventToAllAsync requestId buddyMid notificationStatus;
    self#recv_sendIndividualEventToAllAsync
  method private send_sendIndividualEventToAllAsync requestId buddyMid notificationStatus = 
    oprot#writeMessageBegin ("sendIndividualEventToAllAsync", Protocol.CALL, seqid);
    let args = new sendIndividualEventToAllAsync_args in
      args#set_requestId requestId;
      args#set_buddyMid buddyMid;
      args#set_notificationStatus notificationStatus;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendIndividualEventToAllAsync  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendIndividualEventToAllAsync_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method setBuddyOnAir requestId onAir = 
    self#send_setBuddyOnAir requestId onAir;
    self#recv_setBuddyOnAir
  method private send_setBuddyOnAir requestId onAir = 
    oprot#writeMessageBegin ("setBuddyOnAir", Protocol.CALL, seqid);
    let args = new setBuddyOnAir_args in
      args#set_requestId requestId;
      args#set_onAir onAir;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_setBuddyOnAir  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_setBuddyOnAir_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "setBuddyOnAir failed: unknown result")))
  method setBuddyOnAirAsync requestId onAir = 
    self#send_setBuddyOnAirAsync requestId onAir;
    self#recv_setBuddyOnAirAsync
  method private send_setBuddyOnAirAsync requestId onAir = 
    oprot#writeMessageBegin ("setBuddyOnAirAsync", Protocol.CALL, seqid);
    let args = new setBuddyOnAirAsync_args in
      args#set_requestId requestId;
      args#set_onAir onAir;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_setBuddyOnAirAsync  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_setBuddyOnAirAsync_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "setBuddyOnAirAsync failed: unknown result")))
  method storeMessage requestId messageRequest = 
    self#send_storeMessage requestId messageRequest;
    self#recv_storeMessage
  method private send_storeMessage requestId messageRequest = 
    oprot#writeMessageBegin ("storeMessage", Protocol.CALL, seqid);
    let args = new storeMessage_args in
      args#set_requestId requestId;
      args#set_messageRequest messageRequest;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_storeMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_storeMessage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "storeMessage failed: unknown result")))
  method unblockBuddyMember requestId mid = 
    self#send_unblockBuddyMember requestId mid;
    self#recv_unblockBuddyMember
  method private send_unblockBuddyMember requestId mid = 
    oprot#writeMessageBegin ("unblockBuddyMember", Protocol.CALL, seqid);
    let args = new unblockBuddyMember_args in
      args#set_requestId requestId;
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_unblockBuddyMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_unblockBuddyMember_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method unregisterBuddy requestId = 
    self#send_unregisterBuddy requestId;
    self#recv_unregisterBuddy
  method private send_unregisterBuddy requestId = 
    oprot#writeMessageBegin ("unregisterBuddy", Protocol.CALL, seqid);
    let args = new unregisterBuddy_args in
      args#set_requestId requestId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_unregisterBuddy  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_unregisterBuddy_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method unregisterBuddyAdmin requestId = 
    self#send_unregisterBuddyAdmin requestId;
    self#recv_unregisterBuddyAdmin
  method private send_unregisterBuddyAdmin requestId = 
    oprot#writeMessageBegin ("unregisterBuddyAdmin", Protocol.CALL, seqid);
    let args = new unregisterBuddyAdmin_args in
      args#set_requestId requestId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_unregisterBuddyAdmin  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_unregisterBuddyAdmin_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateBuddyAdminProfileAttribute requestId attributes = 
    self#send_updateBuddyAdminProfileAttribute requestId attributes;
    self#recv_updateBuddyAdminProfileAttribute
  method private send_updateBuddyAdminProfileAttribute requestId attributes = 
    oprot#writeMessageBegin ("updateBuddyAdminProfileAttribute", Protocol.CALL, seqid);
    let args = new updateBuddyAdminProfileAttribute_args in
      args#set_requestId requestId;
      args#set_attributes attributes;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateBuddyAdminProfileAttribute  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateBuddyAdminProfileAttribute_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateBuddyAdminProfileImage requestId picture = 
    self#send_updateBuddyAdminProfileImage requestId picture;
    self#recv_updateBuddyAdminProfileImage
  method private send_updateBuddyAdminProfileImage requestId picture = 
    oprot#writeMessageBegin ("updateBuddyAdminProfileImage", Protocol.CALL, seqid);
    let args = new updateBuddyAdminProfileImage_args in
      args#set_requestId requestId;
      args#set_picture picture;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateBuddyAdminProfileImage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateBuddyAdminProfileImage_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateBuddyProfileAttributes requestId attributes = 
    self#send_updateBuddyProfileAttributes requestId attributes;
    self#recv_updateBuddyProfileAttributes
  method private send_updateBuddyProfileAttributes requestId attributes = 
    oprot#writeMessageBegin ("updateBuddyProfileAttributes", Protocol.CALL, seqid);
    let args = new updateBuddyProfileAttributes_args in
      args#set_requestId requestId;
      args#set_attributes attributes;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateBuddyProfileAttributes  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateBuddyProfileAttributes_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateBuddyProfileAttributes failed: unknown result")))
  method updateBuddyProfileAttributesAsync requestId attributes = 
    self#send_updateBuddyProfileAttributesAsync requestId attributes;
    self#recv_updateBuddyProfileAttributesAsync
  method private send_updateBuddyProfileAttributesAsync requestId attributes = 
    oprot#writeMessageBegin ("updateBuddyProfileAttributesAsync", Protocol.CALL, seqid);
    let args = new updateBuddyProfileAttributesAsync_args in
      args#set_requestId requestId;
      args#set_attributes attributes;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateBuddyProfileAttributesAsync  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateBuddyProfileAttributesAsync_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateBuddyProfileAttributesAsync failed: unknown result")))
  method updateBuddyProfileImage requestId image = 
    self#send_updateBuddyProfileImage requestId image;
    self#recv_updateBuddyProfileImage
  method private send_updateBuddyProfileImage requestId image = 
    oprot#writeMessageBegin ("updateBuddyProfileImage", Protocol.CALL, seqid);
    let args = new updateBuddyProfileImage_args in
      args#set_requestId requestId;
      args#set_image image;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateBuddyProfileImage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateBuddyProfileImage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateBuddyProfileImage failed: unknown result")))
  method updateBuddyProfileImageAsync requestId image = 
    self#send_updateBuddyProfileImageAsync requestId image;
    self#recv_updateBuddyProfileImageAsync
  method private send_updateBuddyProfileImageAsync requestId image = 
    oprot#writeMessageBegin ("updateBuddyProfileImageAsync", Protocol.CALL, seqid);
    let args = new updateBuddyProfileImageAsync_args in
      args#set_requestId requestId;
      args#set_image image;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateBuddyProfileImageAsync  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateBuddyProfileImageAsync_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateBuddyProfileImageAsync failed: unknown result")))
  method updateBuddySearchId requestId searchId = 
    self#send_updateBuddySearchId requestId searchId;
    self#recv_updateBuddySearchId
  method private send_updateBuddySearchId requestId searchId = 
    oprot#writeMessageBegin ("updateBuddySearchId", Protocol.CALL, seqid);
    let args = new updateBuddySearchId_args in
      args#set_requestId requestId;
      args#set_searchId searchId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateBuddySearchId  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateBuddySearchId_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateBuddySettings settings = 
    self#send_updateBuddySettings settings;
    self#recv_updateBuddySettings
  method private send_updateBuddySettings settings = 
    oprot#writeMessageBegin ("updateBuddySettings", Protocol.CALL, seqid);
    let args = new updateBuddySettings_args in
      args#set_settings settings;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateBuddySettings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateBuddySettings_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method uploadBuddyContent contentType content = 
    self#send_uploadBuddyContent contentType content;
    self#recv_uploadBuddyContent
  method private send_uploadBuddyContent contentType content = 
    oprot#writeMessageBegin ("uploadBuddyContent", Protocol.CALL, seqid);
    let args = new uploadBuddyContent_args in
      args#set_contentType contentType;
      args#set_content content;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_uploadBuddyContent  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_uploadBuddyContent_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "uploadBuddyContent failed: unknown result")))
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 56
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_addBuddyMember (seqid, iprot, oprot) =
    let args = read_addBuddyMember_args iprot in
      iprot#readMessageEnd;
      let result = new addBuddyMember_result in
        (try
          (handler#addBuddyMember args#get_requestId args#get_userMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("addBuddyMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_addBuddyMembers (seqid, iprot, oprot) =
    let args = read_addBuddyMembers_args iprot in
      iprot#readMessageEnd;
      let result = new addBuddyMembers_result in
        (try
          (handler#addBuddyMembers args#get_requestId args#get_userMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("addBuddyMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_blockBuddyMember (seqid, iprot, oprot) =
    let args = read_blockBuddyMember_args iprot in
      iprot#readMessageEnd;
      let result = new blockBuddyMember_result in
        (try
          (handler#blockBuddyMember args#get_requestId args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("blockBuddyMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_commitSendMessagesToAll (seqid, iprot, oprot) =
    let args = read_commitSendMessagesToAll_args iprot in
      iprot#readMessageEnd;
      let result = new commitSendMessagesToAll_result in
        (try
          result#set_success (handler#commitSendMessagesToAll args#get_requestIdList);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("commitSendMessagesToAll", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_commitSendMessagesToMids (seqid, iprot, oprot) =
    let args = read_commitSendMessagesToMids_args iprot in
      iprot#readMessageEnd;
      let result = new commitSendMessagesToMids_result in
        (try
          result#set_success (handler#commitSendMessagesToMids args#get_requestIdList args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("commitSendMessagesToMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_containsBuddyMember (seqid, iprot, oprot) =
    let args = read_containsBuddyMember_args iprot in
      iprot#readMessageEnd;
      let result = new containsBuddyMember_result in
        (try
          result#set_success (handler#containsBuddyMember args#get_requestId args#get_userMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("containsBuddyMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_downloadMessageContent (seqid, iprot, oprot) =
    let args = read_downloadMessageContent_args iprot in
      iprot#readMessageEnd;
      let result = new downloadMessageContent_result in
        (try
          result#set_success (handler#downloadMessageContent args#get_requestId args#get_messageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("downloadMessageContent", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_downloadMessageContentPreview (seqid, iprot, oprot) =
    let args = read_downloadMessageContentPreview_args iprot in
      iprot#readMessageEnd;
      let result = new downloadMessageContentPreview_result in
        (try
          result#set_success (handler#downloadMessageContentPreview args#get_requestId args#get_messageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("downloadMessageContentPreview", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_downloadProfileImage (seqid, iprot, oprot) =
    let args = read_downloadProfileImage_args iprot in
      iprot#readMessageEnd;
      let result = new downloadProfileImage_result in
        (try
          result#set_success (handler#downloadProfileImage args#get_requestId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("downloadProfileImage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_downloadProfileImagePreview (seqid, iprot, oprot) =
    let args = read_downloadProfileImagePreview_args iprot in
      iprot#readMessageEnd;
      let result = new downloadProfileImagePreview_result in
        (try
          result#set_success (handler#downloadProfileImagePreview args#get_requestId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("downloadProfileImagePreview", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getActiveMemberCountByBuddyMid (seqid, iprot, oprot) =
    let args = read_getActiveMemberCountByBuddyMid_args iprot in
      iprot#readMessageEnd;
      let result = new getActiveMemberCountByBuddyMid_result in
        (try
          result#set_success (handler#getActiveMemberCountByBuddyMid args#get_buddyMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getActiveMemberCountByBuddyMid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getActiveMemberMidsByBuddyMid (seqid, iprot, oprot) =
    let args = read_getActiveMemberMidsByBuddyMid_args iprot in
      iprot#readMessageEnd;
      let result = new getActiveMemberMidsByBuddyMid_result in
        (try
          result#set_success (handler#getActiveMemberMidsByBuddyMid args#get_buddyMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getActiveMemberMidsByBuddyMid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getAllBuddyMembers (seqid, iprot, oprot) =
    let _ = read_getAllBuddyMembers_args iprot in
      iprot#readMessageEnd;
      let result = new getAllBuddyMembers_result in
        (try
          result#set_success (handler#getAllBuddyMembers);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getAllBuddyMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBlockedBuddyMembers (seqid, iprot, oprot) =
    let _ = read_getBlockedBuddyMembers_args iprot in
      iprot#readMessageEnd;
      let result = new getBlockedBuddyMembers_result in
        (try
          result#set_success (handler#getBlockedBuddyMembers);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBlockedBuddyMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBlockerCountByBuddyMid (seqid, iprot, oprot) =
    let args = read_getBlockerCountByBuddyMid_args iprot in
      iprot#readMessageEnd;
      let result = new getBlockerCountByBuddyMid_result in
        (try
          result#set_success (handler#getBlockerCountByBuddyMid args#get_buddyMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBlockerCountByBuddyMid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBuddyDetailByMid (seqid, iprot, oprot) =
    let args = read_getBuddyDetailByMid_args iprot in
      iprot#readMessageEnd;
      let result = new getBuddyDetailByMid_result in
        (try
          result#set_success (handler#getBuddyDetailByMid args#get_buddyMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBuddyDetailByMid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBuddyProfile (seqid, iprot, oprot) =
    let _ = read_getBuddyProfile_args iprot in
      iprot#readMessageEnd;
      let result = new getBuddyProfile_result in
        (try
          result#set_success (handler#getBuddyProfile);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBuddyProfile", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getContactTicket (seqid, iprot, oprot) =
    let _ = read_getContactTicket_args iprot in
      iprot#readMessageEnd;
      let result = new getContactTicket_result in
        (try
          result#set_success (handler#getContactTicket);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getContactTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMemberCountByBuddyMid (seqid, iprot, oprot) =
    let args = read_getMemberCountByBuddyMid_args iprot in
      iprot#readMessageEnd;
      let result = new getMemberCountByBuddyMid_result in
        (try
          result#set_success (handler#getMemberCountByBuddyMid args#get_buddyMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMemberCountByBuddyMid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSendBuddyMessageResult (seqid, iprot, oprot) =
    let args = read_getSendBuddyMessageResult_args iprot in
      iprot#readMessageEnd;
      let result = new getSendBuddyMessageResult_result in
        (try
          result#set_success (handler#getSendBuddyMessageResult args#get_sendBuddyMessageRequestId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSendBuddyMessageResult", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSetBuddyOnAirResult (seqid, iprot, oprot) =
    let args = read_getSetBuddyOnAirResult_args iprot in
      iprot#readMessageEnd;
      let result = new getSetBuddyOnAirResult_result in
        (try
          result#set_success (handler#getSetBuddyOnAirResult args#get_setBuddyOnAirRequestId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSetBuddyOnAirResult", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUpdateBuddyProfileResult (seqid, iprot, oprot) =
    let args = read_getUpdateBuddyProfileResult_args iprot in
      iprot#readMessageEnd;
      let result = new getUpdateBuddyProfileResult_result in
        (try
          result#set_success (handler#getUpdateBuddyProfileResult args#get_updateBuddyProfileRequestId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUpdateBuddyProfileResult", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_isBuddyOnAirByMid (seqid, iprot, oprot) =
    let args = read_isBuddyOnAirByMid_args iprot in
      iprot#readMessageEnd;
      let result = new isBuddyOnAirByMid_result in
        (try
          result#set_success (handler#isBuddyOnAirByMid args#get_buddyMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("isBuddyOnAirByMid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_linkAndSendBuddyContentMessageToAllAsync (seqid, iprot, oprot) =
    let args = read_linkAndSendBuddyContentMessageToAllAsync_args iprot in
      iprot#readMessageEnd;
      let result = new linkAndSendBuddyContentMessageToAllAsync_result in
        (try
          result#set_success (handler#linkAndSendBuddyContentMessageToAllAsync args#get_requestId args#get_msg args#get_sourceContentId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("linkAndSendBuddyContentMessageToAllAsync", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_linkAndSendBuddyContentMessageToMids (seqid, iprot, oprot) =
    let args = read_linkAndSendBuddyContentMessageToMids_args iprot in
      iprot#readMessageEnd;
      let result = new linkAndSendBuddyContentMessageToMids_result in
        (try
          result#set_success (handler#linkAndSendBuddyContentMessageToMids args#get_requestId args#get_msg args#get_sourceContentId args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("linkAndSendBuddyContentMessageToMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyBuddyBlocked (seqid, iprot, oprot) =
    let args = read_notifyBuddyBlocked_args iprot in
      iprot#readMessageEnd;
      let result = new notifyBuddyBlocked_result in
        (try
          (handler#notifyBuddyBlocked args#get_buddyMid args#get_blockerMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyBuddyBlocked", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyBuddyUnblocked (seqid, iprot, oprot) =
    let args = read_notifyBuddyUnblocked_args iprot in
      iprot#readMessageEnd;
      let result = new notifyBuddyUnblocked_result in
        (try
          (handler#notifyBuddyUnblocked args#get_buddyMid args#get_blockerMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyBuddyUnblocked", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerBuddy (seqid, iprot, oprot) =
    let args = read_registerBuddy_args iprot in
      iprot#readMessageEnd;
      let result = new registerBuddy_result in
        (try
          result#set_success (handler#registerBuddy args#get_buddyId args#get_searchId args#get_displayName args#get_statusMeessage args#get_picture args#get_settings);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerBuddy", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerBuddyAdmin (seqid, iprot, oprot) =
    let args = read_registerBuddyAdmin_args iprot in
      iprot#readMessageEnd;
      let result = new registerBuddyAdmin_result in
        (try
          result#set_success (handler#registerBuddyAdmin args#get_buddyId args#get_searchId args#get_displayName args#get_statusMessage args#get_picture);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerBuddyAdmin", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reissueContactTicket (seqid, iprot, oprot) =
    let args = read_reissueContactTicket_args iprot in
      iprot#readMessageEnd;
      let result = new reissueContactTicket_result in
        (try
          result#set_success (handler#reissueContactTicket args#get_expirationTime args#get_maxUseCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reissueContactTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeBuddyMember (seqid, iprot, oprot) =
    let args = read_removeBuddyMember_args iprot in
      iprot#readMessageEnd;
      let result = new removeBuddyMember_result in
        (try
          (handler#removeBuddyMember args#get_requestId args#get_userMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeBuddyMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeBuddyMembers (seqid, iprot, oprot) =
    let args = read_removeBuddyMembers_args iprot in
      iprot#readMessageEnd;
      let result = new removeBuddyMembers_result in
        (try
          (handler#removeBuddyMembers args#get_requestId args#get_userMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeBuddyMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendBuddyContentMessageToAll (seqid, iprot, oprot) =
    let args = read_sendBuddyContentMessageToAll_args iprot in
      iprot#readMessageEnd;
      let result = new sendBuddyContentMessageToAll_result in
        (try
          result#set_success (handler#sendBuddyContentMessageToAll args#get_requestId args#get_msg args#get_content);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendBuddyContentMessageToAll", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendBuddyContentMessageToAllAsync (seqid, iprot, oprot) =
    let args = read_sendBuddyContentMessageToAllAsync_args iprot in
      iprot#readMessageEnd;
      let result = new sendBuddyContentMessageToAllAsync_result in
        (try
          result#set_success (handler#sendBuddyContentMessageToAllAsync args#get_requestId args#get_msg args#get_content);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendBuddyContentMessageToAllAsync", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendBuddyContentMessageToMids (seqid, iprot, oprot) =
    let args = read_sendBuddyContentMessageToMids_args iprot in
      iprot#readMessageEnd;
      let result = new sendBuddyContentMessageToMids_result in
        (try
          result#set_success (handler#sendBuddyContentMessageToMids args#get_requestId args#get_msg args#get_content args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendBuddyContentMessageToMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendBuddyContentMessageToMidsAsync (seqid, iprot, oprot) =
    let args = read_sendBuddyContentMessageToMidsAsync_args iprot in
      iprot#readMessageEnd;
      let result = new sendBuddyContentMessageToMidsAsync_result in
        (try
          result#set_success (handler#sendBuddyContentMessageToMidsAsync args#get_requestId args#get_msg args#get_content args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendBuddyContentMessageToMidsAsync", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendBuddyMessageToAll (seqid, iprot, oprot) =
    let args = read_sendBuddyMessageToAll_args iprot in
      iprot#readMessageEnd;
      let result = new sendBuddyMessageToAll_result in
        (try
          result#set_success (handler#sendBuddyMessageToAll args#get_requestId args#get_msg);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendBuddyMessageToAll", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendBuddyMessageToAllAsync (seqid, iprot, oprot) =
    let args = read_sendBuddyMessageToAllAsync_args iprot in
      iprot#readMessageEnd;
      let result = new sendBuddyMessageToAllAsync_result in
        (try
          result#set_success (handler#sendBuddyMessageToAllAsync args#get_requestId args#get_msg);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendBuddyMessageToAllAsync", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendBuddyMessageToMids (seqid, iprot, oprot) =
    let args = read_sendBuddyMessageToMids_args iprot in
      iprot#readMessageEnd;
      let result = new sendBuddyMessageToMids_result in
        (try
          result#set_success (handler#sendBuddyMessageToMids args#get_requestId args#get_msg args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendBuddyMessageToMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendBuddyMessageToMidsAsync (seqid, iprot, oprot) =
    let args = read_sendBuddyMessageToMidsAsync_args iprot in
      iprot#readMessageEnd;
      let result = new sendBuddyMessageToMidsAsync_result in
        (try
          result#set_success (handler#sendBuddyMessageToMidsAsync args#get_requestId args#get_msg args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendBuddyMessageToMidsAsync", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendIndividualEventToAllAsync (seqid, iprot, oprot) =
    let args = read_sendIndividualEventToAllAsync_args iprot in
      iprot#readMessageEnd;
      let result = new sendIndividualEventToAllAsync_result in
        (try
          (handler#sendIndividualEventToAllAsync args#get_requestId args#get_buddyMid args#get_notificationStatus);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendIndividualEventToAllAsync", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_setBuddyOnAir (seqid, iprot, oprot) =
    let args = read_setBuddyOnAir_args iprot in
      iprot#readMessageEnd;
      let result = new setBuddyOnAir_result in
        (try
          result#set_success (handler#setBuddyOnAir args#get_requestId args#get_onAir);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("setBuddyOnAir", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_setBuddyOnAirAsync (seqid, iprot, oprot) =
    let args = read_setBuddyOnAirAsync_args iprot in
      iprot#readMessageEnd;
      let result = new setBuddyOnAirAsync_result in
        (try
          result#set_success (handler#setBuddyOnAirAsync args#get_requestId args#get_onAir);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("setBuddyOnAirAsync", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_storeMessage (seqid, iprot, oprot) =
    let args = read_storeMessage_args iprot in
      iprot#readMessageEnd;
      let result = new storeMessage_result in
        (try
          result#set_success (handler#storeMessage args#get_requestId args#get_messageRequest);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("storeMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_unblockBuddyMember (seqid, iprot, oprot) =
    let args = read_unblockBuddyMember_args iprot in
      iprot#readMessageEnd;
      let result = new unblockBuddyMember_result in
        (try
          (handler#unblockBuddyMember args#get_requestId args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("unblockBuddyMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_unregisterBuddy (seqid, iprot, oprot) =
    let args = read_unregisterBuddy_args iprot in
      iprot#readMessageEnd;
      let result = new unregisterBuddy_result in
        (try
          (handler#unregisterBuddy args#get_requestId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("unregisterBuddy", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_unregisterBuddyAdmin (seqid, iprot, oprot) =
    let args = read_unregisterBuddyAdmin_args iprot in
      iprot#readMessageEnd;
      let result = new unregisterBuddyAdmin_result in
        (try
          (handler#unregisterBuddyAdmin args#get_requestId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("unregisterBuddyAdmin", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateBuddyAdminProfileAttribute (seqid, iprot, oprot) =
    let args = read_updateBuddyAdminProfileAttribute_args iprot in
      iprot#readMessageEnd;
      let result = new updateBuddyAdminProfileAttribute_result in
        (try
          (handler#updateBuddyAdminProfileAttribute args#get_requestId args#get_attributes);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateBuddyAdminProfileAttribute", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateBuddyAdminProfileImage (seqid, iprot, oprot) =
    let args = read_updateBuddyAdminProfileImage_args iprot in
      iprot#readMessageEnd;
      let result = new updateBuddyAdminProfileImage_result in
        (try
          (handler#updateBuddyAdminProfileImage args#get_requestId args#get_picture);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateBuddyAdminProfileImage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateBuddyProfileAttributes (seqid, iprot, oprot) =
    let args = read_updateBuddyProfileAttributes_args iprot in
      iprot#readMessageEnd;
      let result = new updateBuddyProfileAttributes_result in
        (try
          result#set_success (handler#updateBuddyProfileAttributes args#get_requestId args#get_attributes);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateBuddyProfileAttributes", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateBuddyProfileAttributesAsync (seqid, iprot, oprot) =
    let args = read_updateBuddyProfileAttributesAsync_args iprot in
      iprot#readMessageEnd;
      let result = new updateBuddyProfileAttributesAsync_result in
        (try
          result#set_success (handler#updateBuddyProfileAttributesAsync args#get_requestId args#get_attributes);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateBuddyProfileAttributesAsync", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateBuddyProfileImage (seqid, iprot, oprot) =
    let args = read_updateBuddyProfileImage_args iprot in
      iprot#readMessageEnd;
      let result = new updateBuddyProfileImage_result in
        (try
          result#set_success (handler#updateBuddyProfileImage args#get_requestId args#get_image);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateBuddyProfileImage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateBuddyProfileImageAsync (seqid, iprot, oprot) =
    let args = read_updateBuddyProfileImageAsync_args iprot in
      iprot#readMessageEnd;
      let result = new updateBuddyProfileImageAsync_result in
        (try
          result#set_success (handler#updateBuddyProfileImageAsync args#get_requestId args#get_image);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateBuddyProfileImageAsync", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateBuddySearchId (seqid, iprot, oprot) =
    let args = read_updateBuddySearchId_args iprot in
      iprot#readMessageEnd;
      let result = new updateBuddySearchId_result in
        (try
          (handler#updateBuddySearchId args#get_requestId args#get_searchId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateBuddySearchId", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateBuddySettings (seqid, iprot, oprot) =
    let args = read_updateBuddySettings_args iprot in
      iprot#readMessageEnd;
      let result = new updateBuddySettings_result in
        (try
          (handler#updateBuddySettings args#get_settings);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateBuddySettings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_uploadBuddyContent (seqid, iprot, oprot) =
    let args = read_uploadBuddyContent_args iprot in
      iprot#readMessageEnd;
      let result = new uploadBuddyContent_result in
        (try
          result#set_success (handler#uploadBuddyContent args#get_contentType args#get_content);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("uploadBuddyContent", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "addBuddyMember" self#process_addBuddyMember;
    Hashtbl.add processMap "addBuddyMembers" self#process_addBuddyMembers;
    Hashtbl.add processMap "blockBuddyMember" self#process_blockBuddyMember;
    Hashtbl.add processMap "commitSendMessagesToAll" self#process_commitSendMessagesToAll;
    Hashtbl.add processMap "commitSendMessagesToMids" self#process_commitSendMessagesToMids;
    Hashtbl.add processMap "containsBuddyMember" self#process_containsBuddyMember;
    Hashtbl.add processMap "downloadMessageContent" self#process_downloadMessageContent;
    Hashtbl.add processMap "downloadMessageContentPreview" self#process_downloadMessageContentPreview;
    Hashtbl.add processMap "downloadProfileImage" self#process_downloadProfileImage;
    Hashtbl.add processMap "downloadProfileImagePreview" self#process_downloadProfileImagePreview;
    Hashtbl.add processMap "getActiveMemberCountByBuddyMid" self#process_getActiveMemberCountByBuddyMid;
    Hashtbl.add processMap "getActiveMemberMidsByBuddyMid" self#process_getActiveMemberMidsByBuddyMid;
    Hashtbl.add processMap "getAllBuddyMembers" self#process_getAllBuddyMembers;
    Hashtbl.add processMap "getBlockedBuddyMembers" self#process_getBlockedBuddyMembers;
    Hashtbl.add processMap "getBlockerCountByBuddyMid" self#process_getBlockerCountByBuddyMid;
    Hashtbl.add processMap "getBuddyDetailByMid" self#process_getBuddyDetailByMid;
    Hashtbl.add processMap "getBuddyProfile" self#process_getBuddyProfile;
    Hashtbl.add processMap "getContactTicket" self#process_getContactTicket;
    Hashtbl.add processMap "getMemberCountByBuddyMid" self#process_getMemberCountByBuddyMid;
    Hashtbl.add processMap "getSendBuddyMessageResult" self#process_getSendBuddyMessageResult;
    Hashtbl.add processMap "getSetBuddyOnAirResult" self#process_getSetBuddyOnAirResult;
    Hashtbl.add processMap "getUpdateBuddyProfileResult" self#process_getUpdateBuddyProfileResult;
    Hashtbl.add processMap "isBuddyOnAirByMid" self#process_isBuddyOnAirByMid;
    Hashtbl.add processMap "linkAndSendBuddyContentMessageToAllAsync" self#process_linkAndSendBuddyContentMessageToAllAsync;
    Hashtbl.add processMap "linkAndSendBuddyContentMessageToMids" self#process_linkAndSendBuddyContentMessageToMids;
    Hashtbl.add processMap "notifyBuddyBlocked" self#process_notifyBuddyBlocked;
    Hashtbl.add processMap "notifyBuddyUnblocked" self#process_notifyBuddyUnblocked;
    Hashtbl.add processMap "registerBuddy" self#process_registerBuddy;
    Hashtbl.add processMap "registerBuddyAdmin" self#process_registerBuddyAdmin;
    Hashtbl.add processMap "reissueContactTicket" self#process_reissueContactTicket;
    Hashtbl.add processMap "removeBuddyMember" self#process_removeBuddyMember;
    Hashtbl.add processMap "removeBuddyMembers" self#process_removeBuddyMembers;
    Hashtbl.add processMap "sendBuddyContentMessageToAll" self#process_sendBuddyContentMessageToAll;
    Hashtbl.add processMap "sendBuddyContentMessageToAllAsync" self#process_sendBuddyContentMessageToAllAsync;
    Hashtbl.add processMap "sendBuddyContentMessageToMids" self#process_sendBuddyContentMessageToMids;
    Hashtbl.add processMap "sendBuddyContentMessageToMidsAsync" self#process_sendBuddyContentMessageToMidsAsync;
    Hashtbl.add processMap "sendBuddyMessageToAll" self#process_sendBuddyMessageToAll;
    Hashtbl.add processMap "sendBuddyMessageToAllAsync" self#process_sendBuddyMessageToAllAsync;
    Hashtbl.add processMap "sendBuddyMessageToMids" self#process_sendBuddyMessageToMids;
    Hashtbl.add processMap "sendBuddyMessageToMidsAsync" self#process_sendBuddyMessageToMidsAsync;
    Hashtbl.add processMap "sendIndividualEventToAllAsync" self#process_sendIndividualEventToAllAsync;
    Hashtbl.add processMap "setBuddyOnAir" self#process_setBuddyOnAir;
    Hashtbl.add processMap "setBuddyOnAirAsync" self#process_setBuddyOnAirAsync;
    Hashtbl.add processMap "storeMessage" self#process_storeMessage;
    Hashtbl.add processMap "unblockBuddyMember" self#process_unblockBuddyMember;
    Hashtbl.add processMap "unregisterBuddy" self#process_unregisterBuddy;
    Hashtbl.add processMap "unregisterBuddyAdmin" self#process_unregisterBuddyAdmin;
    Hashtbl.add processMap "updateBuddyAdminProfileAttribute" self#process_updateBuddyAdminProfileAttribute;
    Hashtbl.add processMap "updateBuddyAdminProfileImage" self#process_updateBuddyAdminProfileImage;
    Hashtbl.add processMap "updateBuddyProfileAttributes" self#process_updateBuddyProfileAttributes;
    Hashtbl.add processMap "updateBuddyProfileAttributesAsync" self#process_updateBuddyProfileAttributesAsync;
    Hashtbl.add processMap "updateBuddyProfileImage" self#process_updateBuddyProfileImage;
    Hashtbl.add processMap "updateBuddyProfileImageAsync" self#process_updateBuddyProfileImageAsync;
    Hashtbl.add processMap "updateBuddySearchId" self#process_updateBuddySearchId;
    Hashtbl.add processMap "updateBuddySettings" self#process_updateBuddySettings;
    Hashtbl.add processMap "uploadBuddyContent" self#process_uploadBuddyContent;
end

