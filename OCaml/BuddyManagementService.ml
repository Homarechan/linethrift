(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class addBuddyMember_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "addBuddyMember_args.requestId") | Some _x4814 -> _x4814
  method set_requestId _x4814 = _requestId <- Some _x4814
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _userMid : string option = None
  method get_userMid = _userMid
  method grab_userMid = match _userMid with None->raise (Field_empty "addBuddyMember_args.userMid") | Some _x4815 -> _x4815
  method set_userMid _x4815 = _userMid <- Some _x4815
  method unset_userMid = _userMid <- None
  method reset_userMid = _userMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addBuddyMember_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addBuddyMember_args (iprot : Protocol.t) =
  let _str4818 = new addBuddyMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4819,_id4820) = iprot#readFieldBegin in
        if _t4819 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4820 with 
          | 1 -> (if _t4819 = Protocol.T_STRING then
              _str4818#set_requestId iprot#readString
            else
              iprot#skip _t4819)
          | 2 -> (if _t4819 = Protocol.T_STRING then
              _str4818#set_userMid iprot#readString
            else
              iprot#skip _t4819)
          | _ -> iprot#skip _t4819);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4818

class addBuddyMember_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "addBuddyMember_result.e") | Some _x4821 -> _x4821
  method set_e _x4821 = _e <- Some _x4821
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addBuddyMember_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addBuddyMember_result (iprot : Protocol.t) =
  let _str4824 = new addBuddyMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4825,_id4826) = iprot#readFieldBegin in
        if _t4825 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4826 with 
          | 1 -> (if _t4825 = Protocol.T_STRUCT then
              _str4824#set_e (read_talkException iprot)
            else
              iprot#skip _t4825)
          | _ -> iprot#skip _t4825);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4824

class addBuddyMembers_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "addBuddyMembers_args.requestId") | Some _x4827 -> _x4827
  method set_requestId _x4827 = _requestId <- Some _x4827
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _userMids : string list option = None
  method get_userMids = _userMids
  method grab_userMids = match _userMids with None->raise (Field_empty "addBuddyMembers_args.userMids") | Some _x4828 -> _x4828
  method set_userMids _x4828 = _userMids <- Some _x4828
  method unset_userMids = _userMids <- None
  method reset_userMids = _userMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addBuddyMembers_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("userMids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter4831 ->         oprot#writeString(_iter4831);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addBuddyMembers_args (iprot : Protocol.t) =
  let _str4832 = new addBuddyMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4833,_id4834) = iprot#readFieldBegin in
        if _t4833 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4834 with 
          | 1 -> (if _t4833 = Protocol.T_STRING then
              _str4832#set_requestId iprot#readString
            else
              iprot#skip _t4833)
          | 2 -> (if _t4833 = Protocol.T_LIST then
              _str4832#set_userMids 
                (let (_etype4838,_size4835) = iprot#readListBegin in
                  let _con4839 = (Array.to_list (Array.init _size4835 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con4839)
            else
              iprot#skip _t4833)
          | _ -> iprot#skip _t4833);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4832

class addBuddyMembers_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "addBuddyMembers_result.e") | Some _x4840 -> _x4840
  method set_e _x4840 = _e <- Some _x4840
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addBuddyMembers_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addBuddyMembers_result (iprot : Protocol.t) =
  let _str4843 = new addBuddyMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4844,_id4845) = iprot#readFieldBegin in
        if _t4844 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4845 with 
          | 1 -> (if _t4844 = Protocol.T_STRUCT then
              _str4843#set_e (read_talkException iprot)
            else
              iprot#skip _t4844)
          | _ -> iprot#skip _t4844);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4843

class blockBuddyMember_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "blockBuddyMember_args.requestId") | Some _x4846 -> _x4846
  method set_requestId _x4846 = _requestId <- Some _x4846
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "blockBuddyMember_args.mid") | Some _x4847 -> _x4847
  method set_mid _x4847 = _mid <- Some _x4847
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "blockBuddyMember_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_blockBuddyMember_args (iprot : Protocol.t) =
  let _str4850 = new blockBuddyMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4851,_id4852) = iprot#readFieldBegin in
        if _t4851 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4852 with 
          | 1 -> (if _t4851 = Protocol.T_STRING then
              _str4850#set_requestId iprot#readString
            else
              iprot#skip _t4851)
          | 2 -> (if _t4851 = Protocol.T_STRING then
              _str4850#set_mid iprot#readString
            else
              iprot#skip _t4851)
          | _ -> iprot#skip _t4851);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4850

class blockBuddyMember_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "blockBuddyMember_result.e") | Some _x4853 -> _x4853
  method set_e _x4853 = _e <- Some _x4853
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "blockBuddyMember_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_blockBuddyMember_result (iprot : Protocol.t) =
  let _str4856 = new blockBuddyMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4857,_id4858) = iprot#readFieldBegin in
        if _t4857 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4858 with 
          | 1 -> (if _t4857 = Protocol.T_STRUCT then
              _str4856#set_e (read_talkException iprot)
            else
              iprot#skip _t4857)
          | _ -> iprot#skip _t4857);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4856

class commitSendMessagesToAll_args =
object (self)
  val mutable _requestIdList : string list option = None
  method get_requestIdList = _requestIdList
  method grab_requestIdList = match _requestIdList with None->raise (Field_empty "commitSendMessagesToAll_args.requestIdList") | Some _x4859 -> _x4859
  method set_requestIdList _x4859 = _requestIdList <- Some _x4859
  method unset_requestIdList = _requestIdList <- None
  method reset_requestIdList = _requestIdList <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitSendMessagesToAll_args";
    (match _requestIdList with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestIdList",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter4862 ->         oprot#writeString(_iter4862);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitSendMessagesToAll_args (iprot : Protocol.t) =
  let _str4863 = new commitSendMessagesToAll_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4864,_id4865) = iprot#readFieldBegin in
        if _t4864 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4865 with 
          | 1 -> (if _t4864 = Protocol.T_LIST then
              _str4863#set_requestIdList 
                (let (_etype4869,_size4866) = iprot#readListBegin in
                  let _con4870 = (Array.to_list (Array.init _size4866 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con4870)
            else
              iprot#skip _t4864)
          | _ -> iprot#skip _t4864);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4863

class commitSendMessagesToAll_result =
object (self)
  val mutable _success : sendBuddyMessageResult list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "commitSendMessagesToAll_result.success") | Some _x4871 -> _x4871
  method set_success _x4871 = _success <- Some _x4871
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "commitSendMessagesToAll_result.e") | Some _x4872 -> _x4872
  method set_e _x4872 = _e <- Some _x4872
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitSendMessagesToAll_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter4875 ->         _iter4875#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitSendMessagesToAll_result (iprot : Protocol.t) =
  let _str4876 = new commitSendMessagesToAll_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4877,_id4878) = iprot#readFieldBegin in
        if _t4877 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4878 with 
          | 0 -> (if _t4877 = Protocol.T_LIST then
              _str4876#set_success 
                (let (_etype4882,_size4879) = iprot#readListBegin in
                  let _con4883 = (Array.to_list (Array.init _size4879 (fun _ -> (read_sendBuddyMessageResult iprot)))) in
                    iprot#readListEnd; _con4883)
            else
              iprot#skip _t4877)
          | 1 -> (if _t4877 = Protocol.T_STRUCT then
              _str4876#set_e (read_talkException iprot)
            else
              iprot#skip _t4877)
          | _ -> iprot#skip _t4877);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4876

class commitSendMessagesToMids_args =
object (self)
  val mutable _requestIdList : string list option = None
  method get_requestIdList = _requestIdList
  method grab_requestIdList = match _requestIdList with None->raise (Field_empty "commitSendMessagesToMids_args.requestIdList") | Some _x4884 -> _x4884
  method set_requestIdList _x4884 = _requestIdList <- Some _x4884
  method unset_requestIdList = _requestIdList <- None
  method reset_requestIdList = _requestIdList <- None

  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "commitSendMessagesToMids_args.mids") | Some _x4885 -> _x4885
  method set_mids _x4885 = _mids <- Some _x4885
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitSendMessagesToMids_args";
    (match _requestIdList with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestIdList",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter4888 ->         oprot#writeString(_iter4888);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter4889 ->         oprot#writeString(_iter4889);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitSendMessagesToMids_args (iprot : Protocol.t) =
  let _str4890 = new commitSendMessagesToMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4891,_id4892) = iprot#readFieldBegin in
        if _t4891 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4892 with 
          | 1 -> (if _t4891 = Protocol.T_LIST then
              _str4890#set_requestIdList 
                (let (_etype4896,_size4893) = iprot#readListBegin in
                  let _con4897 = (Array.to_list (Array.init _size4893 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con4897)
            else
              iprot#skip _t4891)
          | 2 -> (if _t4891 = Protocol.T_LIST then
              _str4890#set_mids 
                (let (_etype4901,_size4898) = iprot#readListBegin in
                  let _con4902 = (Array.to_list (Array.init _size4898 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con4902)
            else
              iprot#skip _t4891)
          | _ -> iprot#skip _t4891);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4890

class commitSendMessagesToMids_result =
object (self)
  val mutable _success : sendBuddyMessageResult list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "commitSendMessagesToMids_result.success") | Some _x4903 -> _x4903
  method set_success _x4903 = _success <- Some _x4903
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "commitSendMessagesToMids_result.e") | Some _x4904 -> _x4904
  method set_e _x4904 = _e <- Some _x4904
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "commitSendMessagesToMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter4907 ->         _iter4907#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_commitSendMessagesToMids_result (iprot : Protocol.t) =
  let _str4908 = new commitSendMessagesToMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4909,_id4910) = iprot#readFieldBegin in
        if _t4909 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4910 with 
          | 0 -> (if _t4909 = Protocol.T_LIST then
              _str4908#set_success 
                (let (_etype4914,_size4911) = iprot#readListBegin in
                  let _con4915 = (Array.to_list (Array.init _size4911 (fun _ -> (read_sendBuddyMessageResult iprot)))) in
                    iprot#readListEnd; _con4915)
            else
              iprot#skip _t4909)
          | 1 -> (if _t4909 = Protocol.T_STRUCT then
              _str4908#set_e (read_talkException iprot)
            else
              iprot#skip _t4909)
          | _ -> iprot#skip _t4909);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4908

class containsBuddyMember_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "containsBuddyMember_args.requestId") | Some _x4916 -> _x4916
  method set_requestId _x4916 = _requestId <- Some _x4916
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _userMid : string option = None
  method get_userMid = _userMid
  method grab_userMid = match _userMid with None->raise (Field_empty "containsBuddyMember_args.userMid") | Some _x4917 -> _x4917
  method set_userMid _x4917 = _userMid <- Some _x4917
  method unset_userMid = _userMid <- None
  method reset_userMid = _userMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "containsBuddyMember_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_containsBuddyMember_args (iprot : Protocol.t) =
  let _str4920 = new containsBuddyMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4921,_id4922) = iprot#readFieldBegin in
        if _t4921 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4922 with 
          | 1 -> (if _t4921 = Protocol.T_STRING then
              _str4920#set_requestId iprot#readString
            else
              iprot#skip _t4921)
          | 2 -> (if _t4921 = Protocol.T_STRING then
              _str4920#set_userMid iprot#readString
            else
              iprot#skip _t4921)
          | _ -> iprot#skip _t4921);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4920

class containsBuddyMember_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "containsBuddyMember_result.success") | Some _x4923 -> _x4923
  method set_success _x4923 = _success <- Some _x4923
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "containsBuddyMember_result.e") | Some _x4924 -> _x4924
  method set_e _x4924 = _e <- Some _x4924
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "containsBuddyMember_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_containsBuddyMember_result (iprot : Protocol.t) =
  let _str4927 = new containsBuddyMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4928,_id4929) = iprot#readFieldBegin in
        if _t4928 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4929 with 
          | 0 -> (if _t4928 = Protocol.T_BOOL then
              _str4927#set_success iprot#readBool
            else
              iprot#skip _t4928)
          | 1 -> (if _t4928 = Protocol.T_STRUCT then
              _str4927#set_e (read_talkException iprot)
            else
              iprot#skip _t4928)
          | _ -> iprot#skip _t4928);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4927

class downloadMessageContent_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "downloadMessageContent_args.requestId") | Some _x4930 -> _x4930
  method set_requestId _x4930 = _requestId <- Some _x4930
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "downloadMessageContent_args.messageId") | Some _x4931 -> _x4931
  method set_messageId _x4931 = _messageId <- Some _x4931
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "downloadMessageContent_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_downloadMessageContent_args (iprot : Protocol.t) =
  let _str4934 = new downloadMessageContent_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4935,_id4936) = iprot#readFieldBegin in
        if _t4935 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4936 with 
          | 1 -> (if _t4935 = Protocol.T_STRING then
              _str4934#set_requestId iprot#readString
            else
              iprot#skip _t4935)
          | 2 -> (if _t4935 = Protocol.T_STRING then
              _str4934#set_messageId iprot#readString
            else
              iprot#skip _t4935)
          | _ -> iprot#skip _t4935);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4934

class downloadMessageContent_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "downloadMessageContent_result.success") | Some _x4937 -> _x4937
  method set_success _x4937 = _success <- Some _x4937
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "downloadMessageContent_result.e") | Some _x4938 -> _x4938
  method set_e _x4938 = _e <- Some _x4938
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "downloadMessageContent_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_downloadMessageContent_result (iprot : Protocol.t) =
  let _str4941 = new downloadMessageContent_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4942,_id4943) = iprot#readFieldBegin in
        if _t4942 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4943 with 
          | 0 -> (if _t4942 = Protocol.T_STRING then
              _str4941#set_success iprot#readString
            else
              iprot#skip _t4942)
          | 1 -> (if _t4942 = Protocol.T_STRUCT then
              _str4941#set_e (read_talkException iprot)
            else
              iprot#skip _t4942)
          | _ -> iprot#skip _t4942);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4941

class downloadMessageContentPreview_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "downloadMessageContentPreview_args.requestId") | Some _x4944 -> _x4944
  method set_requestId _x4944 = _requestId <- Some _x4944
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _messageId : string option = None
  method get_messageId = _messageId
  method grab_messageId = match _messageId with None->raise (Field_empty "downloadMessageContentPreview_args.messageId") | Some _x4945 -> _x4945
  method set_messageId _x4945 = _messageId <- Some _x4945
  method unset_messageId = _messageId <- None
  method reset_messageId = _messageId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "downloadMessageContentPreview_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageId with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_downloadMessageContentPreview_args (iprot : Protocol.t) =
  let _str4948 = new downloadMessageContentPreview_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4949,_id4950) = iprot#readFieldBegin in
        if _t4949 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4950 with 
          | 1 -> (if _t4949 = Protocol.T_STRING then
              _str4948#set_requestId iprot#readString
            else
              iprot#skip _t4949)
          | 2 -> (if _t4949 = Protocol.T_STRING then
              _str4948#set_messageId iprot#readString
            else
              iprot#skip _t4949)
          | _ -> iprot#skip _t4949);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4948

class downloadMessageContentPreview_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "downloadMessageContentPreview_result.success") | Some _x4951 -> _x4951
  method set_success _x4951 = _success <- Some _x4951
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "downloadMessageContentPreview_result.e") | Some _x4952 -> _x4952
  method set_e _x4952 = _e <- Some _x4952
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "downloadMessageContentPreview_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_downloadMessageContentPreview_result (iprot : Protocol.t) =
  let _str4955 = new downloadMessageContentPreview_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4956,_id4957) = iprot#readFieldBegin in
        if _t4956 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4957 with 
          | 0 -> (if _t4956 = Protocol.T_STRING then
              _str4955#set_success iprot#readString
            else
              iprot#skip _t4956)
          | 1 -> (if _t4956 = Protocol.T_STRUCT then
              _str4955#set_e (read_talkException iprot)
            else
              iprot#skip _t4956)
          | _ -> iprot#skip _t4956);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4955

class downloadProfileImage_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "downloadProfileImage_args.requestId") | Some _x4958 -> _x4958
  method set_requestId _x4958 = _requestId <- Some _x4958
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "downloadProfileImage_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_downloadProfileImage_args (iprot : Protocol.t) =
  let _str4961 = new downloadProfileImage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4962,_id4963) = iprot#readFieldBegin in
        if _t4962 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4963 with 
          | 1 -> (if _t4962 = Protocol.T_STRING then
              _str4961#set_requestId iprot#readString
            else
              iprot#skip _t4962)
          | _ -> iprot#skip _t4962);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4961

class downloadProfileImage_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "downloadProfileImage_result.success") | Some _x4964 -> _x4964
  method set_success _x4964 = _success <- Some _x4964
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "downloadProfileImage_result.e") | Some _x4965 -> _x4965
  method set_e _x4965 = _e <- Some _x4965
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "downloadProfileImage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_downloadProfileImage_result (iprot : Protocol.t) =
  let _str4968 = new downloadProfileImage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4969,_id4970) = iprot#readFieldBegin in
        if _t4969 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4970 with 
          | 0 -> (if _t4969 = Protocol.T_STRING then
              _str4968#set_success iprot#readString
            else
              iprot#skip _t4969)
          | 1 -> (if _t4969 = Protocol.T_STRUCT then
              _str4968#set_e (read_talkException iprot)
            else
              iprot#skip _t4969)
          | _ -> iprot#skip _t4969);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4968

class downloadProfileImagePreview_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "downloadProfileImagePreview_args.requestId") | Some _x4971 -> _x4971
  method set_requestId _x4971 = _requestId <- Some _x4971
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "downloadProfileImagePreview_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_downloadProfileImagePreview_args (iprot : Protocol.t) =
  let _str4974 = new downloadProfileImagePreview_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4975,_id4976) = iprot#readFieldBegin in
        if _t4975 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4976 with 
          | 1 -> (if _t4975 = Protocol.T_STRING then
              _str4974#set_requestId iprot#readString
            else
              iprot#skip _t4975)
          | _ -> iprot#skip _t4975);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4974

class downloadProfileImagePreview_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "downloadProfileImagePreview_result.success") | Some _x4977 -> _x4977
  method set_success _x4977 = _success <- Some _x4977
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "downloadProfileImagePreview_result.e") | Some _x4978 -> _x4978
  method set_e _x4978 = _e <- Some _x4978
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "downloadProfileImagePreview_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_downloadProfileImagePreview_result (iprot : Protocol.t) =
  let _str4981 = new downloadProfileImagePreview_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4982,_id4983) = iprot#readFieldBegin in
        if _t4982 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4983 with 
          | 0 -> (if _t4982 = Protocol.T_STRING then
              _str4981#set_success iprot#readString
            else
              iprot#skip _t4982)
          | 1 -> (if _t4982 = Protocol.T_STRUCT then
              _str4981#set_e (read_talkException iprot)
            else
              iprot#skip _t4982)
          | _ -> iprot#skip _t4982);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4981

class getActiveMemberCountByBuddyMid_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "getActiveMemberCountByBuddyMid_args.buddyMid") | Some _x4984 -> _x4984
  method set_buddyMid _x4984 = _buddyMid <- Some _x4984
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActiveMemberCountByBuddyMid_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActiveMemberCountByBuddyMid_args (iprot : Protocol.t) =
  let _str4987 = new getActiveMemberCountByBuddyMid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4988,_id4989) = iprot#readFieldBegin in
        if _t4988 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4989 with 
          | 2 -> (if _t4988 = Protocol.T_STRING then
              _str4987#set_buddyMid iprot#readString
            else
              iprot#skip _t4988)
          | _ -> iprot#skip _t4988);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4987

class getActiveMemberCountByBuddyMid_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getActiveMemberCountByBuddyMid_result.success") | Some _x4990 -> _x4990
  method set_success _x4990 = _success <- Some _x4990
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getActiveMemberCountByBuddyMid_result.e") | Some _x4991 -> _x4991
  method set_e _x4991 = _e <- Some _x4991
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActiveMemberCountByBuddyMid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActiveMemberCountByBuddyMid_result (iprot : Protocol.t) =
  let _str4994 = new getActiveMemberCountByBuddyMid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4995,_id4996) = iprot#readFieldBegin in
        if _t4995 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4996 with 
          | 0 -> (if _t4995 = Protocol.T_I64 then
              _str4994#set_success iprot#readI64
            else
              iprot#skip _t4995)
          | 1 -> (if _t4995 = Protocol.T_STRUCT then
              _str4994#set_e (read_talkException iprot)
            else
              iprot#skip _t4995)
          | _ -> iprot#skip _t4995);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4994

class getActiveMemberMidsByBuddyMid_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "getActiveMemberMidsByBuddyMid_args.buddyMid") | Some _x4997 -> _x4997
  method set_buddyMid _x4997 = _buddyMid <- Some _x4997
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActiveMemberMidsByBuddyMid_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActiveMemberMidsByBuddyMid_args (iprot : Protocol.t) =
  let _str5000 = new getActiveMemberMidsByBuddyMid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5001,_id5002) = iprot#readFieldBegin in
        if _t5001 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5002 with 
          | 2 -> (if _t5001 = Protocol.T_STRING then
              _str5000#set_buddyMid iprot#readString
            else
              iprot#skip _t5001)
          | _ -> iprot#skip _t5001);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5000

class getActiveMemberMidsByBuddyMid_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getActiveMemberMidsByBuddyMid_result.success") | Some _x5003 -> _x5003
  method set_success _x5003 = _success <- Some _x5003
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getActiveMemberMidsByBuddyMid_result.e") | Some _x5004 -> _x5004
  method set_e _x5004 = _e <- Some _x5004
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getActiveMemberMidsByBuddyMid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5007 ->         oprot#writeString(_iter5007);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getActiveMemberMidsByBuddyMid_result (iprot : Protocol.t) =
  let _str5008 = new getActiveMemberMidsByBuddyMid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5009,_id5010) = iprot#readFieldBegin in
        if _t5009 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5010 with 
          | 0 -> (if _t5009 = Protocol.T_LIST then
              _str5008#set_success 
                (let (_etype5014,_size5011) = iprot#readListBegin in
                  let _con5015 = (Array.to_list (Array.init _size5011 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5015)
            else
              iprot#skip _t5009)
          | 1 -> (if _t5009 = Protocol.T_STRUCT then
              _str5008#set_e (read_talkException iprot)
            else
              iprot#skip _t5009)
          | _ -> iprot#skip _t5009);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5008

class getAllBuddyMembers_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllBuddyMembers_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllBuddyMembers_args (iprot : Protocol.t) =
  let _str5018 = new getAllBuddyMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5019,_id5020) = iprot#readFieldBegin in
        if _t5019 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5020 with 
          | _ -> iprot#skip _t5019);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5018

class getAllBuddyMembers_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getAllBuddyMembers_result.success") | Some _x5021 -> _x5021
  method set_success _x5021 = _success <- Some _x5021
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getAllBuddyMembers_result.e") | Some _x5022 -> _x5022
  method set_e _x5022 = _e <- Some _x5022
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllBuddyMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5025 ->         oprot#writeString(_iter5025);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllBuddyMembers_result (iprot : Protocol.t) =
  let _str5026 = new getAllBuddyMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5027,_id5028) = iprot#readFieldBegin in
        if _t5027 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5028 with 
          | 0 -> (if _t5027 = Protocol.T_LIST then
              _str5026#set_success 
                (let (_etype5032,_size5029) = iprot#readListBegin in
                  let _con5033 = (Array.to_list (Array.init _size5029 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5033)
            else
              iprot#skip _t5027)
          | 1 -> (if _t5027 = Protocol.T_STRUCT then
              _str5026#set_e (read_talkException iprot)
            else
              iprot#skip _t5027)
          | _ -> iprot#skip _t5027);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5026

class getBlockedBuddyMembers_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockedBuddyMembers_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockedBuddyMembers_args (iprot : Protocol.t) =
  let _str5036 = new getBlockedBuddyMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5037,_id5038) = iprot#readFieldBegin in
        if _t5037 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5038 with 
          | _ -> iprot#skip _t5037);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5036

class getBlockedBuddyMembers_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBlockedBuddyMembers_result.success") | Some _x5039 -> _x5039
  method set_success _x5039 = _success <- Some _x5039
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBlockedBuddyMembers_result.e") | Some _x5040 -> _x5040
  method set_e _x5040 = _e <- Some _x5040
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockedBuddyMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5043 ->         oprot#writeString(_iter5043);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockedBuddyMembers_result (iprot : Protocol.t) =
  let _str5044 = new getBlockedBuddyMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5045,_id5046) = iprot#readFieldBegin in
        if _t5045 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5046 with 
          | 0 -> (if _t5045 = Protocol.T_LIST then
              _str5044#set_success 
                (let (_etype5050,_size5047) = iprot#readListBegin in
                  let _con5051 = (Array.to_list (Array.init _size5047 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5051)
            else
              iprot#skip _t5045)
          | 1 -> (if _t5045 = Protocol.T_STRUCT then
              _str5044#set_e (read_talkException iprot)
            else
              iprot#skip _t5045)
          | _ -> iprot#skip _t5045);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5044

class getBlockerCountByBuddyMid_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "getBlockerCountByBuddyMid_args.buddyMid") | Some _x5052 -> _x5052
  method set_buddyMid _x5052 = _buddyMid <- Some _x5052
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockerCountByBuddyMid_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockerCountByBuddyMid_args (iprot : Protocol.t) =
  let _str5055 = new getBlockerCountByBuddyMid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5056,_id5057) = iprot#readFieldBegin in
        if _t5056 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5057 with 
          | 2 -> (if _t5056 = Protocol.T_STRING then
              _str5055#set_buddyMid iprot#readString
            else
              iprot#skip _t5056)
          | _ -> iprot#skip _t5056);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5055

class getBlockerCountByBuddyMid_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBlockerCountByBuddyMid_result.success") | Some _x5058 -> _x5058
  method set_success _x5058 = _success <- Some _x5058
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBlockerCountByBuddyMid_result.e") | Some _x5059 -> _x5059
  method set_e _x5059 = _e <- Some _x5059
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBlockerCountByBuddyMid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBlockerCountByBuddyMid_result (iprot : Protocol.t) =
  let _str5062 = new getBlockerCountByBuddyMid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5063,_id5064) = iprot#readFieldBegin in
        if _t5063 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5064 with 
          | 0 -> (if _t5063 = Protocol.T_I64 then
              _str5062#set_success iprot#readI64
            else
              iprot#skip _t5063)
          | 1 -> (if _t5063 = Protocol.T_STRUCT then
              _str5062#set_e (read_talkException iprot)
            else
              iprot#skip _t5063)
          | _ -> iprot#skip _t5063);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5062

class getBuddyDetailByMid_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "getBuddyDetailByMid_args.buddyMid") | Some _x5065 -> _x5065
  method set_buddyMid _x5065 = _buddyMid <- Some _x5065
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyDetailByMid_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyDetailByMid_args (iprot : Protocol.t) =
  let _str5068 = new getBuddyDetailByMid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5069,_id5070) = iprot#readFieldBegin in
        if _t5069 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5070 with 
          | 2 -> (if _t5069 = Protocol.T_STRING then
              _str5068#set_buddyMid iprot#readString
            else
              iprot#skip _t5069)
          | _ -> iprot#skip _t5069);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5068

class getBuddyDetailByMid_result =
object (self)
  val mutable _success : buddyDetail option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBuddyDetailByMid_result.success") | Some _x5071 -> _x5071
  method set_success _x5071 = _success <- Some _x5071
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBuddyDetailByMid_result.e") | Some _x5072 -> _x5072
  method set_e _x5072 = _e <- Some _x5072
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyDetailByMid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyDetailByMid_result (iprot : Protocol.t) =
  let _str5075 = new getBuddyDetailByMid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5076,_id5077) = iprot#readFieldBegin in
        if _t5076 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5077 with 
          | 0 -> (if _t5076 = Protocol.T_STRUCT then
              _str5075#set_success (read_buddyDetail iprot)
            else
              iprot#skip _t5076)
          | 1 -> (if _t5076 = Protocol.T_STRUCT then
              _str5075#set_e (read_talkException iprot)
            else
              iprot#skip _t5076)
          | _ -> iprot#skip _t5076);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5075

class getBuddyProfile_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyProfile_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyProfile_args (iprot : Protocol.t) =
  let _str5080 = new getBuddyProfile_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5081,_id5082) = iprot#readFieldBegin in
        if _t5081 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5082 with 
          | _ -> iprot#skip _t5081);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5080

class getBuddyProfile_result =
object (self)
  val mutable _success : buddyProfile option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBuddyProfile_result.success") | Some _x5083 -> _x5083
  method set_success _x5083 = _success <- Some _x5083
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBuddyProfile_result.e") | Some _x5084 -> _x5084
  method set_e _x5084 = _e <- Some _x5084
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBuddyProfile_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBuddyProfile_result (iprot : Protocol.t) =
  let _str5087 = new getBuddyProfile_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5088,_id5089) = iprot#readFieldBegin in
        if _t5088 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5089 with 
          | 0 -> (if _t5088 = Protocol.T_STRUCT then
              _str5087#set_success (read_buddyProfile iprot)
            else
              iprot#skip _t5088)
          | 1 -> (if _t5088 = Protocol.T_STRUCT then
              _str5087#set_e (read_talkException iprot)
            else
              iprot#skip _t5088)
          | _ -> iprot#skip _t5088);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5087

class getContactTicket_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContactTicket_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContactTicket_args (iprot : Protocol.t) =
  let _str5092 = new getContactTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5093,_id5094) = iprot#readFieldBegin in
        if _t5093 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5094 with 
          | _ -> iprot#skip _t5093);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5092

class getContactTicket_result =
object (self)
  val mutable _success : ticket option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getContactTicket_result.success") | Some _x5095 -> _x5095
  method set_success _x5095 = _success <- Some _x5095
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getContactTicket_result.e") | Some _x5096 -> _x5096
  method set_e _x5096 = _e <- Some _x5096
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContactTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContactTicket_result (iprot : Protocol.t) =
  let _str5099 = new getContactTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5100,_id5101) = iprot#readFieldBegin in
        if _t5100 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5101 with 
          | 0 -> (if _t5100 = Protocol.T_STRUCT then
              _str5099#set_success (read_ticket iprot)
            else
              iprot#skip _t5100)
          | 1 -> (if _t5100 = Protocol.T_STRUCT then
              _str5099#set_e (read_talkException iprot)
            else
              iprot#skip _t5100)
          | _ -> iprot#skip _t5100);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5099

class getMemberCountByBuddyMid_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "getMemberCountByBuddyMid_args.buddyMid") | Some _x5102 -> _x5102
  method set_buddyMid _x5102 = _buddyMid <- Some _x5102
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMemberCountByBuddyMid_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMemberCountByBuddyMid_args (iprot : Protocol.t) =
  let _str5105 = new getMemberCountByBuddyMid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5106,_id5107) = iprot#readFieldBegin in
        if _t5106 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5107 with 
          | 2 -> (if _t5106 = Protocol.T_STRING then
              _str5105#set_buddyMid iprot#readString
            else
              iprot#skip _t5106)
          | _ -> iprot#skip _t5106);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5105

class getMemberCountByBuddyMid_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMemberCountByBuddyMid_result.success") | Some _x5108 -> _x5108
  method set_success _x5108 = _success <- Some _x5108
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMemberCountByBuddyMid_result.e") | Some _x5109 -> _x5109
  method set_e _x5109 = _e <- Some _x5109
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMemberCountByBuddyMid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMemberCountByBuddyMid_result (iprot : Protocol.t) =
  let _str5112 = new getMemberCountByBuddyMid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5113,_id5114) = iprot#readFieldBegin in
        if _t5113 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5114 with 
          | 0 -> (if _t5113 = Protocol.T_I64 then
              _str5112#set_success iprot#readI64
            else
              iprot#skip _t5113)
          | 1 -> (if _t5113 = Protocol.T_STRUCT then
              _str5112#set_e (read_talkException iprot)
            else
              iprot#skip _t5113)
          | _ -> iprot#skip _t5113);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5112

class getSendBuddyMessageResult_args =
object (self)
  val mutable _sendBuddyMessageRequestId : string option = None
  method get_sendBuddyMessageRequestId = _sendBuddyMessageRequestId
  method grab_sendBuddyMessageRequestId = match _sendBuddyMessageRequestId with None->raise (Field_empty "getSendBuddyMessageResult_args.sendBuddyMessageRequestId") | Some _x5115 -> _x5115
  method set_sendBuddyMessageRequestId _x5115 = _sendBuddyMessageRequestId <- Some _x5115
  method unset_sendBuddyMessageRequestId = _sendBuddyMessageRequestId <- None
  method reset_sendBuddyMessageRequestId = _sendBuddyMessageRequestId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSendBuddyMessageResult_args";
    (match _sendBuddyMessageRequestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sendBuddyMessageRequestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSendBuddyMessageResult_args (iprot : Protocol.t) =
  let _str5118 = new getSendBuddyMessageResult_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5119,_id5120) = iprot#readFieldBegin in
        if _t5119 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5120 with 
          | 1 -> (if _t5119 = Protocol.T_STRING then
              _str5118#set_sendBuddyMessageRequestId iprot#readString
            else
              iprot#skip _t5119)
          | _ -> iprot#skip _t5119);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5118

class getSendBuddyMessageResult_result =
object (self)
  val mutable _success : sendBuddyMessageResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSendBuddyMessageResult_result.success") | Some _x5121 -> _x5121
  method set_success _x5121 = _success <- Some _x5121
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSendBuddyMessageResult_result.e") | Some _x5122 -> _x5122
  method set_e _x5122 = _e <- Some _x5122
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSendBuddyMessageResult_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSendBuddyMessageResult_result (iprot : Protocol.t) =
  let _str5125 = new getSendBuddyMessageResult_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5126,_id5127) = iprot#readFieldBegin in
        if _t5126 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5127 with 
          | 0 -> (if _t5126 = Protocol.T_STRUCT then
              _str5125#set_success (read_sendBuddyMessageResult iprot)
            else
              iprot#skip _t5126)
          | 1 -> (if _t5126 = Protocol.T_STRUCT then
              _str5125#set_e (read_talkException iprot)
            else
              iprot#skip _t5126)
          | _ -> iprot#skip _t5126);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5125

class getSetBuddyOnAirResult_args =
object (self)
  val mutable _setBuddyOnAirRequestId : string option = None
  method get_setBuddyOnAirRequestId = _setBuddyOnAirRequestId
  method grab_setBuddyOnAirRequestId = match _setBuddyOnAirRequestId with None->raise (Field_empty "getSetBuddyOnAirResult_args.setBuddyOnAirRequestId") | Some _x5128 -> _x5128
  method set_setBuddyOnAirRequestId _x5128 = _setBuddyOnAirRequestId <- Some _x5128
  method unset_setBuddyOnAirRequestId = _setBuddyOnAirRequestId <- None
  method reset_setBuddyOnAirRequestId = _setBuddyOnAirRequestId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSetBuddyOnAirResult_args";
    (match _setBuddyOnAirRequestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("setBuddyOnAirRequestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSetBuddyOnAirResult_args (iprot : Protocol.t) =
  let _str5131 = new getSetBuddyOnAirResult_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5132,_id5133) = iprot#readFieldBegin in
        if _t5132 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5133 with 
          | 1 -> (if _t5132 = Protocol.T_STRING then
              _str5131#set_setBuddyOnAirRequestId iprot#readString
            else
              iprot#skip _t5132)
          | _ -> iprot#skip _t5132);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5131

class getSetBuddyOnAirResult_result =
object (self)
  val mutable _success : setBuddyOnAirResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSetBuddyOnAirResult_result.success") | Some _x5134 -> _x5134
  method set_success _x5134 = _success <- Some _x5134
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSetBuddyOnAirResult_result.e") | Some _x5135 -> _x5135
  method set_e _x5135 = _e <- Some _x5135
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSetBuddyOnAirResult_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSetBuddyOnAirResult_result (iprot : Protocol.t) =
  let _str5138 = new getSetBuddyOnAirResult_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5139,_id5140) = iprot#readFieldBegin in
        if _t5139 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5140 with 
          | 0 -> (if _t5139 = Protocol.T_STRUCT then
              _str5138#set_success (read_setBuddyOnAirResult iprot)
            else
              iprot#skip _t5139)
          | 1 -> (if _t5139 = Protocol.T_STRUCT then
              _str5138#set_e (read_talkException iprot)
            else
              iprot#skip _t5139)
          | _ -> iprot#skip _t5139);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5138

class getUpdateBuddyProfileResult_args =
object (self)
  val mutable _updateBuddyProfileRequestId : string option = None
  method get_updateBuddyProfileRequestId = _updateBuddyProfileRequestId
  method grab_updateBuddyProfileRequestId = match _updateBuddyProfileRequestId with None->raise (Field_empty "getUpdateBuddyProfileResult_args.updateBuddyProfileRequestId") | Some _x5141 -> _x5141
  method set_updateBuddyProfileRequestId _x5141 = _updateBuddyProfileRequestId <- Some _x5141
  method unset_updateBuddyProfileRequestId = _updateBuddyProfileRequestId <- None
  method reset_updateBuddyProfileRequestId = _updateBuddyProfileRequestId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUpdateBuddyProfileResult_args";
    (match _updateBuddyProfileRequestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("updateBuddyProfileRequestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUpdateBuddyProfileResult_args (iprot : Protocol.t) =
  let _str5144 = new getUpdateBuddyProfileResult_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5145,_id5146) = iprot#readFieldBegin in
        if _t5145 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5146 with 
          | 1 -> (if _t5145 = Protocol.T_STRING then
              _str5144#set_updateBuddyProfileRequestId iprot#readString
            else
              iprot#skip _t5145)
          | _ -> iprot#skip _t5145);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5144

class getUpdateBuddyProfileResult_result =
object (self)
  val mutable _success : updateBuddyProfileResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUpdateBuddyProfileResult_result.success") | Some _x5147 -> _x5147
  method set_success _x5147 = _success <- Some _x5147
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUpdateBuddyProfileResult_result.e") | Some _x5148 -> _x5148
  method set_e _x5148 = _e <- Some _x5148
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUpdateBuddyProfileResult_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUpdateBuddyProfileResult_result (iprot : Protocol.t) =
  let _str5151 = new getUpdateBuddyProfileResult_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5152,_id5153) = iprot#readFieldBegin in
        if _t5152 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5153 with 
          | 0 -> (if _t5152 = Protocol.T_STRUCT then
              _str5151#set_success (read_updateBuddyProfileResult iprot)
            else
              iprot#skip _t5152)
          | 1 -> (if _t5152 = Protocol.T_STRUCT then
              _str5151#set_e (read_talkException iprot)
            else
              iprot#skip _t5152)
          | _ -> iprot#skip _t5152);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5151

class isBuddyOnAirByMid_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "isBuddyOnAirByMid_args.buddyMid") | Some _x5154 -> _x5154
  method set_buddyMid _x5154 = _buddyMid <- Some _x5154
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isBuddyOnAirByMid_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isBuddyOnAirByMid_args (iprot : Protocol.t) =
  let _str5157 = new isBuddyOnAirByMid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5158,_id5159) = iprot#readFieldBegin in
        if _t5158 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5159 with 
          | 2 -> (if _t5158 = Protocol.T_STRING then
              _str5157#set_buddyMid iprot#readString
            else
              iprot#skip _t5158)
          | _ -> iprot#skip _t5158);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5157

class isBuddyOnAirByMid_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "isBuddyOnAirByMid_result.success") | Some _x5160 -> _x5160
  method set_success _x5160 = _success <- Some _x5160
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "isBuddyOnAirByMid_result.e") | Some _x5161 -> _x5161
  method set_e _x5161 = _e <- Some _x5161
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isBuddyOnAirByMid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isBuddyOnAirByMid_result (iprot : Protocol.t) =
  let _str5164 = new isBuddyOnAirByMid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5165,_id5166) = iprot#readFieldBegin in
        if _t5165 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5166 with 
          | 0 -> (if _t5165 = Protocol.T_BOOL then
              _str5164#set_success iprot#readBool
            else
              iprot#skip _t5165)
          | 1 -> (if _t5165 = Protocol.T_STRUCT then
              _str5164#set_e (read_talkException iprot)
            else
              iprot#skip _t5165)
          | _ -> iprot#skip _t5165);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5164

class linkAndSendBuddyContentMessageToAllAsync_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "linkAndSendBuddyContentMessageToAllAsync_args.requestId") | Some _x5167 -> _x5167
  method set_requestId _x5167 = _requestId <- Some _x5167
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "linkAndSendBuddyContentMessageToAllAsync_args.msg") | Some _x5168 -> _x5168
  method set_msg _x5168 = _msg <- Some _x5168
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  val mutable _sourceContentId : string option = None
  method get_sourceContentId = _sourceContentId
  method grab_sourceContentId = match _sourceContentId with None->raise (Field_empty "linkAndSendBuddyContentMessageToAllAsync_args.sourceContentId") | Some _x5169 -> _x5169
  method set_sourceContentId _x5169 = _sourceContentId <- Some _x5169
  method unset_sourceContentId = _sourceContentId <- None
  method reset_sourceContentId = _sourceContentId <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "linkAndSendBuddyContentMessageToAllAsync_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _sourceContentId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sourceContentId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_linkAndSendBuddyContentMessageToAllAsync_args (iprot : Protocol.t) =
  let _str5172 = new linkAndSendBuddyContentMessageToAllAsync_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5173,_id5174) = iprot#readFieldBegin in
        if _t5173 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5174 with 
          | 1 -> (if _t5173 = Protocol.T_STRING then
              _str5172#set_requestId iprot#readString
            else
              iprot#skip _t5173)
          | 2 -> (if _t5173 = Protocol.T_STRUCT then
              _str5172#set_msg (read_message iprot)
            else
              iprot#skip _t5173)
          | 3 -> (if _t5173 = Protocol.T_STRING then
              _str5172#set_sourceContentId iprot#readString
            else
              iprot#skip _t5173)
          | _ -> iprot#skip _t5173);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5172

class linkAndSendBuddyContentMessageToAllAsync_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "linkAndSendBuddyContentMessageToAllAsync_result.success") | Some _x5175 -> _x5175
  method set_success _x5175 = _success <- Some _x5175
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "linkAndSendBuddyContentMessageToAllAsync_result.e") | Some _x5176 -> _x5176
  method set_e _x5176 = _e <- Some _x5176
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "linkAndSendBuddyContentMessageToAllAsync_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_linkAndSendBuddyContentMessageToAllAsync_result (iprot : Protocol.t) =
  let _str5179 = new linkAndSendBuddyContentMessageToAllAsync_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5180,_id5181) = iprot#readFieldBegin in
        if _t5180 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5181 with 
          | 0 -> (if _t5180 = Protocol.T_STRING then
              _str5179#set_success iprot#readString
            else
              iprot#skip _t5180)
          | 1 -> (if _t5180 = Protocol.T_STRUCT then
              _str5179#set_e (read_talkException iprot)
            else
              iprot#skip _t5180)
          | _ -> iprot#skip _t5180);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5179

class linkAndSendBuddyContentMessageToMids_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "linkAndSendBuddyContentMessageToMids_args.requestId") | Some _x5182 -> _x5182
  method set_requestId _x5182 = _requestId <- Some _x5182
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "linkAndSendBuddyContentMessageToMids_args.msg") | Some _x5183 -> _x5183
  method set_msg _x5183 = _msg <- Some _x5183
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  val mutable _sourceContentId : string option = None
  method get_sourceContentId = _sourceContentId
  method grab_sourceContentId = match _sourceContentId with None->raise (Field_empty "linkAndSendBuddyContentMessageToMids_args.sourceContentId") | Some _x5184 -> _x5184
  method set_sourceContentId _x5184 = _sourceContentId <- Some _x5184
  method unset_sourceContentId = _sourceContentId <- None
  method reset_sourceContentId = _sourceContentId <- None

  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "linkAndSendBuddyContentMessageToMids_args.mids") | Some _x5185 -> _x5185
  method set_mids _x5185 = _mids <- Some _x5185
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "linkAndSendBuddyContentMessageToMids_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _sourceContentId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sourceContentId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5188 ->         oprot#writeString(_iter5188);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_linkAndSendBuddyContentMessageToMids_args (iprot : Protocol.t) =
  let _str5189 = new linkAndSendBuddyContentMessageToMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5190,_id5191) = iprot#readFieldBegin in
        if _t5190 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5191 with 
          | 1 -> (if _t5190 = Protocol.T_STRING then
              _str5189#set_requestId iprot#readString
            else
              iprot#skip _t5190)
          | 2 -> (if _t5190 = Protocol.T_STRUCT then
              _str5189#set_msg (read_message iprot)
            else
              iprot#skip _t5190)
          | 3 -> (if _t5190 = Protocol.T_STRING then
              _str5189#set_sourceContentId iprot#readString
            else
              iprot#skip _t5190)
          | 4 -> (if _t5190 = Protocol.T_LIST then
              _str5189#set_mids 
                (let (_etype5195,_size5192) = iprot#readListBegin in
                  let _con5196 = (Array.to_list (Array.init _size5192 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5196)
            else
              iprot#skip _t5190)
          | _ -> iprot#skip _t5190);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5189

class linkAndSendBuddyContentMessageToMids_result =
object (self)
  val mutable _success : sendBuddyMessageResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "linkAndSendBuddyContentMessageToMids_result.success") | Some _x5197 -> _x5197
  method set_success _x5197 = _success <- Some _x5197
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "linkAndSendBuddyContentMessageToMids_result.e") | Some _x5198 -> _x5198
  method set_e _x5198 = _e <- Some _x5198
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "linkAndSendBuddyContentMessageToMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_linkAndSendBuddyContentMessageToMids_result (iprot : Protocol.t) =
  let _str5201 = new linkAndSendBuddyContentMessageToMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5202,_id5203) = iprot#readFieldBegin in
        if _t5202 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5203 with 
          | 0 -> (if _t5202 = Protocol.T_STRUCT then
              _str5201#set_success (read_sendBuddyMessageResult iprot)
            else
              iprot#skip _t5202)
          | 1 -> (if _t5202 = Protocol.T_STRUCT then
              _str5201#set_e (read_talkException iprot)
            else
              iprot#skip _t5202)
          | _ -> iprot#skip _t5202);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5201

class notifyBuddyBlocked_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "notifyBuddyBlocked_args.buddyMid") | Some _x5204 -> _x5204
  method set_buddyMid _x5204 = _buddyMid <- Some _x5204
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  val mutable _blockerMid : string option = None
  method get_blockerMid = _blockerMid
  method grab_blockerMid = match _blockerMid with None->raise (Field_empty "notifyBuddyBlocked_args.blockerMid") | Some _x5205 -> _x5205
  method set_blockerMid _x5205 = _blockerMid <- Some _x5205
  method unset_blockerMid = _blockerMid <- None
  method reset_blockerMid = _blockerMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyBuddyBlocked_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _blockerMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("blockerMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyBuddyBlocked_args (iprot : Protocol.t) =
  let _str5208 = new notifyBuddyBlocked_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5209,_id5210) = iprot#readFieldBegin in
        if _t5209 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5210 with 
          | 1 -> (if _t5209 = Protocol.T_STRING then
              _str5208#set_buddyMid iprot#readString
            else
              iprot#skip _t5209)
          | 2 -> (if _t5209 = Protocol.T_STRING then
              _str5208#set_blockerMid iprot#readString
            else
              iprot#skip _t5209)
          | _ -> iprot#skip _t5209);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5208

class notifyBuddyBlocked_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyBuddyBlocked_result.e") | Some _x5211 -> _x5211
  method set_e _x5211 = _e <- Some _x5211
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyBuddyBlocked_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyBuddyBlocked_result (iprot : Protocol.t) =
  let _str5214 = new notifyBuddyBlocked_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5215,_id5216) = iprot#readFieldBegin in
        if _t5215 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5216 with 
          | 1 -> (if _t5215 = Protocol.T_STRUCT then
              _str5214#set_e (read_talkException iprot)
            else
              iprot#skip _t5215)
          | _ -> iprot#skip _t5215);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5214

class notifyBuddyUnblocked_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "notifyBuddyUnblocked_args.buddyMid") | Some _x5217 -> _x5217
  method set_buddyMid _x5217 = _buddyMid <- Some _x5217
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  val mutable _blockerMid : string option = None
  method get_blockerMid = _blockerMid
  method grab_blockerMid = match _blockerMid with None->raise (Field_empty "notifyBuddyUnblocked_args.blockerMid") | Some _x5218 -> _x5218
  method set_blockerMid _x5218 = _blockerMid <- Some _x5218
  method unset_blockerMid = _blockerMid <- None
  method reset_blockerMid = _blockerMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyBuddyUnblocked_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _blockerMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("blockerMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyBuddyUnblocked_args (iprot : Protocol.t) =
  let _str5221 = new notifyBuddyUnblocked_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5222,_id5223) = iprot#readFieldBegin in
        if _t5222 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5223 with 
          | 1 -> (if _t5222 = Protocol.T_STRING then
              _str5221#set_buddyMid iprot#readString
            else
              iprot#skip _t5222)
          | 2 -> (if _t5222 = Protocol.T_STRING then
              _str5221#set_blockerMid iprot#readString
            else
              iprot#skip _t5222)
          | _ -> iprot#skip _t5222);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5221

class notifyBuddyUnblocked_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyBuddyUnblocked_result.e") | Some _x5224 -> _x5224
  method set_e _x5224 = _e <- Some _x5224
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyBuddyUnblocked_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyBuddyUnblocked_result (iprot : Protocol.t) =
  let _str5227 = new notifyBuddyUnblocked_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5228,_id5229) = iprot#readFieldBegin in
        if _t5228 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5229 with 
          | 1 -> (if _t5228 = Protocol.T_STRUCT then
              _str5227#set_e (read_talkException iprot)
            else
              iprot#skip _t5228)
          | _ -> iprot#skip _t5228);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5227

class registerBuddy_args =
object (self)
  val mutable _buddyId : string option = None
  method get_buddyId = _buddyId
  method grab_buddyId = match _buddyId with None->raise (Field_empty "registerBuddy_args.buddyId") | Some _x5230 -> _x5230
  method set_buddyId _x5230 = _buddyId <- Some _x5230
  method unset_buddyId = _buddyId <- None
  method reset_buddyId = _buddyId <- None

  val mutable _searchId : string option = None
  method get_searchId = _searchId
  method grab_searchId = match _searchId with None->raise (Field_empty "registerBuddy_args.searchId") | Some _x5231 -> _x5231
  method set_searchId _x5231 = _searchId <- Some _x5231
  method unset_searchId = _searchId <- None
  method reset_searchId = _searchId <- None

  val mutable _displayName : string option = None
  method get_displayName = _displayName
  method grab_displayName = match _displayName with None->raise (Field_empty "registerBuddy_args.displayName") | Some _x5232 -> _x5232
  method set_displayName _x5232 = _displayName <- Some _x5232
  method unset_displayName = _displayName <- None
  method reset_displayName = _displayName <- None

  val mutable _statusMeessage : string option = None
  method get_statusMeessage = _statusMeessage
  method grab_statusMeessage = match _statusMeessage with None->raise (Field_empty "registerBuddy_args.statusMeessage") | Some _x5233 -> _x5233
  method set_statusMeessage _x5233 = _statusMeessage <- Some _x5233
  method unset_statusMeessage = _statusMeessage <- None
  method reset_statusMeessage = _statusMeessage <- None

  val mutable _picture : string option = None
  method get_picture = _picture
  method grab_picture = match _picture with None->raise (Field_empty "registerBuddy_args.picture") | Some _x5234 -> _x5234
  method set_picture _x5234 = _picture <- Some _x5234
  method unset_picture = _picture <- None
  method reset_picture = _picture <- None

  val mutable _settings : (string,string) Hashtbl.t option = None
  method get_settings = _settings
  method grab_settings = match _settings with None->raise (Field_empty "registerBuddy_args.settings") | Some _x5235 -> _x5235
  method set_settings _x5235 = _settings <- Some _x5235
  method unset_settings = _settings <- None
  method reset_settings = _settings <- None

  method copy =
      let _new = Oo.copy self in
      if _settings <> None then
        _new#set_settings (Hashtbl.copy self#grab_settings);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerBuddy_args";
    (match _buddyId with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _searchId with None -> () | Some _v -> 
      oprot#writeFieldBegin("searchId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _displayName with None -> () | Some _v -> 
      oprot#writeFieldBegin("displayName",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _statusMeessage with None -> () | Some _v -> 
      oprot#writeFieldBegin("statusMeessage",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _picture with None -> () | Some _v -> 
      oprot#writeFieldBegin("picture",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _settings with None -> () | Some _v -> 
      oprot#writeFieldBegin("settings",Protocol.T_MAP,7);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter5238 -> fun _viter5239 -> 
        oprot#writeString(_kiter5238);
        oprot#writeString(_viter5239);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerBuddy_args (iprot : Protocol.t) =
  let _str5240 = new registerBuddy_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5241,_id5242) = iprot#readFieldBegin in
        if _t5241 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5242 with 
          | 2 -> (if _t5241 = Protocol.T_STRING then
              _str5240#set_buddyId iprot#readString
            else
              iprot#skip _t5241)
          | 3 -> (if _t5241 = Protocol.T_STRING then
              _str5240#set_searchId iprot#readString
            else
              iprot#skip _t5241)
          | 4 -> (if _t5241 = Protocol.T_STRING then
              _str5240#set_displayName iprot#readString
            else
              iprot#skip _t5241)
          | 5 -> (if _t5241 = Protocol.T_STRING then
              _str5240#set_statusMeessage iprot#readString
            else
              iprot#skip _t5241)
          | 6 -> (if _t5241 = Protocol.T_STRING then
              _str5240#set_picture iprot#readString
            else
              iprot#skip _t5241)
          | 7 -> (if _t5241 = Protocol.T_MAP then
              _str5240#set_settings 
                (let (_ktype5244,_vtype5245,_size5243) = iprot#readMapBegin in
                let _con5247 = Hashtbl.create _size5243 in
                  for i = 1 to _size5243 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con5247 _k _v
                  done; iprot#readMapEnd; _con5247)
            else
              iprot#skip _t5241)
          | _ -> iprot#skip _t5241);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5240

class registerBuddy_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerBuddy_result.success") | Some _x5248 -> _x5248
  method set_success _x5248 = _success <- Some _x5248
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerBuddy_result.e") | Some _x5249 -> _x5249
  method set_e _x5249 = _e <- Some _x5249
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerBuddy_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerBuddy_result (iprot : Protocol.t) =
  let _str5252 = new registerBuddy_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5253,_id5254) = iprot#readFieldBegin in
        if _t5253 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5254 with 
          | 0 -> (if _t5253 = Protocol.T_STRING then
              _str5252#set_success iprot#readString
            else
              iprot#skip _t5253)
          | 1 -> (if _t5253 = Protocol.T_STRUCT then
              _str5252#set_e (read_talkException iprot)
            else
              iprot#skip _t5253)
          | _ -> iprot#skip _t5253);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5252

class registerBuddyAdmin_args =
object (self)
  val mutable _buddyId : string option = None
  method get_buddyId = _buddyId
  method grab_buddyId = match _buddyId with None->raise (Field_empty "registerBuddyAdmin_args.buddyId") | Some _x5255 -> _x5255
  method set_buddyId _x5255 = _buddyId <- Some _x5255
  method unset_buddyId = _buddyId <- None
  method reset_buddyId = _buddyId <- None

  val mutable _searchId : string option = None
  method get_searchId = _searchId
  method grab_searchId = match _searchId with None->raise (Field_empty "registerBuddyAdmin_args.searchId") | Some _x5256 -> _x5256
  method set_searchId _x5256 = _searchId <- Some _x5256
  method unset_searchId = _searchId <- None
  method reset_searchId = _searchId <- None

  val mutable _displayName : string option = None
  method get_displayName = _displayName
  method grab_displayName = match _displayName with None->raise (Field_empty "registerBuddyAdmin_args.displayName") | Some _x5257 -> _x5257
  method set_displayName _x5257 = _displayName <- Some _x5257
  method unset_displayName = _displayName <- None
  method reset_displayName = _displayName <- None

  val mutable _statusMessage : string option = None
  method get_statusMessage = _statusMessage
  method grab_statusMessage = match _statusMessage with None->raise (Field_empty "registerBuddyAdmin_args.statusMessage") | Some _x5258 -> _x5258
  method set_statusMessage _x5258 = _statusMessage <- Some _x5258
  method unset_statusMessage = _statusMessage <- None
  method reset_statusMessage = _statusMessage <- None

  val mutable _picture : string option = None
  method get_picture = _picture
  method grab_picture = match _picture with None->raise (Field_empty "registerBuddyAdmin_args.picture") | Some _x5259 -> _x5259
  method set_picture _x5259 = _picture <- Some _x5259
  method unset_picture = _picture <- None
  method reset_picture = _picture <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerBuddyAdmin_args";
    (match _buddyId with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _searchId with None -> () | Some _v -> 
      oprot#writeFieldBegin("searchId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _displayName with None -> () | Some _v -> 
      oprot#writeFieldBegin("displayName",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _statusMessage with None -> () | Some _v -> 
      oprot#writeFieldBegin("statusMessage",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _picture with None -> () | Some _v -> 
      oprot#writeFieldBegin("picture",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerBuddyAdmin_args (iprot : Protocol.t) =
  let _str5262 = new registerBuddyAdmin_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5263,_id5264) = iprot#readFieldBegin in
        if _t5263 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5264 with 
          | 2 -> (if _t5263 = Protocol.T_STRING then
              _str5262#set_buddyId iprot#readString
            else
              iprot#skip _t5263)
          | 3 -> (if _t5263 = Protocol.T_STRING then
              _str5262#set_searchId iprot#readString
            else
              iprot#skip _t5263)
          | 4 -> (if _t5263 = Protocol.T_STRING then
              _str5262#set_displayName iprot#readString
            else
              iprot#skip _t5263)
          | 5 -> (if _t5263 = Protocol.T_STRING then
              _str5262#set_statusMessage iprot#readString
            else
              iprot#skip _t5263)
          | 6 -> (if _t5263 = Protocol.T_STRING then
              _str5262#set_picture iprot#readString
            else
              iprot#skip _t5263)
          | _ -> iprot#skip _t5263);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5262

class registerBuddyAdmin_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerBuddyAdmin_result.success") | Some _x5265 -> _x5265
  method set_success _x5265 = _success <- Some _x5265
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerBuddyAdmin_result.e") | Some _x5266 -> _x5266
  method set_e _x5266 = _e <- Some _x5266
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerBuddyAdmin_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerBuddyAdmin_result (iprot : Protocol.t) =
  let _str5269 = new registerBuddyAdmin_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5270,_id5271) = iprot#readFieldBegin in
        if _t5270 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5271 with 
          | 0 -> (if _t5270 = Protocol.T_STRING then
              _str5269#set_success iprot#readString
            else
              iprot#skip _t5270)
          | 1 -> (if _t5270 = Protocol.T_STRUCT then
              _str5269#set_e (read_talkException iprot)
            else
              iprot#skip _t5270)
          | _ -> iprot#skip _t5270);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5269

class reissueContactTicket_args =
object (self)
  val mutable _expirationTime : Int64.t option = None
  method get_expirationTime = _expirationTime
  method grab_expirationTime = match _expirationTime with None->raise (Field_empty "reissueContactTicket_args.expirationTime") | Some _x5272 -> _x5272
  method set_expirationTime _x5272 = _expirationTime <- Some _x5272
  method unset_expirationTime = _expirationTime <- None
  method reset_expirationTime = _expirationTime <- None

  val mutable _maxUseCount : Int32.t option = None
  method get_maxUseCount = _maxUseCount
  method grab_maxUseCount = match _maxUseCount with None->raise (Field_empty "reissueContactTicket_args.maxUseCount") | Some _x5273 -> _x5273
  method set_maxUseCount _x5273 = _maxUseCount <- Some _x5273
  method unset_maxUseCount = _maxUseCount <- None
  method reset_maxUseCount = _maxUseCount <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reissueContactTicket_args";
    (match _expirationTime with None -> () | Some _v -> 
      oprot#writeFieldBegin("expirationTime",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _maxUseCount with None -> () | Some _v -> 
      oprot#writeFieldBegin("maxUseCount",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reissueContactTicket_args (iprot : Protocol.t) =
  let _str5276 = new reissueContactTicket_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5277,_id5278) = iprot#readFieldBegin in
        if _t5277 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5278 with 
          | 3 -> (if _t5277 = Protocol.T_I64 then
              _str5276#set_expirationTime iprot#readI64
            else
              iprot#skip _t5277)
          | 4 -> (if _t5277 = Protocol.T_I32 then
              _str5276#set_maxUseCount iprot#readI32
            else
              iprot#skip _t5277)
          | _ -> iprot#skip _t5277);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5276

class reissueContactTicket_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reissueContactTicket_result.success") | Some _x5279 -> _x5279
  method set_success _x5279 = _success <- Some _x5279
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reissueContactTicket_result.e") | Some _x5280 -> _x5280
  method set_e _x5280 = _e <- Some _x5280
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reissueContactTicket_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reissueContactTicket_result (iprot : Protocol.t) =
  let _str5283 = new reissueContactTicket_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5284,_id5285) = iprot#readFieldBegin in
        if _t5284 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5285 with 
          | 0 -> (if _t5284 = Protocol.T_STRING then
              _str5283#set_success iprot#readString
            else
              iprot#skip _t5284)
          | 1 -> (if _t5284 = Protocol.T_STRUCT then
              _str5283#set_e (read_talkException iprot)
            else
              iprot#skip _t5284)
          | _ -> iprot#skip _t5284);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5283

class removeBuddyMember_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "removeBuddyMember_args.requestId") | Some _x5286 -> _x5286
  method set_requestId _x5286 = _requestId <- Some _x5286
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _userMid : string option = None
  method get_userMid = _userMid
  method grab_userMid = match _userMid with None->raise (Field_empty "removeBuddyMember_args.userMid") | Some _x5287 -> _x5287
  method set_userMid _x5287 = _userMid <- Some _x5287
  method unset_userMid = _userMid <- None
  method reset_userMid = _userMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeBuddyMember_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeBuddyMember_args (iprot : Protocol.t) =
  let _str5290 = new removeBuddyMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5291,_id5292) = iprot#readFieldBegin in
        if _t5291 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5292 with 
          | 1 -> (if _t5291 = Protocol.T_STRING then
              _str5290#set_requestId iprot#readString
            else
              iprot#skip _t5291)
          | 2 -> (if _t5291 = Protocol.T_STRING then
              _str5290#set_userMid iprot#readString
            else
              iprot#skip _t5291)
          | _ -> iprot#skip _t5291);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5290

class removeBuddyMember_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeBuddyMember_result.e") | Some _x5293 -> _x5293
  method set_e _x5293 = _e <- Some _x5293
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeBuddyMember_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeBuddyMember_result (iprot : Protocol.t) =
  let _str5296 = new removeBuddyMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5297,_id5298) = iprot#readFieldBegin in
        if _t5297 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5298 with 
          | 1 -> (if _t5297 = Protocol.T_STRUCT then
              _str5296#set_e (read_talkException iprot)
            else
              iprot#skip _t5297)
          | _ -> iprot#skip _t5297);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5296

class removeBuddyMembers_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "removeBuddyMembers_args.requestId") | Some _x5299 -> _x5299
  method set_requestId _x5299 = _requestId <- Some _x5299
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _userMids : string list option = None
  method get_userMids = _userMids
  method grab_userMids = match _userMids with None->raise (Field_empty "removeBuddyMembers_args.userMids") | Some _x5300 -> _x5300
  method set_userMids _x5300 = _userMids <- Some _x5300
  method unset_userMids = _userMids <- None
  method reset_userMids = _userMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeBuddyMembers_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("userMids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5303 ->         oprot#writeString(_iter5303);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeBuddyMembers_args (iprot : Protocol.t) =
  let _str5304 = new removeBuddyMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5305,_id5306) = iprot#readFieldBegin in
        if _t5305 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5306 with 
          | 1 -> (if _t5305 = Protocol.T_STRING then
              _str5304#set_requestId iprot#readString
            else
              iprot#skip _t5305)
          | 2 -> (if _t5305 = Protocol.T_LIST then
              _str5304#set_userMids 
                (let (_etype5310,_size5307) = iprot#readListBegin in
                  let _con5311 = (Array.to_list (Array.init _size5307 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5311)
            else
              iprot#skip _t5305)
          | _ -> iprot#skip _t5305);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5304

class removeBuddyMembers_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeBuddyMembers_result.e") | Some _x5312 -> _x5312
  method set_e _x5312 = _e <- Some _x5312
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeBuddyMembers_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeBuddyMembers_result (iprot : Protocol.t) =
  let _str5315 = new removeBuddyMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5316,_id5317) = iprot#readFieldBegin in
        if _t5316 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5317 with 
          | 1 -> (if _t5316 = Protocol.T_STRUCT then
              _str5315#set_e (read_talkException iprot)
            else
              iprot#skip _t5316)
          | _ -> iprot#skip _t5316);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5315

class sendBuddyContentMessageToAll_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "sendBuddyContentMessageToAll_args.requestId") | Some _x5318 -> _x5318
  method set_requestId _x5318 = _requestId <- Some _x5318
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "sendBuddyContentMessageToAll_args.msg") | Some _x5319 -> _x5319
  method set_msg _x5319 = _msg <- Some _x5319
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  val mutable _content : string option = None
  method get_content = _content
  method grab_content = match _content with None->raise (Field_empty "sendBuddyContentMessageToAll_args.content") | Some _x5320 -> _x5320
  method set_content _x5320 = _content <- Some _x5320
  method unset_content = _content <- None
  method reset_content = _content <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyContentMessageToAll_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _content with None -> () | Some _v -> 
      oprot#writeFieldBegin("content",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyContentMessageToAll_args (iprot : Protocol.t) =
  let _str5323 = new sendBuddyContentMessageToAll_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5324,_id5325) = iprot#readFieldBegin in
        if _t5324 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5325 with 
          | 1 -> (if _t5324 = Protocol.T_STRING then
              _str5323#set_requestId iprot#readString
            else
              iprot#skip _t5324)
          | 2 -> (if _t5324 = Protocol.T_STRUCT then
              _str5323#set_msg (read_message iprot)
            else
              iprot#skip _t5324)
          | 3 -> (if _t5324 = Protocol.T_STRING then
              _str5323#set_content iprot#readString
            else
              iprot#skip _t5324)
          | _ -> iprot#skip _t5324);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5323

class sendBuddyContentMessageToAll_result =
object (self)
  val mutable _success : sendBuddyMessageResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendBuddyContentMessageToAll_result.success") | Some _x5326 -> _x5326
  method set_success _x5326 = _success <- Some _x5326
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendBuddyContentMessageToAll_result.e") | Some _x5327 -> _x5327
  method set_e _x5327 = _e <- Some _x5327
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyContentMessageToAll_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyContentMessageToAll_result (iprot : Protocol.t) =
  let _str5330 = new sendBuddyContentMessageToAll_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5331,_id5332) = iprot#readFieldBegin in
        if _t5331 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5332 with 
          | 0 -> (if _t5331 = Protocol.T_STRUCT then
              _str5330#set_success (read_sendBuddyMessageResult iprot)
            else
              iprot#skip _t5331)
          | 1 -> (if _t5331 = Protocol.T_STRUCT then
              _str5330#set_e (read_talkException iprot)
            else
              iprot#skip _t5331)
          | _ -> iprot#skip _t5331);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5330

class sendBuddyContentMessageToAllAsync_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "sendBuddyContentMessageToAllAsync_args.requestId") | Some _x5333 -> _x5333
  method set_requestId _x5333 = _requestId <- Some _x5333
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "sendBuddyContentMessageToAllAsync_args.msg") | Some _x5334 -> _x5334
  method set_msg _x5334 = _msg <- Some _x5334
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  val mutable _content : string option = None
  method get_content = _content
  method grab_content = match _content with None->raise (Field_empty "sendBuddyContentMessageToAllAsync_args.content") | Some _x5335 -> _x5335
  method set_content _x5335 = _content <- Some _x5335
  method unset_content = _content <- None
  method reset_content = _content <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyContentMessageToAllAsync_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _content with None -> () | Some _v -> 
      oprot#writeFieldBegin("content",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyContentMessageToAllAsync_args (iprot : Protocol.t) =
  let _str5338 = new sendBuddyContentMessageToAllAsync_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5339,_id5340) = iprot#readFieldBegin in
        if _t5339 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5340 with 
          | 1 -> (if _t5339 = Protocol.T_STRING then
              _str5338#set_requestId iprot#readString
            else
              iprot#skip _t5339)
          | 2 -> (if _t5339 = Protocol.T_STRUCT then
              _str5338#set_msg (read_message iprot)
            else
              iprot#skip _t5339)
          | 3 -> (if _t5339 = Protocol.T_STRING then
              _str5338#set_content iprot#readString
            else
              iprot#skip _t5339)
          | _ -> iprot#skip _t5339);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5338

class sendBuddyContentMessageToAllAsync_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendBuddyContentMessageToAllAsync_result.success") | Some _x5341 -> _x5341
  method set_success _x5341 = _success <- Some _x5341
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendBuddyContentMessageToAllAsync_result.e") | Some _x5342 -> _x5342
  method set_e _x5342 = _e <- Some _x5342
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyContentMessageToAllAsync_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyContentMessageToAllAsync_result (iprot : Protocol.t) =
  let _str5345 = new sendBuddyContentMessageToAllAsync_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5346,_id5347) = iprot#readFieldBegin in
        if _t5346 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5347 with 
          | 0 -> (if _t5346 = Protocol.T_STRING then
              _str5345#set_success iprot#readString
            else
              iprot#skip _t5346)
          | 1 -> (if _t5346 = Protocol.T_STRUCT then
              _str5345#set_e (read_talkException iprot)
            else
              iprot#skip _t5346)
          | _ -> iprot#skip _t5346);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5345

class sendBuddyContentMessageToMids_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "sendBuddyContentMessageToMids_args.requestId") | Some _x5348 -> _x5348
  method set_requestId _x5348 = _requestId <- Some _x5348
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "sendBuddyContentMessageToMids_args.msg") | Some _x5349 -> _x5349
  method set_msg _x5349 = _msg <- Some _x5349
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  val mutable _content : string option = None
  method get_content = _content
  method grab_content = match _content with None->raise (Field_empty "sendBuddyContentMessageToMids_args.content") | Some _x5350 -> _x5350
  method set_content _x5350 = _content <- Some _x5350
  method unset_content = _content <- None
  method reset_content = _content <- None

  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "sendBuddyContentMessageToMids_args.mids") | Some _x5351 -> _x5351
  method set_mids _x5351 = _mids <- Some _x5351
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyContentMessageToMids_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _content with None -> () | Some _v -> 
      oprot#writeFieldBegin("content",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5354 ->         oprot#writeString(_iter5354);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyContentMessageToMids_args (iprot : Protocol.t) =
  let _str5355 = new sendBuddyContentMessageToMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5356,_id5357) = iprot#readFieldBegin in
        if _t5356 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5357 with 
          | 1 -> (if _t5356 = Protocol.T_STRING then
              _str5355#set_requestId iprot#readString
            else
              iprot#skip _t5356)
          | 2 -> (if _t5356 = Protocol.T_STRUCT then
              _str5355#set_msg (read_message iprot)
            else
              iprot#skip _t5356)
          | 3 -> (if _t5356 = Protocol.T_STRING then
              _str5355#set_content iprot#readString
            else
              iprot#skip _t5356)
          | 4 -> (if _t5356 = Protocol.T_LIST then
              _str5355#set_mids 
                (let (_etype5361,_size5358) = iprot#readListBegin in
                  let _con5362 = (Array.to_list (Array.init _size5358 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5362)
            else
              iprot#skip _t5356)
          | _ -> iprot#skip _t5356);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5355

class sendBuddyContentMessageToMids_result =
object (self)
  val mutable _success : sendBuddyMessageResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendBuddyContentMessageToMids_result.success") | Some _x5363 -> _x5363
  method set_success _x5363 = _success <- Some _x5363
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendBuddyContentMessageToMids_result.e") | Some _x5364 -> _x5364
  method set_e _x5364 = _e <- Some _x5364
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyContentMessageToMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyContentMessageToMids_result (iprot : Protocol.t) =
  let _str5367 = new sendBuddyContentMessageToMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5368,_id5369) = iprot#readFieldBegin in
        if _t5368 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5369 with 
          | 0 -> (if _t5368 = Protocol.T_STRUCT then
              _str5367#set_success (read_sendBuddyMessageResult iprot)
            else
              iprot#skip _t5368)
          | 1 -> (if _t5368 = Protocol.T_STRUCT then
              _str5367#set_e (read_talkException iprot)
            else
              iprot#skip _t5368)
          | _ -> iprot#skip _t5368);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5367

class sendBuddyContentMessageToMidsAsync_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "sendBuddyContentMessageToMidsAsync_args.requestId") | Some _x5370 -> _x5370
  method set_requestId _x5370 = _requestId <- Some _x5370
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "sendBuddyContentMessageToMidsAsync_args.msg") | Some _x5371 -> _x5371
  method set_msg _x5371 = _msg <- Some _x5371
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  val mutable _content : string option = None
  method get_content = _content
  method grab_content = match _content with None->raise (Field_empty "sendBuddyContentMessageToMidsAsync_args.content") | Some _x5372 -> _x5372
  method set_content _x5372 = _content <- Some _x5372
  method unset_content = _content <- None
  method reset_content = _content <- None

  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "sendBuddyContentMessageToMidsAsync_args.mids") | Some _x5373 -> _x5373
  method set_mids _x5373 = _mids <- Some _x5373
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyContentMessageToMidsAsync_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _content with None -> () | Some _v -> 
      oprot#writeFieldBegin("content",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5376 ->         oprot#writeString(_iter5376);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyContentMessageToMidsAsync_args (iprot : Protocol.t) =
  let _str5377 = new sendBuddyContentMessageToMidsAsync_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5378,_id5379) = iprot#readFieldBegin in
        if _t5378 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5379 with 
          | 1 -> (if _t5378 = Protocol.T_STRING then
              _str5377#set_requestId iprot#readString
            else
              iprot#skip _t5378)
          | 2 -> (if _t5378 = Protocol.T_STRUCT then
              _str5377#set_msg (read_message iprot)
            else
              iprot#skip _t5378)
          | 3 -> (if _t5378 = Protocol.T_STRING then
              _str5377#set_content iprot#readString
            else
              iprot#skip _t5378)
          | 4 -> (if _t5378 = Protocol.T_LIST then
              _str5377#set_mids 
                (let (_etype5383,_size5380) = iprot#readListBegin in
                  let _con5384 = (Array.to_list (Array.init _size5380 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5384)
            else
              iprot#skip _t5378)
          | _ -> iprot#skip _t5378);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5377

class sendBuddyContentMessageToMidsAsync_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendBuddyContentMessageToMidsAsync_result.success") | Some _x5385 -> _x5385
  method set_success _x5385 = _success <- Some _x5385
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendBuddyContentMessageToMidsAsync_result.e") | Some _x5386 -> _x5386
  method set_e _x5386 = _e <- Some _x5386
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyContentMessageToMidsAsync_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyContentMessageToMidsAsync_result (iprot : Protocol.t) =
  let _str5389 = new sendBuddyContentMessageToMidsAsync_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5390,_id5391) = iprot#readFieldBegin in
        if _t5390 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5391 with 
          | 0 -> (if _t5390 = Protocol.T_STRING then
              _str5389#set_success iprot#readString
            else
              iprot#skip _t5390)
          | 1 -> (if _t5390 = Protocol.T_STRUCT then
              _str5389#set_e (read_talkException iprot)
            else
              iprot#skip _t5390)
          | _ -> iprot#skip _t5390);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5389

class sendBuddyMessageToAll_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "sendBuddyMessageToAll_args.requestId") | Some _x5392 -> _x5392
  method set_requestId _x5392 = _requestId <- Some _x5392
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "sendBuddyMessageToAll_args.msg") | Some _x5393 -> _x5393
  method set_msg _x5393 = _msg <- Some _x5393
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyMessageToAll_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyMessageToAll_args (iprot : Protocol.t) =
  let _str5396 = new sendBuddyMessageToAll_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5397,_id5398) = iprot#readFieldBegin in
        if _t5397 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5398 with 
          | 1 -> (if _t5397 = Protocol.T_STRING then
              _str5396#set_requestId iprot#readString
            else
              iprot#skip _t5397)
          | 2 -> (if _t5397 = Protocol.T_STRUCT then
              _str5396#set_msg (read_message iprot)
            else
              iprot#skip _t5397)
          | _ -> iprot#skip _t5397);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5396

class sendBuddyMessageToAll_result =
object (self)
  val mutable _success : sendBuddyMessageResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendBuddyMessageToAll_result.success") | Some _x5399 -> _x5399
  method set_success _x5399 = _success <- Some _x5399
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendBuddyMessageToAll_result.e") | Some _x5400 -> _x5400
  method set_e _x5400 = _e <- Some _x5400
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyMessageToAll_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyMessageToAll_result (iprot : Protocol.t) =
  let _str5403 = new sendBuddyMessageToAll_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5404,_id5405) = iprot#readFieldBegin in
        if _t5404 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5405 with 
          | 0 -> (if _t5404 = Protocol.T_STRUCT then
              _str5403#set_success (read_sendBuddyMessageResult iprot)
            else
              iprot#skip _t5404)
          | 1 -> (if _t5404 = Protocol.T_STRUCT then
              _str5403#set_e (read_talkException iprot)
            else
              iprot#skip _t5404)
          | _ -> iprot#skip _t5404);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5403

class sendBuddyMessageToAllAsync_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "sendBuddyMessageToAllAsync_args.requestId") | Some _x5406 -> _x5406
  method set_requestId _x5406 = _requestId <- Some _x5406
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "sendBuddyMessageToAllAsync_args.msg") | Some _x5407 -> _x5407
  method set_msg _x5407 = _msg <- Some _x5407
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyMessageToAllAsync_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyMessageToAllAsync_args (iprot : Protocol.t) =
  let _str5410 = new sendBuddyMessageToAllAsync_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5411,_id5412) = iprot#readFieldBegin in
        if _t5411 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5412 with 
          | 1 -> (if _t5411 = Protocol.T_STRING then
              _str5410#set_requestId iprot#readString
            else
              iprot#skip _t5411)
          | 2 -> (if _t5411 = Protocol.T_STRUCT then
              _str5410#set_msg (read_message iprot)
            else
              iprot#skip _t5411)
          | _ -> iprot#skip _t5411);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5410

class sendBuddyMessageToAllAsync_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendBuddyMessageToAllAsync_result.success") | Some _x5413 -> _x5413
  method set_success _x5413 = _success <- Some _x5413
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendBuddyMessageToAllAsync_result.e") | Some _x5414 -> _x5414
  method set_e _x5414 = _e <- Some _x5414
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyMessageToAllAsync_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyMessageToAllAsync_result (iprot : Protocol.t) =
  let _str5417 = new sendBuddyMessageToAllAsync_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5418,_id5419) = iprot#readFieldBegin in
        if _t5418 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5419 with 
          | 0 -> (if _t5418 = Protocol.T_STRING then
              _str5417#set_success iprot#readString
            else
              iprot#skip _t5418)
          | 1 -> (if _t5418 = Protocol.T_STRUCT then
              _str5417#set_e (read_talkException iprot)
            else
              iprot#skip _t5418)
          | _ -> iprot#skip _t5418);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5417

class sendBuddyMessageToMids_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "sendBuddyMessageToMids_args.requestId") | Some _x5420 -> _x5420
  method set_requestId _x5420 = _requestId <- Some _x5420
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "sendBuddyMessageToMids_args.msg") | Some _x5421 -> _x5421
  method set_msg _x5421 = _msg <- Some _x5421
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "sendBuddyMessageToMids_args.mids") | Some _x5422 -> _x5422
  method set_mids _x5422 = _mids <- Some _x5422
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyMessageToMids_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5425 ->         oprot#writeString(_iter5425);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyMessageToMids_args (iprot : Protocol.t) =
  let _str5426 = new sendBuddyMessageToMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5427,_id5428) = iprot#readFieldBegin in
        if _t5427 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5428 with 
          | 1 -> (if _t5427 = Protocol.T_STRING then
              _str5426#set_requestId iprot#readString
            else
              iprot#skip _t5427)
          | 2 -> (if _t5427 = Protocol.T_STRUCT then
              _str5426#set_msg (read_message iprot)
            else
              iprot#skip _t5427)
          | 3 -> (if _t5427 = Protocol.T_LIST then
              _str5426#set_mids 
                (let (_etype5432,_size5429) = iprot#readListBegin in
                  let _con5433 = (Array.to_list (Array.init _size5429 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5433)
            else
              iprot#skip _t5427)
          | _ -> iprot#skip _t5427);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5426

class sendBuddyMessageToMids_result =
object (self)
  val mutable _success : sendBuddyMessageResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendBuddyMessageToMids_result.success") | Some _x5434 -> _x5434
  method set_success _x5434 = _success <- Some _x5434
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendBuddyMessageToMids_result.e") | Some _x5435 -> _x5435
  method set_e _x5435 = _e <- Some _x5435
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyMessageToMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyMessageToMids_result (iprot : Protocol.t) =
  let _str5438 = new sendBuddyMessageToMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5439,_id5440) = iprot#readFieldBegin in
        if _t5439 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5440 with 
          | 0 -> (if _t5439 = Protocol.T_STRUCT then
              _str5438#set_success (read_sendBuddyMessageResult iprot)
            else
              iprot#skip _t5439)
          | 1 -> (if _t5439 = Protocol.T_STRUCT then
              _str5438#set_e (read_talkException iprot)
            else
              iprot#skip _t5439)
          | _ -> iprot#skip _t5439);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5438

class sendBuddyMessageToMidsAsync_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "sendBuddyMessageToMidsAsync_args.requestId") | Some _x5441 -> _x5441
  method set_requestId _x5441 = _requestId <- Some _x5441
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _msg : message option = None
  method get_msg = _msg
  method grab_msg = match _msg with None->raise (Field_empty "sendBuddyMessageToMidsAsync_args.msg") | Some _x5442 -> _x5442
  method set_msg _x5442 = _msg <- Some _x5442
  method unset_msg = _msg <- None
  method reset_msg = _msg <- None

  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "sendBuddyMessageToMidsAsync_args.mids") | Some _x5443 -> _x5443
  method set_mids _x5443 = _mids <- Some _x5443
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
      if _msg <> None then
        _new#set_msg self#grab_msg#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyMessageToMidsAsync_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _msg with None -> () | Some _v -> 
      oprot#writeFieldBegin("msg",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5446 ->         oprot#writeString(_iter5446);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyMessageToMidsAsync_args (iprot : Protocol.t) =
  let _str5447 = new sendBuddyMessageToMidsAsync_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5448,_id5449) = iprot#readFieldBegin in
        if _t5448 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5449 with 
          | 1 -> (if _t5448 = Protocol.T_STRING then
              _str5447#set_requestId iprot#readString
            else
              iprot#skip _t5448)
          | 2 -> (if _t5448 = Protocol.T_STRUCT then
              _str5447#set_msg (read_message iprot)
            else
              iprot#skip _t5448)
          | 3 -> (if _t5448 = Protocol.T_LIST then
              _str5447#set_mids 
                (let (_etype5453,_size5450) = iprot#readListBegin in
                  let _con5454 = (Array.to_list (Array.init _size5450 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5454)
            else
              iprot#skip _t5448)
          | _ -> iprot#skip _t5448);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5447

class sendBuddyMessageToMidsAsync_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendBuddyMessageToMidsAsync_result.success") | Some _x5455 -> _x5455
  method set_success _x5455 = _success <- Some _x5455
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendBuddyMessageToMidsAsync_result.e") | Some _x5456 -> _x5456
  method set_e _x5456 = _e <- Some _x5456
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendBuddyMessageToMidsAsync_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendBuddyMessageToMidsAsync_result (iprot : Protocol.t) =
  let _str5459 = new sendBuddyMessageToMidsAsync_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5460,_id5461) = iprot#readFieldBegin in
        if _t5460 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5461 with 
          | 0 -> (if _t5460 = Protocol.T_STRING then
              _str5459#set_success iprot#readString
            else
              iprot#skip _t5460)
          | 1 -> (if _t5460 = Protocol.T_STRUCT then
              _str5459#set_e (read_talkException iprot)
            else
              iprot#skip _t5460)
          | _ -> iprot#skip _t5460);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5459

class sendIndividualEventToAllAsync_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "sendIndividualEventToAllAsync_args.requestId") | Some _x5462 -> _x5462
  method set_requestId _x5462 = _requestId <- Some _x5462
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "sendIndividualEventToAllAsync_args.buddyMid") | Some _x5463 -> _x5463
  method set_buddyMid _x5463 = _buddyMid <- Some _x5463
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  val mutable _notificationStatus : NotificationStatus.t option = None
  method get_notificationStatus = _notificationStatus
  method grab_notificationStatus = match _notificationStatus with None->raise (Field_empty "sendIndividualEventToAllAsync_args.notificationStatus") | Some _x5464 -> _x5464
  method set_notificationStatus _x5464 = _notificationStatus <- Some _x5464
  method unset_notificationStatus = _notificationStatus <- None
  method reset_notificationStatus = _notificationStatus <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendIndividualEventToAllAsync_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _notificationStatus with None -> () | Some _v -> 
      oprot#writeFieldBegin("notificationStatus",Protocol.T_I32,3);
      oprot#writeI32(NotificationStatus.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendIndividualEventToAllAsync_args (iprot : Protocol.t) =
  let _str5467 = new sendIndividualEventToAllAsync_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5468,_id5469) = iprot#readFieldBegin in
        if _t5468 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5469 with 
          | 1 -> (if _t5468 = Protocol.T_STRING then
              _str5467#set_requestId iprot#readString
            else
              iprot#skip _t5468)
          | 2 -> (if _t5468 = Protocol.T_STRING then
              _str5467#set_buddyMid iprot#readString
            else
              iprot#skip _t5468)
          | 3 -> (if _t5468 = Protocol.T_I32 then
              _str5467#set_notificationStatus (NotificationStatus.of_i iprot#readI32)
            else
              iprot#skip _t5468)
          | _ -> iprot#skip _t5468);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5467

class sendIndividualEventToAllAsync_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendIndividualEventToAllAsync_result.e") | Some _x5470 -> _x5470
  method set_e _x5470 = _e <- Some _x5470
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendIndividualEventToAllAsync_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendIndividualEventToAllAsync_result (iprot : Protocol.t) =
  let _str5473 = new sendIndividualEventToAllAsync_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5474,_id5475) = iprot#readFieldBegin in
        if _t5474 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5475 with 
          | 1 -> (if _t5474 = Protocol.T_STRUCT then
              _str5473#set_e (read_talkException iprot)
            else
              iprot#skip _t5474)
          | _ -> iprot#skip _t5474);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5473

class setBuddyOnAir_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "setBuddyOnAir_args.requestId") | Some _x5476 -> _x5476
  method set_requestId _x5476 = _requestId <- Some _x5476
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _onAir : bool option = None
  method get_onAir = _onAir
  method grab_onAir = match _onAir with None->raise (Field_empty "setBuddyOnAir_args.onAir") | Some _x5477 -> _x5477
  method set_onAir _x5477 = _onAir <- Some _x5477
  method unset_onAir = _onAir <- None
  method reset_onAir = _onAir <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setBuddyOnAir_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _onAir with None -> () | Some _v -> 
      oprot#writeFieldBegin("onAir",Protocol.T_BOOL,2);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setBuddyOnAir_args (iprot : Protocol.t) =
  let _str5480 = new setBuddyOnAir_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5481,_id5482) = iprot#readFieldBegin in
        if _t5481 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5482 with 
          | 1 -> (if _t5481 = Protocol.T_STRING then
              _str5480#set_requestId iprot#readString
            else
              iprot#skip _t5481)
          | 2 -> (if _t5481 = Protocol.T_BOOL then
              _str5480#set_onAir iprot#readBool
            else
              iprot#skip _t5481)
          | _ -> iprot#skip _t5481);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5480

class setBuddyOnAir_result =
object (self)
  val mutable _success : setBuddyOnAirResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "setBuddyOnAir_result.success") | Some _x5483 -> _x5483
  method set_success _x5483 = _success <- Some _x5483
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "setBuddyOnAir_result.e") | Some _x5484 -> _x5484
  method set_e _x5484 = _e <- Some _x5484
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setBuddyOnAir_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setBuddyOnAir_result (iprot : Protocol.t) =
  let _str5487 = new setBuddyOnAir_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5488,_id5489) = iprot#readFieldBegin in
        if _t5488 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5489 with 
          | 0 -> (if _t5488 = Protocol.T_STRUCT then
              _str5487#set_success (read_setBuddyOnAirResult iprot)
            else
              iprot#skip _t5488)
          | 1 -> (if _t5488 = Protocol.T_STRUCT then
              _str5487#set_e (read_talkException iprot)
            else
              iprot#skip _t5488)
          | _ -> iprot#skip _t5488);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5487

class setBuddyOnAirAsync_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "setBuddyOnAirAsync_args.requestId") | Some _x5490 -> _x5490
  method set_requestId _x5490 = _requestId <- Some _x5490
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _onAir : bool option = None
  method get_onAir = _onAir
  method grab_onAir = match _onAir with None->raise (Field_empty "setBuddyOnAirAsync_args.onAir") | Some _x5491 -> _x5491
  method set_onAir _x5491 = _onAir <- Some _x5491
  method unset_onAir = _onAir <- None
  method reset_onAir = _onAir <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setBuddyOnAirAsync_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _onAir with None -> () | Some _v -> 
      oprot#writeFieldBegin("onAir",Protocol.T_BOOL,2);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setBuddyOnAirAsync_args (iprot : Protocol.t) =
  let _str5494 = new setBuddyOnAirAsync_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5495,_id5496) = iprot#readFieldBegin in
        if _t5495 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5496 with 
          | 1 -> (if _t5495 = Protocol.T_STRING then
              _str5494#set_requestId iprot#readString
            else
              iprot#skip _t5495)
          | 2 -> (if _t5495 = Protocol.T_BOOL then
              _str5494#set_onAir iprot#readBool
            else
              iprot#skip _t5495)
          | _ -> iprot#skip _t5495);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5494

class setBuddyOnAirAsync_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "setBuddyOnAirAsync_result.success") | Some _x5497 -> _x5497
  method set_success _x5497 = _success <- Some _x5497
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "setBuddyOnAirAsync_result.e") | Some _x5498 -> _x5498
  method set_e _x5498 = _e <- Some _x5498
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "setBuddyOnAirAsync_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_setBuddyOnAirAsync_result (iprot : Protocol.t) =
  let _str5501 = new setBuddyOnAirAsync_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5502,_id5503) = iprot#readFieldBegin in
        if _t5502 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5503 with 
          | 0 -> (if _t5502 = Protocol.T_STRING then
              _str5501#set_success iprot#readString
            else
              iprot#skip _t5502)
          | 1 -> (if _t5502 = Protocol.T_STRUCT then
              _str5501#set_e (read_talkException iprot)
            else
              iprot#skip _t5502)
          | _ -> iprot#skip _t5502);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5501

class storeMessage_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "storeMessage_args.requestId") | Some _x5504 -> _x5504
  method set_requestId _x5504 = _requestId <- Some _x5504
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _messageRequest : buddyMessageRequest option = None
  method get_messageRequest = _messageRequest
  method grab_messageRequest = match _messageRequest with None->raise (Field_empty "storeMessage_args.messageRequest") | Some _x5505 -> _x5505
  method set_messageRequest _x5505 = _messageRequest <- Some _x5505
  method unset_messageRequest = _messageRequest <- None
  method reset_messageRequest = _messageRequest <- None

  method copy =
      let _new = Oo.copy self in
      if _messageRequest <> None then
        _new#set_messageRequest self#grab_messageRequest#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "storeMessage_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _messageRequest with None -> () | Some _v -> 
      oprot#writeFieldBegin("messageRequest",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_storeMessage_args (iprot : Protocol.t) =
  let _str5508 = new storeMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5509,_id5510) = iprot#readFieldBegin in
        if _t5509 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5510 with 
          | 1 -> (if _t5509 = Protocol.T_STRING then
              _str5508#set_requestId iprot#readString
            else
              iprot#skip _t5509)
          | 2 -> (if _t5509 = Protocol.T_STRUCT then
              _str5508#set_messageRequest (read_buddyMessageRequest iprot)
            else
              iprot#skip _t5509)
          | _ -> iprot#skip _t5509);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5508

class storeMessage_result =
object (self)
  val mutable _success : sendBuddyMessageResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "storeMessage_result.success") | Some _x5511 -> _x5511
  method set_success _x5511 = _success <- Some _x5511
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "storeMessage_result.e") | Some _x5512 -> _x5512
  method set_e _x5512 = _e <- Some _x5512
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "storeMessage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_storeMessage_result (iprot : Protocol.t) =
  let _str5515 = new storeMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5516,_id5517) = iprot#readFieldBegin in
        if _t5516 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5517 with 
          | 0 -> (if _t5516 = Protocol.T_STRUCT then
              _str5515#set_success (read_sendBuddyMessageResult iprot)
            else
              iprot#skip _t5516)
          | 1 -> (if _t5516 = Protocol.T_STRUCT then
              _str5515#set_e (read_talkException iprot)
            else
              iprot#skip _t5516)
          | _ -> iprot#skip _t5516);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5515

class unblockBuddyMember_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "unblockBuddyMember_args.requestId") | Some _x5518 -> _x5518
  method set_requestId _x5518 = _requestId <- Some _x5518
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "unblockBuddyMember_args.mid") | Some _x5519 -> _x5519
  method set_mid _x5519 = _mid <- Some _x5519
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unblockBuddyMember_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unblockBuddyMember_args (iprot : Protocol.t) =
  let _str5522 = new unblockBuddyMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5523,_id5524) = iprot#readFieldBegin in
        if _t5523 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5524 with 
          | 1 -> (if _t5523 = Protocol.T_STRING then
              _str5522#set_requestId iprot#readString
            else
              iprot#skip _t5523)
          | 2 -> (if _t5523 = Protocol.T_STRING then
              _str5522#set_mid iprot#readString
            else
              iprot#skip _t5523)
          | _ -> iprot#skip _t5523);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5522

class unblockBuddyMember_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "unblockBuddyMember_result.e") | Some _x5525 -> _x5525
  method set_e _x5525 = _e <- Some _x5525
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unblockBuddyMember_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unblockBuddyMember_result (iprot : Protocol.t) =
  let _str5528 = new unblockBuddyMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5529,_id5530) = iprot#readFieldBegin in
        if _t5529 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5530 with 
          | 1 -> (if _t5529 = Protocol.T_STRUCT then
              _str5528#set_e (read_talkException iprot)
            else
              iprot#skip _t5529)
          | _ -> iprot#skip _t5529);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5528

class unregisterBuddy_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "unregisterBuddy_args.requestId") | Some _x5531 -> _x5531
  method set_requestId _x5531 = _requestId <- Some _x5531
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unregisterBuddy_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unregisterBuddy_args (iprot : Protocol.t) =
  let _str5534 = new unregisterBuddy_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5535,_id5536) = iprot#readFieldBegin in
        if _t5535 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5536 with 
          | 1 -> (if _t5535 = Protocol.T_STRING then
              _str5534#set_requestId iprot#readString
            else
              iprot#skip _t5535)
          | _ -> iprot#skip _t5535);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5534

class unregisterBuddy_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "unregisterBuddy_result.e") | Some _x5537 -> _x5537
  method set_e _x5537 = _e <- Some _x5537
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unregisterBuddy_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unregisterBuddy_result (iprot : Protocol.t) =
  let _str5540 = new unregisterBuddy_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5541,_id5542) = iprot#readFieldBegin in
        if _t5541 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5542 with 
          | 1 -> (if _t5541 = Protocol.T_STRUCT then
              _str5540#set_e (read_talkException iprot)
            else
              iprot#skip _t5541)
          | _ -> iprot#skip _t5541);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5540

class unregisterBuddyAdmin_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "unregisterBuddyAdmin_args.requestId") | Some _x5543 -> _x5543
  method set_requestId _x5543 = _requestId <- Some _x5543
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unregisterBuddyAdmin_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unregisterBuddyAdmin_args (iprot : Protocol.t) =
  let _str5546 = new unregisterBuddyAdmin_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5547,_id5548) = iprot#readFieldBegin in
        if _t5547 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5548 with 
          | 1 -> (if _t5547 = Protocol.T_STRING then
              _str5546#set_requestId iprot#readString
            else
              iprot#skip _t5547)
          | _ -> iprot#skip _t5547);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5546

class unregisterBuddyAdmin_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "unregisterBuddyAdmin_result.e") | Some _x5549 -> _x5549
  method set_e _x5549 = _e <- Some _x5549
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unregisterBuddyAdmin_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unregisterBuddyAdmin_result (iprot : Protocol.t) =
  let _str5552 = new unregisterBuddyAdmin_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5553,_id5554) = iprot#readFieldBegin in
        if _t5553 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5554 with 
          | 1 -> (if _t5553 = Protocol.T_STRUCT then
              _str5552#set_e (read_talkException iprot)
            else
              iprot#skip _t5553)
          | _ -> iprot#skip _t5553);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5552

class updateBuddyAdminProfileAttribute_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "updateBuddyAdminProfileAttribute_args.requestId") | Some _x5555 -> _x5555
  method set_requestId _x5555 = _requestId <- Some _x5555
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _attributes : (string,string) Hashtbl.t option = None
  method get_attributes = _attributes
  method grab_attributes = match _attributes with None->raise (Field_empty "updateBuddyAdminProfileAttribute_args.attributes") | Some _x5556 -> _x5556
  method set_attributes _x5556 = _attributes <- Some _x5556
  method unset_attributes = _attributes <- None
  method reset_attributes = _attributes <- None

  method copy =
      let _new = Oo.copy self in
      if _attributes <> None then
        _new#set_attributes (Hashtbl.copy self#grab_attributes);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyAdminProfileAttribute_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _attributes with None -> () | Some _v -> 
      oprot#writeFieldBegin("attributes",Protocol.T_MAP,2);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter5559 -> fun _viter5560 -> 
        oprot#writeString(_kiter5559);
        oprot#writeString(_viter5560);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyAdminProfileAttribute_args (iprot : Protocol.t) =
  let _str5561 = new updateBuddyAdminProfileAttribute_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5562,_id5563) = iprot#readFieldBegin in
        if _t5562 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5563 with 
          | 1 -> (if _t5562 = Protocol.T_STRING then
              _str5561#set_requestId iprot#readString
            else
              iprot#skip _t5562)
          | 2 -> (if _t5562 = Protocol.T_MAP then
              _str5561#set_attributes 
                (let (_ktype5565,_vtype5566,_size5564) = iprot#readMapBegin in
                let _con5568 = Hashtbl.create _size5564 in
                  for i = 1 to _size5564 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con5568 _k _v
                  done; iprot#readMapEnd; _con5568)
            else
              iprot#skip _t5562)
          | _ -> iprot#skip _t5562);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5561

class updateBuddyAdminProfileAttribute_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateBuddyAdminProfileAttribute_result.e") | Some _x5569 -> _x5569
  method set_e _x5569 = _e <- Some _x5569
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyAdminProfileAttribute_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyAdminProfileAttribute_result (iprot : Protocol.t) =
  let _str5572 = new updateBuddyAdminProfileAttribute_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5573,_id5574) = iprot#readFieldBegin in
        if _t5573 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5574 with 
          | 1 -> (if _t5573 = Protocol.T_STRUCT then
              _str5572#set_e (read_talkException iprot)
            else
              iprot#skip _t5573)
          | _ -> iprot#skip _t5573);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5572

class updateBuddyAdminProfileImage_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "updateBuddyAdminProfileImage_args.requestId") | Some _x5575 -> _x5575
  method set_requestId _x5575 = _requestId <- Some _x5575
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _picture : string option = None
  method get_picture = _picture
  method grab_picture = match _picture with None->raise (Field_empty "updateBuddyAdminProfileImage_args.picture") | Some _x5576 -> _x5576
  method set_picture _x5576 = _picture <- Some _x5576
  method unset_picture = _picture <- None
  method reset_picture = _picture <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyAdminProfileImage_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _picture with None -> () | Some _v -> 
      oprot#writeFieldBegin("picture",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyAdminProfileImage_args (iprot : Protocol.t) =
  let _str5579 = new updateBuddyAdminProfileImage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5580,_id5581) = iprot#readFieldBegin in
        if _t5580 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5581 with 
          | 1 -> (if _t5580 = Protocol.T_STRING then
              _str5579#set_requestId iprot#readString
            else
              iprot#skip _t5580)
          | 2 -> (if _t5580 = Protocol.T_STRING then
              _str5579#set_picture iprot#readString
            else
              iprot#skip _t5580)
          | _ -> iprot#skip _t5580);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5579

class updateBuddyAdminProfileImage_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateBuddyAdminProfileImage_result.e") | Some _x5582 -> _x5582
  method set_e _x5582 = _e <- Some _x5582
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyAdminProfileImage_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyAdminProfileImage_result (iprot : Protocol.t) =
  let _str5585 = new updateBuddyAdminProfileImage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5586,_id5587) = iprot#readFieldBegin in
        if _t5586 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5587 with 
          | 1 -> (if _t5586 = Protocol.T_STRUCT then
              _str5585#set_e (read_talkException iprot)
            else
              iprot#skip _t5586)
          | _ -> iprot#skip _t5586);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5585

class updateBuddyProfileAttributes_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "updateBuddyProfileAttributes_args.requestId") | Some _x5588 -> _x5588
  method set_requestId _x5588 = _requestId <- Some _x5588
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _attributes : (string,string) Hashtbl.t option = None
  method get_attributes = _attributes
  method grab_attributes = match _attributes with None->raise (Field_empty "updateBuddyProfileAttributes_args.attributes") | Some _x5589 -> _x5589
  method set_attributes _x5589 = _attributes <- Some _x5589
  method unset_attributes = _attributes <- None
  method reset_attributes = _attributes <- None

  method copy =
      let _new = Oo.copy self in
      if _attributes <> None then
        _new#set_attributes (Hashtbl.copy self#grab_attributes);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyProfileAttributes_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _attributes with None -> () | Some _v -> 
      oprot#writeFieldBegin("attributes",Protocol.T_MAP,2);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter5592 -> fun _viter5593 -> 
        oprot#writeString(_kiter5592);
        oprot#writeString(_viter5593);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyProfileAttributes_args (iprot : Protocol.t) =
  let _str5594 = new updateBuddyProfileAttributes_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5595,_id5596) = iprot#readFieldBegin in
        if _t5595 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5596 with 
          | 1 -> (if _t5595 = Protocol.T_STRING then
              _str5594#set_requestId iprot#readString
            else
              iprot#skip _t5595)
          | 2 -> (if _t5595 = Protocol.T_MAP then
              _str5594#set_attributes 
                (let (_ktype5598,_vtype5599,_size5597) = iprot#readMapBegin in
                let _con5601 = Hashtbl.create _size5597 in
                  for i = 1 to _size5597 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con5601 _k _v
                  done; iprot#readMapEnd; _con5601)
            else
              iprot#skip _t5595)
          | _ -> iprot#skip _t5595);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5594

class updateBuddyProfileAttributes_result =
object (self)
  val mutable _success : updateBuddyProfileResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateBuddyProfileAttributes_result.success") | Some _x5602 -> _x5602
  method set_success _x5602 = _success <- Some _x5602
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateBuddyProfileAttributes_result.e") | Some _x5603 -> _x5603
  method set_e _x5603 = _e <- Some _x5603
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyProfileAttributes_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyProfileAttributes_result (iprot : Protocol.t) =
  let _str5606 = new updateBuddyProfileAttributes_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5607,_id5608) = iprot#readFieldBegin in
        if _t5607 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5608 with 
          | 0 -> (if _t5607 = Protocol.T_STRUCT then
              _str5606#set_success (read_updateBuddyProfileResult iprot)
            else
              iprot#skip _t5607)
          | 1 -> (if _t5607 = Protocol.T_STRUCT then
              _str5606#set_e (read_talkException iprot)
            else
              iprot#skip _t5607)
          | _ -> iprot#skip _t5607);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5606

class updateBuddyProfileAttributesAsync_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "updateBuddyProfileAttributesAsync_args.requestId") | Some _x5609 -> _x5609
  method set_requestId _x5609 = _requestId <- Some _x5609
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _attributes : (string,string) Hashtbl.t option = None
  method get_attributes = _attributes
  method grab_attributes = match _attributes with None->raise (Field_empty "updateBuddyProfileAttributesAsync_args.attributes") | Some _x5610 -> _x5610
  method set_attributes _x5610 = _attributes <- Some _x5610
  method unset_attributes = _attributes <- None
  method reset_attributes = _attributes <- None

  method copy =
      let _new = Oo.copy self in
      if _attributes <> None then
        _new#set_attributes (Hashtbl.copy self#grab_attributes);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyProfileAttributesAsync_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _attributes with None -> () | Some _v -> 
      oprot#writeFieldBegin("attributes",Protocol.T_MAP,2);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter5613 -> fun _viter5614 -> 
        oprot#writeString(_kiter5613);
        oprot#writeString(_viter5614);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyProfileAttributesAsync_args (iprot : Protocol.t) =
  let _str5615 = new updateBuddyProfileAttributesAsync_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5616,_id5617) = iprot#readFieldBegin in
        if _t5616 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5617 with 
          | 1 -> (if _t5616 = Protocol.T_STRING then
              _str5615#set_requestId iprot#readString
            else
              iprot#skip _t5616)
          | 2 -> (if _t5616 = Protocol.T_MAP then
              _str5615#set_attributes 
                (let (_ktype5619,_vtype5620,_size5618) = iprot#readMapBegin in
                let _con5622 = Hashtbl.create _size5618 in
                  for i = 1 to _size5618 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con5622 _k _v
                  done; iprot#readMapEnd; _con5622)
            else
              iprot#skip _t5616)
          | _ -> iprot#skip _t5616);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5615

class updateBuddyProfileAttributesAsync_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateBuddyProfileAttributesAsync_result.success") | Some _x5623 -> _x5623
  method set_success _x5623 = _success <- Some _x5623
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateBuddyProfileAttributesAsync_result.e") | Some _x5624 -> _x5624
  method set_e _x5624 = _e <- Some _x5624
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyProfileAttributesAsync_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyProfileAttributesAsync_result (iprot : Protocol.t) =
  let _str5627 = new updateBuddyProfileAttributesAsync_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5628,_id5629) = iprot#readFieldBegin in
        if _t5628 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5629 with 
          | 0 -> (if _t5628 = Protocol.T_STRING then
              _str5627#set_success iprot#readString
            else
              iprot#skip _t5628)
          | 1 -> (if _t5628 = Protocol.T_STRUCT then
              _str5627#set_e (read_talkException iprot)
            else
              iprot#skip _t5628)
          | _ -> iprot#skip _t5628);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5627

class updateBuddyProfileImage_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "updateBuddyProfileImage_args.requestId") | Some _x5630 -> _x5630
  method set_requestId _x5630 = _requestId <- Some _x5630
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _image : string option = None
  method get_image = _image
  method grab_image = match _image with None->raise (Field_empty "updateBuddyProfileImage_args.image") | Some _x5631 -> _x5631
  method set_image _x5631 = _image <- Some _x5631
  method unset_image = _image <- None
  method reset_image = _image <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyProfileImage_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _image with None -> () | Some _v -> 
      oprot#writeFieldBegin("image",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyProfileImage_args (iprot : Protocol.t) =
  let _str5634 = new updateBuddyProfileImage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5635,_id5636) = iprot#readFieldBegin in
        if _t5635 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5636 with 
          | 1 -> (if _t5635 = Protocol.T_STRING then
              _str5634#set_requestId iprot#readString
            else
              iprot#skip _t5635)
          | 2 -> (if _t5635 = Protocol.T_STRING then
              _str5634#set_image iprot#readString
            else
              iprot#skip _t5635)
          | _ -> iprot#skip _t5635);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5634

class updateBuddyProfileImage_result =
object (self)
  val mutable _success : updateBuddyProfileResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateBuddyProfileImage_result.success") | Some _x5637 -> _x5637
  method set_success _x5637 = _success <- Some _x5637
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateBuddyProfileImage_result.e") | Some _x5638 -> _x5638
  method set_e _x5638 = _e <- Some _x5638
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyProfileImage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyProfileImage_result (iprot : Protocol.t) =
  let _str5641 = new updateBuddyProfileImage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5642,_id5643) = iprot#readFieldBegin in
        if _t5642 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5643 with 
          | 0 -> (if _t5642 = Protocol.T_STRUCT then
              _str5641#set_success (read_updateBuddyProfileResult iprot)
            else
              iprot#skip _t5642)
          | 1 -> (if _t5642 = Protocol.T_STRUCT then
              _str5641#set_e (read_talkException iprot)
            else
              iprot#skip _t5642)
          | _ -> iprot#skip _t5642);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5641

class updateBuddyProfileImageAsync_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "updateBuddyProfileImageAsync_args.requestId") | Some _x5644 -> _x5644
  method set_requestId _x5644 = _requestId <- Some _x5644
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _image : string option = None
  method get_image = _image
  method grab_image = match _image with None->raise (Field_empty "updateBuddyProfileImageAsync_args.image") | Some _x5645 -> _x5645
  method set_image _x5645 = _image <- Some _x5645
  method unset_image = _image <- None
  method reset_image = _image <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyProfileImageAsync_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _image with None -> () | Some _v -> 
      oprot#writeFieldBegin("image",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyProfileImageAsync_args (iprot : Protocol.t) =
  let _str5648 = new updateBuddyProfileImageAsync_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5649,_id5650) = iprot#readFieldBegin in
        if _t5649 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5650 with 
          | 1 -> (if _t5649 = Protocol.T_STRING then
              _str5648#set_requestId iprot#readString
            else
              iprot#skip _t5649)
          | 2 -> (if _t5649 = Protocol.T_STRING then
              _str5648#set_image iprot#readString
            else
              iprot#skip _t5649)
          | _ -> iprot#skip _t5649);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5648

class updateBuddyProfileImageAsync_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "updateBuddyProfileImageAsync_result.success") | Some _x5651 -> _x5651
  method set_success _x5651 = _success <- Some _x5651
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateBuddyProfileImageAsync_result.e") | Some _x5652 -> _x5652
  method set_e _x5652 = _e <- Some _x5652
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddyProfileImageAsync_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddyProfileImageAsync_result (iprot : Protocol.t) =
  let _str5655 = new updateBuddyProfileImageAsync_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5656,_id5657) = iprot#readFieldBegin in
        if _t5656 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5657 with 
          | 0 -> (if _t5656 = Protocol.T_STRING then
              _str5655#set_success iprot#readString
            else
              iprot#skip _t5656)
          | 1 -> (if _t5656 = Protocol.T_STRUCT then
              _str5655#set_e (read_talkException iprot)
            else
              iprot#skip _t5656)
          | _ -> iprot#skip _t5656);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5655

class updateBuddySearchId_args =
object (self)
  val mutable _requestId : string option = None
  method get_requestId = _requestId
  method grab_requestId = match _requestId with None->raise (Field_empty "updateBuddySearchId_args.requestId") | Some _x5658 -> _x5658
  method set_requestId _x5658 = _requestId <- Some _x5658
  method unset_requestId = _requestId <- None
  method reset_requestId = _requestId <- None

  val mutable _searchId : string option = None
  method get_searchId = _searchId
  method grab_searchId = match _searchId with None->raise (Field_empty "updateBuddySearchId_args.searchId") | Some _x5659 -> _x5659
  method set_searchId _x5659 = _searchId <- Some _x5659
  method unset_searchId = _searchId <- None
  method reset_searchId = _searchId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddySearchId_args";
    (match _requestId with None -> () | Some _v -> 
      oprot#writeFieldBegin("requestId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _searchId with None -> () | Some _v -> 
      oprot#writeFieldBegin("searchId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddySearchId_args (iprot : Protocol.t) =
  let _str5662 = new updateBuddySearchId_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5663,_id5664) = iprot#readFieldBegin in
        if _t5663 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5664 with 
          | 1 -> (if _t5663 = Protocol.T_STRING then
              _str5662#set_requestId iprot#readString
            else
              iprot#skip _t5663)
          | 2 -> (if _t5663 = Protocol.T_STRING then
              _str5662#set_searchId iprot#readString
            else
              iprot#skip _t5663)
          | _ -> iprot#skip _t5663);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5662

class updateBuddySearchId_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateBuddySearchId_result.e") | Some _x5665 -> _x5665
  method set_e _x5665 = _e <- Some _x5665
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddySearchId_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddySearchId_result (iprot : Protocol.t) =
  let _str5668 = new updateBuddySearchId_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5669,_id5670) = iprot#readFieldBegin in
        if _t5669 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5670 with 
          | 1 -> (if _t5669 = Protocol.T_STRUCT then
              _str5668#set_e (read_talkException iprot)
            else
              iprot#skip _t5669)
          | _ -> iprot#skip _t5669);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5668

class updateBuddySettings_args =
object (self)
  val mutable _settings : (string,string) Hashtbl.t option = None
  method get_settings = _settings
  method grab_settings = match _settings with None->raise (Field_empty "updateBuddySettings_args.settings") | Some _x5671 -> _x5671
  method set_settings _x5671 = _settings <- Some _x5671
  method unset_settings = _settings <- None
  method reset_settings = _settings <- None

  method copy =
      let _new = Oo.copy self in
      if _settings <> None then
        _new#set_settings (Hashtbl.copy self#grab_settings);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddySettings_args";
    (match _settings with None -> () | Some _v -> 
      oprot#writeFieldBegin("settings",Protocol.T_MAP,2);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter5674 -> fun _viter5675 -> 
        oprot#writeString(_kiter5674);
        oprot#writeString(_viter5675);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddySettings_args (iprot : Protocol.t) =
  let _str5676 = new updateBuddySettings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5677,_id5678) = iprot#readFieldBegin in
        if _t5677 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5678 with 
          | 2 -> (if _t5677 = Protocol.T_MAP then
              _str5676#set_settings 
                (let (_ktype5680,_vtype5681,_size5679) = iprot#readMapBegin in
                let _con5683 = Hashtbl.create _size5679 in
                  for i = 1 to _size5679 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con5683 _k _v
                  done; iprot#readMapEnd; _con5683)
            else
              iprot#skip _t5677)
          | _ -> iprot#skip _t5677);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5676

class updateBuddySettings_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateBuddySettings_result.e") | Some _x5684 -> _x5684
  method set_e _x5684 = _e <- Some _x5684
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateBuddySettings_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateBuddySettings_result (iprot : Protocol.t) =
  let _str5687 = new updateBuddySettings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5688,_id5689) = iprot#readFieldBegin in
        if _t5688 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5689 with 
          | 1 -> (if _t5688 = Protocol.T_STRUCT then
              _str5687#set_e (read_talkException iprot)
            else
              iprot#skip _t5688)
          | _ -> iprot#skip _t5688);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5687

class uploadBuddyContent_args =
object (self)
  val mutable _contentType : ContentType.t option = None
  method get_contentType = _contentType
  method grab_contentType = match _contentType with None->raise (Field_empty "uploadBuddyContent_args.contentType") | Some _x5690 -> _x5690
  method set_contentType _x5690 = _contentType <- Some _x5690
  method unset_contentType = _contentType <- None
  method reset_contentType = _contentType <- None

  val mutable _content : string option = None
  method get_content = _content
  method grab_content = match _content with None->raise (Field_empty "uploadBuddyContent_args.content") | Some _x5691 -> _x5691
  method set_content _x5691 = _content <- Some _x5691
  method unset_content = _content <- None
  method reset_content = _content <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "uploadBuddyContent_args";
    (match _contentType with None -> () | Some _v -> 
      oprot#writeFieldBegin("contentType",Protocol.T_I32,2);
      oprot#writeI32(ContentType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _content with None -> () | Some _v -> 
      oprot#writeFieldBegin("content",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_uploadBuddyContent_args (iprot : Protocol.t) =
  let _str5694 = new uploadBuddyContent_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5695,_id5696) = iprot#readFieldBegin in
        if _t5695 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5696 with 
          | 2 -> (if _t5695 = Protocol.T_I32 then
              _str5694#set_contentType (ContentType.of_i iprot#readI32)
            else
              iprot#skip _t5695)
          | 3 -> (if _t5695 = Protocol.T_STRING then
              _str5694#set_content iprot#readString
            else
              iprot#skip _t5695)
          | _ -> iprot#skip _t5695);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5694

class uploadBuddyContent_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "uploadBuddyContent_result.success") | Some _x5697 -> _x5697
  method set_success _x5697 = _success <- Some _x5697
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "uploadBuddyContent_result.e") | Some _x5698 -> _x5698
  method set_e _x5698 = _e <- Some _x5698
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "uploadBuddyContent_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_uploadBuddyContent_result (iprot : Protocol.t) =
  let _str5701 = new uploadBuddyContent_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5702,_id5703) = iprot#readFieldBegin in
        if _t5702 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5703 with 
          | 0 -> (if _t5702 = Protocol.T_STRING then
              _str5701#set_success iprot#readString
            else
              iprot#skip _t5702)
          | 1 -> (if _t5702 = Protocol.T_STRUCT then
              _str5701#set_e (read_talkException iprot)
            else
              iprot#skip _t5702)
          | _ -> iprot#skip _t5702);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5701

class virtual iface =
object (self)
  method virtual addBuddyMember : string option -> string option -> unit
  method virtual addBuddyMembers : string option -> string list option -> unit
  method virtual blockBuddyMember : string option -> string option -> unit
  method virtual commitSendMessagesToAll : string list option -> sendBuddyMessageResult list
  method virtual commitSendMessagesToMids : string list option -> string list option -> sendBuddyMessageResult list
  method virtual containsBuddyMember : string option -> string option -> bool
  method virtual downloadMessageContent : string option -> string option -> string
  method virtual downloadMessageContentPreview : string option -> string option -> string
  method virtual downloadProfileImage : string option -> string
  method virtual downloadProfileImagePreview : string option -> string
  method virtual getActiveMemberCountByBuddyMid : string option -> Int64.t
  method virtual getActiveMemberMidsByBuddyMid : string option -> string list
  method virtual getAllBuddyMembers : string list
  method virtual getBlockedBuddyMembers : string list
  method virtual getBlockerCountByBuddyMid : string option -> Int64.t
  method virtual getBuddyDetailByMid : string option -> buddyDetail
  method virtual getBuddyProfile : buddyProfile
  method virtual getContactTicket : ticket
  method virtual getMemberCountByBuddyMid : string option -> Int64.t
  method virtual getSendBuddyMessageResult : string option -> sendBuddyMessageResult
  method virtual getSetBuddyOnAirResult : string option -> setBuddyOnAirResult
  method virtual getUpdateBuddyProfileResult : string option -> updateBuddyProfileResult
  method virtual isBuddyOnAirByMid : string option -> bool
  method virtual linkAndSendBuddyContentMessageToAllAsync : string option -> message option -> string option -> string
  method virtual linkAndSendBuddyContentMessageToMids : string option -> message option -> string option -> string list option -> sendBuddyMessageResult
  method virtual notifyBuddyBlocked : string option -> string option -> unit
  method virtual notifyBuddyUnblocked : string option -> string option -> unit
  method virtual registerBuddy : string option -> string option -> string option -> string option -> string option -> (string,string) Hashtbl.t option -> string
  method virtual registerBuddyAdmin : string option -> string option -> string option -> string option -> string option -> string
  method virtual reissueContactTicket : Int64.t option -> Int32.t option -> string
  method virtual removeBuddyMember : string option -> string option -> unit
  method virtual removeBuddyMembers : string option -> string list option -> unit
  method virtual sendBuddyContentMessageToAll : string option -> message option -> string option -> sendBuddyMessageResult
  method virtual sendBuddyContentMessageToAllAsync : string option -> message option -> string option -> string
  method virtual sendBuddyContentMessageToMids : string option -> message option -> string option -> string list option -> sendBuddyMessageResult
  method virtual sendBuddyContentMessageToMidsAsync : string option -> message option -> string option -> string list option -> string
  method virtual sendBuddyMessageToAll : string option -> message option -> sendBuddyMessageResult
  method virtual sendBuddyMessageToAllAsync : string option -> message option -> string
  method virtual sendBuddyMessageToMids : string option -> message option -> string list option -> sendBuddyMessageResult
  method virtual sendBuddyMessageToMidsAsync : string option -> message option -> string list option -> string
  method virtual sendIndividualEventToAllAsync : string option -> string option -> NotificationStatus.t option -> unit
  method virtual setBuddyOnAir : string option -> bool option -> setBuddyOnAirResult
  method virtual setBuddyOnAirAsync : string option -> bool option -> string
  method virtual storeMessage : string option -> buddyMessageRequest option -> sendBuddyMessageResult
  method virtual unblockBuddyMember : string option -> string option -> unit
  method virtual unregisterBuddy : string option -> unit
  method virtual unregisterBuddyAdmin : string option -> unit
  method virtual updateBuddyAdminProfileAttribute : string option -> (string,string) Hashtbl.t option -> unit
  method virtual updateBuddyAdminProfileImage : string option -> string option -> unit
  method virtual updateBuddyProfileAttributes : string option -> (string,string) Hashtbl.t option -> updateBuddyProfileResult
  method virtual updateBuddyProfileAttributesAsync : string option -> (string,string) Hashtbl.t option -> string
  method virtual updateBuddyProfileImage : string option -> string option -> updateBuddyProfileResult
  method virtual updateBuddyProfileImageAsync : string option -> string option -> string
  method virtual updateBuddySearchId : string option -> string option -> unit
  method virtual updateBuddySettings : (string,string) Hashtbl.t option -> unit
  method virtual uploadBuddyContent : ContentType.t option -> string option -> string
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method addBuddyMember requestId userMid = 
    self#send_addBuddyMember requestId userMid;
    self#recv_addBuddyMember
  method private send_addBuddyMember requestId userMid = 
    oprot#writeMessageBegin ("addBuddyMember", Protocol.CALL, seqid);
    let args = new addBuddyMember_args in
      args#set_requestId requestId;
      args#set_userMid userMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_addBuddyMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_addBuddyMember_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method addBuddyMembers requestId userMids = 
    self#send_addBuddyMembers requestId userMids;
    self#recv_addBuddyMembers
  method private send_addBuddyMembers requestId userMids = 
    oprot#writeMessageBegin ("addBuddyMembers", Protocol.CALL, seqid);
    let args = new addBuddyMembers_args in
      args#set_requestId requestId;
      args#set_userMids userMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_addBuddyMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_addBuddyMembers_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method blockBuddyMember requestId mid = 
    self#send_blockBuddyMember requestId mid;
    self#recv_blockBuddyMember
  method private send_blockBuddyMember requestId mid = 
    oprot#writeMessageBegin ("blockBuddyMember", Protocol.CALL, seqid);
    let args = new blockBuddyMember_args in
      args#set_requestId requestId;
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_blockBuddyMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_blockBuddyMember_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method commitSendMessagesToAll requestIdList = 
    self#send_commitSendMessagesToAll requestIdList;
    self#recv_commitSendMessagesToAll
  method private send_commitSendMessagesToAll requestIdList = 
    oprot#writeMessageBegin ("commitSendMessagesToAll", Protocol.CALL, seqid);
    let args = new commitSendMessagesToAll_args in
      args#set_requestIdList requestIdList;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_commitSendMessagesToAll  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_commitSendMessagesToAll_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "commitSendMessagesToAll failed: unknown result")))
  method commitSendMessagesToMids requestIdList mids = 
    self#send_commitSendMessagesToMids requestIdList mids;
    self#recv_commitSendMessagesToMids
  method private send_commitSendMessagesToMids requestIdList mids = 
    oprot#writeMessageBegin ("commitSendMessagesToMids", Protocol.CALL, seqid);
    let args = new commitSendMessagesToMids_args in
      args#set_requestIdList requestIdList;
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_commitSendMessagesToMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_commitSendMessagesToMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "commitSendMessagesToMids failed: unknown result")))
  method containsBuddyMember requestId userMid = 
    self#send_containsBuddyMember requestId userMid;
    self#recv_containsBuddyMember
  method private send_containsBuddyMember requestId userMid = 
    oprot#writeMessageBegin ("containsBuddyMember", Protocol.CALL, seqid);
    let args = new containsBuddyMember_args in
      args#set_requestId requestId;
      args#set_userMid userMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_containsBuddyMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_containsBuddyMember_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "containsBuddyMember failed: unknown result")))
  method downloadMessageContent requestId messageId = 
    self#send_downloadMessageContent requestId messageId;
    self#recv_downloadMessageContent
  method private send_downloadMessageContent requestId messageId = 
    oprot#writeMessageBegin ("downloadMessageContent", Protocol.CALL, seqid);
    let args = new downloadMessageContent_args in
      args#set_requestId requestId;
      args#set_messageId messageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_downloadMessageContent  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_downloadMessageContent_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "downloadMessageContent failed: unknown result")))
  method downloadMessageContentPreview requestId messageId = 
    self#send_downloadMessageContentPreview requestId messageId;
    self#recv_downloadMessageContentPreview
  method private send_downloadMessageContentPreview requestId messageId = 
    oprot#writeMessageBegin ("downloadMessageContentPreview", Protocol.CALL, seqid);
    let args = new downloadMessageContentPreview_args in
      args#set_requestId requestId;
      args#set_messageId messageId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_downloadMessageContentPreview  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_downloadMessageContentPreview_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "downloadMessageContentPreview failed: unknown result")))
  method downloadProfileImage requestId = 
    self#send_downloadProfileImage requestId;
    self#recv_downloadProfileImage
  method private send_downloadProfileImage requestId = 
    oprot#writeMessageBegin ("downloadProfileImage", Protocol.CALL, seqid);
    let args = new downloadProfileImage_args in
      args#set_requestId requestId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_downloadProfileImage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_downloadProfileImage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "downloadProfileImage failed: unknown result")))
  method downloadProfileImagePreview requestId = 
    self#send_downloadProfileImagePreview requestId;
    self#recv_downloadProfileImagePreview
  method private send_downloadProfileImagePreview requestId = 
    oprot#writeMessageBegin ("downloadProfileImagePreview", Protocol.CALL, seqid);
    let args = new downloadProfileImagePreview_args in
      args#set_requestId requestId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_downloadProfileImagePreview  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_downloadProfileImagePreview_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "downloadProfileImagePreview failed: unknown result")))
  method getActiveMemberCountByBuddyMid buddyMid = 
    self#send_getActiveMemberCountByBuddyMid buddyMid;
    self#recv_getActiveMemberCountByBuddyMid
  method private send_getActiveMemberCountByBuddyMid buddyMid = 
    oprot#writeMessageBegin ("getActiveMemberCountByBuddyMid", Protocol.CALL, seqid);
    let args = new getActiveMemberCountByBuddyMid_args in
      args#set_buddyMid buddyMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getActiveMemberCountByBuddyMid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getActiveMemberCountByBuddyMid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getActiveMemberCountByBuddyMid failed: unknown result")))
  method getActiveMemberMidsByBuddyMid buddyMid = 
    self#send_getActiveMemberMidsByBuddyMid buddyMid;
    self#recv_getActiveMemberMidsByBuddyMid
  method private send_getActiveMemberMidsByBuddyMid buddyMid = 
    oprot#writeMessageBegin ("getActiveMemberMidsByBuddyMid", Protocol.CALL, seqid);
    let args = new getActiveMemberMidsByBuddyMid_args in
      args#set_buddyMid buddyMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getActiveMemberMidsByBuddyMid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getActiveMemberMidsByBuddyMid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getActiveMemberMidsByBuddyMid failed: unknown result")))
  method getAllBuddyMembers  = 
    self#send_getAllBuddyMembers;
    self#recv_getAllBuddyMembers
  method private send_getAllBuddyMembers  = 
    oprot#writeMessageBegin ("getAllBuddyMembers", Protocol.CALL, seqid);
    let args = new getAllBuddyMembers_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getAllBuddyMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getAllBuddyMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getAllBuddyMembers failed: unknown result")))
  method getBlockedBuddyMembers  = 
    self#send_getBlockedBuddyMembers;
    self#recv_getBlockedBuddyMembers
  method private send_getBlockedBuddyMembers  = 
    oprot#writeMessageBegin ("getBlockedBuddyMembers", Protocol.CALL, seqid);
    let args = new getBlockedBuddyMembers_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBlockedBuddyMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBlockedBuddyMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBlockedBuddyMembers failed: unknown result")))
  method getBlockerCountByBuddyMid buddyMid = 
    self#send_getBlockerCountByBuddyMid buddyMid;
    self#recv_getBlockerCountByBuddyMid
  method private send_getBlockerCountByBuddyMid buddyMid = 
    oprot#writeMessageBegin ("getBlockerCountByBuddyMid", Protocol.CALL, seqid);
    let args = new getBlockerCountByBuddyMid_args in
      args#set_buddyMid buddyMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBlockerCountByBuddyMid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBlockerCountByBuddyMid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBlockerCountByBuddyMid failed: unknown result")))
  method getBuddyDetailByMid buddyMid = 
    self#send_getBuddyDetailByMid buddyMid;
    self#recv_getBuddyDetailByMid
  method private send_getBuddyDetailByMid buddyMid = 
    oprot#writeMessageBegin ("getBuddyDetailByMid", Protocol.CALL, seqid);
    let args = new getBuddyDetailByMid_args in
      args#set_buddyMid buddyMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBuddyDetailByMid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBuddyDetailByMid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBuddyDetailByMid failed: unknown result")))
  method getBuddyProfile  = 
    self#send_getBuddyProfile;
    self#recv_getBuddyProfile
  method private send_getBuddyProfile  = 
    oprot#writeMessageBegin ("getBuddyProfile", Protocol.CALL, seqid);
    let args = new getBuddyProfile_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBuddyProfile  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBuddyProfile_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBuddyProfile failed: unknown result")))
  method getContactTicket  = 
    self#send_getContactTicket;
    self#recv_getContactTicket
  method private send_getContactTicket  = 
    oprot#writeMessageBegin ("getContactTicket", Protocol.CALL, seqid);
    let args = new getContactTicket_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getContactTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getContactTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getContactTicket failed: unknown result")))
  method getMemberCountByBuddyMid buddyMid = 
    self#send_getMemberCountByBuddyMid buddyMid;
    self#recv_getMemberCountByBuddyMid
  method private send_getMemberCountByBuddyMid buddyMid = 
    oprot#writeMessageBegin ("getMemberCountByBuddyMid", Protocol.CALL, seqid);
    let args = new getMemberCountByBuddyMid_args in
      args#set_buddyMid buddyMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMemberCountByBuddyMid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMemberCountByBuddyMid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMemberCountByBuddyMid failed: unknown result")))
  method getSendBuddyMessageResult sendBuddyMessageRequestId = 
    self#send_getSendBuddyMessageResult sendBuddyMessageRequestId;
    self#recv_getSendBuddyMessageResult
  method private send_getSendBuddyMessageResult sendBuddyMessageRequestId = 
    oprot#writeMessageBegin ("getSendBuddyMessageResult", Protocol.CALL, seqid);
    let args = new getSendBuddyMessageResult_args in
      args#set_sendBuddyMessageRequestId sendBuddyMessageRequestId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSendBuddyMessageResult  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSendBuddyMessageResult_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSendBuddyMessageResult failed: unknown result")))
  method getSetBuddyOnAirResult setBuddyOnAirRequestId = 
    self#send_getSetBuddyOnAirResult setBuddyOnAirRequestId;
    self#recv_getSetBuddyOnAirResult
  method private send_getSetBuddyOnAirResult setBuddyOnAirRequestId = 
    oprot#writeMessageBegin ("getSetBuddyOnAirResult", Protocol.CALL, seqid);
    let args = new getSetBuddyOnAirResult_args in
      args#set_setBuddyOnAirRequestId setBuddyOnAirRequestId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSetBuddyOnAirResult  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSetBuddyOnAirResult_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSetBuddyOnAirResult failed: unknown result")))
  method getUpdateBuddyProfileResult updateBuddyProfileRequestId = 
    self#send_getUpdateBuddyProfileResult updateBuddyProfileRequestId;
    self#recv_getUpdateBuddyProfileResult
  method private send_getUpdateBuddyProfileResult updateBuddyProfileRequestId = 
    oprot#writeMessageBegin ("getUpdateBuddyProfileResult", Protocol.CALL, seqid);
    let args = new getUpdateBuddyProfileResult_args in
      args#set_updateBuddyProfileRequestId updateBuddyProfileRequestId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUpdateBuddyProfileResult  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUpdateBuddyProfileResult_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUpdateBuddyProfileResult failed: unknown result")))
  method isBuddyOnAirByMid buddyMid = 
    self#send_isBuddyOnAirByMid buddyMid;
    self#recv_isBuddyOnAirByMid
  method private send_isBuddyOnAirByMid buddyMid = 
    oprot#writeMessageBegin ("isBuddyOnAirByMid", Protocol.CALL, seqid);
    let args = new isBuddyOnAirByMid_args in
      args#set_buddyMid buddyMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_isBuddyOnAirByMid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_isBuddyOnAirByMid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "isBuddyOnAirByMid failed: unknown result")))
  method linkAndSendBuddyContentMessageToAllAsync requestId msg sourceContentId = 
    self#send_linkAndSendBuddyContentMessageToAllAsync requestId msg sourceContentId;
    self#recv_linkAndSendBuddyContentMessageToAllAsync
  method private send_linkAndSendBuddyContentMessageToAllAsync requestId msg sourceContentId = 
    oprot#writeMessageBegin ("linkAndSendBuddyContentMessageToAllAsync", Protocol.CALL, seqid);
    let args = new linkAndSendBuddyContentMessageToAllAsync_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#set_sourceContentId sourceContentId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_linkAndSendBuddyContentMessageToAllAsync  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_linkAndSendBuddyContentMessageToAllAsync_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "linkAndSendBuddyContentMessageToAllAsync failed: unknown result")))
  method linkAndSendBuddyContentMessageToMids requestId msg sourceContentId mids = 
    self#send_linkAndSendBuddyContentMessageToMids requestId msg sourceContentId mids;
    self#recv_linkAndSendBuddyContentMessageToMids
  method private send_linkAndSendBuddyContentMessageToMids requestId msg sourceContentId mids = 
    oprot#writeMessageBegin ("linkAndSendBuddyContentMessageToMids", Protocol.CALL, seqid);
    let args = new linkAndSendBuddyContentMessageToMids_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#set_sourceContentId sourceContentId;
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_linkAndSendBuddyContentMessageToMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_linkAndSendBuddyContentMessageToMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "linkAndSendBuddyContentMessageToMids failed: unknown result")))
  method notifyBuddyBlocked buddyMid blockerMid = 
    self#send_notifyBuddyBlocked buddyMid blockerMid;
    self#recv_notifyBuddyBlocked
  method private send_notifyBuddyBlocked buddyMid blockerMid = 
    oprot#writeMessageBegin ("notifyBuddyBlocked", Protocol.CALL, seqid);
    let args = new notifyBuddyBlocked_args in
      args#set_buddyMid buddyMid;
      args#set_blockerMid blockerMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyBuddyBlocked  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyBuddyBlocked_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method notifyBuddyUnblocked buddyMid blockerMid = 
    self#send_notifyBuddyUnblocked buddyMid blockerMid;
    self#recv_notifyBuddyUnblocked
  method private send_notifyBuddyUnblocked buddyMid blockerMid = 
    oprot#writeMessageBegin ("notifyBuddyUnblocked", Protocol.CALL, seqid);
    let args = new notifyBuddyUnblocked_args in
      args#set_buddyMid buddyMid;
      args#set_blockerMid blockerMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyBuddyUnblocked  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyBuddyUnblocked_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method registerBuddy buddyId searchId displayName statusMeessage picture settings = 
    self#send_registerBuddy buddyId searchId displayName statusMeessage picture settings;
    self#recv_registerBuddy
  method private send_registerBuddy buddyId searchId displayName statusMeessage picture settings = 
    oprot#writeMessageBegin ("registerBuddy", Protocol.CALL, seqid);
    let args = new registerBuddy_args in
      args#set_buddyId buddyId;
      args#set_searchId searchId;
      args#set_displayName displayName;
      args#set_statusMeessage statusMeessage;
      args#set_picture picture;
      args#set_settings settings;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerBuddy  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerBuddy_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerBuddy failed: unknown result")))
  method registerBuddyAdmin buddyId searchId displayName statusMessage picture = 
    self#send_registerBuddyAdmin buddyId searchId displayName statusMessage picture;
    self#recv_registerBuddyAdmin
  method private send_registerBuddyAdmin buddyId searchId displayName statusMessage picture = 
    oprot#writeMessageBegin ("registerBuddyAdmin", Protocol.CALL, seqid);
    let args = new registerBuddyAdmin_args in
      args#set_buddyId buddyId;
      args#set_searchId searchId;
      args#set_displayName displayName;
      args#set_statusMessage statusMessage;
      args#set_picture picture;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerBuddyAdmin  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerBuddyAdmin_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerBuddyAdmin failed: unknown result")))
  method reissueContactTicket expirationTime maxUseCount = 
    self#send_reissueContactTicket expirationTime maxUseCount;
    self#recv_reissueContactTicket
  method private send_reissueContactTicket expirationTime maxUseCount = 
    oprot#writeMessageBegin ("reissueContactTicket", Protocol.CALL, seqid);
    let args = new reissueContactTicket_args in
      args#set_expirationTime expirationTime;
      args#set_maxUseCount maxUseCount;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reissueContactTicket  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reissueContactTicket_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reissueContactTicket failed: unknown result")))
  method removeBuddyMember requestId userMid = 
    self#send_removeBuddyMember requestId userMid;
    self#recv_removeBuddyMember
  method private send_removeBuddyMember requestId userMid = 
    oprot#writeMessageBegin ("removeBuddyMember", Protocol.CALL, seqid);
    let args = new removeBuddyMember_args in
      args#set_requestId requestId;
      args#set_userMid userMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeBuddyMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeBuddyMember_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method removeBuddyMembers requestId userMids = 
    self#send_removeBuddyMembers requestId userMids;
    self#recv_removeBuddyMembers
  method private send_removeBuddyMembers requestId userMids = 
    oprot#writeMessageBegin ("removeBuddyMembers", Protocol.CALL, seqid);
    let args = new removeBuddyMembers_args in
      args#set_requestId requestId;
      args#set_userMids userMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeBuddyMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeBuddyMembers_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method sendBuddyContentMessageToAll requestId msg content = 
    self#send_sendBuddyContentMessageToAll requestId msg content;
    self#recv_sendBuddyContentMessageToAll
  method private send_sendBuddyContentMessageToAll requestId msg content = 
    oprot#writeMessageBegin ("sendBuddyContentMessageToAll", Protocol.CALL, seqid);
    let args = new sendBuddyContentMessageToAll_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#set_content content;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendBuddyContentMessageToAll  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendBuddyContentMessageToAll_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendBuddyContentMessageToAll failed: unknown result")))
  method sendBuddyContentMessageToAllAsync requestId msg content = 
    self#send_sendBuddyContentMessageToAllAsync requestId msg content;
    self#recv_sendBuddyContentMessageToAllAsync
  method private send_sendBuddyContentMessageToAllAsync requestId msg content = 
    oprot#writeMessageBegin ("sendBuddyContentMessageToAllAsync", Protocol.CALL, seqid);
    let args = new sendBuddyContentMessageToAllAsync_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#set_content content;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendBuddyContentMessageToAllAsync  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendBuddyContentMessageToAllAsync_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendBuddyContentMessageToAllAsync failed: unknown result")))
  method sendBuddyContentMessageToMids requestId msg content mids = 
    self#send_sendBuddyContentMessageToMids requestId msg content mids;
    self#recv_sendBuddyContentMessageToMids
  method private send_sendBuddyContentMessageToMids requestId msg content mids = 
    oprot#writeMessageBegin ("sendBuddyContentMessageToMids", Protocol.CALL, seqid);
    let args = new sendBuddyContentMessageToMids_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#set_content content;
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendBuddyContentMessageToMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendBuddyContentMessageToMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendBuddyContentMessageToMids failed: unknown result")))
  method sendBuddyContentMessageToMidsAsync requestId msg content mids = 
    self#send_sendBuddyContentMessageToMidsAsync requestId msg content mids;
    self#recv_sendBuddyContentMessageToMidsAsync
  method private send_sendBuddyContentMessageToMidsAsync requestId msg content mids = 
    oprot#writeMessageBegin ("sendBuddyContentMessageToMidsAsync", Protocol.CALL, seqid);
    let args = new sendBuddyContentMessageToMidsAsync_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#set_content content;
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendBuddyContentMessageToMidsAsync  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendBuddyContentMessageToMidsAsync_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendBuddyContentMessageToMidsAsync failed: unknown result")))
  method sendBuddyMessageToAll requestId msg = 
    self#send_sendBuddyMessageToAll requestId msg;
    self#recv_sendBuddyMessageToAll
  method private send_sendBuddyMessageToAll requestId msg = 
    oprot#writeMessageBegin ("sendBuddyMessageToAll", Protocol.CALL, seqid);
    let args = new sendBuddyMessageToAll_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendBuddyMessageToAll  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendBuddyMessageToAll_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendBuddyMessageToAll failed: unknown result")))
  method sendBuddyMessageToAllAsync requestId msg = 
    self#send_sendBuddyMessageToAllAsync requestId msg;
    self#recv_sendBuddyMessageToAllAsync
  method private send_sendBuddyMessageToAllAsync requestId msg = 
    oprot#writeMessageBegin ("sendBuddyMessageToAllAsync", Protocol.CALL, seqid);
    let args = new sendBuddyMessageToAllAsync_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendBuddyMessageToAllAsync  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendBuddyMessageToAllAsync_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendBuddyMessageToAllAsync failed: unknown result")))
  method sendBuddyMessageToMids requestId msg mids = 
    self#send_sendBuddyMessageToMids requestId msg mids;
    self#recv_sendBuddyMessageToMids
  method private send_sendBuddyMessageToMids requestId msg mids = 
    oprot#writeMessageBegin ("sendBuddyMessageToMids", Protocol.CALL, seqid);
    let args = new sendBuddyMessageToMids_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendBuddyMessageToMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendBuddyMessageToMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendBuddyMessageToMids failed: unknown result")))
  method sendBuddyMessageToMidsAsync requestId msg mids = 
    self#send_sendBuddyMessageToMidsAsync requestId msg mids;
    self#recv_sendBuddyMessageToMidsAsync
  method private send_sendBuddyMessageToMidsAsync requestId msg mids = 
    oprot#writeMessageBegin ("sendBuddyMessageToMidsAsync", Protocol.CALL, seqid);
    let args = new sendBuddyMessageToMidsAsync_args in
      args#set_requestId requestId;
      args#set_msg msg;
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendBuddyMessageToMidsAsync  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendBuddyMessageToMidsAsync_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendBuddyMessageToMidsAsync failed: unknown result")))
  method sendIndividualEventToAllAsync requestId buddyMid notificationStatus = 
    self#send_sendIndividualEventToAllAsync requestId buddyMid notificationStatus;
    self#recv_sendIndividualEventToAllAsync
  method private send_sendIndividualEventToAllAsync requestId buddyMid notificationStatus = 
    oprot#writeMessageBegin ("sendIndividualEventToAllAsync", Protocol.CALL, seqid);
    let args = new sendIndividualEventToAllAsync_args in
      args#set_requestId requestId;
      args#set_buddyMid buddyMid;
      args#set_notificationStatus notificationStatus;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendIndividualEventToAllAsync  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendIndividualEventToAllAsync_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method setBuddyOnAir requestId onAir = 
    self#send_setBuddyOnAir requestId onAir;
    self#recv_setBuddyOnAir
  method private send_setBuddyOnAir requestId onAir = 
    oprot#writeMessageBegin ("setBuddyOnAir", Protocol.CALL, seqid);
    let args = new setBuddyOnAir_args in
      args#set_requestId requestId;
      args#set_onAir onAir;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_setBuddyOnAir  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_setBuddyOnAir_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "setBuddyOnAir failed: unknown result")))
  method setBuddyOnAirAsync requestId onAir = 
    self#send_setBuddyOnAirAsync requestId onAir;
    self#recv_setBuddyOnAirAsync
  method private send_setBuddyOnAirAsync requestId onAir = 
    oprot#writeMessageBegin ("setBuddyOnAirAsync", Protocol.CALL, seqid);
    let args = new setBuddyOnAirAsync_args in
      args#set_requestId requestId;
      args#set_onAir onAir;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_setBuddyOnAirAsync  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_setBuddyOnAirAsync_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "setBuddyOnAirAsync failed: unknown result")))
  method storeMessage requestId messageRequest = 
    self#send_storeMessage requestId messageRequest;
    self#recv_storeMessage
  method private send_storeMessage requestId messageRequest = 
    oprot#writeMessageBegin ("storeMessage", Protocol.CALL, seqid);
    let args = new storeMessage_args in
      args#set_requestId requestId;
      args#set_messageRequest messageRequest;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_storeMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_storeMessage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "storeMessage failed: unknown result")))
  method unblockBuddyMember requestId mid = 
    self#send_unblockBuddyMember requestId mid;
    self#recv_unblockBuddyMember
  method private send_unblockBuddyMember requestId mid = 
    oprot#writeMessageBegin ("unblockBuddyMember", Protocol.CALL, seqid);
    let args = new unblockBuddyMember_args in
      args#set_requestId requestId;
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_unblockBuddyMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_unblockBuddyMember_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method unregisterBuddy requestId = 
    self#send_unregisterBuddy requestId;
    self#recv_unregisterBuddy
  method private send_unregisterBuddy requestId = 
    oprot#writeMessageBegin ("unregisterBuddy", Protocol.CALL, seqid);
    let args = new unregisterBuddy_args in
      args#set_requestId requestId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_unregisterBuddy  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_unregisterBuddy_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method unregisterBuddyAdmin requestId = 
    self#send_unregisterBuddyAdmin requestId;
    self#recv_unregisterBuddyAdmin
  method private send_unregisterBuddyAdmin requestId = 
    oprot#writeMessageBegin ("unregisterBuddyAdmin", Protocol.CALL, seqid);
    let args = new unregisterBuddyAdmin_args in
      args#set_requestId requestId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_unregisterBuddyAdmin  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_unregisterBuddyAdmin_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateBuddyAdminProfileAttribute requestId attributes = 
    self#send_updateBuddyAdminProfileAttribute requestId attributes;
    self#recv_updateBuddyAdminProfileAttribute
  method private send_updateBuddyAdminProfileAttribute requestId attributes = 
    oprot#writeMessageBegin ("updateBuddyAdminProfileAttribute", Protocol.CALL, seqid);
    let args = new updateBuddyAdminProfileAttribute_args in
      args#set_requestId requestId;
      args#set_attributes attributes;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateBuddyAdminProfileAttribute  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateBuddyAdminProfileAttribute_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateBuddyAdminProfileImage requestId picture = 
    self#send_updateBuddyAdminProfileImage requestId picture;
    self#recv_updateBuddyAdminProfileImage
  method private send_updateBuddyAdminProfileImage requestId picture = 
    oprot#writeMessageBegin ("updateBuddyAdminProfileImage", Protocol.CALL, seqid);
    let args = new updateBuddyAdminProfileImage_args in
      args#set_requestId requestId;
      args#set_picture picture;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateBuddyAdminProfileImage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateBuddyAdminProfileImage_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateBuddyProfileAttributes requestId attributes = 
    self#send_updateBuddyProfileAttributes requestId attributes;
    self#recv_updateBuddyProfileAttributes
  method private send_updateBuddyProfileAttributes requestId attributes = 
    oprot#writeMessageBegin ("updateBuddyProfileAttributes", Protocol.CALL, seqid);
    let args = new updateBuddyProfileAttributes_args in
      args#set_requestId requestId;
      args#set_attributes attributes;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateBuddyProfileAttributes  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateBuddyProfileAttributes_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateBuddyProfileAttributes failed: unknown result")))
  method updateBuddyProfileAttributesAsync requestId attributes = 
    self#send_updateBuddyProfileAttributesAsync requestId attributes;
    self#recv_updateBuddyProfileAttributesAsync
  method private send_updateBuddyProfileAttributesAsync requestId attributes = 
    oprot#writeMessageBegin ("updateBuddyProfileAttributesAsync", Protocol.CALL, seqid);
    let args = new updateBuddyProfileAttributesAsync_args in
      args#set_requestId requestId;
      args#set_attributes attributes;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateBuddyProfileAttributesAsync  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateBuddyProfileAttributesAsync_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateBuddyProfileAttributesAsync failed: unknown result")))
  method updateBuddyProfileImage requestId image = 
    self#send_updateBuddyProfileImage requestId image;
    self#recv_updateBuddyProfileImage
  method private send_updateBuddyProfileImage requestId image = 
    oprot#writeMessageBegin ("updateBuddyProfileImage", Protocol.CALL, seqid);
    let args = new updateBuddyProfileImage_args in
      args#set_requestId requestId;
      args#set_image image;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateBuddyProfileImage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateBuddyProfileImage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateBuddyProfileImage failed: unknown result")))
  method updateBuddyProfileImageAsync requestId image = 
    self#send_updateBuddyProfileImageAsync requestId image;
    self#recv_updateBuddyProfileImageAsync
  method private send_updateBuddyProfileImageAsync requestId image = 
    oprot#writeMessageBegin ("updateBuddyProfileImageAsync", Protocol.CALL, seqid);
    let args = new updateBuddyProfileImageAsync_args in
      args#set_requestId requestId;
      args#set_image image;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateBuddyProfileImageAsync  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateBuddyProfileImageAsync_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "updateBuddyProfileImageAsync failed: unknown result")))
  method updateBuddySearchId requestId searchId = 
    self#send_updateBuddySearchId requestId searchId;
    self#recv_updateBuddySearchId
  method private send_updateBuddySearchId requestId searchId = 
    oprot#writeMessageBegin ("updateBuddySearchId", Protocol.CALL, seqid);
    let args = new updateBuddySearchId_args in
      args#set_requestId requestId;
      args#set_searchId searchId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateBuddySearchId  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateBuddySearchId_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateBuddySettings settings = 
    self#send_updateBuddySettings settings;
    self#recv_updateBuddySettings
  method private send_updateBuddySettings settings = 
    oprot#writeMessageBegin ("updateBuddySettings", Protocol.CALL, seqid);
    let args = new updateBuddySettings_args in
      args#set_settings settings;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateBuddySettings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateBuddySettings_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method uploadBuddyContent contentType content = 
    self#send_uploadBuddyContent contentType content;
    self#recv_uploadBuddyContent
  method private send_uploadBuddyContent contentType content = 
    oprot#writeMessageBegin ("uploadBuddyContent", Protocol.CALL, seqid);
    let args = new uploadBuddyContent_args in
      args#set_contentType contentType;
      args#set_content content;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_uploadBuddyContent  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_uploadBuddyContent_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "uploadBuddyContent failed: unknown result")))
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 56
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_addBuddyMember (seqid, iprot, oprot) =
    let args = read_addBuddyMember_args iprot in
      iprot#readMessageEnd;
      let result = new addBuddyMember_result in
        (try
          (handler#addBuddyMember args#get_requestId args#get_userMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("addBuddyMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_addBuddyMembers (seqid, iprot, oprot) =
    let args = read_addBuddyMembers_args iprot in
      iprot#readMessageEnd;
      let result = new addBuddyMembers_result in
        (try
          (handler#addBuddyMembers args#get_requestId args#get_userMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("addBuddyMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_blockBuddyMember (seqid, iprot, oprot) =
    let args = read_blockBuddyMember_args iprot in
      iprot#readMessageEnd;
      let result = new blockBuddyMember_result in
        (try
          (handler#blockBuddyMember args#get_requestId args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("blockBuddyMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_commitSendMessagesToAll (seqid, iprot, oprot) =
    let args = read_commitSendMessagesToAll_args iprot in
      iprot#readMessageEnd;
      let result = new commitSendMessagesToAll_result in
        (try
          result#set_success (handler#commitSendMessagesToAll args#get_requestIdList);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("commitSendMessagesToAll", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_commitSendMessagesToMids (seqid, iprot, oprot) =
    let args = read_commitSendMessagesToMids_args iprot in
      iprot#readMessageEnd;
      let result = new commitSendMessagesToMids_result in
        (try
          result#set_success (handler#commitSendMessagesToMids args#get_requestIdList args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("commitSendMessagesToMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_containsBuddyMember (seqid, iprot, oprot) =
    let args = read_containsBuddyMember_args iprot in
      iprot#readMessageEnd;
      let result = new containsBuddyMember_result in
        (try
          result#set_success (handler#containsBuddyMember args#get_requestId args#get_userMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("containsBuddyMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_downloadMessageContent (seqid, iprot, oprot) =
    let args = read_downloadMessageContent_args iprot in
      iprot#readMessageEnd;
      let result = new downloadMessageContent_result in
        (try
          result#set_success (handler#downloadMessageContent args#get_requestId args#get_messageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("downloadMessageContent", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_downloadMessageContentPreview (seqid, iprot, oprot) =
    let args = read_downloadMessageContentPreview_args iprot in
      iprot#readMessageEnd;
      let result = new downloadMessageContentPreview_result in
        (try
          result#set_success (handler#downloadMessageContentPreview args#get_requestId args#get_messageId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("downloadMessageContentPreview", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_downloadProfileImage (seqid, iprot, oprot) =
    let args = read_downloadProfileImage_args iprot in
      iprot#readMessageEnd;
      let result = new downloadProfileImage_result in
        (try
          result#set_success (handler#downloadProfileImage args#get_requestId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("downloadProfileImage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_downloadProfileImagePreview (seqid, iprot, oprot) =
    let args = read_downloadProfileImagePreview_args iprot in
      iprot#readMessageEnd;
      let result = new downloadProfileImagePreview_result in
        (try
          result#set_success (handler#downloadProfileImagePreview args#get_requestId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("downloadProfileImagePreview", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getActiveMemberCountByBuddyMid (seqid, iprot, oprot) =
    let args = read_getActiveMemberCountByBuddyMid_args iprot in
      iprot#readMessageEnd;
      let result = new getActiveMemberCountByBuddyMid_result in
        (try
          result#set_success (handler#getActiveMemberCountByBuddyMid args#get_buddyMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getActiveMemberCountByBuddyMid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getActiveMemberMidsByBuddyMid (seqid, iprot, oprot) =
    let args = read_getActiveMemberMidsByBuddyMid_args iprot in
      iprot#readMessageEnd;
      let result = new getActiveMemberMidsByBuddyMid_result in
        (try
          result#set_success (handler#getActiveMemberMidsByBuddyMid args#get_buddyMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getActiveMemberMidsByBuddyMid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getAllBuddyMembers (seqid, iprot, oprot) =
    let _ = read_getAllBuddyMembers_args iprot in
      iprot#readMessageEnd;
      let result = new getAllBuddyMembers_result in
        (try
          result#set_success (handler#getAllBuddyMembers);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getAllBuddyMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBlockedBuddyMembers (seqid, iprot, oprot) =
    let _ = read_getBlockedBuddyMembers_args iprot in
      iprot#readMessageEnd;
      let result = new getBlockedBuddyMembers_result in
        (try
          result#set_success (handler#getBlockedBuddyMembers);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBlockedBuddyMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBlockerCountByBuddyMid (seqid, iprot, oprot) =
    let args = read_getBlockerCountByBuddyMid_args iprot in
      iprot#readMessageEnd;
      let result = new getBlockerCountByBuddyMid_result in
        (try
          result#set_success (handler#getBlockerCountByBuddyMid args#get_buddyMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBlockerCountByBuddyMid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBuddyDetailByMid (seqid, iprot, oprot) =
    let args = read_getBuddyDetailByMid_args iprot in
      iprot#readMessageEnd;
      let result = new getBuddyDetailByMid_result in
        (try
          result#set_success (handler#getBuddyDetailByMid args#get_buddyMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBuddyDetailByMid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBuddyProfile (seqid, iprot, oprot) =
    let _ = read_getBuddyProfile_args iprot in
      iprot#readMessageEnd;
      let result = new getBuddyProfile_result in
        (try
          result#set_success (handler#getBuddyProfile);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBuddyProfile", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getContactTicket (seqid, iprot, oprot) =
    let _ = read_getContactTicket_args iprot in
      iprot#readMessageEnd;
      let result = new getContactTicket_result in
        (try
          result#set_success (handler#getContactTicket);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getContactTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMemberCountByBuddyMid (seqid, iprot, oprot) =
    let args = read_getMemberCountByBuddyMid_args iprot in
      iprot#readMessageEnd;
      let result = new getMemberCountByBuddyMid_result in
        (try
          result#set_success (handler#getMemberCountByBuddyMid args#get_buddyMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMemberCountByBuddyMid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSendBuddyMessageResult (seqid, iprot, oprot) =
    let args = read_getSendBuddyMessageResult_args iprot in
      iprot#readMessageEnd;
      let result = new getSendBuddyMessageResult_result in
        (try
          result#set_success (handler#getSendBuddyMessageResult args#get_sendBuddyMessageRequestId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSendBuddyMessageResult", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSetBuddyOnAirResult (seqid, iprot, oprot) =
    let args = read_getSetBuddyOnAirResult_args iprot in
      iprot#readMessageEnd;
      let result = new getSetBuddyOnAirResult_result in
        (try
          result#set_success (handler#getSetBuddyOnAirResult args#get_setBuddyOnAirRequestId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSetBuddyOnAirResult", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUpdateBuddyProfileResult (seqid, iprot, oprot) =
    let args = read_getUpdateBuddyProfileResult_args iprot in
      iprot#readMessageEnd;
      let result = new getUpdateBuddyProfileResult_result in
        (try
          result#set_success (handler#getUpdateBuddyProfileResult args#get_updateBuddyProfileRequestId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUpdateBuddyProfileResult", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_isBuddyOnAirByMid (seqid, iprot, oprot) =
    let args = read_isBuddyOnAirByMid_args iprot in
      iprot#readMessageEnd;
      let result = new isBuddyOnAirByMid_result in
        (try
          result#set_success (handler#isBuddyOnAirByMid args#get_buddyMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("isBuddyOnAirByMid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_linkAndSendBuddyContentMessageToAllAsync (seqid, iprot, oprot) =
    let args = read_linkAndSendBuddyContentMessageToAllAsync_args iprot in
      iprot#readMessageEnd;
      let result = new linkAndSendBuddyContentMessageToAllAsync_result in
        (try
          result#set_success (handler#linkAndSendBuddyContentMessageToAllAsync args#get_requestId args#get_msg args#get_sourceContentId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("linkAndSendBuddyContentMessageToAllAsync", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_linkAndSendBuddyContentMessageToMids (seqid, iprot, oprot) =
    let args = read_linkAndSendBuddyContentMessageToMids_args iprot in
      iprot#readMessageEnd;
      let result = new linkAndSendBuddyContentMessageToMids_result in
        (try
          result#set_success (handler#linkAndSendBuddyContentMessageToMids args#get_requestId args#get_msg args#get_sourceContentId args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("linkAndSendBuddyContentMessageToMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyBuddyBlocked (seqid, iprot, oprot) =
    let args = read_notifyBuddyBlocked_args iprot in
      iprot#readMessageEnd;
      let result = new notifyBuddyBlocked_result in
        (try
          (handler#notifyBuddyBlocked args#get_buddyMid args#get_blockerMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyBuddyBlocked", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyBuddyUnblocked (seqid, iprot, oprot) =
    let args = read_notifyBuddyUnblocked_args iprot in
      iprot#readMessageEnd;
      let result = new notifyBuddyUnblocked_result in
        (try
          (handler#notifyBuddyUnblocked args#get_buddyMid args#get_blockerMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyBuddyUnblocked", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerBuddy (seqid, iprot, oprot) =
    let args = read_registerBuddy_args iprot in
      iprot#readMessageEnd;
      let result = new registerBuddy_result in
        (try
          result#set_success (handler#registerBuddy args#get_buddyId args#get_searchId args#get_displayName args#get_statusMeessage args#get_picture args#get_settings);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerBuddy", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerBuddyAdmin (seqid, iprot, oprot) =
    let args = read_registerBuddyAdmin_args iprot in
      iprot#readMessageEnd;
      let result = new registerBuddyAdmin_result in
        (try
          result#set_success (handler#registerBuddyAdmin args#get_buddyId args#get_searchId args#get_displayName args#get_statusMessage args#get_picture);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerBuddyAdmin", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reissueContactTicket (seqid, iprot, oprot) =
    let args = read_reissueContactTicket_args iprot in
      iprot#readMessageEnd;
      let result = new reissueContactTicket_result in
        (try
          result#set_success (handler#reissueContactTicket args#get_expirationTime args#get_maxUseCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reissueContactTicket", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeBuddyMember (seqid, iprot, oprot) =
    let args = read_removeBuddyMember_args iprot in
      iprot#readMessageEnd;
      let result = new removeBuddyMember_result in
        (try
          (handler#removeBuddyMember args#get_requestId args#get_userMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeBuddyMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeBuddyMembers (seqid, iprot, oprot) =
    let args = read_removeBuddyMembers_args iprot in
      iprot#readMessageEnd;
      let result = new removeBuddyMembers_result in
        (try
          (handler#removeBuddyMembers args#get_requestId args#get_userMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeBuddyMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendBuddyContentMessageToAll (seqid, iprot, oprot) =
    let args = read_sendBuddyContentMessageToAll_args iprot in
      iprot#readMessageEnd;
      let result = new sendBuddyContentMessageToAll_result in
        (try
          result#set_success (handler#sendBuddyContentMessageToAll args#get_requestId args#get_msg args#get_content);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendBuddyContentMessageToAll", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendBuddyContentMessageToAllAsync (seqid, iprot, oprot) =
    let args = read_sendBuddyContentMessageToAllAsync_args iprot in
      iprot#readMessageEnd;
      let result = new sendBuddyContentMessageToAllAsync_result in
        (try
          result#set_success (handler#sendBuddyContentMessageToAllAsync args#get_requestId args#get_msg args#get_content);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendBuddyContentMessageToAllAsync", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendBuddyContentMessageToMids (seqid, iprot, oprot) =
    let args = read_sendBuddyContentMessageToMids_args iprot in
      iprot#readMessageEnd;
      let result = new sendBuddyContentMessageToMids_result in
        (try
          result#set_success (handler#sendBuddyContentMessageToMids args#get_requestId args#get_msg args#get_content args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendBuddyContentMessageToMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendBuddyContentMessageToMidsAsync (seqid, iprot, oprot) =
    let args = read_sendBuddyContentMessageToMidsAsync_args iprot in
      iprot#readMessageEnd;
      let result = new sendBuddyContentMessageToMidsAsync_result in
        (try
          result#set_success (handler#sendBuddyContentMessageToMidsAsync args#get_requestId args#get_msg args#get_content args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendBuddyContentMessageToMidsAsync", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendBuddyMessageToAll (seqid, iprot, oprot) =
    let args = read_sendBuddyMessageToAll_args iprot in
      iprot#readMessageEnd;
      let result = new sendBuddyMessageToAll_result in
        (try
          result#set_success (handler#sendBuddyMessageToAll args#get_requestId args#get_msg);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendBuddyMessageToAll", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendBuddyMessageToAllAsync (seqid, iprot, oprot) =
    let args = read_sendBuddyMessageToAllAsync_args iprot in
      iprot#readMessageEnd;
      let result = new sendBuddyMessageToAllAsync_result in
        (try
          result#set_success (handler#sendBuddyMessageToAllAsync args#get_requestId args#get_msg);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendBuddyMessageToAllAsync", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendBuddyMessageToMids (seqid, iprot, oprot) =
    let args = read_sendBuddyMessageToMids_args iprot in
      iprot#readMessageEnd;
      let result = new sendBuddyMessageToMids_result in
        (try
          result#set_success (handler#sendBuddyMessageToMids args#get_requestId args#get_msg args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendBuddyMessageToMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendBuddyMessageToMidsAsync (seqid, iprot, oprot) =
    let args = read_sendBuddyMessageToMidsAsync_args iprot in
      iprot#readMessageEnd;
      let result = new sendBuddyMessageToMidsAsync_result in
        (try
          result#set_success (handler#sendBuddyMessageToMidsAsync args#get_requestId args#get_msg args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendBuddyMessageToMidsAsync", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendIndividualEventToAllAsync (seqid, iprot, oprot) =
    let args = read_sendIndividualEventToAllAsync_args iprot in
      iprot#readMessageEnd;
      let result = new sendIndividualEventToAllAsync_result in
        (try
          (handler#sendIndividualEventToAllAsync args#get_requestId args#get_buddyMid args#get_notificationStatus);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendIndividualEventToAllAsync", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_setBuddyOnAir (seqid, iprot, oprot) =
    let args = read_setBuddyOnAir_args iprot in
      iprot#readMessageEnd;
      let result = new setBuddyOnAir_result in
        (try
          result#set_success (handler#setBuddyOnAir args#get_requestId args#get_onAir);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("setBuddyOnAir", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_setBuddyOnAirAsync (seqid, iprot, oprot) =
    let args = read_setBuddyOnAirAsync_args iprot in
      iprot#readMessageEnd;
      let result = new setBuddyOnAirAsync_result in
        (try
          result#set_success (handler#setBuddyOnAirAsync args#get_requestId args#get_onAir);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("setBuddyOnAirAsync", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_storeMessage (seqid, iprot, oprot) =
    let args = read_storeMessage_args iprot in
      iprot#readMessageEnd;
      let result = new storeMessage_result in
        (try
          result#set_success (handler#storeMessage args#get_requestId args#get_messageRequest);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("storeMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_unblockBuddyMember (seqid, iprot, oprot) =
    let args = read_unblockBuddyMember_args iprot in
      iprot#readMessageEnd;
      let result = new unblockBuddyMember_result in
        (try
          (handler#unblockBuddyMember args#get_requestId args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("unblockBuddyMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_unregisterBuddy (seqid, iprot, oprot) =
    let args = read_unregisterBuddy_args iprot in
      iprot#readMessageEnd;
      let result = new unregisterBuddy_result in
        (try
          (handler#unregisterBuddy args#get_requestId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("unregisterBuddy", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_unregisterBuddyAdmin (seqid, iprot, oprot) =
    let args = read_unregisterBuddyAdmin_args iprot in
      iprot#readMessageEnd;
      let result = new unregisterBuddyAdmin_result in
        (try
          (handler#unregisterBuddyAdmin args#get_requestId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("unregisterBuddyAdmin", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateBuddyAdminProfileAttribute (seqid, iprot, oprot) =
    let args = read_updateBuddyAdminProfileAttribute_args iprot in
      iprot#readMessageEnd;
      let result = new updateBuddyAdminProfileAttribute_result in
        (try
          (handler#updateBuddyAdminProfileAttribute args#get_requestId args#get_attributes);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateBuddyAdminProfileAttribute", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateBuddyAdminProfileImage (seqid, iprot, oprot) =
    let args = read_updateBuddyAdminProfileImage_args iprot in
      iprot#readMessageEnd;
      let result = new updateBuddyAdminProfileImage_result in
        (try
          (handler#updateBuddyAdminProfileImage args#get_requestId args#get_picture);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateBuddyAdminProfileImage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateBuddyProfileAttributes (seqid, iprot, oprot) =
    let args = read_updateBuddyProfileAttributes_args iprot in
      iprot#readMessageEnd;
      let result = new updateBuddyProfileAttributes_result in
        (try
          result#set_success (handler#updateBuddyProfileAttributes args#get_requestId args#get_attributes);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateBuddyProfileAttributes", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateBuddyProfileAttributesAsync (seqid, iprot, oprot) =
    let args = read_updateBuddyProfileAttributesAsync_args iprot in
      iprot#readMessageEnd;
      let result = new updateBuddyProfileAttributesAsync_result in
        (try
          result#set_success (handler#updateBuddyProfileAttributesAsync args#get_requestId args#get_attributes);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateBuddyProfileAttributesAsync", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateBuddyProfileImage (seqid, iprot, oprot) =
    let args = read_updateBuddyProfileImage_args iprot in
      iprot#readMessageEnd;
      let result = new updateBuddyProfileImage_result in
        (try
          result#set_success (handler#updateBuddyProfileImage args#get_requestId args#get_image);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateBuddyProfileImage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateBuddyProfileImageAsync (seqid, iprot, oprot) =
    let args = read_updateBuddyProfileImageAsync_args iprot in
      iprot#readMessageEnd;
      let result = new updateBuddyProfileImageAsync_result in
        (try
          result#set_success (handler#updateBuddyProfileImageAsync args#get_requestId args#get_image);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateBuddyProfileImageAsync", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateBuddySearchId (seqid, iprot, oprot) =
    let args = read_updateBuddySearchId_args iprot in
      iprot#readMessageEnd;
      let result = new updateBuddySearchId_result in
        (try
          (handler#updateBuddySearchId args#get_requestId args#get_searchId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateBuddySearchId", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateBuddySettings (seqid, iprot, oprot) =
    let args = read_updateBuddySettings_args iprot in
      iprot#readMessageEnd;
      let result = new updateBuddySettings_result in
        (try
          (handler#updateBuddySettings args#get_settings);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateBuddySettings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_uploadBuddyContent (seqid, iprot, oprot) =
    let args = read_uploadBuddyContent_args iprot in
      iprot#readMessageEnd;
      let result = new uploadBuddyContent_result in
        (try
          result#set_success (handler#uploadBuddyContent args#get_contentType args#get_content);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("uploadBuddyContent", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "addBuddyMember" self#process_addBuddyMember;
    Hashtbl.add processMap "addBuddyMembers" self#process_addBuddyMembers;
    Hashtbl.add processMap "blockBuddyMember" self#process_blockBuddyMember;
    Hashtbl.add processMap "commitSendMessagesToAll" self#process_commitSendMessagesToAll;
    Hashtbl.add processMap "commitSendMessagesToMids" self#process_commitSendMessagesToMids;
    Hashtbl.add processMap "containsBuddyMember" self#process_containsBuddyMember;
    Hashtbl.add processMap "downloadMessageContent" self#process_downloadMessageContent;
    Hashtbl.add processMap "downloadMessageContentPreview" self#process_downloadMessageContentPreview;
    Hashtbl.add processMap "downloadProfileImage" self#process_downloadProfileImage;
    Hashtbl.add processMap "downloadProfileImagePreview" self#process_downloadProfileImagePreview;
    Hashtbl.add processMap "getActiveMemberCountByBuddyMid" self#process_getActiveMemberCountByBuddyMid;
    Hashtbl.add processMap "getActiveMemberMidsByBuddyMid" self#process_getActiveMemberMidsByBuddyMid;
    Hashtbl.add processMap "getAllBuddyMembers" self#process_getAllBuddyMembers;
    Hashtbl.add processMap "getBlockedBuddyMembers" self#process_getBlockedBuddyMembers;
    Hashtbl.add processMap "getBlockerCountByBuddyMid" self#process_getBlockerCountByBuddyMid;
    Hashtbl.add processMap "getBuddyDetailByMid" self#process_getBuddyDetailByMid;
    Hashtbl.add processMap "getBuddyProfile" self#process_getBuddyProfile;
    Hashtbl.add processMap "getContactTicket" self#process_getContactTicket;
    Hashtbl.add processMap "getMemberCountByBuddyMid" self#process_getMemberCountByBuddyMid;
    Hashtbl.add processMap "getSendBuddyMessageResult" self#process_getSendBuddyMessageResult;
    Hashtbl.add processMap "getSetBuddyOnAirResult" self#process_getSetBuddyOnAirResult;
    Hashtbl.add processMap "getUpdateBuddyProfileResult" self#process_getUpdateBuddyProfileResult;
    Hashtbl.add processMap "isBuddyOnAirByMid" self#process_isBuddyOnAirByMid;
    Hashtbl.add processMap "linkAndSendBuddyContentMessageToAllAsync" self#process_linkAndSendBuddyContentMessageToAllAsync;
    Hashtbl.add processMap "linkAndSendBuddyContentMessageToMids" self#process_linkAndSendBuddyContentMessageToMids;
    Hashtbl.add processMap "notifyBuddyBlocked" self#process_notifyBuddyBlocked;
    Hashtbl.add processMap "notifyBuddyUnblocked" self#process_notifyBuddyUnblocked;
    Hashtbl.add processMap "registerBuddy" self#process_registerBuddy;
    Hashtbl.add processMap "registerBuddyAdmin" self#process_registerBuddyAdmin;
    Hashtbl.add processMap "reissueContactTicket" self#process_reissueContactTicket;
    Hashtbl.add processMap "removeBuddyMember" self#process_removeBuddyMember;
    Hashtbl.add processMap "removeBuddyMembers" self#process_removeBuddyMembers;
    Hashtbl.add processMap "sendBuddyContentMessageToAll" self#process_sendBuddyContentMessageToAll;
    Hashtbl.add processMap "sendBuddyContentMessageToAllAsync" self#process_sendBuddyContentMessageToAllAsync;
    Hashtbl.add processMap "sendBuddyContentMessageToMids" self#process_sendBuddyContentMessageToMids;
    Hashtbl.add processMap "sendBuddyContentMessageToMidsAsync" self#process_sendBuddyContentMessageToMidsAsync;
    Hashtbl.add processMap "sendBuddyMessageToAll" self#process_sendBuddyMessageToAll;
    Hashtbl.add processMap "sendBuddyMessageToAllAsync" self#process_sendBuddyMessageToAllAsync;
    Hashtbl.add processMap "sendBuddyMessageToMids" self#process_sendBuddyMessageToMids;
    Hashtbl.add processMap "sendBuddyMessageToMidsAsync" self#process_sendBuddyMessageToMidsAsync;
    Hashtbl.add processMap "sendIndividualEventToAllAsync" self#process_sendIndividualEventToAllAsync;
    Hashtbl.add processMap "setBuddyOnAir" self#process_setBuddyOnAir;
    Hashtbl.add processMap "setBuddyOnAirAsync" self#process_setBuddyOnAirAsync;
    Hashtbl.add processMap "storeMessage" self#process_storeMessage;
    Hashtbl.add processMap "unblockBuddyMember" self#process_unblockBuddyMember;
    Hashtbl.add processMap "unregisterBuddy" self#process_unregisterBuddy;
    Hashtbl.add processMap "unregisterBuddyAdmin" self#process_unregisterBuddyAdmin;
    Hashtbl.add processMap "updateBuddyAdminProfileAttribute" self#process_updateBuddyAdminProfileAttribute;
    Hashtbl.add processMap "updateBuddyAdminProfileImage" self#process_updateBuddyAdminProfileImage;
    Hashtbl.add processMap "updateBuddyProfileAttributes" self#process_updateBuddyProfileAttributes;
    Hashtbl.add processMap "updateBuddyProfileAttributesAsync" self#process_updateBuddyProfileAttributesAsync;
    Hashtbl.add processMap "updateBuddyProfileImage" self#process_updateBuddyProfileImage;
    Hashtbl.add processMap "updateBuddyProfileImageAsync" self#process_updateBuddyProfileImageAsync;
    Hashtbl.add processMap "updateBuddySearchId" self#process_updateBuddySearchId;
    Hashtbl.add processMap "updateBuddySettings" self#process_updateBuddySettings;
    Hashtbl.add processMap "uploadBuddyContent" self#process_uploadBuddyContent;
end

