(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class getUserStatus_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "getUserStatus_args.mid") | Some _x11031 -> _x11031
  method set_mid _x11031 = _mid <- Some _x11031
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserStatus_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserStatus_args (iprot : Protocol.t) =
  let _str11034 = new getUserStatus_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11035,_id11036) = iprot#readFieldBegin in
        if _t11035 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11036 with 
          | 1 -> (if _t11035 = Protocol.T_STRING then
              _str11034#set_mid iprot#readString
            else
              iprot#skip _t11035)
          | _ -> iprot#skip _t11035);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11034

class getUserStatus_result =
object (self)
  val mutable _success : UserStatus.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserStatus_result.success") | Some _x11037 -> _x11037
  method set_success _x11037 = _success <- Some _x11037
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserStatus_result.e") | Some _x11038 -> _x11038
  method set_e _x11038 = _e <- Some _x11038
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserStatus_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I32,0);
      oprot#writeI32(UserStatus.to_i _v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserStatus_result (iprot : Protocol.t) =
  let _str11041 = new getUserStatus_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11042,_id11043) = iprot#readFieldBegin in
        if _t11042 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11043 with 
          | 0 -> (if _t11042 = Protocol.T_I32 then
              _str11041#set_success (UserStatus.of_i iprot#readI32)
            else
              iprot#skip _t11042)
          | 1 -> (if _t11042 = Protocol.T_STRUCT then
              _str11041#set_e (read_talkException iprot)
            else
              iprot#skip _t11042)
          | _ -> iprot#skip _t11042);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11041

class updateProfileAttributeForChannel_args =
object (self)
  val mutable _profileAttribute : ProfileAttribute.t option = None
  method get_profileAttribute = _profileAttribute
  method grab_profileAttribute = match _profileAttribute with None->raise (Field_empty "updateProfileAttributeForChannel_args.profileAttribute") | Some _x11044 -> _x11044
  method set_profileAttribute _x11044 = _profileAttribute <- Some _x11044
  method unset_profileAttribute = _profileAttribute <- None
  method reset_profileAttribute = _profileAttribute <- None

  val mutable _value : string option = None
  method get_value = _value
  method grab_value = match _value with None->raise (Field_empty "updateProfileAttributeForChannel_args.value") | Some _x11045 -> _x11045
  method set_value _x11045 = _value <- Some _x11045
  method unset_value = _value <- None
  method reset_value = _value <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateProfileAttributeForChannel_args";
    (match _profileAttribute with None -> () | Some _v -> 
      oprot#writeFieldBegin("profileAttribute",Protocol.T_I32,2);
      oprot#writeI32(ProfileAttribute.to_i _v);
      oprot#writeFieldEnd
    );
    (match _value with None -> () | Some _v -> 
      oprot#writeFieldBegin("value",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateProfileAttributeForChannel_args (iprot : Protocol.t) =
  let _str11048 = new updateProfileAttributeForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11049,_id11050) = iprot#readFieldBegin in
        if _t11049 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11050 with 
          | 2 -> (if _t11049 = Protocol.T_I32 then
              _str11048#set_profileAttribute (ProfileAttribute.of_i iprot#readI32)
            else
              iprot#skip _t11049)
          | 3 -> (if _t11049 = Protocol.T_STRING then
              _str11048#set_value iprot#readString
            else
              iprot#skip _t11049)
          | _ -> iprot#skip _t11049);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11048

class updateProfileAttributeForChannel_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateProfileAttributeForChannel_result.e") | Some _x11051 -> _x11051
  method set_e _x11051 = _e <- Some _x11051
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateProfileAttributeForChannel_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateProfileAttributeForChannel_result (iprot : Protocol.t) =
  let _str11054 = new updateProfileAttributeForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11055,_id11056) = iprot#readFieldBegin in
        if _t11055 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11056 with 
          | 1 -> (if _t11055 = Protocol.T_STRUCT then
              _str11054#set_e (read_talkException iprot)
            else
              iprot#skip _t11055)
          | _ -> iprot#skip _t11055);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11054

class updateExtendedProfileAttribute_args =
object (self)
  val mutable _attr : ExtendedProfileAttribute.t option = None
  method get_attr = _attr
  method grab_attr = match _attr with None->raise (Field_empty "updateExtendedProfileAttribute_args.attr") | Some _x11057 -> _x11057
  method set_attr _x11057 = _attr <- Some _x11057
  method unset_attr = _attr <- None
  method reset_attr = _attr <- None

  val mutable _extendedProfile : extendedProfile option = None
  method get_extendedProfile = _extendedProfile
  method grab_extendedProfile = match _extendedProfile with None->raise (Field_empty "updateExtendedProfileAttribute_args.extendedProfile") | Some _x11058 -> _x11058
  method set_extendedProfile _x11058 = _extendedProfile <- Some _x11058
  method unset_extendedProfile = _extendedProfile <- None
  method reset_extendedProfile = _extendedProfile <- None

  method copy =
      let _new = Oo.copy self in
      if _extendedProfile <> None then
        _new#set_extendedProfile self#grab_extendedProfile#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateExtendedProfileAttribute_args";
    (match _attr with None -> () | Some _v -> 
      oprot#writeFieldBegin("attr",Protocol.T_I32,1);
      oprot#writeI32(ExtendedProfileAttribute.to_i _v);
      oprot#writeFieldEnd
    );
    (match _extendedProfile with None -> () | Some _v -> 
      oprot#writeFieldBegin("extendedProfile",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateExtendedProfileAttribute_args (iprot : Protocol.t) =
  let _str11061 = new updateExtendedProfileAttribute_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11062,_id11063) = iprot#readFieldBegin in
        if _t11062 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11063 with 
          | 1 -> (if _t11062 = Protocol.T_I32 then
              _str11061#set_attr (ExtendedProfileAttribute.of_i iprot#readI32)
            else
              iprot#skip _t11062)
          | 2 -> (if _t11062 = Protocol.T_STRUCT then
              _str11061#set_extendedProfile (read_extendedProfile iprot)
            else
              iprot#skip _t11062)
          | _ -> iprot#skip _t11062);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11061

class updateExtendedProfileAttribute_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateExtendedProfileAttribute_result.e") | Some _x11064 -> _x11064
  method set_e _x11064 = _e <- Some _x11064
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateExtendedProfileAttribute_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateExtendedProfileAttribute_result (iprot : Protocol.t) =
  let _str11067 = new updateExtendedProfileAttribute_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11068,_id11069) = iprot#readFieldBegin in
        if _t11068 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11069 with 
          | 1 -> (if _t11068 = Protocol.T_STRUCT then
              _str11067#set_e (read_talkException iprot)
            else
              iprot#skip _t11068)
          | _ -> iprot#skip _t11068);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11067

class getAllSimpleChannelContacts_args =
object (self)
  val mutable _statusSticonFallbackDisabled : bool option = None
  method get_statusSticonFallbackDisabled = _statusSticonFallbackDisabled
  method grab_statusSticonFallbackDisabled = match _statusSticonFallbackDisabled with None->raise (Field_empty "getAllSimpleChannelContacts_args.statusSticonFallbackDisabled") | Some _x11070 -> _x11070
  method set_statusSticonFallbackDisabled _x11070 = _statusSticonFallbackDisabled <- Some _x11070
  method unset_statusSticonFallbackDisabled = _statusSticonFallbackDisabled <- None
  method reset_statusSticonFallbackDisabled = _statusSticonFallbackDisabled <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllSimpleChannelContacts_args";
    (match _statusSticonFallbackDisabled with None -> () | Some _v -> 
      oprot#writeFieldBegin("statusSticonFallbackDisabled",Protocol.T_BOOL,1);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllSimpleChannelContacts_args (iprot : Protocol.t) =
  let _str11073 = new getAllSimpleChannelContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11074,_id11075) = iprot#readFieldBegin in
        if _t11074 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11075 with 
          | 1 -> (if _t11074 = Protocol.T_BOOL then
              _str11073#set_statusSticonFallbackDisabled iprot#readBool
            else
              iprot#skip _t11074)
          | _ -> iprot#skip _t11074);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11073

class getAllSimpleChannelContacts_result =
object (self)
  val mutable _success : simpleChannelContact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getAllSimpleChannelContacts_result.success") | Some _x11076 -> _x11076
  method set_success _x11076 = _success <- Some _x11076
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getAllSimpleChannelContacts_result.e") | Some _x11077 -> _x11077
  method set_e _x11077 = _e <- Some _x11077
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllSimpleChannelContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter11080 ->         _iter11080#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllSimpleChannelContacts_result (iprot : Protocol.t) =
  let _str11081 = new getAllSimpleChannelContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11082,_id11083) = iprot#readFieldBegin in
        if _t11082 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11083 with 
          | 0 -> (if _t11082 = Protocol.T_LIST then
              _str11081#set_success 
                (let (_etype11087,_size11084) = iprot#readListBegin in
                  let _con11088 = (Array.to_list (Array.init _size11084 (fun _ -> (read_simpleChannelContact iprot)))) in
                    iprot#readListEnd; _con11088)
            else
              iprot#skip _t11082)
          | 1 -> (if _t11082 = Protocol.T_STRUCT then
              _str11081#set_e (read_talkException iprot)
            else
              iprot#skip _t11082)
          | _ -> iprot#skip _t11082);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11081

class getUserIdentities_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserIdentities_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserIdentities_args (iprot : Protocol.t) =
  let _str11091 = new getUserIdentities_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11092,_id11093) = iprot#readFieldBegin in
        if _t11092 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11093 with 
          | _ -> iprot#skip _t11092);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11091

class getUserIdentities_result =
object (self)
  val mutable _success : (RegistrationType.t,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserIdentities_result.success") | Some _x11094 -> _x11094
  method set_success _x11094 = _success <- Some _x11094
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserIdentities_result.e") | Some _x11095 -> _x11095
  method set_e _x11095 = _e <- Some _x11095
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserIdentities_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_I32,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter11098 -> fun _viter11099 -> 
        oprot#writeI32(RegistrationType.to_i _kiter11098);
        oprot#writeString(_viter11099);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserIdentities_result (iprot : Protocol.t) =
  let _str11100 = new getUserIdentities_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11101,_id11102) = iprot#readFieldBegin in
        if _t11101 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11102 with 
          | 0 -> (if _t11101 = Protocol.T_MAP then
              _str11100#set_success 
                (let (_ktype11104,_vtype11105,_size11103) = iprot#readMapBegin in
                let _con11107 = Hashtbl.create _size11103 in
                  for i = 1 to _size11103 do
                    let _k = (RegistrationType.of_i iprot#readI32) in
                    let _v = iprot#readString in
                      Hashtbl.add _con11107 _k _v
                  done; iprot#readMapEnd; _con11107)
            else
              iprot#skip _t11101)
          | 1 -> (if _t11101 = Protocol.T_STRUCT then
              _str11100#set_e (read_talkException iprot)
            else
              iprot#skip _t11101)
          | _ -> iprot#skip _t11101);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11100

class markPaidCallAd_args =
object (self)
  val mutable _dialedNumber : string option = None
  method get_dialedNumber = _dialedNumber
  method grab_dialedNumber = match _dialedNumber with None->raise (Field_empty "markPaidCallAd_args.dialedNumber") | Some _x11108 -> _x11108
  method set_dialedNumber _x11108 = _dialedNumber <- Some _x11108
  method unset_dialedNumber = _dialedNumber <- None
  method reset_dialedNumber = _dialedNumber <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "markPaidCallAd_args.language") | Some _x11109 -> _x11109
  method set_language _x11109 = _language <- Some _x11109
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _disableCallerId : bool option = None
  method get_disableCallerId = _disableCallerId
  method grab_disableCallerId = match _disableCallerId with None->raise (Field_empty "markPaidCallAd_args.disableCallerId") | Some _x11110 -> _x11110
  method set_disableCallerId _x11110 = _disableCallerId <- Some _x11110
  method unset_disableCallerId = _disableCallerId <- None
  method reset_disableCallerId = _disableCallerId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "markPaidCallAd_args";
    (match _dialedNumber with None -> () | Some _v -> 
      oprot#writeFieldBegin("dialedNumber",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _disableCallerId with None -> () | Some _v -> 
      oprot#writeFieldBegin("disableCallerId",Protocol.T_BOOL,4);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_markPaidCallAd_args (iprot : Protocol.t) =
  let _str11113 = new markPaidCallAd_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11114,_id11115) = iprot#readFieldBegin in
        if _t11114 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11115 with 
          | 2 -> (if _t11114 = Protocol.T_STRING then
              _str11113#set_dialedNumber iprot#readString
            else
              iprot#skip _t11114)
          | 3 -> (if _t11114 = Protocol.T_STRING then
              _str11113#set_language iprot#readString
            else
              iprot#skip _t11114)
          | 4 -> (if _t11114 = Protocol.T_BOOL then
              _str11113#set_disableCallerId iprot#readBool
            else
              iprot#skip _t11114)
          | _ -> iprot#skip _t11114);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11113

class markPaidCallAd_result =
object (self)
  val mutable _success : paidCallDialing option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "markPaidCallAd_result.success") | Some _x11116 -> _x11116
  method set_success _x11116 = _success <- Some _x11116
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "markPaidCallAd_result.e") | Some _x11117 -> _x11117
  method set_e _x11117 = _e <- Some _x11117
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "markPaidCallAd_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_markPaidCallAd_result (iprot : Protocol.t) =
  let _str11120 = new markPaidCallAd_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11121,_id11122) = iprot#readFieldBegin in
        if _t11121 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11122 with 
          | 0 -> (if _t11121 = Protocol.T_STRUCT then
              _str11120#set_success (read_paidCallDialing iprot)
            else
              iprot#skip _t11121)
          | 1 -> (if _t11121 = Protocol.T_STRUCT then
              _str11120#set_e (read_talkException iprot)
            else
              iprot#skip _t11121)
          | _ -> iprot#skip _t11121);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11120

class isGroupMember_args =
object (self)
  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "isGroupMember_args.groupId") | Some _x11123 -> _x11123
  method set_groupId _x11123 = _groupId <- Some _x11123
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isGroupMember_args";
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isGroupMember_args (iprot : Protocol.t) =
  let _str11126 = new isGroupMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11127,_id11128) = iprot#readFieldBegin in
        if _t11127 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11128 with 
          | 1 -> (if _t11127 = Protocol.T_STRING then
              _str11126#set_groupId iprot#readString
            else
              iprot#skip _t11127)
          | _ -> iprot#skip _t11127);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11126

class isGroupMember_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "isGroupMember_result.success") | Some _x11129 -> _x11129
  method set_success _x11129 = _success <- Some _x11129
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "isGroupMember_result.e") | Some _x11130 -> _x11130
  method set_e _x11130 = _e <- Some _x11130
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isGroupMember_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isGroupMember_result (iprot : Protocol.t) =
  let _str11133 = new isGroupMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11134,_id11135) = iprot#readFieldBegin in
        if _t11134 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11135 with 
          | 0 -> (if _t11134 = Protocol.T_BOOL then
              _str11133#set_success iprot#readBool
            else
              iprot#skip _t11134)
          | 1 -> (if _t11134 = Protocol.T_STRUCT then
              _str11133#set_e (read_talkException iprot)
            else
              iprot#skip _t11134)
          | _ -> iprot#skip _t11134);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11133

class getPhoneInfoFromPhoneNumber_args =
object (self)
  val mutable _region : string option = None
  method get_region = _region
  method grab_region = match _region with None->raise (Field_empty "getPhoneInfoFromPhoneNumber_args.region") | Some _x11136 -> _x11136
  method set_region _x11136 = _region <- Some _x11136
  method unset_region = _region <- None
  method reset_region = _region <- None

  val mutable _phoneNumber : string option = None
  method get_phoneNumber = _phoneNumber
  method grab_phoneNumber = match _phoneNumber with None->raise (Field_empty "getPhoneInfoFromPhoneNumber_args.phoneNumber") | Some _x11137 -> _x11137
  method set_phoneNumber _x11137 = _phoneNumber <- Some _x11137
  method unset_phoneNumber = _phoneNumber <- None
  method reset_phoneNumber = _phoneNumber <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPhoneInfoFromPhoneNumber_args";
    (match _region with None -> () | Some _v -> 
      oprot#writeFieldBegin("region",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _phoneNumber with None -> () | Some _v -> 
      oprot#writeFieldBegin("phoneNumber",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPhoneInfoFromPhoneNumber_args (iprot : Protocol.t) =
  let _str11140 = new getPhoneInfoFromPhoneNumber_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11141,_id11142) = iprot#readFieldBegin in
        if _t11141 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11142 with 
          | 1 -> (if _t11141 = Protocol.T_STRING then
              _str11140#set_region iprot#readString
            else
              iprot#skip _t11141)
          | 2 -> (if _t11141 = Protocol.T_STRING then
              _str11140#set_phoneNumber iprot#readString
            else
              iprot#skip _t11141)
          | _ -> iprot#skip _t11141);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11140

class getPhoneInfoFromPhoneNumber_result =
object (self)
  val mutable _success : phoneInfoForChannel option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPhoneInfoFromPhoneNumber_result.success") | Some _x11143 -> _x11143
  method set_success _x11143 = _success <- Some _x11143
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPhoneInfoFromPhoneNumber_result.e") | Some _x11144 -> _x11144
  method set_e _x11144 = _e <- Some _x11144
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPhoneInfoFromPhoneNumber_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPhoneInfoFromPhoneNumber_result (iprot : Protocol.t) =
  let _str11147 = new getPhoneInfoFromPhoneNumber_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11148,_id11149) = iprot#readFieldBegin in
        if _t11148 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11149 with 
          | 0 -> (if _t11148 = Protocol.T_STRUCT then
              _str11147#set_success (read_phoneInfoForChannel iprot)
            else
              iprot#skip _t11148)
          | 1 -> (if _t11148 = Protocol.T_STRUCT then
              _str11147#set_e (read_talkException iprot)
            else
              iprot#skip _t11148)
          | _ -> iprot#skip _t11148);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11147

class redeemPaidCallVoucher_args =
object (self)
  val mutable _serial : string option = None
  method get_serial = _serial
  method grab_serial = match _serial with None->raise (Field_empty "redeemPaidCallVoucher_args.serial") | Some _x11150 -> _x11150
  method set_serial _x11150 = _serial <- Some _x11150
  method unset_serial = _serial <- None
  method reset_serial = _serial <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "redeemPaidCallVoucher_args.language") | Some _x11151 -> _x11151
  method set_language _x11151 = _language <- Some _x11151
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "redeemPaidCallVoucher_args";
    (match _serial with None -> () | Some _v -> 
      oprot#writeFieldBegin("serial",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_redeemPaidCallVoucher_args (iprot : Protocol.t) =
  let _str11154 = new redeemPaidCallVoucher_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11155,_id11156) = iprot#readFieldBegin in
        if _t11155 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11156 with 
          | 2 -> (if _t11155 = Protocol.T_STRING then
              _str11154#set_serial iprot#readString
            else
              iprot#skip _t11155)
          | 3 -> (if _t11155 = Protocol.T_STRING then
              _str11154#set_language iprot#readString
            else
              iprot#skip _t11155)
          | _ -> iprot#skip _t11155);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11154

class redeemPaidCallVoucher_result =
object (self)
  val mutable _success : paidCallRedeemResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "redeemPaidCallVoucher_result.success") | Some _x11157 -> _x11157
  method set_success _x11157 = _success <- Some _x11157
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "redeemPaidCallVoucher_result.e") | Some _x11158 -> _x11158
  method set_e _x11158 = _e <- Some _x11158
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "redeemPaidCallVoucher_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_redeemPaidCallVoucher_result (iprot : Protocol.t) =
  let _str11161 = new redeemPaidCallVoucher_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11162,_id11163) = iprot#readFieldBegin in
        if _t11162 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11163 with 
          | 0 -> (if _t11162 = Protocol.T_STRUCT then
              _str11161#set_success (read_paidCallRedeemResult iprot)
            else
              iprot#skip _t11162)
          | 1 -> (if _t11162 = Protocol.T_STRUCT then
              _str11161#set_e (read_talkException iprot)
            else
              iprot#skip _t11162)
          | _ -> iprot#skip _t11162);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11161

class getPreferredDisplayName_args =
object (self)
  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "getPreferredDisplayName_args.mids") | Some _x11164 -> _x11164
  method set_mids _x11164 = _mids <- Some _x11164
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPreferredDisplayName_args";
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11167 ->         oprot#writeString(_iter11167);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPreferredDisplayName_args (iprot : Protocol.t) =
  let _str11168 = new getPreferredDisplayName_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11169,_id11170) = iprot#readFieldBegin in
        if _t11169 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11170 with 
          | 1 -> (if _t11169 = Protocol.T_LIST then
              _str11168#set_mids 
                (let (_etype11174,_size11171) = iprot#readListBegin in
                  let _con11175 = (Array.to_list (Array.init _size11171 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11175)
            else
              iprot#skip _t11169)
          | _ -> iprot#skip _t11169);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11168

class getPreferredDisplayName_result =
object (self)
  val mutable _success : (string,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPreferredDisplayName_result.success") | Some _x11176 -> _x11176
  method set_success _x11176 = _success <- Some _x11176
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPreferredDisplayName_result.e") | Some _x11177 -> _x11177
  method set_e _x11177 = _e <- Some _x11177
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPreferredDisplayName_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter11180 -> fun _viter11181 -> 
        oprot#writeString(_kiter11180);
        oprot#writeString(_viter11181);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPreferredDisplayName_result (iprot : Protocol.t) =
  let _str11182 = new getPreferredDisplayName_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11183,_id11184) = iprot#readFieldBegin in
        if _t11183 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11184 with 
          | 0 -> (if _t11183 = Protocol.T_MAP then
              _str11182#set_success 
                (let (_ktype11186,_vtype11187,_size11185) = iprot#readMapBegin in
                let _con11189 = Hashtbl.create _size11185 in
                  for i = 1 to _size11185 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con11189 _k _v
                  done; iprot#readMapEnd; _con11189)
            else
              iprot#skip _t11183)
          | 1 -> (if _t11183 = Protocol.T_STRUCT then
              _str11182#set_e (read_talkException iprot)
            else
              iprot#skip _t11183)
          | _ -> iprot#skip _t11183);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11182

class getContactsForChannel_args =
object (self)
  val mutable _ids : string list option = None
  method get_ids = _ids
  method grab_ids = match _ids with None->raise (Field_empty "getContactsForChannel_args.ids") | Some _x11190 -> _x11190
  method set_ids _x11190 = _ids <- Some _x11190
  method unset_ids = _ids <- None
  method reset_ids = _ids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContactsForChannel_args";
    (match _ids with None -> () | Some _v -> 
      oprot#writeFieldBegin("ids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11193 ->         oprot#writeString(_iter11193);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContactsForChannel_args (iprot : Protocol.t) =
  let _str11194 = new getContactsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11195,_id11196) = iprot#readFieldBegin in
        if _t11195 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11196 with 
          | 2 -> (if _t11195 = Protocol.T_LIST then
              _str11194#set_ids 
                (let (_etype11200,_size11197) = iprot#readListBegin in
                  let _con11201 = (Array.to_list (Array.init _size11197 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11201)
            else
              iprot#skip _t11195)
          | _ -> iprot#skip _t11195);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11194

class getContactsForChannel_result =
object (self)
  val mutable _success : contact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getContactsForChannel_result.success") | Some _x11202 -> _x11202
  method set_success _x11202 = _success <- Some _x11202
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getContactsForChannel_result.e") | Some _x11203 -> _x11203
  method set_e _x11203 = _e <- Some _x11203
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContactsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter11206 ->         _iter11206#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContactsForChannel_result (iprot : Protocol.t) =
  let _str11207 = new getContactsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11208,_id11209) = iprot#readFieldBegin in
        if _t11208 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11209 with 
          | 0 -> (if _t11208 = Protocol.T_LIST then
              _str11207#set_success 
                (let (_etype11213,_size11210) = iprot#readListBegin in
                  let _con11214 = (Array.to_list (Array.init _size11210 (fun _ -> (read_contact iprot)))) in
                    iprot#readListEnd; _con11214)
            else
              iprot#skip _t11208)
          | 1 -> (if _t11208 = Protocol.T_STRUCT then
              _str11207#set_e (read_talkException iprot)
            else
              iprot#skip _t11208)
          | _ -> iprot#skip _t11208);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11207

class getCallCreditProducts_args =
object (self)
  val mutable _appStoreCode : PaymentType.t option = None
  method get_appStoreCode = _appStoreCode
  method grab_appStoreCode = match _appStoreCode with None->raise (Field_empty "getCallCreditProducts_args.appStoreCode") | Some _x11215 -> _x11215
  method set_appStoreCode _x11215 = _appStoreCode <- Some _x11215
  method unset_appStoreCode = _appStoreCode <- None
  method reset_appStoreCode = _appStoreCode <- None

  val mutable _pgCode : PaymentPgType.t option = None
  method get_pgCode = _pgCode
  method grab_pgCode = match _pgCode with None->raise (Field_empty "getCallCreditProducts_args.pgCode") | Some _x11216 -> _x11216
  method set_pgCode _x11216 = _pgCode <- Some _x11216
  method unset_pgCode = _pgCode <- None
  method reset_pgCode = _pgCode <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getCallCreditProducts_args.country") | Some _x11217 -> _x11217
  method set_country _x11217 = _country <- Some _x11217
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getCallCreditProducts_args.language") | Some _x11218 -> _x11218
  method set_language _x11218 = _language <- Some _x11218
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCallCreditProducts_args";
    (match _appStoreCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("appStoreCode",Protocol.T_I32,2);
      oprot#writeI32(PaymentType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _pgCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("pgCode",Protocol.T_I32,3);
      oprot#writeI32(PaymentPgType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCallCreditProducts_args (iprot : Protocol.t) =
  let _str11221 = new getCallCreditProducts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11222,_id11223) = iprot#readFieldBegin in
        if _t11222 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11223 with 
          | 2 -> (if _t11222 = Protocol.T_I32 then
              _str11221#set_appStoreCode (PaymentType.of_i iprot#readI32)
            else
              iprot#skip _t11222)
          | 3 -> (if _t11222 = Protocol.T_I32 then
              _str11221#set_pgCode (PaymentPgType.of_i iprot#readI32)
            else
              iprot#skip _t11222)
          | 4 -> (if _t11222 = Protocol.T_STRING then
              _str11221#set_country iprot#readString
            else
              iprot#skip _t11222)
          | 5 -> (if _t11222 = Protocol.T_STRING then
              _str11221#set_language iprot#readString
            else
              iprot#skip _t11222)
          | _ -> iprot#skip _t11222);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11221

class getCallCreditProducts_result =
object (self)
  val mutable _success : coinProductItem list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCallCreditProducts_result.success") | Some _x11224 -> _x11224
  method set_success _x11224 = _success <- Some _x11224
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCallCreditProducts_result.e") | Some _x11225 -> _x11225
  method set_e _x11225 = _e <- Some _x11225
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCallCreditProducts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter11228 ->         _iter11228#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCallCreditProducts_result (iprot : Protocol.t) =
  let _str11229 = new getCallCreditProducts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11230,_id11231) = iprot#readFieldBegin in
        if _t11230 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11231 with 
          | 0 -> (if _t11230 = Protocol.T_LIST then
              _str11229#set_success 
                (let (_etype11235,_size11232) = iprot#readListBegin in
                  let _con11236 = (Array.to_list (Array.init _size11232 (fun _ -> (read_coinProductItem iprot)))) in
                    iprot#readListEnd; _con11236)
            else
              iprot#skip _t11230)
          | 1 -> (if _t11230 = Protocol.T_STRUCT then
              _str11229#set_e (read_talkException iprot)
            else
              iprot#skip _t11230)
          | _ -> iprot#skip _t11230);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11229

class getCompactContacts_args =
object (self)
  val mutable _lastModifiedTimestamp : Int64.t option = None
  method get_lastModifiedTimestamp = _lastModifiedTimestamp
  method grab_lastModifiedTimestamp = match _lastModifiedTimestamp with None->raise (Field_empty "getCompactContacts_args.lastModifiedTimestamp") | Some _x11237 -> _x11237
  method set_lastModifiedTimestamp _x11237 = _lastModifiedTimestamp <- Some _x11237
  method unset_lastModifiedTimestamp = _lastModifiedTimestamp <- None
  method reset_lastModifiedTimestamp = _lastModifiedTimestamp <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactContacts_args";
    (match _lastModifiedTimestamp with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastModifiedTimestamp",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactContacts_args (iprot : Protocol.t) =
  let _str11240 = new getCompactContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11241,_id11242) = iprot#readFieldBegin in
        if _t11241 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11242 with 
          | 2 -> (if _t11241 = Protocol.T_I64 then
              _str11240#set_lastModifiedTimestamp iprot#readI64
            else
              iprot#skip _t11241)
          | _ -> iprot#skip _t11241);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11240

class getCompactContacts_result =
object (self)
  val mutable _success : compactContact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCompactContacts_result.success") | Some _x11243 -> _x11243
  method set_success _x11243 = _success <- Some _x11243
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCompactContacts_result.e") | Some _x11244 -> _x11244
  method set_e _x11244 = _e <- Some _x11244
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter11247 ->         _iter11247#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactContacts_result (iprot : Protocol.t) =
  let _str11248 = new getCompactContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11249,_id11250) = iprot#readFieldBegin in
        if _t11249 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11250 with 
          | 0 -> (if _t11249 = Protocol.T_LIST then
              _str11248#set_success 
                (let (_etype11254,_size11251) = iprot#readListBegin in
                  let _con11255 = (Array.to_list (Array.init _size11251 (fun _ -> (read_compactContact iprot)))) in
                    iprot#readListEnd; _con11255)
            else
              iprot#skip _t11249)
          | 1 -> (if _t11249 = Protocol.T_STRUCT then
              _str11248#set_e (read_talkException iprot)
            else
              iprot#skip _t11249)
          | _ -> iprot#skip _t11249);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11248

class notifyNotiCenterEvent_args =
object (self)
  val mutable _event : notiCenterEventData option = None
  method get_event = _event
  method grab_event = match _event with None->raise (Field_empty "notifyNotiCenterEvent_args.event") | Some _x11256 -> _x11256
  method set_event _x11256 = _event <- Some _x11256
  method unset_event = _event <- None
  method reset_event = _event <- None

  method copy =
      let _new = Oo.copy self in
      if _event <> None then
        _new#set_event self#grab_event#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyNotiCenterEvent_args";
    (match _event with None -> () | Some _v -> 
      oprot#writeFieldBegin("event",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyNotiCenterEvent_args (iprot : Protocol.t) =
  let _str11259 = new notifyNotiCenterEvent_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11260,_id11261) = iprot#readFieldBegin in
        if _t11260 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11261 with 
          | 1 -> (if _t11260 = Protocol.T_STRUCT then
              _str11259#set_event (read_notiCenterEventData iprot)
            else
              iprot#skip _t11260)
          | _ -> iprot#skip _t11260);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11259

class notifyNotiCenterEvent_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyNotiCenterEvent_result.e") | Some _x11262 -> _x11262
  method set_e _x11262 = _e <- Some _x11262
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyNotiCenterEvent_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyNotiCenterEvent_result (iprot : Protocol.t) =
  let _str11265 = new notifyNotiCenterEvent_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11266,_id11267) = iprot#readFieldBegin in
        if _t11266 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11267 with 
          | 1 -> (if _t11266 = Protocol.T_STRUCT then
              _str11265#set_e (read_talkException iprot)
            else
              iprot#skip _t11266)
          | _ -> iprot#skip _t11266);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11265

class isInContact_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "isInContact_args.mid") | Some _x11268 -> _x11268
  method set_mid _x11268 = _mid <- Some _x11268
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isInContact_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isInContact_args (iprot : Protocol.t) =
  let _str11271 = new isInContact_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11272,_id11273) = iprot#readFieldBegin in
        if _t11272 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11273 with 
          | 2 -> (if _t11272 = Protocol.T_STRING then
              _str11271#set_mid iprot#readString
            else
              iprot#skip _t11272)
          | _ -> iprot#skip _t11272);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11271

class isInContact_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "isInContact_result.success") | Some _x11274 -> _x11274
  method set_success _x11274 = _success <- Some _x11274
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "isInContact_result.e") | Some _x11275 -> _x11275
  method set_e _x11275 = _e <- Some _x11275
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isInContact_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isInContact_result (iprot : Protocol.t) =
  let _str11278 = new isInContact_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11279,_id11280) = iprot#readFieldBegin in
        if _t11279 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11280 with 
          | 0 -> (if _t11279 = Protocol.T_BOOL then
              _str11278#set_success iprot#readBool
            else
              iprot#skip _t11279)
          | 1 -> (if _t11279 = Protocol.T_STRUCT then
              _str11278#set_e (read_talkException iprot)
            else
              iprot#skip _t11279)
          | _ -> iprot#skip _t11279);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11278

class lookupGroupMembers_args =
object (self)
  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "lookupGroupMembers_args.groupId") | Some _x11281 -> _x11281
  method set_groupId _x11281 = _groupId <- Some _x11281
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "lookupGroupMembers_args.mids") | Some _x11282 -> _x11282
  method set_mids _x11282 = _mids <- Some _x11282
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "lookupGroupMembers_args";
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11285 ->         oprot#writeString(_iter11285);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_lookupGroupMembers_args (iprot : Protocol.t) =
  let _str11286 = new lookupGroupMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11287,_id11288) = iprot#readFieldBegin in
        if _t11287 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11288 with 
          | 1 -> (if _t11287 = Protocol.T_STRING then
              _str11286#set_groupId iprot#readString
            else
              iprot#skip _t11287)
          | 2 -> (if _t11287 = Protocol.T_LIST then
              _str11286#set_mids 
                (let (_etype11292,_size11289) = iprot#readListBegin in
                  let _con11293 = (Array.to_list (Array.init _size11289 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11293)
            else
              iprot#skip _t11287)
          | _ -> iprot#skip _t11287);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11286

class lookupGroupMembers_result =
object (self)
  val mutable _success : simpleChannelContact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "lookupGroupMembers_result.success") | Some _x11294 -> _x11294
  method set_success _x11294 = _success <- Some _x11294
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "lookupGroupMembers_result.e") | Some _x11295 -> _x11295
  method set_e _x11295 = _e <- Some _x11295
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "lookupGroupMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter11298 ->         _iter11298#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_lookupGroupMembers_result (iprot : Protocol.t) =
  let _str11299 = new lookupGroupMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11300,_id11301) = iprot#readFieldBegin in
        if _t11300 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11301 with 
          | 0 -> (if _t11300 = Protocol.T_LIST then
              _str11299#set_success 
                (let (_etype11305,_size11302) = iprot#readListBegin in
                  let _con11306 = (Array.to_list (Array.init _size11302 (fun _ -> (read_simpleChannelContact iprot)))) in
                    iprot#readListEnd; _con11306)
            else
              iprot#skip _t11300)
          | 1 -> (if _t11300 = Protocol.T_STRUCT then
              _str11299#set_e (read_talkException iprot)
            else
              iprot#skip _t11300)
          | _ -> iprot#skip _t11300);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11299

class getRoomInformation_args =
object (self)
  val mutable _roomMid : string option = None
  method get_roomMid = _roomMid
  method grab_roomMid = match _roomMid with None->raise (Field_empty "getRoomInformation_args.roomMid") | Some _x11307 -> _x11307
  method set_roomMid _x11307 = _roomMid <- Some _x11307
  method unset_roomMid = _roomMid <- None
  method reset_roomMid = _roomMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRoomInformation_args";
    (match _roomMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("roomMid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRoomInformation_args (iprot : Protocol.t) =
  let _str11310 = new getRoomInformation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11311,_id11312) = iprot#readFieldBegin in
        if _t11311 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11312 with 
          | 1 -> (if _t11311 = Protocol.T_STRING then
              _str11310#set_roomMid iprot#readString
            else
              iprot#skip _t11311)
          | _ -> iprot#skip _t11311);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11310

class getRoomInformation_result =
object (self)
  val mutable _success : room option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getRoomInformation_result.success") | Some _x11313 -> _x11313
  method set_success _x11313 = _success <- Some _x11313
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getRoomInformation_result.e") | Some _x11314 -> _x11314
  method set_e _x11314 = _e <- Some _x11314
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRoomInformation_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRoomInformation_result (iprot : Protocol.t) =
  let _str11317 = new getRoomInformation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11318,_id11319) = iprot#readFieldBegin in
        if _t11318 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11319 with 
          | 0 -> (if _t11318 = Protocol.T_STRUCT then
              _str11317#set_success (read_room iprot)
            else
              iprot#skip _t11318)
          | 1 -> (if _t11318 = Protocol.T_STRUCT then
              _str11317#set_e (read_talkException iprot)
            else
              iprot#skip _t11318)
          | _ -> iprot#skip _t11318);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11317

class getGroupCall_args =
object (self)
  val mutable _chatMid : string option = None
  method get_chatMid = _chatMid
  method grab_chatMid = match _chatMid with None->raise (Field_empty "getGroupCall_args.chatMid") | Some _x11320 -> _x11320
  method set_chatMid _x11320 = _chatMid <- Some _x11320
  method unset_chatMid = _chatMid <- None
  method reset_chatMid = _chatMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupCall_args";
    (match _chatMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupCall_args (iprot : Protocol.t) =
  let _str11323 = new getGroupCall_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11324,_id11325) = iprot#readFieldBegin in
        if _t11324 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11325 with 
          | 2 -> (if _t11324 = Protocol.T_STRING then
              _str11323#set_chatMid iprot#readString
            else
              iprot#skip _t11324)
          | _ -> iprot#skip _t11324);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11323

class getGroupCall_result =
object (self)
  val mutable _success : groupCall option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupCall_result.success") | Some _x11326 -> _x11326
  method set_success _x11326 = _success <- Some _x11326
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupCall_result.e") | Some _x11327 -> _x11327
  method set_e _x11327 = _e <- Some _x11327
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupCall_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupCall_result (iprot : Protocol.t) =
  let _str11330 = new getGroupCall_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11331,_id11332) = iprot#readFieldBegin in
        if _t11331 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11332 with 
          | 0 -> (if _t11331 = Protocol.T_STRUCT then
              _str11330#set_success (read_groupCall iprot)
            else
              iprot#skip _t11331)
          | 1 -> (if _t11331 = Protocol.T_STRUCT then
              _str11330#set_e (read_talkException iprot)
            else
              iprot#skip _t11331)
          | _ -> iprot#skip _t11331);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11330

class isAllowSecondaryDeviceLogin_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isAllowSecondaryDeviceLogin_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isAllowSecondaryDeviceLogin_args (iprot : Protocol.t) =
  let _str11335 = new isAllowSecondaryDeviceLogin_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11336,_id11337) = iprot#readFieldBegin in
        if _t11336 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11337 with 
          | _ -> iprot#skip _t11336);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11335

class isAllowSecondaryDeviceLogin_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "isAllowSecondaryDeviceLogin_result.success") | Some _x11338 -> _x11338
  method set_success _x11338 = _success <- Some _x11338
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "isAllowSecondaryDeviceLogin_result.e") | Some _x11339 -> _x11339
  method set_e _x11339 = _e <- Some _x11339
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isAllowSecondaryDeviceLogin_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isAllowSecondaryDeviceLogin_result (iprot : Protocol.t) =
  let _str11342 = new isAllowSecondaryDeviceLogin_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11343,_id11344) = iprot#readFieldBegin in
        if _t11343 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11344 with 
          | 0 -> (if _t11343 = Protocol.T_BOOL then
              _str11342#set_success iprot#readBool
            else
              iprot#skip _t11343)
          | 1 -> (if _t11343 = Protocol.T_STRUCT then
              _str11342#set_e (read_talkException iprot)
            else
              iprot#skip _t11343)
          | _ -> iprot#skip _t11343);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11342

class getPrimaryClientForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPrimaryClientForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPrimaryClientForChannel_args (iprot : Protocol.t) =
  let _str11347 = new getPrimaryClientForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11348,_id11349) = iprot#readFieldBegin in
        if _t11348 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11349 with 
          | _ -> iprot#skip _t11348);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11347

class getPrimaryClientForChannel_result =
object (self)
  val mutable _success : simpleChannelClient option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPrimaryClientForChannel_result.success") | Some _x11350 -> _x11350
  method set_success _x11350 = _success <- Some _x11350
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPrimaryClientForChannel_result.e") | Some _x11351 -> _x11351
  method set_e _x11351 = _e <- Some _x11351
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPrimaryClientForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPrimaryClientForChannel_result (iprot : Protocol.t) =
  let _str11354 = new getPrimaryClientForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11355,_id11356) = iprot#readFieldBegin in
        if _t11355 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11356 with 
          | 0 -> (if _t11355 = Protocol.T_STRUCT then
              _str11354#set_success (read_simpleChannelClient iprot)
            else
              iprot#skip _t11355)
          | 1 -> (if _t11355 = Protocol.T_STRUCT then
              _str11354#set_e (read_talkException iprot)
            else
              iprot#skip _t11355)
          | _ -> iprot#skip _t11355);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11354

class createRoomWithBuddy_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "createRoomWithBuddy_args.reqSeq") | Some _x11357 -> _x11357
  method set_reqSeq _x11357 = _reqSeq <- Some _x11357
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "createRoomWithBuddy_args.buddyMid") | Some _x11358 -> _x11358
  method set_buddyMid _x11358 = _buddyMid <- Some _x11358
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  val mutable _contactIds : string list option = None
  method get_contactIds = _contactIds
  method grab_contactIds = match _contactIds with None->raise (Field_empty "createRoomWithBuddy_args.contactIds") | Some _x11359 -> _x11359
  method set_contactIds _x11359 = _contactIds <- Some _x11359
  method unset_contactIds = _contactIds <- None
  method reset_contactIds = _contactIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createRoomWithBuddy_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _contactIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactIds",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11362 ->         oprot#writeString(_iter11362);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createRoomWithBuddy_args (iprot : Protocol.t) =
  let _str11363 = new createRoomWithBuddy_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11364,_id11365) = iprot#readFieldBegin in
        if _t11364 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11365 with 
          | 1 -> (if _t11364 = Protocol.T_I32 then
              _str11363#set_reqSeq iprot#readI32
            else
              iprot#skip _t11364)
          | 2 -> (if _t11364 = Protocol.T_STRING then
              _str11363#set_buddyMid iprot#readString
            else
              iprot#skip _t11364)
          | 3 -> (if _t11364 = Protocol.T_LIST then
              _str11363#set_contactIds 
                (let (_etype11369,_size11366) = iprot#readListBegin in
                  let _con11370 = (Array.to_list (Array.init _size11366 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11370)
            else
              iprot#skip _t11364)
          | _ -> iprot#skip _t11364);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11363

class createRoomWithBuddy_result =
object (self)
  val mutable _success : room option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createRoomWithBuddy_result.success") | Some _x11371 -> _x11371
  method set_success _x11371 = _success <- Some _x11371
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createRoomWithBuddy_result.e") | Some _x11372 -> _x11372
  method set_e _x11372 = _e <- Some _x11372
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createRoomWithBuddy_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createRoomWithBuddy_result (iprot : Protocol.t) =
  let _str11375 = new createRoomWithBuddy_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11376,_id11377) = iprot#readFieldBegin in
        if _t11376 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11377 with 
          | 0 -> (if _t11376 = Protocol.T_STRUCT then
              _str11375#set_success (read_room iprot)
            else
              iprot#skip _t11376)
          | 1 -> (if _t11376 = Protocol.T_STRUCT then
              _str11375#set_e (read_talkException iprot)
            else
              iprot#skip _t11376)
          | _ -> iprot#skip _t11376);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11375

class getDisplayName_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "getDisplayName_args.mid") | Some _x11378 -> _x11378
  method set_mid _x11378 = _mid <- Some _x11378
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getDisplayName_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getDisplayName_args (iprot : Protocol.t) =
  let _str11381 = new getDisplayName_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11382,_id11383) = iprot#readFieldBegin in
        if _t11382 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11383 with 
          | 2 -> (if _t11382 = Protocol.T_STRING then
              _str11381#set_mid iprot#readString
            else
              iprot#skip _t11382)
          | _ -> iprot#skip _t11382);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11381

class getDisplayName_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getDisplayName_result.success") | Some _x11384 -> _x11384
  method set_success _x11384 = _success <- Some _x11384
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getDisplayName_result.e") | Some _x11385 -> _x11385
  method set_e _x11385 = _e <- Some _x11385
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getDisplayName_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getDisplayName_result (iprot : Protocol.t) =
  let _str11388 = new getDisplayName_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11389,_id11390) = iprot#readFieldBegin in
        if _t11389 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11390 with 
          | 0 -> (if _t11389 = Protocol.T_STRING then
              _str11388#set_success iprot#readString
            else
              iprot#skip _t11389)
          | 1 -> (if _t11389 = Protocol.T_STRUCT then
              _str11388#set_e (read_talkException iprot)
            else
              iprot#skip _t11389)
          | _ -> iprot#skip _t11389);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11388

class getPaidCallMetadata_args =
object (self)
  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPaidCallMetadata_args.language") | Some _x11391 -> _x11391
  method set_language _x11391 = _language <- Some _x11391
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPaidCallMetadata_args";
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPaidCallMetadata_args (iprot : Protocol.t) =
  let _str11394 = new getPaidCallMetadata_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11395,_id11396) = iprot#readFieldBegin in
        if _t11395 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11396 with 
          | 2 -> (if _t11395 = Protocol.T_STRING then
              _str11394#set_language iprot#readString
            else
              iprot#skip _t11395)
          | _ -> iprot#skip _t11395);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11394

class getPaidCallMetadata_result =
object (self)
  val mutable _success : paidCallMetadataResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPaidCallMetadata_result.success") | Some _x11397 -> _x11397
  method set_success _x11397 = _success <- Some _x11397
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPaidCallMetadata_result.e") | Some _x11398 -> _x11398
  method set_e _x11398 = _e <- Some _x11398
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPaidCallMetadata_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPaidCallMetadata_result (iprot : Protocol.t) =
  let _str11401 = new getPaidCallMetadata_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11402,_id11403) = iprot#readFieldBegin in
        if _t11402 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11403 with 
          | 0 -> (if _t11402 = Protocol.T_STRUCT then
              _str11401#set_success (read_paidCallMetadataResult iprot)
            else
              iprot#skip _t11402)
          | 1 -> (if _t11402 = Protocol.T_STRUCT then
              _str11401#set_e (read_talkException iprot)
            else
              iprot#skip _t11402)
          | _ -> iprot#skip _t11402);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11401

class getMid_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMid_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMid_args (iprot : Protocol.t) =
  let _str11406 = new getMid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11407,_id11408) = iprot#readFieldBegin in
        if _t11407 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11408 with 
          | _ -> iprot#skip _t11407);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11406

class getMid_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMid_result.success") | Some _x11409 -> _x11409
  method set_success _x11409 = _success <- Some _x11409
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMid_result.e") | Some _x11410 -> _x11410
  method set_e _x11410 = _e <- Some _x11410
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMid_result (iprot : Protocol.t) =
  let _str11413 = new getMid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11414,_id11415) = iprot#readFieldBegin in
        if _t11414 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11415 with 
          | 0 -> (if _t11414 = Protocol.T_STRING then
              _str11413#set_success iprot#readString
            else
              iprot#skip _t11414)
          | 1 -> (if _t11414 = Protocol.T_STRUCT then
              _str11413#set_e (read_talkException iprot)
            else
              iprot#skip _t11414)
          | _ -> iprot#skip _t11414);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11413

class getUserCountryForBilling_args =
object (self)
  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getUserCountryForBilling_args.country") | Some _x11416 -> _x11416
  method set_country _x11416 = _country <- Some _x11416
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _remoteIp : string option = None
  method get_remoteIp = _remoteIp
  method grab_remoteIp = match _remoteIp with None->raise (Field_empty "getUserCountryForBilling_args.remoteIp") | Some _x11417 -> _x11417
  method set_remoteIp _x11417 = _remoteIp <- Some _x11417
  method unset_remoteIp = _remoteIp <- None
  method reset_remoteIp = _remoteIp <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserCountryForBilling_args";
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _remoteIp with None -> () | Some _v -> 
      oprot#writeFieldBegin("remoteIp",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserCountryForBilling_args (iprot : Protocol.t) =
  let _str11420 = new getUserCountryForBilling_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11421,_id11422) = iprot#readFieldBegin in
        if _t11421 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11422 with 
          | 2 -> (if _t11421 = Protocol.T_STRING then
              _str11420#set_country iprot#readString
            else
              iprot#skip _t11421)
          | 3 -> (if _t11421 = Protocol.T_STRING then
              _str11420#set_remoteIp iprot#readString
            else
              iprot#skip _t11421)
          | _ -> iprot#skip _t11421);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11420

class getUserCountryForBilling_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserCountryForBilling_result.success") | Some _x11423 -> _x11423
  method set_success _x11423 = _success <- Some _x11423
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserCountryForBilling_result.e") | Some _x11424 -> _x11424
  method set_e _x11424 = _e <- Some _x11424
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserCountryForBilling_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserCountryForBilling_result (iprot : Protocol.t) =
  let _str11427 = new getUserCountryForBilling_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11428,_id11429) = iprot#readFieldBegin in
        if _t11428 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11429 with 
          | 0 -> (if _t11428 = Protocol.T_STRING then
              _str11427#set_success iprot#readString
            else
              iprot#skip _t11428)
          | 1 -> (if _t11428 = Protocol.T_STRUCT then
              _str11427#set_e (read_talkException iprot)
            else
              iprot#skip _t11428)
          | _ -> iprot#skip _t11428);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11427

class getFavoriteGroupIdsForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFavoriteGroupIdsForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFavoriteGroupIdsForChannel_args (iprot : Protocol.t) =
  let _str11432 = new getFavoriteGroupIdsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11433,_id11434) = iprot#readFieldBegin in
        if _t11433 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11434 with 
          | _ -> iprot#skip _t11433);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11432

class getFavoriteGroupIdsForChannel_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getFavoriteGroupIdsForChannel_result.success") | Some _x11435 -> _x11435
  method set_success _x11435 = _success <- Some _x11435
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getFavoriteGroupIdsForChannel_result.e") | Some _x11436 -> _x11436
  method set_e _x11436 = _e <- Some _x11436
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFavoriteGroupIdsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11439 ->         oprot#writeString(_iter11439);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFavoriteGroupIdsForChannel_result (iprot : Protocol.t) =
  let _str11440 = new getFavoriteGroupIdsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11441,_id11442) = iprot#readFieldBegin in
        if _t11441 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11442 with 
          | 0 -> (if _t11441 = Protocol.T_LIST then
              _str11440#set_success 
                (let (_etype11446,_size11443) = iprot#readListBegin in
                  let _con11447 = (Array.to_list (Array.init _size11443 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11447)
            else
              iprot#skip _t11441)
          | 1 -> (if _t11441 = Protocol.T_STRUCT then
              _str11440#set_e (read_talkException iprot)
            else
              iprot#skip _t11441)
          | _ -> iprot#skip _t11441);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11440

class getPaidCallHistory_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getPaidCallHistory_args.start") | Some _x11448 -> _x11448
  method set_start _x11448 = _start <- Some _x11448
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getPaidCallHistory_args.size") | Some _x11449 -> _x11449
  method set_size _x11449 = _size <- Some _x11449
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPaidCallHistory_args.language") | Some _x11450 -> _x11450
  method set_language _x11450 = _language <- Some _x11450
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPaidCallHistory_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPaidCallHistory_args (iprot : Protocol.t) =
  let _str11453 = new getPaidCallHistory_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11454,_id11455) = iprot#readFieldBegin in
        if _t11454 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11455 with 
          | 2 -> (if _t11454 = Protocol.T_I64 then
              _str11453#set_start iprot#readI64
            else
              iprot#skip _t11454)
          | 3 -> (if _t11454 = Protocol.T_I32 then
              _str11453#set_size iprot#readI32
            else
              iprot#skip _t11454)
          | 4 -> (if _t11454 = Protocol.T_STRING then
              _str11453#set_language iprot#readString
            else
              iprot#skip _t11454)
          | _ -> iprot#skip _t11454);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11453

class getPaidCallHistory_result =
object (self)
  val mutable _success : paidCallHistoryResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPaidCallHistory_result.success") | Some _x11456 -> _x11456
  method set_success _x11456 = _success <- Some _x11456
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPaidCallHistory_result.e") | Some _x11457 -> _x11457
  method set_e _x11457 = _e <- Some _x11457
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPaidCallHistory_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPaidCallHistory_result (iprot : Protocol.t) =
  let _str11460 = new getPaidCallHistory_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11461,_id11462) = iprot#readFieldBegin in
        if _t11461 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11462 with 
          | 0 -> (if _t11461 = Protocol.T_STRUCT then
              _str11460#set_success (read_paidCallHistoryResult iprot)
            else
              iprot#skip _t11461)
          | 1 -> (if _t11461 = Protocol.T_STRUCT then
              _str11460#set_e (read_talkException iprot)
            else
              iprot#skip _t11461)
          | _ -> iprot#skip _t11461);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11460

class sendPinCodeOperation_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "sendPinCodeOperation_args.verifier") | Some _x11463 -> _x11463
  method set_verifier _x11463 = _verifier <- Some _x11463
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendPinCodeOperation_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendPinCodeOperation_args (iprot : Protocol.t) =
  let _str11466 = new sendPinCodeOperation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11467,_id11468) = iprot#readFieldBegin in
        if _t11467 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11468 with 
          | 1 -> (if _t11467 = Protocol.T_STRING then
              _str11466#set_verifier iprot#readString
            else
              iprot#skip _t11467)
          | _ -> iprot#skip _t11467);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11466

class sendPinCodeOperation_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendPinCodeOperation_result.e") | Some _x11469 -> _x11469
  method set_e _x11469 = _e <- Some _x11469
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendPinCodeOperation_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendPinCodeOperation_result (iprot : Protocol.t) =
  let _str11472 = new sendPinCodeOperation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11473,_id11474) = iprot#readFieldBegin in
        if _t11473 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11474 with 
          | 1 -> (if _t11473 = Protocol.T_STRUCT then
              _str11472#set_e (read_talkException iprot)
            else
              iprot#skip _t11473)
          | _ -> iprot#skip _t11473);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11472

class inviteIntoGroupCall_args =
object (self)
  val mutable _chatMid : string option = None
  method get_chatMid = _chatMid
  method grab_chatMid = match _chatMid with None->raise (Field_empty "inviteIntoGroupCall_args.chatMid") | Some _x11475 -> _x11475
  method set_chatMid _x11475 = _chatMid <- Some _x11475
  method unset_chatMid = _chatMid <- None
  method reset_chatMid = _chatMid <- None

  val mutable _memberMids : string list option = None
  method get_memberMids = _memberMids
  method grab_memberMids = match _memberMids with None->raise (Field_empty "inviteIntoGroupCall_args.memberMids") | Some _x11476 -> _x11476
  method set_memberMids _x11476 = _memberMids <- Some _x11476
  method unset_memberMids = _memberMids <- None
  method reset_memberMids = _memberMids <- None

  val mutable _mediaType : GroupCallMediaType.t option = None
  method get_mediaType = _mediaType
  method grab_mediaType = match _mediaType with None->raise (Field_empty "inviteIntoGroupCall_args.mediaType") | Some _x11477 -> _x11477
  method set_mediaType _x11477 = _mediaType <- Some _x11477
  method unset_mediaType = _mediaType <- None
  method reset_mediaType = _mediaType <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteIntoGroupCall_args";
    (match _chatMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _memberMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("memberMids",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11480 ->         oprot#writeString(_iter11480);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _mediaType with None -> () | Some _v -> 
      oprot#writeFieldBegin("mediaType",Protocol.T_I32,4);
      oprot#writeI32(GroupCallMediaType.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteIntoGroupCall_args (iprot : Protocol.t) =
  let _str11481 = new inviteIntoGroupCall_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11482,_id11483) = iprot#readFieldBegin in
        if _t11482 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11483 with 
          | 2 -> (if _t11482 = Protocol.T_STRING then
              _str11481#set_chatMid iprot#readString
            else
              iprot#skip _t11482)
          | 3 -> (if _t11482 = Protocol.T_LIST then
              _str11481#set_memberMids 
                (let (_etype11487,_size11484) = iprot#readListBegin in
                  let _con11488 = (Array.to_list (Array.init _size11484 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11488)
            else
              iprot#skip _t11482)
          | 4 -> (if _t11482 = Protocol.T_I32 then
              _str11481#set_mediaType (GroupCallMediaType.of_i iprot#readI32)
            else
              iprot#skip _t11482)
          | _ -> iprot#skip _t11482);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11481

class inviteIntoGroupCall_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "inviteIntoGroupCall_result.e") | Some _x11489 -> _x11489
  method set_e _x11489 = _e <- Some _x11489
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteIntoGroupCall_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteIntoGroupCall_result (iprot : Protocol.t) =
  let _str11492 = new inviteIntoGroupCall_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11493,_id11494) = iprot#readFieldBegin in
        if _t11493 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11494 with 
          | 1 -> (if _t11493 = Protocol.T_STRUCT then
              _str11492#set_e (read_talkException iprot)
            else
              iprot#skip _t11493)
          | _ -> iprot#skip _t11493);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11492

class getFriendMids_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFriendMids_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFriendMids_args (iprot : Protocol.t) =
  let _str11497 = new getFriendMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11498,_id11499) = iprot#readFieldBegin in
        if _t11498 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11499 with 
          | _ -> iprot#skip _t11498);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11497

class getFriendMids_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getFriendMids_result.success") | Some _x11500 -> _x11500
  method set_success _x11500 = _success <- Some _x11500
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getFriendMids_result.e") | Some _x11501 -> _x11501
  method set_e _x11501 = _e <- Some _x11501
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFriendMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11504 ->         oprot#writeString(_iter11504);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFriendMids_result (iprot : Protocol.t) =
  let _str11505 = new getFriendMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11506,_id11507) = iprot#readFieldBegin in
        if _t11506 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11507 with 
          | 0 -> (if _t11506 = Protocol.T_LIST then
              _str11505#set_success 
                (let (_etype11511,_size11508) = iprot#readListBegin in
                  let _con11512 = (Array.to_list (Array.init _size11508 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11512)
            else
              iprot#skip _t11506)
          | 1 -> (if _t11506 = Protocol.T_STRUCT then
              _str11505#set_e (read_talkException iprot)
            else
              iprot#skip _t11506)
          | _ -> iprot#skip _t11506);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11505

class getMetaProfile_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMetaProfile_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMetaProfile_args (iprot : Protocol.t) =
  let _str11515 = new getMetaProfile_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11516,_id11517) = iprot#readFieldBegin in
        if _t11516 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11517 with 
          | _ -> iprot#skip _t11516);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11515

class getMetaProfile_result =
object (self)
  val mutable _success : metaProfile option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMetaProfile_result.success") | Some _x11518 -> _x11518
  method set_success _x11518 = _success <- Some _x11518
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMetaProfile_result.e") | Some _x11519 -> _x11519
  method set_e _x11519 = _e <- Some _x11519
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMetaProfile_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMetaProfile_result (iprot : Protocol.t) =
  let _str11522 = new getMetaProfile_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11523,_id11524) = iprot#readFieldBegin in
        if _t11523 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11524 with 
          | 0 -> (if _t11523 = Protocol.T_STRUCT then
              _str11522#set_success (read_metaProfile iprot)
            else
              iprot#skip _t11523)
          | 1 -> (if _t11523 = Protocol.T_STRUCT then
              _str11522#set_e (read_talkException iprot)
            else
              iprot#skip _t11523)
          | _ -> iprot#skip _t11523);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11522

class sendMessageForChannel_args =
object (self)
  val mutable _message : message option = None
  method get_message = _message
  method grab_message = match _message with None->raise (Field_empty "sendMessageForChannel_args.message") | Some _x11525 -> _x11525
  method set_message _x11525 = _message <- Some _x11525
  method unset_message = _message <- None
  method reset_message = _message <- None

  method copy =
      let _new = Oo.copy self in
      if _message <> None then
        _new#set_message self#grab_message#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageForChannel_args";
    (match _message with None -> () | Some _v -> 
      oprot#writeFieldBegin("message",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageForChannel_args (iprot : Protocol.t) =
  let _str11528 = new sendMessageForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11529,_id11530) = iprot#readFieldBegin in
        if _t11529 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11530 with 
          | 2 -> (if _t11529 = Protocol.T_STRUCT then
              _str11528#set_message (read_message iprot)
            else
              iprot#skip _t11529)
          | _ -> iprot#skip _t11529);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11528

class sendMessageForChannel_result =
object (self)
  val mutable _success : message option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendMessageForChannel_result.success") | Some _x11531 -> _x11531
  method set_success _x11531 = _success <- Some _x11531
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendMessageForChannel_result.e") | Some _x11532 -> _x11532
  method set_e _x11532 = _e <- Some _x11532
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageForChannel_result (iprot : Protocol.t) =
  let _str11535 = new sendMessageForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11536,_id11537) = iprot#readFieldBegin in
        if _t11536 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11537 with 
          | 0 -> (if _t11536 = Protocol.T_STRUCT then
              _str11535#set_success (read_message iprot)
            else
              iprot#skip _t11536)
          | 1 -> (if _t11536 = Protocol.T_STRUCT then
              _str11535#set_e (read_talkException iprot)
            else
              iprot#skip _t11536)
          | _ -> iprot#skip _t11536);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11535

class activeBuddySubscriberCount_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "activeBuddySubscriberCount_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_activeBuddySubscriberCount_args (iprot : Protocol.t) =
  let _str11540 = new activeBuddySubscriberCount_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11541,_id11542) = iprot#readFieldBegin in
        if _t11541 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11542 with 
          | _ -> iprot#skip _t11541);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11540

class activeBuddySubscriberCount_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "activeBuddySubscriberCount_result.success") | Some _x11543 -> _x11543
  method set_success _x11543 = _success <- Some _x11543
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "activeBuddySubscriberCount_result.e") | Some _x11544 -> _x11544
  method set_e _x11544 = _e <- Some _x11544
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "activeBuddySubscriberCount_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_activeBuddySubscriberCount_result (iprot : Protocol.t) =
  let _str11547 = new activeBuddySubscriberCount_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11548,_id11549) = iprot#readFieldBegin in
        if _t11548 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11549 with 
          | 0 -> (if _t11548 = Protocol.T_I64 then
              _str11547#set_success iprot#readI64
            else
              iprot#skip _t11548)
          | 1 -> (if _t11548 = Protocol.T_STRUCT then
              _str11547#set_e (read_talkException iprot)
            else
              iprot#skip _t11548)
          | _ -> iprot#skip _t11548);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11547

class getCallCreditPurchaseHistory_args =
object (self)
  val mutable _request : coinHistoryCondition option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getCallCreditPurchaseHistory_args.request") | Some _x11550 -> _x11550
  method set_request _x11550 = _request <- Some _x11550
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCallCreditPurchaseHistory_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCallCreditPurchaseHistory_args (iprot : Protocol.t) =
  let _str11553 = new getCallCreditPurchaseHistory_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11554,_id11555) = iprot#readFieldBegin in
        if _t11554 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11555 with 
          | 2 -> (if _t11554 = Protocol.T_STRUCT then
              _str11553#set_request (read_coinHistoryCondition iprot)
            else
              iprot#skip _t11554)
          | _ -> iprot#skip _t11554);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11553

class getCallCreditPurchaseHistory_result =
object (self)
  val mutable _success : coinHistoryResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCallCreditPurchaseHistory_result.success") | Some _x11556 -> _x11556
  method set_success _x11556 = _success <- Some _x11556
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCallCreditPurchaseHistory_result.e") | Some _x11557 -> _x11557
  method set_e _x11557 = _e <- Some _x11557
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCallCreditPurchaseHistory_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCallCreditPurchaseHistory_result (iprot : Protocol.t) =
  let _str11560 = new getCallCreditPurchaseHistory_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11561,_id11562) = iprot#readFieldBegin in
        if _t11561 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11562 with 
          | 0 -> (if _t11561 = Protocol.T_STRUCT then
              _str11560#set_success (read_coinHistoryResult iprot)
            else
              iprot#skip _t11561)
          | 1 -> (if _t11561 = Protocol.T_STRUCT then
              _str11560#set_e (read_talkException iprot)
            else
              iprot#skip _t11561)
          | _ -> iprot#skip _t11561);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11560

class isRoomMember_args =
object (self)
  val mutable _roomId : string option = None
  method get_roomId = _roomId
  method grab_roomId = match _roomId with None->raise (Field_empty "isRoomMember_args.roomId") | Some _x11563 -> _x11563
  method set_roomId _x11563 = _roomId <- Some _x11563
  method unset_roomId = _roomId <- None
  method reset_roomId = _roomId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isRoomMember_args";
    (match _roomId with None -> () | Some _v -> 
      oprot#writeFieldBegin("roomId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isRoomMember_args (iprot : Protocol.t) =
  let _str11566 = new isRoomMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11567,_id11568) = iprot#readFieldBegin in
        if _t11567 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11568 with 
          | 1 -> (if _t11567 = Protocol.T_STRING then
              _str11566#set_roomId iprot#readString
            else
              iprot#skip _t11567)
          | _ -> iprot#skip _t11567);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11566

class isRoomMember_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "isRoomMember_result.success") | Some _x11569 -> _x11569
  method set_success _x11569 = _success <- Some _x11569
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "isRoomMember_result.e") | Some _x11570 -> _x11570
  method set_e _x11570 = _e <- Some _x11570
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isRoomMember_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isRoomMember_result (iprot : Protocol.t) =
  let _str11573 = new isRoomMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11574,_id11575) = iprot#readFieldBegin in
        if _t11574 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11575 with 
          | 0 -> (if _t11574 = Protocol.T_BOOL then
              _str11573#set_success iprot#readBool
            else
              iprot#skip _t11574)
          | 1 -> (if _t11574 = Protocol.T_STRUCT then
              _str11573#set_e (read_talkException iprot)
            else
              iprot#skip _t11574)
          | _ -> iprot#skip _t11574);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11573

class sendSystemOAMessage_args =
object (self)
  val mutable _message : message option = None
  method get_message = _message
  method grab_message = match _message with None->raise (Field_empty "sendSystemOAMessage_args.message") | Some _x11576 -> _x11576
  method set_message _x11576 = _message <- Some _x11576
  method unset_message = _message <- None
  method reset_message = _message <- None

  method copy =
      let _new = Oo.copy self in
      if _message <> None then
        _new#set_message self#grab_message#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendSystemOAMessage_args";
    (match _message with None -> () | Some _v -> 
      oprot#writeFieldBegin("message",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendSystemOAMessage_args (iprot : Protocol.t) =
  let _str11579 = new sendSystemOAMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11580,_id11581) = iprot#readFieldBegin in
        if _t11580 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11581 with 
          | 1 -> (if _t11580 = Protocol.T_STRUCT then
              _str11579#set_message (read_message iprot)
            else
              iprot#skip _t11580)
          | _ -> iprot#skip _t11580);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11579

class sendSystemOAMessage_result =
object (self)
  val mutable _success : message option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendSystemOAMessage_result.success") | Some _x11582 -> _x11582
  method set_success _x11582 = _success <- Some _x11582
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendSystemOAMessage_result.e") | Some _x11583 -> _x11583
  method set_e _x11583 = _e <- Some _x11583
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendSystemOAMessage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendSystemOAMessage_result (iprot : Protocol.t) =
  let _str11586 = new sendSystemOAMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11587,_id11588) = iprot#readFieldBegin in
        if _t11587 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11588 with 
          | 0 -> (if _t11587 = Protocol.T_STRUCT then
              _str11586#set_success (read_message iprot)
            else
              iprot#skip _t11587)
          | 1 -> (if _t11587 = Protocol.T_STRUCT then
              _str11586#set_e (read_talkException iprot)
            else
              iprot#skip _t11587)
          | _ -> iprot#skip _t11587);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11586

class acquirePaidCallRoute_args =
object (self)
  val mutable _paidCallType : PaidCallType.t option = None
  method get_paidCallType = _paidCallType
  method grab_paidCallType = match _paidCallType with None->raise (Field_empty "acquirePaidCallRoute_args.paidCallType") | Some _x11589 -> _x11589
  method set_paidCallType _x11589 = _paidCallType <- Some _x11589
  method unset_paidCallType = _paidCallType <- None
  method reset_paidCallType = _paidCallType <- None

  val mutable _dialedNumber : string option = None
  method get_dialedNumber = _dialedNumber
  method grab_dialedNumber = match _dialedNumber with None->raise (Field_empty "acquirePaidCallRoute_args.dialedNumber") | Some _x11590 -> _x11590
  method set_dialedNumber _x11590 = _dialedNumber <- Some _x11590
  method unset_dialedNumber = _dialedNumber <- None
  method reset_dialedNumber = _dialedNumber <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "acquirePaidCallRoute_args.language") | Some _x11591 -> _x11591
  method set_language _x11591 = _language <- Some _x11591
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _networkCode : string option = None
  method get_networkCode = _networkCode
  method grab_networkCode = match _networkCode with None->raise (Field_empty "acquirePaidCallRoute_args.networkCode") | Some _x11592 -> _x11592
  method set_networkCode _x11592 = _networkCode <- Some _x11592
  method unset_networkCode = _networkCode <- None
  method reset_networkCode = _networkCode <- None

  val mutable _disableCallerId : bool option = None
  method get_disableCallerId = _disableCallerId
  method grab_disableCallerId = match _disableCallerId with None->raise (Field_empty "acquirePaidCallRoute_args.disableCallerId") | Some _x11593 -> _x11593
  method set_disableCallerId _x11593 = _disableCallerId <- Some _x11593
  method unset_disableCallerId = _disableCallerId <- None
  method reset_disableCallerId = _disableCallerId <- None

  val mutable _referer : string option = None
  method get_referer = _referer
  method grab_referer = match _referer with None->raise (Field_empty "acquirePaidCallRoute_args.referer") | Some _x11594 -> _x11594
  method set_referer _x11594 = _referer <- Some _x11594
  method unset_referer = _referer <- None
  method reset_referer = _referer <- None

  val mutable _adSessionId : string option = None
  method get_adSessionId = _adSessionId
  method grab_adSessionId = match _adSessionId with None->raise (Field_empty "acquirePaidCallRoute_args.adSessionId") | Some _x11595 -> _x11595
  method set_adSessionId _x11595 = _adSessionId <- Some _x11595
  method unset_adSessionId = _adSessionId <- None
  method reset_adSessionId = _adSessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquirePaidCallRoute_args";
    (match _paidCallType with None -> () | Some _v -> 
      oprot#writeFieldBegin("paidCallType",Protocol.T_I32,2);
      oprot#writeI32(PaidCallType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _dialedNumber with None -> () | Some _v -> 
      oprot#writeFieldBegin("dialedNumber",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _networkCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("networkCode",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _disableCallerId with None -> () | Some _v -> 
      oprot#writeFieldBegin("disableCallerId",Protocol.T_BOOL,6);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _referer with None -> () | Some _v -> 
      oprot#writeFieldBegin("referer",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _adSessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("adSessionId",Protocol.T_STRING,8);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquirePaidCallRoute_args (iprot : Protocol.t) =
  let _str11598 = new acquirePaidCallRoute_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11599,_id11600) = iprot#readFieldBegin in
        if _t11599 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11600 with 
          | 2 -> (if _t11599 = Protocol.T_I32 then
              _str11598#set_paidCallType (PaidCallType.of_i iprot#readI32)
            else
              iprot#skip _t11599)
          | 3 -> (if _t11599 = Protocol.T_STRING then
              _str11598#set_dialedNumber iprot#readString
            else
              iprot#skip _t11599)
          | 4 -> (if _t11599 = Protocol.T_STRING then
              _str11598#set_language iprot#readString
            else
              iprot#skip _t11599)
          | 5 -> (if _t11599 = Protocol.T_STRING then
              _str11598#set_networkCode iprot#readString
            else
              iprot#skip _t11599)
          | 6 -> (if _t11599 = Protocol.T_BOOL then
              _str11598#set_disableCallerId iprot#readBool
            else
              iprot#skip _t11599)
          | 7 -> (if _t11599 = Protocol.T_STRING then
              _str11598#set_referer iprot#readString
            else
              iprot#skip _t11599)
          | 8 -> (if _t11599 = Protocol.T_STRING then
              _str11598#set_adSessionId iprot#readString
            else
              iprot#skip _t11599)
          | _ -> iprot#skip _t11599);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11598

class acquirePaidCallRoute_result =
object (self)
  val mutable _success : paidCallResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "acquirePaidCallRoute_result.success") | Some _x11601 -> _x11601
  method set_success _x11601 = _success <- Some _x11601
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "acquirePaidCallRoute_result.e") | Some _x11602 -> _x11602
  method set_e _x11602 = _e <- Some _x11602
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquirePaidCallRoute_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquirePaidCallRoute_result (iprot : Protocol.t) =
  let _str11605 = new acquirePaidCallRoute_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11606,_id11607) = iprot#readFieldBegin in
        if _t11606 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11607 with 
          | 0 -> (if _t11606 = Protocol.T_STRUCT then
              _str11605#set_success (read_paidCallResponse iprot)
            else
              iprot#skip _t11606)
          | 1 -> (if _t11606 = Protocol.T_STRUCT then
              _str11605#set_e (read_talkException iprot)
            else
              iprot#skip _t11606)
          | _ -> iprot#skip _t11606);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11605

class getGroupsForChannel_args =
object (self)
  val mutable _groupIds : string list option = None
  method get_groupIds = _groupIds
  method grab_groupIds = match _groupIds with None->raise (Field_empty "getGroupsForChannel_args.groupIds") | Some _x11608 -> _x11608
  method set_groupIds _x11608 = _groupIds <- Some _x11608
  method unset_groupIds = _groupIds <- None
  method reset_groupIds = _groupIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupsForChannel_args";
    (match _groupIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupIds",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11611 ->         oprot#writeString(_iter11611);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupsForChannel_args (iprot : Protocol.t) =
  let _str11612 = new getGroupsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11613,_id11614) = iprot#readFieldBegin in
        if _t11613 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11614 with 
          | 1 -> (if _t11613 = Protocol.T_LIST then
              _str11612#set_groupIds 
                (let (_etype11618,_size11615) = iprot#readListBegin in
                  let _con11619 = (Array.to_list (Array.init _size11615 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11619)
            else
              iprot#skip _t11613)
          | _ -> iprot#skip _t11613);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11612

class getGroupsForChannel_result =
object (self)
  val mutable _success : group list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupsForChannel_result.success") | Some _x11620 -> _x11620
  method set_success _x11620 = _success <- Some _x11620
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupsForChannel_result.e") | Some _x11621 -> _x11621
  method set_e _x11621 = _e <- Some _x11621
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter11624 ->         _iter11624#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupsForChannel_result (iprot : Protocol.t) =
  let _str11625 = new getGroupsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11626,_id11627) = iprot#readFieldBegin in
        if _t11626 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11627 with 
          | 0 -> (if _t11626 = Protocol.T_LIST then
              _str11625#set_success 
                (let (_etype11631,_size11628) = iprot#readListBegin in
                  let _con11632 = (Array.to_list (Array.init _size11628 (fun _ -> (read_group iprot)))) in
                    iprot#readListEnd; _con11632)
            else
              iprot#skip _t11626)
          | 1 -> (if _t11626 = Protocol.T_STRUCT then
              _str11625#set_e (read_talkException iprot)
            else
              iprot#skip _t11626)
          | _ -> iprot#skip _t11626);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11625

class getUserCreateTime_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserCreateTime_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserCreateTime_args (iprot : Protocol.t) =
  let _str11635 = new getUserCreateTime_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11636,_id11637) = iprot#readFieldBegin in
        if _t11636 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11637 with 
          | _ -> iprot#skip _t11636);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11635

class getUserCreateTime_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserCreateTime_result.success") | Some _x11638 -> _x11638
  method set_success _x11638 = _success <- Some _x11638
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserCreateTime_result.e") | Some _x11639 -> _x11639
  method set_e _x11639 = _e <- Some _x11639
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserCreateTime_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserCreateTime_result (iprot : Protocol.t) =
  let _str11642 = new getUserCreateTime_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11643,_id11644) = iprot#readFieldBegin in
        if _t11643 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11644 with 
          | 0 -> (if _t11643 = Protocol.T_I64 then
              _str11642#set_success iprot#readI64
            else
              iprot#skip _t11643)
          | 1 -> (if _t11643 = Protocol.T_STRUCT then
              _str11642#set_e (read_talkException iprot)
            else
              iprot#skip _t11643)
          | _ -> iprot#skip _t11643);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11642

class registerChannelCP_args =
object (self)
  val mutable _cpId : string option = None
  method get_cpId = _cpId
  method grab_cpId = match _cpId with None->raise (Field_empty "registerChannelCP_args.cpId") | Some _x11645 -> _x11645
  method set_cpId _x11645 = _cpId <- Some _x11645
  method unset_cpId = _cpId <- None
  method reset_cpId = _cpId <- None

  val mutable _registerPassword : string option = None
  method get_registerPassword = _registerPassword
  method grab_registerPassword = match _registerPassword with None->raise (Field_empty "registerChannelCP_args.registerPassword") | Some _x11646 -> _x11646
  method set_registerPassword _x11646 = _registerPassword <- Some _x11646
  method unset_registerPassword = _registerPassword <- None
  method reset_registerPassword = _registerPassword <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerChannelCP_args";
    (match _cpId with None -> () | Some _v -> 
      oprot#writeFieldBegin("cpId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _registerPassword with None -> () | Some _v -> 
      oprot#writeFieldBegin("registerPassword",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerChannelCP_args (iprot : Protocol.t) =
  let _str11649 = new registerChannelCP_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11650,_id11651) = iprot#readFieldBegin in
        if _t11650 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11651 with 
          | 2 -> (if _t11650 = Protocol.T_STRING then
              _str11649#set_cpId iprot#readString
            else
              iprot#skip _t11650)
          | 3 -> (if _t11650 = Protocol.T_STRING then
              _str11649#set_registerPassword iprot#readString
            else
              iprot#skip _t11650)
          | _ -> iprot#skip _t11650);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11649

class registerChannelCP_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerChannelCP_result.success") | Some _x11652 -> _x11652
  method set_success _x11652 = _success <- Some _x11652
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerChannelCP_result.e") | Some _x11653 -> _x11653
  method set_e _x11653 = _e <- Some _x11653
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerChannelCP_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerChannelCP_result (iprot : Protocol.t) =
  let _str11656 = new registerChannelCP_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11657,_id11658) = iprot#readFieldBegin in
        if _t11657 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11658 with 
          | 0 -> (if _t11657 = Protocol.T_STRING then
              _str11656#set_success iprot#readString
            else
              iprot#skip _t11657)
          | 1 -> (if _t11657 = Protocol.T_STRUCT then
              _str11656#set_e (read_talkException iprot)
            else
              iprot#skip _t11657)
          | _ -> iprot#skip _t11657);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11656

class reserveCallCreditPurchase_args =
object (self)
  val mutable _request : coinPurchaseReservation option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "reserveCallCreditPurchase_args.request") | Some _x11659 -> _x11659
  method set_request _x11659 = _request <- Some _x11659
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reserveCallCreditPurchase_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reserveCallCreditPurchase_args (iprot : Protocol.t) =
  let _str11662 = new reserveCallCreditPurchase_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11663,_id11664) = iprot#readFieldBegin in
        if _t11663 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11664 with 
          | 2 -> (if _t11663 = Protocol.T_STRUCT then
              _str11662#set_request (read_coinPurchaseReservation iprot)
            else
              iprot#skip _t11663)
          | _ -> iprot#skip _t11663);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11662

class reserveCallCreditPurchase_result =
object (self)
  val mutable _success : paymentReservationResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reserveCallCreditPurchase_result.success") | Some _x11665 -> _x11665
  method set_success _x11665 = _success <- Some _x11665
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reserveCallCreditPurchase_result.e") | Some _x11666 -> _x11666
  method set_e _x11666 = _e <- Some _x11666
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reserveCallCreditPurchase_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reserveCallCreditPurchase_result (iprot : Protocol.t) =
  let _str11669 = new reserveCallCreditPurchase_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11670,_id11671) = iprot#readFieldBegin in
        if _t11670 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11671 with 
          | 0 -> (if _t11670 = Protocol.T_STRUCT then
              _str11669#set_success (read_paymentReservationResult iprot)
            else
              iprot#skip _t11670)
          | 1 -> (if _t11670 = Protocol.T_STRUCT then
              _str11669#set_e (read_talkException iprot)
            else
              iprot#skip _t11670)
          | _ -> iprot#skip _t11670);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11669

class acquirePaidCallCurrencyExchangeRate_args =
object (self)
  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "acquirePaidCallCurrencyExchangeRate_args.language") | Some _x11672 -> _x11672
  method set_language _x11672 = _language <- Some _x11672
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquirePaidCallCurrencyExchangeRate_args";
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquirePaidCallCurrencyExchangeRate_args (iprot : Protocol.t) =
  let _str11675 = new acquirePaidCallCurrencyExchangeRate_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11676,_id11677) = iprot#readFieldBegin in
        if _t11676 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11677 with 
          | 2 -> (if _t11676 = Protocol.T_STRING then
              _str11675#set_language iprot#readString
            else
              iprot#skip _t11676)
          | _ -> iprot#skip _t11676);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11675

class acquirePaidCallCurrencyExchangeRate_result =
object (self)
  val mutable _success : paidCallCurrencyExchangeRate list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "acquirePaidCallCurrencyExchangeRate_result.success") | Some _x11678 -> _x11678
  method set_success _x11678 = _success <- Some _x11678
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "acquirePaidCallCurrencyExchangeRate_result.e") | Some _x11679 -> _x11679
  method set_e _x11679 = _e <- Some _x11679
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquirePaidCallCurrencyExchangeRate_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter11682 ->         _iter11682#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquirePaidCallCurrencyExchangeRate_result (iprot : Protocol.t) =
  let _str11683 = new acquirePaidCallCurrencyExchangeRate_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11684,_id11685) = iprot#readFieldBegin in
        if _t11684 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11685 with 
          | 0 -> (if _t11684 = Protocol.T_LIST then
              _str11683#set_success 
                (let (_etype11689,_size11686) = iprot#readListBegin in
                  let _con11690 = (Array.to_list (Array.init _size11686 (fun _ -> (read_paidCallCurrencyExchangeRate iprot)))) in
                    iprot#readListEnd; _con11690)
            else
              iprot#skip _t11684)
          | 1 -> (if _t11684 = Protocol.T_STRUCT then
              _str11683#set_e (read_talkException iprot)
            else
              iprot#skip _t11684)
          | _ -> iprot#skip _t11684);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11683

class getRoomMemberMidsForAppPlatform_args =
object (self)
  val mutable _roomId : string option = None
  method get_roomId = _roomId
  method grab_roomId = match _roomId with None->raise (Field_empty "getRoomMemberMidsForAppPlatform_args.roomId") | Some _x11691 -> _x11691
  method set_roomId _x11691 = _roomId <- Some _x11691
  method unset_roomId = _roomId <- None
  method reset_roomId = _roomId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRoomMemberMidsForAppPlatform_args";
    (match _roomId with None -> () | Some _v -> 
      oprot#writeFieldBegin("roomId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRoomMemberMidsForAppPlatform_args (iprot : Protocol.t) =
  let _str11694 = new getRoomMemberMidsForAppPlatform_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11695,_id11696) = iprot#readFieldBegin in
        if _t11695 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11696 with 
          | 1 -> (if _t11695 = Protocol.T_STRING then
              _str11694#set_roomId iprot#readString
            else
              iprot#skip _t11695)
          | _ -> iprot#skip _t11695);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11694

class getRoomMemberMidsForAppPlatform_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getRoomMemberMidsForAppPlatform_result.success") | Some _x11697 -> _x11697
  method set_success _x11697 = _success <- Some _x11697
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getRoomMemberMidsForAppPlatform_result.e") | Some _x11698 -> _x11698
  method set_e _x11698 = _e <- Some _x11698
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRoomMemberMidsForAppPlatform_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11701 ->         oprot#writeString(_iter11701);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRoomMemberMidsForAppPlatform_result (iprot : Protocol.t) =
  let _str11702 = new getRoomMemberMidsForAppPlatform_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11703,_id11704) = iprot#readFieldBegin in
        if _t11703 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11704 with 
          | 0 -> (if _t11703 = Protocol.T_LIST then
              _str11702#set_success 
                (let (_etype11708,_size11705) = iprot#readListBegin in
                  let _con11709 = (Array.to_list (Array.init _size11705 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11709)
            else
              iprot#skip _t11703)
          | 1 -> (if _t11703 = Protocol.T_STRUCT then
              _str11702#set_e (read_talkException iprot)
            else
              iprot#skip _t11703)
          | _ -> iprot#skip _t11703);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11702

class getPaidCallBalanceList_args =
object (self)
  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPaidCallBalanceList_args.language") | Some _x11710 -> _x11710
  method set_language _x11710 = _language <- Some _x11710
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPaidCallBalanceList_args";
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPaidCallBalanceList_args (iprot : Protocol.t) =
  let _str11713 = new getPaidCallBalanceList_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11714,_id11715) = iprot#readFieldBegin in
        if _t11714 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11715 with 
          | 2 -> (if _t11714 = Protocol.T_STRING then
              _str11713#set_language iprot#readString
            else
              iprot#skip _t11714)
          | _ -> iprot#skip _t11714);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11713

class getPaidCallBalanceList_result =
object (self)
  val mutable _success : paidCallBalance list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPaidCallBalanceList_result.success") | Some _x11716 -> _x11716
  method set_success _x11716 = _success <- Some _x11716
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPaidCallBalanceList_result.e") | Some _x11717 -> _x11717
  method set_e _x11717 = _e <- Some _x11717
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPaidCallBalanceList_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter11720 ->         _iter11720#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPaidCallBalanceList_result (iprot : Protocol.t) =
  let _str11721 = new getPaidCallBalanceList_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11722,_id11723) = iprot#readFieldBegin in
        if _t11722 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11723 with 
          | 0 -> (if _t11722 = Protocol.T_LIST then
              _str11721#set_success 
                (let (_etype11727,_size11724) = iprot#readListBegin in
                  let _con11728 = (Array.to_list (Array.init _size11724 (fun _ -> (read_paidCallBalance iprot)))) in
                    iprot#readListEnd; _con11728)
            else
              iprot#skip _t11722)
          | 1 -> (if _t11722 = Protocol.T_STRUCT then
              _str11721#set_e (read_talkException iprot)
            else
              iprot#skip _t11722)
          | _ -> iprot#skip _t11722);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11721

class getPersonalInfos_args =
object (self)
  val mutable _requiredPersonalInfos : (PersonalInfo.t,bool) Hashtbl.t option = None
  method get_requiredPersonalInfos = _requiredPersonalInfos
  method grab_requiredPersonalInfos = match _requiredPersonalInfos with None->raise (Field_empty "getPersonalInfos_args.requiredPersonalInfos") | Some _x11729 -> _x11729
  method set_requiredPersonalInfos _x11729 = _requiredPersonalInfos <- Some _x11729
  method unset_requiredPersonalInfos = _requiredPersonalInfos <- None
  method reset_requiredPersonalInfos = _requiredPersonalInfos <- None

  method copy =
      let _new = Oo.copy self in
      if _requiredPersonalInfos <> None then
        _new#set_requiredPersonalInfos (Hashtbl.copy self#grab_requiredPersonalInfos);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPersonalInfos_args";
    (match _requiredPersonalInfos with None -> () | Some _v -> 
      oprot#writeFieldBegin("requiredPersonalInfos",Protocol.T_SET,1);
      oprot#writeSetBegin(Protocol.T_I32,Hashtbl.length _v);
      Hashtbl.iter (fun _iter11732 -> fun _ ->         oprot#writeI32(PersonalInfo.to_i _iter11732);
      ) _v;
      oprot#writeSetEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPersonalInfos_args (iprot : Protocol.t) =
  let _str11733 = new getPersonalInfos_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11734,_id11735) = iprot#readFieldBegin in
        if _t11734 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11735 with 
          | 1 -> (if _t11734 = Protocol.T_SET then
              _str11733#set_requiredPersonalInfos 
                (let (_etype11739,_size11736) = iprot#readSetBegin in
                let _con11740 = Hashtbl.create _size11736 in
                  for i = 1 to _size11736 do
                    Hashtbl.add _con11740 (PersonalInfo.of_i iprot#readI32) true
                  done; iprot#readSetEnd; _con11740)
            else
              iprot#skip _t11734)
          | _ -> iprot#skip _t11734);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11733

class getPersonalInfos_result =
object (self)
  val mutable _success : (PersonalInfo.t,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPersonalInfos_result.success") | Some _x11741 -> _x11741
  method set_success _x11741 = _success <- Some _x11741
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPersonalInfos_result.e") | Some _x11742 -> _x11742
  method set_e _x11742 = _e <- Some _x11742
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPersonalInfos_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_I32,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter11745 -> fun _viter11746 -> 
        oprot#writeI32(PersonalInfo.to_i _kiter11745);
        oprot#writeString(_viter11746);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPersonalInfos_result (iprot : Protocol.t) =
  let _str11747 = new getPersonalInfos_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11748,_id11749) = iprot#readFieldBegin in
        if _t11748 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11749 with 
          | 0 -> (if _t11748 = Protocol.T_MAP then
              _str11747#set_success 
                (let (_ktype11751,_vtype11752,_size11750) = iprot#readMapBegin in
                let _con11754 = Hashtbl.create _size11750 in
                  for i = 1 to _size11750 do
                    let _k = (PersonalInfo.of_i iprot#readI32) in
                    let _v = iprot#readString in
                      Hashtbl.add _con11754 _k _v
                  done; iprot#readMapEnd; _con11754)
            else
              iprot#skip _t11748)
          | 1 -> (if _t11748 = Protocol.T_STRUCT then
              _str11747#set_e (read_talkException iprot)
            else
              iprot#skip _t11748)
          | _ -> iprot#skip _t11748);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11747

class getPrimaryClientsForChannel_args =
object (self)
  val mutable _userMids : string list option = None
  method get_userMids = _userMids
  method grab_userMids = match _userMids with None->raise (Field_empty "getPrimaryClientsForChannel_args.userMids") | Some _x11755 -> _x11755
  method set_userMids _x11755 = _userMids <- Some _x11755
  method unset_userMids = _userMids <- None
  method reset_userMids = _userMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPrimaryClientsForChannel_args";
    (match _userMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("userMids",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11758 ->         oprot#writeString(_iter11758);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPrimaryClientsForChannel_args (iprot : Protocol.t) =
  let _str11759 = new getPrimaryClientsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11760,_id11761) = iprot#readFieldBegin in
        if _t11760 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11761 with 
          | 1 -> (if _t11760 = Protocol.T_LIST then
              _str11759#set_userMids 
                (let (_etype11765,_size11762) = iprot#readListBegin in
                  let _con11766 = (Array.to_list (Array.init _size11762 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11766)
            else
              iprot#skip _t11760)
          | _ -> iprot#skip _t11760);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11759

class getPrimaryClientsForChannel_result =
object (self)
  val mutable _success : simpleChannelClient list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPrimaryClientsForChannel_result.success") | Some _x11767 -> _x11767
  method set_success _x11767 = _success <- Some _x11767
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPrimaryClientsForChannel_result.e") | Some _x11768 -> _x11768
  method set_e _x11768 = _e <- Some _x11768
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPrimaryClientsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter11771 ->         _iter11771#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPrimaryClientsForChannel_result (iprot : Protocol.t) =
  let _str11772 = new getPrimaryClientsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11773,_id11774) = iprot#readFieldBegin in
        if _t11773 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11774 with 
          | 0 -> (if _t11773 = Protocol.T_LIST then
              _str11772#set_success 
                (let (_etype11778,_size11775) = iprot#readListBegin in
                  let _con11779 = (Array.to_list (Array.init _size11775 (fun _ -> (read_simpleChannelClient iprot)))) in
                    iprot#readListEnd; _con11779)
            else
              iprot#skip _t11773)
          | 1 -> (if _t11773 = Protocol.T_STRUCT then
              _str11772#set_e (read_talkException iprot)
            else
              iprot#skip _t11773)
          | _ -> iprot#skip _t11773);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11772

class addBuddyToContact_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "addBuddyToContact_args.buddyMid") | Some _x11780 -> _x11780
  method set_buddyMid _x11780 = _buddyMid <- Some _x11780
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addBuddyToContact_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addBuddyToContact_args (iprot : Protocol.t) =
  let _str11783 = new addBuddyToContact_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11784,_id11785) = iprot#readFieldBegin in
        if _t11784 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11785 with 
          | 1 -> (if _t11784 = Protocol.T_STRING then
              _str11783#set_buddyMid iprot#readString
            else
              iprot#skip _t11784)
          | _ -> iprot#skip _t11784);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11783

class addBuddyToContact_result =
object (self)
  val mutable _success : contactTransition option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "addBuddyToContact_result.success") | Some _x11786 -> _x11786
  method set_success _x11786 = _success <- Some _x11786
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "addBuddyToContact_result.e") | Some _x11787 -> _x11787
  method set_e _x11787 = _e <- Some _x11787
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addBuddyToContact_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addBuddyToContact_result (iprot : Protocol.t) =
  let _str11790 = new addBuddyToContact_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11791,_id11792) = iprot#readFieldBegin in
        if _t11791 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11792 with 
          | 0 -> (if _t11791 = Protocol.T_STRUCT then
              _str11790#set_success (read_contactTransition iprot)
            else
              iprot#skip _t11791)
          | 1 -> (if _t11791 = Protocol.T_STRUCT then
              _str11790#set_e (read_talkException iprot)
            else
              iprot#skip _t11791)
          | _ -> iprot#skip _t11791);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11790

class getGroupMemberMidsForAppPlatform_args =
object (self)
  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "getGroupMemberMidsForAppPlatform_args.groupId") | Some _x11793 -> _x11793
  method set_groupId _x11793 = _groupId <- Some _x11793
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupMemberMidsForAppPlatform_args";
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupMemberMidsForAppPlatform_args (iprot : Protocol.t) =
  let _str11796 = new getGroupMemberMidsForAppPlatform_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11797,_id11798) = iprot#readFieldBegin in
        if _t11797 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11798 with 
          | 1 -> (if _t11797 = Protocol.T_STRING then
              _str11796#set_groupId iprot#readString
            else
              iprot#skip _t11797)
          | _ -> iprot#skip _t11797);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11796

class getGroupMemberMidsForAppPlatform_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupMemberMidsForAppPlatform_result.success") | Some _x11799 -> _x11799
  method set_success _x11799 = _success <- Some _x11799
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupMemberMidsForAppPlatform_result.e") | Some _x11800 -> _x11800
  method set_e _x11800 = _e <- Some _x11800
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupMemberMidsForAppPlatform_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11803 ->         oprot#writeString(_iter11803);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupMemberMidsForAppPlatform_result (iprot : Protocol.t) =
  let _str11804 = new getGroupMemberMidsForAppPlatform_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11805,_id11806) = iprot#readFieldBegin in
        if _t11805 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11806 with 
          | 0 -> (if _t11805 = Protocol.T_LIST then
              _str11804#set_success 
                (let (_etype11810,_size11807) = iprot#readListBegin in
                  let _con11811 = (Array.to_list (Array.init _size11807 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11811)
            else
              iprot#skip _t11805)
          | 1 -> (if _t11805 = Protocol.T_STRUCT then
              _str11804#set_e (read_talkException iprot)
            else
              iprot#skip _t11805)
          | _ -> iprot#skip _t11805);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11804

class getUserLanguage_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserLanguage_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserLanguage_args (iprot : Protocol.t) =
  let _str11814 = new getUserLanguage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11815,_id11816) = iprot#readFieldBegin in
        if _t11815 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11816 with 
          | _ -> iprot#skip _t11815);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11814

class getUserLanguage_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserLanguage_result.success") | Some _x11817 -> _x11817
  method set_success _x11817 = _success <- Some _x11817
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserLanguage_result.e") | Some _x11818 -> _x11818
  method set_e _x11818 = _e <- Some _x11818
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserLanguage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserLanguage_result (iprot : Protocol.t) =
  let _str11821 = new getUserLanguage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11822,_id11823) = iprot#readFieldBegin in
        if _t11822 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11823 with 
          | 0 -> (if _t11822 = Protocol.T_STRING then
              _str11821#set_success iprot#readString
            else
              iprot#skip _t11822)
          | 1 -> (if _t11822 = Protocol.T_STRUCT then
              _str11821#set_e (read_talkException iprot)
            else
              iprot#skip _t11822)
          | _ -> iprot#skip _t11822);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11821

class lookupPaidCall_args =
object (self)
  val mutable _dialedNumber : string option = None
  method get_dialedNumber = _dialedNumber
  method grab_dialedNumber = match _dialedNumber with None->raise (Field_empty "lookupPaidCall_args.dialedNumber") | Some _x11824 -> _x11824
  method set_dialedNumber _x11824 = _dialedNumber <- Some _x11824
  method unset_dialedNumber = _dialedNumber <- None
  method reset_dialedNumber = _dialedNumber <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "lookupPaidCall_args.language") | Some _x11825 -> _x11825
  method set_language _x11825 = _language <- Some _x11825
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _referer : string option = None
  method get_referer = _referer
  method grab_referer = match _referer with None->raise (Field_empty "lookupPaidCall_args.referer") | Some _x11826 -> _x11826
  method set_referer _x11826 = _referer <- Some _x11826
  method unset_referer = _referer <- None
  method reset_referer = _referer <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "lookupPaidCall_args";
    (match _dialedNumber with None -> () | Some _v -> 
      oprot#writeFieldBegin("dialedNumber",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _referer with None -> () | Some _v -> 
      oprot#writeFieldBegin("referer",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_lookupPaidCall_args (iprot : Protocol.t) =
  let _str11829 = new lookupPaidCall_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11830,_id11831) = iprot#readFieldBegin in
        if _t11830 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11831 with 
          | 2 -> (if _t11830 = Protocol.T_STRING then
              _str11829#set_dialedNumber iprot#readString
            else
              iprot#skip _t11830)
          | 3 -> (if _t11830 = Protocol.T_STRING then
              _str11829#set_language iprot#readString
            else
              iprot#skip _t11830)
          | 4 -> (if _t11830 = Protocol.T_STRING then
              _str11829#set_referer iprot#readString
            else
              iprot#skip _t11830)
          | _ -> iprot#skip _t11830);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11829

class lookupPaidCall_result =
object (self)
  val mutable _success : paidCallResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "lookupPaidCall_result.success") | Some _x11832 -> _x11832
  method set_success _x11832 = _success <- Some _x11832
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "lookupPaidCall_result.e") | Some _x11833 -> _x11833
  method set_e _x11833 = _e <- Some _x11833
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "lookupPaidCall_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_lookupPaidCall_result (iprot : Protocol.t) =
  let _str11836 = new lookupPaidCall_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11837,_id11838) = iprot#readFieldBegin in
        if _t11837 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11838 with 
          | 0 -> (if _t11837 = Protocol.T_STRUCT then
              _str11836#set_success (read_paidCallResponse iprot)
            else
              iprot#skip _t11837)
          | 1 -> (if _t11837 = Protocol.T_STRUCT then
              _str11836#set_e (read_talkException iprot)
            else
              iprot#skip _t11837)
          | _ -> iprot#skip _t11837);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11836

class getExtendedProfile_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getExtendedProfile_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getExtendedProfile_args (iprot : Protocol.t) =
  let _str11841 = new getExtendedProfile_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11842,_id11843) = iprot#readFieldBegin in
        if _t11842 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11843 with 
          | _ -> iprot#skip _t11842);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11841

class getExtendedProfile_result =
object (self)
  val mutable _success : extendedProfile option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getExtendedProfile_result.success") | Some _x11844 -> _x11844
  method set_success _x11844 = _success <- Some _x11844
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getExtendedProfile_result.e") | Some _x11845 -> _x11845
  method set_e _x11845 = _e <- Some _x11845
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getExtendedProfile_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getExtendedProfile_result (iprot : Protocol.t) =
  let _str11848 = new getExtendedProfile_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11849,_id11850) = iprot#readFieldBegin in
        if _t11849 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11850 with 
          | 0 -> (if _t11849 = Protocol.T_STRUCT then
              _str11848#set_success (read_extendedProfile iprot)
            else
              iprot#skip _t11849)
          | 1 -> (if _t11849 = Protocol.T_STRUCT then
              _str11848#set_e (read_talkException iprot)
            else
              iprot#skip _t11849)
          | _ -> iprot#skip _t11849);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11848

class getReverseCompactContacts_args =
object (self)
  val mutable _ids : string list option = None
  method get_ids = _ids
  method grab_ids = match _ids with None->raise (Field_empty "getReverseCompactContacts_args.ids") | Some _x11851 -> _x11851
  method set_ids _x11851 = _ids <- Some _x11851
  method unset_ids = _ids <- None
  method reset_ids = _ids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getReverseCompactContacts_args";
    (match _ids with None -> () | Some _v -> 
      oprot#writeFieldBegin("ids",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11854 ->         oprot#writeString(_iter11854);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getReverseCompactContacts_args (iprot : Protocol.t) =
  let _str11855 = new getReverseCompactContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11856,_id11857) = iprot#readFieldBegin in
        if _t11856 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11857 with 
          | 1 -> (if _t11856 = Protocol.T_LIST then
              _str11855#set_ids 
                (let (_etype11861,_size11858) = iprot#readListBegin in
                  let _con11862 = (Array.to_list (Array.init _size11858 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11862)
            else
              iprot#skip _t11856)
          | _ -> iprot#skip _t11856);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11855

class getReverseCompactContacts_result =
object (self)
  val mutable _success : (string,compactContact) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getReverseCompactContacts_result.success") | Some _x11863 -> _x11863
  method set_success _x11863 = _success <- Some _x11863
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getReverseCompactContacts_result.e") | Some _x11864 -> _x11864
  method set_e _x11864 = _e <- Some _x11864
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k v#copy) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getReverseCompactContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter11867 -> fun _viter11868 -> 
        oprot#writeString(_kiter11867);
        _viter11868#write(oprot);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getReverseCompactContacts_result (iprot : Protocol.t) =
  let _str11869 = new getReverseCompactContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11870,_id11871) = iprot#readFieldBegin in
        if _t11870 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11871 with 
          | 0 -> (if _t11870 = Protocol.T_MAP then
              _str11869#set_success 
                (let (_ktype11873,_vtype11874,_size11872) = iprot#readMapBegin in
                let _con11876 = Hashtbl.create _size11872 in
                  for i = 1 to _size11872 do
                    let _k = iprot#readString in
                    let _v = (read_compactContact iprot) in
                      Hashtbl.add _con11876 _k _v
                  done; iprot#readMapEnd; _con11876)
            else
              iprot#skip _t11870)
          | 1 -> (if _t11870 = Protocol.T_STRUCT then
              _str11869#set_e (read_talkException iprot)
            else
              iprot#skip _t11870)
          | _ -> iprot#skip _t11870);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11869

class getPaidCallAdStatus_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPaidCallAdStatus_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPaidCallAdStatus_args (iprot : Protocol.t) =
  let _str11879 = new getPaidCallAdStatus_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11880,_id11881) = iprot#readFieldBegin in
        if _t11880 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11881 with 
          | _ -> iprot#skip _t11880);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11879

class getPaidCallAdStatus_result =
object (self)
  val mutable _success : paidCallAdResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPaidCallAdStatus_result.success") | Some _x11882 -> _x11882
  method set_success _x11882 = _success <- Some _x11882
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPaidCallAdStatus_result.e") | Some _x11883 -> _x11883
  method set_e _x11883 = _e <- Some _x11883
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPaidCallAdStatus_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPaidCallAdStatus_result (iprot : Protocol.t) =
  let _str11886 = new getPaidCallAdStatus_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11887,_id11888) = iprot#readFieldBegin in
        if _t11887 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11888 with 
          | 0 -> (if _t11887 = Protocol.T_STRUCT then
              _str11886#set_success (read_paidCallAdResult iprot)
            else
              iprot#skip _t11887)
          | 1 -> (if _t11887 = Protocol.T_STRUCT then
              _str11886#set_e (read_talkException iprot)
            else
              iprot#skip _t11887)
          | _ -> iprot#skip _t11887);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11886

class findContactByUseridWithoutAbuseBlockForChannel_args =
object (self)
  val mutable _userid : string option = None
  method get_userid = _userid
  method grab_userid = match _userid with None->raise (Field_empty "findContactByUseridWithoutAbuseBlockForChannel_args.userid") | Some _x11889 -> _x11889
  method set_userid _x11889 = _userid <- Some _x11889
  method unset_userid = _userid <- None
  method reset_userid = _userid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByUseridWithoutAbuseBlockForChannel_args";
    (match _userid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByUseridWithoutAbuseBlockForChannel_args (iprot : Protocol.t) =
  let _str11892 = new findContactByUseridWithoutAbuseBlockForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11893,_id11894) = iprot#readFieldBegin in
        if _t11893 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11894 with 
          | 2 -> (if _t11893 = Protocol.T_STRING then
              _str11892#set_userid iprot#readString
            else
              iprot#skip _t11893)
          | _ -> iprot#skip _t11893);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11892

class findContactByUseridWithoutAbuseBlockForChannel_result =
object (self)
  val mutable _success : contact option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findContactByUseridWithoutAbuseBlockForChannel_result.success") | Some _x11895 -> _x11895
  method set_success _x11895 = _success <- Some _x11895
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findContactByUseridWithoutAbuseBlockForChannel_result.e") | Some _x11896 -> _x11896
  method set_e _x11896 = _e <- Some _x11896
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByUseridWithoutAbuseBlockForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByUseridWithoutAbuseBlockForChannel_result (iprot : Protocol.t) =
  let _str11899 = new findContactByUseridWithoutAbuseBlockForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11900,_id11901) = iprot#readFieldBegin in
        if _t11900 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11901 with 
          | 0 -> (if _t11900 = Protocol.T_STRUCT then
              _str11899#set_success (read_contact iprot)
            else
              iprot#skip _t11900)
          | 1 -> (if _t11900 = Protocol.T_STRUCT then
              _str11899#set_e (read_talkException iprot)
            else
              iprot#skip _t11900)
          | _ -> iprot#skip _t11900);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11899

class getGroupMemberMids_args =
object (self)
  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "getGroupMemberMids_args.groupId") | Some _x11902 -> _x11902
  method set_groupId _x11902 = _groupId <- Some _x11902
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupMemberMids_args";
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupMemberMids_args (iprot : Protocol.t) =
  let _str11905 = new getGroupMemberMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11906,_id11907) = iprot#readFieldBegin in
        if _t11906 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11907 with 
          | 1 -> (if _t11906 = Protocol.T_STRING then
              _str11905#set_groupId iprot#readString
            else
              iprot#skip _t11906)
          | _ -> iprot#skip _t11906);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11905

class getGroupMemberMids_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupMemberMids_result.success") | Some _x11908 -> _x11908
  method set_success _x11908 = _success <- Some _x11908
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupMemberMids_result.e") | Some _x11909 -> _x11909
  method set_e _x11909 = _e <- Some _x11909
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupMemberMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11912 ->         oprot#writeString(_iter11912);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupMemberMids_result (iprot : Protocol.t) =
  let _str11913 = new getGroupMemberMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11914,_id11915) = iprot#readFieldBegin in
        if _t11914 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11915 with 
          | 0 -> (if _t11914 = Protocol.T_LIST then
              _str11913#set_success 
                (let (_etype11919,_size11916) = iprot#readListBegin in
                  let _con11920 = (Array.to_list (Array.init _size11916 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11920)
            else
              iprot#skip _t11914)
          | 1 -> (if _t11914 = Protocol.T_STRUCT then
              _str11913#set_e (read_talkException iprot)
            else
              iprot#skip _t11914)
          | _ -> iprot#skip _t11914);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11913

class sendMessageWithoutRelationship_args =
object (self)
  val mutable _message : message option = None
  method get_message = _message
  method grab_message = match _message with None->raise (Field_empty "sendMessageWithoutRelationship_args.message") | Some _x11921 -> _x11921
  method set_message _x11921 = _message <- Some _x11921
  method unset_message = _message <- None
  method reset_message = _message <- None

  method copy =
      let _new = Oo.copy self in
      if _message <> None then
        _new#set_message self#grab_message#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageWithoutRelationship_args";
    (match _message with None -> () | Some _v -> 
      oprot#writeFieldBegin("message",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageWithoutRelationship_args (iprot : Protocol.t) =
  let _str11924 = new sendMessageWithoutRelationship_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11925,_id11926) = iprot#readFieldBegin in
        if _t11925 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11926 with 
          | 2 -> (if _t11925 = Protocol.T_STRUCT then
              _str11924#set_message (read_message iprot)
            else
              iprot#skip _t11925)
          | _ -> iprot#skip _t11925);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11924

class sendMessageWithoutRelationship_result =
object (self)
  val mutable _success : message option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendMessageWithoutRelationship_result.success") | Some _x11927 -> _x11927
  method set_success _x11927 = _success <- Some _x11927
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendMessageWithoutRelationship_result.e") | Some _x11928 -> _x11928
  method set_e _x11928 = _e <- Some _x11928
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageWithoutRelationship_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageWithoutRelationship_result (iprot : Protocol.t) =
  let _str11931 = new sendMessageWithoutRelationship_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11932,_id11933) = iprot#readFieldBegin in
        if _t11932 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11933 with 
          | 0 -> (if _t11932 = Protocol.T_STRUCT then
              _str11931#set_success (read_message iprot)
            else
              iprot#skip _t11932)
          | 1 -> (if _t11932 = Protocol.T_STRUCT then
              _str11931#set_e (read_talkException iprot)
            else
              iprot#skip _t11932)
          | _ -> iprot#skip _t11932);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11931

class displayBuddySubscriberCountInBulk_args =
object (self)
  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "displayBuddySubscriberCountInBulk_args.mids") | Some _x11934 -> _x11934
  method set_mids _x11934 = _mids <- Some _x11934
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "displayBuddySubscriberCountInBulk_args";
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11937 ->         oprot#writeString(_iter11937);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_displayBuddySubscriberCountInBulk_args (iprot : Protocol.t) =
  let _str11938 = new displayBuddySubscriberCountInBulk_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11939,_id11940) = iprot#readFieldBegin in
        if _t11939 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11940 with 
          | 1 -> (if _t11939 = Protocol.T_LIST then
              _str11938#set_mids 
                (let (_etype11944,_size11941) = iprot#readListBegin in
                  let _con11945 = (Array.to_list (Array.init _size11941 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11945)
            else
              iprot#skip _t11939)
          | _ -> iprot#skip _t11939);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11938

class displayBuddySubscriberCountInBulk_result =
object (self)
  val mutable _success : (string,Int64.t) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "displayBuddySubscriberCountInBulk_result.success") | Some _x11946 -> _x11946
  method set_success _x11946 = _success <- Some _x11946
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "displayBuddySubscriberCountInBulk_result.e") | Some _x11947 -> _x11947
  method set_e _x11947 = _e <- Some _x11947
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "displayBuddySubscriberCountInBulk_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_I64,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter11950 -> fun _viter11951 -> 
        oprot#writeString(_kiter11950);
        oprot#writeI64(_viter11951);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_displayBuddySubscriberCountInBulk_result (iprot : Protocol.t) =
  let _str11952 = new displayBuddySubscriberCountInBulk_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11953,_id11954) = iprot#readFieldBegin in
        if _t11953 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11954 with 
          | 0 -> (if _t11953 = Protocol.T_MAP then
              _str11952#set_success 
                (let (_ktype11956,_vtype11957,_size11955) = iprot#readMapBegin in
                let _con11959 = Hashtbl.create _size11955 in
                  for i = 1 to _size11955 do
                    let _k = iprot#readString in
                    let _v = iprot#readI64 in
                      Hashtbl.add _con11959 _k _v
                  done; iprot#readMapEnd; _con11959)
            else
              iprot#skip _t11953)
          | 1 -> (if _t11953 = Protocol.T_STRUCT then
              _str11952#set_e (read_talkException iprot)
            else
              iprot#skip _t11953)
          | _ -> iprot#skip _t11953);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11952

class lookupRoomMembers_args =
object (self)
  val mutable _roomId : string option = None
  method get_roomId = _roomId
  method grab_roomId = match _roomId with None->raise (Field_empty "lookupRoomMembers_args.roomId") | Some _x11960 -> _x11960
  method set_roomId _x11960 = _roomId <- Some _x11960
  method unset_roomId = _roomId <- None
  method reset_roomId = _roomId <- None

  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "lookupRoomMembers_args.mids") | Some _x11961 -> _x11961
  method set_mids _x11961 = _mids <- Some _x11961
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "lookupRoomMembers_args";
    (match _roomId with None -> () | Some _v -> 
      oprot#writeFieldBegin("roomId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11964 ->         oprot#writeString(_iter11964);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_lookupRoomMembers_args (iprot : Protocol.t) =
  let _str11965 = new lookupRoomMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11966,_id11967) = iprot#readFieldBegin in
        if _t11966 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11967 with 
          | 1 -> (if _t11966 = Protocol.T_STRING then
              _str11965#set_roomId iprot#readString
            else
              iprot#skip _t11966)
          | 2 -> (if _t11966 = Protocol.T_LIST then
              _str11965#set_mids 
                (let (_etype11971,_size11968) = iprot#readListBegin in
                  let _con11972 = (Array.to_list (Array.init _size11968 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11972)
            else
              iprot#skip _t11966)
          | _ -> iprot#skip _t11966);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11965

class lookupRoomMembers_result =
object (self)
  val mutable _success : simpleChannelContact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "lookupRoomMembers_result.success") | Some _x11973 -> _x11973
  method set_success _x11973 = _success <- Some _x11973
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "lookupRoomMembers_result.e") | Some _x11974 -> _x11974
  method set_e _x11974 = _e <- Some _x11974
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "lookupRoomMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter11977 ->         _iter11977#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_lookupRoomMembers_result (iprot : Protocol.t) =
  let _str11978 = new lookupRoomMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11979,_id11980) = iprot#readFieldBegin in
        if _t11979 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11980 with 
          | 0 -> (if _t11979 = Protocol.T_LIST then
              _str11978#set_success 
                (let (_etype11984,_size11981) = iprot#readListBegin in
                  let _con11985 = (Array.to_list (Array.init _size11981 (fun _ -> (read_simpleChannelContact iprot)))) in
                    iprot#readListEnd; _con11985)
            else
              iprot#skip _t11979)
          | 1 -> (if _t11979 = Protocol.T_STRUCT then
              _str11978#set_e (read_talkException iprot)
            else
              iprot#skip _t11979)
          | _ -> iprot#skip _t11979);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11978

class getFavoriteMidsForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFavoriteMidsForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFavoriteMidsForChannel_args (iprot : Protocol.t) =
  let _str11988 = new getFavoriteMidsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11989,_id11990) = iprot#readFieldBegin in
        if _t11989 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11990 with 
          | _ -> iprot#skip _t11989);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11988

class getFavoriteMidsForChannel_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getFavoriteMidsForChannel_result.success") | Some _x11991 -> _x11991
  method set_success _x11991 = _success <- Some _x11991
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getFavoriteMidsForChannel_result.e") | Some _x11992 -> _x11992
  method set_e _x11992 = _e <- Some _x11992
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFavoriteMidsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11995 ->         oprot#writeString(_iter11995);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFavoriteMidsForChannel_result (iprot : Protocol.t) =
  let _str11996 = new getFavoriteMidsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11997,_id11998) = iprot#readFieldBegin in
        if _t11997 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11998 with 
          | 0 -> (if _t11997 = Protocol.T_LIST then
              _str11996#set_success 
                (let (_etype12002,_size11999) = iprot#readListBegin in
                  let _con12003 = (Array.to_list (Array.init _size11999 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con12003)
            else
              iprot#skip _t11997)
          | 1 -> (if _t11997 = Protocol.T_STRUCT then
              _str11996#set_e (read_talkException iprot)
            else
              iprot#skip _t11997)
          | _ -> iprot#skip _t11997);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11996

class getAllContactIdsForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllContactIdsForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllContactIdsForChannel_args (iprot : Protocol.t) =
  let _str12006 = new getAllContactIdsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12007,_id12008) = iprot#readFieldBegin in
        if _t12007 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12008 with 
          | _ -> iprot#skip _t12007);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12006

class getAllContactIdsForChannel_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getAllContactIdsForChannel_result.success") | Some _x12009 -> _x12009
  method set_success _x12009 = _success <- Some _x12009
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getAllContactIdsForChannel_result.e") | Some _x12010 -> _x12010
  method set_e _x12010 = _e <- Some _x12010
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllContactIdsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter12013 ->         oprot#writeString(_iter12013);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllContactIdsForChannel_result (iprot : Protocol.t) =
  let _str12014 = new getAllContactIdsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12015,_id12016) = iprot#readFieldBegin in
        if _t12015 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12016 with 
          | 0 -> (if _t12015 = Protocol.T_LIST then
              _str12014#set_success 
                (let (_etype12020,_size12017) = iprot#readListBegin in
                  let _con12021 = (Array.to_list (Array.init _size12017 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con12021)
            else
              iprot#skip _t12015)
          | 1 -> (if _t12015 = Protocol.T_STRUCT then
              _str12014#set_e (read_talkException iprot)
            else
              iprot#skip _t12015)
          | _ -> iprot#skip _t12015);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12014

class displayBuddySubscriberCount_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "displayBuddySubscriberCount_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_displayBuddySubscriberCount_args (iprot : Protocol.t) =
  let _str12024 = new displayBuddySubscriberCount_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12025,_id12026) = iprot#readFieldBegin in
        if _t12025 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12026 with 
          | _ -> iprot#skip _t12025);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12024

class displayBuddySubscriberCount_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "displayBuddySubscriberCount_result.success") | Some _x12027 -> _x12027
  method set_success _x12027 = _success <- Some _x12027
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "displayBuddySubscriberCount_result.e") | Some _x12028 -> _x12028
  method set_e _x12028 = _e <- Some _x12028
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "displayBuddySubscriberCount_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_displayBuddySubscriberCount_result (iprot : Protocol.t) =
  let _str12031 = new displayBuddySubscriberCount_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12032,_id12033) = iprot#readFieldBegin in
        if _t12032 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12033 with 
          | 0 -> (if _t12032 = Protocol.T_I64 then
              _str12031#set_success iprot#readI64
            else
              iprot#skip _t12032)
          | 1 -> (if _t12032 = Protocol.T_STRUCT then
              _str12031#set_e (read_talkException iprot)
            else
              iprot#skip _t12032)
          | _ -> iprot#skip _t12032);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12031

class getProfileForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProfileForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProfileForChannel_args (iprot : Protocol.t) =
  let _str12036 = new getProfileForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12037,_id12038) = iprot#readFieldBegin in
        if _t12037 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12038 with 
          | _ -> iprot#skip _t12037);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12036

class getProfileForChannel_result =
object (self)
  val mutable _success : profile option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProfileForChannel_result.success") | Some _x12039 -> _x12039
  method set_success _x12039 = _success <- Some _x12039
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getProfileForChannel_result.e") | Some _x12040 -> _x12040
  method set_e _x12040 = _e <- Some _x12040
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProfileForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProfileForChannel_result (iprot : Protocol.t) =
  let _str12043 = new getProfileForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12044,_id12045) = iprot#readFieldBegin in
        if _t12044 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12045 with 
          | 0 -> (if _t12044 = Protocol.T_STRUCT then
              _str12043#set_success (read_profile iprot)
            else
              iprot#skip _t12044)
          | 1 -> (if _t12044 = Protocol.T_STRUCT then
              _str12043#set_e (read_talkException iprot)
            else
              iprot#skip _t12044)
          | _ -> iprot#skip _t12044);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12043

class getUserTickets_args =
object (self)
  val mutable _userMids : string list option = None
  method get_userMids = _userMids
  method grab_userMids = match _userMids with None->raise (Field_empty "getUserTickets_args.userMids") | Some _x12046 -> _x12046
  method set_userMids _x12046 = _userMids <- Some _x12046
  method unset_userMids = _userMids <- None
  method reset_userMids = _userMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserTickets_args";
    (match _userMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("userMids",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter12049 ->         oprot#writeString(_iter12049);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserTickets_args (iprot : Protocol.t) =
  let _str12050 = new getUserTickets_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12051,_id12052) = iprot#readFieldBegin in
        if _t12051 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12052 with 
          | 1 -> (if _t12051 = Protocol.T_LIST then
              _str12050#set_userMids 
                (let (_etype12056,_size12053) = iprot#readListBegin in
                  let _con12057 = (Array.to_list (Array.init _size12053 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con12057)
            else
              iprot#skip _t12051)
          | _ -> iprot#skip _t12051);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12050

class getUserTickets_result =
object (self)
  val mutable _success : userTicketResponse list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserTickets_result.success") | Some _x12058 -> _x12058
  method set_success _x12058 = _success <- Some _x12058
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserTickets_result.e") | Some _x12059 -> _x12059
  method set_e _x12059 = _e <- Some _x12059
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserTickets_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter12062 ->         _iter12062#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserTickets_result (iprot : Protocol.t) =
  let _str12063 = new getUserTickets_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12064,_id12065) = iprot#readFieldBegin in
        if _t12064 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12065 with 
          | 0 -> (if _t12064 = Protocol.T_LIST then
              _str12063#set_success 
                (let (_etype12069,_size12066) = iprot#readListBegin in
                  let _con12070 = (Array.to_list (Array.init _size12066 (fun _ -> (read_userTicketResponse iprot)))) in
                    iprot#readListEnd; _con12070)
            else
              iprot#skip _t12064)
          | 1 -> (if _t12064 = Protocol.T_STRUCT then
              _str12063#set_e (read_talkException iprot)
            else
              iprot#skip _t12064)
          | _ -> iprot#skip _t12064);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12063

class getOAFriendMids_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getOAFriendMids_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getOAFriendMids_args (iprot : Protocol.t) =
  let _str12073 = new getOAFriendMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12074,_id12075) = iprot#readFieldBegin in
        if _t12074 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12075 with 
          | _ -> iprot#skip _t12074);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12073

class getOAFriendMids_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getOAFriendMids_result.success") | Some _x12076 -> _x12076
  method set_success _x12076 = _success <- Some _x12076
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getOAFriendMids_result.e") | Some _x12077 -> _x12077
  method set_e _x12077 = _e <- Some _x12077
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getOAFriendMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter12080 ->         oprot#writeString(_iter12080);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getOAFriendMids_result (iprot : Protocol.t) =
  let _str12081 = new getOAFriendMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12082,_id12083) = iprot#readFieldBegin in
        if _t12082 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12083 with 
          | 0 -> (if _t12082 = Protocol.T_LIST then
              _str12081#set_success 
                (let (_etype12087,_size12084) = iprot#readListBegin in
                  let _con12088 = (Array.to_list (Array.init _size12084 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con12088)
            else
              iprot#skip _t12082)
          | 1 -> (if _t12082 = Protocol.T_STRUCT then
              _str12081#set_e (read_talkException iprot)
            else
              iprot#skip _t12082)
          | _ -> iprot#skip _t12082);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12081

class searchPaidCallUserRate_args =
object (self)
  val mutable _countryCode : string option = None
  method get_countryCode = _countryCode
  method grab_countryCode = match _countryCode with None->raise (Field_empty "searchPaidCallUserRate_args.countryCode") | Some _x12089 -> _x12089
  method set_countryCode _x12089 = _countryCode <- Some _x12089
  method unset_countryCode = _countryCode <- None
  method reset_countryCode = _countryCode <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "searchPaidCallUserRate_args.language") | Some _x12090 -> _x12090
  method set_language _x12090 = _language <- Some _x12090
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "searchPaidCallUserRate_args";
    (match _countryCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("countryCode",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_searchPaidCallUserRate_args (iprot : Protocol.t) =
  let _str12093 = new searchPaidCallUserRate_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12094,_id12095) = iprot#readFieldBegin in
        if _t12094 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12095 with 
          | 2 -> (if _t12094 = Protocol.T_STRING then
              _str12093#set_countryCode iprot#readString
            else
              iprot#skip _t12094)
          | 3 -> (if _t12094 = Protocol.T_STRING then
              _str12093#set_language iprot#readString
            else
              iprot#skip _t12094)
          | _ -> iprot#skip _t12094);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12093

class searchPaidCallUserRate_result =
object (self)
  val mutable _success : paidCallUserRate list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "searchPaidCallUserRate_result.success") | Some _x12096 -> _x12096
  method set_success _x12096 = _success <- Some _x12096
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "searchPaidCallUserRate_result.e") | Some _x12097 -> _x12097
  method set_e _x12097 = _e <- Some _x12097
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "searchPaidCallUserRate_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter12100 ->         _iter12100#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_searchPaidCallUserRate_result (iprot : Protocol.t) =
  let _str12101 = new searchPaidCallUserRate_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12102,_id12103) = iprot#readFieldBegin in
        if _t12102 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12103 with 
          | 0 -> (if _t12102 = Protocol.T_LIST then
              _str12101#set_success 
                (let (_etype12107,_size12104) = iprot#readListBegin in
                  let _con12108 = (Array.to_list (Array.init _size12104 (fun _ -> (read_paidCallUserRate iprot)))) in
                    iprot#readListEnd; _con12108)
            else
              iprot#skip _t12102)
          | 1 -> (if _t12102 = Protocol.T_STRUCT then
              _str12101#set_e (read_talkException iprot)
            else
              iprot#skip _t12102)
          | _ -> iprot#skip _t12102);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12101

class getJoinedGroupIdsForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinedGroupIdsForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinedGroupIdsForChannel_args (iprot : Protocol.t) =
  let _str12111 = new getJoinedGroupIdsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12112,_id12113) = iprot#readFieldBegin in
        if _t12112 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12113 with 
          | _ -> iprot#skip _t12112);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12111

class getJoinedGroupIdsForChannel_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getJoinedGroupIdsForChannel_result.success") | Some _x12114 -> _x12114
  method set_success _x12114 = _success <- Some _x12114
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getJoinedGroupIdsForChannel_result.e") | Some _x12115 -> _x12115
  method set_e _x12115 = _e <- Some _x12115
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinedGroupIdsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter12118 ->         oprot#writeString(_iter12118);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinedGroupIdsForChannel_result (iprot : Protocol.t) =
  let _str12119 = new getJoinedGroupIdsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12120,_id12121) = iprot#readFieldBegin in
        if _t12120 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12121 with 
          | 0 -> (if _t12120 = Protocol.T_LIST then
              _str12119#set_success 
                (let (_etype12125,_size12122) = iprot#readListBegin in
                  let _con12126 = (Array.to_list (Array.init _size12122 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con12126)
            else
              iprot#skip _t12120)
          | 1 -> (if _t12120 = Protocol.T_STRUCT then
              _str12119#set_e (read_talkException iprot)
            else
              iprot#skip _t12120)
          | _ -> iprot#skip _t12120);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12119

class acquireGroupCallRoute_args =
object (self)
  val mutable _chatMid : string option = None
  method get_chatMid = _chatMid
  method grab_chatMid = match _chatMid with None->raise (Field_empty "acquireGroupCallRoute_args.chatMid") | Some _x12127 -> _x12127
  method set_chatMid _x12127 = _chatMid <- Some _x12127
  method unset_chatMid = _chatMid <- None
  method reset_chatMid = _chatMid <- None

  val mutable _mediaType : GroupCallMediaType.t option = None
  method get_mediaType = _mediaType
  method grab_mediaType = match _mediaType with None->raise (Field_empty "acquireGroupCallRoute_args.mediaType") | Some _x12128 -> _x12128
  method set_mediaType _x12128 = _mediaType <- Some _x12128
  method unset_mediaType = _mediaType <- None
  method reset_mediaType = _mediaType <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquireGroupCallRoute_args";
    (match _chatMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mediaType with None -> () | Some _v -> 
      oprot#writeFieldBegin("mediaType",Protocol.T_I32,3);
      oprot#writeI32(GroupCallMediaType.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquireGroupCallRoute_args (iprot : Protocol.t) =
  let _str12131 = new acquireGroupCallRoute_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12132,_id12133) = iprot#readFieldBegin in
        if _t12132 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12133 with 
          | 2 -> (if _t12132 = Protocol.T_STRING then
              _str12131#set_chatMid iprot#readString
            else
              iprot#skip _t12132)
          | 3 -> (if _t12132 = Protocol.T_I32 then
              _str12131#set_mediaType (GroupCallMediaType.of_i iprot#readI32)
            else
              iprot#skip _t12132)
          | _ -> iprot#skip _t12132);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12131

class acquireGroupCallRoute_result =
object (self)
  val mutable _success : groupCallRoute option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "acquireGroupCallRoute_result.success") | Some _x12134 -> _x12134
  method set_success _x12134 = _success <- Some _x12134
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "acquireGroupCallRoute_result.e") | Some _x12135 -> _x12135
  method set_e _x12135 = _e <- Some _x12135
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquireGroupCallRoute_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquireGroupCallRoute_result (iprot : Protocol.t) =
  let _str12138 = new acquireGroupCallRoute_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12139,_id12140) = iprot#readFieldBegin in
        if _t12139 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12140 with 
          | 0 -> (if _t12139 = Protocol.T_STRUCT then
              _str12138#set_success (read_groupCallRoute iprot)
            else
              iprot#skip _t12139)
          | 1 -> (if _t12139 = Protocol.T_STRUCT then
              _str12138#set_e (read_talkException iprot)
            else
              iprot#skip _t12139)
          | _ -> iprot#skip _t12139);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12138

class getUserMidsWhoAddedMe_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserMidsWhoAddedMe_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserMidsWhoAddedMe_args (iprot : Protocol.t) =
  let _str12143 = new getUserMidsWhoAddedMe_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12144,_id12145) = iprot#readFieldBegin in
        if _t12144 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12145 with 
          | _ -> iprot#skip _t12144);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12143

class getUserMidsWhoAddedMe_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserMidsWhoAddedMe_result.success") | Some _x12146 -> _x12146
  method set_success _x12146 = _success <- Some _x12146
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserMidsWhoAddedMe_result.e") | Some _x12147 -> _x12147
  method set_e _x12147 = _e <- Some _x12147
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserMidsWhoAddedMe_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter12150 ->         oprot#writeString(_iter12150);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserMidsWhoAddedMe_result (iprot : Protocol.t) =
  let _str12151 = new getUserMidsWhoAddedMe_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12152,_id12153) = iprot#readFieldBegin in
        if _t12152 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12153 with 
          | 0 -> (if _t12152 = Protocol.T_LIST then
              _str12151#set_success 
                (let (_etype12157,_size12154) = iprot#readListBegin in
                  let _con12158 = (Array.to_list (Array.init _size12154 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con12158)
            else
              iprot#skip _t12152)
          | 1 -> (if _t12152 = Protocol.T_STRUCT then
              _str12151#set_e (read_talkException iprot)
            else
              iprot#skip _t12152)
          | _ -> iprot#skip _t12152);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12151

class getIdentityCredential_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getIdentityCredential_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getIdentityCredential_args (iprot : Protocol.t) =
  let _str12161 = new getIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12162,_id12163) = iprot#readFieldBegin in
        if _t12162 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12163 with 
          | _ -> iprot#skip _t12162);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12161

class getIdentityCredential_result =
object (self)
  val mutable _success : identityCredential option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getIdentityCredential_result.success") | Some _x12164 -> _x12164
  method set_success _x12164 = _success <- Some _x12164
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getIdentityCredential_result.e") | Some _x12165 -> _x12165
  method set_e _x12165 = _e <- Some _x12165
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getIdentityCredential_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getIdentityCredential_result (iprot : Protocol.t) =
  let _str12168 = new getIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12169,_id12170) = iprot#readFieldBegin in
        if _t12169 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12170 with 
          | 0 -> (if _t12169 = Protocol.T_STRUCT then
              _str12168#set_success (read_identityCredential iprot)
            else
              iprot#skip _t12169)
          | 1 -> (if _t12169 = Protocol.T_STRUCT then
              _str12168#set_e (read_talkException iprot)
            else
              iprot#skip _t12169)
          | _ -> iprot#skip _t12169);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12168

class addOperationForChannel_args =
object (self)
  val mutable _opType : OpType.t option = None
  method get_opType = _opType
  method grab_opType = match _opType with None->raise (Field_empty "addOperationForChannel_args.opType") | Some _x12171 -> _x12171
  method set_opType _x12171 = _opType <- Some _x12171
  method unset_opType = _opType <- None
  method reset_opType = _opType <- None

  val mutable _param1 : string option = None
  method get_param1 = _param1
  method grab_param1 = match _param1 with None->raise (Field_empty "addOperationForChannel_args.param1") | Some _x12172 -> _x12172
  method set_param1 _x12172 = _param1 <- Some _x12172
  method unset_param1 = _param1 <- None
  method reset_param1 = _param1 <- None

  val mutable _param2 : string option = None
  method get_param2 = _param2
  method grab_param2 = match _param2 with None->raise (Field_empty "addOperationForChannel_args.param2") | Some _x12173 -> _x12173
  method set_param2 _x12173 = _param2 <- Some _x12173
  method unset_param2 = _param2 <- None
  method reset_param2 = _param2 <- None

  val mutable _param3 : string option = None
  method get_param3 = _param3
  method grab_param3 = match _param3 with None->raise (Field_empty "addOperationForChannel_args.param3") | Some _x12174 -> _x12174
  method set_param3 _x12174 = _param3 <- Some _x12174
  method unset_param3 = _param3 <- None
  method reset_param3 = _param3 <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addOperationForChannel_args";
    (match _opType with None -> () | Some _v -> 
      oprot#writeFieldBegin("opType",Protocol.T_I32,1);
      oprot#writeI32(OpType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _param1 with None -> () | Some _v -> 
      oprot#writeFieldBegin("param1",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _param2 with None -> () | Some _v -> 
      oprot#writeFieldBegin("param2",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _param3 with None -> () | Some _v -> 
      oprot#writeFieldBegin("param3",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addOperationForChannel_args (iprot : Protocol.t) =
  let _str12177 = new addOperationForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12178,_id12179) = iprot#readFieldBegin in
        if _t12178 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12179 with 
          | 1 -> (if _t12178 = Protocol.T_I32 then
              _str12177#set_opType (OpType.of_i iprot#readI32)
            else
              iprot#skip _t12178)
          | 2 -> (if _t12178 = Protocol.T_STRING then
              _str12177#set_param1 iprot#readString
            else
              iprot#skip _t12178)
          | 3 -> (if _t12178 = Protocol.T_STRING then
              _str12177#set_param2 iprot#readString
            else
              iprot#skip _t12178)
          | 4 -> (if _t12178 = Protocol.T_STRING then
              _str12177#set_param3 iprot#readString
            else
              iprot#skip _t12178)
          | _ -> iprot#skip _t12178);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12177

class addOperationForChannel_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "addOperationForChannel_result.e") | Some _x12180 -> _x12180
  method set_e _x12180 = _e <- Some _x12180
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addOperationForChannel_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addOperationForChannel_result (iprot : Protocol.t) =
  let _str12183 = new addOperationForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12184,_id12185) = iprot#readFieldBegin in
        if _t12184 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12185 with 
          | 1 -> (if _t12184 = Protocol.T_STRUCT then
              _str12183#set_e (read_talkException iprot)
            else
              iprot#skip _t12184)
          | _ -> iprot#skip _t12184);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12183

class getSimpleChannelContacts_args =
object (self)
  val mutable _ids : string list option = None
  method get_ids = _ids
  method grab_ids = match _ids with None->raise (Field_empty "getSimpleChannelContacts_args.ids") | Some _x12186 -> _x12186
  method set_ids _x12186 = _ids <- Some _x12186
  method unset_ids = _ids <- None
  method reset_ids = _ids <- None

  val mutable _statusSticonFallbackDisabled : bool option = None
  method get_statusSticonFallbackDisabled = _statusSticonFallbackDisabled
  method grab_statusSticonFallbackDisabled = match _statusSticonFallbackDisabled with None->raise (Field_empty "getSimpleChannelContacts_args.statusSticonFallbackDisabled") | Some _x12187 -> _x12187
  method set_statusSticonFallbackDisabled _x12187 = _statusSticonFallbackDisabled <- Some _x12187
  method unset_statusSticonFallbackDisabled = _statusSticonFallbackDisabled <- None
  method reset_statusSticonFallbackDisabled = _statusSticonFallbackDisabled <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSimpleChannelContacts_args";
    (match _ids with None -> () | Some _v -> 
      oprot#writeFieldBegin("ids",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter12190 ->         oprot#writeString(_iter12190);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _statusSticonFallbackDisabled with None -> () | Some _v -> 
      oprot#writeFieldBegin("statusSticonFallbackDisabled",Protocol.T_BOOL,2);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSimpleChannelContacts_args (iprot : Protocol.t) =
  let _str12191 = new getSimpleChannelContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12192,_id12193) = iprot#readFieldBegin in
        if _t12192 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12193 with 
          | 1 -> (if _t12192 = Protocol.T_LIST then
              _str12191#set_ids 
                (let (_etype12197,_size12194) = iprot#readListBegin in
                  let _con12198 = (Array.to_list (Array.init _size12194 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con12198)
            else
              iprot#skip _t12192)
          | 2 -> (if _t12192 = Protocol.T_BOOL then
              _str12191#set_statusSticonFallbackDisabled iprot#readBool
            else
              iprot#skip _t12192)
          | _ -> iprot#skip _t12192);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12191

class getSimpleChannelContacts_result =
object (self)
  val mutable _success : simpleChannelContact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSimpleChannelContacts_result.success") | Some _x12199 -> _x12199
  method set_success _x12199 = _success <- Some _x12199
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSimpleChannelContacts_result.e") | Some _x12200 -> _x12200
  method set_e _x12200 = _e <- Some _x12200
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSimpleChannelContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter12203 ->         _iter12203#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSimpleChannelContacts_result (iprot : Protocol.t) =
  let _str12204 = new getSimpleChannelContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12205,_id12206) = iprot#readFieldBegin in
        if _t12205 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12206 with 
          | 0 -> (if _t12205 = Protocol.T_LIST then
              _str12204#set_success 
                (let (_etype12210,_size12207) = iprot#readListBegin in
                  let _con12211 = (Array.to_list (Array.init _size12207 (fun _ -> (read_simpleChannelContact iprot)))) in
                    iprot#readListEnd; _con12211)
            else
              iprot#skip _t12205)
          | 1 -> (if _t12205 = Protocol.T_STRUCT then
              _str12204#set_e (read_talkException iprot)
            else
              iprot#skip _t12205)
          | _ -> iprot#skip _t12205);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12204

class getUserLastSentMessageTimeStamp_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "getUserLastSentMessageTimeStamp_args.mid") | Some _x12212 -> _x12212
  method set_mid _x12212 = _mid <- Some _x12212
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserLastSentMessageTimeStamp_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserLastSentMessageTimeStamp_args (iprot : Protocol.t) =
  let _str12215 = new getUserLastSentMessageTimeStamp_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12216,_id12217) = iprot#readFieldBegin in
        if _t12216 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12217 with 
          | 1 -> (if _t12216 = Protocol.T_STRING then
              _str12215#set_mid iprot#readString
            else
              iprot#skip _t12216)
          | _ -> iprot#skip _t12216);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12215

class getUserLastSentMessageTimeStamp_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserLastSentMessageTimeStamp_result.success") | Some _x12218 -> _x12218
  method set_success _x12218 = _success <- Some _x12218
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserLastSentMessageTimeStamp_result.e") | Some _x12219 -> _x12219
  method set_e _x12219 = _e <- Some _x12219
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserLastSentMessageTimeStamp_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserLastSentMessageTimeStamp_result (iprot : Protocol.t) =
  let _str12222 = new getUserLastSentMessageTimeStamp_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12223,_id12224) = iprot#readFieldBegin in
        if _t12223 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id12224 with 
          | 0 -> (if _t12223 = Protocol.T_I64 then
              _str12222#set_success iprot#readI64
            else
              iprot#skip _t12223)
          | 1 -> (if _t12223 = Protocol.T_STRUCT then
              _str12222#set_e (read_talkException iprot)
            else
              iprot#skip _t12223)
          | _ -> iprot#skip _t12223);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str12222

class virtual iface =
object (self)
  method virtual getUserStatus : string option -> UserStatus.t
  method virtual updateProfileAttributeForChannel : ProfileAttribute.t option -> string option -> unit
  method virtual updateExtendedProfileAttribute : ExtendedProfileAttribute.t option -> extendedProfile option -> unit
  method virtual getAllSimpleChannelContacts : bool option -> simpleChannelContact list
  method virtual getUserIdentities : (RegistrationType.t,string) Hashtbl.t
  method virtual markPaidCallAd : string option -> string option -> bool option -> paidCallDialing
  method virtual isGroupMember : string option -> bool
  method virtual getPhoneInfoFromPhoneNumber : string option -> string option -> phoneInfoForChannel
  method virtual redeemPaidCallVoucher : string option -> string option -> paidCallRedeemResult
  method virtual getPreferredDisplayName : string list option -> (string,string) Hashtbl.t
  method virtual getContactsForChannel : string list option -> contact list
  method virtual getCallCreditProducts : PaymentType.t option -> PaymentPgType.t option -> string option -> string option -> coinProductItem list
  method virtual getCompactContacts : Int64.t option -> compactContact list
  method virtual notifyNotiCenterEvent : notiCenterEventData option -> unit
  method virtual isInContact : string option -> bool
  method virtual lookupGroupMembers : string option -> string list option -> simpleChannelContact list
  method virtual getRoomInformation : string option -> room
  method virtual getGroupCall : string option -> groupCall
  method virtual isAllowSecondaryDeviceLogin : bool
  method virtual getPrimaryClientForChannel : simpleChannelClient
  method virtual createRoomWithBuddy : Int32.t option -> string option -> string list option -> room
  method virtual getDisplayName : string option -> string
  method virtual getPaidCallMetadata : string option -> paidCallMetadataResult
  method virtual getMid : string
  method virtual getUserCountryForBilling : string option -> string option -> string
  method virtual getFavoriteGroupIdsForChannel : string list
  method virtual getPaidCallHistory : Int64.t option -> Int32.t option -> string option -> paidCallHistoryResult
  method virtual sendPinCodeOperation : string option -> unit
  method virtual inviteIntoGroupCall : string option -> string list option -> GroupCallMediaType.t option -> unit
  method virtual getFriendMids : string list
  method virtual getMetaProfile : metaProfile
  method virtual sendMessageForChannel : message option -> message
  method virtual activeBuddySubscriberCount : Int64.t
  method virtual getCallCreditPurchaseHistory : coinHistoryCondition option -> coinHistoryResult
  method virtual isRoomMember : string option -> bool
  method virtual sendSystemOAMessage : message option -> message
  method virtual acquirePaidCallRoute : PaidCallType.t option -> string option -> string option -> string option -> bool option -> string option -> string option -> paidCallResponse
  method virtual getGroupsForChannel : string list option -> group list
  method virtual getUserCreateTime : Int64.t
  method virtual registerChannelCP : string option -> string option -> string
  method virtual reserveCallCreditPurchase : coinPurchaseReservation option -> paymentReservationResult
  method virtual acquirePaidCallCurrencyExchangeRate : string option -> paidCallCurrencyExchangeRate list
  method virtual getRoomMemberMidsForAppPlatform : string option -> string list
  method virtual getPaidCallBalanceList : string option -> paidCallBalance list
  method virtual getPersonalInfos : (PersonalInfo.t,bool) Hashtbl.t option -> (PersonalInfo.t,string) Hashtbl.t
  method virtual getPrimaryClientsForChannel : string list option -> simpleChannelClient list
  method virtual addBuddyToContact : string option -> contactTransition
  method virtual getGroupMemberMidsForAppPlatform : string option -> string list
  method virtual getUserLanguage : string
  method virtual lookupPaidCall : string option -> string option -> string option -> paidCallResponse
  method virtual getExtendedProfile : extendedProfile
  method virtual getReverseCompactContacts : string list option -> (string,compactContact) Hashtbl.t
  method virtual getPaidCallAdStatus : paidCallAdResult
  method virtual findContactByUseridWithoutAbuseBlockForChannel : string option -> contact
  method virtual getGroupMemberMids : string option -> string list
  method virtual sendMessageWithoutRelationship : message option -> message
  method virtual displayBuddySubscriberCountInBulk : string list option -> (string,Int64.t) Hashtbl.t
  method virtual lookupRoomMembers : string option -> string list option -> simpleChannelContact list
  method virtual getFavoriteMidsForChannel : string list
  method virtual getAllContactIdsForChannel : string list
  method virtual displayBuddySubscriberCount : Int64.t
  method virtual getProfileForChannel : profile
  method virtual getUserTickets : string list option -> userTicketResponse list
  method virtual getOAFriendMids : string list
  method virtual searchPaidCallUserRate : string option -> string option -> paidCallUserRate list
  method virtual getJoinedGroupIdsForChannel : string list
  method virtual acquireGroupCallRoute : string option -> GroupCallMediaType.t option -> groupCallRoute
  method virtual getUserMidsWhoAddedMe : string list
  method virtual getIdentityCredential : identityCredential
  method virtual addOperationForChannel : OpType.t option -> string option -> string option -> string option -> unit
  method virtual getSimpleChannelContacts : string list option -> bool option -> simpleChannelContact list
  method virtual getUserLastSentMessageTimeStamp : string option -> Int64.t
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method getUserStatus mid = 
    self#send_getUserStatus mid;
    self#recv_getUserStatus
  method private send_getUserStatus mid = 
    oprot#writeMessageBegin ("getUserStatus", Protocol.CALL, seqid);
    let args = new getUserStatus_args in
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserStatus  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserStatus_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserStatus failed: unknown result")))
  method updateProfileAttributeForChannel profileAttribute value = 
    self#send_updateProfileAttributeForChannel profileAttribute value;
    self#recv_updateProfileAttributeForChannel
  method private send_updateProfileAttributeForChannel profileAttribute value = 
    oprot#writeMessageBegin ("updateProfileAttributeForChannel", Protocol.CALL, seqid);
    let args = new updateProfileAttributeForChannel_args in
      args#set_profileAttribute profileAttribute;
      args#set_value value;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateProfileAttributeForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateProfileAttributeForChannel_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateExtendedProfileAttribute attr extendedProfile = 
    self#send_updateExtendedProfileAttribute attr extendedProfile;
    self#recv_updateExtendedProfileAttribute
  method private send_updateExtendedProfileAttribute attr extendedProfile = 
    oprot#writeMessageBegin ("updateExtendedProfileAttribute", Protocol.CALL, seqid);
    let args = new updateExtendedProfileAttribute_args in
      args#set_attr attr;
      args#set_extendedProfile extendedProfile;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateExtendedProfileAttribute  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateExtendedProfileAttribute_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method getAllSimpleChannelContacts statusSticonFallbackDisabled = 
    self#send_getAllSimpleChannelContacts statusSticonFallbackDisabled;
    self#recv_getAllSimpleChannelContacts
  method private send_getAllSimpleChannelContacts statusSticonFallbackDisabled = 
    oprot#writeMessageBegin ("getAllSimpleChannelContacts", Protocol.CALL, seqid);
    let args = new getAllSimpleChannelContacts_args in
      args#set_statusSticonFallbackDisabled statusSticonFallbackDisabled;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getAllSimpleChannelContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getAllSimpleChannelContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getAllSimpleChannelContacts failed: unknown result")))
  method getUserIdentities  = 
    self#send_getUserIdentities;
    self#recv_getUserIdentities
  method private send_getUserIdentities  = 
    oprot#writeMessageBegin ("getUserIdentities", Protocol.CALL, seqid);
    let args = new getUserIdentities_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserIdentities  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserIdentities_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserIdentities failed: unknown result")))
  method markPaidCallAd dialedNumber language disableCallerId = 
    self#send_markPaidCallAd dialedNumber language disableCallerId;
    self#recv_markPaidCallAd
  method private send_markPaidCallAd dialedNumber language disableCallerId = 
    oprot#writeMessageBegin ("markPaidCallAd", Protocol.CALL, seqid);
    let args = new markPaidCallAd_args in
      args#set_dialedNumber dialedNumber;
      args#set_language language;
      args#set_disableCallerId disableCallerId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_markPaidCallAd  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_markPaidCallAd_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "markPaidCallAd failed: unknown result")))
  method isGroupMember groupId = 
    self#send_isGroupMember groupId;
    self#recv_isGroupMember
  method private send_isGroupMember groupId = 
    oprot#writeMessageBegin ("isGroupMember", Protocol.CALL, seqid);
    let args = new isGroupMember_args in
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_isGroupMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_isGroupMember_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "isGroupMember failed: unknown result")))
  method getPhoneInfoFromPhoneNumber region phoneNumber = 
    self#send_getPhoneInfoFromPhoneNumber region phoneNumber;
    self#recv_getPhoneInfoFromPhoneNumber
  method private send_getPhoneInfoFromPhoneNumber region phoneNumber = 
    oprot#writeMessageBegin ("getPhoneInfoFromPhoneNumber", Protocol.CALL, seqid);
    let args = new getPhoneInfoFromPhoneNumber_args in
      args#set_region region;
      args#set_phoneNumber phoneNumber;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPhoneInfoFromPhoneNumber  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPhoneInfoFromPhoneNumber_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPhoneInfoFromPhoneNumber failed: unknown result")))
  method redeemPaidCallVoucher serial language = 
    self#send_redeemPaidCallVoucher serial language;
    self#recv_redeemPaidCallVoucher
  method private send_redeemPaidCallVoucher serial language = 
    oprot#writeMessageBegin ("redeemPaidCallVoucher", Protocol.CALL, seqid);
    let args = new redeemPaidCallVoucher_args in
      args#set_serial serial;
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_redeemPaidCallVoucher  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_redeemPaidCallVoucher_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "redeemPaidCallVoucher failed: unknown result")))
  method getPreferredDisplayName mids = 
    self#send_getPreferredDisplayName mids;
    self#recv_getPreferredDisplayName
  method private send_getPreferredDisplayName mids = 
    oprot#writeMessageBegin ("getPreferredDisplayName", Protocol.CALL, seqid);
    let args = new getPreferredDisplayName_args in
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPreferredDisplayName  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPreferredDisplayName_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPreferredDisplayName failed: unknown result")))
  method getContactsForChannel ids = 
    self#send_getContactsForChannel ids;
    self#recv_getContactsForChannel
  method private send_getContactsForChannel ids = 
    oprot#writeMessageBegin ("getContactsForChannel", Protocol.CALL, seqid);
    let args = new getContactsForChannel_args in
      args#set_ids ids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getContactsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getContactsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getContactsForChannel failed: unknown result")))
  method getCallCreditProducts appStoreCode pgCode country language = 
    self#send_getCallCreditProducts appStoreCode pgCode country language;
    self#recv_getCallCreditProducts
  method private send_getCallCreditProducts appStoreCode pgCode country language = 
    oprot#writeMessageBegin ("getCallCreditProducts", Protocol.CALL, seqid);
    let args = new getCallCreditProducts_args in
      args#set_appStoreCode appStoreCode;
      args#set_pgCode pgCode;
      args#set_country country;
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCallCreditProducts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCallCreditProducts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCallCreditProducts failed: unknown result")))
  method getCompactContacts lastModifiedTimestamp = 
    self#send_getCompactContacts lastModifiedTimestamp;
    self#recv_getCompactContacts
  method private send_getCompactContacts lastModifiedTimestamp = 
    oprot#writeMessageBegin ("getCompactContacts", Protocol.CALL, seqid);
    let args = new getCompactContacts_args in
      args#set_lastModifiedTimestamp lastModifiedTimestamp;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCompactContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCompactContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCompactContacts failed: unknown result")))
  method notifyNotiCenterEvent event = 
    self#send_notifyNotiCenterEvent event;
    self#recv_notifyNotiCenterEvent
  method private send_notifyNotiCenterEvent event = 
    oprot#writeMessageBegin ("notifyNotiCenterEvent", Protocol.CALL, seqid);
    let args = new notifyNotiCenterEvent_args in
      args#set_event event;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyNotiCenterEvent  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyNotiCenterEvent_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method isInContact mid = 
    self#send_isInContact mid;
    self#recv_isInContact
  method private send_isInContact mid = 
    oprot#writeMessageBegin ("isInContact", Protocol.CALL, seqid);
    let args = new isInContact_args in
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_isInContact  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_isInContact_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "isInContact failed: unknown result")))
  method lookupGroupMembers groupId mids = 
    self#send_lookupGroupMembers groupId mids;
    self#recv_lookupGroupMembers
  method private send_lookupGroupMembers groupId mids = 
    oprot#writeMessageBegin ("lookupGroupMembers", Protocol.CALL, seqid);
    let args = new lookupGroupMembers_args in
      args#set_groupId groupId;
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_lookupGroupMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_lookupGroupMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "lookupGroupMembers failed: unknown result")))
  method getRoomInformation roomMid = 
    self#send_getRoomInformation roomMid;
    self#recv_getRoomInformation
  method private send_getRoomInformation roomMid = 
    oprot#writeMessageBegin ("getRoomInformation", Protocol.CALL, seqid);
    let args = new getRoomInformation_args in
      args#set_roomMid roomMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getRoomInformation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getRoomInformation_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getRoomInformation failed: unknown result")))
  method getGroupCall chatMid = 
    self#send_getGroupCall chatMid;
    self#recv_getGroupCall
  method private send_getGroupCall chatMid = 
    oprot#writeMessageBegin ("getGroupCall", Protocol.CALL, seqid);
    let args = new getGroupCall_args in
      args#set_chatMid chatMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupCall  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupCall_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupCall failed: unknown result")))
  method isAllowSecondaryDeviceLogin  = 
    self#send_isAllowSecondaryDeviceLogin;
    self#recv_isAllowSecondaryDeviceLogin
  method private send_isAllowSecondaryDeviceLogin  = 
    oprot#writeMessageBegin ("isAllowSecondaryDeviceLogin", Protocol.CALL, seqid);
    let args = new isAllowSecondaryDeviceLogin_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_isAllowSecondaryDeviceLogin  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_isAllowSecondaryDeviceLogin_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "isAllowSecondaryDeviceLogin failed: unknown result")))
  method getPrimaryClientForChannel  = 
    self#send_getPrimaryClientForChannel;
    self#recv_getPrimaryClientForChannel
  method private send_getPrimaryClientForChannel  = 
    oprot#writeMessageBegin ("getPrimaryClientForChannel", Protocol.CALL, seqid);
    let args = new getPrimaryClientForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPrimaryClientForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPrimaryClientForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPrimaryClientForChannel failed: unknown result")))
  method createRoomWithBuddy reqSeq buddyMid contactIds = 
    self#send_createRoomWithBuddy reqSeq buddyMid contactIds;
    self#recv_createRoomWithBuddy
  method private send_createRoomWithBuddy reqSeq buddyMid contactIds = 
    oprot#writeMessageBegin ("createRoomWithBuddy", Protocol.CALL, seqid);
    let args = new createRoomWithBuddy_args in
      args#set_reqSeq reqSeq;
      args#set_buddyMid buddyMid;
      args#set_contactIds contactIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createRoomWithBuddy  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createRoomWithBuddy_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createRoomWithBuddy failed: unknown result")))
  method getDisplayName mid = 
    self#send_getDisplayName mid;
    self#recv_getDisplayName
  method private send_getDisplayName mid = 
    oprot#writeMessageBegin ("getDisplayName", Protocol.CALL, seqid);
    let args = new getDisplayName_args in
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getDisplayName  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getDisplayName_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getDisplayName failed: unknown result")))
  method getPaidCallMetadata language = 
    self#send_getPaidCallMetadata language;
    self#recv_getPaidCallMetadata
  method private send_getPaidCallMetadata language = 
    oprot#writeMessageBegin ("getPaidCallMetadata", Protocol.CALL, seqid);
    let args = new getPaidCallMetadata_args in
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPaidCallMetadata  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPaidCallMetadata_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPaidCallMetadata failed: unknown result")))
  method getMid  = 
    self#send_getMid;
    self#recv_getMid
  method private send_getMid  = 
    oprot#writeMessageBegin ("getMid", Protocol.CALL, seqid);
    let args = new getMid_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMid failed: unknown result")))
  method getUserCountryForBilling country remoteIp = 
    self#send_getUserCountryForBilling country remoteIp;
    self#recv_getUserCountryForBilling
  method private send_getUserCountryForBilling country remoteIp = 
    oprot#writeMessageBegin ("getUserCountryForBilling", Protocol.CALL, seqid);
    let args = new getUserCountryForBilling_args in
      args#set_country country;
      args#set_remoteIp remoteIp;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserCountryForBilling  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserCountryForBilling_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserCountryForBilling failed: unknown result")))
  method getFavoriteGroupIdsForChannel  = 
    self#send_getFavoriteGroupIdsForChannel;
    self#recv_getFavoriteGroupIdsForChannel
  method private send_getFavoriteGroupIdsForChannel  = 
    oprot#writeMessageBegin ("getFavoriteGroupIdsForChannel", Protocol.CALL, seqid);
    let args = new getFavoriteGroupIdsForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getFavoriteGroupIdsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getFavoriteGroupIdsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getFavoriteGroupIdsForChannel failed: unknown result")))
  method getPaidCallHistory start size language = 
    self#send_getPaidCallHistory start size language;
    self#recv_getPaidCallHistory
  method private send_getPaidCallHistory start size language = 
    oprot#writeMessageBegin ("getPaidCallHistory", Protocol.CALL, seqid);
    let args = new getPaidCallHistory_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPaidCallHistory  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPaidCallHistory_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPaidCallHistory failed: unknown result")))
  method sendPinCodeOperation verifier = 
    self#send_sendPinCodeOperation verifier;
    self#recv_sendPinCodeOperation
  method private send_sendPinCodeOperation verifier = 
    oprot#writeMessageBegin ("sendPinCodeOperation", Protocol.CALL, seqid);
    let args = new sendPinCodeOperation_args in
      args#set_verifier verifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendPinCodeOperation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendPinCodeOperation_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method inviteIntoGroupCall chatMid memberMids mediaType = 
    self#send_inviteIntoGroupCall chatMid memberMids mediaType;
    self#recv_inviteIntoGroupCall
  method private send_inviteIntoGroupCall chatMid memberMids mediaType = 
    oprot#writeMessageBegin ("inviteIntoGroupCall", Protocol.CALL, seqid);
    let args = new inviteIntoGroupCall_args in
      args#set_chatMid chatMid;
      args#set_memberMids memberMids;
      args#set_mediaType mediaType;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_inviteIntoGroupCall  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_inviteIntoGroupCall_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method getFriendMids  = 
    self#send_getFriendMids;
    self#recv_getFriendMids
  method private send_getFriendMids  = 
    oprot#writeMessageBegin ("getFriendMids", Protocol.CALL, seqid);
    let args = new getFriendMids_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getFriendMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getFriendMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getFriendMids failed: unknown result")))
  method getMetaProfile  = 
    self#send_getMetaProfile;
    self#recv_getMetaProfile
  method private send_getMetaProfile  = 
    oprot#writeMessageBegin ("getMetaProfile", Protocol.CALL, seqid);
    let args = new getMetaProfile_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMetaProfile  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMetaProfile_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMetaProfile failed: unknown result")))
  method sendMessageForChannel message = 
    self#send_sendMessageForChannel message;
    self#recv_sendMessageForChannel
  method private send_sendMessageForChannel message = 
    oprot#writeMessageBegin ("sendMessageForChannel", Protocol.CALL, seqid);
    let args = new sendMessageForChannel_args in
      args#set_message message;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendMessageForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendMessageForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendMessageForChannel failed: unknown result")))
  method activeBuddySubscriberCount  = 
    self#send_activeBuddySubscriberCount;
    self#recv_activeBuddySubscriberCount
  method private send_activeBuddySubscriberCount  = 
    oprot#writeMessageBegin ("activeBuddySubscriberCount", Protocol.CALL, seqid);
    let args = new activeBuddySubscriberCount_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_activeBuddySubscriberCount  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_activeBuddySubscriberCount_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "activeBuddySubscriberCount failed: unknown result")))
  method getCallCreditPurchaseHistory request = 
    self#send_getCallCreditPurchaseHistory request;
    self#recv_getCallCreditPurchaseHistory
  method private send_getCallCreditPurchaseHistory request = 
    oprot#writeMessageBegin ("getCallCreditPurchaseHistory", Protocol.CALL, seqid);
    let args = new getCallCreditPurchaseHistory_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCallCreditPurchaseHistory  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCallCreditPurchaseHistory_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCallCreditPurchaseHistory failed: unknown result")))
  method isRoomMember roomId = 
    self#send_isRoomMember roomId;
    self#recv_isRoomMember
  method private send_isRoomMember roomId = 
    oprot#writeMessageBegin ("isRoomMember", Protocol.CALL, seqid);
    let args = new isRoomMember_args in
      args#set_roomId roomId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_isRoomMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_isRoomMember_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "isRoomMember failed: unknown result")))
  method sendSystemOAMessage message = 
    self#send_sendSystemOAMessage message;
    self#recv_sendSystemOAMessage
  method private send_sendSystemOAMessage message = 
    oprot#writeMessageBegin ("sendSystemOAMessage", Protocol.CALL, seqid);
    let args = new sendSystemOAMessage_args in
      args#set_message message;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendSystemOAMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendSystemOAMessage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendSystemOAMessage failed: unknown result")))
  method acquirePaidCallRoute paidCallType dialedNumber language networkCode disableCallerId referer adSessionId = 
    self#send_acquirePaidCallRoute paidCallType dialedNumber language networkCode disableCallerId referer adSessionId;
    self#recv_acquirePaidCallRoute
  method private send_acquirePaidCallRoute paidCallType dialedNumber language networkCode disableCallerId referer adSessionId = 
    oprot#writeMessageBegin ("acquirePaidCallRoute", Protocol.CALL, seqid);
    let args = new acquirePaidCallRoute_args in
      args#set_paidCallType paidCallType;
      args#set_dialedNumber dialedNumber;
      args#set_language language;
      args#set_networkCode networkCode;
      args#set_disableCallerId disableCallerId;
      args#set_referer referer;
      args#set_adSessionId adSessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_acquirePaidCallRoute  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_acquirePaidCallRoute_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "acquirePaidCallRoute failed: unknown result")))
  method getGroupsForChannel groupIds = 
    self#send_getGroupsForChannel groupIds;
    self#recv_getGroupsForChannel
  method private send_getGroupsForChannel groupIds = 
    oprot#writeMessageBegin ("getGroupsForChannel", Protocol.CALL, seqid);
    let args = new getGroupsForChannel_args in
      args#set_groupIds groupIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupsForChannel failed: unknown result")))
  method getUserCreateTime  = 
    self#send_getUserCreateTime;
    self#recv_getUserCreateTime
  method private send_getUserCreateTime  = 
    oprot#writeMessageBegin ("getUserCreateTime", Protocol.CALL, seqid);
    let args = new getUserCreateTime_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserCreateTime  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserCreateTime_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserCreateTime failed: unknown result")))
  method registerChannelCP cpId registerPassword = 
    self#send_registerChannelCP cpId registerPassword;
    self#recv_registerChannelCP
  method private send_registerChannelCP cpId registerPassword = 
    oprot#writeMessageBegin ("registerChannelCP", Protocol.CALL, seqid);
    let args = new registerChannelCP_args in
      args#set_cpId cpId;
      args#set_registerPassword registerPassword;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerChannelCP  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerChannelCP_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerChannelCP failed: unknown result")))
  method reserveCallCreditPurchase request = 
    self#send_reserveCallCreditPurchase request;
    self#recv_reserveCallCreditPurchase
  method private send_reserveCallCreditPurchase request = 
    oprot#writeMessageBegin ("reserveCallCreditPurchase", Protocol.CALL, seqid);
    let args = new reserveCallCreditPurchase_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reserveCallCreditPurchase  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reserveCallCreditPurchase_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reserveCallCreditPurchase failed: unknown result")))
  method acquirePaidCallCurrencyExchangeRate language = 
    self#send_acquirePaidCallCurrencyExchangeRate language;
    self#recv_acquirePaidCallCurrencyExchangeRate
  method private send_acquirePaidCallCurrencyExchangeRate language = 
    oprot#writeMessageBegin ("acquirePaidCallCurrencyExchangeRate", Protocol.CALL, seqid);
    let args = new acquirePaidCallCurrencyExchangeRate_args in
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_acquirePaidCallCurrencyExchangeRate  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_acquirePaidCallCurrencyExchangeRate_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "acquirePaidCallCurrencyExchangeRate failed: unknown result")))
  method getRoomMemberMidsForAppPlatform roomId = 
    self#send_getRoomMemberMidsForAppPlatform roomId;
    self#recv_getRoomMemberMidsForAppPlatform
  method private send_getRoomMemberMidsForAppPlatform roomId = 
    oprot#writeMessageBegin ("getRoomMemberMidsForAppPlatform", Protocol.CALL, seqid);
    let args = new getRoomMemberMidsForAppPlatform_args in
      args#set_roomId roomId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getRoomMemberMidsForAppPlatform  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getRoomMemberMidsForAppPlatform_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getRoomMemberMidsForAppPlatform failed: unknown result")))
  method getPaidCallBalanceList language = 
    self#send_getPaidCallBalanceList language;
    self#recv_getPaidCallBalanceList
  method private send_getPaidCallBalanceList language = 
    oprot#writeMessageBegin ("getPaidCallBalanceList", Protocol.CALL, seqid);
    let args = new getPaidCallBalanceList_args in
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPaidCallBalanceList  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPaidCallBalanceList_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPaidCallBalanceList failed: unknown result")))
  method getPersonalInfos requiredPersonalInfos = 
    self#send_getPersonalInfos requiredPersonalInfos;
    self#recv_getPersonalInfos
  method private send_getPersonalInfos requiredPersonalInfos = 
    oprot#writeMessageBegin ("getPersonalInfos", Protocol.CALL, seqid);
    let args = new getPersonalInfos_args in
      args#set_requiredPersonalInfos requiredPersonalInfos;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPersonalInfos  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPersonalInfos_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPersonalInfos failed: unknown result")))
  method getPrimaryClientsForChannel userMids = 
    self#send_getPrimaryClientsForChannel userMids;
    self#recv_getPrimaryClientsForChannel
  method private send_getPrimaryClientsForChannel userMids = 
    oprot#writeMessageBegin ("getPrimaryClientsForChannel", Protocol.CALL, seqid);
    let args = new getPrimaryClientsForChannel_args in
      args#set_userMids userMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPrimaryClientsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPrimaryClientsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPrimaryClientsForChannel failed: unknown result")))
  method addBuddyToContact buddyMid = 
    self#send_addBuddyToContact buddyMid;
    self#recv_addBuddyToContact
  method private send_addBuddyToContact buddyMid = 
    oprot#writeMessageBegin ("addBuddyToContact", Protocol.CALL, seqid);
    let args = new addBuddyToContact_args in
      args#set_buddyMid buddyMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_addBuddyToContact  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_addBuddyToContact_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "addBuddyToContact failed: unknown result")))
  method getGroupMemberMidsForAppPlatform groupId = 
    self#send_getGroupMemberMidsForAppPlatform groupId;
    self#recv_getGroupMemberMidsForAppPlatform
  method private send_getGroupMemberMidsForAppPlatform groupId = 
    oprot#writeMessageBegin ("getGroupMemberMidsForAppPlatform", Protocol.CALL, seqid);
    let args = new getGroupMemberMidsForAppPlatform_args in
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupMemberMidsForAppPlatform  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupMemberMidsForAppPlatform_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupMemberMidsForAppPlatform failed: unknown result")))
  method getUserLanguage  = 
    self#send_getUserLanguage;
    self#recv_getUserLanguage
  method private send_getUserLanguage  = 
    oprot#writeMessageBegin ("getUserLanguage", Protocol.CALL, seqid);
    let args = new getUserLanguage_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserLanguage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserLanguage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserLanguage failed: unknown result")))
  method lookupPaidCall dialedNumber language referer = 
    self#send_lookupPaidCall dialedNumber language referer;
    self#recv_lookupPaidCall
  method private send_lookupPaidCall dialedNumber language referer = 
    oprot#writeMessageBegin ("lookupPaidCall", Protocol.CALL, seqid);
    let args = new lookupPaidCall_args in
      args#set_dialedNumber dialedNumber;
      args#set_language language;
      args#set_referer referer;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_lookupPaidCall  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_lookupPaidCall_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "lookupPaidCall failed: unknown result")))
  method getExtendedProfile  = 
    self#send_getExtendedProfile;
    self#recv_getExtendedProfile
  method private send_getExtendedProfile  = 
    oprot#writeMessageBegin ("getExtendedProfile", Protocol.CALL, seqid);
    let args = new getExtendedProfile_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getExtendedProfile  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getExtendedProfile_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getExtendedProfile failed: unknown result")))
  method getReverseCompactContacts ids = 
    self#send_getReverseCompactContacts ids;
    self#recv_getReverseCompactContacts
  method private send_getReverseCompactContacts ids = 
    oprot#writeMessageBegin ("getReverseCompactContacts", Protocol.CALL, seqid);
    let args = new getReverseCompactContacts_args in
      args#set_ids ids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getReverseCompactContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getReverseCompactContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getReverseCompactContacts failed: unknown result")))
  method getPaidCallAdStatus  = 
    self#send_getPaidCallAdStatus;
    self#recv_getPaidCallAdStatus
  method private send_getPaidCallAdStatus  = 
    oprot#writeMessageBegin ("getPaidCallAdStatus", Protocol.CALL, seqid);
    let args = new getPaidCallAdStatus_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPaidCallAdStatus  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPaidCallAdStatus_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPaidCallAdStatus failed: unknown result")))
  method findContactByUseridWithoutAbuseBlockForChannel userid = 
    self#send_findContactByUseridWithoutAbuseBlockForChannel userid;
    self#recv_findContactByUseridWithoutAbuseBlockForChannel
  method private send_findContactByUseridWithoutAbuseBlockForChannel userid = 
    oprot#writeMessageBegin ("findContactByUseridWithoutAbuseBlockForChannel", Protocol.CALL, seqid);
    let args = new findContactByUseridWithoutAbuseBlockForChannel_args in
      args#set_userid userid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findContactByUseridWithoutAbuseBlockForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findContactByUseridWithoutAbuseBlockForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findContactByUseridWithoutAbuseBlockForChannel failed: unknown result")))
  method getGroupMemberMids groupId = 
    self#send_getGroupMemberMids groupId;
    self#recv_getGroupMemberMids
  method private send_getGroupMemberMids groupId = 
    oprot#writeMessageBegin ("getGroupMemberMids", Protocol.CALL, seqid);
    let args = new getGroupMemberMids_args in
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupMemberMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupMemberMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupMemberMids failed: unknown result")))
  method sendMessageWithoutRelationship message = 
    self#send_sendMessageWithoutRelationship message;
    self#recv_sendMessageWithoutRelationship
  method private send_sendMessageWithoutRelationship message = 
    oprot#writeMessageBegin ("sendMessageWithoutRelationship", Protocol.CALL, seqid);
    let args = new sendMessageWithoutRelationship_args in
      args#set_message message;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendMessageWithoutRelationship  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendMessageWithoutRelationship_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendMessageWithoutRelationship failed: unknown result")))
  method displayBuddySubscriberCountInBulk mids = 
    self#send_displayBuddySubscriberCountInBulk mids;
    self#recv_displayBuddySubscriberCountInBulk
  method private send_displayBuddySubscriberCountInBulk mids = 
    oprot#writeMessageBegin ("displayBuddySubscriberCountInBulk", Protocol.CALL, seqid);
    let args = new displayBuddySubscriberCountInBulk_args in
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_displayBuddySubscriberCountInBulk  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_displayBuddySubscriberCountInBulk_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "displayBuddySubscriberCountInBulk failed: unknown result")))
  method lookupRoomMembers roomId mids = 
    self#send_lookupRoomMembers roomId mids;
    self#recv_lookupRoomMembers
  method private send_lookupRoomMembers roomId mids = 
    oprot#writeMessageBegin ("lookupRoomMembers", Protocol.CALL, seqid);
    let args = new lookupRoomMembers_args in
      args#set_roomId roomId;
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_lookupRoomMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_lookupRoomMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "lookupRoomMembers failed: unknown result")))
  method getFavoriteMidsForChannel  = 
    self#send_getFavoriteMidsForChannel;
    self#recv_getFavoriteMidsForChannel
  method private send_getFavoriteMidsForChannel  = 
    oprot#writeMessageBegin ("getFavoriteMidsForChannel", Protocol.CALL, seqid);
    let args = new getFavoriteMidsForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getFavoriteMidsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getFavoriteMidsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getFavoriteMidsForChannel failed: unknown result")))
  method getAllContactIdsForChannel  = 
    self#send_getAllContactIdsForChannel;
    self#recv_getAllContactIdsForChannel
  method private send_getAllContactIdsForChannel  = 
    oprot#writeMessageBegin ("getAllContactIdsForChannel", Protocol.CALL, seqid);
    let args = new getAllContactIdsForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getAllContactIdsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getAllContactIdsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getAllContactIdsForChannel failed: unknown result")))
  method displayBuddySubscriberCount  = 
    self#send_displayBuddySubscriberCount;
    self#recv_displayBuddySubscriberCount
  method private send_displayBuddySubscriberCount  = 
    oprot#writeMessageBegin ("displayBuddySubscriberCount", Protocol.CALL, seqid);
    let args = new displayBuddySubscriberCount_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_displayBuddySubscriberCount  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_displayBuddySubscriberCount_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "displayBuddySubscriberCount failed: unknown result")))
  method getProfileForChannel  = 
    self#send_getProfileForChannel;
    self#recv_getProfileForChannel
  method private send_getProfileForChannel  = 
    oprot#writeMessageBegin ("getProfileForChannel", Protocol.CALL, seqid);
    let args = new getProfileForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProfileForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProfileForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProfileForChannel failed: unknown result")))
  method getUserTickets userMids = 
    self#send_getUserTickets userMids;
    self#recv_getUserTickets
  method private send_getUserTickets userMids = 
    oprot#writeMessageBegin ("getUserTickets", Protocol.CALL, seqid);
    let args = new getUserTickets_args in
      args#set_userMids userMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserTickets  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserTickets_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserTickets failed: unknown result")))
  method getOAFriendMids  = 
    self#send_getOAFriendMids;
    self#recv_getOAFriendMids
  method private send_getOAFriendMids  = 
    oprot#writeMessageBegin ("getOAFriendMids", Protocol.CALL, seqid);
    let args = new getOAFriendMids_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getOAFriendMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getOAFriendMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getOAFriendMids failed: unknown result")))
  method searchPaidCallUserRate countryCode language = 
    self#send_searchPaidCallUserRate countryCode language;
    self#recv_searchPaidCallUserRate
  method private send_searchPaidCallUserRate countryCode language = 
    oprot#writeMessageBegin ("searchPaidCallUserRate", Protocol.CALL, seqid);
    let args = new searchPaidCallUserRate_args in
      args#set_countryCode countryCode;
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_searchPaidCallUserRate  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_searchPaidCallUserRate_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "searchPaidCallUserRate failed: unknown result")))
  method getJoinedGroupIdsForChannel  = 
    self#send_getJoinedGroupIdsForChannel;
    self#recv_getJoinedGroupIdsForChannel
  method private send_getJoinedGroupIdsForChannel  = 
    oprot#writeMessageBegin ("getJoinedGroupIdsForChannel", Protocol.CALL, seqid);
    let args = new getJoinedGroupIdsForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getJoinedGroupIdsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getJoinedGroupIdsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getJoinedGroupIdsForChannel failed: unknown result")))
  method acquireGroupCallRoute chatMid mediaType = 
    self#send_acquireGroupCallRoute chatMid mediaType;
    self#recv_acquireGroupCallRoute
  method private send_acquireGroupCallRoute chatMid mediaType = 
    oprot#writeMessageBegin ("acquireGroupCallRoute", Protocol.CALL, seqid);
    let args = new acquireGroupCallRoute_args in
      args#set_chatMid chatMid;
      args#set_mediaType mediaType;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_acquireGroupCallRoute  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_acquireGroupCallRoute_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "acquireGroupCallRoute failed: unknown result")))
  method getUserMidsWhoAddedMe  = 
    self#send_getUserMidsWhoAddedMe;
    self#recv_getUserMidsWhoAddedMe
  method private send_getUserMidsWhoAddedMe  = 
    oprot#writeMessageBegin ("getUserMidsWhoAddedMe", Protocol.CALL, seqid);
    let args = new getUserMidsWhoAddedMe_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserMidsWhoAddedMe  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserMidsWhoAddedMe_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserMidsWhoAddedMe failed: unknown result")))
  method getIdentityCredential  = 
    self#send_getIdentityCredential;
    self#recv_getIdentityCredential
  method private send_getIdentityCredential  = 
    oprot#writeMessageBegin ("getIdentityCredential", Protocol.CALL, seqid);
    let args = new getIdentityCredential_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getIdentityCredential_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getIdentityCredential failed: unknown result")))
  method addOperationForChannel opType param1 param2 param3 = 
    self#send_addOperationForChannel opType param1 param2 param3;
    self#recv_addOperationForChannel
  method private send_addOperationForChannel opType param1 param2 param3 = 
    oprot#writeMessageBegin ("addOperationForChannel", Protocol.CALL, seqid);
    let args = new addOperationForChannel_args in
      args#set_opType opType;
      args#set_param1 param1;
      args#set_param2 param2;
      args#set_param3 param3;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_addOperationForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_addOperationForChannel_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method getSimpleChannelContacts ids statusSticonFallbackDisabled = 
    self#send_getSimpleChannelContacts ids statusSticonFallbackDisabled;
    self#recv_getSimpleChannelContacts
  method private send_getSimpleChannelContacts ids statusSticonFallbackDisabled = 
    oprot#writeMessageBegin ("getSimpleChannelContacts", Protocol.CALL, seqid);
    let args = new getSimpleChannelContacts_args in
      args#set_ids ids;
      args#set_statusSticonFallbackDisabled statusSticonFallbackDisabled;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSimpleChannelContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSimpleChannelContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSimpleChannelContacts failed: unknown result")))
  method getUserLastSentMessageTimeStamp mid = 
    self#send_getUserLastSentMessageTimeStamp mid;
    self#recv_getUserLastSentMessageTimeStamp
  method private send_getUserLastSentMessageTimeStamp mid = 
    oprot#writeMessageBegin ("getUserLastSentMessageTimeStamp", Protocol.CALL, seqid);
    let args = new getUserLastSentMessageTimeStamp_args in
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserLastSentMessageTimeStamp  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserLastSentMessageTimeStamp_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserLastSentMessageTimeStamp failed: unknown result")))
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 72
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_getUserStatus (seqid, iprot, oprot) =
    let args = read_getUserStatus_args iprot in
      iprot#readMessageEnd;
      let result = new getUserStatus_result in
        (try
          result#set_success (handler#getUserStatus args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserStatus", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateProfileAttributeForChannel (seqid, iprot, oprot) =
    let args = read_updateProfileAttributeForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new updateProfileAttributeForChannel_result in
        (try
          (handler#updateProfileAttributeForChannel args#get_profileAttribute args#get_value);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateProfileAttributeForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateExtendedProfileAttribute (seqid, iprot, oprot) =
    let args = read_updateExtendedProfileAttribute_args iprot in
      iprot#readMessageEnd;
      let result = new updateExtendedProfileAttribute_result in
        (try
          (handler#updateExtendedProfileAttribute args#get_attr args#get_extendedProfile);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateExtendedProfileAttribute", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getAllSimpleChannelContacts (seqid, iprot, oprot) =
    let args = read_getAllSimpleChannelContacts_args iprot in
      iprot#readMessageEnd;
      let result = new getAllSimpleChannelContacts_result in
        (try
          result#set_success (handler#getAllSimpleChannelContacts args#get_statusSticonFallbackDisabled);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getAllSimpleChannelContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserIdentities (seqid, iprot, oprot) =
    let _ = read_getUserIdentities_args iprot in
      iprot#readMessageEnd;
      let result = new getUserIdentities_result in
        (try
          result#set_success (handler#getUserIdentities);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserIdentities", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_markPaidCallAd (seqid, iprot, oprot) =
    let args = read_markPaidCallAd_args iprot in
      iprot#readMessageEnd;
      let result = new markPaidCallAd_result in
        (try
          result#set_success (handler#markPaidCallAd args#get_dialedNumber args#get_language args#get_disableCallerId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("markPaidCallAd", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_isGroupMember (seqid, iprot, oprot) =
    let args = read_isGroupMember_args iprot in
      iprot#readMessageEnd;
      let result = new isGroupMember_result in
        (try
          result#set_success (handler#isGroupMember args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("isGroupMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPhoneInfoFromPhoneNumber (seqid, iprot, oprot) =
    let args = read_getPhoneInfoFromPhoneNumber_args iprot in
      iprot#readMessageEnd;
      let result = new getPhoneInfoFromPhoneNumber_result in
        (try
          result#set_success (handler#getPhoneInfoFromPhoneNumber args#get_region args#get_phoneNumber);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPhoneInfoFromPhoneNumber", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_redeemPaidCallVoucher (seqid, iprot, oprot) =
    let args = read_redeemPaidCallVoucher_args iprot in
      iprot#readMessageEnd;
      let result = new redeemPaidCallVoucher_result in
        (try
          result#set_success (handler#redeemPaidCallVoucher args#get_serial args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("redeemPaidCallVoucher", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPreferredDisplayName (seqid, iprot, oprot) =
    let args = read_getPreferredDisplayName_args iprot in
      iprot#readMessageEnd;
      let result = new getPreferredDisplayName_result in
        (try
          result#set_success (handler#getPreferredDisplayName args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPreferredDisplayName", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getContactsForChannel (seqid, iprot, oprot) =
    let args = read_getContactsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getContactsForChannel_result in
        (try
          result#set_success (handler#getContactsForChannel args#get_ids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getContactsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCallCreditProducts (seqid, iprot, oprot) =
    let args = read_getCallCreditProducts_args iprot in
      iprot#readMessageEnd;
      let result = new getCallCreditProducts_result in
        (try
          result#set_success (handler#getCallCreditProducts args#get_appStoreCode args#get_pgCode args#get_country args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCallCreditProducts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCompactContacts (seqid, iprot, oprot) =
    let args = read_getCompactContacts_args iprot in
      iprot#readMessageEnd;
      let result = new getCompactContacts_result in
        (try
          result#set_success (handler#getCompactContacts args#get_lastModifiedTimestamp);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCompactContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyNotiCenterEvent (seqid, iprot, oprot) =
    let args = read_notifyNotiCenterEvent_args iprot in
      iprot#readMessageEnd;
      let result = new notifyNotiCenterEvent_result in
        (try
          (handler#notifyNotiCenterEvent args#get_event);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyNotiCenterEvent", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_isInContact (seqid, iprot, oprot) =
    let args = read_isInContact_args iprot in
      iprot#readMessageEnd;
      let result = new isInContact_result in
        (try
          result#set_success (handler#isInContact args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("isInContact", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_lookupGroupMembers (seqid, iprot, oprot) =
    let args = read_lookupGroupMembers_args iprot in
      iprot#readMessageEnd;
      let result = new lookupGroupMembers_result in
        (try
          result#set_success (handler#lookupGroupMembers args#get_groupId args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("lookupGroupMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getRoomInformation (seqid, iprot, oprot) =
    let args = read_getRoomInformation_args iprot in
      iprot#readMessageEnd;
      let result = new getRoomInformation_result in
        (try
          result#set_success (handler#getRoomInformation args#get_roomMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getRoomInformation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupCall (seqid, iprot, oprot) =
    let args = read_getGroupCall_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupCall_result in
        (try
          result#set_success (handler#getGroupCall args#get_chatMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupCall", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_isAllowSecondaryDeviceLogin (seqid, iprot, oprot) =
    let _ = read_isAllowSecondaryDeviceLogin_args iprot in
      iprot#readMessageEnd;
      let result = new isAllowSecondaryDeviceLogin_result in
        (try
          result#set_success (handler#isAllowSecondaryDeviceLogin);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("isAllowSecondaryDeviceLogin", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPrimaryClientForChannel (seqid, iprot, oprot) =
    let _ = read_getPrimaryClientForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getPrimaryClientForChannel_result in
        (try
          result#set_success (handler#getPrimaryClientForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPrimaryClientForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createRoomWithBuddy (seqid, iprot, oprot) =
    let args = read_createRoomWithBuddy_args iprot in
      iprot#readMessageEnd;
      let result = new createRoomWithBuddy_result in
        (try
          result#set_success (handler#createRoomWithBuddy args#get_reqSeq args#get_buddyMid args#get_contactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createRoomWithBuddy", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getDisplayName (seqid, iprot, oprot) =
    let args = read_getDisplayName_args iprot in
      iprot#readMessageEnd;
      let result = new getDisplayName_result in
        (try
          result#set_success (handler#getDisplayName args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getDisplayName", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPaidCallMetadata (seqid, iprot, oprot) =
    let args = read_getPaidCallMetadata_args iprot in
      iprot#readMessageEnd;
      let result = new getPaidCallMetadata_result in
        (try
          result#set_success (handler#getPaidCallMetadata args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPaidCallMetadata", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMid (seqid, iprot, oprot) =
    let _ = read_getMid_args iprot in
      iprot#readMessageEnd;
      let result = new getMid_result in
        (try
          result#set_success (handler#getMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserCountryForBilling (seqid, iprot, oprot) =
    let args = read_getUserCountryForBilling_args iprot in
      iprot#readMessageEnd;
      let result = new getUserCountryForBilling_result in
        (try
          result#set_success (handler#getUserCountryForBilling args#get_country args#get_remoteIp);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserCountryForBilling", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getFavoriteGroupIdsForChannel (seqid, iprot, oprot) =
    let _ = read_getFavoriteGroupIdsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getFavoriteGroupIdsForChannel_result in
        (try
          result#set_success (handler#getFavoriteGroupIdsForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getFavoriteGroupIdsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPaidCallHistory (seqid, iprot, oprot) =
    let args = read_getPaidCallHistory_args iprot in
      iprot#readMessageEnd;
      let result = new getPaidCallHistory_result in
        (try
          result#set_success (handler#getPaidCallHistory args#get_start args#get_size args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPaidCallHistory", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendPinCodeOperation (seqid, iprot, oprot) =
    let args = read_sendPinCodeOperation_args iprot in
      iprot#readMessageEnd;
      let result = new sendPinCodeOperation_result in
        (try
          (handler#sendPinCodeOperation args#get_verifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendPinCodeOperation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_inviteIntoGroupCall (seqid, iprot, oprot) =
    let args = read_inviteIntoGroupCall_args iprot in
      iprot#readMessageEnd;
      let result = new inviteIntoGroupCall_result in
        (try
          (handler#inviteIntoGroupCall args#get_chatMid args#get_memberMids args#get_mediaType);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("inviteIntoGroupCall", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getFriendMids (seqid, iprot, oprot) =
    let _ = read_getFriendMids_args iprot in
      iprot#readMessageEnd;
      let result = new getFriendMids_result in
        (try
          result#set_success (handler#getFriendMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getFriendMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMetaProfile (seqid, iprot, oprot) =
    let _ = read_getMetaProfile_args iprot in
      iprot#readMessageEnd;
      let result = new getMetaProfile_result in
        (try
          result#set_success (handler#getMetaProfile);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMetaProfile", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendMessageForChannel (seqid, iprot, oprot) =
    let args = read_sendMessageForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new sendMessageForChannel_result in
        (try
          result#set_success (handler#sendMessageForChannel args#get_message);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendMessageForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_activeBuddySubscriberCount (seqid, iprot, oprot) =
    let _ = read_activeBuddySubscriberCount_args iprot in
      iprot#readMessageEnd;
      let result = new activeBuddySubscriberCount_result in
        (try
          result#set_success (handler#activeBuddySubscriberCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("activeBuddySubscriberCount", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCallCreditPurchaseHistory (seqid, iprot, oprot) =
    let args = read_getCallCreditPurchaseHistory_args iprot in
      iprot#readMessageEnd;
      let result = new getCallCreditPurchaseHistory_result in
        (try
          result#set_success (handler#getCallCreditPurchaseHistory args#get_request);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCallCreditPurchaseHistory", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_isRoomMember (seqid, iprot, oprot) =
    let args = read_isRoomMember_args iprot in
      iprot#readMessageEnd;
      let result = new isRoomMember_result in
        (try
          result#set_success (handler#isRoomMember args#get_roomId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("isRoomMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendSystemOAMessage (seqid, iprot, oprot) =
    let args = read_sendSystemOAMessage_args iprot in
      iprot#readMessageEnd;
      let result = new sendSystemOAMessage_result in
        (try
          result#set_success (handler#sendSystemOAMessage args#get_message);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendSystemOAMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_acquirePaidCallRoute (seqid, iprot, oprot) =
    let args = read_acquirePaidCallRoute_args iprot in
      iprot#readMessageEnd;
      let result = new acquirePaidCallRoute_result in
        (try
          result#set_success (handler#acquirePaidCallRoute args#get_paidCallType args#get_dialedNumber args#get_language args#get_networkCode args#get_disableCallerId args#get_referer args#get_adSessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("acquirePaidCallRoute", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupsForChannel (seqid, iprot, oprot) =
    let args = read_getGroupsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupsForChannel_result in
        (try
          result#set_success (handler#getGroupsForChannel args#get_groupIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserCreateTime (seqid, iprot, oprot) =
    let _ = read_getUserCreateTime_args iprot in
      iprot#readMessageEnd;
      let result = new getUserCreateTime_result in
        (try
          result#set_success (handler#getUserCreateTime);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserCreateTime", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerChannelCP (seqid, iprot, oprot) =
    let args = read_registerChannelCP_args iprot in
      iprot#readMessageEnd;
      let result = new registerChannelCP_result in
        (try
          result#set_success (handler#registerChannelCP args#get_cpId args#get_registerPassword);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerChannelCP", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reserveCallCreditPurchase (seqid, iprot, oprot) =
    let args = read_reserveCallCreditPurchase_args iprot in
      iprot#readMessageEnd;
      let result = new reserveCallCreditPurchase_result in
        (try
          result#set_success (handler#reserveCallCreditPurchase args#get_request);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reserveCallCreditPurchase", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_acquirePaidCallCurrencyExchangeRate (seqid, iprot, oprot) =
    let args = read_acquirePaidCallCurrencyExchangeRate_args iprot in
      iprot#readMessageEnd;
      let result = new acquirePaidCallCurrencyExchangeRate_result in
        (try
          result#set_success (handler#acquirePaidCallCurrencyExchangeRate args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("acquirePaidCallCurrencyExchangeRate", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getRoomMemberMidsForAppPlatform (seqid, iprot, oprot) =
    let args = read_getRoomMemberMidsForAppPlatform_args iprot in
      iprot#readMessageEnd;
      let result = new getRoomMemberMidsForAppPlatform_result in
        (try
          result#set_success (handler#getRoomMemberMidsForAppPlatform args#get_roomId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getRoomMemberMidsForAppPlatform", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPaidCallBalanceList (seqid, iprot, oprot) =
    let args = read_getPaidCallBalanceList_args iprot in
      iprot#readMessageEnd;
      let result = new getPaidCallBalanceList_result in
        (try
          result#set_success (handler#getPaidCallBalanceList args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPaidCallBalanceList", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPersonalInfos (seqid, iprot, oprot) =
    let args = read_getPersonalInfos_args iprot in
      iprot#readMessageEnd;
      let result = new getPersonalInfos_result in
        (try
          result#set_success (handler#getPersonalInfos args#get_requiredPersonalInfos);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPersonalInfos", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPrimaryClientsForChannel (seqid, iprot, oprot) =
    let args = read_getPrimaryClientsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getPrimaryClientsForChannel_result in
        (try
          result#set_success (handler#getPrimaryClientsForChannel args#get_userMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPrimaryClientsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_addBuddyToContact (seqid, iprot, oprot) =
    let args = read_addBuddyToContact_args iprot in
      iprot#readMessageEnd;
      let result = new addBuddyToContact_result in
        (try
          result#set_success (handler#addBuddyToContact args#get_buddyMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("addBuddyToContact", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupMemberMidsForAppPlatform (seqid, iprot, oprot) =
    let args = read_getGroupMemberMidsForAppPlatform_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupMemberMidsForAppPlatform_result in
        (try
          result#set_success (handler#getGroupMemberMidsForAppPlatform args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupMemberMidsForAppPlatform", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserLanguage (seqid, iprot, oprot) =
    let _ = read_getUserLanguage_args iprot in
      iprot#readMessageEnd;
      let result = new getUserLanguage_result in
        (try
          result#set_success (handler#getUserLanguage);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserLanguage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_lookupPaidCall (seqid, iprot, oprot) =
    let args = read_lookupPaidCall_args iprot in
      iprot#readMessageEnd;
      let result = new lookupPaidCall_result in
        (try
          result#set_success (handler#lookupPaidCall args#get_dialedNumber args#get_language args#get_referer);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("lookupPaidCall", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getExtendedProfile (seqid, iprot, oprot) =
    let _ = read_getExtendedProfile_args iprot in
      iprot#readMessageEnd;
      let result = new getExtendedProfile_result in
        (try
          result#set_success (handler#getExtendedProfile);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getExtendedProfile", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getReverseCompactContacts (seqid, iprot, oprot) =
    let args = read_getReverseCompactContacts_args iprot in
      iprot#readMessageEnd;
      let result = new getReverseCompactContacts_result in
        (try
          result#set_success (handler#getReverseCompactContacts args#get_ids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getReverseCompactContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPaidCallAdStatus (seqid, iprot, oprot) =
    let _ = read_getPaidCallAdStatus_args iprot in
      iprot#readMessageEnd;
      let result = new getPaidCallAdStatus_result in
        (try
          result#set_success (handler#getPaidCallAdStatus);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPaidCallAdStatus", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findContactByUseridWithoutAbuseBlockForChannel (seqid, iprot, oprot) =
    let args = read_findContactByUseridWithoutAbuseBlockForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new findContactByUseridWithoutAbuseBlockForChannel_result in
        (try
          result#set_success (handler#findContactByUseridWithoutAbuseBlockForChannel args#get_userid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findContactByUseridWithoutAbuseBlockForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupMemberMids (seqid, iprot, oprot) =
    let args = read_getGroupMemberMids_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupMemberMids_result in
        (try
          result#set_success (handler#getGroupMemberMids args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupMemberMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendMessageWithoutRelationship (seqid, iprot, oprot) =
    let args = read_sendMessageWithoutRelationship_args iprot in
      iprot#readMessageEnd;
      let result = new sendMessageWithoutRelationship_result in
        (try
          result#set_success (handler#sendMessageWithoutRelationship args#get_message);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendMessageWithoutRelationship", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_displayBuddySubscriberCountInBulk (seqid, iprot, oprot) =
    let args = read_displayBuddySubscriberCountInBulk_args iprot in
      iprot#readMessageEnd;
      let result = new displayBuddySubscriberCountInBulk_result in
        (try
          result#set_success (handler#displayBuddySubscriberCountInBulk args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("displayBuddySubscriberCountInBulk", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_lookupRoomMembers (seqid, iprot, oprot) =
    let args = read_lookupRoomMembers_args iprot in
      iprot#readMessageEnd;
      let result = new lookupRoomMembers_result in
        (try
          result#set_success (handler#lookupRoomMembers args#get_roomId args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("lookupRoomMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getFavoriteMidsForChannel (seqid, iprot, oprot) =
    let _ = read_getFavoriteMidsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getFavoriteMidsForChannel_result in
        (try
          result#set_success (handler#getFavoriteMidsForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getFavoriteMidsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getAllContactIdsForChannel (seqid, iprot, oprot) =
    let _ = read_getAllContactIdsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getAllContactIdsForChannel_result in
        (try
          result#set_success (handler#getAllContactIdsForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getAllContactIdsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_displayBuddySubscriberCount (seqid, iprot, oprot) =
    let _ = read_displayBuddySubscriberCount_args iprot in
      iprot#readMessageEnd;
      let result = new displayBuddySubscriberCount_result in
        (try
          result#set_success (handler#displayBuddySubscriberCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("displayBuddySubscriberCount", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProfileForChannel (seqid, iprot, oprot) =
    let _ = read_getProfileForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getProfileForChannel_result in
        (try
          result#set_success (handler#getProfileForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getProfileForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserTickets (seqid, iprot, oprot) =
    let args = read_getUserTickets_args iprot in
      iprot#readMessageEnd;
      let result = new getUserTickets_result in
        (try
          result#set_success (handler#getUserTickets args#get_userMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserTickets", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getOAFriendMids (seqid, iprot, oprot) =
    let _ = read_getOAFriendMids_args iprot in
      iprot#readMessageEnd;
      let result = new getOAFriendMids_result in
        (try
          result#set_success (handler#getOAFriendMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getOAFriendMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_searchPaidCallUserRate (seqid, iprot, oprot) =
    let args = read_searchPaidCallUserRate_args iprot in
      iprot#readMessageEnd;
      let result = new searchPaidCallUserRate_result in
        (try
          result#set_success (handler#searchPaidCallUserRate args#get_countryCode args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("searchPaidCallUserRate", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getJoinedGroupIdsForChannel (seqid, iprot, oprot) =
    let _ = read_getJoinedGroupIdsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getJoinedGroupIdsForChannel_result in
        (try
          result#set_success (handler#getJoinedGroupIdsForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getJoinedGroupIdsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_acquireGroupCallRoute (seqid, iprot, oprot) =
    let args = read_acquireGroupCallRoute_args iprot in
      iprot#readMessageEnd;
      let result = new acquireGroupCallRoute_result in
        (try
          result#set_success (handler#acquireGroupCallRoute args#get_chatMid args#get_mediaType);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("acquireGroupCallRoute", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserMidsWhoAddedMe (seqid, iprot, oprot) =
    let _ = read_getUserMidsWhoAddedMe_args iprot in
      iprot#readMessageEnd;
      let result = new getUserMidsWhoAddedMe_result in
        (try
          result#set_success (handler#getUserMidsWhoAddedMe);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserMidsWhoAddedMe", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getIdentityCredential (seqid, iprot, oprot) =
    let _ = read_getIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new getIdentityCredential_result in
        (try
          result#set_success (handler#getIdentityCredential);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_addOperationForChannel (seqid, iprot, oprot) =
    let args = read_addOperationForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new addOperationForChannel_result in
        (try
          (handler#addOperationForChannel args#get_opType args#get_param1 args#get_param2 args#get_param3);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("addOperationForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSimpleChannelContacts (seqid, iprot, oprot) =
    let args = read_getSimpleChannelContacts_args iprot in
      iprot#readMessageEnd;
      let result = new getSimpleChannelContacts_result in
        (try
          result#set_success (handler#getSimpleChannelContacts args#get_ids args#get_statusSticonFallbackDisabled);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSimpleChannelContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserLastSentMessageTimeStamp (seqid, iprot, oprot) =
    let args = read_getUserLastSentMessageTimeStamp_args iprot in
      iprot#readMessageEnd;
      let result = new getUserLastSentMessageTimeStamp_result in
        (try
          result#set_success (handler#getUserLastSentMessageTimeStamp args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserLastSentMessageTimeStamp", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "getUserStatus" self#process_getUserStatus;
    Hashtbl.add processMap "updateProfileAttributeForChannel" self#process_updateProfileAttributeForChannel;
    Hashtbl.add processMap "updateExtendedProfileAttribute" self#process_updateExtendedProfileAttribute;
    Hashtbl.add processMap "getAllSimpleChannelContacts" self#process_getAllSimpleChannelContacts;
    Hashtbl.add processMap "getUserIdentities" self#process_getUserIdentities;
    Hashtbl.add processMap "markPaidCallAd" self#process_markPaidCallAd;
    Hashtbl.add processMap "isGroupMember" self#process_isGroupMember;
    Hashtbl.add processMap "getPhoneInfoFromPhoneNumber" self#process_getPhoneInfoFromPhoneNumber;
    Hashtbl.add processMap "redeemPaidCallVoucher" self#process_redeemPaidCallVoucher;
    Hashtbl.add processMap "getPreferredDisplayName" self#process_getPreferredDisplayName;
    Hashtbl.add processMap "getContactsForChannel" self#process_getContactsForChannel;
    Hashtbl.add processMap "getCallCreditProducts" self#process_getCallCreditProducts;
    Hashtbl.add processMap "getCompactContacts" self#process_getCompactContacts;
    Hashtbl.add processMap "notifyNotiCenterEvent" self#process_notifyNotiCenterEvent;
    Hashtbl.add processMap "isInContact" self#process_isInContact;
    Hashtbl.add processMap "lookupGroupMembers" self#process_lookupGroupMembers;
    Hashtbl.add processMap "getRoomInformation" self#process_getRoomInformation;
    Hashtbl.add processMap "getGroupCall" self#process_getGroupCall;
    Hashtbl.add processMap "isAllowSecondaryDeviceLogin" self#process_isAllowSecondaryDeviceLogin;
    Hashtbl.add processMap "getPrimaryClientForChannel" self#process_getPrimaryClientForChannel;
    Hashtbl.add processMap "createRoomWithBuddy" self#process_createRoomWithBuddy;
    Hashtbl.add processMap "getDisplayName" self#process_getDisplayName;
    Hashtbl.add processMap "getPaidCallMetadata" self#process_getPaidCallMetadata;
    Hashtbl.add processMap "getMid" self#process_getMid;
    Hashtbl.add processMap "getUserCountryForBilling" self#process_getUserCountryForBilling;
    Hashtbl.add processMap "getFavoriteGroupIdsForChannel" self#process_getFavoriteGroupIdsForChannel;
    Hashtbl.add processMap "getPaidCallHistory" self#process_getPaidCallHistory;
    Hashtbl.add processMap "sendPinCodeOperation" self#process_sendPinCodeOperation;
    Hashtbl.add processMap "inviteIntoGroupCall" self#process_inviteIntoGroupCall;
    Hashtbl.add processMap "getFriendMids" self#process_getFriendMids;
    Hashtbl.add processMap "getMetaProfile" self#process_getMetaProfile;
    Hashtbl.add processMap "sendMessageForChannel" self#process_sendMessageForChannel;
    Hashtbl.add processMap "activeBuddySubscriberCount" self#process_activeBuddySubscriberCount;
    Hashtbl.add processMap "getCallCreditPurchaseHistory" self#process_getCallCreditPurchaseHistory;
    Hashtbl.add processMap "isRoomMember" self#process_isRoomMember;
    Hashtbl.add processMap "sendSystemOAMessage" self#process_sendSystemOAMessage;
    Hashtbl.add processMap "acquirePaidCallRoute" self#process_acquirePaidCallRoute;
    Hashtbl.add processMap "getGroupsForChannel" self#process_getGroupsForChannel;
    Hashtbl.add processMap "getUserCreateTime" self#process_getUserCreateTime;
    Hashtbl.add processMap "registerChannelCP" self#process_registerChannelCP;
    Hashtbl.add processMap "reserveCallCreditPurchase" self#process_reserveCallCreditPurchase;
    Hashtbl.add processMap "acquirePaidCallCurrencyExchangeRate" self#process_acquirePaidCallCurrencyExchangeRate;
    Hashtbl.add processMap "getRoomMemberMidsForAppPlatform" self#process_getRoomMemberMidsForAppPlatform;
    Hashtbl.add processMap "getPaidCallBalanceList" self#process_getPaidCallBalanceList;
    Hashtbl.add processMap "getPersonalInfos" self#process_getPersonalInfos;
    Hashtbl.add processMap "getPrimaryClientsForChannel" self#process_getPrimaryClientsForChannel;
    Hashtbl.add processMap "addBuddyToContact" self#process_addBuddyToContact;
    Hashtbl.add processMap "getGroupMemberMidsForAppPlatform" self#process_getGroupMemberMidsForAppPlatform;
    Hashtbl.add processMap "getUserLanguage" self#process_getUserLanguage;
    Hashtbl.add processMap "lookupPaidCall" self#process_lookupPaidCall;
    Hashtbl.add processMap "getExtendedProfile" self#process_getExtendedProfile;
    Hashtbl.add processMap "getReverseCompactContacts" self#process_getReverseCompactContacts;
    Hashtbl.add processMap "getPaidCallAdStatus" self#process_getPaidCallAdStatus;
    Hashtbl.add processMap "findContactByUseridWithoutAbuseBlockForChannel" self#process_findContactByUseridWithoutAbuseBlockForChannel;
    Hashtbl.add processMap "getGroupMemberMids" self#process_getGroupMemberMids;
    Hashtbl.add processMap "sendMessageWithoutRelationship" self#process_sendMessageWithoutRelationship;
    Hashtbl.add processMap "displayBuddySubscriberCountInBulk" self#process_displayBuddySubscriberCountInBulk;
    Hashtbl.add processMap "lookupRoomMembers" self#process_lookupRoomMembers;
    Hashtbl.add processMap "getFavoriteMidsForChannel" self#process_getFavoriteMidsForChannel;
    Hashtbl.add processMap "getAllContactIdsForChannel" self#process_getAllContactIdsForChannel;
    Hashtbl.add processMap "displayBuddySubscriberCount" self#process_displayBuddySubscriberCount;
    Hashtbl.add processMap "getProfileForChannel" self#process_getProfileForChannel;
    Hashtbl.add processMap "getUserTickets" self#process_getUserTickets;
    Hashtbl.add processMap "getOAFriendMids" self#process_getOAFriendMids;
    Hashtbl.add processMap "searchPaidCallUserRate" self#process_searchPaidCallUserRate;
    Hashtbl.add processMap "getJoinedGroupIdsForChannel" self#process_getJoinedGroupIdsForChannel;
    Hashtbl.add processMap "acquireGroupCallRoute" self#process_acquireGroupCallRoute;
    Hashtbl.add processMap "getUserMidsWhoAddedMe" self#process_getUserMidsWhoAddedMe;
    Hashtbl.add processMap "getIdentityCredential" self#process_getIdentityCredential;
    Hashtbl.add processMap "addOperationForChannel" self#process_addOperationForChannel;
    Hashtbl.add processMap "getSimpleChannelContacts" self#process_getSimpleChannelContacts;
    Hashtbl.add processMap "getUserLastSentMessageTimeStamp" self#process_getUserLastSentMessageTimeStamp;
end

