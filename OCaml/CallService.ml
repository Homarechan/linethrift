(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class getUserStatus_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "getUserStatus_args.mid") | Some _x10405 -> _x10405
  method set_mid _x10405 = _mid <- Some _x10405
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserStatus_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserStatus_args (iprot : Protocol.t) =
  let _str10408 = new getUserStatus_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10409,_id10410) = iprot#readFieldBegin in
        if _t10409 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10410 with 
          | 1 -> (if _t10409 = Protocol.T_STRING then
              _str10408#set_mid iprot#readString
            else
              iprot#skip _t10409)
          | _ -> iprot#skip _t10409);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10408

class getUserStatus_result =
object (self)
  val mutable _success : UserStatus.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserStatus_result.success") | Some _x10411 -> _x10411
  method set_success _x10411 = _success <- Some _x10411
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserStatus_result.e") | Some _x10412 -> _x10412
  method set_e _x10412 = _e <- Some _x10412
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserStatus_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I32,0);
      oprot#writeI32(UserStatus.to_i _v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserStatus_result (iprot : Protocol.t) =
  let _str10415 = new getUserStatus_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10416,_id10417) = iprot#readFieldBegin in
        if _t10416 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10417 with 
          | 0 -> (if _t10416 = Protocol.T_I32 then
              _str10415#set_success (UserStatus.of_i iprot#readI32)
            else
              iprot#skip _t10416)
          | 1 -> (if _t10416 = Protocol.T_STRUCT then
              _str10415#set_e (read_talkException iprot)
            else
              iprot#skip _t10416)
          | _ -> iprot#skip _t10416);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10415

class updateProfileAttributeForChannel_args =
object (self)
  val mutable _profileAttribute : ProfileAttribute.t option = None
  method get_profileAttribute = _profileAttribute
  method grab_profileAttribute = match _profileAttribute with None->raise (Field_empty "updateProfileAttributeForChannel_args.profileAttribute") | Some _x10418 -> _x10418
  method set_profileAttribute _x10418 = _profileAttribute <- Some _x10418
  method unset_profileAttribute = _profileAttribute <- None
  method reset_profileAttribute = _profileAttribute <- None

  val mutable _value : string option = None
  method get_value = _value
  method grab_value = match _value with None->raise (Field_empty "updateProfileAttributeForChannel_args.value") | Some _x10419 -> _x10419
  method set_value _x10419 = _value <- Some _x10419
  method unset_value = _value <- None
  method reset_value = _value <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateProfileAttributeForChannel_args";
    (match _profileAttribute with None -> () | Some _v -> 
      oprot#writeFieldBegin("profileAttribute",Protocol.T_I32,2);
      oprot#writeI32(ProfileAttribute.to_i _v);
      oprot#writeFieldEnd
    );
    (match _value with None -> () | Some _v -> 
      oprot#writeFieldBegin("value",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateProfileAttributeForChannel_args (iprot : Protocol.t) =
  let _str10422 = new updateProfileAttributeForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10423,_id10424) = iprot#readFieldBegin in
        if _t10423 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10424 with 
          | 2 -> (if _t10423 = Protocol.T_I32 then
              _str10422#set_profileAttribute (ProfileAttribute.of_i iprot#readI32)
            else
              iprot#skip _t10423)
          | 3 -> (if _t10423 = Protocol.T_STRING then
              _str10422#set_value iprot#readString
            else
              iprot#skip _t10423)
          | _ -> iprot#skip _t10423);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10422

class updateProfileAttributeForChannel_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateProfileAttributeForChannel_result.e") | Some _x10425 -> _x10425
  method set_e _x10425 = _e <- Some _x10425
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateProfileAttributeForChannel_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateProfileAttributeForChannel_result (iprot : Protocol.t) =
  let _str10428 = new updateProfileAttributeForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10429,_id10430) = iprot#readFieldBegin in
        if _t10429 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10430 with 
          | 1 -> (if _t10429 = Protocol.T_STRUCT then
              _str10428#set_e (read_talkException iprot)
            else
              iprot#skip _t10429)
          | _ -> iprot#skip _t10429);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10428

class updateExtendedProfileAttribute_args =
object (self)
  val mutable _attr : ExtendedProfileAttribute.t option = None
  method get_attr = _attr
  method grab_attr = match _attr with None->raise (Field_empty "updateExtendedProfileAttribute_args.attr") | Some _x10431 -> _x10431
  method set_attr _x10431 = _attr <- Some _x10431
  method unset_attr = _attr <- None
  method reset_attr = _attr <- None

  val mutable _extendedProfile : extendedProfile option = None
  method get_extendedProfile = _extendedProfile
  method grab_extendedProfile = match _extendedProfile with None->raise (Field_empty "updateExtendedProfileAttribute_args.extendedProfile") | Some _x10432 -> _x10432
  method set_extendedProfile _x10432 = _extendedProfile <- Some _x10432
  method unset_extendedProfile = _extendedProfile <- None
  method reset_extendedProfile = _extendedProfile <- None

  method copy =
      let _new = Oo.copy self in
      if _extendedProfile <> None then
        _new#set_extendedProfile self#grab_extendedProfile#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateExtendedProfileAttribute_args";
    (match _attr with None -> () | Some _v -> 
      oprot#writeFieldBegin("attr",Protocol.T_I32,1);
      oprot#writeI32(ExtendedProfileAttribute.to_i _v);
      oprot#writeFieldEnd
    );
    (match _extendedProfile with None -> () | Some _v -> 
      oprot#writeFieldBegin("extendedProfile",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateExtendedProfileAttribute_args (iprot : Protocol.t) =
  let _str10435 = new updateExtendedProfileAttribute_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10436,_id10437) = iprot#readFieldBegin in
        if _t10436 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10437 with 
          | 1 -> (if _t10436 = Protocol.T_I32 then
              _str10435#set_attr (ExtendedProfileAttribute.of_i iprot#readI32)
            else
              iprot#skip _t10436)
          | 2 -> (if _t10436 = Protocol.T_STRUCT then
              _str10435#set_extendedProfile (read_extendedProfile iprot)
            else
              iprot#skip _t10436)
          | _ -> iprot#skip _t10436);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10435

class updateExtendedProfileAttribute_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateExtendedProfileAttribute_result.e") | Some _x10438 -> _x10438
  method set_e _x10438 = _e <- Some _x10438
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateExtendedProfileAttribute_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateExtendedProfileAttribute_result (iprot : Protocol.t) =
  let _str10441 = new updateExtendedProfileAttribute_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10442,_id10443) = iprot#readFieldBegin in
        if _t10442 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10443 with 
          | 1 -> (if _t10442 = Protocol.T_STRUCT then
              _str10441#set_e (read_talkException iprot)
            else
              iprot#skip _t10442)
          | _ -> iprot#skip _t10442);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10441

class getAllSimpleChannelContacts_args =
object (self)
  val mutable _statusSticonFallbackDisabled : bool option = None
  method get_statusSticonFallbackDisabled = _statusSticonFallbackDisabled
  method grab_statusSticonFallbackDisabled = match _statusSticonFallbackDisabled with None->raise (Field_empty "getAllSimpleChannelContacts_args.statusSticonFallbackDisabled") | Some _x10444 -> _x10444
  method set_statusSticonFallbackDisabled _x10444 = _statusSticonFallbackDisabled <- Some _x10444
  method unset_statusSticonFallbackDisabled = _statusSticonFallbackDisabled <- None
  method reset_statusSticonFallbackDisabled = _statusSticonFallbackDisabled <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllSimpleChannelContacts_args";
    (match _statusSticonFallbackDisabled with None -> () | Some _v -> 
      oprot#writeFieldBegin("statusSticonFallbackDisabled",Protocol.T_BOOL,1);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllSimpleChannelContacts_args (iprot : Protocol.t) =
  let _str10447 = new getAllSimpleChannelContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10448,_id10449) = iprot#readFieldBegin in
        if _t10448 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10449 with 
          | 1 -> (if _t10448 = Protocol.T_BOOL then
              _str10447#set_statusSticonFallbackDisabled iprot#readBool
            else
              iprot#skip _t10448)
          | _ -> iprot#skip _t10448);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10447

class getAllSimpleChannelContacts_result =
object (self)
  val mutable _success : simpleChannelContact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getAllSimpleChannelContacts_result.success") | Some _x10450 -> _x10450
  method set_success _x10450 = _success <- Some _x10450
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getAllSimpleChannelContacts_result.e") | Some _x10451 -> _x10451
  method set_e _x10451 = _e <- Some _x10451
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllSimpleChannelContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter10454 ->         _iter10454#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllSimpleChannelContacts_result (iprot : Protocol.t) =
  let _str10455 = new getAllSimpleChannelContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10456,_id10457) = iprot#readFieldBegin in
        if _t10456 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10457 with 
          | 0 -> (if _t10456 = Protocol.T_LIST then
              _str10455#set_success 
                (let (_etype10461,_size10458) = iprot#readListBegin in
                  let _con10462 = (Array.to_list (Array.init _size10458 (fun _ -> (read_simpleChannelContact iprot)))) in
                    iprot#readListEnd; _con10462)
            else
              iprot#skip _t10456)
          | 1 -> (if _t10456 = Protocol.T_STRUCT then
              _str10455#set_e (read_talkException iprot)
            else
              iprot#skip _t10456)
          | _ -> iprot#skip _t10456);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10455

class getUserIdentities_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserIdentities_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserIdentities_args (iprot : Protocol.t) =
  let _str10465 = new getUserIdentities_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10466,_id10467) = iprot#readFieldBegin in
        if _t10466 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10467 with 
          | _ -> iprot#skip _t10466);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10465

class getUserIdentities_result =
object (self)
  val mutable _success : (RegistrationType.t,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserIdentities_result.success") | Some _x10468 -> _x10468
  method set_success _x10468 = _success <- Some _x10468
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserIdentities_result.e") | Some _x10469 -> _x10469
  method set_e _x10469 = _e <- Some _x10469
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserIdentities_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_I32,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter10472 -> fun _viter10473 -> 
        oprot#writeI32(RegistrationType.to_i _kiter10472);
        oprot#writeString(_viter10473);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserIdentities_result (iprot : Protocol.t) =
  let _str10474 = new getUserIdentities_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10475,_id10476) = iprot#readFieldBegin in
        if _t10475 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10476 with 
          | 0 -> (if _t10475 = Protocol.T_MAP then
              _str10474#set_success 
                (let (_ktype10478,_vtype10479,_size10477) = iprot#readMapBegin in
                let _con10481 = Hashtbl.create _size10477 in
                  for i = 1 to _size10477 do
                    let _k = (RegistrationType.of_i iprot#readI32) in
                    let _v = iprot#readString in
                      Hashtbl.add _con10481 _k _v
                  done; iprot#readMapEnd; _con10481)
            else
              iprot#skip _t10475)
          | 1 -> (if _t10475 = Protocol.T_STRUCT then
              _str10474#set_e (read_talkException iprot)
            else
              iprot#skip _t10475)
          | _ -> iprot#skip _t10475);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10474

class markPaidCallAd_args =
object (self)
  val mutable _dialedNumber : string option = None
  method get_dialedNumber = _dialedNumber
  method grab_dialedNumber = match _dialedNumber with None->raise (Field_empty "markPaidCallAd_args.dialedNumber") | Some _x10482 -> _x10482
  method set_dialedNumber _x10482 = _dialedNumber <- Some _x10482
  method unset_dialedNumber = _dialedNumber <- None
  method reset_dialedNumber = _dialedNumber <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "markPaidCallAd_args.language") | Some _x10483 -> _x10483
  method set_language _x10483 = _language <- Some _x10483
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _disableCallerId : bool option = None
  method get_disableCallerId = _disableCallerId
  method grab_disableCallerId = match _disableCallerId with None->raise (Field_empty "markPaidCallAd_args.disableCallerId") | Some _x10484 -> _x10484
  method set_disableCallerId _x10484 = _disableCallerId <- Some _x10484
  method unset_disableCallerId = _disableCallerId <- None
  method reset_disableCallerId = _disableCallerId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "markPaidCallAd_args";
    (match _dialedNumber with None -> () | Some _v -> 
      oprot#writeFieldBegin("dialedNumber",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _disableCallerId with None -> () | Some _v -> 
      oprot#writeFieldBegin("disableCallerId",Protocol.T_BOOL,4);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_markPaidCallAd_args (iprot : Protocol.t) =
  let _str10487 = new markPaidCallAd_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10488,_id10489) = iprot#readFieldBegin in
        if _t10488 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10489 with 
          | 2 -> (if _t10488 = Protocol.T_STRING then
              _str10487#set_dialedNumber iprot#readString
            else
              iprot#skip _t10488)
          | 3 -> (if _t10488 = Protocol.T_STRING then
              _str10487#set_language iprot#readString
            else
              iprot#skip _t10488)
          | 4 -> (if _t10488 = Protocol.T_BOOL then
              _str10487#set_disableCallerId iprot#readBool
            else
              iprot#skip _t10488)
          | _ -> iprot#skip _t10488);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10487

class markPaidCallAd_result =
object (self)
  val mutable _success : paidCallDialing option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "markPaidCallAd_result.success") | Some _x10490 -> _x10490
  method set_success _x10490 = _success <- Some _x10490
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "markPaidCallAd_result.e") | Some _x10491 -> _x10491
  method set_e _x10491 = _e <- Some _x10491
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "markPaidCallAd_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_markPaidCallAd_result (iprot : Protocol.t) =
  let _str10494 = new markPaidCallAd_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10495,_id10496) = iprot#readFieldBegin in
        if _t10495 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10496 with 
          | 0 -> (if _t10495 = Protocol.T_STRUCT then
              _str10494#set_success (read_paidCallDialing iprot)
            else
              iprot#skip _t10495)
          | 1 -> (if _t10495 = Protocol.T_STRUCT then
              _str10494#set_e (read_talkException iprot)
            else
              iprot#skip _t10495)
          | _ -> iprot#skip _t10495);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10494

class isGroupMember_args =
object (self)
  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "isGroupMember_args.groupId") | Some _x10497 -> _x10497
  method set_groupId _x10497 = _groupId <- Some _x10497
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isGroupMember_args";
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isGroupMember_args (iprot : Protocol.t) =
  let _str10500 = new isGroupMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10501,_id10502) = iprot#readFieldBegin in
        if _t10501 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10502 with 
          | 1 -> (if _t10501 = Protocol.T_STRING then
              _str10500#set_groupId iprot#readString
            else
              iprot#skip _t10501)
          | _ -> iprot#skip _t10501);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10500

class isGroupMember_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "isGroupMember_result.success") | Some _x10503 -> _x10503
  method set_success _x10503 = _success <- Some _x10503
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "isGroupMember_result.e") | Some _x10504 -> _x10504
  method set_e _x10504 = _e <- Some _x10504
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isGroupMember_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isGroupMember_result (iprot : Protocol.t) =
  let _str10507 = new isGroupMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10508,_id10509) = iprot#readFieldBegin in
        if _t10508 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10509 with 
          | 0 -> (if _t10508 = Protocol.T_BOOL then
              _str10507#set_success iprot#readBool
            else
              iprot#skip _t10508)
          | 1 -> (if _t10508 = Protocol.T_STRUCT then
              _str10507#set_e (read_talkException iprot)
            else
              iprot#skip _t10508)
          | _ -> iprot#skip _t10508);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10507

class getPhoneInfoFromPhoneNumber_args =
object (self)
  val mutable _region : string option = None
  method get_region = _region
  method grab_region = match _region with None->raise (Field_empty "getPhoneInfoFromPhoneNumber_args.region") | Some _x10510 -> _x10510
  method set_region _x10510 = _region <- Some _x10510
  method unset_region = _region <- None
  method reset_region = _region <- None

  val mutable _phoneNumber : string option = None
  method get_phoneNumber = _phoneNumber
  method grab_phoneNumber = match _phoneNumber with None->raise (Field_empty "getPhoneInfoFromPhoneNumber_args.phoneNumber") | Some _x10511 -> _x10511
  method set_phoneNumber _x10511 = _phoneNumber <- Some _x10511
  method unset_phoneNumber = _phoneNumber <- None
  method reset_phoneNumber = _phoneNumber <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPhoneInfoFromPhoneNumber_args";
    (match _region with None -> () | Some _v -> 
      oprot#writeFieldBegin("region",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _phoneNumber with None -> () | Some _v -> 
      oprot#writeFieldBegin("phoneNumber",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPhoneInfoFromPhoneNumber_args (iprot : Protocol.t) =
  let _str10514 = new getPhoneInfoFromPhoneNumber_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10515,_id10516) = iprot#readFieldBegin in
        if _t10515 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10516 with 
          | 1 -> (if _t10515 = Protocol.T_STRING then
              _str10514#set_region iprot#readString
            else
              iprot#skip _t10515)
          | 2 -> (if _t10515 = Protocol.T_STRING then
              _str10514#set_phoneNumber iprot#readString
            else
              iprot#skip _t10515)
          | _ -> iprot#skip _t10515);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10514

class getPhoneInfoFromPhoneNumber_result =
object (self)
  val mutable _success : phoneInfoForChannel option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPhoneInfoFromPhoneNumber_result.success") | Some _x10517 -> _x10517
  method set_success _x10517 = _success <- Some _x10517
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPhoneInfoFromPhoneNumber_result.e") | Some _x10518 -> _x10518
  method set_e _x10518 = _e <- Some _x10518
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPhoneInfoFromPhoneNumber_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPhoneInfoFromPhoneNumber_result (iprot : Protocol.t) =
  let _str10521 = new getPhoneInfoFromPhoneNumber_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10522,_id10523) = iprot#readFieldBegin in
        if _t10522 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10523 with 
          | 0 -> (if _t10522 = Protocol.T_STRUCT then
              _str10521#set_success (read_phoneInfoForChannel iprot)
            else
              iprot#skip _t10522)
          | 1 -> (if _t10522 = Protocol.T_STRUCT then
              _str10521#set_e (read_talkException iprot)
            else
              iprot#skip _t10522)
          | _ -> iprot#skip _t10522);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10521

class redeemPaidCallVoucher_args =
object (self)
  val mutable _serial : string option = None
  method get_serial = _serial
  method grab_serial = match _serial with None->raise (Field_empty "redeemPaidCallVoucher_args.serial") | Some _x10524 -> _x10524
  method set_serial _x10524 = _serial <- Some _x10524
  method unset_serial = _serial <- None
  method reset_serial = _serial <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "redeemPaidCallVoucher_args.language") | Some _x10525 -> _x10525
  method set_language _x10525 = _language <- Some _x10525
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "redeemPaidCallVoucher_args";
    (match _serial with None -> () | Some _v -> 
      oprot#writeFieldBegin("serial",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_redeemPaidCallVoucher_args (iprot : Protocol.t) =
  let _str10528 = new redeemPaidCallVoucher_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10529,_id10530) = iprot#readFieldBegin in
        if _t10529 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10530 with 
          | 2 -> (if _t10529 = Protocol.T_STRING then
              _str10528#set_serial iprot#readString
            else
              iprot#skip _t10529)
          | 3 -> (if _t10529 = Protocol.T_STRING then
              _str10528#set_language iprot#readString
            else
              iprot#skip _t10529)
          | _ -> iprot#skip _t10529);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10528

class redeemPaidCallVoucher_result =
object (self)
  val mutable _success : paidCallRedeemResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "redeemPaidCallVoucher_result.success") | Some _x10531 -> _x10531
  method set_success _x10531 = _success <- Some _x10531
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "redeemPaidCallVoucher_result.e") | Some _x10532 -> _x10532
  method set_e _x10532 = _e <- Some _x10532
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "redeemPaidCallVoucher_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_redeemPaidCallVoucher_result (iprot : Protocol.t) =
  let _str10535 = new redeemPaidCallVoucher_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10536,_id10537) = iprot#readFieldBegin in
        if _t10536 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10537 with 
          | 0 -> (if _t10536 = Protocol.T_STRUCT then
              _str10535#set_success (read_paidCallRedeemResult iprot)
            else
              iprot#skip _t10536)
          | 1 -> (if _t10536 = Protocol.T_STRUCT then
              _str10535#set_e (read_talkException iprot)
            else
              iprot#skip _t10536)
          | _ -> iprot#skip _t10536);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10535

class getPreferredDisplayName_args =
object (self)
  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "getPreferredDisplayName_args.mids") | Some _x10538 -> _x10538
  method set_mids _x10538 = _mids <- Some _x10538
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPreferredDisplayName_args";
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter10541 ->         oprot#writeString(_iter10541);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPreferredDisplayName_args (iprot : Protocol.t) =
  let _str10542 = new getPreferredDisplayName_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10543,_id10544) = iprot#readFieldBegin in
        if _t10543 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10544 with 
          | 1 -> (if _t10543 = Protocol.T_LIST then
              _str10542#set_mids 
                (let (_etype10548,_size10545) = iprot#readListBegin in
                  let _con10549 = (Array.to_list (Array.init _size10545 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con10549)
            else
              iprot#skip _t10543)
          | _ -> iprot#skip _t10543);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10542

class getPreferredDisplayName_result =
object (self)
  val mutable _success : (string,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPreferredDisplayName_result.success") | Some _x10550 -> _x10550
  method set_success _x10550 = _success <- Some _x10550
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPreferredDisplayName_result.e") | Some _x10551 -> _x10551
  method set_e _x10551 = _e <- Some _x10551
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPreferredDisplayName_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter10554 -> fun _viter10555 -> 
        oprot#writeString(_kiter10554);
        oprot#writeString(_viter10555);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPreferredDisplayName_result (iprot : Protocol.t) =
  let _str10556 = new getPreferredDisplayName_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10557,_id10558) = iprot#readFieldBegin in
        if _t10557 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10558 with 
          | 0 -> (if _t10557 = Protocol.T_MAP then
              _str10556#set_success 
                (let (_ktype10560,_vtype10561,_size10559) = iprot#readMapBegin in
                let _con10563 = Hashtbl.create _size10559 in
                  for i = 1 to _size10559 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con10563 _k _v
                  done; iprot#readMapEnd; _con10563)
            else
              iprot#skip _t10557)
          | 1 -> (if _t10557 = Protocol.T_STRUCT then
              _str10556#set_e (read_talkException iprot)
            else
              iprot#skip _t10557)
          | _ -> iprot#skip _t10557);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10556

class getContactsForChannel_args =
object (self)
  val mutable _ids : string list option = None
  method get_ids = _ids
  method grab_ids = match _ids with None->raise (Field_empty "getContactsForChannel_args.ids") | Some _x10564 -> _x10564
  method set_ids _x10564 = _ids <- Some _x10564
  method unset_ids = _ids <- None
  method reset_ids = _ids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContactsForChannel_args";
    (match _ids with None -> () | Some _v -> 
      oprot#writeFieldBegin("ids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter10567 ->         oprot#writeString(_iter10567);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContactsForChannel_args (iprot : Protocol.t) =
  let _str10568 = new getContactsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10569,_id10570) = iprot#readFieldBegin in
        if _t10569 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10570 with 
          | 2 -> (if _t10569 = Protocol.T_LIST then
              _str10568#set_ids 
                (let (_etype10574,_size10571) = iprot#readListBegin in
                  let _con10575 = (Array.to_list (Array.init _size10571 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con10575)
            else
              iprot#skip _t10569)
          | _ -> iprot#skip _t10569);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10568

class getContactsForChannel_result =
object (self)
  val mutable _success : contact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getContactsForChannel_result.success") | Some _x10576 -> _x10576
  method set_success _x10576 = _success <- Some _x10576
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getContactsForChannel_result.e") | Some _x10577 -> _x10577
  method set_e _x10577 = _e <- Some _x10577
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContactsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter10580 ->         _iter10580#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContactsForChannel_result (iprot : Protocol.t) =
  let _str10581 = new getContactsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10582,_id10583) = iprot#readFieldBegin in
        if _t10582 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10583 with 
          | 0 -> (if _t10582 = Protocol.T_LIST then
              _str10581#set_success 
                (let (_etype10587,_size10584) = iprot#readListBegin in
                  let _con10588 = (Array.to_list (Array.init _size10584 (fun _ -> (read_contact iprot)))) in
                    iprot#readListEnd; _con10588)
            else
              iprot#skip _t10582)
          | 1 -> (if _t10582 = Protocol.T_STRUCT then
              _str10581#set_e (read_talkException iprot)
            else
              iprot#skip _t10582)
          | _ -> iprot#skip _t10582);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10581

class getCallCreditProducts_args =
object (self)
  val mutable _appStoreCode : PaymentType.t option = None
  method get_appStoreCode = _appStoreCode
  method grab_appStoreCode = match _appStoreCode with None->raise (Field_empty "getCallCreditProducts_args.appStoreCode") | Some _x10589 -> _x10589
  method set_appStoreCode _x10589 = _appStoreCode <- Some _x10589
  method unset_appStoreCode = _appStoreCode <- None
  method reset_appStoreCode = _appStoreCode <- None

  val mutable _pgCode : PaymentPgType.t option = None
  method get_pgCode = _pgCode
  method grab_pgCode = match _pgCode with None->raise (Field_empty "getCallCreditProducts_args.pgCode") | Some _x10590 -> _x10590
  method set_pgCode _x10590 = _pgCode <- Some _x10590
  method unset_pgCode = _pgCode <- None
  method reset_pgCode = _pgCode <- None

  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getCallCreditProducts_args.country") | Some _x10591 -> _x10591
  method set_country _x10591 = _country <- Some _x10591
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getCallCreditProducts_args.language") | Some _x10592 -> _x10592
  method set_language _x10592 = _language <- Some _x10592
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCallCreditProducts_args";
    (match _appStoreCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("appStoreCode",Protocol.T_I32,2);
      oprot#writeI32(PaymentType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _pgCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("pgCode",Protocol.T_I32,3);
      oprot#writeI32(PaymentPgType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCallCreditProducts_args (iprot : Protocol.t) =
  let _str10595 = new getCallCreditProducts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10596,_id10597) = iprot#readFieldBegin in
        if _t10596 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10597 with 
          | 2 -> (if _t10596 = Protocol.T_I32 then
              _str10595#set_appStoreCode (PaymentType.of_i iprot#readI32)
            else
              iprot#skip _t10596)
          | 3 -> (if _t10596 = Protocol.T_I32 then
              _str10595#set_pgCode (PaymentPgType.of_i iprot#readI32)
            else
              iprot#skip _t10596)
          | 4 -> (if _t10596 = Protocol.T_STRING then
              _str10595#set_country iprot#readString
            else
              iprot#skip _t10596)
          | 5 -> (if _t10596 = Protocol.T_STRING then
              _str10595#set_language iprot#readString
            else
              iprot#skip _t10596)
          | _ -> iprot#skip _t10596);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10595

class getCallCreditProducts_result =
object (self)
  val mutable _success : coinProductItem list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCallCreditProducts_result.success") | Some _x10598 -> _x10598
  method set_success _x10598 = _success <- Some _x10598
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCallCreditProducts_result.e") | Some _x10599 -> _x10599
  method set_e _x10599 = _e <- Some _x10599
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCallCreditProducts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter10602 ->         _iter10602#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCallCreditProducts_result (iprot : Protocol.t) =
  let _str10603 = new getCallCreditProducts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10604,_id10605) = iprot#readFieldBegin in
        if _t10604 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10605 with 
          | 0 -> (if _t10604 = Protocol.T_LIST then
              _str10603#set_success 
                (let (_etype10609,_size10606) = iprot#readListBegin in
                  let _con10610 = (Array.to_list (Array.init _size10606 (fun _ -> (read_coinProductItem iprot)))) in
                    iprot#readListEnd; _con10610)
            else
              iprot#skip _t10604)
          | 1 -> (if _t10604 = Protocol.T_STRUCT then
              _str10603#set_e (read_talkException iprot)
            else
              iprot#skip _t10604)
          | _ -> iprot#skip _t10604);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10603

class getCompactContacts_args =
object (self)
  val mutable _lastModifiedTimestamp : Int64.t option = None
  method get_lastModifiedTimestamp = _lastModifiedTimestamp
  method grab_lastModifiedTimestamp = match _lastModifiedTimestamp with None->raise (Field_empty "getCompactContacts_args.lastModifiedTimestamp") | Some _x10611 -> _x10611
  method set_lastModifiedTimestamp _x10611 = _lastModifiedTimestamp <- Some _x10611
  method unset_lastModifiedTimestamp = _lastModifiedTimestamp <- None
  method reset_lastModifiedTimestamp = _lastModifiedTimestamp <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactContacts_args";
    (match _lastModifiedTimestamp with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastModifiedTimestamp",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactContacts_args (iprot : Protocol.t) =
  let _str10614 = new getCompactContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10615,_id10616) = iprot#readFieldBegin in
        if _t10615 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10616 with 
          | 2 -> (if _t10615 = Protocol.T_I64 then
              _str10614#set_lastModifiedTimestamp iprot#readI64
            else
              iprot#skip _t10615)
          | _ -> iprot#skip _t10615);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10614

class getCompactContacts_result =
object (self)
  val mutable _success : compactContact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCompactContacts_result.success") | Some _x10617 -> _x10617
  method set_success _x10617 = _success <- Some _x10617
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCompactContacts_result.e") | Some _x10618 -> _x10618
  method set_e _x10618 = _e <- Some _x10618
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter10621 ->         _iter10621#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactContacts_result (iprot : Protocol.t) =
  let _str10622 = new getCompactContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10623,_id10624) = iprot#readFieldBegin in
        if _t10623 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10624 with 
          | 0 -> (if _t10623 = Protocol.T_LIST then
              _str10622#set_success 
                (let (_etype10628,_size10625) = iprot#readListBegin in
                  let _con10629 = (Array.to_list (Array.init _size10625 (fun _ -> (read_compactContact iprot)))) in
                    iprot#readListEnd; _con10629)
            else
              iprot#skip _t10623)
          | 1 -> (if _t10623 = Protocol.T_STRUCT then
              _str10622#set_e (read_talkException iprot)
            else
              iprot#skip _t10623)
          | _ -> iprot#skip _t10623);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10622

class notifyNotiCenterEvent_args =
object (self)
  val mutable _event : notiCenterEventData option = None
  method get_event = _event
  method grab_event = match _event with None->raise (Field_empty "notifyNotiCenterEvent_args.event") | Some _x10630 -> _x10630
  method set_event _x10630 = _event <- Some _x10630
  method unset_event = _event <- None
  method reset_event = _event <- None

  method copy =
      let _new = Oo.copy self in
      if _event <> None then
        _new#set_event self#grab_event#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyNotiCenterEvent_args";
    (match _event with None -> () | Some _v -> 
      oprot#writeFieldBegin("event",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyNotiCenterEvent_args (iprot : Protocol.t) =
  let _str10633 = new notifyNotiCenterEvent_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10634,_id10635) = iprot#readFieldBegin in
        if _t10634 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10635 with 
          | 1 -> (if _t10634 = Protocol.T_STRUCT then
              _str10633#set_event (read_notiCenterEventData iprot)
            else
              iprot#skip _t10634)
          | _ -> iprot#skip _t10634);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10633

class notifyNotiCenterEvent_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyNotiCenterEvent_result.e") | Some _x10636 -> _x10636
  method set_e _x10636 = _e <- Some _x10636
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyNotiCenterEvent_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyNotiCenterEvent_result (iprot : Protocol.t) =
  let _str10639 = new notifyNotiCenterEvent_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10640,_id10641) = iprot#readFieldBegin in
        if _t10640 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10641 with 
          | 1 -> (if _t10640 = Protocol.T_STRUCT then
              _str10639#set_e (read_talkException iprot)
            else
              iprot#skip _t10640)
          | _ -> iprot#skip _t10640);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10639

class isInContact_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "isInContact_args.mid") | Some _x10642 -> _x10642
  method set_mid _x10642 = _mid <- Some _x10642
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isInContact_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isInContact_args (iprot : Protocol.t) =
  let _str10645 = new isInContact_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10646,_id10647) = iprot#readFieldBegin in
        if _t10646 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10647 with 
          | 2 -> (if _t10646 = Protocol.T_STRING then
              _str10645#set_mid iprot#readString
            else
              iprot#skip _t10646)
          | _ -> iprot#skip _t10646);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10645

class isInContact_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "isInContact_result.success") | Some _x10648 -> _x10648
  method set_success _x10648 = _success <- Some _x10648
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "isInContact_result.e") | Some _x10649 -> _x10649
  method set_e _x10649 = _e <- Some _x10649
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isInContact_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isInContact_result (iprot : Protocol.t) =
  let _str10652 = new isInContact_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10653,_id10654) = iprot#readFieldBegin in
        if _t10653 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10654 with 
          | 0 -> (if _t10653 = Protocol.T_BOOL then
              _str10652#set_success iprot#readBool
            else
              iprot#skip _t10653)
          | 1 -> (if _t10653 = Protocol.T_STRUCT then
              _str10652#set_e (read_talkException iprot)
            else
              iprot#skip _t10653)
          | _ -> iprot#skip _t10653);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10652

class lookupGroupMembers_args =
object (self)
  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "lookupGroupMembers_args.groupId") | Some _x10655 -> _x10655
  method set_groupId _x10655 = _groupId <- Some _x10655
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "lookupGroupMembers_args.mids") | Some _x10656 -> _x10656
  method set_mids _x10656 = _mids <- Some _x10656
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "lookupGroupMembers_args";
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter10659 ->         oprot#writeString(_iter10659);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_lookupGroupMembers_args (iprot : Protocol.t) =
  let _str10660 = new lookupGroupMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10661,_id10662) = iprot#readFieldBegin in
        if _t10661 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10662 with 
          | 1 -> (if _t10661 = Protocol.T_STRING then
              _str10660#set_groupId iprot#readString
            else
              iprot#skip _t10661)
          | 2 -> (if _t10661 = Protocol.T_LIST then
              _str10660#set_mids 
                (let (_etype10666,_size10663) = iprot#readListBegin in
                  let _con10667 = (Array.to_list (Array.init _size10663 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con10667)
            else
              iprot#skip _t10661)
          | _ -> iprot#skip _t10661);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10660

class lookupGroupMembers_result =
object (self)
  val mutable _success : simpleChannelContact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "lookupGroupMembers_result.success") | Some _x10668 -> _x10668
  method set_success _x10668 = _success <- Some _x10668
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "lookupGroupMembers_result.e") | Some _x10669 -> _x10669
  method set_e _x10669 = _e <- Some _x10669
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "lookupGroupMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter10672 ->         _iter10672#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_lookupGroupMembers_result (iprot : Protocol.t) =
  let _str10673 = new lookupGroupMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10674,_id10675) = iprot#readFieldBegin in
        if _t10674 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10675 with 
          | 0 -> (if _t10674 = Protocol.T_LIST then
              _str10673#set_success 
                (let (_etype10679,_size10676) = iprot#readListBegin in
                  let _con10680 = (Array.to_list (Array.init _size10676 (fun _ -> (read_simpleChannelContact iprot)))) in
                    iprot#readListEnd; _con10680)
            else
              iprot#skip _t10674)
          | 1 -> (if _t10674 = Protocol.T_STRUCT then
              _str10673#set_e (read_talkException iprot)
            else
              iprot#skip _t10674)
          | _ -> iprot#skip _t10674);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10673

class getRoomInformation_args =
object (self)
  val mutable _roomMid : string option = None
  method get_roomMid = _roomMid
  method grab_roomMid = match _roomMid with None->raise (Field_empty "getRoomInformation_args.roomMid") | Some _x10681 -> _x10681
  method set_roomMid _x10681 = _roomMid <- Some _x10681
  method unset_roomMid = _roomMid <- None
  method reset_roomMid = _roomMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRoomInformation_args";
    (match _roomMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("roomMid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRoomInformation_args (iprot : Protocol.t) =
  let _str10684 = new getRoomInformation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10685,_id10686) = iprot#readFieldBegin in
        if _t10685 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10686 with 
          | 1 -> (if _t10685 = Protocol.T_STRING then
              _str10684#set_roomMid iprot#readString
            else
              iprot#skip _t10685)
          | _ -> iprot#skip _t10685);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10684

class getRoomInformation_result =
object (self)
  val mutable _success : room option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getRoomInformation_result.success") | Some _x10687 -> _x10687
  method set_success _x10687 = _success <- Some _x10687
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getRoomInformation_result.e") | Some _x10688 -> _x10688
  method set_e _x10688 = _e <- Some _x10688
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRoomInformation_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRoomInformation_result (iprot : Protocol.t) =
  let _str10691 = new getRoomInformation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10692,_id10693) = iprot#readFieldBegin in
        if _t10692 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10693 with 
          | 0 -> (if _t10692 = Protocol.T_STRUCT then
              _str10691#set_success (read_room iprot)
            else
              iprot#skip _t10692)
          | 1 -> (if _t10692 = Protocol.T_STRUCT then
              _str10691#set_e (read_talkException iprot)
            else
              iprot#skip _t10692)
          | _ -> iprot#skip _t10692);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10691

class getGroupCall_args =
object (self)
  val mutable _chatMid : string option = None
  method get_chatMid = _chatMid
  method grab_chatMid = match _chatMid with None->raise (Field_empty "getGroupCall_args.chatMid") | Some _x10694 -> _x10694
  method set_chatMid _x10694 = _chatMid <- Some _x10694
  method unset_chatMid = _chatMid <- None
  method reset_chatMid = _chatMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupCall_args";
    (match _chatMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupCall_args (iprot : Protocol.t) =
  let _str10697 = new getGroupCall_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10698,_id10699) = iprot#readFieldBegin in
        if _t10698 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10699 with 
          | 2 -> (if _t10698 = Protocol.T_STRING then
              _str10697#set_chatMid iprot#readString
            else
              iprot#skip _t10698)
          | _ -> iprot#skip _t10698);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10697

class getGroupCall_result =
object (self)
  val mutable _success : groupCall option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupCall_result.success") | Some _x10700 -> _x10700
  method set_success _x10700 = _success <- Some _x10700
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupCall_result.e") | Some _x10701 -> _x10701
  method set_e _x10701 = _e <- Some _x10701
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupCall_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupCall_result (iprot : Protocol.t) =
  let _str10704 = new getGroupCall_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10705,_id10706) = iprot#readFieldBegin in
        if _t10705 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10706 with 
          | 0 -> (if _t10705 = Protocol.T_STRUCT then
              _str10704#set_success (read_groupCall iprot)
            else
              iprot#skip _t10705)
          | 1 -> (if _t10705 = Protocol.T_STRUCT then
              _str10704#set_e (read_talkException iprot)
            else
              iprot#skip _t10705)
          | _ -> iprot#skip _t10705);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10704

class isAllowSecondaryDeviceLogin_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isAllowSecondaryDeviceLogin_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isAllowSecondaryDeviceLogin_args (iprot : Protocol.t) =
  let _str10709 = new isAllowSecondaryDeviceLogin_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10710,_id10711) = iprot#readFieldBegin in
        if _t10710 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10711 with 
          | _ -> iprot#skip _t10710);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10709

class isAllowSecondaryDeviceLogin_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "isAllowSecondaryDeviceLogin_result.success") | Some _x10712 -> _x10712
  method set_success _x10712 = _success <- Some _x10712
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "isAllowSecondaryDeviceLogin_result.e") | Some _x10713 -> _x10713
  method set_e _x10713 = _e <- Some _x10713
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isAllowSecondaryDeviceLogin_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isAllowSecondaryDeviceLogin_result (iprot : Protocol.t) =
  let _str10716 = new isAllowSecondaryDeviceLogin_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10717,_id10718) = iprot#readFieldBegin in
        if _t10717 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10718 with 
          | 0 -> (if _t10717 = Protocol.T_BOOL then
              _str10716#set_success iprot#readBool
            else
              iprot#skip _t10717)
          | 1 -> (if _t10717 = Protocol.T_STRUCT then
              _str10716#set_e (read_talkException iprot)
            else
              iprot#skip _t10717)
          | _ -> iprot#skip _t10717);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10716

class getPrimaryClientForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPrimaryClientForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPrimaryClientForChannel_args (iprot : Protocol.t) =
  let _str10721 = new getPrimaryClientForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10722,_id10723) = iprot#readFieldBegin in
        if _t10722 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10723 with 
          | _ -> iprot#skip _t10722);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10721

class getPrimaryClientForChannel_result =
object (self)
  val mutable _success : simpleChannelClient option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPrimaryClientForChannel_result.success") | Some _x10724 -> _x10724
  method set_success _x10724 = _success <- Some _x10724
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPrimaryClientForChannel_result.e") | Some _x10725 -> _x10725
  method set_e _x10725 = _e <- Some _x10725
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPrimaryClientForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPrimaryClientForChannel_result (iprot : Protocol.t) =
  let _str10728 = new getPrimaryClientForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10729,_id10730) = iprot#readFieldBegin in
        if _t10729 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10730 with 
          | 0 -> (if _t10729 = Protocol.T_STRUCT then
              _str10728#set_success (read_simpleChannelClient iprot)
            else
              iprot#skip _t10729)
          | 1 -> (if _t10729 = Protocol.T_STRUCT then
              _str10728#set_e (read_talkException iprot)
            else
              iprot#skip _t10729)
          | _ -> iprot#skip _t10729);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10728

class createRoomWithBuddy_args =
object (self)
  val mutable _reqSeq : Int32.t option = None
  method get_reqSeq = _reqSeq
  method grab_reqSeq = match _reqSeq with None->raise (Field_empty "createRoomWithBuddy_args.reqSeq") | Some _x10731 -> _x10731
  method set_reqSeq _x10731 = _reqSeq <- Some _x10731
  method unset_reqSeq = _reqSeq <- None
  method reset_reqSeq = _reqSeq <- None

  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "createRoomWithBuddy_args.buddyMid") | Some _x10732 -> _x10732
  method set_buddyMid _x10732 = _buddyMid <- Some _x10732
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  val mutable _contactIds : string list option = None
  method get_contactIds = _contactIds
  method grab_contactIds = match _contactIds with None->raise (Field_empty "createRoomWithBuddy_args.contactIds") | Some _x10733 -> _x10733
  method set_contactIds _x10733 = _contactIds <- Some _x10733
  method unset_contactIds = _contactIds <- None
  method reset_contactIds = _contactIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createRoomWithBuddy_args";
    (match _reqSeq with None -> () | Some _v -> 
      oprot#writeFieldBegin("reqSeq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _contactIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("contactIds",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter10736 ->         oprot#writeString(_iter10736);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createRoomWithBuddy_args (iprot : Protocol.t) =
  let _str10737 = new createRoomWithBuddy_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10738,_id10739) = iprot#readFieldBegin in
        if _t10738 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10739 with 
          | 1 -> (if _t10738 = Protocol.T_I32 then
              _str10737#set_reqSeq iprot#readI32
            else
              iprot#skip _t10738)
          | 2 -> (if _t10738 = Protocol.T_STRING then
              _str10737#set_buddyMid iprot#readString
            else
              iprot#skip _t10738)
          | 3 -> (if _t10738 = Protocol.T_LIST then
              _str10737#set_contactIds 
                (let (_etype10743,_size10740) = iprot#readListBegin in
                  let _con10744 = (Array.to_list (Array.init _size10740 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con10744)
            else
              iprot#skip _t10738)
          | _ -> iprot#skip _t10738);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10737

class createRoomWithBuddy_result =
object (self)
  val mutable _success : room option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createRoomWithBuddy_result.success") | Some _x10745 -> _x10745
  method set_success _x10745 = _success <- Some _x10745
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "createRoomWithBuddy_result.e") | Some _x10746 -> _x10746
  method set_e _x10746 = _e <- Some _x10746
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createRoomWithBuddy_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createRoomWithBuddy_result (iprot : Protocol.t) =
  let _str10749 = new createRoomWithBuddy_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10750,_id10751) = iprot#readFieldBegin in
        if _t10750 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10751 with 
          | 0 -> (if _t10750 = Protocol.T_STRUCT then
              _str10749#set_success (read_room iprot)
            else
              iprot#skip _t10750)
          | 1 -> (if _t10750 = Protocol.T_STRUCT then
              _str10749#set_e (read_talkException iprot)
            else
              iprot#skip _t10750)
          | _ -> iprot#skip _t10750);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10749

class getDisplayName_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "getDisplayName_args.mid") | Some _x10752 -> _x10752
  method set_mid _x10752 = _mid <- Some _x10752
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getDisplayName_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getDisplayName_args (iprot : Protocol.t) =
  let _str10755 = new getDisplayName_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10756,_id10757) = iprot#readFieldBegin in
        if _t10756 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10757 with 
          | 2 -> (if _t10756 = Protocol.T_STRING then
              _str10755#set_mid iprot#readString
            else
              iprot#skip _t10756)
          | _ -> iprot#skip _t10756);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10755

class getDisplayName_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getDisplayName_result.success") | Some _x10758 -> _x10758
  method set_success _x10758 = _success <- Some _x10758
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getDisplayName_result.e") | Some _x10759 -> _x10759
  method set_e _x10759 = _e <- Some _x10759
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getDisplayName_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getDisplayName_result (iprot : Protocol.t) =
  let _str10762 = new getDisplayName_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10763,_id10764) = iprot#readFieldBegin in
        if _t10763 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10764 with 
          | 0 -> (if _t10763 = Protocol.T_STRING then
              _str10762#set_success iprot#readString
            else
              iprot#skip _t10763)
          | 1 -> (if _t10763 = Protocol.T_STRUCT then
              _str10762#set_e (read_talkException iprot)
            else
              iprot#skip _t10763)
          | _ -> iprot#skip _t10763);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10762

class getPaidCallMetadata_args =
object (self)
  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPaidCallMetadata_args.language") | Some _x10765 -> _x10765
  method set_language _x10765 = _language <- Some _x10765
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPaidCallMetadata_args";
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPaidCallMetadata_args (iprot : Protocol.t) =
  let _str10768 = new getPaidCallMetadata_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10769,_id10770) = iprot#readFieldBegin in
        if _t10769 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10770 with 
          | 2 -> (if _t10769 = Protocol.T_STRING then
              _str10768#set_language iprot#readString
            else
              iprot#skip _t10769)
          | _ -> iprot#skip _t10769);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10768

class getPaidCallMetadata_result =
object (self)
  val mutable _success : paidCallMetadataResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPaidCallMetadata_result.success") | Some _x10771 -> _x10771
  method set_success _x10771 = _success <- Some _x10771
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPaidCallMetadata_result.e") | Some _x10772 -> _x10772
  method set_e _x10772 = _e <- Some _x10772
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPaidCallMetadata_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPaidCallMetadata_result (iprot : Protocol.t) =
  let _str10775 = new getPaidCallMetadata_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10776,_id10777) = iprot#readFieldBegin in
        if _t10776 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10777 with 
          | 0 -> (if _t10776 = Protocol.T_STRUCT then
              _str10775#set_success (read_paidCallMetadataResult iprot)
            else
              iprot#skip _t10776)
          | 1 -> (if _t10776 = Protocol.T_STRUCT then
              _str10775#set_e (read_talkException iprot)
            else
              iprot#skip _t10776)
          | _ -> iprot#skip _t10776);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10775

class getMid_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMid_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMid_args (iprot : Protocol.t) =
  let _str10780 = new getMid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10781,_id10782) = iprot#readFieldBegin in
        if _t10781 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10782 with 
          | _ -> iprot#skip _t10781);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10780

class getMid_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMid_result.success") | Some _x10783 -> _x10783
  method set_success _x10783 = _success <- Some _x10783
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMid_result.e") | Some _x10784 -> _x10784
  method set_e _x10784 = _e <- Some _x10784
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMid_result (iprot : Protocol.t) =
  let _str10787 = new getMid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10788,_id10789) = iprot#readFieldBegin in
        if _t10788 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10789 with 
          | 0 -> (if _t10788 = Protocol.T_STRING then
              _str10787#set_success iprot#readString
            else
              iprot#skip _t10788)
          | 1 -> (if _t10788 = Protocol.T_STRUCT then
              _str10787#set_e (read_talkException iprot)
            else
              iprot#skip _t10788)
          | _ -> iprot#skip _t10788);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10787

class getUserCountryForBilling_args =
object (self)
  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getUserCountryForBilling_args.country") | Some _x10790 -> _x10790
  method set_country _x10790 = _country <- Some _x10790
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _remoteIp : string option = None
  method get_remoteIp = _remoteIp
  method grab_remoteIp = match _remoteIp with None->raise (Field_empty "getUserCountryForBilling_args.remoteIp") | Some _x10791 -> _x10791
  method set_remoteIp _x10791 = _remoteIp <- Some _x10791
  method unset_remoteIp = _remoteIp <- None
  method reset_remoteIp = _remoteIp <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserCountryForBilling_args";
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _remoteIp with None -> () | Some _v -> 
      oprot#writeFieldBegin("remoteIp",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserCountryForBilling_args (iprot : Protocol.t) =
  let _str10794 = new getUserCountryForBilling_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10795,_id10796) = iprot#readFieldBegin in
        if _t10795 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10796 with 
          | 2 -> (if _t10795 = Protocol.T_STRING then
              _str10794#set_country iprot#readString
            else
              iprot#skip _t10795)
          | 3 -> (if _t10795 = Protocol.T_STRING then
              _str10794#set_remoteIp iprot#readString
            else
              iprot#skip _t10795)
          | _ -> iprot#skip _t10795);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10794

class getUserCountryForBilling_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserCountryForBilling_result.success") | Some _x10797 -> _x10797
  method set_success _x10797 = _success <- Some _x10797
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserCountryForBilling_result.e") | Some _x10798 -> _x10798
  method set_e _x10798 = _e <- Some _x10798
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserCountryForBilling_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserCountryForBilling_result (iprot : Protocol.t) =
  let _str10801 = new getUserCountryForBilling_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10802,_id10803) = iprot#readFieldBegin in
        if _t10802 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10803 with 
          | 0 -> (if _t10802 = Protocol.T_STRING then
              _str10801#set_success iprot#readString
            else
              iprot#skip _t10802)
          | 1 -> (if _t10802 = Protocol.T_STRUCT then
              _str10801#set_e (read_talkException iprot)
            else
              iprot#skip _t10802)
          | _ -> iprot#skip _t10802);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10801

class getFavoriteGroupIdsForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFavoriteGroupIdsForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFavoriteGroupIdsForChannel_args (iprot : Protocol.t) =
  let _str10806 = new getFavoriteGroupIdsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10807,_id10808) = iprot#readFieldBegin in
        if _t10807 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10808 with 
          | _ -> iprot#skip _t10807);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10806

class getFavoriteGroupIdsForChannel_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getFavoriteGroupIdsForChannel_result.success") | Some _x10809 -> _x10809
  method set_success _x10809 = _success <- Some _x10809
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getFavoriteGroupIdsForChannel_result.e") | Some _x10810 -> _x10810
  method set_e _x10810 = _e <- Some _x10810
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFavoriteGroupIdsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter10813 ->         oprot#writeString(_iter10813);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFavoriteGroupIdsForChannel_result (iprot : Protocol.t) =
  let _str10814 = new getFavoriteGroupIdsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10815,_id10816) = iprot#readFieldBegin in
        if _t10815 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10816 with 
          | 0 -> (if _t10815 = Protocol.T_LIST then
              _str10814#set_success 
                (let (_etype10820,_size10817) = iprot#readListBegin in
                  let _con10821 = (Array.to_list (Array.init _size10817 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con10821)
            else
              iprot#skip _t10815)
          | 1 -> (if _t10815 = Protocol.T_STRUCT then
              _str10814#set_e (read_talkException iprot)
            else
              iprot#skip _t10815)
          | _ -> iprot#skip _t10815);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10814

class getPaidCallHistory_args =
object (self)
  val mutable _start : Int64.t option = None
  method get_start = _start
  method grab_start = match _start with None->raise (Field_empty "getPaidCallHistory_args.start") | Some _x10822 -> _x10822
  method set_start _x10822 = _start <- Some _x10822
  method unset_start = _start <- None
  method reset_start = _start <- None

  val mutable _size : Int32.t option = None
  method get_size = _size
  method grab_size = match _size with None->raise (Field_empty "getPaidCallHistory_args.size") | Some _x10823 -> _x10823
  method set_size _x10823 = _size <- Some _x10823
  method unset_size = _size <- None
  method reset_size = _size <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPaidCallHistory_args.language") | Some _x10824 -> _x10824
  method set_language _x10824 = _language <- Some _x10824
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPaidCallHistory_args";
    (match _start with None -> () | Some _v -> 
      oprot#writeFieldBegin("start",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _size with None -> () | Some _v -> 
      oprot#writeFieldBegin("size",Protocol.T_I32,3);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPaidCallHistory_args (iprot : Protocol.t) =
  let _str10827 = new getPaidCallHistory_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10828,_id10829) = iprot#readFieldBegin in
        if _t10828 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10829 with 
          | 2 -> (if _t10828 = Protocol.T_I64 then
              _str10827#set_start iprot#readI64
            else
              iprot#skip _t10828)
          | 3 -> (if _t10828 = Protocol.T_I32 then
              _str10827#set_size iprot#readI32
            else
              iprot#skip _t10828)
          | 4 -> (if _t10828 = Protocol.T_STRING then
              _str10827#set_language iprot#readString
            else
              iprot#skip _t10828)
          | _ -> iprot#skip _t10828);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10827

class getPaidCallHistory_result =
object (self)
  val mutable _success : paidCallHistoryResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPaidCallHistory_result.success") | Some _x10830 -> _x10830
  method set_success _x10830 = _success <- Some _x10830
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPaidCallHistory_result.e") | Some _x10831 -> _x10831
  method set_e _x10831 = _e <- Some _x10831
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPaidCallHistory_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPaidCallHistory_result (iprot : Protocol.t) =
  let _str10834 = new getPaidCallHistory_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10835,_id10836) = iprot#readFieldBegin in
        if _t10835 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10836 with 
          | 0 -> (if _t10835 = Protocol.T_STRUCT then
              _str10834#set_success (read_paidCallHistoryResult iprot)
            else
              iprot#skip _t10835)
          | 1 -> (if _t10835 = Protocol.T_STRUCT then
              _str10834#set_e (read_talkException iprot)
            else
              iprot#skip _t10835)
          | _ -> iprot#skip _t10835);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10834

class sendPinCodeOperation_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "sendPinCodeOperation_args.verifier") | Some _x10837 -> _x10837
  method set_verifier _x10837 = _verifier <- Some _x10837
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendPinCodeOperation_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendPinCodeOperation_args (iprot : Protocol.t) =
  let _str10840 = new sendPinCodeOperation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10841,_id10842) = iprot#readFieldBegin in
        if _t10841 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10842 with 
          | 1 -> (if _t10841 = Protocol.T_STRING then
              _str10840#set_verifier iprot#readString
            else
              iprot#skip _t10841)
          | _ -> iprot#skip _t10841);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10840

class sendPinCodeOperation_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendPinCodeOperation_result.e") | Some _x10843 -> _x10843
  method set_e _x10843 = _e <- Some _x10843
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendPinCodeOperation_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendPinCodeOperation_result (iprot : Protocol.t) =
  let _str10846 = new sendPinCodeOperation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10847,_id10848) = iprot#readFieldBegin in
        if _t10847 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10848 with 
          | 1 -> (if _t10847 = Protocol.T_STRUCT then
              _str10846#set_e (read_talkException iprot)
            else
              iprot#skip _t10847)
          | _ -> iprot#skip _t10847);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10846

class inviteIntoGroupCall_args =
object (self)
  val mutable _chatMid : string option = None
  method get_chatMid = _chatMid
  method grab_chatMid = match _chatMid with None->raise (Field_empty "inviteIntoGroupCall_args.chatMid") | Some _x10849 -> _x10849
  method set_chatMid _x10849 = _chatMid <- Some _x10849
  method unset_chatMid = _chatMid <- None
  method reset_chatMid = _chatMid <- None

  val mutable _memberMids : string list option = None
  method get_memberMids = _memberMids
  method grab_memberMids = match _memberMids with None->raise (Field_empty "inviteIntoGroupCall_args.memberMids") | Some _x10850 -> _x10850
  method set_memberMids _x10850 = _memberMids <- Some _x10850
  method unset_memberMids = _memberMids <- None
  method reset_memberMids = _memberMids <- None

  val mutable _mediaType : GroupCallMediaType.t option = None
  method get_mediaType = _mediaType
  method grab_mediaType = match _mediaType with None->raise (Field_empty "inviteIntoGroupCall_args.mediaType") | Some _x10851 -> _x10851
  method set_mediaType _x10851 = _mediaType <- Some _x10851
  method unset_mediaType = _mediaType <- None
  method reset_mediaType = _mediaType <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteIntoGroupCall_args";
    (match _chatMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _memberMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("memberMids",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter10854 ->         oprot#writeString(_iter10854);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _mediaType with None -> () | Some _v -> 
      oprot#writeFieldBegin("mediaType",Protocol.T_I32,4);
      oprot#writeI32(GroupCallMediaType.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteIntoGroupCall_args (iprot : Protocol.t) =
  let _str10855 = new inviteIntoGroupCall_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10856,_id10857) = iprot#readFieldBegin in
        if _t10856 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10857 with 
          | 2 -> (if _t10856 = Protocol.T_STRING then
              _str10855#set_chatMid iprot#readString
            else
              iprot#skip _t10856)
          | 3 -> (if _t10856 = Protocol.T_LIST then
              _str10855#set_memberMids 
                (let (_etype10861,_size10858) = iprot#readListBegin in
                  let _con10862 = (Array.to_list (Array.init _size10858 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con10862)
            else
              iprot#skip _t10856)
          | 4 -> (if _t10856 = Protocol.T_I32 then
              _str10855#set_mediaType (GroupCallMediaType.of_i iprot#readI32)
            else
              iprot#skip _t10856)
          | _ -> iprot#skip _t10856);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10855

class inviteIntoGroupCall_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "inviteIntoGroupCall_result.e") | Some _x10863 -> _x10863
  method set_e _x10863 = _e <- Some _x10863
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "inviteIntoGroupCall_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_inviteIntoGroupCall_result (iprot : Protocol.t) =
  let _str10866 = new inviteIntoGroupCall_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10867,_id10868) = iprot#readFieldBegin in
        if _t10867 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10868 with 
          | 1 -> (if _t10867 = Protocol.T_STRUCT then
              _str10866#set_e (read_talkException iprot)
            else
              iprot#skip _t10867)
          | _ -> iprot#skip _t10867);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10866

class getFriendMids_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFriendMids_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFriendMids_args (iprot : Protocol.t) =
  let _str10871 = new getFriendMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10872,_id10873) = iprot#readFieldBegin in
        if _t10872 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10873 with 
          | _ -> iprot#skip _t10872);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10871

class getFriendMids_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getFriendMids_result.success") | Some _x10874 -> _x10874
  method set_success _x10874 = _success <- Some _x10874
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getFriendMids_result.e") | Some _x10875 -> _x10875
  method set_e _x10875 = _e <- Some _x10875
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFriendMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter10878 ->         oprot#writeString(_iter10878);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFriendMids_result (iprot : Protocol.t) =
  let _str10879 = new getFriendMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10880,_id10881) = iprot#readFieldBegin in
        if _t10880 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10881 with 
          | 0 -> (if _t10880 = Protocol.T_LIST then
              _str10879#set_success 
                (let (_etype10885,_size10882) = iprot#readListBegin in
                  let _con10886 = (Array.to_list (Array.init _size10882 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con10886)
            else
              iprot#skip _t10880)
          | 1 -> (if _t10880 = Protocol.T_STRUCT then
              _str10879#set_e (read_talkException iprot)
            else
              iprot#skip _t10880)
          | _ -> iprot#skip _t10880);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10879

class getMetaProfile_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMetaProfile_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMetaProfile_args (iprot : Protocol.t) =
  let _str10889 = new getMetaProfile_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10890,_id10891) = iprot#readFieldBegin in
        if _t10890 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10891 with 
          | _ -> iprot#skip _t10890);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10889

class getMetaProfile_result =
object (self)
  val mutable _success : metaProfile option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMetaProfile_result.success") | Some _x10892 -> _x10892
  method set_success _x10892 = _success <- Some _x10892
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMetaProfile_result.e") | Some _x10893 -> _x10893
  method set_e _x10893 = _e <- Some _x10893
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMetaProfile_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMetaProfile_result (iprot : Protocol.t) =
  let _str10896 = new getMetaProfile_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10897,_id10898) = iprot#readFieldBegin in
        if _t10897 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10898 with 
          | 0 -> (if _t10897 = Protocol.T_STRUCT then
              _str10896#set_success (read_metaProfile iprot)
            else
              iprot#skip _t10897)
          | 1 -> (if _t10897 = Protocol.T_STRUCT then
              _str10896#set_e (read_talkException iprot)
            else
              iprot#skip _t10897)
          | _ -> iprot#skip _t10897);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10896

class sendMessageForChannel_args =
object (self)
  val mutable _message : message option = None
  method get_message = _message
  method grab_message = match _message with None->raise (Field_empty "sendMessageForChannel_args.message") | Some _x10899 -> _x10899
  method set_message _x10899 = _message <- Some _x10899
  method unset_message = _message <- None
  method reset_message = _message <- None

  method copy =
      let _new = Oo.copy self in
      if _message <> None then
        _new#set_message self#grab_message#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageForChannel_args";
    (match _message with None -> () | Some _v -> 
      oprot#writeFieldBegin("message",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageForChannel_args (iprot : Protocol.t) =
  let _str10902 = new sendMessageForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10903,_id10904) = iprot#readFieldBegin in
        if _t10903 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10904 with 
          | 2 -> (if _t10903 = Protocol.T_STRUCT then
              _str10902#set_message (read_message iprot)
            else
              iprot#skip _t10903)
          | _ -> iprot#skip _t10903);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10902

class sendMessageForChannel_result =
object (self)
  val mutable _success : message option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendMessageForChannel_result.success") | Some _x10905 -> _x10905
  method set_success _x10905 = _success <- Some _x10905
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendMessageForChannel_result.e") | Some _x10906 -> _x10906
  method set_e _x10906 = _e <- Some _x10906
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageForChannel_result (iprot : Protocol.t) =
  let _str10909 = new sendMessageForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10910,_id10911) = iprot#readFieldBegin in
        if _t10910 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10911 with 
          | 0 -> (if _t10910 = Protocol.T_STRUCT then
              _str10909#set_success (read_message iprot)
            else
              iprot#skip _t10910)
          | 1 -> (if _t10910 = Protocol.T_STRUCT then
              _str10909#set_e (read_talkException iprot)
            else
              iprot#skip _t10910)
          | _ -> iprot#skip _t10910);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10909

class activeBuddySubscriberCount_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "activeBuddySubscriberCount_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_activeBuddySubscriberCount_args (iprot : Protocol.t) =
  let _str10914 = new activeBuddySubscriberCount_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10915,_id10916) = iprot#readFieldBegin in
        if _t10915 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10916 with 
          | _ -> iprot#skip _t10915);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10914

class activeBuddySubscriberCount_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "activeBuddySubscriberCount_result.success") | Some _x10917 -> _x10917
  method set_success _x10917 = _success <- Some _x10917
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "activeBuddySubscriberCount_result.e") | Some _x10918 -> _x10918
  method set_e _x10918 = _e <- Some _x10918
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "activeBuddySubscriberCount_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_activeBuddySubscriberCount_result (iprot : Protocol.t) =
  let _str10921 = new activeBuddySubscriberCount_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10922,_id10923) = iprot#readFieldBegin in
        if _t10922 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10923 with 
          | 0 -> (if _t10922 = Protocol.T_I64 then
              _str10921#set_success iprot#readI64
            else
              iprot#skip _t10922)
          | 1 -> (if _t10922 = Protocol.T_STRUCT then
              _str10921#set_e (read_talkException iprot)
            else
              iprot#skip _t10922)
          | _ -> iprot#skip _t10922);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10921

class getCallCreditPurchaseHistory_args =
object (self)
  val mutable _request : coinHistoryCondition option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "getCallCreditPurchaseHistory_args.request") | Some _x10924 -> _x10924
  method set_request _x10924 = _request <- Some _x10924
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCallCreditPurchaseHistory_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCallCreditPurchaseHistory_args (iprot : Protocol.t) =
  let _str10927 = new getCallCreditPurchaseHistory_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10928,_id10929) = iprot#readFieldBegin in
        if _t10928 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10929 with 
          | 2 -> (if _t10928 = Protocol.T_STRUCT then
              _str10927#set_request (read_coinHistoryCondition iprot)
            else
              iprot#skip _t10928)
          | _ -> iprot#skip _t10928);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10927

class getCallCreditPurchaseHistory_result =
object (self)
  val mutable _success : coinHistoryResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCallCreditPurchaseHistory_result.success") | Some _x10930 -> _x10930
  method set_success _x10930 = _success <- Some _x10930
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCallCreditPurchaseHistory_result.e") | Some _x10931 -> _x10931
  method set_e _x10931 = _e <- Some _x10931
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCallCreditPurchaseHistory_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCallCreditPurchaseHistory_result (iprot : Protocol.t) =
  let _str10934 = new getCallCreditPurchaseHistory_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10935,_id10936) = iprot#readFieldBegin in
        if _t10935 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10936 with 
          | 0 -> (if _t10935 = Protocol.T_STRUCT then
              _str10934#set_success (read_coinHistoryResult iprot)
            else
              iprot#skip _t10935)
          | 1 -> (if _t10935 = Protocol.T_STRUCT then
              _str10934#set_e (read_talkException iprot)
            else
              iprot#skip _t10935)
          | _ -> iprot#skip _t10935);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10934

class isRoomMember_args =
object (self)
  val mutable _roomId : string option = None
  method get_roomId = _roomId
  method grab_roomId = match _roomId with None->raise (Field_empty "isRoomMember_args.roomId") | Some _x10937 -> _x10937
  method set_roomId _x10937 = _roomId <- Some _x10937
  method unset_roomId = _roomId <- None
  method reset_roomId = _roomId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isRoomMember_args";
    (match _roomId with None -> () | Some _v -> 
      oprot#writeFieldBegin("roomId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isRoomMember_args (iprot : Protocol.t) =
  let _str10940 = new isRoomMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10941,_id10942) = iprot#readFieldBegin in
        if _t10941 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10942 with 
          | 1 -> (if _t10941 = Protocol.T_STRING then
              _str10940#set_roomId iprot#readString
            else
              iprot#skip _t10941)
          | _ -> iprot#skip _t10941);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10940

class isRoomMember_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "isRoomMember_result.success") | Some _x10943 -> _x10943
  method set_success _x10943 = _success <- Some _x10943
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "isRoomMember_result.e") | Some _x10944 -> _x10944
  method set_e _x10944 = _e <- Some _x10944
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isRoomMember_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isRoomMember_result (iprot : Protocol.t) =
  let _str10947 = new isRoomMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10948,_id10949) = iprot#readFieldBegin in
        if _t10948 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10949 with 
          | 0 -> (if _t10948 = Protocol.T_BOOL then
              _str10947#set_success iprot#readBool
            else
              iprot#skip _t10948)
          | 1 -> (if _t10948 = Protocol.T_STRUCT then
              _str10947#set_e (read_talkException iprot)
            else
              iprot#skip _t10948)
          | _ -> iprot#skip _t10948);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10947

class sendSystemOAMessage_args =
object (self)
  val mutable _message : message option = None
  method get_message = _message
  method grab_message = match _message with None->raise (Field_empty "sendSystemOAMessage_args.message") | Some _x10950 -> _x10950
  method set_message _x10950 = _message <- Some _x10950
  method unset_message = _message <- None
  method reset_message = _message <- None

  method copy =
      let _new = Oo.copy self in
      if _message <> None then
        _new#set_message self#grab_message#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendSystemOAMessage_args";
    (match _message with None -> () | Some _v -> 
      oprot#writeFieldBegin("message",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendSystemOAMessage_args (iprot : Protocol.t) =
  let _str10953 = new sendSystemOAMessage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10954,_id10955) = iprot#readFieldBegin in
        if _t10954 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10955 with 
          | 1 -> (if _t10954 = Protocol.T_STRUCT then
              _str10953#set_message (read_message iprot)
            else
              iprot#skip _t10954)
          | _ -> iprot#skip _t10954);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10953

class sendSystemOAMessage_result =
object (self)
  val mutable _success : message option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendSystemOAMessage_result.success") | Some _x10956 -> _x10956
  method set_success _x10956 = _success <- Some _x10956
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendSystemOAMessage_result.e") | Some _x10957 -> _x10957
  method set_e _x10957 = _e <- Some _x10957
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendSystemOAMessage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendSystemOAMessage_result (iprot : Protocol.t) =
  let _str10960 = new sendSystemOAMessage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10961,_id10962) = iprot#readFieldBegin in
        if _t10961 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10962 with 
          | 0 -> (if _t10961 = Protocol.T_STRUCT then
              _str10960#set_success (read_message iprot)
            else
              iprot#skip _t10961)
          | 1 -> (if _t10961 = Protocol.T_STRUCT then
              _str10960#set_e (read_talkException iprot)
            else
              iprot#skip _t10961)
          | _ -> iprot#skip _t10961);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10960

class acquirePaidCallRoute_args =
object (self)
  val mutable _paidCallType : PaidCallType.t option = None
  method get_paidCallType = _paidCallType
  method grab_paidCallType = match _paidCallType with None->raise (Field_empty "acquirePaidCallRoute_args.paidCallType") | Some _x10963 -> _x10963
  method set_paidCallType _x10963 = _paidCallType <- Some _x10963
  method unset_paidCallType = _paidCallType <- None
  method reset_paidCallType = _paidCallType <- None

  val mutable _dialedNumber : string option = None
  method get_dialedNumber = _dialedNumber
  method grab_dialedNumber = match _dialedNumber with None->raise (Field_empty "acquirePaidCallRoute_args.dialedNumber") | Some _x10964 -> _x10964
  method set_dialedNumber _x10964 = _dialedNumber <- Some _x10964
  method unset_dialedNumber = _dialedNumber <- None
  method reset_dialedNumber = _dialedNumber <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "acquirePaidCallRoute_args.language") | Some _x10965 -> _x10965
  method set_language _x10965 = _language <- Some _x10965
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _networkCode : string option = None
  method get_networkCode = _networkCode
  method grab_networkCode = match _networkCode with None->raise (Field_empty "acquirePaidCallRoute_args.networkCode") | Some _x10966 -> _x10966
  method set_networkCode _x10966 = _networkCode <- Some _x10966
  method unset_networkCode = _networkCode <- None
  method reset_networkCode = _networkCode <- None

  val mutable _disableCallerId : bool option = None
  method get_disableCallerId = _disableCallerId
  method grab_disableCallerId = match _disableCallerId with None->raise (Field_empty "acquirePaidCallRoute_args.disableCallerId") | Some _x10967 -> _x10967
  method set_disableCallerId _x10967 = _disableCallerId <- Some _x10967
  method unset_disableCallerId = _disableCallerId <- None
  method reset_disableCallerId = _disableCallerId <- None

  val mutable _referer : string option = None
  method get_referer = _referer
  method grab_referer = match _referer with None->raise (Field_empty "acquirePaidCallRoute_args.referer") | Some _x10968 -> _x10968
  method set_referer _x10968 = _referer <- Some _x10968
  method unset_referer = _referer <- None
  method reset_referer = _referer <- None

  val mutable _adSessionId : string option = None
  method get_adSessionId = _adSessionId
  method grab_adSessionId = match _adSessionId with None->raise (Field_empty "acquirePaidCallRoute_args.adSessionId") | Some _x10969 -> _x10969
  method set_adSessionId _x10969 = _adSessionId <- Some _x10969
  method unset_adSessionId = _adSessionId <- None
  method reset_adSessionId = _adSessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquirePaidCallRoute_args";
    (match _paidCallType with None -> () | Some _v -> 
      oprot#writeFieldBegin("paidCallType",Protocol.T_I32,2);
      oprot#writeI32(PaidCallType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _dialedNumber with None -> () | Some _v -> 
      oprot#writeFieldBegin("dialedNumber",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _networkCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("networkCode",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _disableCallerId with None -> () | Some _v -> 
      oprot#writeFieldBegin("disableCallerId",Protocol.T_BOOL,6);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _referer with None -> () | Some _v -> 
      oprot#writeFieldBegin("referer",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _adSessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("adSessionId",Protocol.T_STRING,8);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquirePaidCallRoute_args (iprot : Protocol.t) =
  let _str10972 = new acquirePaidCallRoute_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10973,_id10974) = iprot#readFieldBegin in
        if _t10973 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10974 with 
          | 2 -> (if _t10973 = Protocol.T_I32 then
              _str10972#set_paidCallType (PaidCallType.of_i iprot#readI32)
            else
              iprot#skip _t10973)
          | 3 -> (if _t10973 = Protocol.T_STRING then
              _str10972#set_dialedNumber iprot#readString
            else
              iprot#skip _t10973)
          | 4 -> (if _t10973 = Protocol.T_STRING then
              _str10972#set_language iprot#readString
            else
              iprot#skip _t10973)
          | 5 -> (if _t10973 = Protocol.T_STRING then
              _str10972#set_networkCode iprot#readString
            else
              iprot#skip _t10973)
          | 6 -> (if _t10973 = Protocol.T_BOOL then
              _str10972#set_disableCallerId iprot#readBool
            else
              iprot#skip _t10973)
          | 7 -> (if _t10973 = Protocol.T_STRING then
              _str10972#set_referer iprot#readString
            else
              iprot#skip _t10973)
          | 8 -> (if _t10973 = Protocol.T_STRING then
              _str10972#set_adSessionId iprot#readString
            else
              iprot#skip _t10973)
          | _ -> iprot#skip _t10973);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10972

class acquirePaidCallRoute_result =
object (self)
  val mutable _success : paidCallResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "acquirePaidCallRoute_result.success") | Some _x10975 -> _x10975
  method set_success _x10975 = _success <- Some _x10975
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "acquirePaidCallRoute_result.e") | Some _x10976 -> _x10976
  method set_e _x10976 = _e <- Some _x10976
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquirePaidCallRoute_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquirePaidCallRoute_result (iprot : Protocol.t) =
  let _str10979 = new acquirePaidCallRoute_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10980,_id10981) = iprot#readFieldBegin in
        if _t10980 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10981 with 
          | 0 -> (if _t10980 = Protocol.T_STRUCT then
              _str10979#set_success (read_paidCallResponse iprot)
            else
              iprot#skip _t10980)
          | 1 -> (if _t10980 = Protocol.T_STRUCT then
              _str10979#set_e (read_talkException iprot)
            else
              iprot#skip _t10980)
          | _ -> iprot#skip _t10980);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10979

class getGroupsForChannel_args =
object (self)
  val mutable _groupIds : string list option = None
  method get_groupIds = _groupIds
  method grab_groupIds = match _groupIds with None->raise (Field_empty "getGroupsForChannel_args.groupIds") | Some _x10982 -> _x10982
  method set_groupIds _x10982 = _groupIds <- Some _x10982
  method unset_groupIds = _groupIds <- None
  method reset_groupIds = _groupIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupsForChannel_args";
    (match _groupIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupIds",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter10985 ->         oprot#writeString(_iter10985);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupsForChannel_args (iprot : Protocol.t) =
  let _str10986 = new getGroupsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10987,_id10988) = iprot#readFieldBegin in
        if _t10987 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id10988 with 
          | 1 -> (if _t10987 = Protocol.T_LIST then
              _str10986#set_groupIds 
                (let (_etype10992,_size10989) = iprot#readListBegin in
                  let _con10993 = (Array.to_list (Array.init _size10989 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con10993)
            else
              iprot#skip _t10987)
          | _ -> iprot#skip _t10987);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10986

class getGroupsForChannel_result =
object (self)
  val mutable _success : group list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupsForChannel_result.success") | Some _x10994 -> _x10994
  method set_success _x10994 = _success <- Some _x10994
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupsForChannel_result.e") | Some _x10995 -> _x10995
  method set_e _x10995 = _e <- Some _x10995
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter10998 ->         _iter10998#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupsForChannel_result (iprot : Protocol.t) =
  let _str10999 = new getGroupsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11000,_id11001) = iprot#readFieldBegin in
        if _t11000 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11001 with 
          | 0 -> (if _t11000 = Protocol.T_LIST then
              _str10999#set_success 
                (let (_etype11005,_size11002) = iprot#readListBegin in
                  let _con11006 = (Array.to_list (Array.init _size11002 (fun _ -> (read_group iprot)))) in
                    iprot#readListEnd; _con11006)
            else
              iprot#skip _t11000)
          | 1 -> (if _t11000 = Protocol.T_STRUCT then
              _str10999#set_e (read_talkException iprot)
            else
              iprot#skip _t11000)
          | _ -> iprot#skip _t11000);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str10999

class getUserCreateTime_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserCreateTime_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserCreateTime_args (iprot : Protocol.t) =
  let _str11009 = new getUserCreateTime_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11010,_id11011) = iprot#readFieldBegin in
        if _t11010 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11011 with 
          | _ -> iprot#skip _t11010);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11009

class getUserCreateTime_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserCreateTime_result.success") | Some _x11012 -> _x11012
  method set_success _x11012 = _success <- Some _x11012
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserCreateTime_result.e") | Some _x11013 -> _x11013
  method set_e _x11013 = _e <- Some _x11013
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserCreateTime_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserCreateTime_result (iprot : Protocol.t) =
  let _str11016 = new getUserCreateTime_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11017,_id11018) = iprot#readFieldBegin in
        if _t11017 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11018 with 
          | 0 -> (if _t11017 = Protocol.T_I64 then
              _str11016#set_success iprot#readI64
            else
              iprot#skip _t11017)
          | 1 -> (if _t11017 = Protocol.T_STRUCT then
              _str11016#set_e (read_talkException iprot)
            else
              iprot#skip _t11017)
          | _ -> iprot#skip _t11017);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11016

class registerChannelCP_args =
object (self)
  val mutable _cpId : string option = None
  method get_cpId = _cpId
  method grab_cpId = match _cpId with None->raise (Field_empty "registerChannelCP_args.cpId") | Some _x11019 -> _x11019
  method set_cpId _x11019 = _cpId <- Some _x11019
  method unset_cpId = _cpId <- None
  method reset_cpId = _cpId <- None

  val mutable _registerPassword : string option = None
  method get_registerPassword = _registerPassword
  method grab_registerPassword = match _registerPassword with None->raise (Field_empty "registerChannelCP_args.registerPassword") | Some _x11020 -> _x11020
  method set_registerPassword _x11020 = _registerPassword <- Some _x11020
  method unset_registerPassword = _registerPassword <- None
  method reset_registerPassword = _registerPassword <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerChannelCP_args";
    (match _cpId with None -> () | Some _v -> 
      oprot#writeFieldBegin("cpId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _registerPassword with None -> () | Some _v -> 
      oprot#writeFieldBegin("registerPassword",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerChannelCP_args (iprot : Protocol.t) =
  let _str11023 = new registerChannelCP_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11024,_id11025) = iprot#readFieldBegin in
        if _t11024 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11025 with 
          | 2 -> (if _t11024 = Protocol.T_STRING then
              _str11023#set_cpId iprot#readString
            else
              iprot#skip _t11024)
          | 3 -> (if _t11024 = Protocol.T_STRING then
              _str11023#set_registerPassword iprot#readString
            else
              iprot#skip _t11024)
          | _ -> iprot#skip _t11024);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11023

class registerChannelCP_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerChannelCP_result.success") | Some _x11026 -> _x11026
  method set_success _x11026 = _success <- Some _x11026
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerChannelCP_result.e") | Some _x11027 -> _x11027
  method set_e _x11027 = _e <- Some _x11027
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerChannelCP_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerChannelCP_result (iprot : Protocol.t) =
  let _str11030 = new registerChannelCP_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11031,_id11032) = iprot#readFieldBegin in
        if _t11031 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11032 with 
          | 0 -> (if _t11031 = Protocol.T_STRING then
              _str11030#set_success iprot#readString
            else
              iprot#skip _t11031)
          | 1 -> (if _t11031 = Protocol.T_STRUCT then
              _str11030#set_e (read_talkException iprot)
            else
              iprot#skip _t11031)
          | _ -> iprot#skip _t11031);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11030

class reserveCallCreditPurchase_args =
object (self)
  val mutable _request : coinPurchaseReservation option = None
  method get_request = _request
  method grab_request = match _request with None->raise (Field_empty "reserveCallCreditPurchase_args.request") | Some _x11033 -> _x11033
  method set_request _x11033 = _request <- Some _x11033
  method unset_request = _request <- None
  method reset_request = _request <- None

  method copy =
      let _new = Oo.copy self in
      if _request <> None then
        _new#set_request self#grab_request#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reserveCallCreditPurchase_args";
    (match _request with None -> () | Some _v -> 
      oprot#writeFieldBegin("request",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reserveCallCreditPurchase_args (iprot : Protocol.t) =
  let _str11036 = new reserveCallCreditPurchase_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11037,_id11038) = iprot#readFieldBegin in
        if _t11037 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11038 with 
          | 2 -> (if _t11037 = Protocol.T_STRUCT then
              _str11036#set_request (read_coinPurchaseReservation iprot)
            else
              iprot#skip _t11037)
          | _ -> iprot#skip _t11037);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11036

class reserveCallCreditPurchase_result =
object (self)
  val mutable _success : paymentReservationResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "reserveCallCreditPurchase_result.success") | Some _x11039 -> _x11039
  method set_success _x11039 = _success <- Some _x11039
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "reserveCallCreditPurchase_result.e") | Some _x11040 -> _x11040
  method set_e _x11040 = _e <- Some _x11040
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "reserveCallCreditPurchase_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_reserveCallCreditPurchase_result (iprot : Protocol.t) =
  let _str11043 = new reserveCallCreditPurchase_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11044,_id11045) = iprot#readFieldBegin in
        if _t11044 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11045 with 
          | 0 -> (if _t11044 = Protocol.T_STRUCT then
              _str11043#set_success (read_paymentReservationResult iprot)
            else
              iprot#skip _t11044)
          | 1 -> (if _t11044 = Protocol.T_STRUCT then
              _str11043#set_e (read_talkException iprot)
            else
              iprot#skip _t11044)
          | _ -> iprot#skip _t11044);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11043

class acquirePaidCallCurrencyExchangeRate_args =
object (self)
  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "acquirePaidCallCurrencyExchangeRate_args.language") | Some _x11046 -> _x11046
  method set_language _x11046 = _language <- Some _x11046
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquirePaidCallCurrencyExchangeRate_args";
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquirePaidCallCurrencyExchangeRate_args (iprot : Protocol.t) =
  let _str11049 = new acquirePaidCallCurrencyExchangeRate_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11050,_id11051) = iprot#readFieldBegin in
        if _t11050 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11051 with 
          | 2 -> (if _t11050 = Protocol.T_STRING then
              _str11049#set_language iprot#readString
            else
              iprot#skip _t11050)
          | _ -> iprot#skip _t11050);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11049

class acquirePaidCallCurrencyExchangeRate_result =
object (self)
  val mutable _success : paidCallCurrencyExchangeRate list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "acquirePaidCallCurrencyExchangeRate_result.success") | Some _x11052 -> _x11052
  method set_success _x11052 = _success <- Some _x11052
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "acquirePaidCallCurrencyExchangeRate_result.e") | Some _x11053 -> _x11053
  method set_e _x11053 = _e <- Some _x11053
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquirePaidCallCurrencyExchangeRate_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter11056 ->         _iter11056#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquirePaidCallCurrencyExchangeRate_result (iprot : Protocol.t) =
  let _str11057 = new acquirePaidCallCurrencyExchangeRate_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11058,_id11059) = iprot#readFieldBegin in
        if _t11058 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11059 with 
          | 0 -> (if _t11058 = Protocol.T_LIST then
              _str11057#set_success 
                (let (_etype11063,_size11060) = iprot#readListBegin in
                  let _con11064 = (Array.to_list (Array.init _size11060 (fun _ -> (read_paidCallCurrencyExchangeRate iprot)))) in
                    iprot#readListEnd; _con11064)
            else
              iprot#skip _t11058)
          | 1 -> (if _t11058 = Protocol.T_STRUCT then
              _str11057#set_e (read_talkException iprot)
            else
              iprot#skip _t11058)
          | _ -> iprot#skip _t11058);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11057

class getRoomMemberMidsForAppPlatform_args =
object (self)
  val mutable _roomId : string option = None
  method get_roomId = _roomId
  method grab_roomId = match _roomId with None->raise (Field_empty "getRoomMemberMidsForAppPlatform_args.roomId") | Some _x11065 -> _x11065
  method set_roomId _x11065 = _roomId <- Some _x11065
  method unset_roomId = _roomId <- None
  method reset_roomId = _roomId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRoomMemberMidsForAppPlatform_args";
    (match _roomId with None -> () | Some _v -> 
      oprot#writeFieldBegin("roomId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRoomMemberMidsForAppPlatform_args (iprot : Protocol.t) =
  let _str11068 = new getRoomMemberMidsForAppPlatform_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11069,_id11070) = iprot#readFieldBegin in
        if _t11069 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11070 with 
          | 1 -> (if _t11069 = Protocol.T_STRING then
              _str11068#set_roomId iprot#readString
            else
              iprot#skip _t11069)
          | _ -> iprot#skip _t11069);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11068

class getRoomMemberMidsForAppPlatform_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getRoomMemberMidsForAppPlatform_result.success") | Some _x11071 -> _x11071
  method set_success _x11071 = _success <- Some _x11071
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getRoomMemberMidsForAppPlatform_result.e") | Some _x11072 -> _x11072
  method set_e _x11072 = _e <- Some _x11072
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRoomMemberMidsForAppPlatform_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11075 ->         oprot#writeString(_iter11075);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRoomMemberMidsForAppPlatform_result (iprot : Protocol.t) =
  let _str11076 = new getRoomMemberMidsForAppPlatform_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11077,_id11078) = iprot#readFieldBegin in
        if _t11077 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11078 with 
          | 0 -> (if _t11077 = Protocol.T_LIST then
              _str11076#set_success 
                (let (_etype11082,_size11079) = iprot#readListBegin in
                  let _con11083 = (Array.to_list (Array.init _size11079 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11083)
            else
              iprot#skip _t11077)
          | 1 -> (if _t11077 = Protocol.T_STRUCT then
              _str11076#set_e (read_talkException iprot)
            else
              iprot#skip _t11077)
          | _ -> iprot#skip _t11077);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11076

class getPaidCallBalanceList_args =
object (self)
  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "getPaidCallBalanceList_args.language") | Some _x11084 -> _x11084
  method set_language _x11084 = _language <- Some _x11084
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPaidCallBalanceList_args";
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPaidCallBalanceList_args (iprot : Protocol.t) =
  let _str11087 = new getPaidCallBalanceList_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11088,_id11089) = iprot#readFieldBegin in
        if _t11088 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11089 with 
          | 2 -> (if _t11088 = Protocol.T_STRING then
              _str11087#set_language iprot#readString
            else
              iprot#skip _t11088)
          | _ -> iprot#skip _t11088);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11087

class getPaidCallBalanceList_result =
object (self)
  val mutable _success : paidCallBalance list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPaidCallBalanceList_result.success") | Some _x11090 -> _x11090
  method set_success _x11090 = _success <- Some _x11090
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPaidCallBalanceList_result.e") | Some _x11091 -> _x11091
  method set_e _x11091 = _e <- Some _x11091
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPaidCallBalanceList_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter11094 ->         _iter11094#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPaidCallBalanceList_result (iprot : Protocol.t) =
  let _str11095 = new getPaidCallBalanceList_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11096,_id11097) = iprot#readFieldBegin in
        if _t11096 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11097 with 
          | 0 -> (if _t11096 = Protocol.T_LIST then
              _str11095#set_success 
                (let (_etype11101,_size11098) = iprot#readListBegin in
                  let _con11102 = (Array.to_list (Array.init _size11098 (fun _ -> (read_paidCallBalance iprot)))) in
                    iprot#readListEnd; _con11102)
            else
              iprot#skip _t11096)
          | 1 -> (if _t11096 = Protocol.T_STRUCT then
              _str11095#set_e (read_talkException iprot)
            else
              iprot#skip _t11096)
          | _ -> iprot#skip _t11096);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11095

class getPersonalInfos_args =
object (self)
  val mutable _requiredPersonalInfos : (PersonalInfo.t,bool) Hashtbl.t option = None
  method get_requiredPersonalInfos = _requiredPersonalInfos
  method grab_requiredPersonalInfos = match _requiredPersonalInfos with None->raise (Field_empty "getPersonalInfos_args.requiredPersonalInfos") | Some _x11103 -> _x11103
  method set_requiredPersonalInfos _x11103 = _requiredPersonalInfos <- Some _x11103
  method unset_requiredPersonalInfos = _requiredPersonalInfos <- None
  method reset_requiredPersonalInfos = _requiredPersonalInfos <- None

  method copy =
      let _new = Oo.copy self in
      if _requiredPersonalInfos <> None then
        _new#set_requiredPersonalInfos (Hashtbl.copy self#grab_requiredPersonalInfos);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPersonalInfos_args";
    (match _requiredPersonalInfos with None -> () | Some _v -> 
      oprot#writeFieldBegin("requiredPersonalInfos",Protocol.T_SET,1);
      oprot#writeSetBegin(Protocol.T_I32,Hashtbl.length _v);
      Hashtbl.iter (fun _iter11106 -> fun _ ->         oprot#writeI32(PersonalInfo.to_i _iter11106);
      ) _v;
      oprot#writeSetEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPersonalInfos_args (iprot : Protocol.t) =
  let _str11107 = new getPersonalInfos_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11108,_id11109) = iprot#readFieldBegin in
        if _t11108 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11109 with 
          | 1 -> (if _t11108 = Protocol.T_SET then
              _str11107#set_requiredPersonalInfos 
                (let (_etype11113,_size11110) = iprot#readSetBegin in
                let _con11114 = Hashtbl.create _size11110 in
                  for i = 1 to _size11110 do
                    Hashtbl.add _con11114 (PersonalInfo.of_i iprot#readI32) true
                  done; iprot#readSetEnd; _con11114)
            else
              iprot#skip _t11108)
          | _ -> iprot#skip _t11108);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11107

class getPersonalInfos_result =
object (self)
  val mutable _success : (PersonalInfo.t,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPersonalInfos_result.success") | Some _x11115 -> _x11115
  method set_success _x11115 = _success <- Some _x11115
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPersonalInfos_result.e") | Some _x11116 -> _x11116
  method set_e _x11116 = _e <- Some _x11116
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPersonalInfos_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_I32,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter11119 -> fun _viter11120 -> 
        oprot#writeI32(PersonalInfo.to_i _kiter11119);
        oprot#writeString(_viter11120);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPersonalInfos_result (iprot : Protocol.t) =
  let _str11121 = new getPersonalInfos_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11122,_id11123) = iprot#readFieldBegin in
        if _t11122 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11123 with 
          | 0 -> (if _t11122 = Protocol.T_MAP then
              _str11121#set_success 
                (let (_ktype11125,_vtype11126,_size11124) = iprot#readMapBegin in
                let _con11128 = Hashtbl.create _size11124 in
                  for i = 1 to _size11124 do
                    let _k = (PersonalInfo.of_i iprot#readI32) in
                    let _v = iprot#readString in
                      Hashtbl.add _con11128 _k _v
                  done; iprot#readMapEnd; _con11128)
            else
              iprot#skip _t11122)
          | 1 -> (if _t11122 = Protocol.T_STRUCT then
              _str11121#set_e (read_talkException iprot)
            else
              iprot#skip _t11122)
          | _ -> iprot#skip _t11122);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11121

class getPrimaryClientsForChannel_args =
object (self)
  val mutable _userMids : string list option = None
  method get_userMids = _userMids
  method grab_userMids = match _userMids with None->raise (Field_empty "getPrimaryClientsForChannel_args.userMids") | Some _x11129 -> _x11129
  method set_userMids _x11129 = _userMids <- Some _x11129
  method unset_userMids = _userMids <- None
  method reset_userMids = _userMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPrimaryClientsForChannel_args";
    (match _userMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("userMids",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11132 ->         oprot#writeString(_iter11132);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPrimaryClientsForChannel_args (iprot : Protocol.t) =
  let _str11133 = new getPrimaryClientsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11134,_id11135) = iprot#readFieldBegin in
        if _t11134 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11135 with 
          | 1 -> (if _t11134 = Protocol.T_LIST then
              _str11133#set_userMids 
                (let (_etype11139,_size11136) = iprot#readListBegin in
                  let _con11140 = (Array.to_list (Array.init _size11136 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11140)
            else
              iprot#skip _t11134)
          | _ -> iprot#skip _t11134);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11133

class getPrimaryClientsForChannel_result =
object (self)
  val mutable _success : simpleChannelClient list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPrimaryClientsForChannel_result.success") | Some _x11141 -> _x11141
  method set_success _x11141 = _success <- Some _x11141
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPrimaryClientsForChannel_result.e") | Some _x11142 -> _x11142
  method set_e _x11142 = _e <- Some _x11142
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPrimaryClientsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter11145 ->         _iter11145#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPrimaryClientsForChannel_result (iprot : Protocol.t) =
  let _str11146 = new getPrimaryClientsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11147,_id11148) = iprot#readFieldBegin in
        if _t11147 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11148 with 
          | 0 -> (if _t11147 = Protocol.T_LIST then
              _str11146#set_success 
                (let (_etype11152,_size11149) = iprot#readListBegin in
                  let _con11153 = (Array.to_list (Array.init _size11149 (fun _ -> (read_simpleChannelClient iprot)))) in
                    iprot#readListEnd; _con11153)
            else
              iprot#skip _t11147)
          | 1 -> (if _t11147 = Protocol.T_STRUCT then
              _str11146#set_e (read_talkException iprot)
            else
              iprot#skip _t11147)
          | _ -> iprot#skip _t11147);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11146

class addBuddyToContact_args =
object (self)
  val mutable _buddyMid : string option = None
  method get_buddyMid = _buddyMid
  method grab_buddyMid = match _buddyMid with None->raise (Field_empty "addBuddyToContact_args.buddyMid") | Some _x11154 -> _x11154
  method set_buddyMid _x11154 = _buddyMid <- Some _x11154
  method unset_buddyMid = _buddyMid <- None
  method reset_buddyMid = _buddyMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addBuddyToContact_args";
    (match _buddyMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("buddyMid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addBuddyToContact_args (iprot : Protocol.t) =
  let _str11157 = new addBuddyToContact_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11158,_id11159) = iprot#readFieldBegin in
        if _t11158 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11159 with 
          | 1 -> (if _t11158 = Protocol.T_STRING then
              _str11157#set_buddyMid iprot#readString
            else
              iprot#skip _t11158)
          | _ -> iprot#skip _t11158);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11157

class addBuddyToContact_result =
object (self)
  val mutable _success : contactTransition option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "addBuddyToContact_result.success") | Some _x11160 -> _x11160
  method set_success _x11160 = _success <- Some _x11160
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "addBuddyToContact_result.e") | Some _x11161 -> _x11161
  method set_e _x11161 = _e <- Some _x11161
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addBuddyToContact_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addBuddyToContact_result (iprot : Protocol.t) =
  let _str11164 = new addBuddyToContact_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11165,_id11166) = iprot#readFieldBegin in
        if _t11165 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11166 with 
          | 0 -> (if _t11165 = Protocol.T_STRUCT then
              _str11164#set_success (read_contactTransition iprot)
            else
              iprot#skip _t11165)
          | 1 -> (if _t11165 = Protocol.T_STRUCT then
              _str11164#set_e (read_talkException iprot)
            else
              iprot#skip _t11165)
          | _ -> iprot#skip _t11165);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11164

class getGroupMemberMidsForAppPlatform_args =
object (self)
  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "getGroupMemberMidsForAppPlatform_args.groupId") | Some _x11167 -> _x11167
  method set_groupId _x11167 = _groupId <- Some _x11167
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupMemberMidsForAppPlatform_args";
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupMemberMidsForAppPlatform_args (iprot : Protocol.t) =
  let _str11170 = new getGroupMemberMidsForAppPlatform_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11171,_id11172) = iprot#readFieldBegin in
        if _t11171 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11172 with 
          | 1 -> (if _t11171 = Protocol.T_STRING then
              _str11170#set_groupId iprot#readString
            else
              iprot#skip _t11171)
          | _ -> iprot#skip _t11171);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11170

class getGroupMemberMidsForAppPlatform_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupMemberMidsForAppPlatform_result.success") | Some _x11173 -> _x11173
  method set_success _x11173 = _success <- Some _x11173
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupMemberMidsForAppPlatform_result.e") | Some _x11174 -> _x11174
  method set_e _x11174 = _e <- Some _x11174
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupMemberMidsForAppPlatform_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11177 ->         oprot#writeString(_iter11177);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupMemberMidsForAppPlatform_result (iprot : Protocol.t) =
  let _str11178 = new getGroupMemberMidsForAppPlatform_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11179,_id11180) = iprot#readFieldBegin in
        if _t11179 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11180 with 
          | 0 -> (if _t11179 = Protocol.T_LIST then
              _str11178#set_success 
                (let (_etype11184,_size11181) = iprot#readListBegin in
                  let _con11185 = (Array.to_list (Array.init _size11181 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11185)
            else
              iprot#skip _t11179)
          | 1 -> (if _t11179 = Protocol.T_STRUCT then
              _str11178#set_e (read_talkException iprot)
            else
              iprot#skip _t11179)
          | _ -> iprot#skip _t11179);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11178

class getUserLanguage_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserLanguage_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserLanguage_args (iprot : Protocol.t) =
  let _str11188 = new getUserLanguage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11189,_id11190) = iprot#readFieldBegin in
        if _t11189 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11190 with 
          | _ -> iprot#skip _t11189);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11188

class getUserLanguage_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserLanguage_result.success") | Some _x11191 -> _x11191
  method set_success _x11191 = _success <- Some _x11191
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserLanguage_result.e") | Some _x11192 -> _x11192
  method set_e _x11192 = _e <- Some _x11192
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserLanguage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserLanguage_result (iprot : Protocol.t) =
  let _str11195 = new getUserLanguage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11196,_id11197) = iprot#readFieldBegin in
        if _t11196 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11197 with 
          | 0 -> (if _t11196 = Protocol.T_STRING then
              _str11195#set_success iprot#readString
            else
              iprot#skip _t11196)
          | 1 -> (if _t11196 = Protocol.T_STRUCT then
              _str11195#set_e (read_talkException iprot)
            else
              iprot#skip _t11196)
          | _ -> iprot#skip _t11196);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11195

class lookupPaidCall_args =
object (self)
  val mutable _dialedNumber : string option = None
  method get_dialedNumber = _dialedNumber
  method grab_dialedNumber = match _dialedNumber with None->raise (Field_empty "lookupPaidCall_args.dialedNumber") | Some _x11198 -> _x11198
  method set_dialedNumber _x11198 = _dialedNumber <- Some _x11198
  method unset_dialedNumber = _dialedNumber <- None
  method reset_dialedNumber = _dialedNumber <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "lookupPaidCall_args.language") | Some _x11199 -> _x11199
  method set_language _x11199 = _language <- Some _x11199
  method unset_language = _language <- None
  method reset_language = _language <- None

  val mutable _referer : string option = None
  method get_referer = _referer
  method grab_referer = match _referer with None->raise (Field_empty "lookupPaidCall_args.referer") | Some _x11200 -> _x11200
  method set_referer _x11200 = _referer <- Some _x11200
  method unset_referer = _referer <- None
  method reset_referer = _referer <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "lookupPaidCall_args";
    (match _dialedNumber with None -> () | Some _v -> 
      oprot#writeFieldBegin("dialedNumber",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _referer with None -> () | Some _v -> 
      oprot#writeFieldBegin("referer",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_lookupPaidCall_args (iprot : Protocol.t) =
  let _str11203 = new lookupPaidCall_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11204,_id11205) = iprot#readFieldBegin in
        if _t11204 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11205 with 
          | 2 -> (if _t11204 = Protocol.T_STRING then
              _str11203#set_dialedNumber iprot#readString
            else
              iprot#skip _t11204)
          | 3 -> (if _t11204 = Protocol.T_STRING then
              _str11203#set_language iprot#readString
            else
              iprot#skip _t11204)
          | 4 -> (if _t11204 = Protocol.T_STRING then
              _str11203#set_referer iprot#readString
            else
              iprot#skip _t11204)
          | _ -> iprot#skip _t11204);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11203

class lookupPaidCall_result =
object (self)
  val mutable _success : paidCallResponse option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "lookupPaidCall_result.success") | Some _x11206 -> _x11206
  method set_success _x11206 = _success <- Some _x11206
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "lookupPaidCall_result.e") | Some _x11207 -> _x11207
  method set_e _x11207 = _e <- Some _x11207
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "lookupPaidCall_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_lookupPaidCall_result (iprot : Protocol.t) =
  let _str11210 = new lookupPaidCall_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11211,_id11212) = iprot#readFieldBegin in
        if _t11211 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11212 with 
          | 0 -> (if _t11211 = Protocol.T_STRUCT then
              _str11210#set_success (read_paidCallResponse iprot)
            else
              iprot#skip _t11211)
          | 1 -> (if _t11211 = Protocol.T_STRUCT then
              _str11210#set_e (read_talkException iprot)
            else
              iprot#skip _t11211)
          | _ -> iprot#skip _t11211);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11210

class getExtendedProfile_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getExtendedProfile_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getExtendedProfile_args (iprot : Protocol.t) =
  let _str11215 = new getExtendedProfile_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11216,_id11217) = iprot#readFieldBegin in
        if _t11216 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11217 with 
          | _ -> iprot#skip _t11216);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11215

class getExtendedProfile_result =
object (self)
  val mutable _success : extendedProfile option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getExtendedProfile_result.success") | Some _x11218 -> _x11218
  method set_success _x11218 = _success <- Some _x11218
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getExtendedProfile_result.e") | Some _x11219 -> _x11219
  method set_e _x11219 = _e <- Some _x11219
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getExtendedProfile_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getExtendedProfile_result (iprot : Protocol.t) =
  let _str11222 = new getExtendedProfile_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11223,_id11224) = iprot#readFieldBegin in
        if _t11223 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11224 with 
          | 0 -> (if _t11223 = Protocol.T_STRUCT then
              _str11222#set_success (read_extendedProfile iprot)
            else
              iprot#skip _t11223)
          | 1 -> (if _t11223 = Protocol.T_STRUCT then
              _str11222#set_e (read_talkException iprot)
            else
              iprot#skip _t11223)
          | _ -> iprot#skip _t11223);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11222

class getReverseCompactContacts_args =
object (self)
  val mutable _ids : string list option = None
  method get_ids = _ids
  method grab_ids = match _ids with None->raise (Field_empty "getReverseCompactContacts_args.ids") | Some _x11225 -> _x11225
  method set_ids _x11225 = _ids <- Some _x11225
  method unset_ids = _ids <- None
  method reset_ids = _ids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getReverseCompactContacts_args";
    (match _ids with None -> () | Some _v -> 
      oprot#writeFieldBegin("ids",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11228 ->         oprot#writeString(_iter11228);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getReverseCompactContacts_args (iprot : Protocol.t) =
  let _str11229 = new getReverseCompactContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11230,_id11231) = iprot#readFieldBegin in
        if _t11230 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11231 with 
          | 1 -> (if _t11230 = Protocol.T_LIST then
              _str11229#set_ids 
                (let (_etype11235,_size11232) = iprot#readListBegin in
                  let _con11236 = (Array.to_list (Array.init _size11232 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11236)
            else
              iprot#skip _t11230)
          | _ -> iprot#skip _t11230);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11229

class getReverseCompactContacts_result =
object (self)
  val mutable _success : (string,compactContact) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getReverseCompactContacts_result.success") | Some _x11237 -> _x11237
  method set_success _x11237 = _success <- Some _x11237
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getReverseCompactContacts_result.e") | Some _x11238 -> _x11238
  method set_e _x11238 = _e <- Some _x11238
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success ((fun oh -> let nh = Hashtbl.create (Hashtbl.length oh) in Hashtbl.iter (fun k v -> Hashtbl.add nh k v#copy) oh; nh) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getReverseCompactContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRUCT,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter11241 -> fun _viter11242 -> 
        oprot#writeString(_kiter11241);
        _viter11242#write(oprot);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getReverseCompactContacts_result (iprot : Protocol.t) =
  let _str11243 = new getReverseCompactContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11244,_id11245) = iprot#readFieldBegin in
        if _t11244 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11245 with 
          | 0 -> (if _t11244 = Protocol.T_MAP then
              _str11243#set_success 
                (let (_ktype11247,_vtype11248,_size11246) = iprot#readMapBegin in
                let _con11250 = Hashtbl.create _size11246 in
                  for i = 1 to _size11246 do
                    let _k = iprot#readString in
                    let _v = (read_compactContact iprot) in
                      Hashtbl.add _con11250 _k _v
                  done; iprot#readMapEnd; _con11250)
            else
              iprot#skip _t11244)
          | 1 -> (if _t11244 = Protocol.T_STRUCT then
              _str11243#set_e (read_talkException iprot)
            else
              iprot#skip _t11244)
          | _ -> iprot#skip _t11244);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11243

class getPaidCallAdStatus_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPaidCallAdStatus_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPaidCallAdStatus_args (iprot : Protocol.t) =
  let _str11253 = new getPaidCallAdStatus_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11254,_id11255) = iprot#readFieldBegin in
        if _t11254 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11255 with 
          | _ -> iprot#skip _t11254);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11253

class getPaidCallAdStatus_result =
object (self)
  val mutable _success : paidCallAdResult option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPaidCallAdStatus_result.success") | Some _x11256 -> _x11256
  method set_success _x11256 = _success <- Some _x11256
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPaidCallAdStatus_result.e") | Some _x11257 -> _x11257
  method set_e _x11257 = _e <- Some _x11257
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPaidCallAdStatus_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPaidCallAdStatus_result (iprot : Protocol.t) =
  let _str11260 = new getPaidCallAdStatus_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11261,_id11262) = iprot#readFieldBegin in
        if _t11261 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11262 with 
          | 0 -> (if _t11261 = Protocol.T_STRUCT then
              _str11260#set_success (read_paidCallAdResult iprot)
            else
              iprot#skip _t11261)
          | 1 -> (if _t11261 = Protocol.T_STRUCT then
              _str11260#set_e (read_talkException iprot)
            else
              iprot#skip _t11261)
          | _ -> iprot#skip _t11261);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11260

class findContactByUseridWithoutAbuseBlockForChannel_args =
object (self)
  val mutable _userid : string option = None
  method get_userid = _userid
  method grab_userid = match _userid with None->raise (Field_empty "findContactByUseridWithoutAbuseBlockForChannel_args.userid") | Some _x11263 -> _x11263
  method set_userid _x11263 = _userid <- Some _x11263
  method unset_userid = _userid <- None
  method reset_userid = _userid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByUseridWithoutAbuseBlockForChannel_args";
    (match _userid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByUseridWithoutAbuseBlockForChannel_args (iprot : Protocol.t) =
  let _str11266 = new findContactByUseridWithoutAbuseBlockForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11267,_id11268) = iprot#readFieldBegin in
        if _t11267 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11268 with 
          | 2 -> (if _t11267 = Protocol.T_STRING then
              _str11266#set_userid iprot#readString
            else
              iprot#skip _t11267)
          | _ -> iprot#skip _t11267);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11266

class findContactByUseridWithoutAbuseBlockForChannel_result =
object (self)
  val mutable _success : contact option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findContactByUseridWithoutAbuseBlockForChannel_result.success") | Some _x11269 -> _x11269
  method set_success _x11269 = _success <- Some _x11269
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findContactByUseridWithoutAbuseBlockForChannel_result.e") | Some _x11270 -> _x11270
  method set_e _x11270 = _e <- Some _x11270
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByUseridWithoutAbuseBlockForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByUseridWithoutAbuseBlockForChannel_result (iprot : Protocol.t) =
  let _str11273 = new findContactByUseridWithoutAbuseBlockForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11274,_id11275) = iprot#readFieldBegin in
        if _t11274 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11275 with 
          | 0 -> (if _t11274 = Protocol.T_STRUCT then
              _str11273#set_success (read_contact iprot)
            else
              iprot#skip _t11274)
          | 1 -> (if _t11274 = Protocol.T_STRUCT then
              _str11273#set_e (read_talkException iprot)
            else
              iprot#skip _t11274)
          | _ -> iprot#skip _t11274);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11273

class getGroupMemberMids_args =
object (self)
  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "getGroupMemberMids_args.groupId") | Some _x11276 -> _x11276
  method set_groupId _x11276 = _groupId <- Some _x11276
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupMemberMids_args";
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupMemberMids_args (iprot : Protocol.t) =
  let _str11279 = new getGroupMemberMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11280,_id11281) = iprot#readFieldBegin in
        if _t11280 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11281 with 
          | 1 -> (if _t11280 = Protocol.T_STRING then
              _str11279#set_groupId iprot#readString
            else
              iprot#skip _t11280)
          | _ -> iprot#skip _t11280);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11279

class getGroupMemberMids_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupMemberMids_result.success") | Some _x11282 -> _x11282
  method set_success _x11282 = _success <- Some _x11282
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupMemberMids_result.e") | Some _x11283 -> _x11283
  method set_e _x11283 = _e <- Some _x11283
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupMemberMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11286 ->         oprot#writeString(_iter11286);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupMemberMids_result (iprot : Protocol.t) =
  let _str11287 = new getGroupMemberMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11288,_id11289) = iprot#readFieldBegin in
        if _t11288 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11289 with 
          | 0 -> (if _t11288 = Protocol.T_LIST then
              _str11287#set_success 
                (let (_etype11293,_size11290) = iprot#readListBegin in
                  let _con11294 = (Array.to_list (Array.init _size11290 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11294)
            else
              iprot#skip _t11288)
          | 1 -> (if _t11288 = Protocol.T_STRUCT then
              _str11287#set_e (read_talkException iprot)
            else
              iprot#skip _t11288)
          | _ -> iprot#skip _t11288);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11287

class sendMessageWithoutRelationship_args =
object (self)
  val mutable _message : message option = None
  method get_message = _message
  method grab_message = match _message with None->raise (Field_empty "sendMessageWithoutRelationship_args.message") | Some _x11295 -> _x11295
  method set_message _x11295 = _message <- Some _x11295
  method unset_message = _message <- None
  method reset_message = _message <- None

  method copy =
      let _new = Oo.copy self in
      if _message <> None then
        _new#set_message self#grab_message#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageWithoutRelationship_args";
    (match _message with None -> () | Some _v -> 
      oprot#writeFieldBegin("message",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageWithoutRelationship_args (iprot : Protocol.t) =
  let _str11298 = new sendMessageWithoutRelationship_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11299,_id11300) = iprot#readFieldBegin in
        if _t11299 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11300 with 
          | 2 -> (if _t11299 = Protocol.T_STRUCT then
              _str11298#set_message (read_message iprot)
            else
              iprot#skip _t11299)
          | _ -> iprot#skip _t11299);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11298

class sendMessageWithoutRelationship_result =
object (self)
  val mutable _success : message option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendMessageWithoutRelationship_result.success") | Some _x11301 -> _x11301
  method set_success _x11301 = _success <- Some _x11301
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendMessageWithoutRelationship_result.e") | Some _x11302 -> _x11302
  method set_e _x11302 = _e <- Some _x11302
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageWithoutRelationship_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageWithoutRelationship_result (iprot : Protocol.t) =
  let _str11305 = new sendMessageWithoutRelationship_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11306,_id11307) = iprot#readFieldBegin in
        if _t11306 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11307 with 
          | 0 -> (if _t11306 = Protocol.T_STRUCT then
              _str11305#set_success (read_message iprot)
            else
              iprot#skip _t11306)
          | 1 -> (if _t11306 = Protocol.T_STRUCT then
              _str11305#set_e (read_talkException iprot)
            else
              iprot#skip _t11306)
          | _ -> iprot#skip _t11306);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11305

class displayBuddySubscriberCountInBulk_args =
object (self)
  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "displayBuddySubscriberCountInBulk_args.mids") | Some _x11308 -> _x11308
  method set_mids _x11308 = _mids <- Some _x11308
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "displayBuddySubscriberCountInBulk_args";
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11311 ->         oprot#writeString(_iter11311);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_displayBuddySubscriberCountInBulk_args (iprot : Protocol.t) =
  let _str11312 = new displayBuddySubscriberCountInBulk_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11313,_id11314) = iprot#readFieldBegin in
        if _t11313 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11314 with 
          | 1 -> (if _t11313 = Protocol.T_LIST then
              _str11312#set_mids 
                (let (_etype11318,_size11315) = iprot#readListBegin in
                  let _con11319 = (Array.to_list (Array.init _size11315 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11319)
            else
              iprot#skip _t11313)
          | _ -> iprot#skip _t11313);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11312

class displayBuddySubscriberCountInBulk_result =
object (self)
  val mutable _success : (string,Int64.t) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "displayBuddySubscriberCountInBulk_result.success") | Some _x11320 -> _x11320
  method set_success _x11320 = _success <- Some _x11320
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "displayBuddySubscriberCountInBulk_result.e") | Some _x11321 -> _x11321
  method set_e _x11321 = _e <- Some _x11321
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "displayBuddySubscriberCountInBulk_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_I64,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter11324 -> fun _viter11325 -> 
        oprot#writeString(_kiter11324);
        oprot#writeI64(_viter11325);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_displayBuddySubscriberCountInBulk_result (iprot : Protocol.t) =
  let _str11326 = new displayBuddySubscriberCountInBulk_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11327,_id11328) = iprot#readFieldBegin in
        if _t11327 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11328 with 
          | 0 -> (if _t11327 = Protocol.T_MAP then
              _str11326#set_success 
                (let (_ktype11330,_vtype11331,_size11329) = iprot#readMapBegin in
                let _con11333 = Hashtbl.create _size11329 in
                  for i = 1 to _size11329 do
                    let _k = iprot#readString in
                    let _v = iprot#readI64 in
                      Hashtbl.add _con11333 _k _v
                  done; iprot#readMapEnd; _con11333)
            else
              iprot#skip _t11327)
          | 1 -> (if _t11327 = Protocol.T_STRUCT then
              _str11326#set_e (read_talkException iprot)
            else
              iprot#skip _t11327)
          | _ -> iprot#skip _t11327);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11326

class lookupRoomMembers_args =
object (self)
  val mutable _roomId : string option = None
  method get_roomId = _roomId
  method grab_roomId = match _roomId with None->raise (Field_empty "lookupRoomMembers_args.roomId") | Some _x11334 -> _x11334
  method set_roomId _x11334 = _roomId <- Some _x11334
  method unset_roomId = _roomId <- None
  method reset_roomId = _roomId <- None

  val mutable _mids : string list option = None
  method get_mids = _mids
  method grab_mids = match _mids with None->raise (Field_empty "lookupRoomMembers_args.mids") | Some _x11335 -> _x11335
  method set_mids _x11335 = _mids <- Some _x11335
  method unset_mids = _mids <- None
  method reset_mids = _mids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "lookupRoomMembers_args";
    (match _roomId with None -> () | Some _v -> 
      oprot#writeFieldBegin("roomId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mids with None -> () | Some _v -> 
      oprot#writeFieldBegin("mids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11338 ->         oprot#writeString(_iter11338);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_lookupRoomMembers_args (iprot : Protocol.t) =
  let _str11339 = new lookupRoomMembers_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11340,_id11341) = iprot#readFieldBegin in
        if _t11340 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11341 with 
          | 1 -> (if _t11340 = Protocol.T_STRING then
              _str11339#set_roomId iprot#readString
            else
              iprot#skip _t11340)
          | 2 -> (if _t11340 = Protocol.T_LIST then
              _str11339#set_mids 
                (let (_etype11345,_size11342) = iprot#readListBegin in
                  let _con11346 = (Array.to_list (Array.init _size11342 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11346)
            else
              iprot#skip _t11340)
          | _ -> iprot#skip _t11340);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11339

class lookupRoomMembers_result =
object (self)
  val mutable _success : simpleChannelContact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "lookupRoomMembers_result.success") | Some _x11347 -> _x11347
  method set_success _x11347 = _success <- Some _x11347
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "lookupRoomMembers_result.e") | Some _x11348 -> _x11348
  method set_e _x11348 = _e <- Some _x11348
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "lookupRoomMembers_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter11351 ->         _iter11351#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_lookupRoomMembers_result (iprot : Protocol.t) =
  let _str11352 = new lookupRoomMembers_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11353,_id11354) = iprot#readFieldBegin in
        if _t11353 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11354 with 
          | 0 -> (if _t11353 = Protocol.T_LIST then
              _str11352#set_success 
                (let (_etype11358,_size11355) = iprot#readListBegin in
                  let _con11359 = (Array.to_list (Array.init _size11355 (fun _ -> (read_simpleChannelContact iprot)))) in
                    iprot#readListEnd; _con11359)
            else
              iprot#skip _t11353)
          | 1 -> (if _t11353 = Protocol.T_STRUCT then
              _str11352#set_e (read_talkException iprot)
            else
              iprot#skip _t11353)
          | _ -> iprot#skip _t11353);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11352

class getFavoriteMidsForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFavoriteMidsForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFavoriteMidsForChannel_args (iprot : Protocol.t) =
  let _str11362 = new getFavoriteMidsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11363,_id11364) = iprot#readFieldBegin in
        if _t11363 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11364 with 
          | _ -> iprot#skip _t11363);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11362

class getFavoriteMidsForChannel_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getFavoriteMidsForChannel_result.success") | Some _x11365 -> _x11365
  method set_success _x11365 = _success <- Some _x11365
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getFavoriteMidsForChannel_result.e") | Some _x11366 -> _x11366
  method set_e _x11366 = _e <- Some _x11366
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFavoriteMidsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11369 ->         oprot#writeString(_iter11369);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFavoriteMidsForChannel_result (iprot : Protocol.t) =
  let _str11370 = new getFavoriteMidsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11371,_id11372) = iprot#readFieldBegin in
        if _t11371 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11372 with 
          | 0 -> (if _t11371 = Protocol.T_LIST then
              _str11370#set_success 
                (let (_etype11376,_size11373) = iprot#readListBegin in
                  let _con11377 = (Array.to_list (Array.init _size11373 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11377)
            else
              iprot#skip _t11371)
          | 1 -> (if _t11371 = Protocol.T_STRUCT then
              _str11370#set_e (read_talkException iprot)
            else
              iprot#skip _t11371)
          | _ -> iprot#skip _t11371);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11370

class getAllContactIdsForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllContactIdsForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllContactIdsForChannel_args (iprot : Protocol.t) =
  let _str11380 = new getAllContactIdsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11381,_id11382) = iprot#readFieldBegin in
        if _t11381 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11382 with 
          | _ -> iprot#skip _t11381);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11380

class getAllContactIdsForChannel_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getAllContactIdsForChannel_result.success") | Some _x11383 -> _x11383
  method set_success _x11383 = _success <- Some _x11383
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getAllContactIdsForChannel_result.e") | Some _x11384 -> _x11384
  method set_e _x11384 = _e <- Some _x11384
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllContactIdsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11387 ->         oprot#writeString(_iter11387);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllContactIdsForChannel_result (iprot : Protocol.t) =
  let _str11388 = new getAllContactIdsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11389,_id11390) = iprot#readFieldBegin in
        if _t11389 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11390 with 
          | 0 -> (if _t11389 = Protocol.T_LIST then
              _str11388#set_success 
                (let (_etype11394,_size11391) = iprot#readListBegin in
                  let _con11395 = (Array.to_list (Array.init _size11391 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11395)
            else
              iprot#skip _t11389)
          | 1 -> (if _t11389 = Protocol.T_STRUCT then
              _str11388#set_e (read_talkException iprot)
            else
              iprot#skip _t11389)
          | _ -> iprot#skip _t11389);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11388

class displayBuddySubscriberCount_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "displayBuddySubscriberCount_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_displayBuddySubscriberCount_args (iprot : Protocol.t) =
  let _str11398 = new displayBuddySubscriberCount_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11399,_id11400) = iprot#readFieldBegin in
        if _t11399 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11400 with 
          | _ -> iprot#skip _t11399);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11398

class displayBuddySubscriberCount_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "displayBuddySubscriberCount_result.success") | Some _x11401 -> _x11401
  method set_success _x11401 = _success <- Some _x11401
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "displayBuddySubscriberCount_result.e") | Some _x11402 -> _x11402
  method set_e _x11402 = _e <- Some _x11402
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "displayBuddySubscriberCount_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_displayBuddySubscriberCount_result (iprot : Protocol.t) =
  let _str11405 = new displayBuddySubscriberCount_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11406,_id11407) = iprot#readFieldBegin in
        if _t11406 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11407 with 
          | 0 -> (if _t11406 = Protocol.T_I64 then
              _str11405#set_success iprot#readI64
            else
              iprot#skip _t11406)
          | 1 -> (if _t11406 = Protocol.T_STRUCT then
              _str11405#set_e (read_talkException iprot)
            else
              iprot#skip _t11406)
          | _ -> iprot#skip _t11406);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11405

class getProfileForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProfileForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProfileForChannel_args (iprot : Protocol.t) =
  let _str11410 = new getProfileForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11411,_id11412) = iprot#readFieldBegin in
        if _t11411 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11412 with 
          | _ -> iprot#skip _t11411);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11410

class getProfileForChannel_result =
object (self)
  val mutable _success : profile option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProfileForChannel_result.success") | Some _x11413 -> _x11413
  method set_success _x11413 = _success <- Some _x11413
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getProfileForChannel_result.e") | Some _x11414 -> _x11414
  method set_e _x11414 = _e <- Some _x11414
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProfileForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProfileForChannel_result (iprot : Protocol.t) =
  let _str11417 = new getProfileForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11418,_id11419) = iprot#readFieldBegin in
        if _t11418 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11419 with 
          | 0 -> (if _t11418 = Protocol.T_STRUCT then
              _str11417#set_success (read_profile iprot)
            else
              iprot#skip _t11418)
          | 1 -> (if _t11418 = Protocol.T_STRUCT then
              _str11417#set_e (read_talkException iprot)
            else
              iprot#skip _t11418)
          | _ -> iprot#skip _t11418);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11417

class getUserTickets_args =
object (self)
  val mutable _userMids : string list option = None
  method get_userMids = _userMids
  method grab_userMids = match _userMids with None->raise (Field_empty "getUserTickets_args.userMids") | Some _x11420 -> _x11420
  method set_userMids _x11420 = _userMids <- Some _x11420
  method unset_userMids = _userMids <- None
  method reset_userMids = _userMids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserTickets_args";
    (match _userMids with None -> () | Some _v -> 
      oprot#writeFieldBegin("userMids",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11423 ->         oprot#writeString(_iter11423);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserTickets_args (iprot : Protocol.t) =
  let _str11424 = new getUserTickets_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11425,_id11426) = iprot#readFieldBegin in
        if _t11425 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11426 with 
          | 1 -> (if _t11425 = Protocol.T_LIST then
              _str11424#set_userMids 
                (let (_etype11430,_size11427) = iprot#readListBegin in
                  let _con11431 = (Array.to_list (Array.init _size11427 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11431)
            else
              iprot#skip _t11425)
          | _ -> iprot#skip _t11425);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11424

class getUserTickets_result =
object (self)
  val mutable _success : userTicketResponse list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserTickets_result.success") | Some _x11432 -> _x11432
  method set_success _x11432 = _success <- Some _x11432
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserTickets_result.e") | Some _x11433 -> _x11433
  method set_e _x11433 = _e <- Some _x11433
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserTickets_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter11436 ->         _iter11436#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserTickets_result (iprot : Protocol.t) =
  let _str11437 = new getUserTickets_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11438,_id11439) = iprot#readFieldBegin in
        if _t11438 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11439 with 
          | 0 -> (if _t11438 = Protocol.T_LIST then
              _str11437#set_success 
                (let (_etype11443,_size11440) = iprot#readListBegin in
                  let _con11444 = (Array.to_list (Array.init _size11440 (fun _ -> (read_userTicketResponse iprot)))) in
                    iprot#readListEnd; _con11444)
            else
              iprot#skip _t11438)
          | 1 -> (if _t11438 = Protocol.T_STRUCT then
              _str11437#set_e (read_talkException iprot)
            else
              iprot#skip _t11438)
          | _ -> iprot#skip _t11438);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11437

class getOAFriendMids_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getOAFriendMids_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getOAFriendMids_args (iprot : Protocol.t) =
  let _str11447 = new getOAFriendMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11448,_id11449) = iprot#readFieldBegin in
        if _t11448 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11449 with 
          | _ -> iprot#skip _t11448);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11447

class getOAFriendMids_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getOAFriendMids_result.success") | Some _x11450 -> _x11450
  method set_success _x11450 = _success <- Some _x11450
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getOAFriendMids_result.e") | Some _x11451 -> _x11451
  method set_e _x11451 = _e <- Some _x11451
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getOAFriendMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11454 ->         oprot#writeString(_iter11454);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getOAFriendMids_result (iprot : Protocol.t) =
  let _str11455 = new getOAFriendMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11456,_id11457) = iprot#readFieldBegin in
        if _t11456 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11457 with 
          | 0 -> (if _t11456 = Protocol.T_LIST then
              _str11455#set_success 
                (let (_etype11461,_size11458) = iprot#readListBegin in
                  let _con11462 = (Array.to_list (Array.init _size11458 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11462)
            else
              iprot#skip _t11456)
          | 1 -> (if _t11456 = Protocol.T_STRUCT then
              _str11455#set_e (read_talkException iprot)
            else
              iprot#skip _t11456)
          | _ -> iprot#skip _t11456);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11455

class searchPaidCallUserRate_args =
object (self)
  val mutable _countryCode : string option = None
  method get_countryCode = _countryCode
  method grab_countryCode = match _countryCode with None->raise (Field_empty "searchPaidCallUserRate_args.countryCode") | Some _x11463 -> _x11463
  method set_countryCode _x11463 = _countryCode <- Some _x11463
  method unset_countryCode = _countryCode <- None
  method reset_countryCode = _countryCode <- None

  val mutable _language : string option = None
  method get_language = _language
  method grab_language = match _language with None->raise (Field_empty "searchPaidCallUserRate_args.language") | Some _x11464 -> _x11464
  method set_language _x11464 = _language <- Some _x11464
  method unset_language = _language <- None
  method reset_language = _language <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "searchPaidCallUserRate_args";
    (match _countryCode with None -> () | Some _v -> 
      oprot#writeFieldBegin("countryCode",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _language with None -> () | Some _v -> 
      oprot#writeFieldBegin("language",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_searchPaidCallUserRate_args (iprot : Protocol.t) =
  let _str11467 = new searchPaidCallUserRate_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11468,_id11469) = iprot#readFieldBegin in
        if _t11468 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11469 with 
          | 2 -> (if _t11468 = Protocol.T_STRING then
              _str11467#set_countryCode iprot#readString
            else
              iprot#skip _t11468)
          | 3 -> (if _t11468 = Protocol.T_STRING then
              _str11467#set_language iprot#readString
            else
              iprot#skip _t11468)
          | _ -> iprot#skip _t11468);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11467

class searchPaidCallUserRate_result =
object (self)
  val mutable _success : paidCallUserRate list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "searchPaidCallUserRate_result.success") | Some _x11470 -> _x11470
  method set_success _x11470 = _success <- Some _x11470
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "searchPaidCallUserRate_result.e") | Some _x11471 -> _x11471
  method set_e _x11471 = _e <- Some _x11471
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "searchPaidCallUserRate_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter11474 ->         _iter11474#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_searchPaidCallUserRate_result (iprot : Protocol.t) =
  let _str11475 = new searchPaidCallUserRate_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11476,_id11477) = iprot#readFieldBegin in
        if _t11476 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11477 with 
          | 0 -> (if _t11476 = Protocol.T_LIST then
              _str11475#set_success 
                (let (_etype11481,_size11478) = iprot#readListBegin in
                  let _con11482 = (Array.to_list (Array.init _size11478 (fun _ -> (read_paidCallUserRate iprot)))) in
                    iprot#readListEnd; _con11482)
            else
              iprot#skip _t11476)
          | 1 -> (if _t11476 = Protocol.T_STRUCT then
              _str11475#set_e (read_talkException iprot)
            else
              iprot#skip _t11476)
          | _ -> iprot#skip _t11476);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11475

class getJoinedGroupIdsForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinedGroupIdsForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinedGroupIdsForChannel_args (iprot : Protocol.t) =
  let _str11485 = new getJoinedGroupIdsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11486,_id11487) = iprot#readFieldBegin in
        if _t11486 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11487 with 
          | _ -> iprot#skip _t11486);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11485

class getJoinedGroupIdsForChannel_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getJoinedGroupIdsForChannel_result.success") | Some _x11488 -> _x11488
  method set_success _x11488 = _success <- Some _x11488
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getJoinedGroupIdsForChannel_result.e") | Some _x11489 -> _x11489
  method set_e _x11489 = _e <- Some _x11489
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinedGroupIdsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11492 ->         oprot#writeString(_iter11492);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinedGroupIdsForChannel_result (iprot : Protocol.t) =
  let _str11493 = new getJoinedGroupIdsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11494,_id11495) = iprot#readFieldBegin in
        if _t11494 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11495 with 
          | 0 -> (if _t11494 = Protocol.T_LIST then
              _str11493#set_success 
                (let (_etype11499,_size11496) = iprot#readListBegin in
                  let _con11500 = (Array.to_list (Array.init _size11496 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11500)
            else
              iprot#skip _t11494)
          | 1 -> (if _t11494 = Protocol.T_STRUCT then
              _str11493#set_e (read_talkException iprot)
            else
              iprot#skip _t11494)
          | _ -> iprot#skip _t11494);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11493

class acquireGroupCallRoute_args =
object (self)
  val mutable _chatMid : string option = None
  method get_chatMid = _chatMid
  method grab_chatMid = match _chatMid with None->raise (Field_empty "acquireGroupCallRoute_args.chatMid") | Some _x11501 -> _x11501
  method set_chatMid _x11501 = _chatMid <- Some _x11501
  method unset_chatMid = _chatMid <- None
  method reset_chatMid = _chatMid <- None

  val mutable _mediaType : GroupCallMediaType.t option = None
  method get_mediaType = _mediaType
  method grab_mediaType = match _mediaType with None->raise (Field_empty "acquireGroupCallRoute_args.mediaType") | Some _x11502 -> _x11502
  method set_mediaType _x11502 = _mediaType <- Some _x11502
  method unset_mediaType = _mediaType <- None
  method reset_mediaType = _mediaType <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquireGroupCallRoute_args";
    (match _chatMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("chatMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _mediaType with None -> () | Some _v -> 
      oprot#writeFieldBegin("mediaType",Protocol.T_I32,3);
      oprot#writeI32(GroupCallMediaType.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquireGroupCallRoute_args (iprot : Protocol.t) =
  let _str11505 = new acquireGroupCallRoute_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11506,_id11507) = iprot#readFieldBegin in
        if _t11506 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11507 with 
          | 2 -> (if _t11506 = Protocol.T_STRING then
              _str11505#set_chatMid iprot#readString
            else
              iprot#skip _t11506)
          | 3 -> (if _t11506 = Protocol.T_I32 then
              _str11505#set_mediaType (GroupCallMediaType.of_i iprot#readI32)
            else
              iprot#skip _t11506)
          | _ -> iprot#skip _t11506);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11505

class acquireGroupCallRoute_result =
object (self)
  val mutable _success : groupCallRoute option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "acquireGroupCallRoute_result.success") | Some _x11508 -> _x11508
  method set_success _x11508 = _success <- Some _x11508
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "acquireGroupCallRoute_result.e") | Some _x11509 -> _x11509
  method set_e _x11509 = _e <- Some _x11509
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "acquireGroupCallRoute_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_acquireGroupCallRoute_result (iprot : Protocol.t) =
  let _str11512 = new acquireGroupCallRoute_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11513,_id11514) = iprot#readFieldBegin in
        if _t11513 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11514 with 
          | 0 -> (if _t11513 = Protocol.T_STRUCT then
              _str11512#set_success (read_groupCallRoute iprot)
            else
              iprot#skip _t11513)
          | 1 -> (if _t11513 = Protocol.T_STRUCT then
              _str11512#set_e (read_talkException iprot)
            else
              iprot#skip _t11513)
          | _ -> iprot#skip _t11513);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11512

class getUserMidsWhoAddedMe_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserMidsWhoAddedMe_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserMidsWhoAddedMe_args (iprot : Protocol.t) =
  let _str11517 = new getUserMidsWhoAddedMe_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11518,_id11519) = iprot#readFieldBegin in
        if _t11518 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11519 with 
          | _ -> iprot#skip _t11518);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11517

class getUserMidsWhoAddedMe_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserMidsWhoAddedMe_result.success") | Some _x11520 -> _x11520
  method set_success _x11520 = _success <- Some _x11520
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserMidsWhoAddedMe_result.e") | Some _x11521 -> _x11521
  method set_e _x11521 = _e <- Some _x11521
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserMidsWhoAddedMe_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11524 ->         oprot#writeString(_iter11524);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserMidsWhoAddedMe_result (iprot : Protocol.t) =
  let _str11525 = new getUserMidsWhoAddedMe_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11526,_id11527) = iprot#readFieldBegin in
        if _t11526 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11527 with 
          | 0 -> (if _t11526 = Protocol.T_LIST then
              _str11525#set_success 
                (let (_etype11531,_size11528) = iprot#readListBegin in
                  let _con11532 = (Array.to_list (Array.init _size11528 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11532)
            else
              iprot#skip _t11526)
          | 1 -> (if _t11526 = Protocol.T_STRUCT then
              _str11525#set_e (read_talkException iprot)
            else
              iprot#skip _t11526)
          | _ -> iprot#skip _t11526);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11525

class getIdentityCredential_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getIdentityCredential_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getIdentityCredential_args (iprot : Protocol.t) =
  let _str11535 = new getIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11536,_id11537) = iprot#readFieldBegin in
        if _t11536 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11537 with 
          | _ -> iprot#skip _t11536);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11535

class getIdentityCredential_result =
object (self)
  val mutable _success : identityCredential option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getIdentityCredential_result.success") | Some _x11538 -> _x11538
  method set_success _x11538 = _success <- Some _x11538
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getIdentityCredential_result.e") | Some _x11539 -> _x11539
  method set_e _x11539 = _e <- Some _x11539
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getIdentityCredential_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getIdentityCredential_result (iprot : Protocol.t) =
  let _str11542 = new getIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11543,_id11544) = iprot#readFieldBegin in
        if _t11543 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11544 with 
          | 0 -> (if _t11543 = Protocol.T_STRUCT then
              _str11542#set_success (read_identityCredential iprot)
            else
              iprot#skip _t11543)
          | 1 -> (if _t11543 = Protocol.T_STRUCT then
              _str11542#set_e (read_talkException iprot)
            else
              iprot#skip _t11543)
          | _ -> iprot#skip _t11543);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11542

class addOperationForChannel_args =
object (self)
  val mutable _opType : OpType.t option = None
  method get_opType = _opType
  method grab_opType = match _opType with None->raise (Field_empty "addOperationForChannel_args.opType") | Some _x11545 -> _x11545
  method set_opType _x11545 = _opType <- Some _x11545
  method unset_opType = _opType <- None
  method reset_opType = _opType <- None

  val mutable _param1 : string option = None
  method get_param1 = _param1
  method grab_param1 = match _param1 with None->raise (Field_empty "addOperationForChannel_args.param1") | Some _x11546 -> _x11546
  method set_param1 _x11546 = _param1 <- Some _x11546
  method unset_param1 = _param1 <- None
  method reset_param1 = _param1 <- None

  val mutable _param2 : string option = None
  method get_param2 = _param2
  method grab_param2 = match _param2 with None->raise (Field_empty "addOperationForChannel_args.param2") | Some _x11547 -> _x11547
  method set_param2 _x11547 = _param2 <- Some _x11547
  method unset_param2 = _param2 <- None
  method reset_param2 = _param2 <- None

  val mutable _param3 : string option = None
  method get_param3 = _param3
  method grab_param3 = match _param3 with None->raise (Field_empty "addOperationForChannel_args.param3") | Some _x11548 -> _x11548
  method set_param3 _x11548 = _param3 <- Some _x11548
  method unset_param3 = _param3 <- None
  method reset_param3 = _param3 <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addOperationForChannel_args";
    (match _opType with None -> () | Some _v -> 
      oprot#writeFieldBegin("opType",Protocol.T_I32,1);
      oprot#writeI32(OpType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _param1 with None -> () | Some _v -> 
      oprot#writeFieldBegin("param1",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _param2 with None -> () | Some _v -> 
      oprot#writeFieldBegin("param2",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _param3 with None -> () | Some _v -> 
      oprot#writeFieldBegin("param3",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addOperationForChannel_args (iprot : Protocol.t) =
  let _str11551 = new addOperationForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11552,_id11553) = iprot#readFieldBegin in
        if _t11552 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11553 with 
          | 1 -> (if _t11552 = Protocol.T_I32 then
              _str11551#set_opType (OpType.of_i iprot#readI32)
            else
              iprot#skip _t11552)
          | 2 -> (if _t11552 = Protocol.T_STRING then
              _str11551#set_param1 iprot#readString
            else
              iprot#skip _t11552)
          | 3 -> (if _t11552 = Protocol.T_STRING then
              _str11551#set_param2 iprot#readString
            else
              iprot#skip _t11552)
          | 4 -> (if _t11552 = Protocol.T_STRING then
              _str11551#set_param3 iprot#readString
            else
              iprot#skip _t11552)
          | _ -> iprot#skip _t11552);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11551

class addOperationForChannel_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "addOperationForChannel_result.e") | Some _x11554 -> _x11554
  method set_e _x11554 = _e <- Some _x11554
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addOperationForChannel_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addOperationForChannel_result (iprot : Protocol.t) =
  let _str11557 = new addOperationForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11558,_id11559) = iprot#readFieldBegin in
        if _t11558 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11559 with 
          | 1 -> (if _t11558 = Protocol.T_STRUCT then
              _str11557#set_e (read_talkException iprot)
            else
              iprot#skip _t11558)
          | _ -> iprot#skip _t11558);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11557

class getSimpleChannelContacts_args =
object (self)
  val mutable _ids : string list option = None
  method get_ids = _ids
  method grab_ids = match _ids with None->raise (Field_empty "getSimpleChannelContacts_args.ids") | Some _x11560 -> _x11560
  method set_ids _x11560 = _ids <- Some _x11560
  method unset_ids = _ids <- None
  method reset_ids = _ids <- None

  val mutable _statusSticonFallbackDisabled : bool option = None
  method get_statusSticonFallbackDisabled = _statusSticonFallbackDisabled
  method grab_statusSticonFallbackDisabled = match _statusSticonFallbackDisabled with None->raise (Field_empty "getSimpleChannelContacts_args.statusSticonFallbackDisabled") | Some _x11561 -> _x11561
  method set_statusSticonFallbackDisabled _x11561 = _statusSticonFallbackDisabled <- Some _x11561
  method unset_statusSticonFallbackDisabled = _statusSticonFallbackDisabled <- None
  method reset_statusSticonFallbackDisabled = _statusSticonFallbackDisabled <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSimpleChannelContacts_args";
    (match _ids with None -> () | Some _v -> 
      oprot#writeFieldBegin("ids",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter11564 ->         oprot#writeString(_iter11564);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _statusSticonFallbackDisabled with None -> () | Some _v -> 
      oprot#writeFieldBegin("statusSticonFallbackDisabled",Protocol.T_BOOL,2);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSimpleChannelContacts_args (iprot : Protocol.t) =
  let _str11565 = new getSimpleChannelContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11566,_id11567) = iprot#readFieldBegin in
        if _t11566 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11567 with 
          | 1 -> (if _t11566 = Protocol.T_LIST then
              _str11565#set_ids 
                (let (_etype11571,_size11568) = iprot#readListBegin in
                  let _con11572 = (Array.to_list (Array.init _size11568 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con11572)
            else
              iprot#skip _t11566)
          | 2 -> (if _t11566 = Protocol.T_BOOL then
              _str11565#set_statusSticonFallbackDisabled iprot#readBool
            else
              iprot#skip _t11566)
          | _ -> iprot#skip _t11566);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11565

class getSimpleChannelContacts_result =
object (self)
  val mutable _success : simpleChannelContact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSimpleChannelContacts_result.success") | Some _x11573 -> _x11573
  method set_success _x11573 = _success <- Some _x11573
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSimpleChannelContacts_result.e") | Some _x11574 -> _x11574
  method set_e _x11574 = _e <- Some _x11574
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSimpleChannelContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter11577 ->         _iter11577#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSimpleChannelContacts_result (iprot : Protocol.t) =
  let _str11578 = new getSimpleChannelContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11579,_id11580) = iprot#readFieldBegin in
        if _t11579 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11580 with 
          | 0 -> (if _t11579 = Protocol.T_LIST then
              _str11578#set_success 
                (let (_etype11584,_size11581) = iprot#readListBegin in
                  let _con11585 = (Array.to_list (Array.init _size11581 (fun _ -> (read_simpleChannelContact iprot)))) in
                    iprot#readListEnd; _con11585)
            else
              iprot#skip _t11579)
          | 1 -> (if _t11579 = Protocol.T_STRUCT then
              _str11578#set_e (read_talkException iprot)
            else
              iprot#skip _t11579)
          | _ -> iprot#skip _t11579);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11578

class getUserLastSentMessageTimeStamp_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "getUserLastSentMessageTimeStamp_args.mid") | Some _x11586 -> _x11586
  method set_mid _x11586 = _mid <- Some _x11586
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserLastSentMessageTimeStamp_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserLastSentMessageTimeStamp_args (iprot : Protocol.t) =
  let _str11589 = new getUserLastSentMessageTimeStamp_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11590,_id11591) = iprot#readFieldBegin in
        if _t11590 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11591 with 
          | 1 -> (if _t11590 = Protocol.T_STRING then
              _str11589#set_mid iprot#readString
            else
              iprot#skip _t11590)
          | _ -> iprot#skip _t11590);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11589

class getUserLastSentMessageTimeStamp_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserLastSentMessageTimeStamp_result.success") | Some _x11592 -> _x11592
  method set_success _x11592 = _success <- Some _x11592
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserLastSentMessageTimeStamp_result.e") | Some _x11593 -> _x11593
  method set_e _x11593 = _e <- Some _x11593
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserLastSentMessageTimeStamp_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserLastSentMessageTimeStamp_result (iprot : Protocol.t) =
  let _str11596 = new getUserLastSentMessageTimeStamp_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t11597,_id11598) = iprot#readFieldBegin in
        if _t11597 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11598 with 
          | 0 -> (if _t11597 = Protocol.T_I64 then
              _str11596#set_success iprot#readI64
            else
              iprot#skip _t11597)
          | 1 -> (if _t11597 = Protocol.T_STRUCT then
              _str11596#set_e (read_talkException iprot)
            else
              iprot#skip _t11597)
          | _ -> iprot#skip _t11597);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11596

class virtual iface =
object (self)
  method virtual getUserStatus : string option -> UserStatus.t
  method virtual updateProfileAttributeForChannel : ProfileAttribute.t option -> string option -> unit
  method virtual updateExtendedProfileAttribute : ExtendedProfileAttribute.t option -> extendedProfile option -> unit
  method virtual getAllSimpleChannelContacts : bool option -> simpleChannelContact list
  method virtual getUserIdentities : (RegistrationType.t,string) Hashtbl.t
  method virtual markPaidCallAd : string option -> string option -> bool option -> paidCallDialing
  method virtual isGroupMember : string option -> bool
  method virtual getPhoneInfoFromPhoneNumber : string option -> string option -> phoneInfoForChannel
  method virtual redeemPaidCallVoucher : string option -> string option -> paidCallRedeemResult
  method virtual getPreferredDisplayName : string list option -> (string,string) Hashtbl.t
  method virtual getContactsForChannel : string list option -> contact list
  method virtual getCallCreditProducts : PaymentType.t option -> PaymentPgType.t option -> string option -> string option -> coinProductItem list
  method virtual getCompactContacts : Int64.t option -> compactContact list
  method virtual notifyNotiCenterEvent : notiCenterEventData option -> unit
  method virtual isInContact : string option -> bool
  method virtual lookupGroupMembers : string option -> string list option -> simpleChannelContact list
  method virtual getRoomInformation : string option -> room
  method virtual getGroupCall : string option -> groupCall
  method virtual isAllowSecondaryDeviceLogin : bool
  method virtual getPrimaryClientForChannel : simpleChannelClient
  method virtual createRoomWithBuddy : Int32.t option -> string option -> string list option -> room
  method virtual getDisplayName : string option -> string
  method virtual getPaidCallMetadata : string option -> paidCallMetadataResult
  method virtual getMid : string
  method virtual getUserCountryForBilling : string option -> string option -> string
  method virtual getFavoriteGroupIdsForChannel : string list
  method virtual getPaidCallHistory : Int64.t option -> Int32.t option -> string option -> paidCallHistoryResult
  method virtual sendPinCodeOperation : string option -> unit
  method virtual inviteIntoGroupCall : string option -> string list option -> GroupCallMediaType.t option -> unit
  method virtual getFriendMids : string list
  method virtual getMetaProfile : metaProfile
  method virtual sendMessageForChannel : message option -> message
  method virtual activeBuddySubscriberCount : Int64.t
  method virtual getCallCreditPurchaseHistory : coinHistoryCondition option -> coinHistoryResult
  method virtual isRoomMember : string option -> bool
  method virtual sendSystemOAMessage : message option -> message
  method virtual acquirePaidCallRoute : PaidCallType.t option -> string option -> string option -> string option -> bool option -> string option -> string option -> paidCallResponse
  method virtual getGroupsForChannel : string list option -> group list
  method virtual getUserCreateTime : Int64.t
  method virtual registerChannelCP : string option -> string option -> string
  method virtual reserveCallCreditPurchase : coinPurchaseReservation option -> paymentReservationResult
  method virtual acquirePaidCallCurrencyExchangeRate : string option -> paidCallCurrencyExchangeRate list
  method virtual getRoomMemberMidsForAppPlatform : string option -> string list
  method virtual getPaidCallBalanceList : string option -> paidCallBalance list
  method virtual getPersonalInfos : (PersonalInfo.t,bool) Hashtbl.t option -> (PersonalInfo.t,string) Hashtbl.t
  method virtual getPrimaryClientsForChannel : string list option -> simpleChannelClient list
  method virtual addBuddyToContact : string option -> contactTransition
  method virtual getGroupMemberMidsForAppPlatform : string option -> string list
  method virtual getUserLanguage : string
  method virtual lookupPaidCall : string option -> string option -> string option -> paidCallResponse
  method virtual getExtendedProfile : extendedProfile
  method virtual getReverseCompactContacts : string list option -> (string,compactContact) Hashtbl.t
  method virtual getPaidCallAdStatus : paidCallAdResult
  method virtual findContactByUseridWithoutAbuseBlockForChannel : string option -> contact
  method virtual getGroupMemberMids : string option -> string list
  method virtual sendMessageWithoutRelationship : message option -> message
  method virtual displayBuddySubscriberCountInBulk : string list option -> (string,Int64.t) Hashtbl.t
  method virtual lookupRoomMembers : string option -> string list option -> simpleChannelContact list
  method virtual getFavoriteMidsForChannel : string list
  method virtual getAllContactIdsForChannel : string list
  method virtual displayBuddySubscriberCount : Int64.t
  method virtual getProfileForChannel : profile
  method virtual getUserTickets : string list option -> userTicketResponse list
  method virtual getOAFriendMids : string list
  method virtual searchPaidCallUserRate : string option -> string option -> paidCallUserRate list
  method virtual getJoinedGroupIdsForChannel : string list
  method virtual acquireGroupCallRoute : string option -> GroupCallMediaType.t option -> groupCallRoute
  method virtual getUserMidsWhoAddedMe : string list
  method virtual getIdentityCredential : identityCredential
  method virtual addOperationForChannel : OpType.t option -> string option -> string option -> string option -> unit
  method virtual getSimpleChannelContacts : string list option -> bool option -> simpleChannelContact list
  method virtual getUserLastSentMessageTimeStamp : string option -> Int64.t
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method getUserStatus mid = 
    self#send_getUserStatus mid;
    self#recv_getUserStatus
  method private send_getUserStatus mid = 
    oprot#writeMessageBegin ("getUserStatus", Protocol.CALL, seqid);
    let args = new getUserStatus_args in
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserStatus  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserStatus_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserStatus failed: unknown result")))
  method updateProfileAttributeForChannel profileAttribute value = 
    self#send_updateProfileAttributeForChannel profileAttribute value;
    self#recv_updateProfileAttributeForChannel
  method private send_updateProfileAttributeForChannel profileAttribute value = 
    oprot#writeMessageBegin ("updateProfileAttributeForChannel", Protocol.CALL, seqid);
    let args = new updateProfileAttributeForChannel_args in
      args#set_profileAttribute profileAttribute;
      args#set_value value;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateProfileAttributeForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateProfileAttributeForChannel_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateExtendedProfileAttribute attr extendedProfile = 
    self#send_updateExtendedProfileAttribute attr extendedProfile;
    self#recv_updateExtendedProfileAttribute
  method private send_updateExtendedProfileAttribute attr extendedProfile = 
    oprot#writeMessageBegin ("updateExtendedProfileAttribute", Protocol.CALL, seqid);
    let args = new updateExtendedProfileAttribute_args in
      args#set_attr attr;
      args#set_extendedProfile extendedProfile;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateExtendedProfileAttribute  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateExtendedProfileAttribute_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method getAllSimpleChannelContacts statusSticonFallbackDisabled = 
    self#send_getAllSimpleChannelContacts statusSticonFallbackDisabled;
    self#recv_getAllSimpleChannelContacts
  method private send_getAllSimpleChannelContacts statusSticonFallbackDisabled = 
    oprot#writeMessageBegin ("getAllSimpleChannelContacts", Protocol.CALL, seqid);
    let args = new getAllSimpleChannelContacts_args in
      args#set_statusSticonFallbackDisabled statusSticonFallbackDisabled;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getAllSimpleChannelContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getAllSimpleChannelContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getAllSimpleChannelContacts failed: unknown result")))
  method getUserIdentities  = 
    self#send_getUserIdentities;
    self#recv_getUserIdentities
  method private send_getUserIdentities  = 
    oprot#writeMessageBegin ("getUserIdentities", Protocol.CALL, seqid);
    let args = new getUserIdentities_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserIdentities  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserIdentities_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserIdentities failed: unknown result")))
  method markPaidCallAd dialedNumber language disableCallerId = 
    self#send_markPaidCallAd dialedNumber language disableCallerId;
    self#recv_markPaidCallAd
  method private send_markPaidCallAd dialedNumber language disableCallerId = 
    oprot#writeMessageBegin ("markPaidCallAd", Protocol.CALL, seqid);
    let args = new markPaidCallAd_args in
      args#set_dialedNumber dialedNumber;
      args#set_language language;
      args#set_disableCallerId disableCallerId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_markPaidCallAd  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_markPaidCallAd_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "markPaidCallAd failed: unknown result")))
  method isGroupMember groupId = 
    self#send_isGroupMember groupId;
    self#recv_isGroupMember
  method private send_isGroupMember groupId = 
    oprot#writeMessageBegin ("isGroupMember", Protocol.CALL, seqid);
    let args = new isGroupMember_args in
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_isGroupMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_isGroupMember_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "isGroupMember failed: unknown result")))
  method getPhoneInfoFromPhoneNumber region phoneNumber = 
    self#send_getPhoneInfoFromPhoneNumber region phoneNumber;
    self#recv_getPhoneInfoFromPhoneNumber
  method private send_getPhoneInfoFromPhoneNumber region phoneNumber = 
    oprot#writeMessageBegin ("getPhoneInfoFromPhoneNumber", Protocol.CALL, seqid);
    let args = new getPhoneInfoFromPhoneNumber_args in
      args#set_region region;
      args#set_phoneNumber phoneNumber;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPhoneInfoFromPhoneNumber  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPhoneInfoFromPhoneNumber_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPhoneInfoFromPhoneNumber failed: unknown result")))
  method redeemPaidCallVoucher serial language = 
    self#send_redeemPaidCallVoucher serial language;
    self#recv_redeemPaidCallVoucher
  method private send_redeemPaidCallVoucher serial language = 
    oprot#writeMessageBegin ("redeemPaidCallVoucher", Protocol.CALL, seqid);
    let args = new redeemPaidCallVoucher_args in
      args#set_serial serial;
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_redeemPaidCallVoucher  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_redeemPaidCallVoucher_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "redeemPaidCallVoucher failed: unknown result")))
  method getPreferredDisplayName mids = 
    self#send_getPreferredDisplayName mids;
    self#recv_getPreferredDisplayName
  method private send_getPreferredDisplayName mids = 
    oprot#writeMessageBegin ("getPreferredDisplayName", Protocol.CALL, seqid);
    let args = new getPreferredDisplayName_args in
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPreferredDisplayName  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPreferredDisplayName_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPreferredDisplayName failed: unknown result")))
  method getContactsForChannel ids = 
    self#send_getContactsForChannel ids;
    self#recv_getContactsForChannel
  method private send_getContactsForChannel ids = 
    oprot#writeMessageBegin ("getContactsForChannel", Protocol.CALL, seqid);
    let args = new getContactsForChannel_args in
      args#set_ids ids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getContactsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getContactsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getContactsForChannel failed: unknown result")))
  method getCallCreditProducts appStoreCode pgCode country language = 
    self#send_getCallCreditProducts appStoreCode pgCode country language;
    self#recv_getCallCreditProducts
  method private send_getCallCreditProducts appStoreCode pgCode country language = 
    oprot#writeMessageBegin ("getCallCreditProducts", Protocol.CALL, seqid);
    let args = new getCallCreditProducts_args in
      args#set_appStoreCode appStoreCode;
      args#set_pgCode pgCode;
      args#set_country country;
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCallCreditProducts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCallCreditProducts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCallCreditProducts failed: unknown result")))
  method getCompactContacts lastModifiedTimestamp = 
    self#send_getCompactContacts lastModifiedTimestamp;
    self#recv_getCompactContacts
  method private send_getCompactContacts lastModifiedTimestamp = 
    oprot#writeMessageBegin ("getCompactContacts", Protocol.CALL, seqid);
    let args = new getCompactContacts_args in
      args#set_lastModifiedTimestamp lastModifiedTimestamp;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCompactContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCompactContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCompactContacts failed: unknown result")))
  method notifyNotiCenterEvent event = 
    self#send_notifyNotiCenterEvent event;
    self#recv_notifyNotiCenterEvent
  method private send_notifyNotiCenterEvent event = 
    oprot#writeMessageBegin ("notifyNotiCenterEvent", Protocol.CALL, seqid);
    let args = new notifyNotiCenterEvent_args in
      args#set_event event;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyNotiCenterEvent  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyNotiCenterEvent_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method isInContact mid = 
    self#send_isInContact mid;
    self#recv_isInContact
  method private send_isInContact mid = 
    oprot#writeMessageBegin ("isInContact", Protocol.CALL, seqid);
    let args = new isInContact_args in
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_isInContact  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_isInContact_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "isInContact failed: unknown result")))
  method lookupGroupMembers groupId mids = 
    self#send_lookupGroupMembers groupId mids;
    self#recv_lookupGroupMembers
  method private send_lookupGroupMembers groupId mids = 
    oprot#writeMessageBegin ("lookupGroupMembers", Protocol.CALL, seqid);
    let args = new lookupGroupMembers_args in
      args#set_groupId groupId;
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_lookupGroupMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_lookupGroupMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "lookupGroupMembers failed: unknown result")))
  method getRoomInformation roomMid = 
    self#send_getRoomInformation roomMid;
    self#recv_getRoomInformation
  method private send_getRoomInformation roomMid = 
    oprot#writeMessageBegin ("getRoomInformation", Protocol.CALL, seqid);
    let args = new getRoomInformation_args in
      args#set_roomMid roomMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getRoomInformation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getRoomInformation_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getRoomInformation failed: unknown result")))
  method getGroupCall chatMid = 
    self#send_getGroupCall chatMid;
    self#recv_getGroupCall
  method private send_getGroupCall chatMid = 
    oprot#writeMessageBegin ("getGroupCall", Protocol.CALL, seqid);
    let args = new getGroupCall_args in
      args#set_chatMid chatMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupCall  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupCall_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupCall failed: unknown result")))
  method isAllowSecondaryDeviceLogin  = 
    self#send_isAllowSecondaryDeviceLogin;
    self#recv_isAllowSecondaryDeviceLogin
  method private send_isAllowSecondaryDeviceLogin  = 
    oprot#writeMessageBegin ("isAllowSecondaryDeviceLogin", Protocol.CALL, seqid);
    let args = new isAllowSecondaryDeviceLogin_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_isAllowSecondaryDeviceLogin  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_isAllowSecondaryDeviceLogin_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "isAllowSecondaryDeviceLogin failed: unknown result")))
  method getPrimaryClientForChannel  = 
    self#send_getPrimaryClientForChannel;
    self#recv_getPrimaryClientForChannel
  method private send_getPrimaryClientForChannel  = 
    oprot#writeMessageBegin ("getPrimaryClientForChannel", Protocol.CALL, seqid);
    let args = new getPrimaryClientForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPrimaryClientForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPrimaryClientForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPrimaryClientForChannel failed: unknown result")))
  method createRoomWithBuddy reqSeq buddyMid contactIds = 
    self#send_createRoomWithBuddy reqSeq buddyMid contactIds;
    self#recv_createRoomWithBuddy
  method private send_createRoomWithBuddy reqSeq buddyMid contactIds = 
    oprot#writeMessageBegin ("createRoomWithBuddy", Protocol.CALL, seqid);
    let args = new createRoomWithBuddy_args in
      args#set_reqSeq reqSeq;
      args#set_buddyMid buddyMid;
      args#set_contactIds contactIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createRoomWithBuddy  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createRoomWithBuddy_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createRoomWithBuddy failed: unknown result")))
  method getDisplayName mid = 
    self#send_getDisplayName mid;
    self#recv_getDisplayName
  method private send_getDisplayName mid = 
    oprot#writeMessageBegin ("getDisplayName", Protocol.CALL, seqid);
    let args = new getDisplayName_args in
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getDisplayName  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getDisplayName_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getDisplayName failed: unknown result")))
  method getPaidCallMetadata language = 
    self#send_getPaidCallMetadata language;
    self#recv_getPaidCallMetadata
  method private send_getPaidCallMetadata language = 
    oprot#writeMessageBegin ("getPaidCallMetadata", Protocol.CALL, seqid);
    let args = new getPaidCallMetadata_args in
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPaidCallMetadata  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPaidCallMetadata_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPaidCallMetadata failed: unknown result")))
  method getMid  = 
    self#send_getMid;
    self#recv_getMid
  method private send_getMid  = 
    oprot#writeMessageBegin ("getMid", Protocol.CALL, seqid);
    let args = new getMid_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMid failed: unknown result")))
  method getUserCountryForBilling country remoteIp = 
    self#send_getUserCountryForBilling country remoteIp;
    self#recv_getUserCountryForBilling
  method private send_getUserCountryForBilling country remoteIp = 
    oprot#writeMessageBegin ("getUserCountryForBilling", Protocol.CALL, seqid);
    let args = new getUserCountryForBilling_args in
      args#set_country country;
      args#set_remoteIp remoteIp;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserCountryForBilling  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserCountryForBilling_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserCountryForBilling failed: unknown result")))
  method getFavoriteGroupIdsForChannel  = 
    self#send_getFavoriteGroupIdsForChannel;
    self#recv_getFavoriteGroupIdsForChannel
  method private send_getFavoriteGroupIdsForChannel  = 
    oprot#writeMessageBegin ("getFavoriteGroupIdsForChannel", Protocol.CALL, seqid);
    let args = new getFavoriteGroupIdsForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getFavoriteGroupIdsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getFavoriteGroupIdsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getFavoriteGroupIdsForChannel failed: unknown result")))
  method getPaidCallHistory start size language = 
    self#send_getPaidCallHistory start size language;
    self#recv_getPaidCallHistory
  method private send_getPaidCallHistory start size language = 
    oprot#writeMessageBegin ("getPaidCallHistory", Protocol.CALL, seqid);
    let args = new getPaidCallHistory_args in
      args#set_start start;
      args#set_size size;
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPaidCallHistory  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPaidCallHistory_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPaidCallHistory failed: unknown result")))
  method sendPinCodeOperation verifier = 
    self#send_sendPinCodeOperation verifier;
    self#recv_sendPinCodeOperation
  method private send_sendPinCodeOperation verifier = 
    oprot#writeMessageBegin ("sendPinCodeOperation", Protocol.CALL, seqid);
    let args = new sendPinCodeOperation_args in
      args#set_verifier verifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendPinCodeOperation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendPinCodeOperation_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method inviteIntoGroupCall chatMid memberMids mediaType = 
    self#send_inviteIntoGroupCall chatMid memberMids mediaType;
    self#recv_inviteIntoGroupCall
  method private send_inviteIntoGroupCall chatMid memberMids mediaType = 
    oprot#writeMessageBegin ("inviteIntoGroupCall", Protocol.CALL, seqid);
    let args = new inviteIntoGroupCall_args in
      args#set_chatMid chatMid;
      args#set_memberMids memberMids;
      args#set_mediaType mediaType;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_inviteIntoGroupCall  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_inviteIntoGroupCall_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method getFriendMids  = 
    self#send_getFriendMids;
    self#recv_getFriendMids
  method private send_getFriendMids  = 
    oprot#writeMessageBegin ("getFriendMids", Protocol.CALL, seqid);
    let args = new getFriendMids_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getFriendMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getFriendMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getFriendMids failed: unknown result")))
  method getMetaProfile  = 
    self#send_getMetaProfile;
    self#recv_getMetaProfile
  method private send_getMetaProfile  = 
    oprot#writeMessageBegin ("getMetaProfile", Protocol.CALL, seqid);
    let args = new getMetaProfile_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMetaProfile  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMetaProfile_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMetaProfile failed: unknown result")))
  method sendMessageForChannel message = 
    self#send_sendMessageForChannel message;
    self#recv_sendMessageForChannel
  method private send_sendMessageForChannel message = 
    oprot#writeMessageBegin ("sendMessageForChannel", Protocol.CALL, seqid);
    let args = new sendMessageForChannel_args in
      args#set_message message;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendMessageForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendMessageForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendMessageForChannel failed: unknown result")))
  method activeBuddySubscriberCount  = 
    self#send_activeBuddySubscriberCount;
    self#recv_activeBuddySubscriberCount
  method private send_activeBuddySubscriberCount  = 
    oprot#writeMessageBegin ("activeBuddySubscriberCount", Protocol.CALL, seqid);
    let args = new activeBuddySubscriberCount_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_activeBuddySubscriberCount  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_activeBuddySubscriberCount_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "activeBuddySubscriberCount failed: unknown result")))
  method getCallCreditPurchaseHistory request = 
    self#send_getCallCreditPurchaseHistory request;
    self#recv_getCallCreditPurchaseHistory
  method private send_getCallCreditPurchaseHistory request = 
    oprot#writeMessageBegin ("getCallCreditPurchaseHistory", Protocol.CALL, seqid);
    let args = new getCallCreditPurchaseHistory_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCallCreditPurchaseHistory  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCallCreditPurchaseHistory_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCallCreditPurchaseHistory failed: unknown result")))
  method isRoomMember roomId = 
    self#send_isRoomMember roomId;
    self#recv_isRoomMember
  method private send_isRoomMember roomId = 
    oprot#writeMessageBegin ("isRoomMember", Protocol.CALL, seqid);
    let args = new isRoomMember_args in
      args#set_roomId roomId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_isRoomMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_isRoomMember_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "isRoomMember failed: unknown result")))
  method sendSystemOAMessage message = 
    self#send_sendSystemOAMessage message;
    self#recv_sendSystemOAMessage
  method private send_sendSystemOAMessage message = 
    oprot#writeMessageBegin ("sendSystemOAMessage", Protocol.CALL, seqid);
    let args = new sendSystemOAMessage_args in
      args#set_message message;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendSystemOAMessage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendSystemOAMessage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendSystemOAMessage failed: unknown result")))
  method acquirePaidCallRoute paidCallType dialedNumber language networkCode disableCallerId referer adSessionId = 
    self#send_acquirePaidCallRoute paidCallType dialedNumber language networkCode disableCallerId referer adSessionId;
    self#recv_acquirePaidCallRoute
  method private send_acquirePaidCallRoute paidCallType dialedNumber language networkCode disableCallerId referer adSessionId = 
    oprot#writeMessageBegin ("acquirePaidCallRoute", Protocol.CALL, seqid);
    let args = new acquirePaidCallRoute_args in
      args#set_paidCallType paidCallType;
      args#set_dialedNumber dialedNumber;
      args#set_language language;
      args#set_networkCode networkCode;
      args#set_disableCallerId disableCallerId;
      args#set_referer referer;
      args#set_adSessionId adSessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_acquirePaidCallRoute  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_acquirePaidCallRoute_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "acquirePaidCallRoute failed: unknown result")))
  method getGroupsForChannel groupIds = 
    self#send_getGroupsForChannel groupIds;
    self#recv_getGroupsForChannel
  method private send_getGroupsForChannel groupIds = 
    oprot#writeMessageBegin ("getGroupsForChannel", Protocol.CALL, seqid);
    let args = new getGroupsForChannel_args in
      args#set_groupIds groupIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupsForChannel failed: unknown result")))
  method getUserCreateTime  = 
    self#send_getUserCreateTime;
    self#recv_getUserCreateTime
  method private send_getUserCreateTime  = 
    oprot#writeMessageBegin ("getUserCreateTime", Protocol.CALL, seqid);
    let args = new getUserCreateTime_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserCreateTime  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserCreateTime_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserCreateTime failed: unknown result")))
  method registerChannelCP cpId registerPassword = 
    self#send_registerChannelCP cpId registerPassword;
    self#recv_registerChannelCP
  method private send_registerChannelCP cpId registerPassword = 
    oprot#writeMessageBegin ("registerChannelCP", Protocol.CALL, seqid);
    let args = new registerChannelCP_args in
      args#set_cpId cpId;
      args#set_registerPassword registerPassword;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerChannelCP  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerChannelCP_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerChannelCP failed: unknown result")))
  method reserveCallCreditPurchase request = 
    self#send_reserveCallCreditPurchase request;
    self#recv_reserveCallCreditPurchase
  method private send_reserveCallCreditPurchase request = 
    oprot#writeMessageBegin ("reserveCallCreditPurchase", Protocol.CALL, seqid);
    let args = new reserveCallCreditPurchase_args in
      args#set_request request;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_reserveCallCreditPurchase  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_reserveCallCreditPurchase_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "reserveCallCreditPurchase failed: unknown result")))
  method acquirePaidCallCurrencyExchangeRate language = 
    self#send_acquirePaidCallCurrencyExchangeRate language;
    self#recv_acquirePaidCallCurrencyExchangeRate
  method private send_acquirePaidCallCurrencyExchangeRate language = 
    oprot#writeMessageBegin ("acquirePaidCallCurrencyExchangeRate", Protocol.CALL, seqid);
    let args = new acquirePaidCallCurrencyExchangeRate_args in
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_acquirePaidCallCurrencyExchangeRate  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_acquirePaidCallCurrencyExchangeRate_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "acquirePaidCallCurrencyExchangeRate failed: unknown result")))
  method getRoomMemberMidsForAppPlatform roomId = 
    self#send_getRoomMemberMidsForAppPlatform roomId;
    self#recv_getRoomMemberMidsForAppPlatform
  method private send_getRoomMemberMidsForAppPlatform roomId = 
    oprot#writeMessageBegin ("getRoomMemberMidsForAppPlatform", Protocol.CALL, seqid);
    let args = new getRoomMemberMidsForAppPlatform_args in
      args#set_roomId roomId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getRoomMemberMidsForAppPlatform  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getRoomMemberMidsForAppPlatform_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getRoomMemberMidsForAppPlatform failed: unknown result")))
  method getPaidCallBalanceList language = 
    self#send_getPaidCallBalanceList language;
    self#recv_getPaidCallBalanceList
  method private send_getPaidCallBalanceList language = 
    oprot#writeMessageBegin ("getPaidCallBalanceList", Protocol.CALL, seqid);
    let args = new getPaidCallBalanceList_args in
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPaidCallBalanceList  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPaidCallBalanceList_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPaidCallBalanceList failed: unknown result")))
  method getPersonalInfos requiredPersonalInfos = 
    self#send_getPersonalInfos requiredPersonalInfos;
    self#recv_getPersonalInfos
  method private send_getPersonalInfos requiredPersonalInfos = 
    oprot#writeMessageBegin ("getPersonalInfos", Protocol.CALL, seqid);
    let args = new getPersonalInfos_args in
      args#set_requiredPersonalInfos requiredPersonalInfos;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPersonalInfos  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPersonalInfos_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPersonalInfos failed: unknown result")))
  method getPrimaryClientsForChannel userMids = 
    self#send_getPrimaryClientsForChannel userMids;
    self#recv_getPrimaryClientsForChannel
  method private send_getPrimaryClientsForChannel userMids = 
    oprot#writeMessageBegin ("getPrimaryClientsForChannel", Protocol.CALL, seqid);
    let args = new getPrimaryClientsForChannel_args in
      args#set_userMids userMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPrimaryClientsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPrimaryClientsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPrimaryClientsForChannel failed: unknown result")))
  method addBuddyToContact buddyMid = 
    self#send_addBuddyToContact buddyMid;
    self#recv_addBuddyToContact
  method private send_addBuddyToContact buddyMid = 
    oprot#writeMessageBegin ("addBuddyToContact", Protocol.CALL, seqid);
    let args = new addBuddyToContact_args in
      args#set_buddyMid buddyMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_addBuddyToContact  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_addBuddyToContact_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "addBuddyToContact failed: unknown result")))
  method getGroupMemberMidsForAppPlatform groupId = 
    self#send_getGroupMemberMidsForAppPlatform groupId;
    self#recv_getGroupMemberMidsForAppPlatform
  method private send_getGroupMemberMidsForAppPlatform groupId = 
    oprot#writeMessageBegin ("getGroupMemberMidsForAppPlatform", Protocol.CALL, seqid);
    let args = new getGroupMemberMidsForAppPlatform_args in
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupMemberMidsForAppPlatform  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupMemberMidsForAppPlatform_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupMemberMidsForAppPlatform failed: unknown result")))
  method getUserLanguage  = 
    self#send_getUserLanguage;
    self#recv_getUserLanguage
  method private send_getUserLanguage  = 
    oprot#writeMessageBegin ("getUserLanguage", Protocol.CALL, seqid);
    let args = new getUserLanguage_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserLanguage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserLanguage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserLanguage failed: unknown result")))
  method lookupPaidCall dialedNumber language referer = 
    self#send_lookupPaidCall dialedNumber language referer;
    self#recv_lookupPaidCall
  method private send_lookupPaidCall dialedNumber language referer = 
    oprot#writeMessageBegin ("lookupPaidCall", Protocol.CALL, seqid);
    let args = new lookupPaidCall_args in
      args#set_dialedNumber dialedNumber;
      args#set_language language;
      args#set_referer referer;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_lookupPaidCall  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_lookupPaidCall_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "lookupPaidCall failed: unknown result")))
  method getExtendedProfile  = 
    self#send_getExtendedProfile;
    self#recv_getExtendedProfile
  method private send_getExtendedProfile  = 
    oprot#writeMessageBegin ("getExtendedProfile", Protocol.CALL, seqid);
    let args = new getExtendedProfile_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getExtendedProfile  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getExtendedProfile_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getExtendedProfile failed: unknown result")))
  method getReverseCompactContacts ids = 
    self#send_getReverseCompactContacts ids;
    self#recv_getReverseCompactContacts
  method private send_getReverseCompactContacts ids = 
    oprot#writeMessageBegin ("getReverseCompactContacts", Protocol.CALL, seqid);
    let args = new getReverseCompactContacts_args in
      args#set_ids ids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getReverseCompactContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getReverseCompactContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getReverseCompactContacts failed: unknown result")))
  method getPaidCallAdStatus  = 
    self#send_getPaidCallAdStatus;
    self#recv_getPaidCallAdStatus
  method private send_getPaidCallAdStatus  = 
    oprot#writeMessageBegin ("getPaidCallAdStatus", Protocol.CALL, seqid);
    let args = new getPaidCallAdStatus_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPaidCallAdStatus  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPaidCallAdStatus_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPaidCallAdStatus failed: unknown result")))
  method findContactByUseridWithoutAbuseBlockForChannel userid = 
    self#send_findContactByUseridWithoutAbuseBlockForChannel userid;
    self#recv_findContactByUseridWithoutAbuseBlockForChannel
  method private send_findContactByUseridWithoutAbuseBlockForChannel userid = 
    oprot#writeMessageBegin ("findContactByUseridWithoutAbuseBlockForChannel", Protocol.CALL, seqid);
    let args = new findContactByUseridWithoutAbuseBlockForChannel_args in
      args#set_userid userid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findContactByUseridWithoutAbuseBlockForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findContactByUseridWithoutAbuseBlockForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findContactByUseridWithoutAbuseBlockForChannel failed: unknown result")))
  method getGroupMemberMids groupId = 
    self#send_getGroupMemberMids groupId;
    self#recv_getGroupMemberMids
  method private send_getGroupMemberMids groupId = 
    oprot#writeMessageBegin ("getGroupMemberMids", Protocol.CALL, seqid);
    let args = new getGroupMemberMids_args in
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupMemberMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupMemberMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupMemberMids failed: unknown result")))
  method sendMessageWithoutRelationship message = 
    self#send_sendMessageWithoutRelationship message;
    self#recv_sendMessageWithoutRelationship
  method private send_sendMessageWithoutRelationship message = 
    oprot#writeMessageBegin ("sendMessageWithoutRelationship", Protocol.CALL, seqid);
    let args = new sendMessageWithoutRelationship_args in
      args#set_message message;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendMessageWithoutRelationship  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendMessageWithoutRelationship_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendMessageWithoutRelationship failed: unknown result")))
  method displayBuddySubscriberCountInBulk mids = 
    self#send_displayBuddySubscriberCountInBulk mids;
    self#recv_displayBuddySubscriberCountInBulk
  method private send_displayBuddySubscriberCountInBulk mids = 
    oprot#writeMessageBegin ("displayBuddySubscriberCountInBulk", Protocol.CALL, seqid);
    let args = new displayBuddySubscriberCountInBulk_args in
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_displayBuddySubscriberCountInBulk  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_displayBuddySubscriberCountInBulk_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "displayBuddySubscriberCountInBulk failed: unknown result")))
  method lookupRoomMembers roomId mids = 
    self#send_lookupRoomMembers roomId mids;
    self#recv_lookupRoomMembers
  method private send_lookupRoomMembers roomId mids = 
    oprot#writeMessageBegin ("lookupRoomMembers", Protocol.CALL, seqid);
    let args = new lookupRoomMembers_args in
      args#set_roomId roomId;
      args#set_mids mids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_lookupRoomMembers  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_lookupRoomMembers_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "lookupRoomMembers failed: unknown result")))
  method getFavoriteMidsForChannel  = 
    self#send_getFavoriteMidsForChannel;
    self#recv_getFavoriteMidsForChannel
  method private send_getFavoriteMidsForChannel  = 
    oprot#writeMessageBegin ("getFavoriteMidsForChannel", Protocol.CALL, seqid);
    let args = new getFavoriteMidsForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getFavoriteMidsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getFavoriteMidsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getFavoriteMidsForChannel failed: unknown result")))
  method getAllContactIdsForChannel  = 
    self#send_getAllContactIdsForChannel;
    self#recv_getAllContactIdsForChannel
  method private send_getAllContactIdsForChannel  = 
    oprot#writeMessageBegin ("getAllContactIdsForChannel", Protocol.CALL, seqid);
    let args = new getAllContactIdsForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getAllContactIdsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getAllContactIdsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getAllContactIdsForChannel failed: unknown result")))
  method displayBuddySubscriberCount  = 
    self#send_displayBuddySubscriberCount;
    self#recv_displayBuddySubscriberCount
  method private send_displayBuddySubscriberCount  = 
    oprot#writeMessageBegin ("displayBuddySubscriberCount", Protocol.CALL, seqid);
    let args = new displayBuddySubscriberCount_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_displayBuddySubscriberCount  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_displayBuddySubscriberCount_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "displayBuddySubscriberCount failed: unknown result")))
  method getProfileForChannel  = 
    self#send_getProfileForChannel;
    self#recv_getProfileForChannel
  method private send_getProfileForChannel  = 
    oprot#writeMessageBegin ("getProfileForChannel", Protocol.CALL, seqid);
    let args = new getProfileForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProfileForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProfileForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProfileForChannel failed: unknown result")))
  method getUserTickets userMids = 
    self#send_getUserTickets userMids;
    self#recv_getUserTickets
  method private send_getUserTickets userMids = 
    oprot#writeMessageBegin ("getUserTickets", Protocol.CALL, seqid);
    let args = new getUserTickets_args in
      args#set_userMids userMids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserTickets  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserTickets_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserTickets failed: unknown result")))
  method getOAFriendMids  = 
    self#send_getOAFriendMids;
    self#recv_getOAFriendMids
  method private send_getOAFriendMids  = 
    oprot#writeMessageBegin ("getOAFriendMids", Protocol.CALL, seqid);
    let args = new getOAFriendMids_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getOAFriendMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getOAFriendMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getOAFriendMids failed: unknown result")))
  method searchPaidCallUserRate countryCode language = 
    self#send_searchPaidCallUserRate countryCode language;
    self#recv_searchPaidCallUserRate
  method private send_searchPaidCallUserRate countryCode language = 
    oprot#writeMessageBegin ("searchPaidCallUserRate", Protocol.CALL, seqid);
    let args = new searchPaidCallUserRate_args in
      args#set_countryCode countryCode;
      args#set_language language;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_searchPaidCallUserRate  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_searchPaidCallUserRate_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "searchPaidCallUserRate failed: unknown result")))
  method getJoinedGroupIdsForChannel  = 
    self#send_getJoinedGroupIdsForChannel;
    self#recv_getJoinedGroupIdsForChannel
  method private send_getJoinedGroupIdsForChannel  = 
    oprot#writeMessageBegin ("getJoinedGroupIdsForChannel", Protocol.CALL, seqid);
    let args = new getJoinedGroupIdsForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getJoinedGroupIdsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getJoinedGroupIdsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getJoinedGroupIdsForChannel failed: unknown result")))
  method acquireGroupCallRoute chatMid mediaType = 
    self#send_acquireGroupCallRoute chatMid mediaType;
    self#recv_acquireGroupCallRoute
  method private send_acquireGroupCallRoute chatMid mediaType = 
    oprot#writeMessageBegin ("acquireGroupCallRoute", Protocol.CALL, seqid);
    let args = new acquireGroupCallRoute_args in
      args#set_chatMid chatMid;
      args#set_mediaType mediaType;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_acquireGroupCallRoute  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_acquireGroupCallRoute_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "acquireGroupCallRoute failed: unknown result")))
  method getUserMidsWhoAddedMe  = 
    self#send_getUserMidsWhoAddedMe;
    self#recv_getUserMidsWhoAddedMe
  method private send_getUserMidsWhoAddedMe  = 
    oprot#writeMessageBegin ("getUserMidsWhoAddedMe", Protocol.CALL, seqid);
    let args = new getUserMidsWhoAddedMe_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserMidsWhoAddedMe  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserMidsWhoAddedMe_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserMidsWhoAddedMe failed: unknown result")))
  method getIdentityCredential  = 
    self#send_getIdentityCredential;
    self#recv_getIdentityCredential
  method private send_getIdentityCredential  = 
    oprot#writeMessageBegin ("getIdentityCredential", Protocol.CALL, seqid);
    let args = new getIdentityCredential_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getIdentityCredential_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getIdentityCredential failed: unknown result")))
  method addOperationForChannel opType param1 param2 param3 = 
    self#send_addOperationForChannel opType param1 param2 param3;
    self#recv_addOperationForChannel
  method private send_addOperationForChannel opType param1 param2 param3 = 
    oprot#writeMessageBegin ("addOperationForChannel", Protocol.CALL, seqid);
    let args = new addOperationForChannel_args in
      args#set_opType opType;
      args#set_param1 param1;
      args#set_param2 param2;
      args#set_param3 param3;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_addOperationForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_addOperationForChannel_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method getSimpleChannelContacts ids statusSticonFallbackDisabled = 
    self#send_getSimpleChannelContacts ids statusSticonFallbackDisabled;
    self#recv_getSimpleChannelContacts
  method private send_getSimpleChannelContacts ids statusSticonFallbackDisabled = 
    oprot#writeMessageBegin ("getSimpleChannelContacts", Protocol.CALL, seqid);
    let args = new getSimpleChannelContacts_args in
      args#set_ids ids;
      args#set_statusSticonFallbackDisabled statusSticonFallbackDisabled;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSimpleChannelContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSimpleChannelContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSimpleChannelContacts failed: unknown result")))
  method getUserLastSentMessageTimeStamp mid = 
    self#send_getUserLastSentMessageTimeStamp mid;
    self#recv_getUserLastSentMessageTimeStamp
  method private send_getUserLastSentMessageTimeStamp mid = 
    oprot#writeMessageBegin ("getUserLastSentMessageTimeStamp", Protocol.CALL, seqid);
    let args = new getUserLastSentMessageTimeStamp_args in
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserLastSentMessageTimeStamp  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserLastSentMessageTimeStamp_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserLastSentMessageTimeStamp failed: unknown result")))
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 72
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_getUserStatus (seqid, iprot, oprot) =
    let args = read_getUserStatus_args iprot in
      iprot#readMessageEnd;
      let result = new getUserStatus_result in
        (try
          result#set_success (handler#getUserStatus args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserStatus", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateProfileAttributeForChannel (seqid, iprot, oprot) =
    let args = read_updateProfileAttributeForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new updateProfileAttributeForChannel_result in
        (try
          (handler#updateProfileAttributeForChannel args#get_profileAttribute args#get_value);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateProfileAttributeForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateExtendedProfileAttribute (seqid, iprot, oprot) =
    let args = read_updateExtendedProfileAttribute_args iprot in
      iprot#readMessageEnd;
      let result = new updateExtendedProfileAttribute_result in
        (try
          (handler#updateExtendedProfileAttribute args#get_attr args#get_extendedProfile);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateExtendedProfileAttribute", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getAllSimpleChannelContacts (seqid, iprot, oprot) =
    let args = read_getAllSimpleChannelContacts_args iprot in
      iprot#readMessageEnd;
      let result = new getAllSimpleChannelContacts_result in
        (try
          result#set_success (handler#getAllSimpleChannelContacts args#get_statusSticonFallbackDisabled);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getAllSimpleChannelContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserIdentities (seqid, iprot, oprot) =
    let _ = read_getUserIdentities_args iprot in
      iprot#readMessageEnd;
      let result = new getUserIdentities_result in
        (try
          result#set_success (handler#getUserIdentities);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserIdentities", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_markPaidCallAd (seqid, iprot, oprot) =
    let args = read_markPaidCallAd_args iprot in
      iprot#readMessageEnd;
      let result = new markPaidCallAd_result in
        (try
          result#set_success (handler#markPaidCallAd args#get_dialedNumber args#get_language args#get_disableCallerId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("markPaidCallAd", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_isGroupMember (seqid, iprot, oprot) =
    let args = read_isGroupMember_args iprot in
      iprot#readMessageEnd;
      let result = new isGroupMember_result in
        (try
          result#set_success (handler#isGroupMember args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("isGroupMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPhoneInfoFromPhoneNumber (seqid, iprot, oprot) =
    let args = read_getPhoneInfoFromPhoneNumber_args iprot in
      iprot#readMessageEnd;
      let result = new getPhoneInfoFromPhoneNumber_result in
        (try
          result#set_success (handler#getPhoneInfoFromPhoneNumber args#get_region args#get_phoneNumber);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPhoneInfoFromPhoneNumber", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_redeemPaidCallVoucher (seqid, iprot, oprot) =
    let args = read_redeemPaidCallVoucher_args iprot in
      iprot#readMessageEnd;
      let result = new redeemPaidCallVoucher_result in
        (try
          result#set_success (handler#redeemPaidCallVoucher args#get_serial args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("redeemPaidCallVoucher", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPreferredDisplayName (seqid, iprot, oprot) =
    let args = read_getPreferredDisplayName_args iprot in
      iprot#readMessageEnd;
      let result = new getPreferredDisplayName_result in
        (try
          result#set_success (handler#getPreferredDisplayName args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPreferredDisplayName", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getContactsForChannel (seqid, iprot, oprot) =
    let args = read_getContactsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getContactsForChannel_result in
        (try
          result#set_success (handler#getContactsForChannel args#get_ids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getContactsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCallCreditProducts (seqid, iprot, oprot) =
    let args = read_getCallCreditProducts_args iprot in
      iprot#readMessageEnd;
      let result = new getCallCreditProducts_result in
        (try
          result#set_success (handler#getCallCreditProducts args#get_appStoreCode args#get_pgCode args#get_country args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCallCreditProducts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCompactContacts (seqid, iprot, oprot) =
    let args = read_getCompactContacts_args iprot in
      iprot#readMessageEnd;
      let result = new getCompactContacts_result in
        (try
          result#set_success (handler#getCompactContacts args#get_lastModifiedTimestamp);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCompactContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyNotiCenterEvent (seqid, iprot, oprot) =
    let args = read_notifyNotiCenterEvent_args iprot in
      iprot#readMessageEnd;
      let result = new notifyNotiCenterEvent_result in
        (try
          (handler#notifyNotiCenterEvent args#get_event);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyNotiCenterEvent", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_isInContact (seqid, iprot, oprot) =
    let args = read_isInContact_args iprot in
      iprot#readMessageEnd;
      let result = new isInContact_result in
        (try
          result#set_success (handler#isInContact args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("isInContact", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_lookupGroupMembers (seqid, iprot, oprot) =
    let args = read_lookupGroupMembers_args iprot in
      iprot#readMessageEnd;
      let result = new lookupGroupMembers_result in
        (try
          result#set_success (handler#lookupGroupMembers args#get_groupId args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("lookupGroupMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getRoomInformation (seqid, iprot, oprot) =
    let args = read_getRoomInformation_args iprot in
      iprot#readMessageEnd;
      let result = new getRoomInformation_result in
        (try
          result#set_success (handler#getRoomInformation args#get_roomMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getRoomInformation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupCall (seqid, iprot, oprot) =
    let args = read_getGroupCall_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupCall_result in
        (try
          result#set_success (handler#getGroupCall args#get_chatMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupCall", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_isAllowSecondaryDeviceLogin (seqid, iprot, oprot) =
    let _ = read_isAllowSecondaryDeviceLogin_args iprot in
      iprot#readMessageEnd;
      let result = new isAllowSecondaryDeviceLogin_result in
        (try
          result#set_success (handler#isAllowSecondaryDeviceLogin);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("isAllowSecondaryDeviceLogin", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPrimaryClientForChannel (seqid, iprot, oprot) =
    let _ = read_getPrimaryClientForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getPrimaryClientForChannel_result in
        (try
          result#set_success (handler#getPrimaryClientForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPrimaryClientForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createRoomWithBuddy (seqid, iprot, oprot) =
    let args = read_createRoomWithBuddy_args iprot in
      iprot#readMessageEnd;
      let result = new createRoomWithBuddy_result in
        (try
          result#set_success (handler#createRoomWithBuddy args#get_reqSeq args#get_buddyMid args#get_contactIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("createRoomWithBuddy", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getDisplayName (seqid, iprot, oprot) =
    let args = read_getDisplayName_args iprot in
      iprot#readMessageEnd;
      let result = new getDisplayName_result in
        (try
          result#set_success (handler#getDisplayName args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getDisplayName", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPaidCallMetadata (seqid, iprot, oprot) =
    let args = read_getPaidCallMetadata_args iprot in
      iprot#readMessageEnd;
      let result = new getPaidCallMetadata_result in
        (try
          result#set_success (handler#getPaidCallMetadata args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPaidCallMetadata", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMid (seqid, iprot, oprot) =
    let _ = read_getMid_args iprot in
      iprot#readMessageEnd;
      let result = new getMid_result in
        (try
          result#set_success (handler#getMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserCountryForBilling (seqid, iprot, oprot) =
    let args = read_getUserCountryForBilling_args iprot in
      iprot#readMessageEnd;
      let result = new getUserCountryForBilling_result in
        (try
          result#set_success (handler#getUserCountryForBilling args#get_country args#get_remoteIp);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserCountryForBilling", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getFavoriteGroupIdsForChannel (seqid, iprot, oprot) =
    let _ = read_getFavoriteGroupIdsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getFavoriteGroupIdsForChannel_result in
        (try
          result#set_success (handler#getFavoriteGroupIdsForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getFavoriteGroupIdsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPaidCallHistory (seqid, iprot, oprot) =
    let args = read_getPaidCallHistory_args iprot in
      iprot#readMessageEnd;
      let result = new getPaidCallHistory_result in
        (try
          result#set_success (handler#getPaidCallHistory args#get_start args#get_size args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPaidCallHistory", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendPinCodeOperation (seqid, iprot, oprot) =
    let args = read_sendPinCodeOperation_args iprot in
      iprot#readMessageEnd;
      let result = new sendPinCodeOperation_result in
        (try
          (handler#sendPinCodeOperation args#get_verifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendPinCodeOperation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_inviteIntoGroupCall (seqid, iprot, oprot) =
    let args = read_inviteIntoGroupCall_args iprot in
      iprot#readMessageEnd;
      let result = new inviteIntoGroupCall_result in
        (try
          (handler#inviteIntoGroupCall args#get_chatMid args#get_memberMids args#get_mediaType);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("inviteIntoGroupCall", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getFriendMids (seqid, iprot, oprot) =
    let _ = read_getFriendMids_args iprot in
      iprot#readMessageEnd;
      let result = new getFriendMids_result in
        (try
          result#set_success (handler#getFriendMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getFriendMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMetaProfile (seqid, iprot, oprot) =
    let _ = read_getMetaProfile_args iprot in
      iprot#readMessageEnd;
      let result = new getMetaProfile_result in
        (try
          result#set_success (handler#getMetaProfile);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMetaProfile", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendMessageForChannel (seqid, iprot, oprot) =
    let args = read_sendMessageForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new sendMessageForChannel_result in
        (try
          result#set_success (handler#sendMessageForChannel args#get_message);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendMessageForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_activeBuddySubscriberCount (seqid, iprot, oprot) =
    let _ = read_activeBuddySubscriberCount_args iprot in
      iprot#readMessageEnd;
      let result = new activeBuddySubscriberCount_result in
        (try
          result#set_success (handler#activeBuddySubscriberCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("activeBuddySubscriberCount", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCallCreditPurchaseHistory (seqid, iprot, oprot) =
    let args = read_getCallCreditPurchaseHistory_args iprot in
      iprot#readMessageEnd;
      let result = new getCallCreditPurchaseHistory_result in
        (try
          result#set_success (handler#getCallCreditPurchaseHistory args#get_request);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCallCreditPurchaseHistory", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_isRoomMember (seqid, iprot, oprot) =
    let args = read_isRoomMember_args iprot in
      iprot#readMessageEnd;
      let result = new isRoomMember_result in
        (try
          result#set_success (handler#isRoomMember args#get_roomId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("isRoomMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendSystemOAMessage (seqid, iprot, oprot) =
    let args = read_sendSystemOAMessage_args iprot in
      iprot#readMessageEnd;
      let result = new sendSystemOAMessage_result in
        (try
          result#set_success (handler#sendSystemOAMessage args#get_message);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendSystemOAMessage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_acquirePaidCallRoute (seqid, iprot, oprot) =
    let args = read_acquirePaidCallRoute_args iprot in
      iprot#readMessageEnd;
      let result = new acquirePaidCallRoute_result in
        (try
          result#set_success (handler#acquirePaidCallRoute args#get_paidCallType args#get_dialedNumber args#get_language args#get_networkCode args#get_disableCallerId args#get_referer args#get_adSessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("acquirePaidCallRoute", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupsForChannel (seqid, iprot, oprot) =
    let args = read_getGroupsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupsForChannel_result in
        (try
          result#set_success (handler#getGroupsForChannel args#get_groupIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserCreateTime (seqid, iprot, oprot) =
    let _ = read_getUserCreateTime_args iprot in
      iprot#readMessageEnd;
      let result = new getUserCreateTime_result in
        (try
          result#set_success (handler#getUserCreateTime);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserCreateTime", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerChannelCP (seqid, iprot, oprot) =
    let args = read_registerChannelCP_args iprot in
      iprot#readMessageEnd;
      let result = new registerChannelCP_result in
        (try
          result#set_success (handler#registerChannelCP args#get_cpId args#get_registerPassword);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerChannelCP", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_reserveCallCreditPurchase (seqid, iprot, oprot) =
    let args = read_reserveCallCreditPurchase_args iprot in
      iprot#readMessageEnd;
      let result = new reserveCallCreditPurchase_result in
        (try
          result#set_success (handler#reserveCallCreditPurchase args#get_request);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("reserveCallCreditPurchase", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_acquirePaidCallCurrencyExchangeRate (seqid, iprot, oprot) =
    let args = read_acquirePaidCallCurrencyExchangeRate_args iprot in
      iprot#readMessageEnd;
      let result = new acquirePaidCallCurrencyExchangeRate_result in
        (try
          result#set_success (handler#acquirePaidCallCurrencyExchangeRate args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("acquirePaidCallCurrencyExchangeRate", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getRoomMemberMidsForAppPlatform (seqid, iprot, oprot) =
    let args = read_getRoomMemberMidsForAppPlatform_args iprot in
      iprot#readMessageEnd;
      let result = new getRoomMemberMidsForAppPlatform_result in
        (try
          result#set_success (handler#getRoomMemberMidsForAppPlatform args#get_roomId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getRoomMemberMidsForAppPlatform", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPaidCallBalanceList (seqid, iprot, oprot) =
    let args = read_getPaidCallBalanceList_args iprot in
      iprot#readMessageEnd;
      let result = new getPaidCallBalanceList_result in
        (try
          result#set_success (handler#getPaidCallBalanceList args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPaidCallBalanceList", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPersonalInfos (seqid, iprot, oprot) =
    let args = read_getPersonalInfos_args iprot in
      iprot#readMessageEnd;
      let result = new getPersonalInfos_result in
        (try
          result#set_success (handler#getPersonalInfos args#get_requiredPersonalInfos);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPersonalInfos", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPrimaryClientsForChannel (seqid, iprot, oprot) =
    let args = read_getPrimaryClientsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getPrimaryClientsForChannel_result in
        (try
          result#set_success (handler#getPrimaryClientsForChannel args#get_userMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPrimaryClientsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_addBuddyToContact (seqid, iprot, oprot) =
    let args = read_addBuddyToContact_args iprot in
      iprot#readMessageEnd;
      let result = new addBuddyToContact_result in
        (try
          result#set_success (handler#addBuddyToContact args#get_buddyMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("addBuddyToContact", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupMemberMidsForAppPlatform (seqid, iprot, oprot) =
    let args = read_getGroupMemberMidsForAppPlatform_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupMemberMidsForAppPlatform_result in
        (try
          result#set_success (handler#getGroupMemberMidsForAppPlatform args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupMemberMidsForAppPlatform", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserLanguage (seqid, iprot, oprot) =
    let _ = read_getUserLanguage_args iprot in
      iprot#readMessageEnd;
      let result = new getUserLanguage_result in
        (try
          result#set_success (handler#getUserLanguage);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserLanguage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_lookupPaidCall (seqid, iprot, oprot) =
    let args = read_lookupPaidCall_args iprot in
      iprot#readMessageEnd;
      let result = new lookupPaidCall_result in
        (try
          result#set_success (handler#lookupPaidCall args#get_dialedNumber args#get_language args#get_referer);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("lookupPaidCall", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getExtendedProfile (seqid, iprot, oprot) =
    let _ = read_getExtendedProfile_args iprot in
      iprot#readMessageEnd;
      let result = new getExtendedProfile_result in
        (try
          result#set_success (handler#getExtendedProfile);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getExtendedProfile", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getReverseCompactContacts (seqid, iprot, oprot) =
    let args = read_getReverseCompactContacts_args iprot in
      iprot#readMessageEnd;
      let result = new getReverseCompactContacts_result in
        (try
          result#set_success (handler#getReverseCompactContacts args#get_ids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getReverseCompactContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPaidCallAdStatus (seqid, iprot, oprot) =
    let _ = read_getPaidCallAdStatus_args iprot in
      iprot#readMessageEnd;
      let result = new getPaidCallAdStatus_result in
        (try
          result#set_success (handler#getPaidCallAdStatus);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPaidCallAdStatus", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findContactByUseridWithoutAbuseBlockForChannel (seqid, iprot, oprot) =
    let args = read_findContactByUseridWithoutAbuseBlockForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new findContactByUseridWithoutAbuseBlockForChannel_result in
        (try
          result#set_success (handler#findContactByUseridWithoutAbuseBlockForChannel args#get_userid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findContactByUseridWithoutAbuseBlockForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupMemberMids (seqid, iprot, oprot) =
    let args = read_getGroupMemberMids_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupMemberMids_result in
        (try
          result#set_success (handler#getGroupMemberMids args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupMemberMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendMessageWithoutRelationship (seqid, iprot, oprot) =
    let args = read_sendMessageWithoutRelationship_args iprot in
      iprot#readMessageEnd;
      let result = new sendMessageWithoutRelationship_result in
        (try
          result#set_success (handler#sendMessageWithoutRelationship args#get_message);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendMessageWithoutRelationship", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_displayBuddySubscriberCountInBulk (seqid, iprot, oprot) =
    let args = read_displayBuddySubscriberCountInBulk_args iprot in
      iprot#readMessageEnd;
      let result = new displayBuddySubscriberCountInBulk_result in
        (try
          result#set_success (handler#displayBuddySubscriberCountInBulk args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("displayBuddySubscriberCountInBulk", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_lookupRoomMembers (seqid, iprot, oprot) =
    let args = read_lookupRoomMembers_args iprot in
      iprot#readMessageEnd;
      let result = new lookupRoomMembers_result in
        (try
          result#set_success (handler#lookupRoomMembers args#get_roomId args#get_mids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("lookupRoomMembers", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getFavoriteMidsForChannel (seqid, iprot, oprot) =
    let _ = read_getFavoriteMidsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getFavoriteMidsForChannel_result in
        (try
          result#set_success (handler#getFavoriteMidsForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getFavoriteMidsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getAllContactIdsForChannel (seqid, iprot, oprot) =
    let _ = read_getAllContactIdsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getAllContactIdsForChannel_result in
        (try
          result#set_success (handler#getAllContactIdsForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getAllContactIdsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_displayBuddySubscriberCount (seqid, iprot, oprot) =
    let _ = read_displayBuddySubscriberCount_args iprot in
      iprot#readMessageEnd;
      let result = new displayBuddySubscriberCount_result in
        (try
          result#set_success (handler#displayBuddySubscriberCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("displayBuddySubscriberCount", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProfileForChannel (seqid, iprot, oprot) =
    let _ = read_getProfileForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getProfileForChannel_result in
        (try
          result#set_success (handler#getProfileForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getProfileForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserTickets (seqid, iprot, oprot) =
    let args = read_getUserTickets_args iprot in
      iprot#readMessageEnd;
      let result = new getUserTickets_result in
        (try
          result#set_success (handler#getUserTickets args#get_userMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserTickets", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getOAFriendMids (seqid, iprot, oprot) =
    let _ = read_getOAFriendMids_args iprot in
      iprot#readMessageEnd;
      let result = new getOAFriendMids_result in
        (try
          result#set_success (handler#getOAFriendMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getOAFriendMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_searchPaidCallUserRate (seqid, iprot, oprot) =
    let args = read_searchPaidCallUserRate_args iprot in
      iprot#readMessageEnd;
      let result = new searchPaidCallUserRate_result in
        (try
          result#set_success (handler#searchPaidCallUserRate args#get_countryCode args#get_language);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("searchPaidCallUserRate", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getJoinedGroupIdsForChannel (seqid, iprot, oprot) =
    let _ = read_getJoinedGroupIdsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getJoinedGroupIdsForChannel_result in
        (try
          result#set_success (handler#getJoinedGroupIdsForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getJoinedGroupIdsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_acquireGroupCallRoute (seqid, iprot, oprot) =
    let args = read_acquireGroupCallRoute_args iprot in
      iprot#readMessageEnd;
      let result = new acquireGroupCallRoute_result in
        (try
          result#set_success (handler#acquireGroupCallRoute args#get_chatMid args#get_mediaType);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("acquireGroupCallRoute", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserMidsWhoAddedMe (seqid, iprot, oprot) =
    let _ = read_getUserMidsWhoAddedMe_args iprot in
      iprot#readMessageEnd;
      let result = new getUserMidsWhoAddedMe_result in
        (try
          result#set_success (handler#getUserMidsWhoAddedMe);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserMidsWhoAddedMe", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getIdentityCredential (seqid, iprot, oprot) =
    let _ = read_getIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new getIdentityCredential_result in
        (try
          result#set_success (handler#getIdentityCredential);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_addOperationForChannel (seqid, iprot, oprot) =
    let args = read_addOperationForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new addOperationForChannel_result in
        (try
          (handler#addOperationForChannel args#get_opType args#get_param1 args#get_param2 args#get_param3);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("addOperationForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSimpleChannelContacts (seqid, iprot, oprot) =
    let args = read_getSimpleChannelContacts_args iprot in
      iprot#readMessageEnd;
      let result = new getSimpleChannelContacts_result in
        (try
          result#set_success (handler#getSimpleChannelContacts args#get_ids args#get_statusSticonFallbackDisabled);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSimpleChannelContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserLastSentMessageTimeStamp (seqid, iprot, oprot) =
    let args = read_getUserLastSentMessageTimeStamp_args iprot in
      iprot#readMessageEnd;
      let result = new getUserLastSentMessageTimeStamp_result in
        (try
          result#set_success (handler#getUserLastSentMessageTimeStamp args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserLastSentMessageTimeStamp", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "getUserStatus" self#process_getUserStatus;
    Hashtbl.add processMap "updateProfileAttributeForChannel" self#process_updateProfileAttributeForChannel;
    Hashtbl.add processMap "updateExtendedProfileAttribute" self#process_updateExtendedProfileAttribute;
    Hashtbl.add processMap "getAllSimpleChannelContacts" self#process_getAllSimpleChannelContacts;
    Hashtbl.add processMap "getUserIdentities" self#process_getUserIdentities;
    Hashtbl.add processMap "markPaidCallAd" self#process_markPaidCallAd;
    Hashtbl.add processMap "isGroupMember" self#process_isGroupMember;
    Hashtbl.add processMap "getPhoneInfoFromPhoneNumber" self#process_getPhoneInfoFromPhoneNumber;
    Hashtbl.add processMap "redeemPaidCallVoucher" self#process_redeemPaidCallVoucher;
    Hashtbl.add processMap "getPreferredDisplayName" self#process_getPreferredDisplayName;
    Hashtbl.add processMap "getContactsForChannel" self#process_getContactsForChannel;
    Hashtbl.add processMap "getCallCreditProducts" self#process_getCallCreditProducts;
    Hashtbl.add processMap "getCompactContacts" self#process_getCompactContacts;
    Hashtbl.add processMap "notifyNotiCenterEvent" self#process_notifyNotiCenterEvent;
    Hashtbl.add processMap "isInContact" self#process_isInContact;
    Hashtbl.add processMap "lookupGroupMembers" self#process_lookupGroupMembers;
    Hashtbl.add processMap "getRoomInformation" self#process_getRoomInformation;
    Hashtbl.add processMap "getGroupCall" self#process_getGroupCall;
    Hashtbl.add processMap "isAllowSecondaryDeviceLogin" self#process_isAllowSecondaryDeviceLogin;
    Hashtbl.add processMap "getPrimaryClientForChannel" self#process_getPrimaryClientForChannel;
    Hashtbl.add processMap "createRoomWithBuddy" self#process_createRoomWithBuddy;
    Hashtbl.add processMap "getDisplayName" self#process_getDisplayName;
    Hashtbl.add processMap "getPaidCallMetadata" self#process_getPaidCallMetadata;
    Hashtbl.add processMap "getMid" self#process_getMid;
    Hashtbl.add processMap "getUserCountryForBilling" self#process_getUserCountryForBilling;
    Hashtbl.add processMap "getFavoriteGroupIdsForChannel" self#process_getFavoriteGroupIdsForChannel;
    Hashtbl.add processMap "getPaidCallHistory" self#process_getPaidCallHistory;
    Hashtbl.add processMap "sendPinCodeOperation" self#process_sendPinCodeOperation;
    Hashtbl.add processMap "inviteIntoGroupCall" self#process_inviteIntoGroupCall;
    Hashtbl.add processMap "getFriendMids" self#process_getFriendMids;
    Hashtbl.add processMap "getMetaProfile" self#process_getMetaProfile;
    Hashtbl.add processMap "sendMessageForChannel" self#process_sendMessageForChannel;
    Hashtbl.add processMap "activeBuddySubscriberCount" self#process_activeBuddySubscriberCount;
    Hashtbl.add processMap "getCallCreditPurchaseHistory" self#process_getCallCreditPurchaseHistory;
    Hashtbl.add processMap "isRoomMember" self#process_isRoomMember;
    Hashtbl.add processMap "sendSystemOAMessage" self#process_sendSystemOAMessage;
    Hashtbl.add processMap "acquirePaidCallRoute" self#process_acquirePaidCallRoute;
    Hashtbl.add processMap "getGroupsForChannel" self#process_getGroupsForChannel;
    Hashtbl.add processMap "getUserCreateTime" self#process_getUserCreateTime;
    Hashtbl.add processMap "registerChannelCP" self#process_registerChannelCP;
    Hashtbl.add processMap "reserveCallCreditPurchase" self#process_reserveCallCreditPurchase;
    Hashtbl.add processMap "acquirePaidCallCurrencyExchangeRate" self#process_acquirePaidCallCurrencyExchangeRate;
    Hashtbl.add processMap "getRoomMemberMidsForAppPlatform" self#process_getRoomMemberMidsForAppPlatform;
    Hashtbl.add processMap "getPaidCallBalanceList" self#process_getPaidCallBalanceList;
    Hashtbl.add processMap "getPersonalInfos" self#process_getPersonalInfos;
    Hashtbl.add processMap "getPrimaryClientsForChannel" self#process_getPrimaryClientsForChannel;
    Hashtbl.add processMap "addBuddyToContact" self#process_addBuddyToContact;
    Hashtbl.add processMap "getGroupMemberMidsForAppPlatform" self#process_getGroupMemberMidsForAppPlatform;
    Hashtbl.add processMap "getUserLanguage" self#process_getUserLanguage;
    Hashtbl.add processMap "lookupPaidCall" self#process_lookupPaidCall;
    Hashtbl.add processMap "getExtendedProfile" self#process_getExtendedProfile;
    Hashtbl.add processMap "getReverseCompactContacts" self#process_getReverseCompactContacts;
    Hashtbl.add processMap "getPaidCallAdStatus" self#process_getPaidCallAdStatus;
    Hashtbl.add processMap "findContactByUseridWithoutAbuseBlockForChannel" self#process_findContactByUseridWithoutAbuseBlockForChannel;
    Hashtbl.add processMap "getGroupMemberMids" self#process_getGroupMemberMids;
    Hashtbl.add processMap "sendMessageWithoutRelationship" self#process_sendMessageWithoutRelationship;
    Hashtbl.add processMap "displayBuddySubscriberCountInBulk" self#process_displayBuddySubscriberCountInBulk;
    Hashtbl.add processMap "lookupRoomMembers" self#process_lookupRoomMembers;
    Hashtbl.add processMap "getFavoriteMidsForChannel" self#process_getFavoriteMidsForChannel;
    Hashtbl.add processMap "getAllContactIdsForChannel" self#process_getAllContactIdsForChannel;
    Hashtbl.add processMap "displayBuddySubscriberCount" self#process_displayBuddySubscriberCount;
    Hashtbl.add processMap "getProfileForChannel" self#process_getProfileForChannel;
    Hashtbl.add processMap "getUserTickets" self#process_getUserTickets;
    Hashtbl.add processMap "getOAFriendMids" self#process_getOAFriendMids;
    Hashtbl.add processMap "searchPaidCallUserRate" self#process_searchPaidCallUserRate;
    Hashtbl.add processMap "getJoinedGroupIdsForChannel" self#process_getJoinedGroupIdsForChannel;
    Hashtbl.add processMap "acquireGroupCallRoute" self#process_acquireGroupCallRoute;
    Hashtbl.add processMap "getUserMidsWhoAddedMe" self#process_getUserMidsWhoAddedMe;
    Hashtbl.add processMap "getIdentityCredential" self#process_getIdentityCredential;
    Hashtbl.add processMap "addOperationForChannel" self#process_addOperationForChannel;
    Hashtbl.add processMap "getSimpleChannelContacts" self#process_getSimpleChannelContacts;
    Hashtbl.add processMap "getUserLastSentMessageTimeStamp" self#process_getUserLastSentMessageTimeStamp;
end

