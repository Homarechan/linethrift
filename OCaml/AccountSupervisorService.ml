(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class getRSAKey_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRSAKey_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRSAKey_args (iprot : Protocol.t) =
  let _str4591 = new getRSAKey_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4592,_id4593) = iprot#readFieldBegin in
        if _t4592 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4593 with 
          | _ -> iprot#skip _t4592);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4591

class getRSAKey_result =
object (self)
  val mutable _success : rSAKey option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getRSAKey_result.success") | Some _x4594 -> _x4594
  method set_success _x4594 = _success <- Some _x4594
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getRSAKey_result.e") | Some _x4595 -> _x4595
  method set_e _x4595 = _e <- Some _x4595
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRSAKey_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRSAKey_result (iprot : Protocol.t) =
  let _str4598 = new getRSAKey_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4599,_id4600) = iprot#readFieldBegin in
        if _t4599 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4600 with 
          | 0 -> (if _t4599 = Protocol.T_STRUCT then
              _str4598#set_success (read_rSAKey iprot)
            else
              iprot#skip _t4599)
          | 1 -> (if _t4599 = Protocol.T_STRUCT then
              _str4598#set_e (read_talkException iprot)
            else
              iprot#skip _t4599)
          | _ -> iprot#skip _t4599);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4598

class notifyEmailConfirmationResult_args =
object (self)
  val mutable _parameterMap : (string,string) Hashtbl.t option = None
  method get_parameterMap = _parameterMap
  method grab_parameterMap = match _parameterMap with None->raise (Field_empty "notifyEmailConfirmationResult_args.parameterMap") | Some _x4601 -> _x4601
  method set_parameterMap _x4601 = _parameterMap <- Some _x4601
  method unset_parameterMap = _parameterMap <- None
  method reset_parameterMap = _parameterMap <- None

  method copy =
      let _new = Oo.copy self in
      if _parameterMap <> None then
        _new#set_parameterMap (Hashtbl.copy self#grab_parameterMap);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyEmailConfirmationResult_args";
    (match _parameterMap with None -> () | Some _v -> 
      oprot#writeFieldBegin("parameterMap",Protocol.T_MAP,2);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter4604 -> fun _viter4605 -> 
        oprot#writeString(_kiter4604);
        oprot#writeString(_viter4605);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyEmailConfirmationResult_args (iprot : Protocol.t) =
  let _str4606 = new notifyEmailConfirmationResult_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4607,_id4608) = iprot#readFieldBegin in
        if _t4607 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4608 with 
          | 2 -> (if _t4607 = Protocol.T_MAP then
              _str4606#set_parameterMap 
                (let (_ktype4610,_vtype4611,_size4609) = iprot#readMapBegin in
                let _con4613 = Hashtbl.create _size4609 in
                  for i = 1 to _size4609 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con4613 _k _v
                  done; iprot#readMapEnd; _con4613)
            else
              iprot#skip _t4607)
          | _ -> iprot#skip _t4607);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4606

class notifyEmailConfirmationResult_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyEmailConfirmationResult_result.e") | Some _x4614 -> _x4614
  method set_e _x4614 = _e <- Some _x4614
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyEmailConfirmationResult_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyEmailConfirmationResult_result (iprot : Protocol.t) =
  let _str4617 = new notifyEmailConfirmationResult_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4618,_id4619) = iprot#readFieldBegin in
        if _t4618 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4619 with 
          | 1 -> (if _t4618 = Protocol.T_STRUCT then
              _str4617#set_e (read_talkException iprot)
            else
              iprot#skip _t4618)
          | _ -> iprot#skip _t4618);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4617

class registerVirtualAccount_args =
object (self)
  val mutable _locale : string option = None
  method get_locale = _locale
  method grab_locale = match _locale with None->raise (Field_empty "registerVirtualAccount_args.locale") | Some _x4620 -> _x4620
  method set_locale _x4620 = _locale <- Some _x4620
  method unset_locale = _locale <- None
  method reset_locale = _locale <- None

  val mutable _encryptedVirtualUserId : string option = None
  method get_encryptedVirtualUserId = _encryptedVirtualUserId
  method grab_encryptedVirtualUserId = match _encryptedVirtualUserId with None->raise (Field_empty "registerVirtualAccount_args.encryptedVirtualUserId") | Some _x4621 -> _x4621
  method set_encryptedVirtualUserId _x4621 = _encryptedVirtualUserId <- Some _x4621
  method unset_encryptedVirtualUserId = _encryptedVirtualUserId <- None
  method reset_encryptedVirtualUserId = _encryptedVirtualUserId <- None

  val mutable _encryptedPassword : string option = None
  method get_encryptedPassword = _encryptedPassword
  method grab_encryptedPassword = match _encryptedPassword with None->raise (Field_empty "registerVirtualAccount_args.encryptedPassword") | Some _x4622 -> _x4622
  method set_encryptedPassword _x4622 = _encryptedPassword <- Some _x4622
  method unset_encryptedPassword = _encryptedPassword <- None
  method reset_encryptedPassword = _encryptedPassword <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerVirtualAccount_args";
    (match _locale with None -> () | Some _v -> 
      oprot#writeFieldBegin("locale",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _encryptedVirtualUserId with None -> () | Some _v -> 
      oprot#writeFieldBegin("encryptedVirtualUserId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _encryptedPassword with None -> () | Some _v -> 
      oprot#writeFieldBegin("encryptedPassword",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerVirtualAccount_args (iprot : Protocol.t) =
  let _str4625 = new registerVirtualAccount_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4626,_id4627) = iprot#readFieldBegin in
        if _t4626 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4627 with 
          | 2 -> (if _t4626 = Protocol.T_STRING then
              _str4625#set_locale iprot#readString
            else
              iprot#skip _t4626)
          | 3 -> (if _t4626 = Protocol.T_STRING then
              _str4625#set_encryptedVirtualUserId iprot#readString
            else
              iprot#skip _t4626)
          | 4 -> (if _t4626 = Protocol.T_STRING then
              _str4625#set_encryptedPassword iprot#readString
            else
              iprot#skip _t4626)
          | _ -> iprot#skip _t4626);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4625

class registerVirtualAccount_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerVirtualAccount_result.success") | Some _x4628 -> _x4628
  method set_success _x4628 = _success <- Some _x4628
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerVirtualAccount_result.e") | Some _x4629 -> _x4629
  method set_e _x4629 = _e <- Some _x4629
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerVirtualAccount_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerVirtualAccount_result (iprot : Protocol.t) =
  let _str4632 = new registerVirtualAccount_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4633,_id4634) = iprot#readFieldBegin in
        if _t4633 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4634 with 
          | 0 -> (if _t4633 = Protocol.T_STRING then
              _str4632#set_success iprot#readString
            else
              iprot#skip _t4633)
          | 1 -> (if _t4633 = Protocol.T_STRUCT then
              _str4632#set_e (read_talkException iprot)
            else
              iprot#skip _t4633)
          | _ -> iprot#skip _t4633);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4632

class requestVirtualAccountPasswordChange_args =
object (self)
  val mutable _virtualMid : string option = None
  method get_virtualMid = _virtualMid
  method grab_virtualMid = match _virtualMid with None->raise (Field_empty "requestVirtualAccountPasswordChange_args.virtualMid") | Some _x4635 -> _x4635
  method set_virtualMid _x4635 = _virtualMid <- Some _x4635
  method unset_virtualMid = _virtualMid <- None
  method reset_virtualMid = _virtualMid <- None

  val mutable _encryptedVirtualUserId : string option = None
  method get_encryptedVirtualUserId = _encryptedVirtualUserId
  method grab_encryptedVirtualUserId = match _encryptedVirtualUserId with None->raise (Field_empty "requestVirtualAccountPasswordChange_args.encryptedVirtualUserId") | Some _x4636 -> _x4636
  method set_encryptedVirtualUserId _x4636 = _encryptedVirtualUserId <- Some _x4636
  method unset_encryptedVirtualUserId = _encryptedVirtualUserId <- None
  method reset_encryptedVirtualUserId = _encryptedVirtualUserId <- None

  val mutable _encryptedOldPassword : string option = None
  method get_encryptedOldPassword = _encryptedOldPassword
  method grab_encryptedOldPassword = match _encryptedOldPassword with None->raise (Field_empty "requestVirtualAccountPasswordChange_args.encryptedOldPassword") | Some _x4637 -> _x4637
  method set_encryptedOldPassword _x4637 = _encryptedOldPassword <- Some _x4637
  method unset_encryptedOldPassword = _encryptedOldPassword <- None
  method reset_encryptedOldPassword = _encryptedOldPassword <- None

  val mutable _encryptedNewPassword : string option = None
  method get_encryptedNewPassword = _encryptedNewPassword
  method grab_encryptedNewPassword = match _encryptedNewPassword with None->raise (Field_empty "requestVirtualAccountPasswordChange_args.encryptedNewPassword") | Some _x4638 -> _x4638
  method set_encryptedNewPassword _x4638 = _encryptedNewPassword <- Some _x4638
  method unset_encryptedNewPassword = _encryptedNewPassword <- None
  method reset_encryptedNewPassword = _encryptedNewPassword <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestVirtualAccountPasswordChange_args";
    (match _virtualMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("virtualMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _encryptedVirtualUserId with None -> () | Some _v -> 
      oprot#writeFieldBegin("encryptedVirtualUserId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _encryptedOldPassword with None -> () | Some _v -> 
      oprot#writeFieldBegin("encryptedOldPassword",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _encryptedNewPassword with None -> () | Some _v -> 
      oprot#writeFieldBegin("encryptedNewPassword",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestVirtualAccountPasswordChange_args (iprot : Protocol.t) =
  let _str4641 = new requestVirtualAccountPasswordChange_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4642,_id4643) = iprot#readFieldBegin in
        if _t4642 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4643 with 
          | 2 -> (if _t4642 = Protocol.T_STRING then
              _str4641#set_virtualMid iprot#readString
            else
              iprot#skip _t4642)
          | 3 -> (if _t4642 = Protocol.T_STRING then
              _str4641#set_encryptedVirtualUserId iprot#readString
            else
              iprot#skip _t4642)
          | 4 -> (if _t4642 = Protocol.T_STRING then
              _str4641#set_encryptedOldPassword iprot#readString
            else
              iprot#skip _t4642)
          | 5 -> (if _t4642 = Protocol.T_STRING then
              _str4641#set_encryptedNewPassword iprot#readString
            else
              iprot#skip _t4642)
          | _ -> iprot#skip _t4642);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4641

class requestVirtualAccountPasswordChange_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "requestVirtualAccountPasswordChange_result.e") | Some _x4644 -> _x4644
  method set_e _x4644 = _e <- Some _x4644
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestVirtualAccountPasswordChange_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestVirtualAccountPasswordChange_result (iprot : Protocol.t) =
  let _str4647 = new requestVirtualAccountPasswordChange_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4648,_id4649) = iprot#readFieldBegin in
        if _t4648 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4649 with 
          | 1 -> (if _t4648 = Protocol.T_STRUCT then
              _str4647#set_e (read_talkException iprot)
            else
              iprot#skip _t4648)
          | _ -> iprot#skip _t4648);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4647

class requestVirtualAccountPasswordSet_args =
object (self)
  val mutable _virtualMid : string option = None
  method get_virtualMid = _virtualMid
  method grab_virtualMid = match _virtualMid with None->raise (Field_empty "requestVirtualAccountPasswordSet_args.virtualMid") | Some _x4650 -> _x4650
  method set_virtualMid _x4650 = _virtualMid <- Some _x4650
  method unset_virtualMid = _virtualMid <- None
  method reset_virtualMid = _virtualMid <- None

  val mutable _encryptedVirtualUserId : string option = None
  method get_encryptedVirtualUserId = _encryptedVirtualUserId
  method grab_encryptedVirtualUserId = match _encryptedVirtualUserId with None->raise (Field_empty "requestVirtualAccountPasswordSet_args.encryptedVirtualUserId") | Some _x4651 -> _x4651
  method set_encryptedVirtualUserId _x4651 = _encryptedVirtualUserId <- Some _x4651
  method unset_encryptedVirtualUserId = _encryptedVirtualUserId <- None
  method reset_encryptedVirtualUserId = _encryptedVirtualUserId <- None

  val mutable _encryptedNewPassword : string option = None
  method get_encryptedNewPassword = _encryptedNewPassword
  method grab_encryptedNewPassword = match _encryptedNewPassword with None->raise (Field_empty "requestVirtualAccountPasswordSet_args.encryptedNewPassword") | Some _x4652 -> _x4652
  method set_encryptedNewPassword _x4652 = _encryptedNewPassword <- Some _x4652
  method unset_encryptedNewPassword = _encryptedNewPassword <- None
  method reset_encryptedNewPassword = _encryptedNewPassword <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestVirtualAccountPasswordSet_args";
    (match _virtualMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("virtualMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _encryptedVirtualUserId with None -> () | Some _v -> 
      oprot#writeFieldBegin("encryptedVirtualUserId",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _encryptedNewPassword with None -> () | Some _v -> 
      oprot#writeFieldBegin("encryptedNewPassword",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestVirtualAccountPasswordSet_args (iprot : Protocol.t) =
  let _str4655 = new requestVirtualAccountPasswordSet_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4656,_id4657) = iprot#readFieldBegin in
        if _t4656 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4657 with 
          | 2 -> (if _t4656 = Protocol.T_STRING then
              _str4655#set_virtualMid iprot#readString
            else
              iprot#skip _t4656)
          | 3 -> (if _t4656 = Protocol.T_STRING then
              _str4655#set_encryptedVirtualUserId iprot#readString
            else
              iprot#skip _t4656)
          | 4 -> (if _t4656 = Protocol.T_STRING then
              _str4655#set_encryptedNewPassword iprot#readString
            else
              iprot#skip _t4656)
          | _ -> iprot#skip _t4656);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4655

class requestVirtualAccountPasswordSet_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "requestVirtualAccountPasswordSet_result.e") | Some _x4658 -> _x4658
  method set_e _x4658 = _e <- Some _x4658
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "requestVirtualAccountPasswordSet_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_requestVirtualAccountPasswordSet_result (iprot : Protocol.t) =
  let _str4661 = new requestVirtualAccountPasswordSet_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4662,_id4663) = iprot#readFieldBegin in
        if _t4662 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4663 with 
          | 1 -> (if _t4662 = Protocol.T_STRUCT then
              _str4661#set_e (read_talkException iprot)
            else
              iprot#skip _t4662)
          | _ -> iprot#skip _t4662);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4661

class unregisterVirtualAccount_args =
object (self)
  val mutable _virtualMid : string option = None
  method get_virtualMid = _virtualMid
  method grab_virtualMid = match _virtualMid with None->raise (Field_empty "unregisterVirtualAccount_args.virtualMid") | Some _x4664 -> _x4664
  method set_virtualMid _x4664 = _virtualMid <- Some _x4664
  method unset_virtualMid = _virtualMid <- None
  method reset_virtualMid = _virtualMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unregisterVirtualAccount_args";
    (match _virtualMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("virtualMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unregisterVirtualAccount_args (iprot : Protocol.t) =
  let _str4667 = new unregisterVirtualAccount_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4668,_id4669) = iprot#readFieldBegin in
        if _t4668 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4669 with 
          | 2 -> (if _t4668 = Protocol.T_STRING then
              _str4667#set_virtualMid iprot#readString
            else
              iprot#skip _t4668)
          | _ -> iprot#skip _t4668);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4667

class unregisterVirtualAccount_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "unregisterVirtualAccount_result.e") | Some _x4670 -> _x4670
  method set_e _x4670 = _e <- Some _x4670
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "unregisterVirtualAccount_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_unregisterVirtualAccount_result (iprot : Protocol.t) =
  let _str4673 = new unregisterVirtualAccount_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4674,_id4675) = iprot#readFieldBegin in
        if _t4674 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4675 with 
          | 1 -> (if _t4674 = Protocol.T_STRUCT then
              _str4673#set_e (read_talkException iprot)
            else
              iprot#skip _t4674)
          | _ -> iprot#skip _t4674);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4673

class virtual iface =
object (self)
  method virtual getRSAKey : rSAKey
  method virtual notifyEmailConfirmationResult : (string,string) Hashtbl.t option -> unit
  method virtual registerVirtualAccount : string option -> string option -> string option -> string
  method virtual requestVirtualAccountPasswordChange : string option -> string option -> string option -> string option -> unit
  method virtual requestVirtualAccountPasswordSet : string option -> string option -> string option -> unit
  method virtual unregisterVirtualAccount : string option -> unit
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method getRSAKey  = 
    self#send_getRSAKey;
    self#recv_getRSAKey
  method private send_getRSAKey  = 
    oprot#writeMessageBegin ("getRSAKey", Protocol.CALL, seqid);
    let args = new getRSAKey_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getRSAKey  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getRSAKey_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getRSAKey failed: unknown result")))
  method notifyEmailConfirmationResult parameterMap = 
    self#send_notifyEmailConfirmationResult parameterMap;
    self#recv_notifyEmailConfirmationResult
  method private send_notifyEmailConfirmationResult parameterMap = 
    oprot#writeMessageBegin ("notifyEmailConfirmationResult", Protocol.CALL, seqid);
    let args = new notifyEmailConfirmationResult_args in
      args#set_parameterMap parameterMap;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyEmailConfirmationResult  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyEmailConfirmationResult_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method registerVirtualAccount locale encryptedVirtualUserId encryptedPassword = 
    self#send_registerVirtualAccount locale encryptedVirtualUserId encryptedPassword;
    self#recv_registerVirtualAccount
  method private send_registerVirtualAccount locale encryptedVirtualUserId encryptedPassword = 
    oprot#writeMessageBegin ("registerVirtualAccount", Protocol.CALL, seqid);
    let args = new registerVirtualAccount_args in
      args#set_locale locale;
      args#set_encryptedVirtualUserId encryptedVirtualUserId;
      args#set_encryptedPassword encryptedPassword;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerVirtualAccount  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerVirtualAccount_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerVirtualAccount failed: unknown result")))
  method requestVirtualAccountPasswordChange virtualMid encryptedVirtualUserId encryptedOldPassword encryptedNewPassword = 
    self#send_requestVirtualAccountPasswordChange virtualMid encryptedVirtualUserId encryptedOldPassword encryptedNewPassword;
    self#recv_requestVirtualAccountPasswordChange
  method private send_requestVirtualAccountPasswordChange virtualMid encryptedVirtualUserId encryptedOldPassword encryptedNewPassword = 
    oprot#writeMessageBegin ("requestVirtualAccountPasswordChange", Protocol.CALL, seqid);
    let args = new requestVirtualAccountPasswordChange_args in
      args#set_virtualMid virtualMid;
      args#set_encryptedVirtualUserId encryptedVirtualUserId;
      args#set_encryptedOldPassword encryptedOldPassword;
      args#set_encryptedNewPassword encryptedNewPassword;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_requestVirtualAccountPasswordChange  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_requestVirtualAccountPasswordChange_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method requestVirtualAccountPasswordSet virtualMid encryptedVirtualUserId encryptedNewPassword = 
    self#send_requestVirtualAccountPasswordSet virtualMid encryptedVirtualUserId encryptedNewPassword;
    self#recv_requestVirtualAccountPasswordSet
  method private send_requestVirtualAccountPasswordSet virtualMid encryptedVirtualUserId encryptedNewPassword = 
    oprot#writeMessageBegin ("requestVirtualAccountPasswordSet", Protocol.CALL, seqid);
    let args = new requestVirtualAccountPasswordSet_args in
      args#set_virtualMid virtualMid;
      args#set_encryptedVirtualUserId encryptedVirtualUserId;
      args#set_encryptedNewPassword encryptedNewPassword;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_requestVirtualAccountPasswordSet  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_requestVirtualAccountPasswordSet_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method unregisterVirtualAccount virtualMid = 
    self#send_unregisterVirtualAccount virtualMid;
    self#recv_unregisterVirtualAccount
  method private send_unregisterVirtualAccount virtualMid = 
    oprot#writeMessageBegin ("unregisterVirtualAccount", Protocol.CALL, seqid);
    let args = new unregisterVirtualAccount_args in
      args#set_virtualMid virtualMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_unregisterVirtualAccount  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_unregisterVirtualAccount_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 6
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_getRSAKey (seqid, iprot, oprot) =
    let _ = read_getRSAKey_args iprot in
      iprot#readMessageEnd;
      let result = new getRSAKey_result in
        (try
          result#set_success (handler#getRSAKey);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getRSAKey", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyEmailConfirmationResult (seqid, iprot, oprot) =
    let args = read_notifyEmailConfirmationResult_args iprot in
      iprot#readMessageEnd;
      let result = new notifyEmailConfirmationResult_result in
        (try
          (handler#notifyEmailConfirmationResult args#get_parameterMap);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyEmailConfirmationResult", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerVirtualAccount (seqid, iprot, oprot) =
    let args = read_registerVirtualAccount_args iprot in
      iprot#readMessageEnd;
      let result = new registerVirtualAccount_result in
        (try
          result#set_success (handler#registerVirtualAccount args#get_locale args#get_encryptedVirtualUserId args#get_encryptedPassword);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerVirtualAccount", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_requestVirtualAccountPasswordChange (seqid, iprot, oprot) =
    let args = read_requestVirtualAccountPasswordChange_args iprot in
      iprot#readMessageEnd;
      let result = new requestVirtualAccountPasswordChange_result in
        (try
          (handler#requestVirtualAccountPasswordChange args#get_virtualMid args#get_encryptedVirtualUserId args#get_encryptedOldPassword args#get_encryptedNewPassword);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("requestVirtualAccountPasswordChange", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_requestVirtualAccountPasswordSet (seqid, iprot, oprot) =
    let args = read_requestVirtualAccountPasswordSet_args iprot in
      iprot#readMessageEnd;
      let result = new requestVirtualAccountPasswordSet_result in
        (try
          (handler#requestVirtualAccountPasswordSet args#get_virtualMid args#get_encryptedVirtualUserId args#get_encryptedNewPassword);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("requestVirtualAccountPasswordSet", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_unregisterVirtualAccount (seqid, iprot, oprot) =
    let args = read_unregisterVirtualAccount_args iprot in
      iprot#readMessageEnd;
      let result = new unregisterVirtualAccount_result in
        (try
          (handler#unregisterVirtualAccount args#get_virtualMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("unregisterVirtualAccount", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "getRSAKey" self#process_getRSAKey;
    Hashtbl.add processMap "notifyEmailConfirmationResult" self#process_notifyEmailConfirmationResult;
    Hashtbl.add processMap "registerVirtualAccount" self#process_registerVirtualAccount;
    Hashtbl.add processMap "requestVirtualAccountPasswordChange" self#process_requestVirtualAccountPasswordChange;
    Hashtbl.add processMap "requestVirtualAccountPasswordSet" self#process_requestVirtualAccountPasswordSet;
    Hashtbl.add processMap "unregisterVirtualAccount" self#process_unregisterVirtualAccount;
end

