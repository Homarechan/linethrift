(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class activeBuddySubscriberCount_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "activeBuddySubscriberCount_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_activeBuddySubscriberCount_args (iprot : Protocol.t) =
  let _str5873 = new activeBuddySubscriberCount_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5874,_id5875) = iprot#readFieldBegin in
        if _t5874 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5875 with 
          | _ -> iprot#skip _t5874);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5873

class activeBuddySubscriberCount_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "activeBuddySubscriberCount_result.success") | Some _x5876 -> _x5876
  method set_success _x5876 = _success <- Some _x5876
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "activeBuddySubscriberCount_result.e") | Some _x5877 -> _x5877
  method set_e _x5877 = _e <- Some _x5877
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "activeBuddySubscriberCount_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_activeBuddySubscriberCount_result (iprot : Protocol.t) =
  let _str5880 = new activeBuddySubscriberCount_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5881,_id5882) = iprot#readFieldBegin in
        if _t5881 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5882 with 
          | 0 -> (if _t5881 = Protocol.T_I64 then
              _str5880#set_success iprot#readI64
            else
              iprot#skip _t5881)
          | 1 -> (if _t5881 = Protocol.T_STRUCT then
              _str5880#set_e (read_talkException iprot)
            else
              iprot#skip _t5881)
          | _ -> iprot#skip _t5881);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5880

class addOperationForChannel_args =
object (self)
  val mutable _opType : OpType.t option = None
  method get_opType = _opType
  method grab_opType = match _opType with None->raise (Field_empty "addOperationForChannel_args.opType") | Some _x5883 -> _x5883
  method set_opType _x5883 = _opType <- Some _x5883
  method unset_opType = _opType <- None
  method reset_opType = _opType <- None

  val mutable _param1 : string option = None
  method get_param1 = _param1
  method grab_param1 = match _param1 with None->raise (Field_empty "addOperationForChannel_args.param1") | Some _x5884 -> _x5884
  method set_param1 _x5884 = _param1 <- Some _x5884
  method unset_param1 = _param1 <- None
  method reset_param1 = _param1 <- None

  val mutable _param2 : string option = None
  method get_param2 = _param2
  method grab_param2 = match _param2 with None->raise (Field_empty "addOperationForChannel_args.param2") | Some _x5885 -> _x5885
  method set_param2 _x5885 = _param2 <- Some _x5885
  method unset_param2 = _param2 <- None
  method reset_param2 = _param2 <- None

  val mutable _param3 : string option = None
  method get_param3 = _param3
  method grab_param3 = match _param3 with None->raise (Field_empty "addOperationForChannel_args.param3") | Some _x5886 -> _x5886
  method set_param3 _x5886 = _param3 <- Some _x5886
  method unset_param3 = _param3 <- None
  method reset_param3 = _param3 <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addOperationForChannel_args";
    (match _opType with None -> () | Some _v -> 
      oprot#writeFieldBegin("opType",Protocol.T_I32,1);
      oprot#writeI32(OpType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _param1 with None -> () | Some _v -> 
      oprot#writeFieldBegin("param1",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _param2 with None -> () | Some _v -> 
      oprot#writeFieldBegin("param2",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _param3 with None -> () | Some _v -> 
      oprot#writeFieldBegin("param3",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addOperationForChannel_args (iprot : Protocol.t) =
  let _str5889 = new addOperationForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5890,_id5891) = iprot#readFieldBegin in
        if _t5890 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5891 with 
          | 1 -> (if _t5890 = Protocol.T_I32 then
              _str5889#set_opType (OpType.of_i iprot#readI32)
            else
              iprot#skip _t5890)
          | 2 -> (if _t5890 = Protocol.T_STRING then
              _str5889#set_param1 iprot#readString
            else
              iprot#skip _t5890)
          | 3 -> (if _t5890 = Protocol.T_STRING then
              _str5889#set_param2 iprot#readString
            else
              iprot#skip _t5890)
          | 4 -> (if _t5890 = Protocol.T_STRING then
              _str5889#set_param3 iprot#readString
            else
              iprot#skip _t5890)
          | _ -> iprot#skip _t5890);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5889

class addOperationForChannel_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "addOperationForChannel_result.e") | Some _x5892 -> _x5892
  method set_e _x5892 = _e <- Some _x5892
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addOperationForChannel_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addOperationForChannel_result (iprot : Protocol.t) =
  let _str5895 = new addOperationForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5896,_id5897) = iprot#readFieldBegin in
        if _t5896 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5897 with 
          | 1 -> (if _t5896 = Protocol.T_STRUCT then
              _str5895#set_e (read_talkException iprot)
            else
              iprot#skip _t5896)
          | _ -> iprot#skip _t5896);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5895

class displayBuddySubscriberCount_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "displayBuddySubscriberCount_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_displayBuddySubscriberCount_args (iprot : Protocol.t) =
  let _str5900 = new displayBuddySubscriberCount_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5901,_id5902) = iprot#readFieldBegin in
        if _t5901 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5902 with 
          | _ -> iprot#skip _t5901);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5900

class displayBuddySubscriberCount_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "displayBuddySubscriberCount_result.success") | Some _x5903 -> _x5903
  method set_success _x5903 = _success <- Some _x5903
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "displayBuddySubscriberCount_result.e") | Some _x5904 -> _x5904
  method set_e _x5904 = _e <- Some _x5904
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "displayBuddySubscriberCount_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_displayBuddySubscriberCount_result (iprot : Protocol.t) =
  let _str5907 = new displayBuddySubscriberCount_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5908,_id5909) = iprot#readFieldBegin in
        if _t5908 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5909 with 
          | 0 -> (if _t5908 = Protocol.T_I64 then
              _str5907#set_success iprot#readI64
            else
              iprot#skip _t5908)
          | 1 -> (if _t5908 = Protocol.T_STRUCT then
              _str5907#set_e (read_talkException iprot)
            else
              iprot#skip _t5908)
          | _ -> iprot#skip _t5908);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5907

class findContactByUseridWithoutAbuseBlockForChannel_args =
object (self)
  val mutable _userid : string option = None
  method get_userid = _userid
  method grab_userid = match _userid with None->raise (Field_empty "findContactByUseridWithoutAbuseBlockForChannel_args.userid") | Some _x5910 -> _x5910
  method set_userid _x5910 = _userid <- Some _x5910
  method unset_userid = _userid <- None
  method reset_userid = _userid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByUseridWithoutAbuseBlockForChannel_args";
    (match _userid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByUseridWithoutAbuseBlockForChannel_args (iprot : Protocol.t) =
  let _str5913 = new findContactByUseridWithoutAbuseBlockForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5914,_id5915) = iprot#readFieldBegin in
        if _t5914 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5915 with 
          | 2 -> (if _t5914 = Protocol.T_STRING then
              _str5913#set_userid iprot#readString
            else
              iprot#skip _t5914)
          | _ -> iprot#skip _t5914);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5913

class findContactByUseridWithoutAbuseBlockForChannel_result =
object (self)
  val mutable _success : contact option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findContactByUseridWithoutAbuseBlockForChannel_result.success") | Some _x5916 -> _x5916
  method set_success _x5916 = _success <- Some _x5916
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findContactByUseridWithoutAbuseBlockForChannel_result.e") | Some _x5917 -> _x5917
  method set_e _x5917 = _e <- Some _x5917
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByUseridWithoutAbuseBlockForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByUseridWithoutAbuseBlockForChannel_result (iprot : Protocol.t) =
  let _str5920 = new findContactByUseridWithoutAbuseBlockForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5921,_id5922) = iprot#readFieldBegin in
        if _t5921 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5922 with 
          | 0 -> (if _t5921 = Protocol.T_STRUCT then
              _str5920#set_success (read_contact iprot)
            else
              iprot#skip _t5921)
          | 1 -> (if _t5921 = Protocol.T_STRUCT then
              _str5920#set_e (read_talkException iprot)
            else
              iprot#skip _t5921)
          | _ -> iprot#skip _t5921);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5920

class getAllContactIdsForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllContactIdsForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllContactIdsForChannel_args (iprot : Protocol.t) =
  let _str5925 = new getAllContactIdsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5926,_id5927) = iprot#readFieldBegin in
        if _t5926 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5927 with 
          | _ -> iprot#skip _t5926);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5925

class getAllContactIdsForChannel_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getAllContactIdsForChannel_result.success") | Some _x5928 -> _x5928
  method set_success _x5928 = _success <- Some _x5928
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getAllContactIdsForChannel_result.e") | Some _x5929 -> _x5929
  method set_e _x5929 = _e <- Some _x5929
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllContactIdsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5932 ->         oprot#writeString(_iter5932);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllContactIdsForChannel_result (iprot : Protocol.t) =
  let _str5933 = new getAllContactIdsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5934,_id5935) = iprot#readFieldBegin in
        if _t5934 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5935 with 
          | 0 -> (if _t5934 = Protocol.T_LIST then
              _str5933#set_success 
                (let (_etype5939,_size5936) = iprot#readListBegin in
                  let _con5940 = (Array.to_list (Array.init _size5936 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5940)
            else
              iprot#skip _t5934)
          | 1 -> (if _t5934 = Protocol.T_STRUCT then
              _str5933#set_e (read_talkException iprot)
            else
              iprot#skip _t5934)
          | _ -> iprot#skip _t5934);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5933

class getCompactContacts_args =
object (self)
  val mutable _lastModifiedTimestamp : Int64.t option = None
  method get_lastModifiedTimestamp = _lastModifiedTimestamp
  method grab_lastModifiedTimestamp = match _lastModifiedTimestamp with None->raise (Field_empty "getCompactContacts_args.lastModifiedTimestamp") | Some _x5941 -> _x5941
  method set_lastModifiedTimestamp _x5941 = _lastModifiedTimestamp <- Some _x5941
  method unset_lastModifiedTimestamp = _lastModifiedTimestamp <- None
  method reset_lastModifiedTimestamp = _lastModifiedTimestamp <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactContacts_args";
    (match _lastModifiedTimestamp with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastModifiedTimestamp",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactContacts_args (iprot : Protocol.t) =
  let _str5944 = new getCompactContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5945,_id5946) = iprot#readFieldBegin in
        if _t5945 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5946 with 
          | 2 -> (if _t5945 = Protocol.T_I64 then
              _str5944#set_lastModifiedTimestamp iprot#readI64
            else
              iprot#skip _t5945)
          | _ -> iprot#skip _t5945);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5944

class getCompactContacts_result =
object (self)
  val mutable _success : compactContact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCompactContacts_result.success") | Some _x5947 -> _x5947
  method set_success _x5947 = _success <- Some _x5947
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCompactContacts_result.e") | Some _x5948 -> _x5948
  method set_e _x5948 = _e <- Some _x5948
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter5951 ->         _iter5951#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactContacts_result (iprot : Protocol.t) =
  let _str5952 = new getCompactContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5953,_id5954) = iprot#readFieldBegin in
        if _t5953 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5954 with 
          | 0 -> (if _t5953 = Protocol.T_LIST then
              _str5952#set_success 
                (let (_etype5958,_size5955) = iprot#readListBegin in
                  let _con5959 = (Array.to_list (Array.init _size5955 (fun _ -> (read_compactContact iprot)))) in
                    iprot#readListEnd; _con5959)
            else
              iprot#skip _t5953)
          | 1 -> (if _t5953 = Protocol.T_STRUCT then
              _str5952#set_e (read_talkException iprot)
            else
              iprot#skip _t5953)
          | _ -> iprot#skip _t5953);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5952

class getContactsForChannel_args =
object (self)
  val mutable _ids : string list option = None
  method get_ids = _ids
  method grab_ids = match _ids with None->raise (Field_empty "getContactsForChannel_args.ids") | Some _x5960 -> _x5960
  method set_ids _x5960 = _ids <- Some _x5960
  method unset_ids = _ids <- None
  method reset_ids = _ids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContactsForChannel_args";
    (match _ids with None -> () | Some _v -> 
      oprot#writeFieldBegin("ids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5963 ->         oprot#writeString(_iter5963);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContactsForChannel_args (iprot : Protocol.t) =
  let _str5964 = new getContactsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5965,_id5966) = iprot#readFieldBegin in
        if _t5965 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5966 with 
          | 2 -> (if _t5965 = Protocol.T_LIST then
              _str5964#set_ids 
                (let (_etype5970,_size5967) = iprot#readListBegin in
                  let _con5971 = (Array.to_list (Array.init _size5967 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5971)
            else
              iprot#skip _t5965)
          | _ -> iprot#skip _t5965);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5964

class getContactsForChannel_result =
object (self)
  val mutable _success : contact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getContactsForChannel_result.success") | Some _x5972 -> _x5972
  method set_success _x5972 = _success <- Some _x5972
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getContactsForChannel_result.e") | Some _x5973 -> _x5973
  method set_e _x5973 = _e <- Some _x5973
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContactsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter5976 ->         _iter5976#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContactsForChannel_result (iprot : Protocol.t) =
  let _str5977 = new getContactsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5978,_id5979) = iprot#readFieldBegin in
        if _t5978 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5979 with 
          | 0 -> (if _t5978 = Protocol.T_LIST then
              _str5977#set_success 
                (let (_etype5983,_size5980) = iprot#readListBegin in
                  let _con5984 = (Array.to_list (Array.init _size5980 (fun _ -> (read_contact iprot)))) in
                    iprot#readListEnd; _con5984)
            else
              iprot#skip _t5978)
          | 1 -> (if _t5978 = Protocol.T_STRUCT then
              _str5977#set_e (read_talkException iprot)
            else
              iprot#skip _t5978)
          | _ -> iprot#skip _t5978);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5977

class getDisplayName_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "getDisplayName_args.mid") | Some _x5985 -> _x5985
  method set_mid _x5985 = _mid <- Some _x5985
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getDisplayName_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getDisplayName_args (iprot : Protocol.t) =
  let _str5988 = new getDisplayName_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5989,_id5990) = iprot#readFieldBegin in
        if _t5989 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5990 with 
          | 2 -> (if _t5989 = Protocol.T_STRING then
              _str5988#set_mid iprot#readString
            else
              iprot#skip _t5989)
          | _ -> iprot#skip _t5989);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5988

class getDisplayName_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getDisplayName_result.success") | Some _x5991 -> _x5991
  method set_success _x5991 = _success <- Some _x5991
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getDisplayName_result.e") | Some _x5992 -> _x5992
  method set_e _x5992 = _e <- Some _x5992
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getDisplayName_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getDisplayName_result (iprot : Protocol.t) =
  let _str5995 = new getDisplayName_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5996,_id5997) = iprot#readFieldBegin in
        if _t5996 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5997 with 
          | 0 -> (if _t5996 = Protocol.T_STRING then
              _str5995#set_success iprot#readString
            else
              iprot#skip _t5996)
          | 1 -> (if _t5996 = Protocol.T_STRUCT then
              _str5995#set_e (read_talkException iprot)
            else
              iprot#skip _t5996)
          | _ -> iprot#skip _t5996);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5995

class getFavoriteMidsForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFavoriteMidsForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFavoriteMidsForChannel_args (iprot : Protocol.t) =
  let _str6000 = new getFavoriteMidsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6001,_id6002) = iprot#readFieldBegin in
        if _t6001 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6002 with 
          | _ -> iprot#skip _t6001);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6000

class getFavoriteMidsForChannel_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getFavoriteMidsForChannel_result.success") | Some _x6003 -> _x6003
  method set_success _x6003 = _success <- Some _x6003
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getFavoriteMidsForChannel_result.e") | Some _x6004 -> _x6004
  method set_e _x6004 = _e <- Some _x6004
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFavoriteMidsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6007 ->         oprot#writeString(_iter6007);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFavoriteMidsForChannel_result (iprot : Protocol.t) =
  let _str6008 = new getFavoriteMidsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6009,_id6010) = iprot#readFieldBegin in
        if _t6009 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6010 with 
          | 0 -> (if _t6009 = Protocol.T_LIST then
              _str6008#set_success 
                (let (_etype6014,_size6011) = iprot#readListBegin in
                  let _con6015 = (Array.to_list (Array.init _size6011 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6015)
            else
              iprot#skip _t6009)
          | 1 -> (if _t6009 = Protocol.T_STRUCT then
              _str6008#set_e (read_talkException iprot)
            else
              iprot#skip _t6009)
          | _ -> iprot#skip _t6009);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6008

class getFriendMids_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFriendMids_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFriendMids_args (iprot : Protocol.t) =
  let _str6018 = new getFriendMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6019,_id6020) = iprot#readFieldBegin in
        if _t6019 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6020 with 
          | _ -> iprot#skip _t6019);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6018

class getFriendMids_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getFriendMids_result.success") | Some _x6021 -> _x6021
  method set_success _x6021 = _success <- Some _x6021
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getFriendMids_result.e") | Some _x6022 -> _x6022
  method set_e _x6022 = _e <- Some _x6022
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFriendMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6025 ->         oprot#writeString(_iter6025);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFriendMids_result (iprot : Protocol.t) =
  let _str6026 = new getFriendMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6027,_id6028) = iprot#readFieldBegin in
        if _t6027 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6028 with 
          | 0 -> (if _t6027 = Protocol.T_LIST then
              _str6026#set_success 
                (let (_etype6032,_size6029) = iprot#readListBegin in
                  let _con6033 = (Array.to_list (Array.init _size6029 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6033)
            else
              iprot#skip _t6027)
          | 1 -> (if _t6027 = Protocol.T_STRUCT then
              _str6026#set_e (read_talkException iprot)
            else
              iprot#skip _t6027)
          | _ -> iprot#skip _t6027);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6026

class getGroupMemberMids_args =
object (self)
  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "getGroupMemberMids_args.groupId") | Some _x6034 -> _x6034
  method set_groupId _x6034 = _groupId <- Some _x6034
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupMemberMids_args";
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupMemberMids_args (iprot : Protocol.t) =
  let _str6037 = new getGroupMemberMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6038,_id6039) = iprot#readFieldBegin in
        if _t6038 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6039 with 
          | 1 -> (if _t6038 = Protocol.T_STRING then
              _str6037#set_groupId iprot#readString
            else
              iprot#skip _t6038)
          | _ -> iprot#skip _t6038);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6037

class getGroupMemberMids_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupMemberMids_result.success") | Some _x6040 -> _x6040
  method set_success _x6040 = _success <- Some _x6040
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupMemberMids_result.e") | Some _x6041 -> _x6041
  method set_e _x6041 = _e <- Some _x6041
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupMemberMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6044 ->         oprot#writeString(_iter6044);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupMemberMids_result (iprot : Protocol.t) =
  let _str6045 = new getGroupMemberMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6046,_id6047) = iprot#readFieldBegin in
        if _t6046 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6047 with 
          | 0 -> (if _t6046 = Protocol.T_LIST then
              _str6045#set_success 
                (let (_etype6051,_size6048) = iprot#readListBegin in
                  let _con6052 = (Array.to_list (Array.init _size6048 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6052)
            else
              iprot#skip _t6046)
          | 1 -> (if _t6046 = Protocol.T_STRUCT then
              _str6045#set_e (read_talkException iprot)
            else
              iprot#skip _t6046)
          | _ -> iprot#skip _t6046);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6045

class getGroupsForChannel_args =
object (self)
  val mutable _groupIds : string list option = None
  method get_groupIds = _groupIds
  method grab_groupIds = match _groupIds with None->raise (Field_empty "getGroupsForChannel_args.groupIds") | Some _x6053 -> _x6053
  method set_groupIds _x6053 = _groupIds <- Some _x6053
  method unset_groupIds = _groupIds <- None
  method reset_groupIds = _groupIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupsForChannel_args";
    (match _groupIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupIds",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6056 ->         oprot#writeString(_iter6056);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupsForChannel_args (iprot : Protocol.t) =
  let _str6057 = new getGroupsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6058,_id6059) = iprot#readFieldBegin in
        if _t6058 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6059 with 
          | 1 -> (if _t6058 = Protocol.T_LIST then
              _str6057#set_groupIds 
                (let (_etype6063,_size6060) = iprot#readListBegin in
                  let _con6064 = (Array.to_list (Array.init _size6060 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6064)
            else
              iprot#skip _t6058)
          | _ -> iprot#skip _t6058);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6057

class getGroupsForChannel_result =
object (self)
  val mutable _success : group list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupsForChannel_result.success") | Some _x6065 -> _x6065
  method set_success _x6065 = _success <- Some _x6065
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupsForChannel_result.e") | Some _x6066 -> _x6066
  method set_e _x6066 = _e <- Some _x6066
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter6069 ->         _iter6069#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupsForChannel_result (iprot : Protocol.t) =
  let _str6070 = new getGroupsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6071,_id6072) = iprot#readFieldBegin in
        if _t6071 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6072 with 
          | 0 -> (if _t6071 = Protocol.T_LIST then
              _str6070#set_success 
                (let (_etype6076,_size6073) = iprot#readListBegin in
                  let _con6077 = (Array.to_list (Array.init _size6073 (fun _ -> (read_group iprot)))) in
                    iprot#readListEnd; _con6077)
            else
              iprot#skip _t6071)
          | 1 -> (if _t6071 = Protocol.T_STRUCT then
              _str6070#set_e (read_talkException iprot)
            else
              iprot#skip _t6071)
          | _ -> iprot#skip _t6071);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6070

class getIdentityCredential_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getIdentityCredential_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getIdentityCredential_args (iprot : Protocol.t) =
  let _str6080 = new getIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6081,_id6082) = iprot#readFieldBegin in
        if _t6081 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6082 with 
          | _ -> iprot#skip _t6081);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6080

class getIdentityCredential_result =
object (self)
  val mutable _success : identityCredential option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getIdentityCredential_result.success") | Some _x6083 -> _x6083
  method set_success _x6083 = _success <- Some _x6083
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getIdentityCredential_result.e") | Some _x6084 -> _x6084
  method set_e _x6084 = _e <- Some _x6084
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getIdentityCredential_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getIdentityCredential_result (iprot : Protocol.t) =
  let _str6087 = new getIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6088,_id6089) = iprot#readFieldBegin in
        if _t6088 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6089 with 
          | 0 -> (if _t6088 = Protocol.T_STRUCT then
              _str6087#set_success (read_identityCredential iprot)
            else
              iprot#skip _t6088)
          | 1 -> (if _t6088 = Protocol.T_STRUCT then
              _str6087#set_e (read_talkException iprot)
            else
              iprot#skip _t6088)
          | _ -> iprot#skip _t6088);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6087

class getJoinedGroupIdsForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinedGroupIdsForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinedGroupIdsForChannel_args (iprot : Protocol.t) =
  let _str6092 = new getJoinedGroupIdsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6093,_id6094) = iprot#readFieldBegin in
        if _t6093 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6094 with 
          | _ -> iprot#skip _t6093);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6092

class getJoinedGroupIdsForChannel_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getJoinedGroupIdsForChannel_result.success") | Some _x6095 -> _x6095
  method set_success _x6095 = _success <- Some _x6095
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getJoinedGroupIdsForChannel_result.e") | Some _x6096 -> _x6096
  method set_e _x6096 = _e <- Some _x6096
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinedGroupIdsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6099 ->         oprot#writeString(_iter6099);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinedGroupIdsForChannel_result (iprot : Protocol.t) =
  let _str6100 = new getJoinedGroupIdsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6101,_id6102) = iprot#readFieldBegin in
        if _t6101 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6102 with 
          | 0 -> (if _t6101 = Protocol.T_LIST then
              _str6100#set_success 
                (let (_etype6106,_size6103) = iprot#readListBegin in
                  let _con6107 = (Array.to_list (Array.init _size6103 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6107)
            else
              iprot#skip _t6101)
          | 1 -> (if _t6101 = Protocol.T_STRUCT then
              _str6100#set_e (read_talkException iprot)
            else
              iprot#skip _t6101)
          | _ -> iprot#skip _t6101);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6100

class getMetaProfile_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMetaProfile_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMetaProfile_args (iprot : Protocol.t) =
  let _str6110 = new getMetaProfile_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6111,_id6112) = iprot#readFieldBegin in
        if _t6111 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6112 with 
          | _ -> iprot#skip _t6111);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6110

class getMetaProfile_result =
object (self)
  val mutable _success : metaProfile option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMetaProfile_result.success") | Some _x6113 -> _x6113
  method set_success _x6113 = _success <- Some _x6113
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMetaProfile_result.e") | Some _x6114 -> _x6114
  method set_e _x6114 = _e <- Some _x6114
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMetaProfile_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMetaProfile_result (iprot : Protocol.t) =
  let _str6117 = new getMetaProfile_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6118,_id6119) = iprot#readFieldBegin in
        if _t6118 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6119 with 
          | 0 -> (if _t6118 = Protocol.T_STRUCT then
              _str6117#set_success (read_metaProfile iprot)
            else
              iprot#skip _t6118)
          | 1 -> (if _t6118 = Protocol.T_STRUCT then
              _str6117#set_e (read_talkException iprot)
            else
              iprot#skip _t6118)
          | _ -> iprot#skip _t6118);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6117

class getMid_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMid_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMid_args (iprot : Protocol.t) =
  let _str6122 = new getMid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6123,_id6124) = iprot#readFieldBegin in
        if _t6123 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6124 with 
          | _ -> iprot#skip _t6123);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6122

class getMid_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMid_result.success") | Some _x6125 -> _x6125
  method set_success _x6125 = _success <- Some _x6125
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMid_result.e") | Some _x6126 -> _x6126
  method set_e _x6126 = _e <- Some _x6126
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMid_result (iprot : Protocol.t) =
  let _str6129 = new getMid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6130,_id6131) = iprot#readFieldBegin in
        if _t6130 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6131 with 
          | 0 -> (if _t6130 = Protocol.T_STRING then
              _str6129#set_success iprot#readString
            else
              iprot#skip _t6130)
          | 1 -> (if _t6130 = Protocol.T_STRUCT then
              _str6129#set_e (read_talkException iprot)
            else
              iprot#skip _t6130)
          | _ -> iprot#skip _t6130);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6129

class getPrimaryClientForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPrimaryClientForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPrimaryClientForChannel_args (iprot : Protocol.t) =
  let _str6134 = new getPrimaryClientForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6135,_id6136) = iprot#readFieldBegin in
        if _t6135 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6136 with 
          | _ -> iprot#skip _t6135);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6134

class getPrimaryClientForChannel_result =
object (self)
  val mutable _success : simpleChannelClient option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPrimaryClientForChannel_result.success") | Some _x6137 -> _x6137
  method set_success _x6137 = _success <- Some _x6137
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPrimaryClientForChannel_result.e") | Some _x6138 -> _x6138
  method set_e _x6138 = _e <- Some _x6138
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPrimaryClientForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPrimaryClientForChannel_result (iprot : Protocol.t) =
  let _str6141 = new getPrimaryClientForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6142,_id6143) = iprot#readFieldBegin in
        if _t6142 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6143 with 
          | 0 -> (if _t6142 = Protocol.T_STRUCT then
              _str6141#set_success (read_simpleChannelClient iprot)
            else
              iprot#skip _t6142)
          | 1 -> (if _t6142 = Protocol.T_STRUCT then
              _str6141#set_e (read_talkException iprot)
            else
              iprot#skip _t6142)
          | _ -> iprot#skip _t6142);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6141

class getProfileForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProfileForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProfileForChannel_args (iprot : Protocol.t) =
  let _str6146 = new getProfileForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6147,_id6148) = iprot#readFieldBegin in
        if _t6147 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6148 with 
          | _ -> iprot#skip _t6147);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6146

class getProfileForChannel_result =
object (self)
  val mutable _success : profile option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProfileForChannel_result.success") | Some _x6149 -> _x6149
  method set_success _x6149 = _success <- Some _x6149
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getProfileForChannel_result.e") | Some _x6150 -> _x6150
  method set_e _x6150 = _e <- Some _x6150
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProfileForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProfileForChannel_result (iprot : Protocol.t) =
  let _str6153 = new getProfileForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6154,_id6155) = iprot#readFieldBegin in
        if _t6154 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6155 with 
          | 0 -> (if _t6154 = Protocol.T_STRUCT then
              _str6153#set_success (read_profile iprot)
            else
              iprot#skip _t6154)
          | 1 -> (if _t6154 = Protocol.T_STRUCT then
              _str6153#set_e (read_talkException iprot)
            else
              iprot#skip _t6154)
          | _ -> iprot#skip _t6154);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6153

class getSimpleChannelContacts_args =
object (self)
  val mutable _ids : string list option = None
  method get_ids = _ids
  method grab_ids = match _ids with None->raise (Field_empty "getSimpleChannelContacts_args.ids") | Some _x6156 -> _x6156
  method set_ids _x6156 = _ids <- Some _x6156
  method unset_ids = _ids <- None
  method reset_ids = _ids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSimpleChannelContacts_args";
    (match _ids with None -> () | Some _v -> 
      oprot#writeFieldBegin("ids",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6159 ->         oprot#writeString(_iter6159);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSimpleChannelContacts_args (iprot : Protocol.t) =
  let _str6160 = new getSimpleChannelContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6161,_id6162) = iprot#readFieldBegin in
        if _t6161 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6162 with 
          | 1 -> (if _t6161 = Protocol.T_LIST then
              _str6160#set_ids 
                (let (_etype6166,_size6163) = iprot#readListBegin in
                  let _con6167 = (Array.to_list (Array.init _size6163 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6167)
            else
              iprot#skip _t6161)
          | _ -> iprot#skip _t6161);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6160

class getSimpleChannelContacts_result =
object (self)
  val mutable _success : simpleChannelContact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSimpleChannelContacts_result.success") | Some _x6168 -> _x6168
  method set_success _x6168 = _success <- Some _x6168
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSimpleChannelContacts_result.e") | Some _x6169 -> _x6169
  method set_e _x6169 = _e <- Some _x6169
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSimpleChannelContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter6172 ->         _iter6172#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSimpleChannelContacts_result (iprot : Protocol.t) =
  let _str6173 = new getSimpleChannelContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6174,_id6175) = iprot#readFieldBegin in
        if _t6174 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6175 with 
          | 0 -> (if _t6174 = Protocol.T_LIST then
              _str6173#set_success 
                (let (_etype6179,_size6176) = iprot#readListBegin in
                  let _con6180 = (Array.to_list (Array.init _size6176 (fun _ -> (read_simpleChannelContact iprot)))) in
                    iprot#readListEnd; _con6180)
            else
              iprot#skip _t6174)
          | 1 -> (if _t6174 = Protocol.T_STRUCT then
              _str6173#set_e (read_talkException iprot)
            else
              iprot#skip _t6174)
          | _ -> iprot#skip _t6174);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6173

class getUserCountryForBilling_args =
object (self)
  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getUserCountryForBilling_args.country") | Some _x6181 -> _x6181
  method set_country _x6181 = _country <- Some _x6181
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _remoteIp : string option = None
  method get_remoteIp = _remoteIp
  method grab_remoteIp = match _remoteIp with None->raise (Field_empty "getUserCountryForBilling_args.remoteIp") | Some _x6182 -> _x6182
  method set_remoteIp _x6182 = _remoteIp <- Some _x6182
  method unset_remoteIp = _remoteIp <- None
  method reset_remoteIp = _remoteIp <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserCountryForBilling_args";
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _remoteIp with None -> () | Some _v -> 
      oprot#writeFieldBegin("remoteIp",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserCountryForBilling_args (iprot : Protocol.t) =
  let _str6185 = new getUserCountryForBilling_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6186,_id6187) = iprot#readFieldBegin in
        if _t6186 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6187 with 
          | 2 -> (if _t6186 = Protocol.T_STRING then
              _str6185#set_country iprot#readString
            else
              iprot#skip _t6186)
          | 3 -> (if _t6186 = Protocol.T_STRING then
              _str6185#set_remoteIp iprot#readString
            else
              iprot#skip _t6186)
          | _ -> iprot#skip _t6186);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6185

class getUserCountryForBilling_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserCountryForBilling_result.success") | Some _x6188 -> _x6188
  method set_success _x6188 = _success <- Some _x6188
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserCountryForBilling_result.e") | Some _x6189 -> _x6189
  method set_e _x6189 = _e <- Some _x6189
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserCountryForBilling_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserCountryForBilling_result (iprot : Protocol.t) =
  let _str6192 = new getUserCountryForBilling_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6193,_id6194) = iprot#readFieldBegin in
        if _t6193 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6194 with 
          | 0 -> (if _t6193 = Protocol.T_STRING then
              _str6192#set_success iprot#readString
            else
              iprot#skip _t6193)
          | 1 -> (if _t6193 = Protocol.T_STRUCT then
              _str6192#set_e (read_talkException iprot)
            else
              iprot#skip _t6193)
          | _ -> iprot#skip _t6193);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6192

class getUserCreateTime_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserCreateTime_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserCreateTime_args (iprot : Protocol.t) =
  let _str6197 = new getUserCreateTime_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6198,_id6199) = iprot#readFieldBegin in
        if _t6198 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6199 with 
          | _ -> iprot#skip _t6198);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6197

class getUserCreateTime_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserCreateTime_result.success") | Some _x6200 -> _x6200
  method set_success _x6200 = _success <- Some _x6200
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserCreateTime_result.e") | Some _x6201 -> _x6201
  method set_e _x6201 = _e <- Some _x6201
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserCreateTime_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserCreateTime_result (iprot : Protocol.t) =
  let _str6204 = new getUserCreateTime_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6205,_id6206) = iprot#readFieldBegin in
        if _t6205 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6206 with 
          | 0 -> (if _t6205 = Protocol.T_I64 then
              _str6204#set_success iprot#readI64
            else
              iprot#skip _t6205)
          | 1 -> (if _t6205 = Protocol.T_STRUCT then
              _str6204#set_e (read_talkException iprot)
            else
              iprot#skip _t6205)
          | _ -> iprot#skip _t6205);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6204

class getUserIdentities_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserIdentities_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserIdentities_args (iprot : Protocol.t) =
  let _str6209 = new getUserIdentities_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6210,_id6211) = iprot#readFieldBegin in
        if _t6210 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6211 with 
          | _ -> iprot#skip _t6210);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6209

class getUserIdentities_result =
object (self)
  val mutable _success : (RegistrationType.t,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserIdentities_result.success") | Some _x6212 -> _x6212
  method set_success _x6212 = _success <- Some _x6212
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserIdentities_result.e") | Some _x6213 -> _x6213
  method set_e _x6213 = _e <- Some _x6213
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserIdentities_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_I32,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter6216 -> fun _viter6217 -> 
        oprot#writeI32(RegistrationType.to_i _kiter6216);
        oprot#writeString(_viter6217);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserIdentities_result (iprot : Protocol.t) =
  let _str6218 = new getUserIdentities_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6219,_id6220) = iprot#readFieldBegin in
        if _t6219 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6220 with 
          | 0 -> (if _t6219 = Protocol.T_MAP then
              _str6218#set_success 
                (let (_ktype6222,_vtype6223,_size6221) = iprot#readMapBegin in
                let _con6225 = Hashtbl.create _size6221 in
                  for i = 1 to _size6221 do
                    let _k = (RegistrationType.of_i iprot#readI32) in
                    let _v = iprot#readString in
                      Hashtbl.add _con6225 _k _v
                  done; iprot#readMapEnd; _con6225)
            else
              iprot#skip _t6219)
          | 1 -> (if _t6219 = Protocol.T_STRUCT then
              _str6218#set_e (read_talkException iprot)
            else
              iprot#skip _t6219)
          | _ -> iprot#skip _t6219);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6218

class getUserLanguage_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserLanguage_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserLanguage_args (iprot : Protocol.t) =
  let _str6228 = new getUserLanguage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6229,_id6230) = iprot#readFieldBegin in
        if _t6229 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6230 with 
          | _ -> iprot#skip _t6229);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6228

class getUserLanguage_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserLanguage_result.success") | Some _x6231 -> _x6231
  method set_success _x6231 = _success <- Some _x6231
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserLanguage_result.e") | Some _x6232 -> _x6232
  method set_e _x6232 = _e <- Some _x6232
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserLanguage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserLanguage_result (iprot : Protocol.t) =
  let _str6235 = new getUserLanguage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6236,_id6237) = iprot#readFieldBegin in
        if _t6236 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6237 with 
          | 0 -> (if _t6236 = Protocol.T_STRING then
              _str6235#set_success iprot#readString
            else
              iprot#skip _t6236)
          | 1 -> (if _t6236 = Protocol.T_STRUCT then
              _str6235#set_e (read_talkException iprot)
            else
              iprot#skip _t6236)
          | _ -> iprot#skip _t6236);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6235

class getUserMidsWhoAddedMe_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserMidsWhoAddedMe_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserMidsWhoAddedMe_args (iprot : Protocol.t) =
  let _str6240 = new getUserMidsWhoAddedMe_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6241,_id6242) = iprot#readFieldBegin in
        if _t6241 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6242 with 
          | _ -> iprot#skip _t6241);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6240

class getUserMidsWhoAddedMe_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserMidsWhoAddedMe_result.success") | Some _x6243 -> _x6243
  method set_success _x6243 = _success <- Some _x6243
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserMidsWhoAddedMe_result.e") | Some _x6244 -> _x6244
  method set_e _x6244 = _e <- Some _x6244
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserMidsWhoAddedMe_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter6247 ->         oprot#writeString(_iter6247);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserMidsWhoAddedMe_result (iprot : Protocol.t) =
  let _str6248 = new getUserMidsWhoAddedMe_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6249,_id6250) = iprot#readFieldBegin in
        if _t6249 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6250 with 
          | 0 -> (if _t6249 = Protocol.T_LIST then
              _str6248#set_success 
                (let (_etype6254,_size6251) = iprot#readListBegin in
                  let _con6255 = (Array.to_list (Array.init _size6251 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con6255)
            else
              iprot#skip _t6249)
          | 1 -> (if _t6249 = Protocol.T_STRUCT then
              _str6248#set_e (read_talkException iprot)
            else
              iprot#skip _t6249)
          | _ -> iprot#skip _t6249);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6248

class isGroupMember_args =
object (self)
  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "isGroupMember_args.groupId") | Some _x6256 -> _x6256
  method set_groupId _x6256 = _groupId <- Some _x6256
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isGroupMember_args";
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isGroupMember_args (iprot : Protocol.t) =
  let _str6259 = new isGroupMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6260,_id6261) = iprot#readFieldBegin in
        if _t6260 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6261 with 
          | 1 -> (if _t6260 = Protocol.T_STRING then
              _str6259#set_groupId iprot#readString
            else
              iprot#skip _t6260)
          | _ -> iprot#skip _t6260);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6259

class isGroupMember_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "isGroupMember_result.success") | Some _x6262 -> _x6262
  method set_success _x6262 = _success <- Some _x6262
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "isGroupMember_result.e") | Some _x6263 -> _x6263
  method set_e _x6263 = _e <- Some _x6263
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isGroupMember_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isGroupMember_result (iprot : Protocol.t) =
  let _str6266 = new isGroupMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6267,_id6268) = iprot#readFieldBegin in
        if _t6267 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6268 with 
          | 0 -> (if _t6267 = Protocol.T_BOOL then
              _str6266#set_success iprot#readBool
            else
              iprot#skip _t6267)
          | 1 -> (if _t6267 = Protocol.T_STRUCT then
              _str6266#set_e (read_talkException iprot)
            else
              iprot#skip _t6267)
          | _ -> iprot#skip _t6267);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6266

class isInContact_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "isInContact_args.mid") | Some _x6269 -> _x6269
  method set_mid _x6269 = _mid <- Some _x6269
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isInContact_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isInContact_args (iprot : Protocol.t) =
  let _str6272 = new isInContact_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6273,_id6274) = iprot#readFieldBegin in
        if _t6273 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6274 with 
          | 2 -> (if _t6273 = Protocol.T_STRING then
              _str6272#set_mid iprot#readString
            else
              iprot#skip _t6273)
          | _ -> iprot#skip _t6273);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6272

class isInContact_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "isInContact_result.success") | Some _x6275 -> _x6275
  method set_success _x6275 = _success <- Some _x6275
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "isInContact_result.e") | Some _x6276 -> _x6276
  method set_e _x6276 = _e <- Some _x6276
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isInContact_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isInContact_result (iprot : Protocol.t) =
  let _str6279 = new isInContact_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6280,_id6281) = iprot#readFieldBegin in
        if _t6280 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6281 with 
          | 0 -> (if _t6280 = Protocol.T_BOOL then
              _str6279#set_success iprot#readBool
            else
              iprot#skip _t6280)
          | 1 -> (if _t6280 = Protocol.T_STRUCT then
              _str6279#set_e (read_talkException iprot)
            else
              iprot#skip _t6280)
          | _ -> iprot#skip _t6280);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6279

class registerChannelCP_args =
object (self)
  val mutable _cpId : string option = None
  method get_cpId = _cpId
  method grab_cpId = match _cpId with None->raise (Field_empty "registerChannelCP_args.cpId") | Some _x6282 -> _x6282
  method set_cpId _x6282 = _cpId <- Some _x6282
  method unset_cpId = _cpId <- None
  method reset_cpId = _cpId <- None

  val mutable _registerPassword : string option = None
  method get_registerPassword = _registerPassword
  method grab_registerPassword = match _registerPassword with None->raise (Field_empty "registerChannelCP_args.registerPassword") | Some _x6283 -> _x6283
  method set_registerPassword _x6283 = _registerPassword <- Some _x6283
  method unset_registerPassword = _registerPassword <- None
  method reset_registerPassword = _registerPassword <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerChannelCP_args";
    (match _cpId with None -> () | Some _v -> 
      oprot#writeFieldBegin("cpId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _registerPassword with None -> () | Some _v -> 
      oprot#writeFieldBegin("registerPassword",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerChannelCP_args (iprot : Protocol.t) =
  let _str6286 = new registerChannelCP_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6287,_id6288) = iprot#readFieldBegin in
        if _t6287 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6288 with 
          | 2 -> (if _t6287 = Protocol.T_STRING then
              _str6286#set_cpId iprot#readString
            else
              iprot#skip _t6287)
          | 3 -> (if _t6287 = Protocol.T_STRING then
              _str6286#set_registerPassword iprot#readString
            else
              iprot#skip _t6287)
          | _ -> iprot#skip _t6287);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6286

class registerChannelCP_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerChannelCP_result.success") | Some _x6289 -> _x6289
  method set_success _x6289 = _success <- Some _x6289
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerChannelCP_result.e") | Some _x6290 -> _x6290
  method set_e _x6290 = _e <- Some _x6290
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerChannelCP_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerChannelCP_result (iprot : Protocol.t) =
  let _str6293 = new registerChannelCP_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6294,_id6295) = iprot#readFieldBegin in
        if _t6294 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6295 with 
          | 0 -> (if _t6294 = Protocol.T_STRING then
              _str6293#set_success iprot#readString
            else
              iprot#skip _t6294)
          | 1 -> (if _t6294 = Protocol.T_STRUCT then
              _str6293#set_e (read_talkException iprot)
            else
              iprot#skip _t6294)
          | _ -> iprot#skip _t6294);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6293

class removeNotificationStatus_args =
object (self)
  val mutable _notificationStatus : NotificationStatus.t option = None
  method get_notificationStatus = _notificationStatus
  method grab_notificationStatus = match _notificationStatus with None->raise (Field_empty "removeNotificationStatus_args.notificationStatus") | Some _x6296 -> _x6296
  method set_notificationStatus _x6296 = _notificationStatus <- Some _x6296
  method unset_notificationStatus = _notificationStatus <- None
  method reset_notificationStatus = _notificationStatus <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeNotificationStatus_args";
    (match _notificationStatus with None -> () | Some _v -> 
      oprot#writeFieldBegin("notificationStatus",Protocol.T_I32,2);
      oprot#writeI32(NotificationStatus.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeNotificationStatus_args (iprot : Protocol.t) =
  let _str6299 = new removeNotificationStatus_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6300,_id6301) = iprot#readFieldBegin in
        if _t6300 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6301 with 
          | 2 -> (if _t6300 = Protocol.T_I32 then
              _str6299#set_notificationStatus (NotificationStatus.of_i iprot#readI32)
            else
              iprot#skip _t6300)
          | _ -> iprot#skip _t6300);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6299

class removeNotificationStatus_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeNotificationStatus_result.e") | Some _x6302 -> _x6302
  method set_e _x6302 = _e <- Some _x6302
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeNotificationStatus_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeNotificationStatus_result (iprot : Protocol.t) =
  let _str6305 = new removeNotificationStatus_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6306,_id6307) = iprot#readFieldBegin in
        if _t6306 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6307 with 
          | 1 -> (if _t6306 = Protocol.T_STRUCT then
              _str6305#set_e (read_talkException iprot)
            else
              iprot#skip _t6306)
          | _ -> iprot#skip _t6306);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6305

class sendMessageForChannel_args =
object (self)
  val mutable _message : message option = None
  method get_message = _message
  method grab_message = match _message with None->raise (Field_empty "sendMessageForChannel_args.message") | Some _x6308 -> _x6308
  method set_message _x6308 = _message <- Some _x6308
  method unset_message = _message <- None
  method reset_message = _message <- None

  method copy =
      let _new = Oo.copy self in
      if _message <> None then
        _new#set_message self#grab_message#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageForChannel_args";
    (match _message with None -> () | Some _v -> 
      oprot#writeFieldBegin("message",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageForChannel_args (iprot : Protocol.t) =
  let _str6311 = new sendMessageForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6312,_id6313) = iprot#readFieldBegin in
        if _t6312 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6313 with 
          | 2 -> (if _t6312 = Protocol.T_STRUCT then
              _str6311#set_message (read_message iprot)
            else
              iprot#skip _t6312)
          | _ -> iprot#skip _t6312);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6311

class sendMessageForChannel_result =
object (self)
  val mutable _success : message option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendMessageForChannel_result.success") | Some _x6314 -> _x6314
  method set_success _x6314 = _success <- Some _x6314
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendMessageForChannel_result.e") | Some _x6315 -> _x6315
  method set_e _x6315 = _e <- Some _x6315
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageForChannel_result (iprot : Protocol.t) =
  let _str6318 = new sendMessageForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6319,_id6320) = iprot#readFieldBegin in
        if _t6319 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6320 with 
          | 0 -> (if _t6319 = Protocol.T_STRUCT then
              _str6318#set_success (read_message iprot)
            else
              iprot#skip _t6319)
          | 1 -> (if _t6319 = Protocol.T_STRUCT then
              _str6318#set_e (read_talkException iprot)
            else
              iprot#skip _t6319)
          | _ -> iprot#skip _t6319);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6318

class sendPinCodeOperation_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "sendPinCodeOperation_args.verifier") | Some _x6321 -> _x6321
  method set_verifier _x6321 = _verifier <- Some _x6321
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendPinCodeOperation_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendPinCodeOperation_args (iprot : Protocol.t) =
  let _str6324 = new sendPinCodeOperation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6325,_id6326) = iprot#readFieldBegin in
        if _t6325 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6326 with 
          | 1 -> (if _t6325 = Protocol.T_STRING then
              _str6324#set_verifier iprot#readString
            else
              iprot#skip _t6325)
          | _ -> iprot#skip _t6325);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6324

class sendPinCodeOperation_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendPinCodeOperation_result.e") | Some _x6327 -> _x6327
  method set_e _x6327 = _e <- Some _x6327
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendPinCodeOperation_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendPinCodeOperation_result (iprot : Protocol.t) =
  let _str6330 = new sendPinCodeOperation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6331,_id6332) = iprot#readFieldBegin in
        if _t6331 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6332 with 
          | 1 -> (if _t6331 = Protocol.T_STRUCT then
              _str6330#set_e (read_talkException iprot)
            else
              iprot#skip _t6331)
          | _ -> iprot#skip _t6331);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6330

class updateProfileAttributeForChannel_args =
object (self)
  val mutable _profileAttribute : ProfileAttribute.t option = None
  method get_profileAttribute = _profileAttribute
  method grab_profileAttribute = match _profileAttribute with None->raise (Field_empty "updateProfileAttributeForChannel_args.profileAttribute") | Some _x6333 -> _x6333
  method set_profileAttribute _x6333 = _profileAttribute <- Some _x6333
  method unset_profileAttribute = _profileAttribute <- None
  method reset_profileAttribute = _profileAttribute <- None

  val mutable _value : string option = None
  method get_value = _value
  method grab_value = match _value with None->raise (Field_empty "updateProfileAttributeForChannel_args.value") | Some _x6334 -> _x6334
  method set_value _x6334 = _value <- Some _x6334
  method unset_value = _value <- None
  method reset_value = _value <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateProfileAttributeForChannel_args";
    (match _profileAttribute with None -> () | Some _v -> 
      oprot#writeFieldBegin("profileAttribute",Protocol.T_I32,2);
      oprot#writeI32(ProfileAttribute.to_i _v);
      oprot#writeFieldEnd
    );
    (match _value with None -> () | Some _v -> 
      oprot#writeFieldBegin("value",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateProfileAttributeForChannel_args (iprot : Protocol.t) =
  let _str6337 = new updateProfileAttributeForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6338,_id6339) = iprot#readFieldBegin in
        if _t6338 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6339 with 
          | 2 -> (if _t6338 = Protocol.T_I32 then
              _str6337#set_profileAttribute (ProfileAttribute.of_i iprot#readI32)
            else
              iprot#skip _t6338)
          | 3 -> (if _t6338 = Protocol.T_STRING then
              _str6337#set_value iprot#readString
            else
              iprot#skip _t6338)
          | _ -> iprot#skip _t6338);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6337

class updateProfileAttributeForChannel_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateProfileAttributeForChannel_result.e") | Some _x6340 -> _x6340
  method set_e _x6340 = _e <- Some _x6340
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateProfileAttributeForChannel_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateProfileAttributeForChannel_result (iprot : Protocol.t) =
  let _str6343 = new updateProfileAttributeForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t6344,_id6345) = iprot#readFieldBegin in
        if _t6344 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id6345 with 
          | 1 -> (if _t6344 = Protocol.T_STRUCT then
              _str6343#set_e (read_talkException iprot)
            else
              iprot#skip _t6344)
          | _ -> iprot#skip _t6344);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str6343

class virtual iface =
object (self)
  method virtual activeBuddySubscriberCount : Int64.t
  method virtual addOperationForChannel : OpType.t option -> string option -> string option -> string option -> unit
  method virtual displayBuddySubscriberCount : Int64.t
  method virtual findContactByUseridWithoutAbuseBlockForChannel : string option -> contact
  method virtual getAllContactIdsForChannel : string list
  method virtual getCompactContacts : Int64.t option -> compactContact list
  method virtual getContactsForChannel : string list option -> contact list
  method virtual getDisplayName : string option -> string
  method virtual getFavoriteMidsForChannel : string list
  method virtual getFriendMids : string list
  method virtual getGroupMemberMids : string option -> string list
  method virtual getGroupsForChannel : string list option -> group list
  method virtual getIdentityCredential : identityCredential
  method virtual getJoinedGroupIdsForChannel : string list
  method virtual getMetaProfile : metaProfile
  method virtual getMid : string
  method virtual getPrimaryClientForChannel : simpleChannelClient
  method virtual getProfileForChannel : profile
  method virtual getSimpleChannelContacts : string list option -> simpleChannelContact list
  method virtual getUserCountryForBilling : string option -> string option -> string
  method virtual getUserCreateTime : Int64.t
  method virtual getUserIdentities : (RegistrationType.t,string) Hashtbl.t
  method virtual getUserLanguage : string
  method virtual getUserMidsWhoAddedMe : string list
  method virtual isGroupMember : string option -> bool
  method virtual isInContact : string option -> bool
  method virtual registerChannelCP : string option -> string option -> string
  method virtual removeNotificationStatus : NotificationStatus.t option -> unit
  method virtual sendMessageForChannel : message option -> message
  method virtual sendPinCodeOperation : string option -> unit
  method virtual updateProfileAttributeForChannel : ProfileAttribute.t option -> string option -> unit
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method activeBuddySubscriberCount  = 
    self#send_activeBuddySubscriberCount;
    self#recv_activeBuddySubscriberCount
  method private send_activeBuddySubscriberCount  = 
    oprot#writeMessageBegin ("activeBuddySubscriberCount", Protocol.CALL, seqid);
    let args = new activeBuddySubscriberCount_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_activeBuddySubscriberCount  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_activeBuddySubscriberCount_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "activeBuddySubscriberCount failed: unknown result")))
  method addOperationForChannel opType param1 param2 param3 = 
    self#send_addOperationForChannel opType param1 param2 param3;
    self#recv_addOperationForChannel
  method private send_addOperationForChannel opType param1 param2 param3 = 
    oprot#writeMessageBegin ("addOperationForChannel", Protocol.CALL, seqid);
    let args = new addOperationForChannel_args in
      args#set_opType opType;
      args#set_param1 param1;
      args#set_param2 param2;
      args#set_param3 param3;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_addOperationForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_addOperationForChannel_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method displayBuddySubscriberCount  = 
    self#send_displayBuddySubscriberCount;
    self#recv_displayBuddySubscriberCount
  method private send_displayBuddySubscriberCount  = 
    oprot#writeMessageBegin ("displayBuddySubscriberCount", Protocol.CALL, seqid);
    let args = new displayBuddySubscriberCount_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_displayBuddySubscriberCount  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_displayBuddySubscriberCount_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "displayBuddySubscriberCount failed: unknown result")))
  method findContactByUseridWithoutAbuseBlockForChannel userid = 
    self#send_findContactByUseridWithoutAbuseBlockForChannel userid;
    self#recv_findContactByUseridWithoutAbuseBlockForChannel
  method private send_findContactByUseridWithoutAbuseBlockForChannel userid = 
    oprot#writeMessageBegin ("findContactByUseridWithoutAbuseBlockForChannel", Protocol.CALL, seqid);
    let args = new findContactByUseridWithoutAbuseBlockForChannel_args in
      args#set_userid userid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findContactByUseridWithoutAbuseBlockForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findContactByUseridWithoutAbuseBlockForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findContactByUseridWithoutAbuseBlockForChannel failed: unknown result")))
  method getAllContactIdsForChannel  = 
    self#send_getAllContactIdsForChannel;
    self#recv_getAllContactIdsForChannel
  method private send_getAllContactIdsForChannel  = 
    oprot#writeMessageBegin ("getAllContactIdsForChannel", Protocol.CALL, seqid);
    let args = new getAllContactIdsForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getAllContactIdsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getAllContactIdsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getAllContactIdsForChannel failed: unknown result")))
  method getCompactContacts lastModifiedTimestamp = 
    self#send_getCompactContacts lastModifiedTimestamp;
    self#recv_getCompactContacts
  method private send_getCompactContacts lastModifiedTimestamp = 
    oprot#writeMessageBegin ("getCompactContacts", Protocol.CALL, seqid);
    let args = new getCompactContacts_args in
      args#set_lastModifiedTimestamp lastModifiedTimestamp;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCompactContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCompactContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCompactContacts failed: unknown result")))
  method getContactsForChannel ids = 
    self#send_getContactsForChannel ids;
    self#recv_getContactsForChannel
  method private send_getContactsForChannel ids = 
    oprot#writeMessageBegin ("getContactsForChannel", Protocol.CALL, seqid);
    let args = new getContactsForChannel_args in
      args#set_ids ids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getContactsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getContactsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getContactsForChannel failed: unknown result")))
  method getDisplayName mid = 
    self#send_getDisplayName mid;
    self#recv_getDisplayName
  method private send_getDisplayName mid = 
    oprot#writeMessageBegin ("getDisplayName", Protocol.CALL, seqid);
    let args = new getDisplayName_args in
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getDisplayName  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getDisplayName_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getDisplayName failed: unknown result")))
  method getFavoriteMidsForChannel  = 
    self#send_getFavoriteMidsForChannel;
    self#recv_getFavoriteMidsForChannel
  method private send_getFavoriteMidsForChannel  = 
    oprot#writeMessageBegin ("getFavoriteMidsForChannel", Protocol.CALL, seqid);
    let args = new getFavoriteMidsForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getFavoriteMidsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getFavoriteMidsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getFavoriteMidsForChannel failed: unknown result")))
  method getFriendMids  = 
    self#send_getFriendMids;
    self#recv_getFriendMids
  method private send_getFriendMids  = 
    oprot#writeMessageBegin ("getFriendMids", Protocol.CALL, seqid);
    let args = new getFriendMids_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getFriendMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getFriendMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getFriendMids failed: unknown result")))
  method getGroupMemberMids groupId = 
    self#send_getGroupMemberMids groupId;
    self#recv_getGroupMemberMids
  method private send_getGroupMemberMids groupId = 
    oprot#writeMessageBegin ("getGroupMemberMids", Protocol.CALL, seqid);
    let args = new getGroupMemberMids_args in
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupMemberMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupMemberMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupMemberMids failed: unknown result")))
  method getGroupsForChannel groupIds = 
    self#send_getGroupsForChannel groupIds;
    self#recv_getGroupsForChannel
  method private send_getGroupsForChannel groupIds = 
    oprot#writeMessageBegin ("getGroupsForChannel", Protocol.CALL, seqid);
    let args = new getGroupsForChannel_args in
      args#set_groupIds groupIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupsForChannel failed: unknown result")))
  method getIdentityCredential  = 
    self#send_getIdentityCredential;
    self#recv_getIdentityCredential
  method private send_getIdentityCredential  = 
    oprot#writeMessageBegin ("getIdentityCredential", Protocol.CALL, seqid);
    let args = new getIdentityCredential_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getIdentityCredential_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getIdentityCredential failed: unknown result")))
  method getJoinedGroupIdsForChannel  = 
    self#send_getJoinedGroupIdsForChannel;
    self#recv_getJoinedGroupIdsForChannel
  method private send_getJoinedGroupIdsForChannel  = 
    oprot#writeMessageBegin ("getJoinedGroupIdsForChannel", Protocol.CALL, seqid);
    let args = new getJoinedGroupIdsForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getJoinedGroupIdsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getJoinedGroupIdsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getJoinedGroupIdsForChannel failed: unknown result")))
  method getMetaProfile  = 
    self#send_getMetaProfile;
    self#recv_getMetaProfile
  method private send_getMetaProfile  = 
    oprot#writeMessageBegin ("getMetaProfile", Protocol.CALL, seqid);
    let args = new getMetaProfile_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMetaProfile  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMetaProfile_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMetaProfile failed: unknown result")))
  method getMid  = 
    self#send_getMid;
    self#recv_getMid
  method private send_getMid  = 
    oprot#writeMessageBegin ("getMid", Protocol.CALL, seqid);
    let args = new getMid_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMid failed: unknown result")))
  method getPrimaryClientForChannel  = 
    self#send_getPrimaryClientForChannel;
    self#recv_getPrimaryClientForChannel
  method private send_getPrimaryClientForChannel  = 
    oprot#writeMessageBegin ("getPrimaryClientForChannel", Protocol.CALL, seqid);
    let args = new getPrimaryClientForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPrimaryClientForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPrimaryClientForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPrimaryClientForChannel failed: unknown result")))
  method getProfileForChannel  = 
    self#send_getProfileForChannel;
    self#recv_getProfileForChannel
  method private send_getProfileForChannel  = 
    oprot#writeMessageBegin ("getProfileForChannel", Protocol.CALL, seqid);
    let args = new getProfileForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProfileForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProfileForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProfileForChannel failed: unknown result")))
  method getSimpleChannelContacts ids = 
    self#send_getSimpleChannelContacts ids;
    self#recv_getSimpleChannelContacts
  method private send_getSimpleChannelContacts ids = 
    oprot#writeMessageBegin ("getSimpleChannelContacts", Protocol.CALL, seqid);
    let args = new getSimpleChannelContacts_args in
      args#set_ids ids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSimpleChannelContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSimpleChannelContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSimpleChannelContacts failed: unknown result")))
  method getUserCountryForBilling country remoteIp = 
    self#send_getUserCountryForBilling country remoteIp;
    self#recv_getUserCountryForBilling
  method private send_getUserCountryForBilling country remoteIp = 
    oprot#writeMessageBegin ("getUserCountryForBilling", Protocol.CALL, seqid);
    let args = new getUserCountryForBilling_args in
      args#set_country country;
      args#set_remoteIp remoteIp;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserCountryForBilling  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserCountryForBilling_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserCountryForBilling failed: unknown result")))
  method getUserCreateTime  = 
    self#send_getUserCreateTime;
    self#recv_getUserCreateTime
  method private send_getUserCreateTime  = 
    oprot#writeMessageBegin ("getUserCreateTime", Protocol.CALL, seqid);
    let args = new getUserCreateTime_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserCreateTime  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserCreateTime_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserCreateTime failed: unknown result")))
  method getUserIdentities  = 
    self#send_getUserIdentities;
    self#recv_getUserIdentities
  method private send_getUserIdentities  = 
    oprot#writeMessageBegin ("getUserIdentities", Protocol.CALL, seqid);
    let args = new getUserIdentities_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserIdentities  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserIdentities_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserIdentities failed: unknown result")))
  method getUserLanguage  = 
    self#send_getUserLanguage;
    self#recv_getUserLanguage
  method private send_getUserLanguage  = 
    oprot#writeMessageBegin ("getUserLanguage", Protocol.CALL, seqid);
    let args = new getUserLanguage_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserLanguage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserLanguage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserLanguage failed: unknown result")))
  method getUserMidsWhoAddedMe  = 
    self#send_getUserMidsWhoAddedMe;
    self#recv_getUserMidsWhoAddedMe
  method private send_getUserMidsWhoAddedMe  = 
    oprot#writeMessageBegin ("getUserMidsWhoAddedMe", Protocol.CALL, seqid);
    let args = new getUserMidsWhoAddedMe_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserMidsWhoAddedMe  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserMidsWhoAddedMe_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserMidsWhoAddedMe failed: unknown result")))
  method isGroupMember groupId = 
    self#send_isGroupMember groupId;
    self#recv_isGroupMember
  method private send_isGroupMember groupId = 
    oprot#writeMessageBegin ("isGroupMember", Protocol.CALL, seqid);
    let args = new isGroupMember_args in
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_isGroupMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_isGroupMember_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "isGroupMember failed: unknown result")))
  method isInContact mid = 
    self#send_isInContact mid;
    self#recv_isInContact
  method private send_isInContact mid = 
    oprot#writeMessageBegin ("isInContact", Protocol.CALL, seqid);
    let args = new isInContact_args in
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_isInContact  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_isInContact_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "isInContact failed: unknown result")))
  method registerChannelCP cpId registerPassword = 
    self#send_registerChannelCP cpId registerPassword;
    self#recv_registerChannelCP
  method private send_registerChannelCP cpId registerPassword = 
    oprot#writeMessageBegin ("registerChannelCP", Protocol.CALL, seqid);
    let args = new registerChannelCP_args in
      args#set_cpId cpId;
      args#set_registerPassword registerPassword;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerChannelCP  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerChannelCP_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerChannelCP failed: unknown result")))
  method removeNotificationStatus notificationStatus = 
    self#send_removeNotificationStatus notificationStatus;
    self#recv_removeNotificationStatus
  method private send_removeNotificationStatus notificationStatus = 
    oprot#writeMessageBegin ("removeNotificationStatus", Protocol.CALL, seqid);
    let args = new removeNotificationStatus_args in
      args#set_notificationStatus notificationStatus;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeNotificationStatus  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeNotificationStatus_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method sendMessageForChannel message = 
    self#send_sendMessageForChannel message;
    self#recv_sendMessageForChannel
  method private send_sendMessageForChannel message = 
    oprot#writeMessageBegin ("sendMessageForChannel", Protocol.CALL, seqid);
    let args = new sendMessageForChannel_args in
      args#set_message message;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendMessageForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendMessageForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendMessageForChannel failed: unknown result")))
  method sendPinCodeOperation verifier = 
    self#send_sendPinCodeOperation verifier;
    self#recv_sendPinCodeOperation
  method private send_sendPinCodeOperation verifier = 
    oprot#writeMessageBegin ("sendPinCodeOperation", Protocol.CALL, seqid);
    let args = new sendPinCodeOperation_args in
      args#set_verifier verifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendPinCodeOperation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendPinCodeOperation_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateProfileAttributeForChannel profileAttribute value = 
    self#send_updateProfileAttributeForChannel profileAttribute value;
    self#recv_updateProfileAttributeForChannel
  method private send_updateProfileAttributeForChannel profileAttribute value = 
    oprot#writeMessageBegin ("updateProfileAttributeForChannel", Protocol.CALL, seqid);
    let args = new updateProfileAttributeForChannel_args in
      args#set_profileAttribute profileAttribute;
      args#set_value value;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateProfileAttributeForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateProfileAttributeForChannel_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 31
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_activeBuddySubscriberCount (seqid, iprot, oprot) =
    let _ = read_activeBuddySubscriberCount_args iprot in
      iprot#readMessageEnd;
      let result = new activeBuddySubscriberCount_result in
        (try
          result#set_success (handler#activeBuddySubscriberCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("activeBuddySubscriberCount", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_addOperationForChannel (seqid, iprot, oprot) =
    let args = read_addOperationForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new addOperationForChannel_result in
        (try
          (handler#addOperationForChannel args#get_opType args#get_param1 args#get_param2 args#get_param3);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("addOperationForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_displayBuddySubscriberCount (seqid, iprot, oprot) =
    let _ = read_displayBuddySubscriberCount_args iprot in
      iprot#readMessageEnd;
      let result = new displayBuddySubscriberCount_result in
        (try
          result#set_success (handler#displayBuddySubscriberCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("displayBuddySubscriberCount", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findContactByUseridWithoutAbuseBlockForChannel (seqid, iprot, oprot) =
    let args = read_findContactByUseridWithoutAbuseBlockForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new findContactByUseridWithoutAbuseBlockForChannel_result in
        (try
          result#set_success (handler#findContactByUseridWithoutAbuseBlockForChannel args#get_userid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findContactByUseridWithoutAbuseBlockForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getAllContactIdsForChannel (seqid, iprot, oprot) =
    let _ = read_getAllContactIdsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getAllContactIdsForChannel_result in
        (try
          result#set_success (handler#getAllContactIdsForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getAllContactIdsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCompactContacts (seqid, iprot, oprot) =
    let args = read_getCompactContacts_args iprot in
      iprot#readMessageEnd;
      let result = new getCompactContacts_result in
        (try
          result#set_success (handler#getCompactContacts args#get_lastModifiedTimestamp);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCompactContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getContactsForChannel (seqid, iprot, oprot) =
    let args = read_getContactsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getContactsForChannel_result in
        (try
          result#set_success (handler#getContactsForChannel args#get_ids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getContactsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getDisplayName (seqid, iprot, oprot) =
    let args = read_getDisplayName_args iprot in
      iprot#readMessageEnd;
      let result = new getDisplayName_result in
        (try
          result#set_success (handler#getDisplayName args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getDisplayName", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getFavoriteMidsForChannel (seqid, iprot, oprot) =
    let _ = read_getFavoriteMidsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getFavoriteMidsForChannel_result in
        (try
          result#set_success (handler#getFavoriteMidsForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getFavoriteMidsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getFriendMids (seqid, iprot, oprot) =
    let _ = read_getFriendMids_args iprot in
      iprot#readMessageEnd;
      let result = new getFriendMids_result in
        (try
          result#set_success (handler#getFriendMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getFriendMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupMemberMids (seqid, iprot, oprot) =
    let args = read_getGroupMemberMids_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupMemberMids_result in
        (try
          result#set_success (handler#getGroupMemberMids args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupMemberMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupsForChannel (seqid, iprot, oprot) =
    let args = read_getGroupsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupsForChannel_result in
        (try
          result#set_success (handler#getGroupsForChannel args#get_groupIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getIdentityCredential (seqid, iprot, oprot) =
    let _ = read_getIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new getIdentityCredential_result in
        (try
          result#set_success (handler#getIdentityCredential);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getJoinedGroupIdsForChannel (seqid, iprot, oprot) =
    let _ = read_getJoinedGroupIdsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getJoinedGroupIdsForChannel_result in
        (try
          result#set_success (handler#getJoinedGroupIdsForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getJoinedGroupIdsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMetaProfile (seqid, iprot, oprot) =
    let _ = read_getMetaProfile_args iprot in
      iprot#readMessageEnd;
      let result = new getMetaProfile_result in
        (try
          result#set_success (handler#getMetaProfile);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMetaProfile", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMid (seqid, iprot, oprot) =
    let _ = read_getMid_args iprot in
      iprot#readMessageEnd;
      let result = new getMid_result in
        (try
          result#set_success (handler#getMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPrimaryClientForChannel (seqid, iprot, oprot) =
    let _ = read_getPrimaryClientForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getPrimaryClientForChannel_result in
        (try
          result#set_success (handler#getPrimaryClientForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPrimaryClientForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProfileForChannel (seqid, iprot, oprot) =
    let _ = read_getProfileForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getProfileForChannel_result in
        (try
          result#set_success (handler#getProfileForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getProfileForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSimpleChannelContacts (seqid, iprot, oprot) =
    let args = read_getSimpleChannelContacts_args iprot in
      iprot#readMessageEnd;
      let result = new getSimpleChannelContacts_result in
        (try
          result#set_success (handler#getSimpleChannelContacts args#get_ids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSimpleChannelContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserCountryForBilling (seqid, iprot, oprot) =
    let args = read_getUserCountryForBilling_args iprot in
      iprot#readMessageEnd;
      let result = new getUserCountryForBilling_result in
        (try
          result#set_success (handler#getUserCountryForBilling args#get_country args#get_remoteIp);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserCountryForBilling", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserCreateTime (seqid, iprot, oprot) =
    let _ = read_getUserCreateTime_args iprot in
      iprot#readMessageEnd;
      let result = new getUserCreateTime_result in
        (try
          result#set_success (handler#getUserCreateTime);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserCreateTime", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserIdentities (seqid, iprot, oprot) =
    let _ = read_getUserIdentities_args iprot in
      iprot#readMessageEnd;
      let result = new getUserIdentities_result in
        (try
          result#set_success (handler#getUserIdentities);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserIdentities", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserLanguage (seqid, iprot, oprot) =
    let _ = read_getUserLanguage_args iprot in
      iprot#readMessageEnd;
      let result = new getUserLanguage_result in
        (try
          result#set_success (handler#getUserLanguage);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserLanguage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserMidsWhoAddedMe (seqid, iprot, oprot) =
    let _ = read_getUserMidsWhoAddedMe_args iprot in
      iprot#readMessageEnd;
      let result = new getUserMidsWhoAddedMe_result in
        (try
          result#set_success (handler#getUserMidsWhoAddedMe);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserMidsWhoAddedMe", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_isGroupMember (seqid, iprot, oprot) =
    let args = read_isGroupMember_args iprot in
      iprot#readMessageEnd;
      let result = new isGroupMember_result in
        (try
          result#set_success (handler#isGroupMember args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("isGroupMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_isInContact (seqid, iprot, oprot) =
    let args = read_isInContact_args iprot in
      iprot#readMessageEnd;
      let result = new isInContact_result in
        (try
          result#set_success (handler#isInContact args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("isInContact", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerChannelCP (seqid, iprot, oprot) =
    let args = read_registerChannelCP_args iprot in
      iprot#readMessageEnd;
      let result = new registerChannelCP_result in
        (try
          result#set_success (handler#registerChannelCP args#get_cpId args#get_registerPassword);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerChannelCP", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeNotificationStatus (seqid, iprot, oprot) =
    let args = read_removeNotificationStatus_args iprot in
      iprot#readMessageEnd;
      let result = new removeNotificationStatus_result in
        (try
          (handler#removeNotificationStatus args#get_notificationStatus);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeNotificationStatus", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendMessageForChannel (seqid, iprot, oprot) =
    let args = read_sendMessageForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new sendMessageForChannel_result in
        (try
          result#set_success (handler#sendMessageForChannel args#get_message);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendMessageForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendPinCodeOperation (seqid, iprot, oprot) =
    let args = read_sendPinCodeOperation_args iprot in
      iprot#readMessageEnd;
      let result = new sendPinCodeOperation_result in
        (try
          (handler#sendPinCodeOperation args#get_verifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendPinCodeOperation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateProfileAttributeForChannel (seqid, iprot, oprot) =
    let args = read_updateProfileAttributeForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new updateProfileAttributeForChannel_result in
        (try
          (handler#updateProfileAttributeForChannel args#get_profileAttribute args#get_value);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateProfileAttributeForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "activeBuddySubscriberCount" self#process_activeBuddySubscriberCount;
    Hashtbl.add processMap "addOperationForChannel" self#process_addOperationForChannel;
    Hashtbl.add processMap "displayBuddySubscriberCount" self#process_displayBuddySubscriberCount;
    Hashtbl.add processMap "findContactByUseridWithoutAbuseBlockForChannel" self#process_findContactByUseridWithoutAbuseBlockForChannel;
    Hashtbl.add processMap "getAllContactIdsForChannel" self#process_getAllContactIdsForChannel;
    Hashtbl.add processMap "getCompactContacts" self#process_getCompactContacts;
    Hashtbl.add processMap "getContactsForChannel" self#process_getContactsForChannel;
    Hashtbl.add processMap "getDisplayName" self#process_getDisplayName;
    Hashtbl.add processMap "getFavoriteMidsForChannel" self#process_getFavoriteMidsForChannel;
    Hashtbl.add processMap "getFriendMids" self#process_getFriendMids;
    Hashtbl.add processMap "getGroupMemberMids" self#process_getGroupMemberMids;
    Hashtbl.add processMap "getGroupsForChannel" self#process_getGroupsForChannel;
    Hashtbl.add processMap "getIdentityCredential" self#process_getIdentityCredential;
    Hashtbl.add processMap "getJoinedGroupIdsForChannel" self#process_getJoinedGroupIdsForChannel;
    Hashtbl.add processMap "getMetaProfile" self#process_getMetaProfile;
    Hashtbl.add processMap "getMid" self#process_getMid;
    Hashtbl.add processMap "getPrimaryClientForChannel" self#process_getPrimaryClientForChannel;
    Hashtbl.add processMap "getProfileForChannel" self#process_getProfileForChannel;
    Hashtbl.add processMap "getSimpleChannelContacts" self#process_getSimpleChannelContacts;
    Hashtbl.add processMap "getUserCountryForBilling" self#process_getUserCountryForBilling;
    Hashtbl.add processMap "getUserCreateTime" self#process_getUserCreateTime;
    Hashtbl.add processMap "getUserIdentities" self#process_getUserIdentities;
    Hashtbl.add processMap "getUserLanguage" self#process_getUserLanguage;
    Hashtbl.add processMap "getUserMidsWhoAddedMe" self#process_getUserMidsWhoAddedMe;
    Hashtbl.add processMap "isGroupMember" self#process_isGroupMember;
    Hashtbl.add processMap "isInContact" self#process_isInContact;
    Hashtbl.add processMap "registerChannelCP" self#process_registerChannelCP;
    Hashtbl.add processMap "removeNotificationStatus" self#process_removeNotificationStatus;
    Hashtbl.add processMap "sendMessageForChannel" self#process_sendMessageForChannel;
    Hashtbl.add processMap "sendPinCodeOperation" self#process_sendPinCodeOperation;
    Hashtbl.add processMap "updateProfileAttributeForChannel" self#process_updateProfileAttributeForChannel;
end

