(*
 Autogenerated by Thrift Compiler (0.13.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class activeBuddySubscriberCount_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "activeBuddySubscriberCount_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_activeBuddySubscriberCount_args (iprot : Protocol.t) =
  let _str5273 = new activeBuddySubscriberCount_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5274,_id5275) = iprot#readFieldBegin in
        if _t5274 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5275 with 
          | _ -> iprot#skip _t5274);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5273

class activeBuddySubscriberCount_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "activeBuddySubscriberCount_result.success") | Some _x5276 -> _x5276
  method set_success _x5276 = _success <- Some _x5276
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "activeBuddySubscriberCount_result.e") | Some _x5277 -> _x5277
  method set_e _x5277 = _e <- Some _x5277
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "activeBuddySubscriberCount_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_activeBuddySubscriberCount_result (iprot : Protocol.t) =
  let _str5280 = new activeBuddySubscriberCount_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5281,_id5282) = iprot#readFieldBegin in
        if _t5281 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5282 with 
          | 0 -> (if _t5281 = Protocol.T_I64 then
              _str5280#set_success iprot#readI64
            else
              iprot#skip _t5281)
          | 1 -> (if _t5281 = Protocol.T_STRUCT then
              _str5280#set_e (read_talkException iprot)
            else
              iprot#skip _t5281)
          | _ -> iprot#skip _t5281);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5280

class addOperationForChannel_args =
object (self)
  val mutable _opType : OpType.t option = None
  method get_opType = _opType
  method grab_opType = match _opType with None->raise (Field_empty "addOperationForChannel_args.opType") | Some _x5283 -> _x5283
  method set_opType _x5283 = _opType <- Some _x5283
  method unset_opType = _opType <- None
  method reset_opType = _opType <- None

  val mutable _param1 : string option = None
  method get_param1 = _param1
  method grab_param1 = match _param1 with None->raise (Field_empty "addOperationForChannel_args.param1") | Some _x5284 -> _x5284
  method set_param1 _x5284 = _param1 <- Some _x5284
  method unset_param1 = _param1 <- None
  method reset_param1 = _param1 <- None

  val mutable _param2 : string option = None
  method get_param2 = _param2
  method grab_param2 = match _param2 with None->raise (Field_empty "addOperationForChannel_args.param2") | Some _x5285 -> _x5285
  method set_param2 _x5285 = _param2 <- Some _x5285
  method unset_param2 = _param2 <- None
  method reset_param2 = _param2 <- None

  val mutable _param3 : string option = None
  method get_param3 = _param3
  method grab_param3 = match _param3 with None->raise (Field_empty "addOperationForChannel_args.param3") | Some _x5286 -> _x5286
  method set_param3 _x5286 = _param3 <- Some _x5286
  method unset_param3 = _param3 <- None
  method reset_param3 = _param3 <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addOperationForChannel_args";
    (match _opType with None -> () | Some _v -> 
      oprot#writeFieldBegin("opType",Protocol.T_I32,1);
      oprot#writeI32(OpType.to_i _v);
      oprot#writeFieldEnd
    );
    (match _param1 with None -> () | Some _v -> 
      oprot#writeFieldBegin("param1",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _param2 with None -> () | Some _v -> 
      oprot#writeFieldBegin("param2",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _param3 with None -> () | Some _v -> 
      oprot#writeFieldBegin("param3",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addOperationForChannel_args (iprot : Protocol.t) =
  let _str5289 = new addOperationForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5290,_id5291) = iprot#readFieldBegin in
        if _t5290 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5291 with 
          | 1 -> (if _t5290 = Protocol.T_I32 then
              _str5289#set_opType (OpType.of_i iprot#readI32)
            else
              iprot#skip _t5290)
          | 2 -> (if _t5290 = Protocol.T_STRING then
              _str5289#set_param1 iprot#readString
            else
              iprot#skip _t5290)
          | 3 -> (if _t5290 = Protocol.T_STRING then
              _str5289#set_param2 iprot#readString
            else
              iprot#skip _t5290)
          | 4 -> (if _t5290 = Protocol.T_STRING then
              _str5289#set_param3 iprot#readString
            else
              iprot#skip _t5290)
          | _ -> iprot#skip _t5290);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5289

class addOperationForChannel_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "addOperationForChannel_result.e") | Some _x5292 -> _x5292
  method set_e _x5292 = _e <- Some _x5292
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addOperationForChannel_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addOperationForChannel_result (iprot : Protocol.t) =
  let _str5295 = new addOperationForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5296,_id5297) = iprot#readFieldBegin in
        if _t5296 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5297 with 
          | 1 -> (if _t5296 = Protocol.T_STRUCT then
              _str5295#set_e (read_talkException iprot)
            else
              iprot#skip _t5296)
          | _ -> iprot#skip _t5296);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5295

class displayBuddySubscriberCount_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "displayBuddySubscriberCount_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_displayBuddySubscriberCount_args (iprot : Protocol.t) =
  let _str5300 = new displayBuddySubscriberCount_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5301,_id5302) = iprot#readFieldBegin in
        if _t5301 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5302 with 
          | _ -> iprot#skip _t5301);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5300

class displayBuddySubscriberCount_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "displayBuddySubscriberCount_result.success") | Some _x5303 -> _x5303
  method set_success _x5303 = _success <- Some _x5303
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "displayBuddySubscriberCount_result.e") | Some _x5304 -> _x5304
  method set_e _x5304 = _e <- Some _x5304
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "displayBuddySubscriberCount_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_displayBuddySubscriberCount_result (iprot : Protocol.t) =
  let _str5307 = new displayBuddySubscriberCount_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5308,_id5309) = iprot#readFieldBegin in
        if _t5308 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5309 with 
          | 0 -> (if _t5308 = Protocol.T_I64 then
              _str5307#set_success iprot#readI64
            else
              iprot#skip _t5308)
          | 1 -> (if _t5308 = Protocol.T_STRUCT then
              _str5307#set_e (read_talkException iprot)
            else
              iprot#skip _t5308)
          | _ -> iprot#skip _t5308);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5307

class findContactByUseridWithoutAbuseBlockForChannel_args =
object (self)
  val mutable _userid : string option = None
  method get_userid = _userid
  method grab_userid = match _userid with None->raise (Field_empty "findContactByUseridWithoutAbuseBlockForChannel_args.userid") | Some _x5310 -> _x5310
  method set_userid _x5310 = _userid <- Some _x5310
  method unset_userid = _userid <- None
  method reset_userid = _userid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByUseridWithoutAbuseBlockForChannel_args";
    (match _userid with None -> () | Some _v -> 
      oprot#writeFieldBegin("userid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByUseridWithoutAbuseBlockForChannel_args (iprot : Protocol.t) =
  let _str5313 = new findContactByUseridWithoutAbuseBlockForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5314,_id5315) = iprot#readFieldBegin in
        if _t5314 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5315 with 
          | 2 -> (if _t5314 = Protocol.T_STRING then
              _str5313#set_userid iprot#readString
            else
              iprot#skip _t5314)
          | _ -> iprot#skip _t5314);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5313

class findContactByUseridWithoutAbuseBlockForChannel_result =
object (self)
  val mutable _success : contact option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "findContactByUseridWithoutAbuseBlockForChannel_result.success") | Some _x5316 -> _x5316
  method set_success _x5316 = _success <- Some _x5316
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "findContactByUseridWithoutAbuseBlockForChannel_result.e") | Some _x5317 -> _x5317
  method set_e _x5317 = _e <- Some _x5317
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "findContactByUseridWithoutAbuseBlockForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_findContactByUseridWithoutAbuseBlockForChannel_result (iprot : Protocol.t) =
  let _str5320 = new findContactByUseridWithoutAbuseBlockForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5321,_id5322) = iprot#readFieldBegin in
        if _t5321 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5322 with 
          | 0 -> (if _t5321 = Protocol.T_STRUCT then
              _str5320#set_success (read_contact iprot)
            else
              iprot#skip _t5321)
          | 1 -> (if _t5321 = Protocol.T_STRUCT then
              _str5320#set_e (read_talkException iprot)
            else
              iprot#skip _t5321)
          | _ -> iprot#skip _t5321);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5320

class getAllContactIdsForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllContactIdsForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllContactIdsForChannel_args (iprot : Protocol.t) =
  let _str5325 = new getAllContactIdsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5326,_id5327) = iprot#readFieldBegin in
        if _t5326 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5327 with 
          | _ -> iprot#skip _t5326);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5325

class getAllContactIdsForChannel_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getAllContactIdsForChannel_result.success") | Some _x5328 -> _x5328
  method set_success _x5328 = _success <- Some _x5328
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getAllContactIdsForChannel_result.e") | Some _x5329 -> _x5329
  method set_e _x5329 = _e <- Some _x5329
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllContactIdsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5332 ->         oprot#writeString(_iter5332);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllContactIdsForChannel_result (iprot : Protocol.t) =
  let _str5333 = new getAllContactIdsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5334,_id5335) = iprot#readFieldBegin in
        if _t5334 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5335 with 
          | 0 -> (if _t5334 = Protocol.T_LIST then
              _str5333#set_success 
                (let (_etype5339,_size5336) = iprot#readListBegin in
                  let _con5340 = (Array.to_list (Array.init _size5336 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5340)
            else
              iprot#skip _t5334)
          | 1 -> (if _t5334 = Protocol.T_STRUCT then
              _str5333#set_e (read_talkException iprot)
            else
              iprot#skip _t5334)
          | _ -> iprot#skip _t5334);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5333

class getCompactContacts_args =
object (self)
  val mutable _lastModifiedTimestamp : Int64.t option = None
  method get_lastModifiedTimestamp = _lastModifiedTimestamp
  method grab_lastModifiedTimestamp = match _lastModifiedTimestamp with None->raise (Field_empty "getCompactContacts_args.lastModifiedTimestamp") | Some _x5341 -> _x5341
  method set_lastModifiedTimestamp _x5341 = _lastModifiedTimestamp <- Some _x5341
  method unset_lastModifiedTimestamp = _lastModifiedTimestamp <- None
  method reset_lastModifiedTimestamp = _lastModifiedTimestamp <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactContacts_args";
    (match _lastModifiedTimestamp with None -> () | Some _v -> 
      oprot#writeFieldBegin("lastModifiedTimestamp",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactContacts_args (iprot : Protocol.t) =
  let _str5344 = new getCompactContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5345,_id5346) = iprot#readFieldBegin in
        if _t5345 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5346 with 
          | 2 -> (if _t5345 = Protocol.T_I64 then
              _str5344#set_lastModifiedTimestamp iprot#readI64
            else
              iprot#skip _t5345)
          | _ -> iprot#skip _t5345);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5344

class getCompactContacts_result =
object (self)
  val mutable _success : compactContact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getCompactContacts_result.success") | Some _x5347 -> _x5347
  method set_success _x5347 = _success <- Some _x5347
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getCompactContacts_result.e") | Some _x5348 -> _x5348
  method set_e _x5348 = _e <- Some _x5348
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getCompactContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter5351 ->         _iter5351#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getCompactContacts_result (iprot : Protocol.t) =
  let _str5352 = new getCompactContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5353,_id5354) = iprot#readFieldBegin in
        if _t5353 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5354 with 
          | 0 -> (if _t5353 = Protocol.T_LIST then
              _str5352#set_success 
                (let (_etype5358,_size5355) = iprot#readListBegin in
                  let _con5359 = (Array.to_list (Array.init _size5355 (fun _ -> (read_compactContact iprot)))) in
                    iprot#readListEnd; _con5359)
            else
              iprot#skip _t5353)
          | 1 -> (if _t5353 = Protocol.T_STRUCT then
              _str5352#set_e (read_talkException iprot)
            else
              iprot#skip _t5353)
          | _ -> iprot#skip _t5353);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5352

class getContactsForChannel_args =
object (self)
  val mutable _ids : string list option = None
  method get_ids = _ids
  method grab_ids = match _ids with None->raise (Field_empty "getContactsForChannel_args.ids") | Some _x5360 -> _x5360
  method set_ids _x5360 = _ids <- Some _x5360
  method unset_ids = _ids <- None
  method reset_ids = _ids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContactsForChannel_args";
    (match _ids with None -> () | Some _v -> 
      oprot#writeFieldBegin("ids",Protocol.T_LIST,2);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5363 ->         oprot#writeString(_iter5363);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContactsForChannel_args (iprot : Protocol.t) =
  let _str5364 = new getContactsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5365,_id5366) = iprot#readFieldBegin in
        if _t5365 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5366 with 
          | 2 -> (if _t5365 = Protocol.T_LIST then
              _str5364#set_ids 
                (let (_etype5370,_size5367) = iprot#readListBegin in
                  let _con5371 = (Array.to_list (Array.init _size5367 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5371)
            else
              iprot#skip _t5365)
          | _ -> iprot#skip _t5365);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5364

class getContactsForChannel_result =
object (self)
  val mutable _success : contact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getContactsForChannel_result.success") | Some _x5372 -> _x5372
  method set_success _x5372 = _success <- Some _x5372
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getContactsForChannel_result.e") | Some _x5373 -> _x5373
  method set_e _x5373 = _e <- Some _x5373
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getContactsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter5376 ->         _iter5376#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getContactsForChannel_result (iprot : Protocol.t) =
  let _str5377 = new getContactsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5378,_id5379) = iprot#readFieldBegin in
        if _t5378 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5379 with 
          | 0 -> (if _t5378 = Protocol.T_LIST then
              _str5377#set_success 
                (let (_etype5383,_size5380) = iprot#readListBegin in
                  let _con5384 = (Array.to_list (Array.init _size5380 (fun _ -> (read_contact iprot)))) in
                    iprot#readListEnd; _con5384)
            else
              iprot#skip _t5378)
          | 1 -> (if _t5378 = Protocol.T_STRUCT then
              _str5377#set_e (read_talkException iprot)
            else
              iprot#skip _t5378)
          | _ -> iprot#skip _t5378);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5377

class getDisplayName_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "getDisplayName_args.mid") | Some _x5385 -> _x5385
  method set_mid _x5385 = _mid <- Some _x5385
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getDisplayName_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getDisplayName_args (iprot : Protocol.t) =
  let _str5388 = new getDisplayName_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5389,_id5390) = iprot#readFieldBegin in
        if _t5389 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5390 with 
          | 2 -> (if _t5389 = Protocol.T_STRING then
              _str5388#set_mid iprot#readString
            else
              iprot#skip _t5389)
          | _ -> iprot#skip _t5389);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5388

class getDisplayName_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getDisplayName_result.success") | Some _x5391 -> _x5391
  method set_success _x5391 = _success <- Some _x5391
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getDisplayName_result.e") | Some _x5392 -> _x5392
  method set_e _x5392 = _e <- Some _x5392
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getDisplayName_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getDisplayName_result (iprot : Protocol.t) =
  let _str5395 = new getDisplayName_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5396,_id5397) = iprot#readFieldBegin in
        if _t5396 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5397 with 
          | 0 -> (if _t5396 = Protocol.T_STRING then
              _str5395#set_success iprot#readString
            else
              iprot#skip _t5396)
          | 1 -> (if _t5396 = Protocol.T_STRUCT then
              _str5395#set_e (read_talkException iprot)
            else
              iprot#skip _t5396)
          | _ -> iprot#skip _t5396);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5395

class getFavoriteMidsForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFavoriteMidsForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFavoriteMidsForChannel_args (iprot : Protocol.t) =
  let _str5400 = new getFavoriteMidsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5401,_id5402) = iprot#readFieldBegin in
        if _t5401 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5402 with 
          | _ -> iprot#skip _t5401);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5400

class getFavoriteMidsForChannel_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getFavoriteMidsForChannel_result.success") | Some _x5403 -> _x5403
  method set_success _x5403 = _success <- Some _x5403
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getFavoriteMidsForChannel_result.e") | Some _x5404 -> _x5404
  method set_e _x5404 = _e <- Some _x5404
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFavoriteMidsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5407 ->         oprot#writeString(_iter5407);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFavoriteMidsForChannel_result (iprot : Protocol.t) =
  let _str5408 = new getFavoriteMidsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5409,_id5410) = iprot#readFieldBegin in
        if _t5409 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5410 with 
          | 0 -> (if _t5409 = Protocol.T_LIST then
              _str5408#set_success 
                (let (_etype5414,_size5411) = iprot#readListBegin in
                  let _con5415 = (Array.to_list (Array.init _size5411 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5415)
            else
              iprot#skip _t5409)
          | 1 -> (if _t5409 = Protocol.T_STRUCT then
              _str5408#set_e (read_talkException iprot)
            else
              iprot#skip _t5409)
          | _ -> iprot#skip _t5409);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5408

class getFriendMids_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFriendMids_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFriendMids_args (iprot : Protocol.t) =
  let _str5418 = new getFriendMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5419,_id5420) = iprot#readFieldBegin in
        if _t5419 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5420 with 
          | _ -> iprot#skip _t5419);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5418

class getFriendMids_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getFriendMids_result.success") | Some _x5421 -> _x5421
  method set_success _x5421 = _success <- Some _x5421
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getFriendMids_result.e") | Some _x5422 -> _x5422
  method set_e _x5422 = _e <- Some _x5422
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFriendMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5425 ->         oprot#writeString(_iter5425);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFriendMids_result (iprot : Protocol.t) =
  let _str5426 = new getFriendMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5427,_id5428) = iprot#readFieldBegin in
        if _t5427 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5428 with 
          | 0 -> (if _t5427 = Protocol.T_LIST then
              _str5426#set_success 
                (let (_etype5432,_size5429) = iprot#readListBegin in
                  let _con5433 = (Array.to_list (Array.init _size5429 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5433)
            else
              iprot#skip _t5427)
          | 1 -> (if _t5427 = Protocol.T_STRUCT then
              _str5426#set_e (read_talkException iprot)
            else
              iprot#skip _t5427)
          | _ -> iprot#skip _t5427);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5426

class getGroupMemberMids_args =
object (self)
  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "getGroupMemberMids_args.groupId") | Some _x5434 -> _x5434
  method set_groupId _x5434 = _groupId <- Some _x5434
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupMemberMids_args";
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupMemberMids_args (iprot : Protocol.t) =
  let _str5437 = new getGroupMemberMids_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5438,_id5439) = iprot#readFieldBegin in
        if _t5438 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5439 with 
          | 1 -> (if _t5438 = Protocol.T_STRING then
              _str5437#set_groupId iprot#readString
            else
              iprot#skip _t5438)
          | _ -> iprot#skip _t5438);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5437

class getGroupMemberMids_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupMemberMids_result.success") | Some _x5440 -> _x5440
  method set_success _x5440 = _success <- Some _x5440
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupMemberMids_result.e") | Some _x5441 -> _x5441
  method set_e _x5441 = _e <- Some _x5441
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupMemberMids_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5444 ->         oprot#writeString(_iter5444);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupMemberMids_result (iprot : Protocol.t) =
  let _str5445 = new getGroupMemberMids_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5446,_id5447) = iprot#readFieldBegin in
        if _t5446 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5447 with 
          | 0 -> (if _t5446 = Protocol.T_LIST then
              _str5445#set_success 
                (let (_etype5451,_size5448) = iprot#readListBegin in
                  let _con5452 = (Array.to_list (Array.init _size5448 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5452)
            else
              iprot#skip _t5446)
          | 1 -> (if _t5446 = Protocol.T_STRUCT then
              _str5445#set_e (read_talkException iprot)
            else
              iprot#skip _t5446)
          | _ -> iprot#skip _t5446);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5445

class getGroupsForChannel_args =
object (self)
  val mutable _groupIds : string list option = None
  method get_groupIds = _groupIds
  method grab_groupIds = match _groupIds with None->raise (Field_empty "getGroupsForChannel_args.groupIds") | Some _x5453 -> _x5453
  method set_groupIds _x5453 = _groupIds <- Some _x5453
  method unset_groupIds = _groupIds <- None
  method reset_groupIds = _groupIds <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupsForChannel_args";
    (match _groupIds with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupIds",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5456 ->         oprot#writeString(_iter5456);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupsForChannel_args (iprot : Protocol.t) =
  let _str5457 = new getGroupsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5458,_id5459) = iprot#readFieldBegin in
        if _t5458 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5459 with 
          | 1 -> (if _t5458 = Protocol.T_LIST then
              _str5457#set_groupIds 
                (let (_etype5463,_size5460) = iprot#readListBegin in
                  let _con5464 = (Array.to_list (Array.init _size5460 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5464)
            else
              iprot#skip _t5458)
          | _ -> iprot#skip _t5458);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5457

class getGroupsForChannel_result =
object (self)
  val mutable _success : group list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getGroupsForChannel_result.success") | Some _x5465 -> _x5465
  method set_success _x5465 = _success <- Some _x5465
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getGroupsForChannel_result.e") | Some _x5466 -> _x5466
  method set_e _x5466 = _e <- Some _x5466
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getGroupsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter5469 ->         _iter5469#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getGroupsForChannel_result (iprot : Protocol.t) =
  let _str5470 = new getGroupsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5471,_id5472) = iprot#readFieldBegin in
        if _t5471 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5472 with 
          | 0 -> (if _t5471 = Protocol.T_LIST then
              _str5470#set_success 
                (let (_etype5476,_size5473) = iprot#readListBegin in
                  let _con5477 = (Array.to_list (Array.init _size5473 (fun _ -> (read_group iprot)))) in
                    iprot#readListEnd; _con5477)
            else
              iprot#skip _t5471)
          | 1 -> (if _t5471 = Protocol.T_STRUCT then
              _str5470#set_e (read_talkException iprot)
            else
              iprot#skip _t5471)
          | _ -> iprot#skip _t5471);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5470

class getIdentityCredential_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getIdentityCredential_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getIdentityCredential_args (iprot : Protocol.t) =
  let _str5480 = new getIdentityCredential_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5481,_id5482) = iprot#readFieldBegin in
        if _t5481 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5482 with 
          | _ -> iprot#skip _t5481);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5480

class getIdentityCredential_result =
object (self)
  val mutable _success : identityCredential option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getIdentityCredential_result.success") | Some _x5483 -> _x5483
  method set_success _x5483 = _success <- Some _x5483
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getIdentityCredential_result.e") | Some _x5484 -> _x5484
  method set_e _x5484 = _e <- Some _x5484
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getIdentityCredential_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getIdentityCredential_result (iprot : Protocol.t) =
  let _str5487 = new getIdentityCredential_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5488,_id5489) = iprot#readFieldBegin in
        if _t5488 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5489 with 
          | 0 -> (if _t5488 = Protocol.T_STRUCT then
              _str5487#set_success (read_identityCredential iprot)
            else
              iprot#skip _t5488)
          | 1 -> (if _t5488 = Protocol.T_STRUCT then
              _str5487#set_e (read_talkException iprot)
            else
              iprot#skip _t5488)
          | _ -> iprot#skip _t5488);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5487

class getJoinedGroupIdsForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinedGroupIdsForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinedGroupIdsForChannel_args (iprot : Protocol.t) =
  let _str5492 = new getJoinedGroupIdsForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5493,_id5494) = iprot#readFieldBegin in
        if _t5493 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5494 with 
          | _ -> iprot#skip _t5493);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5492

class getJoinedGroupIdsForChannel_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getJoinedGroupIdsForChannel_result.success") | Some _x5495 -> _x5495
  method set_success _x5495 = _success <- Some _x5495
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getJoinedGroupIdsForChannel_result.e") | Some _x5496 -> _x5496
  method set_e _x5496 = _e <- Some _x5496
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getJoinedGroupIdsForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5499 ->         oprot#writeString(_iter5499);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getJoinedGroupIdsForChannel_result (iprot : Protocol.t) =
  let _str5500 = new getJoinedGroupIdsForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5501,_id5502) = iprot#readFieldBegin in
        if _t5501 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5502 with 
          | 0 -> (if _t5501 = Protocol.T_LIST then
              _str5500#set_success 
                (let (_etype5506,_size5503) = iprot#readListBegin in
                  let _con5507 = (Array.to_list (Array.init _size5503 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5507)
            else
              iprot#skip _t5501)
          | 1 -> (if _t5501 = Protocol.T_STRUCT then
              _str5500#set_e (read_talkException iprot)
            else
              iprot#skip _t5501)
          | _ -> iprot#skip _t5501);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5500

class getMetaProfile_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMetaProfile_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMetaProfile_args (iprot : Protocol.t) =
  let _str5510 = new getMetaProfile_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5511,_id5512) = iprot#readFieldBegin in
        if _t5511 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5512 with 
          | _ -> iprot#skip _t5511);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5510

class getMetaProfile_result =
object (self)
  val mutable _success : metaProfile option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMetaProfile_result.success") | Some _x5513 -> _x5513
  method set_success _x5513 = _success <- Some _x5513
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMetaProfile_result.e") | Some _x5514 -> _x5514
  method set_e _x5514 = _e <- Some _x5514
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMetaProfile_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMetaProfile_result (iprot : Protocol.t) =
  let _str5517 = new getMetaProfile_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5518,_id5519) = iprot#readFieldBegin in
        if _t5518 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5519 with 
          | 0 -> (if _t5518 = Protocol.T_STRUCT then
              _str5517#set_success (read_metaProfile iprot)
            else
              iprot#skip _t5518)
          | 1 -> (if _t5518 = Protocol.T_STRUCT then
              _str5517#set_e (read_talkException iprot)
            else
              iprot#skip _t5518)
          | _ -> iprot#skip _t5518);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5517

class getMid_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMid_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMid_args (iprot : Protocol.t) =
  let _str5522 = new getMid_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5523,_id5524) = iprot#readFieldBegin in
        if _t5523 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5524 with 
          | _ -> iprot#skip _t5523);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5522

class getMid_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getMid_result.success") | Some _x5525 -> _x5525
  method set_success _x5525 = _success <- Some _x5525
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getMid_result.e") | Some _x5526 -> _x5526
  method set_e _x5526 = _e <- Some _x5526
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getMid_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getMid_result (iprot : Protocol.t) =
  let _str5529 = new getMid_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5530,_id5531) = iprot#readFieldBegin in
        if _t5530 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5531 with 
          | 0 -> (if _t5530 = Protocol.T_STRING then
              _str5529#set_success iprot#readString
            else
              iprot#skip _t5530)
          | 1 -> (if _t5530 = Protocol.T_STRUCT then
              _str5529#set_e (read_talkException iprot)
            else
              iprot#skip _t5530)
          | _ -> iprot#skip _t5530);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5529

class getPrimaryClientForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPrimaryClientForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPrimaryClientForChannel_args (iprot : Protocol.t) =
  let _str5534 = new getPrimaryClientForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5535,_id5536) = iprot#readFieldBegin in
        if _t5535 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5536 with 
          | _ -> iprot#skip _t5535);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5534

class getPrimaryClientForChannel_result =
object (self)
  val mutable _success : simpleChannelClient option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPrimaryClientForChannel_result.success") | Some _x5537 -> _x5537
  method set_success _x5537 = _success <- Some _x5537
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getPrimaryClientForChannel_result.e") | Some _x5538 -> _x5538
  method set_e _x5538 = _e <- Some _x5538
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPrimaryClientForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPrimaryClientForChannel_result (iprot : Protocol.t) =
  let _str5541 = new getPrimaryClientForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5542,_id5543) = iprot#readFieldBegin in
        if _t5542 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5543 with 
          | 0 -> (if _t5542 = Protocol.T_STRUCT then
              _str5541#set_success (read_simpleChannelClient iprot)
            else
              iprot#skip _t5542)
          | 1 -> (if _t5542 = Protocol.T_STRUCT then
              _str5541#set_e (read_talkException iprot)
            else
              iprot#skip _t5542)
          | _ -> iprot#skip _t5542);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5541

class getProfileForChannel_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProfileForChannel_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProfileForChannel_args (iprot : Protocol.t) =
  let _str5546 = new getProfileForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5547,_id5548) = iprot#readFieldBegin in
        if _t5547 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5548 with 
          | _ -> iprot#skip _t5547);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5546

class getProfileForChannel_result =
object (self)
  val mutable _success : profile option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProfileForChannel_result.success") | Some _x5549 -> _x5549
  method set_success _x5549 = _success <- Some _x5549
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getProfileForChannel_result.e") | Some _x5550 -> _x5550
  method set_e _x5550 = _e <- Some _x5550
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProfileForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProfileForChannel_result (iprot : Protocol.t) =
  let _str5553 = new getProfileForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5554,_id5555) = iprot#readFieldBegin in
        if _t5554 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5555 with 
          | 0 -> (if _t5554 = Protocol.T_STRUCT then
              _str5553#set_success (read_profile iprot)
            else
              iprot#skip _t5554)
          | 1 -> (if _t5554 = Protocol.T_STRUCT then
              _str5553#set_e (read_talkException iprot)
            else
              iprot#skip _t5554)
          | _ -> iprot#skip _t5554);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5553

class getSimpleChannelContacts_args =
object (self)
  val mutable _ids : string list option = None
  method get_ids = _ids
  method grab_ids = match _ids with None->raise (Field_empty "getSimpleChannelContacts_args.ids") | Some _x5556 -> _x5556
  method set_ids _x5556 = _ids <- Some _x5556
  method unset_ids = _ids <- None
  method reset_ids = _ids <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSimpleChannelContacts_args";
    (match _ids with None -> () | Some _v -> 
      oprot#writeFieldBegin("ids",Protocol.T_LIST,1);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5559 ->         oprot#writeString(_iter5559);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSimpleChannelContacts_args (iprot : Protocol.t) =
  let _str5560 = new getSimpleChannelContacts_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5561,_id5562) = iprot#readFieldBegin in
        if _t5561 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5562 with 
          | 1 -> (if _t5561 = Protocol.T_LIST then
              _str5560#set_ids 
                (let (_etype5566,_size5563) = iprot#readListBegin in
                  let _con5567 = (Array.to_list (Array.init _size5563 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5567)
            else
              iprot#skip _t5561)
          | _ -> iprot#skip _t5561);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5560

class getSimpleChannelContacts_result =
object (self)
  val mutable _success : simpleChannelContact list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSimpleChannelContacts_result.success") | Some _x5568 -> _x5568
  method set_success _x5568 = _success <- Some _x5568
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getSimpleChannelContacts_result.e") | Some _x5569 -> _x5569
  method set_e _x5569 = _e <- Some _x5569
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSimpleChannelContacts_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter5572 ->         _iter5572#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSimpleChannelContacts_result (iprot : Protocol.t) =
  let _str5573 = new getSimpleChannelContacts_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5574,_id5575) = iprot#readFieldBegin in
        if _t5574 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5575 with 
          | 0 -> (if _t5574 = Protocol.T_LIST then
              _str5573#set_success 
                (let (_etype5579,_size5576) = iprot#readListBegin in
                  let _con5580 = (Array.to_list (Array.init _size5576 (fun _ -> (read_simpleChannelContact iprot)))) in
                    iprot#readListEnd; _con5580)
            else
              iprot#skip _t5574)
          | 1 -> (if _t5574 = Protocol.T_STRUCT then
              _str5573#set_e (read_talkException iprot)
            else
              iprot#skip _t5574)
          | _ -> iprot#skip _t5574);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5573

class getUserCountryForBilling_args =
object (self)
  val mutable _country : string option = None
  method get_country = _country
  method grab_country = match _country with None->raise (Field_empty "getUserCountryForBilling_args.country") | Some _x5581 -> _x5581
  method set_country _x5581 = _country <- Some _x5581
  method unset_country = _country <- None
  method reset_country = _country <- None

  val mutable _remoteIp : string option = None
  method get_remoteIp = _remoteIp
  method grab_remoteIp = match _remoteIp with None->raise (Field_empty "getUserCountryForBilling_args.remoteIp") | Some _x5582 -> _x5582
  method set_remoteIp _x5582 = _remoteIp <- Some _x5582
  method unset_remoteIp = _remoteIp <- None
  method reset_remoteIp = _remoteIp <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserCountryForBilling_args";
    (match _country with None -> () | Some _v -> 
      oprot#writeFieldBegin("country",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _remoteIp with None -> () | Some _v -> 
      oprot#writeFieldBegin("remoteIp",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserCountryForBilling_args (iprot : Protocol.t) =
  let _str5585 = new getUserCountryForBilling_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5586,_id5587) = iprot#readFieldBegin in
        if _t5586 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5587 with 
          | 2 -> (if _t5586 = Protocol.T_STRING then
              _str5585#set_country iprot#readString
            else
              iprot#skip _t5586)
          | 3 -> (if _t5586 = Protocol.T_STRING then
              _str5585#set_remoteIp iprot#readString
            else
              iprot#skip _t5586)
          | _ -> iprot#skip _t5586);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5585

class getUserCountryForBilling_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserCountryForBilling_result.success") | Some _x5588 -> _x5588
  method set_success _x5588 = _success <- Some _x5588
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserCountryForBilling_result.e") | Some _x5589 -> _x5589
  method set_e _x5589 = _e <- Some _x5589
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserCountryForBilling_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserCountryForBilling_result (iprot : Protocol.t) =
  let _str5592 = new getUserCountryForBilling_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5593,_id5594) = iprot#readFieldBegin in
        if _t5593 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5594 with 
          | 0 -> (if _t5593 = Protocol.T_STRING then
              _str5592#set_success iprot#readString
            else
              iprot#skip _t5593)
          | 1 -> (if _t5593 = Protocol.T_STRUCT then
              _str5592#set_e (read_talkException iprot)
            else
              iprot#skip _t5593)
          | _ -> iprot#skip _t5593);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5592

class getUserCreateTime_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserCreateTime_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserCreateTime_args (iprot : Protocol.t) =
  let _str5597 = new getUserCreateTime_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5598,_id5599) = iprot#readFieldBegin in
        if _t5598 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5599 with 
          | _ -> iprot#skip _t5598);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5597

class getUserCreateTime_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserCreateTime_result.success") | Some _x5600 -> _x5600
  method set_success _x5600 = _success <- Some _x5600
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserCreateTime_result.e") | Some _x5601 -> _x5601
  method set_e _x5601 = _e <- Some _x5601
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserCreateTime_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserCreateTime_result (iprot : Protocol.t) =
  let _str5604 = new getUserCreateTime_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5605,_id5606) = iprot#readFieldBegin in
        if _t5605 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5606 with 
          | 0 -> (if _t5605 = Protocol.T_I64 then
              _str5604#set_success iprot#readI64
            else
              iprot#skip _t5605)
          | 1 -> (if _t5605 = Protocol.T_STRUCT then
              _str5604#set_e (read_talkException iprot)
            else
              iprot#skip _t5605)
          | _ -> iprot#skip _t5605);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5604

class getUserIdentities_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserIdentities_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserIdentities_args (iprot : Protocol.t) =
  let _str5609 = new getUserIdentities_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5610,_id5611) = iprot#readFieldBegin in
        if _t5610 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5611 with 
          | _ -> iprot#skip _t5610);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5609

class getUserIdentities_result =
object (self)
  val mutable _success : (RegistrationType.t,string) Hashtbl.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserIdentities_result.success") | Some _x5612 -> _x5612
  method set_success _x5612 = _success <- Some _x5612
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserIdentities_result.e") | Some _x5613 -> _x5613
  method set_e _x5613 = _e <- Some _x5613
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (Hashtbl.copy self#grab_success);
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserIdentities_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_MAP,0);
      oprot#writeMapBegin(Protocol.T_I32,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter5616 -> fun _viter5617 -> 
        oprot#writeI32(RegistrationType.to_i _kiter5616);
        oprot#writeString(_viter5617);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserIdentities_result (iprot : Protocol.t) =
  let _str5618 = new getUserIdentities_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5619,_id5620) = iprot#readFieldBegin in
        if _t5619 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5620 with 
          | 0 -> (if _t5619 = Protocol.T_MAP then
              _str5618#set_success 
                (let (_ktype5622,_vtype5623,_size5621) = iprot#readMapBegin in
                let _con5625 = Hashtbl.create _size5621 in
                  for i = 1 to _size5621 do
                    let _k = (RegistrationType.of_i iprot#readI32) in
                    let _v = iprot#readString in
                      Hashtbl.add _con5625 _k _v
                  done; iprot#readMapEnd; _con5625)
            else
              iprot#skip _t5619)
          | 1 -> (if _t5619 = Protocol.T_STRUCT then
              _str5618#set_e (read_talkException iprot)
            else
              iprot#skip _t5619)
          | _ -> iprot#skip _t5619);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5618

class getUserLanguage_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserLanguage_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserLanguage_args (iprot : Protocol.t) =
  let _str5628 = new getUserLanguage_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5629,_id5630) = iprot#readFieldBegin in
        if _t5629 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5630 with 
          | _ -> iprot#skip _t5629);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5628

class getUserLanguage_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserLanguage_result.success") | Some _x5631 -> _x5631
  method set_success _x5631 = _success <- Some _x5631
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserLanguage_result.e") | Some _x5632 -> _x5632
  method set_e _x5632 = _e <- Some _x5632
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserLanguage_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserLanguage_result (iprot : Protocol.t) =
  let _str5635 = new getUserLanguage_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5636,_id5637) = iprot#readFieldBegin in
        if _t5636 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5637 with 
          | 0 -> (if _t5636 = Protocol.T_STRING then
              _str5635#set_success iprot#readString
            else
              iprot#skip _t5636)
          | 1 -> (if _t5636 = Protocol.T_STRUCT then
              _str5635#set_e (read_talkException iprot)
            else
              iprot#skip _t5636)
          | _ -> iprot#skip _t5636);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5635

class getUserMidsWhoAddedMe_args =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserMidsWhoAddedMe_args";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserMidsWhoAddedMe_args (iprot : Protocol.t) =
  let _str5640 = new getUserMidsWhoAddedMe_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5641,_id5642) = iprot#readFieldBegin in
        if _t5641 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5642 with 
          | _ -> iprot#skip _t5641);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5640

class getUserMidsWhoAddedMe_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserMidsWhoAddedMe_result.success") | Some _x5643 -> _x5643
  method set_success _x5643 = _success <- Some _x5643
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getUserMidsWhoAddedMe_result.e") | Some _x5644 -> _x5644
  method set_e _x5644 = _e <- Some _x5644
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserMidsWhoAddedMe_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter5647 ->         oprot#writeString(_iter5647);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserMidsWhoAddedMe_result (iprot : Protocol.t) =
  let _str5648 = new getUserMidsWhoAddedMe_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5649,_id5650) = iprot#readFieldBegin in
        if _t5649 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5650 with 
          | 0 -> (if _t5649 = Protocol.T_LIST then
              _str5648#set_success 
                (let (_etype5654,_size5651) = iprot#readListBegin in
                  let _con5655 = (Array.to_list (Array.init _size5651 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con5655)
            else
              iprot#skip _t5649)
          | 1 -> (if _t5649 = Protocol.T_STRUCT then
              _str5648#set_e (read_talkException iprot)
            else
              iprot#skip _t5649)
          | _ -> iprot#skip _t5649);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5648

class isGroupMember_args =
object (self)
  val mutable _groupId : string option = None
  method get_groupId = _groupId
  method grab_groupId = match _groupId with None->raise (Field_empty "isGroupMember_args.groupId") | Some _x5656 -> _x5656
  method set_groupId _x5656 = _groupId <- Some _x5656
  method unset_groupId = _groupId <- None
  method reset_groupId = _groupId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isGroupMember_args";
    (match _groupId with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupId",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isGroupMember_args (iprot : Protocol.t) =
  let _str5659 = new isGroupMember_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5660,_id5661) = iprot#readFieldBegin in
        if _t5660 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5661 with 
          | 1 -> (if _t5660 = Protocol.T_STRING then
              _str5659#set_groupId iprot#readString
            else
              iprot#skip _t5660)
          | _ -> iprot#skip _t5660);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5659

class isGroupMember_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "isGroupMember_result.success") | Some _x5662 -> _x5662
  method set_success _x5662 = _success <- Some _x5662
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "isGroupMember_result.e") | Some _x5663 -> _x5663
  method set_e _x5663 = _e <- Some _x5663
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isGroupMember_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isGroupMember_result (iprot : Protocol.t) =
  let _str5666 = new isGroupMember_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5667,_id5668) = iprot#readFieldBegin in
        if _t5667 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5668 with 
          | 0 -> (if _t5667 = Protocol.T_BOOL then
              _str5666#set_success iprot#readBool
            else
              iprot#skip _t5667)
          | 1 -> (if _t5667 = Protocol.T_STRUCT then
              _str5666#set_e (read_talkException iprot)
            else
              iprot#skip _t5667)
          | _ -> iprot#skip _t5667);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5666

class isInContact_args =
object (self)
  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "isInContact_args.mid") | Some _x5669 -> _x5669
  method set_mid _x5669 = _mid <- Some _x5669
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isInContact_args";
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isInContact_args (iprot : Protocol.t) =
  let _str5672 = new isInContact_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5673,_id5674) = iprot#readFieldBegin in
        if _t5673 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5674 with 
          | 2 -> (if _t5673 = Protocol.T_STRING then
              _str5672#set_mid iprot#readString
            else
              iprot#skip _t5673)
          | _ -> iprot#skip _t5673);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5672

class isInContact_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "isInContact_result.success") | Some _x5675 -> _x5675
  method set_success _x5675 = _success <- Some _x5675
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "isInContact_result.e") | Some _x5676 -> _x5676
  method set_e _x5676 = _e <- Some _x5676
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "isInContact_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_isInContact_result (iprot : Protocol.t) =
  let _str5679 = new isInContact_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5680,_id5681) = iprot#readFieldBegin in
        if _t5680 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5681 with 
          | 0 -> (if _t5680 = Protocol.T_BOOL then
              _str5679#set_success iprot#readBool
            else
              iprot#skip _t5680)
          | 1 -> (if _t5680 = Protocol.T_STRUCT then
              _str5679#set_e (read_talkException iprot)
            else
              iprot#skip _t5680)
          | _ -> iprot#skip _t5680);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5679

class registerChannelCP_args =
object (self)
  val mutable _cpId : string option = None
  method get_cpId = _cpId
  method grab_cpId = match _cpId with None->raise (Field_empty "registerChannelCP_args.cpId") | Some _x5682 -> _x5682
  method set_cpId _x5682 = _cpId <- Some _x5682
  method unset_cpId = _cpId <- None
  method reset_cpId = _cpId <- None

  val mutable _registerPassword : string option = None
  method get_registerPassword = _registerPassword
  method grab_registerPassword = match _registerPassword with None->raise (Field_empty "registerChannelCP_args.registerPassword") | Some _x5683 -> _x5683
  method set_registerPassword _x5683 = _registerPassword <- Some _x5683
  method unset_registerPassword = _registerPassword <- None
  method reset_registerPassword = _registerPassword <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerChannelCP_args";
    (match _cpId with None -> () | Some _v -> 
      oprot#writeFieldBegin("cpId",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _registerPassword with None -> () | Some _v -> 
      oprot#writeFieldBegin("registerPassword",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerChannelCP_args (iprot : Protocol.t) =
  let _str5686 = new registerChannelCP_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5687,_id5688) = iprot#readFieldBegin in
        if _t5687 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5688 with 
          | 2 -> (if _t5687 = Protocol.T_STRING then
              _str5686#set_cpId iprot#readString
            else
              iprot#skip _t5687)
          | 3 -> (if _t5687 = Protocol.T_STRING then
              _str5686#set_registerPassword iprot#readString
            else
              iprot#skip _t5687)
          | _ -> iprot#skip _t5687);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5686

class registerChannelCP_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "registerChannelCP_result.success") | Some _x5689 -> _x5689
  method set_success _x5689 = _success <- Some _x5689
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "registerChannelCP_result.e") | Some _x5690 -> _x5690
  method set_e _x5690 = _e <- Some _x5690
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "registerChannelCP_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_registerChannelCP_result (iprot : Protocol.t) =
  let _str5693 = new registerChannelCP_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5694,_id5695) = iprot#readFieldBegin in
        if _t5694 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5695 with 
          | 0 -> (if _t5694 = Protocol.T_STRING then
              _str5693#set_success iprot#readString
            else
              iprot#skip _t5694)
          | 1 -> (if _t5694 = Protocol.T_STRUCT then
              _str5693#set_e (read_talkException iprot)
            else
              iprot#skip _t5694)
          | _ -> iprot#skip _t5694);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5693

class removeNotificationStatus_args =
object (self)
  val mutable _notificationStatus : NotificationStatus.t option = None
  method get_notificationStatus = _notificationStatus
  method grab_notificationStatus = match _notificationStatus with None->raise (Field_empty "removeNotificationStatus_args.notificationStatus") | Some _x5696 -> _x5696
  method set_notificationStatus _x5696 = _notificationStatus <- Some _x5696
  method unset_notificationStatus = _notificationStatus <- None
  method reset_notificationStatus = _notificationStatus <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeNotificationStatus_args";
    (match _notificationStatus with None -> () | Some _v -> 
      oprot#writeFieldBegin("notificationStatus",Protocol.T_I32,2);
      oprot#writeI32(NotificationStatus.to_i _v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeNotificationStatus_args (iprot : Protocol.t) =
  let _str5699 = new removeNotificationStatus_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5700,_id5701) = iprot#readFieldBegin in
        if _t5700 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5701 with 
          | 2 -> (if _t5700 = Protocol.T_I32 then
              _str5699#set_notificationStatus (NotificationStatus.of_i iprot#readI32)
            else
              iprot#skip _t5700)
          | _ -> iprot#skip _t5700);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5699

class removeNotificationStatus_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "removeNotificationStatus_result.e") | Some _x5702 -> _x5702
  method set_e _x5702 = _e <- Some _x5702
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "removeNotificationStatus_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_removeNotificationStatus_result (iprot : Protocol.t) =
  let _str5705 = new removeNotificationStatus_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5706,_id5707) = iprot#readFieldBegin in
        if _t5706 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5707 with 
          | 1 -> (if _t5706 = Protocol.T_STRUCT then
              _str5705#set_e (read_talkException iprot)
            else
              iprot#skip _t5706)
          | _ -> iprot#skip _t5706);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5705

class sendMessageForChannel_args =
object (self)
  val mutable _message : message option = None
  method get_message = _message
  method grab_message = match _message with None->raise (Field_empty "sendMessageForChannel_args.message") | Some _x5708 -> _x5708
  method set_message _x5708 = _message <- Some _x5708
  method unset_message = _message <- None
  method reset_message = _message <- None

  method copy =
      let _new = Oo.copy self in
      if _message <> None then
        _new#set_message self#grab_message#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageForChannel_args";
    (match _message with None -> () | Some _v -> 
      oprot#writeFieldBegin("message",Protocol.T_STRUCT,2);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageForChannel_args (iprot : Protocol.t) =
  let _str5711 = new sendMessageForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5712,_id5713) = iprot#readFieldBegin in
        if _t5712 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5713 with 
          | 2 -> (if _t5712 = Protocol.T_STRUCT then
              _str5711#set_message (read_message iprot)
            else
              iprot#skip _t5712)
          | _ -> iprot#skip _t5712);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5711

class sendMessageForChannel_result =
object (self)
  val mutable _success : message option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "sendMessageForChannel_result.success") | Some _x5714 -> _x5714
  method set_success _x5714 = _success <- Some _x5714
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendMessageForChannel_result.e") | Some _x5715 -> _x5715
  method set_e _x5715 = _e <- Some _x5715
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendMessageForChannel_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendMessageForChannel_result (iprot : Protocol.t) =
  let _str5718 = new sendMessageForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5719,_id5720) = iprot#readFieldBegin in
        if _t5719 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5720 with 
          | 0 -> (if _t5719 = Protocol.T_STRUCT then
              _str5718#set_success (read_message iprot)
            else
              iprot#skip _t5719)
          | 1 -> (if _t5719 = Protocol.T_STRUCT then
              _str5718#set_e (read_talkException iprot)
            else
              iprot#skip _t5719)
          | _ -> iprot#skip _t5719);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5718

class sendPinCodeOperation_args =
object (self)
  val mutable _verifier : string option = None
  method get_verifier = _verifier
  method grab_verifier = match _verifier with None->raise (Field_empty "sendPinCodeOperation_args.verifier") | Some _x5721 -> _x5721
  method set_verifier _x5721 = _verifier <- Some _x5721
  method unset_verifier = _verifier <- None
  method reset_verifier = _verifier <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendPinCodeOperation_args";
    (match _verifier with None -> () | Some _v -> 
      oprot#writeFieldBegin("verifier",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendPinCodeOperation_args (iprot : Protocol.t) =
  let _str5724 = new sendPinCodeOperation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5725,_id5726) = iprot#readFieldBegin in
        if _t5725 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5726 with 
          | 1 -> (if _t5725 = Protocol.T_STRING then
              _str5724#set_verifier iprot#readString
            else
              iprot#skip _t5725)
          | _ -> iprot#skip _t5725);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5724

class sendPinCodeOperation_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendPinCodeOperation_result.e") | Some _x5727 -> _x5727
  method set_e _x5727 = _e <- Some _x5727
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendPinCodeOperation_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendPinCodeOperation_result (iprot : Protocol.t) =
  let _str5730 = new sendPinCodeOperation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5731,_id5732) = iprot#readFieldBegin in
        if _t5731 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5732 with 
          | 1 -> (if _t5731 = Protocol.T_STRUCT then
              _str5730#set_e (read_talkException iprot)
            else
              iprot#skip _t5731)
          | _ -> iprot#skip _t5731);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5730

class updateProfileAttributeForChannel_args =
object (self)
  val mutable _profileAttribute : ProfileAttribute.t option = None
  method get_profileAttribute = _profileAttribute
  method grab_profileAttribute = match _profileAttribute with None->raise (Field_empty "updateProfileAttributeForChannel_args.profileAttribute") | Some _x5733 -> _x5733
  method set_profileAttribute _x5733 = _profileAttribute <- Some _x5733
  method unset_profileAttribute = _profileAttribute <- None
  method reset_profileAttribute = _profileAttribute <- None

  val mutable _value : string option = None
  method get_value = _value
  method grab_value = match _value with None->raise (Field_empty "updateProfileAttributeForChannel_args.value") | Some _x5734 -> _x5734
  method set_value _x5734 = _value <- Some _x5734
  method unset_value = _value <- None
  method reset_value = _value <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateProfileAttributeForChannel_args";
    (match _profileAttribute with None -> () | Some _v -> 
      oprot#writeFieldBegin("profileAttribute",Protocol.T_I32,2);
      oprot#writeI32(ProfileAttribute.to_i _v);
      oprot#writeFieldEnd
    );
    (match _value with None -> () | Some _v -> 
      oprot#writeFieldBegin("value",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateProfileAttributeForChannel_args (iprot : Protocol.t) =
  let _str5737 = new updateProfileAttributeForChannel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5738,_id5739) = iprot#readFieldBegin in
        if _t5738 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5739 with 
          | 2 -> (if _t5738 = Protocol.T_I32 then
              _str5737#set_profileAttribute (ProfileAttribute.of_i iprot#readI32)
            else
              iprot#skip _t5738)
          | 3 -> (if _t5738 = Protocol.T_STRING then
              _str5737#set_value iprot#readString
            else
              iprot#skip _t5738)
          | _ -> iprot#skip _t5738);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5737

class updateProfileAttributeForChannel_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "updateProfileAttributeForChannel_result.e") | Some _x5740 -> _x5740
  method set_e _x5740 = _e <- Some _x5740
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateProfileAttributeForChannel_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateProfileAttributeForChannel_result (iprot : Protocol.t) =
  let _str5743 = new updateProfileAttributeForChannel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t5744,_id5745) = iprot#readFieldBegin in
        if _t5744 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5745 with 
          | 1 -> (if _t5744 = Protocol.T_STRUCT then
              _str5743#set_e (read_talkException iprot)
            else
              iprot#skip _t5744)
          | _ -> iprot#skip _t5744);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str5743

class virtual iface =
object (self)
  method virtual activeBuddySubscriberCount : Int64.t
  method virtual addOperationForChannel : OpType.t option -> string option -> string option -> string option -> unit
  method virtual displayBuddySubscriberCount : Int64.t
  method virtual findContactByUseridWithoutAbuseBlockForChannel : string option -> contact
  method virtual getAllContactIdsForChannel : string list
  method virtual getCompactContacts : Int64.t option -> compactContact list
  method virtual getContactsForChannel : string list option -> contact list
  method virtual getDisplayName : string option -> string
  method virtual getFavoriteMidsForChannel : string list
  method virtual getFriendMids : string list
  method virtual getGroupMemberMids : string option -> string list
  method virtual getGroupsForChannel : string list option -> group list
  method virtual getIdentityCredential : identityCredential
  method virtual getJoinedGroupIdsForChannel : string list
  method virtual getMetaProfile : metaProfile
  method virtual getMid : string
  method virtual getPrimaryClientForChannel : simpleChannelClient
  method virtual getProfileForChannel : profile
  method virtual getSimpleChannelContacts : string list option -> simpleChannelContact list
  method virtual getUserCountryForBilling : string option -> string option -> string
  method virtual getUserCreateTime : Int64.t
  method virtual getUserIdentities : (RegistrationType.t,string) Hashtbl.t
  method virtual getUserLanguage : string
  method virtual getUserMidsWhoAddedMe : string list
  method virtual isGroupMember : string option -> bool
  method virtual isInContact : string option -> bool
  method virtual registerChannelCP : string option -> string option -> string
  method virtual removeNotificationStatus : NotificationStatus.t option -> unit
  method virtual sendMessageForChannel : message option -> message
  method virtual sendPinCodeOperation : string option -> unit
  method virtual updateProfileAttributeForChannel : ProfileAttribute.t option -> string option -> unit
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method activeBuddySubscriberCount  = 
    self#send_activeBuddySubscriberCount;
    self#recv_activeBuddySubscriberCount
  method private send_activeBuddySubscriberCount  = 
    oprot#writeMessageBegin ("activeBuddySubscriberCount", Protocol.CALL, seqid);
    let args = new activeBuddySubscriberCount_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_activeBuddySubscriberCount  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_activeBuddySubscriberCount_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "activeBuddySubscriberCount failed: unknown result")))
  method addOperationForChannel opType param1 param2 param3 = 
    self#send_addOperationForChannel opType param1 param2 param3;
    self#recv_addOperationForChannel
  method private send_addOperationForChannel opType param1 param2 param3 = 
    oprot#writeMessageBegin ("addOperationForChannel", Protocol.CALL, seqid);
    let args = new addOperationForChannel_args in
      args#set_opType opType;
      args#set_param1 param1;
      args#set_param2 param2;
      args#set_param3 param3;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_addOperationForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_addOperationForChannel_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method displayBuddySubscriberCount  = 
    self#send_displayBuddySubscriberCount;
    self#recv_displayBuddySubscriberCount
  method private send_displayBuddySubscriberCount  = 
    oprot#writeMessageBegin ("displayBuddySubscriberCount", Protocol.CALL, seqid);
    let args = new displayBuddySubscriberCount_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_displayBuddySubscriberCount  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_displayBuddySubscriberCount_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "displayBuddySubscriberCount failed: unknown result")))
  method findContactByUseridWithoutAbuseBlockForChannel userid = 
    self#send_findContactByUseridWithoutAbuseBlockForChannel userid;
    self#recv_findContactByUseridWithoutAbuseBlockForChannel
  method private send_findContactByUseridWithoutAbuseBlockForChannel userid = 
    oprot#writeMessageBegin ("findContactByUseridWithoutAbuseBlockForChannel", Protocol.CALL, seqid);
    let args = new findContactByUseridWithoutAbuseBlockForChannel_args in
      args#set_userid userid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_findContactByUseridWithoutAbuseBlockForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_findContactByUseridWithoutAbuseBlockForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "findContactByUseridWithoutAbuseBlockForChannel failed: unknown result")))
  method getAllContactIdsForChannel  = 
    self#send_getAllContactIdsForChannel;
    self#recv_getAllContactIdsForChannel
  method private send_getAllContactIdsForChannel  = 
    oprot#writeMessageBegin ("getAllContactIdsForChannel", Protocol.CALL, seqid);
    let args = new getAllContactIdsForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getAllContactIdsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getAllContactIdsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getAllContactIdsForChannel failed: unknown result")))
  method getCompactContacts lastModifiedTimestamp = 
    self#send_getCompactContacts lastModifiedTimestamp;
    self#recv_getCompactContacts
  method private send_getCompactContacts lastModifiedTimestamp = 
    oprot#writeMessageBegin ("getCompactContacts", Protocol.CALL, seqid);
    let args = new getCompactContacts_args in
      args#set_lastModifiedTimestamp lastModifiedTimestamp;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getCompactContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getCompactContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getCompactContacts failed: unknown result")))
  method getContactsForChannel ids = 
    self#send_getContactsForChannel ids;
    self#recv_getContactsForChannel
  method private send_getContactsForChannel ids = 
    oprot#writeMessageBegin ("getContactsForChannel", Protocol.CALL, seqid);
    let args = new getContactsForChannel_args in
      args#set_ids ids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getContactsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getContactsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getContactsForChannel failed: unknown result")))
  method getDisplayName mid = 
    self#send_getDisplayName mid;
    self#recv_getDisplayName
  method private send_getDisplayName mid = 
    oprot#writeMessageBegin ("getDisplayName", Protocol.CALL, seqid);
    let args = new getDisplayName_args in
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getDisplayName  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getDisplayName_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getDisplayName failed: unknown result")))
  method getFavoriteMidsForChannel  = 
    self#send_getFavoriteMidsForChannel;
    self#recv_getFavoriteMidsForChannel
  method private send_getFavoriteMidsForChannel  = 
    oprot#writeMessageBegin ("getFavoriteMidsForChannel", Protocol.CALL, seqid);
    let args = new getFavoriteMidsForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getFavoriteMidsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getFavoriteMidsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getFavoriteMidsForChannel failed: unknown result")))
  method getFriendMids  = 
    self#send_getFriendMids;
    self#recv_getFriendMids
  method private send_getFriendMids  = 
    oprot#writeMessageBegin ("getFriendMids", Protocol.CALL, seqid);
    let args = new getFriendMids_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getFriendMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getFriendMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getFriendMids failed: unknown result")))
  method getGroupMemberMids groupId = 
    self#send_getGroupMemberMids groupId;
    self#recv_getGroupMemberMids
  method private send_getGroupMemberMids groupId = 
    oprot#writeMessageBegin ("getGroupMemberMids", Protocol.CALL, seqid);
    let args = new getGroupMemberMids_args in
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupMemberMids  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupMemberMids_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupMemberMids failed: unknown result")))
  method getGroupsForChannel groupIds = 
    self#send_getGroupsForChannel groupIds;
    self#recv_getGroupsForChannel
  method private send_getGroupsForChannel groupIds = 
    oprot#writeMessageBegin ("getGroupsForChannel", Protocol.CALL, seqid);
    let args = new getGroupsForChannel_args in
      args#set_groupIds groupIds;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getGroupsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getGroupsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getGroupsForChannel failed: unknown result")))
  method getIdentityCredential  = 
    self#send_getIdentityCredential;
    self#recv_getIdentityCredential
  method private send_getIdentityCredential  = 
    oprot#writeMessageBegin ("getIdentityCredential", Protocol.CALL, seqid);
    let args = new getIdentityCredential_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getIdentityCredential  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getIdentityCredential_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getIdentityCredential failed: unknown result")))
  method getJoinedGroupIdsForChannel  = 
    self#send_getJoinedGroupIdsForChannel;
    self#recv_getJoinedGroupIdsForChannel
  method private send_getJoinedGroupIdsForChannel  = 
    oprot#writeMessageBegin ("getJoinedGroupIdsForChannel", Protocol.CALL, seqid);
    let args = new getJoinedGroupIdsForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getJoinedGroupIdsForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getJoinedGroupIdsForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getJoinedGroupIdsForChannel failed: unknown result")))
  method getMetaProfile  = 
    self#send_getMetaProfile;
    self#recv_getMetaProfile
  method private send_getMetaProfile  = 
    oprot#writeMessageBegin ("getMetaProfile", Protocol.CALL, seqid);
    let args = new getMetaProfile_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMetaProfile  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMetaProfile_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMetaProfile failed: unknown result")))
  method getMid  = 
    self#send_getMid;
    self#recv_getMid
  method private send_getMid  = 
    oprot#writeMessageBegin ("getMid", Protocol.CALL, seqid);
    let args = new getMid_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getMid  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getMid_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getMid failed: unknown result")))
  method getPrimaryClientForChannel  = 
    self#send_getPrimaryClientForChannel;
    self#recv_getPrimaryClientForChannel
  method private send_getPrimaryClientForChannel  = 
    oprot#writeMessageBegin ("getPrimaryClientForChannel", Protocol.CALL, seqid);
    let args = new getPrimaryClientForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPrimaryClientForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPrimaryClientForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPrimaryClientForChannel failed: unknown result")))
  method getProfileForChannel  = 
    self#send_getProfileForChannel;
    self#recv_getProfileForChannel
  method private send_getProfileForChannel  = 
    oprot#writeMessageBegin ("getProfileForChannel", Protocol.CALL, seqid);
    let args = new getProfileForChannel_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProfileForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProfileForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProfileForChannel failed: unknown result")))
  method getSimpleChannelContacts ids = 
    self#send_getSimpleChannelContacts ids;
    self#recv_getSimpleChannelContacts
  method private send_getSimpleChannelContacts ids = 
    oprot#writeMessageBegin ("getSimpleChannelContacts", Protocol.CALL, seqid);
    let args = new getSimpleChannelContacts_args in
      args#set_ids ids;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSimpleChannelContacts  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSimpleChannelContacts_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSimpleChannelContacts failed: unknown result")))
  method getUserCountryForBilling country remoteIp = 
    self#send_getUserCountryForBilling country remoteIp;
    self#recv_getUserCountryForBilling
  method private send_getUserCountryForBilling country remoteIp = 
    oprot#writeMessageBegin ("getUserCountryForBilling", Protocol.CALL, seqid);
    let args = new getUserCountryForBilling_args in
      args#set_country country;
      args#set_remoteIp remoteIp;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserCountryForBilling  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserCountryForBilling_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserCountryForBilling failed: unknown result")))
  method getUserCreateTime  = 
    self#send_getUserCreateTime;
    self#recv_getUserCreateTime
  method private send_getUserCreateTime  = 
    oprot#writeMessageBegin ("getUserCreateTime", Protocol.CALL, seqid);
    let args = new getUserCreateTime_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserCreateTime  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserCreateTime_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserCreateTime failed: unknown result")))
  method getUserIdentities  = 
    self#send_getUserIdentities;
    self#recv_getUserIdentities
  method private send_getUserIdentities  = 
    oprot#writeMessageBegin ("getUserIdentities", Protocol.CALL, seqid);
    let args = new getUserIdentities_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserIdentities  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserIdentities_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserIdentities failed: unknown result")))
  method getUserLanguage  = 
    self#send_getUserLanguage;
    self#recv_getUserLanguage
  method private send_getUserLanguage  = 
    oprot#writeMessageBegin ("getUserLanguage", Protocol.CALL, seqid);
    let args = new getUserLanguage_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserLanguage  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserLanguage_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserLanguage failed: unknown result")))
  method getUserMidsWhoAddedMe  = 
    self#send_getUserMidsWhoAddedMe;
    self#recv_getUserMidsWhoAddedMe
  method private send_getUserMidsWhoAddedMe  = 
    oprot#writeMessageBegin ("getUserMidsWhoAddedMe", Protocol.CALL, seqid);
    let args = new getUserMidsWhoAddedMe_args in
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserMidsWhoAddedMe  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserMidsWhoAddedMe_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserMidsWhoAddedMe failed: unknown result")))
  method isGroupMember groupId = 
    self#send_isGroupMember groupId;
    self#recv_isGroupMember
  method private send_isGroupMember groupId = 
    oprot#writeMessageBegin ("isGroupMember", Protocol.CALL, seqid);
    let args = new isGroupMember_args in
      args#set_groupId groupId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_isGroupMember  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_isGroupMember_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "isGroupMember failed: unknown result")))
  method isInContact mid = 
    self#send_isInContact mid;
    self#recv_isInContact
  method private send_isInContact mid = 
    oprot#writeMessageBegin ("isInContact", Protocol.CALL, seqid);
    let args = new isInContact_args in
      args#set_mid mid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_isInContact  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_isInContact_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "isInContact failed: unknown result")))
  method registerChannelCP cpId registerPassword = 
    self#send_registerChannelCP cpId registerPassword;
    self#recv_registerChannelCP
  method private send_registerChannelCP cpId registerPassword = 
    oprot#writeMessageBegin ("registerChannelCP", Protocol.CALL, seqid);
    let args = new registerChannelCP_args in
      args#set_cpId cpId;
      args#set_registerPassword registerPassword;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_registerChannelCP  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_registerChannelCP_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "registerChannelCP failed: unknown result")))
  method removeNotificationStatus notificationStatus = 
    self#send_removeNotificationStatus notificationStatus;
    self#recv_removeNotificationStatus
  method private send_removeNotificationStatus notificationStatus = 
    oprot#writeMessageBegin ("removeNotificationStatus", Protocol.CALL, seqid);
    let args = new removeNotificationStatus_args in
      args#set_notificationStatus notificationStatus;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_removeNotificationStatus  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_removeNotificationStatus_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method sendMessageForChannel message = 
    self#send_sendMessageForChannel message;
    self#recv_sendMessageForChannel
  method private send_sendMessageForChannel message = 
    oprot#writeMessageBegin ("sendMessageForChannel", Protocol.CALL, seqid);
    let args = new sendMessageForChannel_args in
      args#set_message message;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendMessageForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendMessageForChannel_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "sendMessageForChannel failed: unknown result")))
  method sendPinCodeOperation verifier = 
    self#send_sendPinCodeOperation verifier;
    self#recv_sendPinCodeOperation
  method private send_sendPinCodeOperation verifier = 
    oprot#writeMessageBegin ("sendPinCodeOperation", Protocol.CALL, seqid);
    let args = new sendPinCodeOperation_args in
      args#set_verifier verifier;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendPinCodeOperation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendPinCodeOperation_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method updateProfileAttributeForChannel profileAttribute value = 
    self#send_updateProfileAttributeForChannel profileAttribute value;
    self#recv_updateProfileAttributeForChannel
  method private send_updateProfileAttributeForChannel profileAttribute value = 
    oprot#writeMessageBegin ("updateProfileAttributeForChannel", Protocol.CALL, seqid);
    let args = new updateProfileAttributeForChannel_args in
      args#set_profileAttribute profileAttribute;
      args#set_value value;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateProfileAttributeForChannel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_updateProfileAttributeForChannel_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 31
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_activeBuddySubscriberCount (seqid, iprot, oprot) =
    let _ = read_activeBuddySubscriberCount_args iprot in
      iprot#readMessageEnd;
      let result = new activeBuddySubscriberCount_result in
        (try
          result#set_success (handler#activeBuddySubscriberCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("activeBuddySubscriberCount", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_addOperationForChannel (seqid, iprot, oprot) =
    let args = read_addOperationForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new addOperationForChannel_result in
        (try
          (handler#addOperationForChannel args#get_opType args#get_param1 args#get_param2 args#get_param3);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("addOperationForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_displayBuddySubscriberCount (seqid, iprot, oprot) =
    let _ = read_displayBuddySubscriberCount_args iprot in
      iprot#readMessageEnd;
      let result = new displayBuddySubscriberCount_result in
        (try
          result#set_success (handler#displayBuddySubscriberCount);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("displayBuddySubscriberCount", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_findContactByUseridWithoutAbuseBlockForChannel (seqid, iprot, oprot) =
    let args = read_findContactByUseridWithoutAbuseBlockForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new findContactByUseridWithoutAbuseBlockForChannel_result in
        (try
          result#set_success (handler#findContactByUseridWithoutAbuseBlockForChannel args#get_userid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("findContactByUseridWithoutAbuseBlockForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getAllContactIdsForChannel (seqid, iprot, oprot) =
    let _ = read_getAllContactIdsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getAllContactIdsForChannel_result in
        (try
          result#set_success (handler#getAllContactIdsForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getAllContactIdsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getCompactContacts (seqid, iprot, oprot) =
    let args = read_getCompactContacts_args iprot in
      iprot#readMessageEnd;
      let result = new getCompactContacts_result in
        (try
          result#set_success (handler#getCompactContacts args#get_lastModifiedTimestamp);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getCompactContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getContactsForChannel (seqid, iprot, oprot) =
    let args = read_getContactsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getContactsForChannel_result in
        (try
          result#set_success (handler#getContactsForChannel args#get_ids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getContactsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getDisplayName (seqid, iprot, oprot) =
    let args = read_getDisplayName_args iprot in
      iprot#readMessageEnd;
      let result = new getDisplayName_result in
        (try
          result#set_success (handler#getDisplayName args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getDisplayName", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getFavoriteMidsForChannel (seqid, iprot, oprot) =
    let _ = read_getFavoriteMidsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getFavoriteMidsForChannel_result in
        (try
          result#set_success (handler#getFavoriteMidsForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getFavoriteMidsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getFriendMids (seqid, iprot, oprot) =
    let _ = read_getFriendMids_args iprot in
      iprot#readMessageEnd;
      let result = new getFriendMids_result in
        (try
          result#set_success (handler#getFriendMids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getFriendMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupMemberMids (seqid, iprot, oprot) =
    let args = read_getGroupMemberMids_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupMemberMids_result in
        (try
          result#set_success (handler#getGroupMemberMids args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupMemberMids", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getGroupsForChannel (seqid, iprot, oprot) =
    let args = read_getGroupsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getGroupsForChannel_result in
        (try
          result#set_success (handler#getGroupsForChannel args#get_groupIds);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getGroupsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getIdentityCredential (seqid, iprot, oprot) =
    let _ = read_getIdentityCredential_args iprot in
      iprot#readMessageEnd;
      let result = new getIdentityCredential_result in
        (try
          result#set_success (handler#getIdentityCredential);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getIdentityCredential", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getJoinedGroupIdsForChannel (seqid, iprot, oprot) =
    let _ = read_getJoinedGroupIdsForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getJoinedGroupIdsForChannel_result in
        (try
          result#set_success (handler#getJoinedGroupIdsForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getJoinedGroupIdsForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMetaProfile (seqid, iprot, oprot) =
    let _ = read_getMetaProfile_args iprot in
      iprot#readMessageEnd;
      let result = new getMetaProfile_result in
        (try
          result#set_success (handler#getMetaProfile);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMetaProfile", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getMid (seqid, iprot, oprot) =
    let _ = read_getMid_args iprot in
      iprot#readMessageEnd;
      let result = new getMid_result in
        (try
          result#set_success (handler#getMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getMid", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPrimaryClientForChannel (seqid, iprot, oprot) =
    let _ = read_getPrimaryClientForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getPrimaryClientForChannel_result in
        (try
          result#set_success (handler#getPrimaryClientForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getPrimaryClientForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProfileForChannel (seqid, iprot, oprot) =
    let _ = read_getProfileForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new getProfileForChannel_result in
        (try
          result#set_success (handler#getProfileForChannel);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getProfileForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSimpleChannelContacts (seqid, iprot, oprot) =
    let args = read_getSimpleChannelContacts_args iprot in
      iprot#readMessageEnd;
      let result = new getSimpleChannelContacts_result in
        (try
          result#set_success (handler#getSimpleChannelContacts args#get_ids);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getSimpleChannelContacts", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserCountryForBilling (seqid, iprot, oprot) =
    let args = read_getUserCountryForBilling_args iprot in
      iprot#readMessageEnd;
      let result = new getUserCountryForBilling_result in
        (try
          result#set_success (handler#getUserCountryForBilling args#get_country args#get_remoteIp);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserCountryForBilling", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserCreateTime (seqid, iprot, oprot) =
    let _ = read_getUserCreateTime_args iprot in
      iprot#readMessageEnd;
      let result = new getUserCreateTime_result in
        (try
          result#set_success (handler#getUserCreateTime);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserCreateTime", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserIdentities (seqid, iprot, oprot) =
    let _ = read_getUserIdentities_args iprot in
      iprot#readMessageEnd;
      let result = new getUserIdentities_result in
        (try
          result#set_success (handler#getUserIdentities);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserIdentities", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserLanguage (seqid, iprot, oprot) =
    let _ = read_getUserLanguage_args iprot in
      iprot#readMessageEnd;
      let result = new getUserLanguage_result in
        (try
          result#set_success (handler#getUserLanguage);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserLanguage", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserMidsWhoAddedMe (seqid, iprot, oprot) =
    let _ = read_getUserMidsWhoAddedMe_args iprot in
      iprot#readMessageEnd;
      let result = new getUserMidsWhoAddedMe_result in
        (try
          result#set_success (handler#getUserMidsWhoAddedMe);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getUserMidsWhoAddedMe", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_isGroupMember (seqid, iprot, oprot) =
    let args = read_isGroupMember_args iprot in
      iprot#readMessageEnd;
      let result = new isGroupMember_result in
        (try
          result#set_success (handler#isGroupMember args#get_groupId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("isGroupMember", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_isInContact (seqid, iprot, oprot) =
    let args = read_isInContact_args iprot in
      iprot#readMessageEnd;
      let result = new isInContact_result in
        (try
          result#set_success (handler#isInContact args#get_mid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("isInContact", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_registerChannelCP (seqid, iprot, oprot) =
    let args = read_registerChannelCP_args iprot in
      iprot#readMessageEnd;
      let result = new registerChannelCP_result in
        (try
          result#set_success (handler#registerChannelCP args#get_cpId args#get_registerPassword);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("registerChannelCP", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_removeNotificationStatus (seqid, iprot, oprot) =
    let args = read_removeNotificationStatus_args iprot in
      iprot#readMessageEnd;
      let result = new removeNotificationStatus_result in
        (try
          (handler#removeNotificationStatus args#get_notificationStatus);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("removeNotificationStatus", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendMessageForChannel (seqid, iprot, oprot) =
    let args = read_sendMessageForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new sendMessageForChannel_result in
        (try
          result#set_success (handler#sendMessageForChannel args#get_message);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendMessageForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendPinCodeOperation (seqid, iprot, oprot) =
    let args = read_sendPinCodeOperation_args iprot in
      iprot#readMessageEnd;
      let result = new sendPinCodeOperation_result in
        (try
          (handler#sendPinCodeOperation args#get_verifier);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendPinCodeOperation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateProfileAttributeForChannel (seqid, iprot, oprot) =
    let args = read_updateProfileAttributeForChannel_args iprot in
      iprot#readMessageEnd;
      let result = new updateProfileAttributeForChannel_result in
        (try
          (handler#updateProfileAttributeForChannel args#get_profileAttribute args#get_value);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("updateProfileAttributeForChannel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "activeBuddySubscriberCount" self#process_activeBuddySubscriberCount;
    Hashtbl.add processMap "addOperationForChannel" self#process_addOperationForChannel;
    Hashtbl.add processMap "displayBuddySubscriberCount" self#process_displayBuddySubscriberCount;
    Hashtbl.add processMap "findContactByUseridWithoutAbuseBlockForChannel" self#process_findContactByUseridWithoutAbuseBlockForChannel;
    Hashtbl.add processMap "getAllContactIdsForChannel" self#process_getAllContactIdsForChannel;
    Hashtbl.add processMap "getCompactContacts" self#process_getCompactContacts;
    Hashtbl.add processMap "getContactsForChannel" self#process_getContactsForChannel;
    Hashtbl.add processMap "getDisplayName" self#process_getDisplayName;
    Hashtbl.add processMap "getFavoriteMidsForChannel" self#process_getFavoriteMidsForChannel;
    Hashtbl.add processMap "getFriendMids" self#process_getFriendMids;
    Hashtbl.add processMap "getGroupMemberMids" self#process_getGroupMemberMids;
    Hashtbl.add processMap "getGroupsForChannel" self#process_getGroupsForChannel;
    Hashtbl.add processMap "getIdentityCredential" self#process_getIdentityCredential;
    Hashtbl.add processMap "getJoinedGroupIdsForChannel" self#process_getJoinedGroupIdsForChannel;
    Hashtbl.add processMap "getMetaProfile" self#process_getMetaProfile;
    Hashtbl.add processMap "getMid" self#process_getMid;
    Hashtbl.add processMap "getPrimaryClientForChannel" self#process_getPrimaryClientForChannel;
    Hashtbl.add processMap "getProfileForChannel" self#process_getProfileForChannel;
    Hashtbl.add processMap "getSimpleChannelContacts" self#process_getSimpleChannelContacts;
    Hashtbl.add processMap "getUserCountryForBilling" self#process_getUserCountryForBilling;
    Hashtbl.add processMap "getUserCreateTime" self#process_getUserCreateTime;
    Hashtbl.add processMap "getUserIdentities" self#process_getUserIdentities;
    Hashtbl.add processMap "getUserLanguage" self#process_getUserLanguage;
    Hashtbl.add processMap "getUserMidsWhoAddedMe" self#process_getUserMidsWhoAddedMe;
    Hashtbl.add processMap "isGroupMember" self#process_isGroupMember;
    Hashtbl.add processMap "isInContact" self#process_isInContact;
    Hashtbl.add processMap "registerChannelCP" self#process_registerChannelCP;
    Hashtbl.add processMap "removeNotificationStatus" self#process_removeNotificationStatus;
    Hashtbl.add processMap "sendMessageForChannel" self#process_sendMessageForChannel;
    Hashtbl.add processMap "sendPinCodeOperation" self#process_sendPinCodeOperation;
    Hashtbl.add processMap "updateProfileAttributeForChannel" self#process_updateProfileAttributeForChannel;
end

