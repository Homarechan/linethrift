(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class notifyLeaveGroup_args =
object (self)
  val mutable _groupMid : string option = None
  method get_groupMid = _groupMid
  method grab_groupMid = match _groupMid with None->raise (Field_empty "notifyLeaveGroup_args.groupMid") | Some _x4706 -> _x4706
  method set_groupMid _x4706 = _groupMid <- Some _x4706
  method unset_groupMid = _groupMid <- None
  method reset_groupMid = _groupMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyLeaveGroup_args";
    (match _groupMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupMid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyLeaveGroup_args (iprot : Protocol.t) =
  let _str4709 = new notifyLeaveGroup_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4710,_id4711) = iprot#readFieldBegin in
        if _t4710 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4711 with 
          | 1 -> (if _t4710 = Protocol.T_STRING then
              _str4709#set_groupMid iprot#readString
            else
              iprot#skip _t4710)
          | _ -> iprot#skip _t4710);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4709

class notifyLeaveGroup_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyLeaveGroup_result.e") | Some _x4712 -> _x4712
  method set_e _x4712 = _e <- Some _x4712
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyLeaveGroup_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyLeaveGroup_result (iprot : Protocol.t) =
  let _str4715 = new notifyLeaveGroup_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4716,_id4717) = iprot#readFieldBegin in
        if _t4716 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4717 with 
          | 1 -> (if _t4716 = Protocol.T_STRUCT then
              _str4715#set_e (read_talkException iprot)
            else
              iprot#skip _t4716)
          | _ -> iprot#skip _t4716);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4715

class notifyLeaveRoom_args =
object (self)
  val mutable _roomMid : string option = None
  method get_roomMid = _roomMid
  method grab_roomMid = match _roomMid with None->raise (Field_empty "notifyLeaveRoom_args.roomMid") | Some _x4718 -> _x4718
  method set_roomMid _x4718 = _roomMid <- Some _x4718
  method unset_roomMid = _roomMid <- None
  method reset_roomMid = _roomMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyLeaveRoom_args";
    (match _roomMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("roomMid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyLeaveRoom_args (iprot : Protocol.t) =
  let _str4721 = new notifyLeaveRoom_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4722,_id4723) = iprot#readFieldBegin in
        if _t4722 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4723 with 
          | 1 -> (if _t4722 = Protocol.T_STRING then
              _str4721#set_roomMid iprot#readString
            else
              iprot#skip _t4722)
          | _ -> iprot#skip _t4722);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4721

class notifyLeaveRoom_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyLeaveRoom_result.e") | Some _x4724 -> _x4724
  method set_e _x4724 = _e <- Some _x4724
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyLeaveRoom_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyLeaveRoom_result (iprot : Protocol.t) =
  let _str4727 = new notifyLeaveRoom_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4728,_id4729) = iprot#readFieldBegin in
        if _t4728 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4729 with 
          | 1 -> (if _t4728 = Protocol.T_STRUCT then
              _str4727#set_e (read_talkException iprot)
            else
              iprot#skip _t4728)
          | _ -> iprot#skip _t4728);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4727

class getBotUseInfo_args =
object (self)
  val mutable _botMid : string option = None
  method get_botMid = _botMid
  method grab_botMid = match _botMid with None->raise (Field_empty "getBotUseInfo_args.botMid") | Some _x4730 -> _x4730
  method set_botMid _x4730 = _botMid <- Some _x4730
  method unset_botMid = _botMid <- None
  method reset_botMid = _botMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBotUseInfo_args";
    (match _botMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("botMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBotUseInfo_args (iprot : Protocol.t) =
  let _str4733 = new getBotUseInfo_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4734,_id4735) = iprot#readFieldBegin in
        if _t4734 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4735 with 
          | 2 -> (if _t4734 = Protocol.T_STRING then
              _str4733#set_botMid iprot#readString
            else
              iprot#skip _t4734)
          | _ -> iprot#skip _t4734);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4733

class getBotUseInfo_result =
object (self)
  val mutable _success : botUseInfo option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBotUseInfo_result.success") | Some _x4736 -> _x4736
  method set_success _x4736 = _success <- Some _x4736
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBotUseInfo_result.e") | Some _x4737 -> _x4737
  method set_e _x4737 = _e <- Some _x4737
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBotUseInfo_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBotUseInfo_result (iprot : Protocol.t) =
  let _str4740 = new getBotUseInfo_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4741,_id4742) = iprot#readFieldBegin in
        if _t4741 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4742 with 
          | 0 -> (if _t4741 = Protocol.T_STRUCT then
              _str4740#set_success (read_botUseInfo iprot)
            else
              iprot#skip _t4741)
          | 1 -> (if _t4741 = Protocol.T_STRUCT then
              _str4740#set_e (read_talkException iprot)
            else
              iprot#skip _t4741)
          | _ -> iprot#skip _t4741);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4740

class sendChatCheckedByWatermark_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendChatCheckedByWatermark_args.seq") | Some _x4743 -> _x4743
  method set_seq _x4743 = _seq <- Some _x4743
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "sendChatCheckedByWatermark_args.mid") | Some _x4744 -> _x4744
  method set_mid _x4744 = _mid <- Some _x4744
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  val mutable _watermark : Int64.t option = None
  method get_watermark = _watermark
  method grab_watermark = match _watermark with None->raise (Field_empty "sendChatCheckedByWatermark_args.watermark") | Some _x4745 -> _x4745
  method set_watermark _x4745 = _watermark <- Some _x4745
  method unset_watermark = _watermark <- None
  method reset_watermark = _watermark <- None

  val mutable _sessionId : Int32.t option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "sendChatCheckedByWatermark_args.sessionId") | Some _x4746 -> _x4746
  method set_sessionId _x4746 = _sessionId <- Some _x4746
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendChatCheckedByWatermark_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _watermark with None -> () | Some _v -> 
      oprot#writeFieldBegin("watermark",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_I32,4);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendChatCheckedByWatermark_args (iprot : Protocol.t) =
  let _str4749 = new sendChatCheckedByWatermark_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4750,_id4751) = iprot#readFieldBegin in
        if _t4750 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4751 with 
          | 1 -> (if _t4750 = Protocol.T_I32 then
              _str4749#set_seq iprot#readI32
            else
              iprot#skip _t4750)
          | 2 -> (if _t4750 = Protocol.T_STRING then
              _str4749#set_mid iprot#readString
            else
              iprot#skip _t4750)
          | 3 -> (if _t4750 = Protocol.T_I64 then
              _str4749#set_watermark iprot#readI64
            else
              iprot#skip _t4750)
          | 4 -> (if _t4750 = Protocol.T_I32 then
              _str4749#set_sessionId iprot#readI32
            else
              iprot#skip _t4750)
          | _ -> iprot#skip _t4750);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4749

class sendChatCheckedByWatermark_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendChatCheckedByWatermark_result.e") | Some _x4752 -> _x4752
  method set_e _x4752 = _e <- Some _x4752
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendChatCheckedByWatermark_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendChatCheckedByWatermark_result (iprot : Protocol.t) =
  let _str4755 = new sendChatCheckedByWatermark_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4756,_id4757) = iprot#readFieldBegin in
        if _t4756 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4757 with 
          | 1 -> (if _t4756 = Protocol.T_STRUCT then
              _str4755#set_e (read_talkException iprot)
            else
              iprot#skip _t4756)
          | _ -> iprot#skip _t4756);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4755

class virtual iface =
object (self)
  method virtual notifyLeaveGroup : string option -> unit
  method virtual notifyLeaveRoom : string option -> unit
  method virtual getBotUseInfo : string option -> botUseInfo
  method virtual sendChatCheckedByWatermark : Int32.t option -> string option -> Int64.t option -> Int32.t option -> unit
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method notifyLeaveGroup groupMid = 
    self#send_notifyLeaveGroup groupMid;
    self#recv_notifyLeaveGroup
  method private send_notifyLeaveGroup groupMid = 
    oprot#writeMessageBegin ("notifyLeaveGroup", Protocol.CALL, seqid);
    let args = new notifyLeaveGroup_args in
      args#set_groupMid groupMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyLeaveGroup  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyLeaveGroup_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method notifyLeaveRoom roomMid = 
    self#send_notifyLeaveRoom roomMid;
    self#recv_notifyLeaveRoom
  method private send_notifyLeaveRoom roomMid = 
    oprot#writeMessageBegin ("notifyLeaveRoom", Protocol.CALL, seqid);
    let args = new notifyLeaveRoom_args in
      args#set_roomMid roomMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyLeaveRoom  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyLeaveRoom_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method getBotUseInfo botMid = 
    self#send_getBotUseInfo botMid;
    self#recv_getBotUseInfo
  method private send_getBotUseInfo botMid = 
    oprot#writeMessageBegin ("getBotUseInfo", Protocol.CALL, seqid);
    let args = new getBotUseInfo_args in
      args#set_botMid botMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBotUseInfo  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBotUseInfo_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBotUseInfo failed: unknown result")))
  method sendChatCheckedByWatermark seq mid watermark sessionId = 
    self#send_sendChatCheckedByWatermark seq mid watermark sessionId;
    self#recv_sendChatCheckedByWatermark
  method private send_sendChatCheckedByWatermark seq mid watermark sessionId = 
    oprot#writeMessageBegin ("sendChatCheckedByWatermark", Protocol.CALL, seqid);
    let args = new sendChatCheckedByWatermark_args in
      args#set_seq seq;
      args#set_mid mid;
      args#set_watermark watermark;
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendChatCheckedByWatermark  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendChatCheckedByWatermark_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 4
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_notifyLeaveGroup (seqid, iprot, oprot) =
    let args = read_notifyLeaveGroup_args iprot in
      iprot#readMessageEnd;
      let result = new notifyLeaveGroup_result in
        (try
          (handler#notifyLeaveGroup args#get_groupMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyLeaveGroup", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyLeaveRoom (seqid, iprot, oprot) =
    let args = read_notifyLeaveRoom_args iprot in
      iprot#readMessageEnd;
      let result = new notifyLeaveRoom_result in
        (try
          (handler#notifyLeaveRoom args#get_roomMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyLeaveRoom", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBotUseInfo (seqid, iprot, oprot) =
    let args = read_getBotUseInfo_args iprot in
      iprot#readMessageEnd;
      let result = new getBotUseInfo_result in
        (try
          result#set_success (handler#getBotUseInfo args#get_botMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBotUseInfo", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendChatCheckedByWatermark (seqid, iprot, oprot) =
    let args = read_sendChatCheckedByWatermark_args iprot in
      iprot#readMessageEnd;
      let result = new sendChatCheckedByWatermark_result in
        (try
          (handler#sendChatCheckedByWatermark args#get_seq args#get_mid args#get_watermark args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendChatCheckedByWatermark", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "notifyLeaveGroup" self#process_notifyLeaveGroup;
    Hashtbl.add processMap "notifyLeaveRoom" self#process_notifyLeaveRoom;
    Hashtbl.add processMap "getBotUseInfo" self#process_getBotUseInfo;
    Hashtbl.add processMap "sendChatCheckedByWatermark" self#process_sendChatCheckedByWatermark;
end

