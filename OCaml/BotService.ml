(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Line_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class notifyLeaveGroup_args =
object (self)
  val mutable _groupMid : string option = None
  method get_groupMid = _groupMid
  method grab_groupMid = match _groupMid with None->raise (Field_empty "notifyLeaveGroup_args.groupMid") | Some _x4106 -> _x4106
  method set_groupMid _x4106 = _groupMid <- Some _x4106
  method unset_groupMid = _groupMid <- None
  method reset_groupMid = _groupMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyLeaveGroup_args";
    (match _groupMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("groupMid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyLeaveGroup_args (iprot : Protocol.t) =
  let _str4109 = new notifyLeaveGroup_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4110,_id4111) = iprot#readFieldBegin in
        if _t4110 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4111 with 
          | 1 -> (if _t4110 = Protocol.T_STRING then
              _str4109#set_groupMid iprot#readString
            else
              iprot#skip _t4110)
          | _ -> iprot#skip _t4110);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4109

class notifyLeaveGroup_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyLeaveGroup_result.e") | Some _x4112 -> _x4112
  method set_e _x4112 = _e <- Some _x4112
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyLeaveGroup_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyLeaveGroup_result (iprot : Protocol.t) =
  let _str4115 = new notifyLeaveGroup_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4116,_id4117) = iprot#readFieldBegin in
        if _t4116 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4117 with 
          | 1 -> (if _t4116 = Protocol.T_STRUCT then
              _str4115#set_e (read_talkException iprot)
            else
              iprot#skip _t4116)
          | _ -> iprot#skip _t4116);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4115

class notifyLeaveRoom_args =
object (self)
  val mutable _roomMid : string option = None
  method get_roomMid = _roomMid
  method grab_roomMid = match _roomMid with None->raise (Field_empty "notifyLeaveRoom_args.roomMid") | Some _x4118 -> _x4118
  method set_roomMid _x4118 = _roomMid <- Some _x4118
  method unset_roomMid = _roomMid <- None
  method reset_roomMid = _roomMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyLeaveRoom_args";
    (match _roomMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("roomMid",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyLeaveRoom_args (iprot : Protocol.t) =
  let _str4121 = new notifyLeaveRoom_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4122,_id4123) = iprot#readFieldBegin in
        if _t4122 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4123 with 
          | 1 -> (if _t4122 = Protocol.T_STRING then
              _str4121#set_roomMid iprot#readString
            else
              iprot#skip _t4122)
          | _ -> iprot#skip _t4122);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4121

class notifyLeaveRoom_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "notifyLeaveRoom_result.e") | Some _x4124 -> _x4124
  method set_e _x4124 = _e <- Some _x4124
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyLeaveRoom_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyLeaveRoom_result (iprot : Protocol.t) =
  let _str4127 = new notifyLeaveRoom_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4128,_id4129) = iprot#readFieldBegin in
        if _t4128 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4129 with 
          | 1 -> (if _t4128 = Protocol.T_STRUCT then
              _str4127#set_e (read_talkException iprot)
            else
              iprot#skip _t4128)
          | _ -> iprot#skip _t4128);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4127

class getBotUseInfo_args =
object (self)
  val mutable _botMid : string option = None
  method get_botMid = _botMid
  method grab_botMid = match _botMid with None->raise (Field_empty "getBotUseInfo_args.botMid") | Some _x4130 -> _x4130
  method set_botMid _x4130 = _botMid <- Some _x4130
  method unset_botMid = _botMid <- None
  method reset_botMid = _botMid <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBotUseInfo_args";
    (match _botMid with None -> () | Some _v -> 
      oprot#writeFieldBegin("botMid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBotUseInfo_args (iprot : Protocol.t) =
  let _str4133 = new getBotUseInfo_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4134,_id4135) = iprot#readFieldBegin in
        if _t4134 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4135 with 
          | 2 -> (if _t4134 = Protocol.T_STRING then
              _str4133#set_botMid iprot#readString
            else
              iprot#skip _t4134)
          | _ -> iprot#skip _t4134);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4133

class getBotUseInfo_result =
object (self)
  val mutable _success : botUseInfo option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getBotUseInfo_result.success") | Some _x4136 -> _x4136
  method set_success _x4136 = _success <- Some _x4136
  method unset_success = _success <- None
  method reset_success = _success <- None

  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "getBotUseInfo_result.e") | Some _x4137 -> _x4137
  method set_e _x4137 = _e <- Some _x4137
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getBotUseInfo_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getBotUseInfo_result (iprot : Protocol.t) =
  let _str4140 = new getBotUseInfo_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4141,_id4142) = iprot#readFieldBegin in
        if _t4141 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4142 with 
          | 0 -> (if _t4141 = Protocol.T_STRUCT then
              _str4140#set_success (read_botUseInfo iprot)
            else
              iprot#skip _t4141)
          | 1 -> (if _t4141 = Protocol.T_STRUCT then
              _str4140#set_e (read_talkException iprot)
            else
              iprot#skip _t4141)
          | _ -> iprot#skip _t4141);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4140

class sendChatCheckedByWatermark_args =
object (self)
  val mutable _seq : Int32.t option = None
  method get_seq = _seq
  method grab_seq = match _seq with None->raise (Field_empty "sendChatCheckedByWatermark_args.seq") | Some _x4143 -> _x4143
  method set_seq _x4143 = _seq <- Some _x4143
  method unset_seq = _seq <- None
  method reset_seq = _seq <- None

  val mutable _mid : string option = None
  method get_mid = _mid
  method grab_mid = match _mid with None->raise (Field_empty "sendChatCheckedByWatermark_args.mid") | Some _x4144 -> _x4144
  method set_mid _x4144 = _mid <- Some _x4144
  method unset_mid = _mid <- None
  method reset_mid = _mid <- None

  val mutable _watermark : Int64.t option = None
  method get_watermark = _watermark
  method grab_watermark = match _watermark with None->raise (Field_empty "sendChatCheckedByWatermark_args.watermark") | Some _x4145 -> _x4145
  method set_watermark _x4145 = _watermark <- Some _x4145
  method unset_watermark = _watermark <- None
  method reset_watermark = _watermark <- None

  val mutable _sessionId : int option = None
  method get_sessionId = _sessionId
  method grab_sessionId = match _sessionId with None->raise (Field_empty "sendChatCheckedByWatermark_args.sessionId") | Some _x4146 -> _x4146
  method set_sessionId _x4146 = _sessionId <- Some _x4146
  method unset_sessionId = _sessionId <- None
  method reset_sessionId = _sessionId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendChatCheckedByWatermark_args";
    (match _seq with None -> () | Some _v -> 
      oprot#writeFieldBegin("seq",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    (match _mid with None -> () | Some _v -> 
      oprot#writeFieldBegin("mid",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _watermark with None -> () | Some _v -> 
      oprot#writeFieldBegin("watermark",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _sessionId with None -> () | Some _v -> 
      oprot#writeFieldBegin("sessionId",Protocol.T_BYTE,4);
      oprot#writeByte(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendChatCheckedByWatermark_args (iprot : Protocol.t) =
  let _str4149 = new sendChatCheckedByWatermark_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4150,_id4151) = iprot#readFieldBegin in
        if _t4150 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4151 with 
          | 1 -> (if _t4150 = Protocol.T_I32 then
              _str4149#set_seq iprot#readI32
            else
              iprot#skip _t4150)
          | 2 -> (if _t4150 = Protocol.T_STRING then
              _str4149#set_mid iprot#readString
            else
              iprot#skip _t4150)
          | 3 -> (if _t4150 = Protocol.T_I64 then
              _str4149#set_watermark iprot#readI64
            else
              iprot#skip _t4150)
          | 4 -> (if _t4150 = Protocol.T_BYTE then
              _str4149#set_sessionId iprot#readByte
            else
              iprot#skip _t4150)
          | _ -> iprot#skip _t4150);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4149

class sendChatCheckedByWatermark_result =
object (self)
  val mutable _e : talkException option = None
  method get_e = _e
  method grab_e = match _e with None->raise (Field_empty "sendChatCheckedByWatermark_result.e") | Some _x4152 -> _x4152
  method set_e _x4152 = _e <- Some _x4152
  method unset_e = _e <- None
  method reset_e = _e <- None

  method copy =
      let _new = Oo.copy self in
      if _e <> None then
        _new#set_e self#grab_e#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "sendChatCheckedByWatermark_result";
    (match _e with None -> () | Some _v -> 
      oprot#writeFieldBegin("e",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_sendChatCheckedByWatermark_result (iprot : Protocol.t) =
  let _str4155 = new sendChatCheckedByWatermark_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4156,_id4157) = iprot#readFieldBegin in
        if _t4156 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id4157 with 
          | 1 -> (if _t4156 = Protocol.T_STRUCT then
              _str4155#set_e (read_talkException iprot)
            else
              iprot#skip _t4156)
          | _ -> iprot#skip _t4156);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str4155

class virtual iface =
object (self)
  method virtual notifyLeaveGroup : string option -> unit
  method virtual notifyLeaveRoom : string option -> unit
  method virtual getBotUseInfo : string option -> botUseInfo
  method virtual sendChatCheckedByWatermark : Int32.t option -> string option -> Int64.t option -> int option -> unit
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method notifyLeaveGroup groupMid = 
    self#send_notifyLeaveGroup groupMid;
    self#recv_notifyLeaveGroup
  method private send_notifyLeaveGroup groupMid = 
    oprot#writeMessageBegin ("notifyLeaveGroup", Protocol.CALL, seqid);
    let args = new notifyLeaveGroup_args in
      args#set_groupMid groupMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyLeaveGroup  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyLeaveGroup_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method notifyLeaveRoom roomMid = 
    self#send_notifyLeaveRoom roomMid;
    self#recv_notifyLeaveRoom
  method private send_notifyLeaveRoom roomMid = 
    oprot#writeMessageBegin ("notifyLeaveRoom", Protocol.CALL, seqid);
    let args = new notifyLeaveRoom_args in
      args#set_roomMid roomMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyLeaveRoom  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_notifyLeaveRoom_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
  method getBotUseInfo botMid = 
    self#send_getBotUseInfo botMid;
    self#recv_getBotUseInfo
  method private send_getBotUseInfo botMid = 
    oprot#writeMessageBegin ("getBotUseInfo", Protocol.CALL, seqid);
    let args = new getBotUseInfo_args in
      args#set_botMid botMid;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getBotUseInfo  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getBotUseInfo_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          (match result#get_e with None -> () | Some _v ->
            raise (TalkException _v));
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getBotUseInfo failed: unknown result")))
  method sendChatCheckedByWatermark seq mid watermark sessionId = 
    self#send_sendChatCheckedByWatermark seq mid watermark sessionId;
    self#recv_sendChatCheckedByWatermark
  method private send_sendChatCheckedByWatermark seq mid watermark sessionId = 
    oprot#writeMessageBegin ("sendChatCheckedByWatermark", Protocol.CALL, seqid);
    let args = new sendChatCheckedByWatermark_args in
      args#set_seq seq;
      args#set_mid mid;
      args#set_watermark watermark;
      args#set_sessionId sessionId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_sendChatCheckedByWatermark  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_sendChatCheckedByWatermark_result iprot in
        iprot#readMessageEnd;
        (match result#get_e with None -> () | Some _v ->
          raise (TalkException _v));
        ()
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 4
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_notifyLeaveGroup (seqid, iprot, oprot) =
    let args = read_notifyLeaveGroup_args iprot in
      iprot#readMessageEnd;
      let result = new notifyLeaveGroup_result in
        (try
          (handler#notifyLeaveGroup args#get_groupMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyLeaveGroup", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_notifyLeaveRoom (seqid, iprot, oprot) =
    let args = read_notifyLeaveRoom_args iprot in
      iprot#readMessageEnd;
      let result = new notifyLeaveRoom_result in
        (try
          (handler#notifyLeaveRoom args#get_roomMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("notifyLeaveRoom", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getBotUseInfo (seqid, iprot, oprot) =
    let args = read_getBotUseInfo_args iprot in
      iprot#readMessageEnd;
      let result = new getBotUseInfo_result in
        (try
          result#set_success (handler#getBotUseInfo args#get_botMid);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("getBotUseInfo", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_sendChatCheckedByWatermark (seqid, iprot, oprot) =
    let args = read_sendChatCheckedByWatermark_args iprot in
      iprot#readMessageEnd;
      let result = new sendChatCheckedByWatermark_result in
        (try
          (handler#sendChatCheckedByWatermark args#get_seq args#get_mid args#get_watermark args#get_sessionId);
        with
          | TalkException e -> 
              result#set_e e
        );
        oprot#writeMessageBegin ("sendChatCheckedByWatermark", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "notifyLeaveGroup" self#process_notifyLeaveGroup;
    Hashtbl.add processMap "notifyLeaveRoom" self#process_notifyLeaveRoom;
    Hashtbl.add processMap "getBotUseInfo" self#process_getBotUseInfo;
    Hashtbl.add processMap "sendChatCheckedByWatermark" self#process_sendChatCheckedByWatermark;
end

