/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class Operation : TBase
{
  private long _revision;
  private long _createdTime;
  private OpType _type;
  private int _reqSeq;
  private string _checksum;
  private OpStatus _status;
  private string _param1;
  private string _param2;
  private string _param3;
  private Message _message;

  public long Revision
  {
    get
    {
      return _revision;
    }
    set
    {
      __isset.revision = true;
      this._revision = value;
    }
  }

  public long CreatedTime
  {
    get
    {
      return _createdTime;
    }
    set
    {
      __isset.createdTime = true;
      this._createdTime = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="OpType"/>
  /// </summary>
  public OpType Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  public int ReqSeq
  {
    get
    {
      return _reqSeq;
    }
    set
    {
      __isset.reqSeq = true;
      this._reqSeq = value;
    }
  }

  public string Checksum
  {
    get
    {
      return _checksum;
    }
    set
    {
      __isset.checksum = true;
      this._checksum = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="OpStatus"/>
  /// </summary>
  public OpStatus Status
  {
    get
    {
      return _status;
    }
    set
    {
      __isset.status = true;
      this._status = value;
    }
  }

  public string Param1
  {
    get
    {
      return _param1;
    }
    set
    {
      __isset.param1 = true;
      this._param1 = value;
    }
  }

  public string Param2
  {
    get
    {
      return _param2;
    }
    set
    {
      __isset.param2 = true;
      this._param2 = value;
    }
  }

  public string Param3
  {
    get
    {
      return _param3;
    }
    set
    {
      __isset.param3 = true;
      this._param3 = value;
    }
  }

  public Message Message
  {
    get
    {
      return _message;
    }
    set
    {
      __isset.message = true;
      this._message = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool revision;
    public bool createdTime;
    public bool type;
    public bool reqSeq;
    public bool checksum;
    public bool status;
    public bool param1;
    public bool param2;
    public bool param3;
    public bool message;
  }

  public Operation()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              Revision = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              CreatedTime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              Type = (OpType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I32)
            {
              ReqSeq = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Checksum = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.I32)
            {
              Status = (OpStatus)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.String)
            {
              Param1 = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.String)
            {
              Param2 = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.String)
            {
              Param3 = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 20:
            if (field.Type == TType.Struct)
            {
              Message = new Message();
              await Message.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("Operation");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.revision)
      {
        field.Name = "revision";
        field.Type = TType.I64;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Revision, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.createdTime)
      {
        field.Name = "createdTime";
        field.Type = TType.I64;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(CreatedTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.type)
      {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.reqSeq)
      {
        field.Name = "reqSeq";
        field.Type = TType.I32;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(ReqSeq, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Checksum != null && __isset.checksum)
      {
        field.Name = "checksum";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Checksum, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.status)
      {
        field.Name = "status";
        field.Type = TType.I32;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Status, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Param1 != null && __isset.param1)
      {
        field.Name = "param1";
        field.Type = TType.String;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Param1, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Param2 != null && __isset.param2)
      {
        field.Name = "param2";
        field.Type = TType.String;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Param2, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Param3 != null && __isset.param3)
      {
        field.Name = "param3";
        field.Type = TType.String;
        field.ID = 12;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Param3, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Message != null && __isset.message)
      {
        field.Name = "message";
        field.Type = TType.Struct;
        field.ID = 20;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Message.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as Operation;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.revision == other.__isset.revision) && ((!__isset.revision) || (System.Object.Equals(Revision, other.Revision))))
      && ((__isset.createdTime == other.__isset.createdTime) && ((!__isset.createdTime) || (System.Object.Equals(CreatedTime, other.CreatedTime))))
      && ((__isset.type == other.__isset.type) && ((!__isset.type) || (System.Object.Equals(Type, other.Type))))
      && ((__isset.reqSeq == other.__isset.reqSeq) && ((!__isset.reqSeq) || (System.Object.Equals(ReqSeq, other.ReqSeq))))
      && ((__isset.checksum == other.__isset.checksum) && ((!__isset.checksum) || (System.Object.Equals(Checksum, other.Checksum))))
      && ((__isset.status == other.__isset.status) && ((!__isset.status) || (System.Object.Equals(Status, other.Status))))
      && ((__isset.param1 == other.__isset.param1) && ((!__isset.param1) || (System.Object.Equals(Param1, other.Param1))))
      && ((__isset.param2 == other.__isset.param2) && ((!__isset.param2) || (System.Object.Equals(Param2, other.Param2))))
      && ((__isset.param3 == other.__isset.param3) && ((!__isset.param3) || (System.Object.Equals(Param3, other.Param3))))
      && ((__isset.message == other.__isset.message) && ((!__isset.message) || (System.Object.Equals(Message, other.Message))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.revision)
        hashcode = (hashcode * 397) + Revision.GetHashCode();
      if(__isset.createdTime)
        hashcode = (hashcode * 397) + CreatedTime.GetHashCode();
      if(__isset.type)
        hashcode = (hashcode * 397) + Type.GetHashCode();
      if(__isset.reqSeq)
        hashcode = (hashcode * 397) + ReqSeq.GetHashCode();
      if(__isset.checksum)
        hashcode = (hashcode * 397) + Checksum.GetHashCode();
      if(__isset.status)
        hashcode = (hashcode * 397) + Status.GetHashCode();
      if(__isset.param1)
        hashcode = (hashcode * 397) + Param1.GetHashCode();
      if(__isset.param2)
        hashcode = (hashcode * 397) + Param2.GetHashCode();
      if(__isset.param3)
        hashcode = (hashcode * 397) + Param3.GetHashCode();
      if(__isset.message)
        hashcode = (hashcode * 397) + Message.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("Operation(");
    bool __first = true;
    if (__isset.revision)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Revision: ");
      sb.Append(Revision);
    }
    if (__isset.createdTime)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CreatedTime: ");
      sb.Append(CreatedTime);
    }
    if (__isset.type)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Type: ");
      sb.Append(Type);
    }
    if (__isset.reqSeq)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ReqSeq: ");
      sb.Append(ReqSeq);
    }
    if (Checksum != null && __isset.checksum)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Checksum: ");
      sb.Append(Checksum);
    }
    if (__isset.status)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Status: ");
      sb.Append(Status);
    }
    if (Param1 != null && __isset.param1)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Param1: ");
      sb.Append(Param1);
    }
    if (Param2 != null && __isset.param2)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Param2: ");
      sb.Append(Param2);
    }
    if (Param3 != null && __isset.param3)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Param3: ");
      sb.Append(Param3);
    }
    if (Message != null && __isset.message)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Message: ");
      sb.Append(Message== null ? "<null>" : Message.ToString());
    }
    sb.Append(")");
    return sb.ToString();
  }
}

