/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class ChannelSyncDatas : TBase
{
  private List<ChannelInfo> _channelInfos;
  private List<ChannelDomain> _channelDomains;
  private long _revision;
  private long _expires;

  public List<ChannelInfo> ChannelInfos
  {
    get
    {
      return _channelInfos;
    }
    set
    {
      __isset.channelInfos = true;
      this._channelInfos = value;
    }
  }

  public List<ChannelDomain> ChannelDomains
  {
    get
    {
      return _channelDomains;
    }
    set
    {
      __isset.channelDomains = true;
      this._channelDomains = value;
    }
  }

  public long Revision
  {
    get
    {
      return _revision;
    }
    set
    {
      __isset.revision = true;
      this._revision = value;
    }
  }

  public long Expires
  {
    get
    {
      return _expires;
    }
    set
    {
      __isset.expires = true;
      this._expires = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool channelInfos;
    public bool channelDomains;
    public bool revision;
    public bool expires;
  }

  public ChannelSyncDatas()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                TList _list87 = await iprot.ReadListBeginAsync(cancellationToken);
                ChannelInfos = new List<ChannelInfo>(_list87.Count);
                for(int _i88 = 0; _i88 < _list87.Count; ++_i88)
                {
                  ChannelInfo _elem89;
                  _elem89 = new ChannelInfo();
                  await _elem89.ReadAsync(iprot, cancellationToken);
                  ChannelInfos.Add(_elem89);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list90 = await iprot.ReadListBeginAsync(cancellationToken);
                ChannelDomains = new List<ChannelDomain>(_list90.Count);
                for(int _i91 = 0; _i91 < _list90.Count; ++_i91)
                {
                  ChannelDomain _elem92;
                  _elem92 = new ChannelDomain();
                  await _elem92.ReadAsync(iprot, cancellationToken);
                  ChannelDomains.Add(_elem92);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I64)
            {
              Revision = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I64)
            {
              Expires = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("ChannelSyncDatas");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (ChannelInfos != null && __isset.channelInfos)
      {
        field.Name = "channelInfos";
        field.Type = TType.List;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, ChannelInfos.Count), cancellationToken);
          foreach (ChannelInfo _iter93 in ChannelInfos)
          {
            await _iter93.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ChannelDomains != null && __isset.channelDomains)
      {
        field.Name = "channelDomains";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, ChannelDomains.Count), cancellationToken);
          foreach (ChannelDomain _iter94 in ChannelDomains)
          {
            await _iter94.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.revision)
      {
        field.Name = "revision";
        field.Type = TType.I64;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Revision, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.expires)
      {
        field.Name = "expires";
        field.Type = TType.I64;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Expires, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as ChannelSyncDatas;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.channelInfos == other.__isset.channelInfos) && ((!__isset.channelInfos) || (TCollections.Equals(ChannelInfos, other.ChannelInfos))))
      && ((__isset.channelDomains == other.__isset.channelDomains) && ((!__isset.channelDomains) || (TCollections.Equals(ChannelDomains, other.ChannelDomains))))
      && ((__isset.revision == other.__isset.revision) && ((!__isset.revision) || (System.Object.Equals(Revision, other.Revision))))
      && ((__isset.expires == other.__isset.expires) && ((!__isset.expires) || (System.Object.Equals(Expires, other.Expires))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.channelInfos)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ChannelInfos);
      if(__isset.channelDomains)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ChannelDomains);
      if(__isset.revision)
        hashcode = (hashcode * 397) + Revision.GetHashCode();
      if(__isset.expires)
        hashcode = (hashcode * 397) + Expires.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("ChannelSyncDatas(");
    bool __first = true;
    if (ChannelInfos != null && __isset.channelInfos)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ChannelInfos: ");
      sb.Append(ChannelInfos);
    }
    if (ChannelDomains != null && __isset.channelDomains)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ChannelDomains: ");
      sb.Append(ChannelDomains);
    }
    if (__isset.revision)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Revision: ");
      sb.Append(Revision);
    }
    if (__isset.expires)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Expires: ");
      sb.Append(Expires);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

