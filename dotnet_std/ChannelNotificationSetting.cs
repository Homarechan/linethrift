/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class ChannelNotificationSetting : TBase
{
  private string _channelId;
  private string _name;
  private bool _notificationReceivable;
  private bool _messageReceivable;
  private bool _showDefault;

  public string ChannelId
  {
    get
    {
      return _channelId;
    }
    set
    {
      __isset.channelId = true;
      this._channelId = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public bool NotificationReceivable
  {
    get
    {
      return _notificationReceivable;
    }
    set
    {
      __isset.notificationReceivable = true;
      this._notificationReceivable = value;
    }
  }

  public bool MessageReceivable
  {
    get
    {
      return _messageReceivable;
    }
    set
    {
      __isset.messageReceivable = true;
      this._messageReceivable = value;
    }
  }

  public bool ShowDefault
  {
    get
    {
      return _showDefault;
    }
    set
    {
      __isset.showDefault = true;
      this._showDefault = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool channelId;
    public bool name;
    public bool notificationReceivable;
    public bool messageReceivable;
    public bool showDefault;
  }

  public ChannelNotificationSetting()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              ChannelId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Name = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Bool)
            {
              NotificationReceivable = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Bool)
            {
              MessageReceivable = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.Bool)
            {
              ShowDefault = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("ChannelNotificationSetting");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (ChannelId != null && __isset.channelId)
      {
        field.Name = "channelId";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ChannelId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Name != null && __isset.name)
      {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Name, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.notificationReceivable)
      {
        field.Name = "notificationReceivable";
        field.Type = TType.Bool;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(NotificationReceivable, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.messageReceivable)
      {
        field.Name = "messageReceivable";
        field.Type = TType.Bool;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(MessageReceivable, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.showDefault)
      {
        field.Name = "showDefault";
        field.Type = TType.Bool;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(ShowDefault, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as ChannelNotificationSetting;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.channelId == other.__isset.channelId) && ((!__isset.channelId) || (System.Object.Equals(ChannelId, other.ChannelId))))
      && ((__isset.name == other.__isset.name) && ((!__isset.name) || (System.Object.Equals(Name, other.Name))))
      && ((__isset.notificationReceivable == other.__isset.notificationReceivable) && ((!__isset.notificationReceivable) || (System.Object.Equals(NotificationReceivable, other.NotificationReceivable))))
      && ((__isset.messageReceivable == other.__isset.messageReceivable) && ((!__isset.messageReceivable) || (System.Object.Equals(MessageReceivable, other.MessageReceivable))))
      && ((__isset.showDefault == other.__isset.showDefault) && ((!__isset.showDefault) || (System.Object.Equals(ShowDefault, other.ShowDefault))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.channelId)
        hashcode = (hashcode * 397) + ChannelId.GetHashCode();
      if(__isset.name)
        hashcode = (hashcode * 397) + Name.GetHashCode();
      if(__isset.notificationReceivable)
        hashcode = (hashcode * 397) + NotificationReceivable.GetHashCode();
      if(__isset.messageReceivable)
        hashcode = (hashcode * 397) + MessageReceivable.GetHashCode();
      if(__isset.showDefault)
        hashcode = (hashcode * 397) + ShowDefault.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("ChannelNotificationSetting(");
    bool __first = true;
    if (ChannelId != null && __isset.channelId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ChannelId: ");
      ChannelId.ToString(sb);
    }
    if (Name != null && __isset.name)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Name: ");
      Name.ToString(sb);
    }
    if (__isset.notificationReceivable)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("NotificationReceivable: ");
      NotificationReceivable.ToString(sb);
    }
    if (__isset.messageReceivable)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MessageReceivable: ");
      MessageReceivable.ToString(sb);
    }
    if (__isset.showDefault)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ShowDefault: ");
      ShowDefault.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

