/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class FriendRequestsInfo : TBase
{
  private int _totalIncomingCount;
  private int _totalOutgoingCount;
  private List<FriendRequest> _recentIncomings;
  private List<FriendRequest> _recentOutgoings;
  private int _totalIncomingLimit;
  private int _totalOutgoingLimit;

  public int TotalIncomingCount
  {
    get
    {
      return _totalIncomingCount;
    }
    set
    {
      __isset.totalIncomingCount = true;
      this._totalIncomingCount = value;
    }
  }

  public int TotalOutgoingCount
  {
    get
    {
      return _totalOutgoingCount;
    }
    set
    {
      __isset.totalOutgoingCount = true;
      this._totalOutgoingCount = value;
    }
  }

  public List<FriendRequest> RecentIncomings
  {
    get
    {
      return _recentIncomings;
    }
    set
    {
      __isset.recentIncomings = true;
      this._recentIncomings = value;
    }
  }

  public List<FriendRequest> RecentOutgoings
  {
    get
    {
      return _recentOutgoings;
    }
    set
    {
      __isset.recentOutgoings = true;
      this._recentOutgoings = value;
    }
  }

  public int TotalIncomingLimit
  {
    get
    {
      return _totalIncomingLimit;
    }
    set
    {
      __isset.totalIncomingLimit = true;
      this._totalIncomingLimit = value;
    }
  }

  public int TotalOutgoingLimit
  {
    get
    {
      return _totalOutgoingLimit;
    }
    set
    {
      __isset.totalOutgoingLimit = true;
      this._totalOutgoingLimit = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool totalIncomingCount;
    public bool totalOutgoingCount;
    public bool recentIncomings;
    public bool recentOutgoings;
    public bool totalIncomingLimit;
    public bool totalOutgoingLimit;
  }

  public FriendRequestsInfo()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              TotalIncomingCount = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              TotalOutgoingCount = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list129 = await iprot.ReadListBeginAsync(cancellationToken);
                RecentIncomings = new List<FriendRequest>(_list129.Count);
                for(int _i130 = 0; _i130 < _list129.Count; ++_i130)
                {
                  FriendRequest _elem131;
                  _elem131 = new FriendRequest();
                  await _elem131.ReadAsync(iprot, cancellationToken);
                  RecentIncomings.Add(_elem131);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                TList _list132 = await iprot.ReadListBeginAsync(cancellationToken);
                RecentOutgoings = new List<FriendRequest>(_list132.Count);
                for(int _i133 = 0; _i133 < _list132.Count; ++_i133)
                {
                  FriendRequest _elem134;
                  _elem134 = new FriendRequest();
                  await _elem134.ReadAsync(iprot, cancellationToken);
                  RecentOutgoings.Add(_elem134);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I32)
            {
              TotalIncomingLimit = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.I32)
            {
              TotalOutgoingLimit = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("FriendRequestsInfo");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.totalIncomingCount)
      {
        field.Name = "totalIncomingCount";
        field.Type = TType.I32;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(TotalIncomingCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.totalOutgoingCount)
      {
        field.Name = "totalOutgoingCount";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(TotalOutgoingCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (RecentIncomings != null && __isset.recentIncomings)
      {
        field.Name = "recentIncomings";
        field.Type = TType.List;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, RecentIncomings.Count), cancellationToken);
          foreach (FriendRequest _iter135 in RecentIncomings)
          {
            await _iter135.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (RecentOutgoings != null && __isset.recentOutgoings)
      {
        field.Name = "recentOutgoings";
        field.Type = TType.List;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, RecentOutgoings.Count), cancellationToken);
          foreach (FriendRequest _iter136 in RecentOutgoings)
          {
            await _iter136.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.totalIncomingLimit)
      {
        field.Name = "totalIncomingLimit";
        field.Type = TType.I32;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(TotalIncomingLimit, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.totalOutgoingLimit)
      {
        field.Name = "totalOutgoingLimit";
        field.Type = TType.I32;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(TotalOutgoingLimit, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as FriendRequestsInfo;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.totalIncomingCount == other.__isset.totalIncomingCount) && ((!__isset.totalIncomingCount) || (System.Object.Equals(TotalIncomingCount, other.TotalIncomingCount))))
      && ((__isset.totalOutgoingCount == other.__isset.totalOutgoingCount) && ((!__isset.totalOutgoingCount) || (System.Object.Equals(TotalOutgoingCount, other.TotalOutgoingCount))))
      && ((__isset.recentIncomings == other.__isset.recentIncomings) && ((!__isset.recentIncomings) || (TCollections.Equals(RecentIncomings, other.RecentIncomings))))
      && ((__isset.recentOutgoings == other.__isset.recentOutgoings) && ((!__isset.recentOutgoings) || (TCollections.Equals(RecentOutgoings, other.RecentOutgoings))))
      && ((__isset.totalIncomingLimit == other.__isset.totalIncomingLimit) && ((!__isset.totalIncomingLimit) || (System.Object.Equals(TotalIncomingLimit, other.TotalIncomingLimit))))
      && ((__isset.totalOutgoingLimit == other.__isset.totalOutgoingLimit) && ((!__isset.totalOutgoingLimit) || (System.Object.Equals(TotalOutgoingLimit, other.TotalOutgoingLimit))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.totalIncomingCount)
        hashcode = (hashcode * 397) + TotalIncomingCount.GetHashCode();
      if(__isset.totalOutgoingCount)
        hashcode = (hashcode * 397) + TotalOutgoingCount.GetHashCode();
      if(__isset.recentIncomings)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(RecentIncomings);
      if(__isset.recentOutgoings)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(RecentOutgoings);
      if(__isset.totalIncomingLimit)
        hashcode = (hashcode * 397) + TotalIncomingLimit.GetHashCode();
      if(__isset.totalOutgoingLimit)
        hashcode = (hashcode * 397) + TotalOutgoingLimit.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("FriendRequestsInfo(");
    bool __first = true;
    if (__isset.totalIncomingCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("TotalIncomingCount: ");
      sb.Append(TotalIncomingCount);
    }
    if (__isset.totalOutgoingCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("TotalOutgoingCount: ");
      sb.Append(TotalOutgoingCount);
    }
    if (RecentIncomings != null && __isset.recentIncomings)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("RecentIncomings: ");
      sb.Append(RecentIncomings);
    }
    if (RecentOutgoings != null && __isset.recentOutgoings)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("RecentOutgoings: ");
      sb.Append(RecentOutgoings);
    }
    if (__isset.totalIncomingLimit)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("TotalIncomingLimit: ");
      sb.Append(TotalIncomingLimit);
    }
    if (__isset.totalOutgoingLimit)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("TotalOutgoingLimit: ");
      sb.Append(TotalOutgoingLimit);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

