/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class BuddyList : TBase
{
  private string _classification;
  private string _displayName;
  private int _totalBuddyCount;
  private List<Contact> _popularContacts;

  public string Classification
  {
    get
    {
      return _classification;
    }
    set
    {
      __isset.classification = true;
      this._classification = value;
    }
  }

  public string DisplayName
  {
    get
    {
      return _displayName;
    }
    set
    {
      __isset.displayName = true;
      this._displayName = value;
    }
  }

  public int TotalBuddyCount
  {
    get
    {
      return _totalBuddyCount;
    }
    set
    {
      __isset.totalBuddyCount = true;
      this._totalBuddyCount = value;
    }
  }

  public List<Contact> PopularContacts
  {
    get
    {
      return _popularContacts;
    }
    set
    {
      __isset.popularContacts = true;
      this._popularContacts = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool classification;
    public bool displayName;
    public bool totalBuddyCount;
    public bool popularContacts;
  }

  public BuddyList()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Classification = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              DisplayName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              TotalBuddyCount = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                TList _list60 = await iprot.ReadListBeginAsync(cancellationToken);
                PopularContacts = new List<Contact>(_list60.Count);
                for(int _i61 = 0; _i61 < _list60.Count; ++_i61)
                {
                  Contact _elem62;
                  _elem62 = new Contact();
                  await _elem62.ReadAsync(iprot, cancellationToken);
                  PopularContacts.Add(_elem62);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("BuddyList");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Classification != null && __isset.classification)
      {
        field.Name = "classification";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Classification, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (DisplayName != null && __isset.displayName)
      {
        field.Name = "displayName";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(DisplayName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.totalBuddyCount)
      {
        field.Name = "totalBuddyCount";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(TotalBuddyCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (PopularContacts != null && __isset.popularContacts)
      {
        field.Name = "popularContacts";
        field.Type = TType.List;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, PopularContacts.Count), cancellationToken);
          foreach (Contact _iter63 in PopularContacts)
          {
            await _iter63.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as BuddyList;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.classification == other.__isset.classification) && ((!__isset.classification) || (System.Object.Equals(Classification, other.Classification))))
      && ((__isset.displayName == other.__isset.displayName) && ((!__isset.displayName) || (System.Object.Equals(DisplayName, other.DisplayName))))
      && ((__isset.totalBuddyCount == other.__isset.totalBuddyCount) && ((!__isset.totalBuddyCount) || (System.Object.Equals(TotalBuddyCount, other.TotalBuddyCount))))
      && ((__isset.popularContacts == other.__isset.popularContacts) && ((!__isset.popularContacts) || (TCollections.Equals(PopularContacts, other.PopularContacts))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.classification)
        hashcode = (hashcode * 397) + Classification.GetHashCode();
      if(__isset.displayName)
        hashcode = (hashcode * 397) + DisplayName.GetHashCode();
      if(__isset.totalBuddyCount)
        hashcode = (hashcode * 397) + TotalBuddyCount.GetHashCode();
      if(__isset.popularContacts)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(PopularContacts);
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("BuddyList(");
    bool __first = true;
    if (Classification != null && __isset.classification)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Classification: ");
      sb.Append(Classification);
    }
    if (DisplayName != null && __isset.displayName)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DisplayName: ");
      sb.Append(DisplayName);
    }
    if (__isset.totalBuddyCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("TotalBuddyCount: ");
      sb.Append(TotalBuddyCount);
    }
    if (PopularContacts != null && __isset.popularContacts)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PopularContacts: ");
      sb.Append(PopularContacts);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

