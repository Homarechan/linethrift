/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class ContactModification : TBase
{
  private ModificationType _type;
  private string _luid;
  private List<string> _phones;
  private List<string> _emails;
  private List<string> _userids;

  /// <summary>
  /// 
  /// <seealso cref="ModificationType"/>
  /// </summary>
  public ModificationType Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  public string Luid
  {
    get
    {
      return _luid;
    }
    set
    {
      __isset.luid = true;
      this._luid = value;
    }
  }

  public List<string> Phones
  {
    get
    {
      return _phones;
    }
    set
    {
      __isset.phones = true;
      this._phones = value;
    }
  }

  public List<string> Emails
  {
    get
    {
      return _emails;
    }
    set
    {
      __isset.emails = true;
      this._emails = value;
    }
  }

  public List<string> Userids
  {
    get
    {
      return _userids;
    }
    set
    {
      __isset.userids = true;
      this._userids = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool type;
    public bool luid;
    public bool phones;
    public bool emails;
    public bool userids;
  }

  public ContactModification()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              Type = (ModificationType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Luid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.List)
            {
              {
                TList _list113 = await iprot.ReadListBeginAsync(cancellationToken);
                Phones = new List<string>(_list113.Count);
                for(int _i114 = 0; _i114 < _list113.Count; ++_i114)
                {
                  string _elem115;
                  _elem115 = await iprot.ReadStringAsync(cancellationToken);
                  Phones.Add(_elem115);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.List)
            {
              {
                TList _list116 = await iprot.ReadListBeginAsync(cancellationToken);
                Emails = new List<string>(_list116.Count);
                for(int _i117 = 0; _i117 < _list116.Count; ++_i117)
                {
                  string _elem118;
                  _elem118 = await iprot.ReadStringAsync(cancellationToken);
                  Emails.Add(_elem118);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 13:
            if (field.Type == TType.List)
            {
              {
                TList _list119 = await iprot.ReadListBeginAsync(cancellationToken);
                Userids = new List<string>(_list119.Count);
                for(int _i120 = 0; _i120 < _list119.Count; ++_i120)
                {
                  string _elem121;
                  _elem121 = await iprot.ReadStringAsync(cancellationToken);
                  Userids.Add(_elem121);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("ContactModification");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.type)
      {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Luid != null && __isset.luid)
      {
        field.Name = "luid";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Luid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Phones != null && __isset.phones)
      {
        field.Name = "phones";
        field.Type = TType.List;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Phones.Count), cancellationToken);
          foreach (string _iter122 in Phones)
          {
            await oprot.WriteStringAsync(_iter122, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Emails != null && __isset.emails)
      {
        field.Name = "emails";
        field.Type = TType.List;
        field.ID = 12;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Emails.Count), cancellationToken);
          foreach (string _iter123 in Emails)
          {
            await oprot.WriteStringAsync(_iter123, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Userids != null && __isset.userids)
      {
        field.Name = "userids";
        field.Type = TType.List;
        field.ID = 13;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Userids.Count), cancellationToken);
          foreach (string _iter124 in Userids)
          {
            await oprot.WriteStringAsync(_iter124, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as ContactModification;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.type == other.__isset.type) && ((!__isset.type) || (System.Object.Equals(Type, other.Type))))
      && ((__isset.luid == other.__isset.luid) && ((!__isset.luid) || (System.Object.Equals(Luid, other.Luid))))
      && ((__isset.phones == other.__isset.phones) && ((!__isset.phones) || (TCollections.Equals(Phones, other.Phones))))
      && ((__isset.emails == other.__isset.emails) && ((!__isset.emails) || (TCollections.Equals(Emails, other.Emails))))
      && ((__isset.userids == other.__isset.userids) && ((!__isset.userids) || (TCollections.Equals(Userids, other.Userids))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.type)
        hashcode = (hashcode * 397) + Type.GetHashCode();
      if(__isset.luid)
        hashcode = (hashcode * 397) + Luid.GetHashCode();
      if(__isset.phones)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Phones);
      if(__isset.emails)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Emails);
      if(__isset.userids)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Userids);
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("ContactModification(");
    bool __first = true;
    if (__isset.type)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Type: ");
      Type.ToString(sb);
    }
    if (Luid != null && __isset.luid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Luid: ");
      Luid.ToString(sb);
    }
    if (Phones != null && __isset.phones)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Phones: ");
      Phones.ToString(sb);
    }
    if (Emails != null && __isset.emails)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Emails: ");
      Emails.ToString(sb);
    }
    if (Userids != null && __isset.userids)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Userids: ");
      Userids.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

