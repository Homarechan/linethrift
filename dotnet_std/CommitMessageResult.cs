/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class CommitMessageResult : TBase
{
  private Message _message;
  private CommitMessageResultCode _code;
  private string _reason;
  private long _successCount;
  private long _failCount;
  private long _unregisterCount;
  private long _blockCount;

  public Message Message
  {
    get
    {
      return _message;
    }
    set
    {
      __isset.message = true;
      this._message = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="CommitMessageResultCode"/>
  /// </summary>
  public CommitMessageResultCode Code
  {
    get
    {
      return _code;
    }
    set
    {
      __isset.code = true;
      this._code = value;
    }
  }

  public string Reason
  {
    get
    {
      return _reason;
    }
    set
    {
      __isset.reason = true;
      this._reason = value;
    }
  }

  public long SuccessCount
  {
    get
    {
      return _successCount;
    }
    set
    {
      __isset.successCount = true;
      this._successCount = value;
    }
  }

  public long FailCount
  {
    get
    {
      return _failCount;
    }
    set
    {
      __isset.failCount = true;
      this._failCount = value;
    }
  }

  public long UnregisterCount
  {
    get
    {
      return _unregisterCount;
    }
    set
    {
      __isset.unregisterCount = true;
      this._unregisterCount = value;
    }
  }

  public long BlockCount
  {
    get
    {
      return _blockCount;
    }
    set
    {
      __isset.blockCount = true;
      this._blockCount = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool message;
    public bool code;
    public bool reason;
    public bool successCount;
    public bool failCount;
    public bool unregisterCount;
    public bool blockCount;
  }

  public CommitMessageResult()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              Message = new Message();
              await Message.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              Code = (CommitMessageResultCode)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Reason = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I64)
            {
              SuccessCount = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I64)
            {
              FailCount = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.I64)
            {
              UnregisterCount = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.I64)
            {
              BlockCount = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("CommitMessageResult");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Message != null && __isset.message)
      {
        field.Name = "message";
        field.Type = TType.Struct;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Message.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.code)
      {
        field.Name = "code";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Code, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Reason != null && __isset.reason)
      {
        field.Name = "reason";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Reason, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.successCount)
      {
        field.Name = "successCount";
        field.Type = TType.I64;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(SuccessCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.failCount)
      {
        field.Name = "failCount";
        field.Type = TType.I64;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(FailCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.unregisterCount)
      {
        field.Name = "unregisterCount";
        field.Type = TType.I64;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(UnregisterCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.blockCount)
      {
        field.Name = "blockCount";
        field.Type = TType.I64;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(BlockCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as CommitMessageResult;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.message == other.__isset.message) && ((!__isset.message) || (System.Object.Equals(Message, other.Message))))
      && ((__isset.code == other.__isset.code) && ((!__isset.code) || (System.Object.Equals(Code, other.Code))))
      && ((__isset.reason == other.__isset.reason) && ((!__isset.reason) || (System.Object.Equals(Reason, other.Reason))))
      && ((__isset.successCount == other.__isset.successCount) && ((!__isset.successCount) || (System.Object.Equals(SuccessCount, other.SuccessCount))))
      && ((__isset.failCount == other.__isset.failCount) && ((!__isset.failCount) || (System.Object.Equals(FailCount, other.FailCount))))
      && ((__isset.unregisterCount == other.__isset.unregisterCount) && ((!__isset.unregisterCount) || (System.Object.Equals(UnregisterCount, other.UnregisterCount))))
      && ((__isset.blockCount == other.__isset.blockCount) && ((!__isset.blockCount) || (System.Object.Equals(BlockCount, other.BlockCount))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.message)
        hashcode = (hashcode * 397) + Message.GetHashCode();
      if(__isset.code)
        hashcode = (hashcode * 397) + Code.GetHashCode();
      if(__isset.reason)
        hashcode = (hashcode * 397) + Reason.GetHashCode();
      if(__isset.successCount)
        hashcode = (hashcode * 397) + SuccessCount.GetHashCode();
      if(__isset.failCount)
        hashcode = (hashcode * 397) + FailCount.GetHashCode();
      if(__isset.unregisterCount)
        hashcode = (hashcode * 397) + UnregisterCount.GetHashCode();
      if(__isset.blockCount)
        hashcode = (hashcode * 397) + BlockCount.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("CommitMessageResult(");
    bool __first = true;
    if (Message != null && __isset.message)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Message: ");
      sb.Append(Message);
    }
    if (__isset.code)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Code: ");
      sb.Append(Code);
    }
    if (Reason != null && __isset.reason)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Reason: ");
      sb.Append(Reason);
    }
    if (__isset.successCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SuccessCount: ");
      sb.Append(SuccessCount);
    }
    if (__isset.failCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("FailCount: ");
      sb.Append(FailCount);
    }
    if (__isset.unregisterCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("UnregisterCount: ");
      sb.Append(UnregisterCount);
    }
    if (__isset.blockCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("BlockCount: ");
      sb.Append(BlockCount);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

