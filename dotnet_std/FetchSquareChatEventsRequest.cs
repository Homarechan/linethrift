/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class FetchSquareChatEventsRequest : TBase
{
  private long _subscriptionId;
  private string _squareChatMid;
  private string _syncToken;
  private int _limit;
  private FetchDirection _direction;

  public long SubscriptionId
  {
    get
    {
      return _subscriptionId;
    }
    set
    {
      __isset.subscriptionId = true;
      this._subscriptionId = value;
    }
  }

  public string SquareChatMid
  {
    get
    {
      return _squareChatMid;
    }
    set
    {
      __isset.squareChatMid = true;
      this._squareChatMid = value;
    }
  }

  public string SyncToken
  {
    get
    {
      return _syncToken;
    }
    set
    {
      __isset.syncToken = true;
      this._syncToken = value;
    }
  }

  public int Limit
  {
    get
    {
      return _limit;
    }
    set
    {
      __isset.limit = true;
      this._limit = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="FetchDirection"/>
  /// </summary>
  public FetchDirection Direction
  {
    get
    {
      return _direction;
    }
    set
    {
      __isset.direction = true;
      this._direction = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool subscriptionId;
    public bool squareChatMid;
    public bool syncToken;
    public bool limit;
    public bool direction;
  }

  public FetchSquareChatEventsRequest()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              SubscriptionId = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              SquareChatMid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              SyncToken = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I32)
            {
              Limit = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I32)
            {
              Direction = (FetchDirection)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("FetchSquareChatEventsRequest");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.subscriptionId)
      {
        field.Name = "subscriptionId";
        field.Type = TType.I64;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(SubscriptionId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SquareChatMid != null && __isset.squareChatMid)
      {
        field.Name = "squareChatMid";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(SquareChatMid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SyncToken != null && __isset.syncToken)
      {
        field.Name = "syncToken";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(SyncToken, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.limit)
      {
        field.Name = "limit";
        field.Type = TType.I32;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Limit, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.direction)
      {
        field.Name = "direction";
        field.Type = TType.I32;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Direction, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as FetchSquareChatEventsRequest;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.subscriptionId == other.__isset.subscriptionId) && ((!__isset.subscriptionId) || (System.Object.Equals(SubscriptionId, other.SubscriptionId))))
      && ((__isset.squareChatMid == other.__isset.squareChatMid) && ((!__isset.squareChatMid) || (System.Object.Equals(SquareChatMid, other.SquareChatMid))))
      && ((__isset.syncToken == other.__isset.syncToken) && ((!__isset.syncToken) || (System.Object.Equals(SyncToken, other.SyncToken))))
      && ((__isset.limit == other.__isset.limit) && ((!__isset.limit) || (System.Object.Equals(Limit, other.Limit))))
      && ((__isset.direction == other.__isset.direction) && ((!__isset.direction) || (System.Object.Equals(Direction, other.Direction))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.subscriptionId)
        hashcode = (hashcode * 397) + SubscriptionId.GetHashCode();
      if(__isset.squareChatMid)
        hashcode = (hashcode * 397) + SquareChatMid.GetHashCode();
      if(__isset.syncToken)
        hashcode = (hashcode * 397) + SyncToken.GetHashCode();
      if(__isset.limit)
        hashcode = (hashcode * 397) + Limit.GetHashCode();
      if(__isset.direction)
        hashcode = (hashcode * 397) + Direction.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("FetchSquareChatEventsRequest(");
    bool __first = true;
    if (__isset.subscriptionId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SubscriptionId: ");
      sb.Append(SubscriptionId);
    }
    if (SquareChatMid != null && __isset.squareChatMid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SquareChatMid: ");
      sb.Append(SquareChatMid);
    }
    if (SyncToken != null && __isset.syncToken)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SyncToken: ");
      sb.Append(SyncToken);
    }
    if (__isset.limit)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Limit: ");
      sb.Append(Limit);
    }
    if (__isset.direction)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Direction: ");
      sb.Append(Direction);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

