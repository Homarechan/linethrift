/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class PlaceSearchInfo : TBase
{
  private string _name;
  private string _address;
  private double _latitude;
  private double _longitude;

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string Address
  {
    get
    {
      return _address;
    }
    set
    {
      __isset.address = true;
      this._address = value;
    }
  }

  public double Latitude
  {
    get
    {
      return _latitude;
    }
    set
    {
      __isset.latitude = true;
      this._latitude = value;
    }
  }

  public double Longitude
  {
    get
    {
      return _longitude;
    }
    set
    {
      __isset.longitude = true;
      this._longitude = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool name;
    public bool address;
    public bool latitude;
    public bool longitude;
  }

  public PlaceSearchInfo()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Name = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Address = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Double)
            {
              Latitude = await iprot.ReadDoubleAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Double)
            {
              Longitude = await iprot.ReadDoubleAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("PlaceSearchInfo");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Name != null && __isset.name)
      {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Name, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Address != null && __isset.address)
      {
        field.Name = "address";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Address, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.latitude)
      {
        field.Name = "latitude";
        field.Type = TType.Double;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteDoubleAsync(Latitude, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.longitude)
      {
        field.Name = "longitude";
        field.Type = TType.Double;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteDoubleAsync(Longitude, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as PlaceSearchInfo;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.name == other.__isset.name) && ((!__isset.name) || (System.Object.Equals(Name, other.Name))))
      && ((__isset.address == other.__isset.address) && ((!__isset.address) || (System.Object.Equals(Address, other.Address))))
      && ((__isset.latitude == other.__isset.latitude) && ((!__isset.latitude) || (System.Object.Equals(Latitude, other.Latitude))))
      && ((__isset.longitude == other.__isset.longitude) && ((!__isset.longitude) || (System.Object.Equals(Longitude, other.Longitude))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.name)
        hashcode = (hashcode * 397) + Name.GetHashCode();
      if(__isset.address)
        hashcode = (hashcode * 397) + Address.GetHashCode();
      if(__isset.latitude)
        hashcode = (hashcode * 397) + Latitude.GetHashCode();
      if(__isset.longitude)
        hashcode = (hashcode * 397) + Longitude.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("PlaceSearchInfo(");
    bool __first = true;
    if (Name != null && __isset.name)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Name: ");
      sb.Append(Name);
    }
    if (Address != null && __isset.address)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Address: ");
      sb.Append(Address);
    }
    if (__isset.latitude)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Latitude: ");
      sb.Append(Latitude);
    }
    if (__isset.longitude)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Longitude: ");
      sb.Append(Longitude);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

