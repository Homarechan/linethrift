/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class Contact : TBase
{
  private string _mid;
  private long _createdTime;
  private ContactType _type;
  private ContactStatus _status;
  private ContactRelation _relation;
  private string _displayName;
  private string _phoneticName;
  private string _pictureStatus;
  private string _thumbnailUrl;
  private string _statusMessage;
  private string _displayNameOverridden;
  private long _favoriteTime;
  private bool _capableVoiceCall;
  private bool _capableVideoCall;
  private bool _capableMyhome;
  private bool _capableBuddy;
  private int _attributes;
  private long _settings;
  private string _picturePath;
  private string _recommendParams;
  private FriendRequestStatus _friendRequestStatus;
  private string _musicProfile;
  private string _videoProfile;

  public string Mid
  {
    get
    {
      return _mid;
    }
    set
    {
      __isset.mid = true;
      this._mid = value;
    }
  }

  public long CreatedTime
  {
    get
    {
      return _createdTime;
    }
    set
    {
      __isset.createdTime = true;
      this._createdTime = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="ContactType"/>
  /// </summary>
  public ContactType Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="ContactStatus"/>
  /// </summary>
  public ContactStatus Status
  {
    get
    {
      return _status;
    }
    set
    {
      __isset.status = true;
      this._status = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="ContactRelation"/>
  /// </summary>
  public ContactRelation Relation
  {
    get
    {
      return _relation;
    }
    set
    {
      __isset.relation = true;
      this._relation = value;
    }
  }

  public string DisplayName
  {
    get
    {
      return _displayName;
    }
    set
    {
      __isset.displayName = true;
      this._displayName = value;
    }
  }

  public string PhoneticName
  {
    get
    {
      return _phoneticName;
    }
    set
    {
      __isset.phoneticName = true;
      this._phoneticName = value;
    }
  }

  public string PictureStatus
  {
    get
    {
      return _pictureStatus;
    }
    set
    {
      __isset.pictureStatus = true;
      this._pictureStatus = value;
    }
  }

  public string ThumbnailUrl
  {
    get
    {
      return _thumbnailUrl;
    }
    set
    {
      __isset.thumbnailUrl = true;
      this._thumbnailUrl = value;
    }
  }

  public string StatusMessage
  {
    get
    {
      return _statusMessage;
    }
    set
    {
      __isset.statusMessage = true;
      this._statusMessage = value;
    }
  }

  public string DisplayNameOverridden
  {
    get
    {
      return _displayNameOverridden;
    }
    set
    {
      __isset.displayNameOverridden = true;
      this._displayNameOverridden = value;
    }
  }

  public long FavoriteTime
  {
    get
    {
      return _favoriteTime;
    }
    set
    {
      __isset.favoriteTime = true;
      this._favoriteTime = value;
    }
  }

  public bool CapableVoiceCall
  {
    get
    {
      return _capableVoiceCall;
    }
    set
    {
      __isset.capableVoiceCall = true;
      this._capableVoiceCall = value;
    }
  }

  public bool CapableVideoCall
  {
    get
    {
      return _capableVideoCall;
    }
    set
    {
      __isset.capableVideoCall = true;
      this._capableVideoCall = value;
    }
  }

  public bool CapableMyhome
  {
    get
    {
      return _capableMyhome;
    }
    set
    {
      __isset.capableMyhome = true;
      this._capableMyhome = value;
    }
  }

  public bool CapableBuddy
  {
    get
    {
      return _capableBuddy;
    }
    set
    {
      __isset.capableBuddy = true;
      this._capableBuddy = value;
    }
  }

  public int Attributes
  {
    get
    {
      return _attributes;
    }
    set
    {
      __isset.attributes = true;
      this._attributes = value;
    }
  }

  public long Settings
  {
    get
    {
      return _settings;
    }
    set
    {
      __isset.settings = true;
      this._settings = value;
    }
  }

  public string PicturePath
  {
    get
    {
      return _picturePath;
    }
    set
    {
      __isset.picturePath = true;
      this._picturePath = value;
    }
  }

  public string RecommendParams
  {
    get
    {
      return _recommendParams;
    }
    set
    {
      __isset.recommendParams = true;
      this._recommendParams = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="FriendRequestStatus"/>
  /// </summary>
  public FriendRequestStatus FriendRequestStatus
  {
    get
    {
      return _friendRequestStatus;
    }
    set
    {
      __isset.friendRequestStatus = true;
      this._friendRequestStatus = value;
    }
  }

  public string MusicProfile
  {
    get
    {
      return _musicProfile;
    }
    set
    {
      __isset.musicProfile = true;
      this._musicProfile = value;
    }
  }

  public string VideoProfile
  {
    get
    {
      return _videoProfile;
    }
    set
    {
      __isset.videoProfile = true;
      this._videoProfile = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool mid;
    public bool createdTime;
    public bool type;
    public bool status;
    public bool relation;
    public bool displayName;
    public bool phoneticName;
    public bool pictureStatus;
    public bool thumbnailUrl;
    public bool statusMessage;
    public bool displayNameOverridden;
    public bool favoriteTime;
    public bool capableVoiceCall;
    public bool capableVideoCall;
    public bool capableMyhome;
    public bool capableBuddy;
    public bool attributes;
    public bool settings;
    public bool picturePath;
    public bool recommendParams;
    public bool friendRequestStatus;
    public bool musicProfile;
    public bool videoProfile;
  }

  public Contact()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Mid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              CreatedTime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.I32)
            {
              Type = (ContactType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.I32)
            {
              Status = (ContactStatus)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 21:
            if (field.Type == TType.I32)
            {
              Relation = (ContactRelation)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 22:
            if (field.Type == TType.String)
            {
              DisplayName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 23:
            if (field.Type == TType.String)
            {
              PhoneticName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 24:
            if (field.Type == TType.String)
            {
              PictureStatus = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 25:
            if (field.Type == TType.String)
            {
              ThumbnailUrl = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 26:
            if (field.Type == TType.String)
            {
              StatusMessage = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 27:
            if (field.Type == TType.String)
            {
              DisplayNameOverridden = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 28:
            if (field.Type == TType.I64)
            {
              FavoriteTime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 31:
            if (field.Type == TType.Bool)
            {
              CapableVoiceCall = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 32:
            if (field.Type == TType.Bool)
            {
              CapableVideoCall = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 33:
            if (field.Type == TType.Bool)
            {
              CapableMyhome = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 34:
            if (field.Type == TType.Bool)
            {
              CapableBuddy = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 35:
            if (field.Type == TType.I32)
            {
              Attributes = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 36:
            if (field.Type == TType.I64)
            {
              Settings = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 37:
            if (field.Type == TType.String)
            {
              PicturePath = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 38:
            if (field.Type == TType.String)
            {
              RecommendParams = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 39:
            if (field.Type == TType.I32)
            {
              FriendRequestStatus = (FriendRequestStatus)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 40:
            if (field.Type == TType.String)
            {
              MusicProfile = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 42:
            if (field.Type == TType.String)
            {
              VideoProfile = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("Contact");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Mid != null && __isset.mid)
      {
        field.Name = "mid";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Mid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.createdTime)
      {
        field.Name = "createdTime";
        field.Type = TType.I64;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(CreatedTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.type)
      {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.status)
      {
        field.Name = "status";
        field.Type = TType.I32;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Status, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.relation)
      {
        field.Name = "relation";
        field.Type = TType.I32;
        field.ID = 21;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Relation, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (DisplayName != null && __isset.displayName)
      {
        field.Name = "displayName";
        field.Type = TType.String;
        field.ID = 22;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(DisplayName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (PhoneticName != null && __isset.phoneticName)
      {
        field.Name = "phoneticName";
        field.Type = TType.String;
        field.ID = 23;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(PhoneticName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (PictureStatus != null && __isset.pictureStatus)
      {
        field.Name = "pictureStatus";
        field.Type = TType.String;
        field.ID = 24;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(PictureStatus, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ThumbnailUrl != null && __isset.thumbnailUrl)
      {
        field.Name = "thumbnailUrl";
        field.Type = TType.String;
        field.ID = 25;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ThumbnailUrl, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (StatusMessage != null && __isset.statusMessage)
      {
        field.Name = "statusMessage";
        field.Type = TType.String;
        field.ID = 26;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(StatusMessage, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (DisplayNameOverridden != null && __isset.displayNameOverridden)
      {
        field.Name = "displayNameOverridden";
        field.Type = TType.String;
        field.ID = 27;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(DisplayNameOverridden, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.favoriteTime)
      {
        field.Name = "favoriteTime";
        field.Type = TType.I64;
        field.ID = 28;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(FavoriteTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.capableVoiceCall)
      {
        field.Name = "capableVoiceCall";
        field.Type = TType.Bool;
        field.ID = 31;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(CapableVoiceCall, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.capableVideoCall)
      {
        field.Name = "capableVideoCall";
        field.Type = TType.Bool;
        field.ID = 32;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(CapableVideoCall, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.capableMyhome)
      {
        field.Name = "capableMyhome";
        field.Type = TType.Bool;
        field.ID = 33;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(CapableMyhome, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.capableBuddy)
      {
        field.Name = "capableBuddy";
        field.Type = TType.Bool;
        field.ID = 34;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(CapableBuddy, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.attributes)
      {
        field.Name = "attributes";
        field.Type = TType.I32;
        field.ID = 35;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Attributes, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.settings)
      {
        field.Name = "settings";
        field.Type = TType.I64;
        field.ID = 36;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Settings, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (PicturePath != null && __isset.picturePath)
      {
        field.Name = "picturePath";
        field.Type = TType.String;
        field.ID = 37;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(PicturePath, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (RecommendParams != null && __isset.recommendParams)
      {
        field.Name = "recommendParams";
        field.Type = TType.String;
        field.ID = 38;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(RecommendParams, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.friendRequestStatus)
      {
        field.Name = "friendRequestStatus";
        field.Type = TType.I32;
        field.ID = 39;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)FriendRequestStatus, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (MusicProfile != null && __isset.musicProfile)
      {
        field.Name = "musicProfile";
        field.Type = TType.String;
        field.ID = 40;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(MusicProfile, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (VideoProfile != null && __isset.videoProfile)
      {
        field.Name = "videoProfile";
        field.Type = TType.String;
        field.ID = 42;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(VideoProfile, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as Contact;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.mid == other.__isset.mid) && ((!__isset.mid) || (System.Object.Equals(Mid, other.Mid))))
      && ((__isset.createdTime == other.__isset.createdTime) && ((!__isset.createdTime) || (System.Object.Equals(CreatedTime, other.CreatedTime))))
      && ((__isset.type == other.__isset.type) && ((!__isset.type) || (System.Object.Equals(Type, other.Type))))
      && ((__isset.status == other.__isset.status) && ((!__isset.status) || (System.Object.Equals(Status, other.Status))))
      && ((__isset.relation == other.__isset.relation) && ((!__isset.relation) || (System.Object.Equals(Relation, other.Relation))))
      && ((__isset.displayName == other.__isset.displayName) && ((!__isset.displayName) || (System.Object.Equals(DisplayName, other.DisplayName))))
      && ((__isset.phoneticName == other.__isset.phoneticName) && ((!__isset.phoneticName) || (System.Object.Equals(PhoneticName, other.PhoneticName))))
      && ((__isset.pictureStatus == other.__isset.pictureStatus) && ((!__isset.pictureStatus) || (System.Object.Equals(PictureStatus, other.PictureStatus))))
      && ((__isset.thumbnailUrl == other.__isset.thumbnailUrl) && ((!__isset.thumbnailUrl) || (System.Object.Equals(ThumbnailUrl, other.ThumbnailUrl))))
      && ((__isset.statusMessage == other.__isset.statusMessage) && ((!__isset.statusMessage) || (System.Object.Equals(StatusMessage, other.StatusMessage))))
      && ((__isset.displayNameOverridden == other.__isset.displayNameOverridden) && ((!__isset.displayNameOverridden) || (System.Object.Equals(DisplayNameOverridden, other.DisplayNameOverridden))))
      && ((__isset.favoriteTime == other.__isset.favoriteTime) && ((!__isset.favoriteTime) || (System.Object.Equals(FavoriteTime, other.FavoriteTime))))
      && ((__isset.capableVoiceCall == other.__isset.capableVoiceCall) && ((!__isset.capableVoiceCall) || (System.Object.Equals(CapableVoiceCall, other.CapableVoiceCall))))
      && ((__isset.capableVideoCall == other.__isset.capableVideoCall) && ((!__isset.capableVideoCall) || (System.Object.Equals(CapableVideoCall, other.CapableVideoCall))))
      && ((__isset.capableMyhome == other.__isset.capableMyhome) && ((!__isset.capableMyhome) || (System.Object.Equals(CapableMyhome, other.CapableMyhome))))
      && ((__isset.capableBuddy == other.__isset.capableBuddy) && ((!__isset.capableBuddy) || (System.Object.Equals(CapableBuddy, other.CapableBuddy))))
      && ((__isset.attributes == other.__isset.attributes) && ((!__isset.attributes) || (System.Object.Equals(Attributes, other.Attributes))))
      && ((__isset.settings == other.__isset.settings) && ((!__isset.settings) || (System.Object.Equals(Settings, other.Settings))))
      && ((__isset.picturePath == other.__isset.picturePath) && ((!__isset.picturePath) || (System.Object.Equals(PicturePath, other.PicturePath))))
      && ((__isset.recommendParams == other.__isset.recommendParams) && ((!__isset.recommendParams) || (System.Object.Equals(RecommendParams, other.RecommendParams))))
      && ((__isset.friendRequestStatus == other.__isset.friendRequestStatus) && ((!__isset.friendRequestStatus) || (System.Object.Equals(FriendRequestStatus, other.FriendRequestStatus))))
      && ((__isset.musicProfile == other.__isset.musicProfile) && ((!__isset.musicProfile) || (System.Object.Equals(MusicProfile, other.MusicProfile))))
      && ((__isset.videoProfile == other.__isset.videoProfile) && ((!__isset.videoProfile) || (System.Object.Equals(VideoProfile, other.VideoProfile))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.mid)
        hashcode = (hashcode * 397) + Mid.GetHashCode();
      if(__isset.createdTime)
        hashcode = (hashcode * 397) + CreatedTime.GetHashCode();
      if(__isset.type)
        hashcode = (hashcode * 397) + Type.GetHashCode();
      if(__isset.status)
        hashcode = (hashcode * 397) + Status.GetHashCode();
      if(__isset.relation)
        hashcode = (hashcode * 397) + Relation.GetHashCode();
      if(__isset.displayName)
        hashcode = (hashcode * 397) + DisplayName.GetHashCode();
      if(__isset.phoneticName)
        hashcode = (hashcode * 397) + PhoneticName.GetHashCode();
      if(__isset.pictureStatus)
        hashcode = (hashcode * 397) + PictureStatus.GetHashCode();
      if(__isset.thumbnailUrl)
        hashcode = (hashcode * 397) + ThumbnailUrl.GetHashCode();
      if(__isset.statusMessage)
        hashcode = (hashcode * 397) + StatusMessage.GetHashCode();
      if(__isset.displayNameOverridden)
        hashcode = (hashcode * 397) + DisplayNameOverridden.GetHashCode();
      if(__isset.favoriteTime)
        hashcode = (hashcode * 397) + FavoriteTime.GetHashCode();
      if(__isset.capableVoiceCall)
        hashcode = (hashcode * 397) + CapableVoiceCall.GetHashCode();
      if(__isset.capableVideoCall)
        hashcode = (hashcode * 397) + CapableVideoCall.GetHashCode();
      if(__isset.capableMyhome)
        hashcode = (hashcode * 397) + CapableMyhome.GetHashCode();
      if(__isset.capableBuddy)
        hashcode = (hashcode * 397) + CapableBuddy.GetHashCode();
      if(__isset.attributes)
        hashcode = (hashcode * 397) + Attributes.GetHashCode();
      if(__isset.settings)
        hashcode = (hashcode * 397) + Settings.GetHashCode();
      if(__isset.picturePath)
        hashcode = (hashcode * 397) + PicturePath.GetHashCode();
      if(__isset.recommendParams)
        hashcode = (hashcode * 397) + RecommendParams.GetHashCode();
      if(__isset.friendRequestStatus)
        hashcode = (hashcode * 397) + FriendRequestStatus.GetHashCode();
      if(__isset.musicProfile)
        hashcode = (hashcode * 397) + MusicProfile.GetHashCode();
      if(__isset.videoProfile)
        hashcode = (hashcode * 397) + VideoProfile.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("Contact(");
    bool __first = true;
    if (Mid != null && __isset.mid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Mid: ");
      sb.Append(Mid);
    }
    if (__isset.createdTime)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CreatedTime: ");
      sb.Append(CreatedTime);
    }
    if (__isset.type)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Type: ");
      sb.Append(Type);
    }
    if (__isset.status)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Status: ");
      sb.Append(Status);
    }
    if (__isset.relation)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Relation: ");
      sb.Append(Relation);
    }
    if (DisplayName != null && __isset.displayName)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DisplayName: ");
      sb.Append(DisplayName);
    }
    if (PhoneticName != null && __isset.phoneticName)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PhoneticName: ");
      sb.Append(PhoneticName);
    }
    if (PictureStatus != null && __isset.pictureStatus)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PictureStatus: ");
      sb.Append(PictureStatus);
    }
    if (ThumbnailUrl != null && __isset.thumbnailUrl)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ThumbnailUrl: ");
      sb.Append(ThumbnailUrl);
    }
    if (StatusMessage != null && __isset.statusMessage)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("StatusMessage: ");
      sb.Append(StatusMessage);
    }
    if (DisplayNameOverridden != null && __isset.displayNameOverridden)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DisplayNameOverridden: ");
      sb.Append(DisplayNameOverridden);
    }
    if (__isset.favoriteTime)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("FavoriteTime: ");
      sb.Append(FavoriteTime);
    }
    if (__isset.capableVoiceCall)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CapableVoiceCall: ");
      sb.Append(CapableVoiceCall);
    }
    if (__isset.capableVideoCall)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CapableVideoCall: ");
      sb.Append(CapableVideoCall);
    }
    if (__isset.capableMyhome)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CapableMyhome: ");
      sb.Append(CapableMyhome);
    }
    if (__isset.capableBuddy)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CapableBuddy: ");
      sb.Append(CapableBuddy);
    }
    if (__isset.attributes)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Attributes: ");
      sb.Append(Attributes);
    }
    if (__isset.settings)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Settings: ");
      sb.Append(Settings);
    }
    if (PicturePath != null && __isset.picturePath)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PicturePath: ");
      sb.Append(PicturePath);
    }
    if (RecommendParams != null && __isset.recommendParams)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("RecommendParams: ");
      sb.Append(RecommendParams);
    }
    if (__isset.friendRequestStatus)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("FriendRequestStatus: ");
      sb.Append(FriendRequestStatus);
    }
    if (MusicProfile != null && __isset.musicProfile)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MusicProfile: ");
      sb.Append(MusicProfile);
    }
    if (VideoProfile != null && __isset.videoProfile)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("VideoProfile: ");
      sb.Append(VideoProfile);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

