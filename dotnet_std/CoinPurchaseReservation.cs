/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class CoinPurchaseReservation : TBase
{
  private string _productId;
  private string _country;
  private string _currency;
  private string _price;
  private PaymentType _appStoreCode;
  private string _language;
  private PaymentPgType _pgCode;
  private string _redirectUrl;

  public string ProductId
  {
    get
    {
      return _productId;
    }
    set
    {
      __isset.productId = true;
      this._productId = value;
    }
  }

  public string Country
  {
    get
    {
      return _country;
    }
    set
    {
      __isset.country = true;
      this._country = value;
    }
  }

  public string Currency
  {
    get
    {
      return _currency;
    }
    set
    {
      __isset.currency = true;
      this._currency = value;
    }
  }

  public string Price
  {
    get
    {
      return _price;
    }
    set
    {
      __isset.price = true;
      this._price = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="PaymentType"/>
  /// </summary>
  public PaymentType AppStoreCode
  {
    get
    {
      return _appStoreCode;
    }
    set
    {
      __isset.appStoreCode = true;
      this._appStoreCode = value;
    }
  }

  public string Language
  {
    get
    {
      return _language;
    }
    set
    {
      __isset.language = true;
      this._language = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="PaymentPgType"/>
  /// </summary>
  public PaymentPgType PgCode
  {
    get
    {
      return _pgCode;
    }
    set
    {
      __isset.pgCode = true;
      this._pgCode = value;
    }
  }

  public string RedirectUrl
  {
    get
    {
      return _redirectUrl;
    }
    set
    {
      __isset.redirectUrl = true;
      this._redirectUrl = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool productId;
    public bool country;
    public bool currency;
    public bool price;
    public bool appStoreCode;
    public bool language;
    public bool pgCode;
    public bool redirectUrl;
  }

  public CoinPurchaseReservation()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              ProductId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Country = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Currency = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Price = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I32)
            {
              AppStoreCode = (PaymentType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.String)
            {
              Language = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.I32)
            {
              PgCode = (PaymentPgType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.String)
            {
              RedirectUrl = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("CoinPurchaseReservation");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (ProductId != null && __isset.productId)
      {
        field.Name = "productId";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ProductId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Country != null && __isset.country)
      {
        field.Name = "country";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Country, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Currency != null && __isset.currency)
      {
        field.Name = "currency";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Currency, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Price != null && __isset.price)
      {
        field.Name = "price";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Price, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.appStoreCode)
      {
        field.Name = "appStoreCode";
        field.Type = TType.I32;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)AppStoreCode, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Language != null && __isset.language)
      {
        field.Name = "language";
        field.Type = TType.String;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Language, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.pgCode)
      {
        field.Name = "pgCode";
        field.Type = TType.I32;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)PgCode, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (RedirectUrl != null && __isset.redirectUrl)
      {
        field.Name = "redirectUrl";
        field.Type = TType.String;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(RedirectUrl, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as CoinPurchaseReservation;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.productId == other.__isset.productId) && ((!__isset.productId) || (System.Object.Equals(ProductId, other.ProductId))))
      && ((__isset.country == other.__isset.country) && ((!__isset.country) || (System.Object.Equals(Country, other.Country))))
      && ((__isset.currency == other.__isset.currency) && ((!__isset.currency) || (System.Object.Equals(Currency, other.Currency))))
      && ((__isset.price == other.__isset.price) && ((!__isset.price) || (System.Object.Equals(Price, other.Price))))
      && ((__isset.appStoreCode == other.__isset.appStoreCode) && ((!__isset.appStoreCode) || (System.Object.Equals(AppStoreCode, other.AppStoreCode))))
      && ((__isset.language == other.__isset.language) && ((!__isset.language) || (System.Object.Equals(Language, other.Language))))
      && ((__isset.pgCode == other.__isset.pgCode) && ((!__isset.pgCode) || (System.Object.Equals(PgCode, other.PgCode))))
      && ((__isset.redirectUrl == other.__isset.redirectUrl) && ((!__isset.redirectUrl) || (System.Object.Equals(RedirectUrl, other.RedirectUrl))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.productId)
        hashcode = (hashcode * 397) + ProductId.GetHashCode();
      if(__isset.country)
        hashcode = (hashcode * 397) + Country.GetHashCode();
      if(__isset.currency)
        hashcode = (hashcode * 397) + Currency.GetHashCode();
      if(__isset.price)
        hashcode = (hashcode * 397) + Price.GetHashCode();
      if(__isset.appStoreCode)
        hashcode = (hashcode * 397) + AppStoreCode.GetHashCode();
      if(__isset.language)
        hashcode = (hashcode * 397) + Language.GetHashCode();
      if(__isset.pgCode)
        hashcode = (hashcode * 397) + PgCode.GetHashCode();
      if(__isset.redirectUrl)
        hashcode = (hashcode * 397) + RedirectUrl.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("CoinPurchaseReservation(");
    bool __first = true;
    if (ProductId != null && __isset.productId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ProductId: ");
      ProductId.ToString(sb);
    }
    if (Country != null && __isset.country)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Country: ");
      Country.ToString(sb);
    }
    if (Currency != null && __isset.currency)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Currency: ");
      Currency.ToString(sb);
    }
    if (Price != null && __isset.price)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Price: ");
      Price.ToString(sb);
    }
    if (__isset.appStoreCode)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("AppStoreCode: ");
      AppStoreCode.ToString(sb);
    }
    if (Language != null && __isset.language)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Language: ");
      Language.ToString(sb);
    }
    if (__isset.pgCode)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PgCode: ");
      PgCode.ToString(sb);
    }
    if (RedirectUrl != null && __isset.redirectUrl)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("RedirectUrl: ");
      RedirectUrl.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

