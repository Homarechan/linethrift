/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class UserAuthStatus : TBase
{
  private bool _phoneNumberRegistered;
  private List<SnsIdType> _registeredSnsIdTypes;

  public bool PhoneNumberRegistered
  {
    get
    {
      return _phoneNumberRegistered;
    }
    set
    {
      __isset.phoneNumberRegistered = true;
      this._phoneNumberRegistered = value;
    }
  }

  public List<SnsIdType> RegisteredSnsIdTypes
  {
    get
    {
      return _registeredSnsIdTypes;
    }
    set
    {
      __isset.registeredSnsIdTypes = true;
      this._registeredSnsIdTypes = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool phoneNumberRegistered;
    public bool registeredSnsIdTypes;
  }

  public UserAuthStatus()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool)
            {
              PhoneNumberRegistered = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list537 = await iprot.ReadListBeginAsync(cancellationToken);
                RegisteredSnsIdTypes = new List<SnsIdType>(_list537.Count);
                for(int _i538 = 0; _i538 < _list537.Count; ++_i538)
                {
                  SnsIdType _elem539;
                  _elem539 = (SnsIdType)await iprot.ReadI32Async(cancellationToken);
                  RegisteredSnsIdTypes.Add(_elem539);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("UserAuthStatus");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.phoneNumberRegistered)
      {
        field.Name = "phoneNumberRegistered";
        field.Type = TType.Bool;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(PhoneNumberRegistered, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (RegisteredSnsIdTypes != null && __isset.registeredSnsIdTypes)
      {
        field.Name = "registeredSnsIdTypes";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I32, RegisteredSnsIdTypes.Count), cancellationToken);
          foreach (SnsIdType _iter540 in RegisteredSnsIdTypes)
          {
            await oprot.WriteI32Async((int)_iter540, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as UserAuthStatus;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.phoneNumberRegistered == other.__isset.phoneNumberRegistered) && ((!__isset.phoneNumberRegistered) || (System.Object.Equals(PhoneNumberRegistered, other.PhoneNumberRegistered))))
      && ((__isset.registeredSnsIdTypes == other.__isset.registeredSnsIdTypes) && ((!__isset.registeredSnsIdTypes) || (TCollections.Equals(RegisteredSnsIdTypes, other.RegisteredSnsIdTypes))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.phoneNumberRegistered)
        hashcode = (hashcode * 397) + PhoneNumberRegistered.GetHashCode();
      if(__isset.registeredSnsIdTypes)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(RegisteredSnsIdTypes);
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("UserAuthStatus(");
    bool __first = true;
    if (__isset.phoneNumberRegistered)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PhoneNumberRegistered: ");
      PhoneNumberRegistered.ToString(sb);
    }
    if (RegisteredSnsIdTypes != null && __isset.registeredSnsIdTypes)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("RegisteredSnsIdTypes: ");
      RegisteredSnsIdTypes.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

