/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class SuggestDictionaryRevisions : TBase
{
  private SuggestItemDictionaryRevision _itemRevision;
  private List<SuggestTagDictionaryRevision> _tagRevisions;

  public SuggestItemDictionaryRevision ItemRevision
  {
    get
    {
      return _itemRevision;
    }
    set
    {
      __isset.itemRevision = true;
      this._itemRevision = value;
    }
  }

  public List<SuggestTagDictionaryRevision> TagRevisions
  {
    get
    {
      return _tagRevisions;
    }
    set
    {
      __isset.tagRevisions = true;
      this._tagRevisions = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool itemRevision;
    public bool tagRevisions;
  }

  public SuggestDictionaryRevisions()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              ItemRevision = new SuggestItemDictionaryRevision();
              await ItemRevision.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list229 = await iprot.ReadListBeginAsync(cancellationToken);
                TagRevisions = new List<SuggestTagDictionaryRevision>(_list229.Count);
                for(int _i230 = 0; _i230 < _list229.Count; ++_i230)
                {
                  SuggestTagDictionaryRevision _elem231;
                  _elem231 = new SuggestTagDictionaryRevision();
                  await _elem231.ReadAsync(iprot, cancellationToken);
                  TagRevisions.Add(_elem231);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("SuggestDictionaryRevisions");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (ItemRevision != null && __isset.itemRevision)
      {
        field.Name = "itemRevision";
        field.Type = TType.Struct;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await ItemRevision.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (TagRevisions != null && __isset.tagRevisions)
      {
        field.Name = "tagRevisions";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, TagRevisions.Count), cancellationToken);
          foreach (SuggestTagDictionaryRevision _iter232 in TagRevisions)
          {
            await _iter232.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as SuggestDictionaryRevisions;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.itemRevision == other.__isset.itemRevision) && ((!__isset.itemRevision) || (System.Object.Equals(ItemRevision, other.ItemRevision))))
      && ((__isset.tagRevisions == other.__isset.tagRevisions) && ((!__isset.tagRevisions) || (TCollections.Equals(TagRevisions, other.TagRevisions))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.itemRevision)
        hashcode = (hashcode * 397) + ItemRevision.GetHashCode();
      if(__isset.tagRevisions)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(TagRevisions);
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("SuggestDictionaryRevisions(");
    bool __first = true;
    if (ItemRevision != null && __isset.itemRevision)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ItemRevision: ");
      sb.Append(ItemRevision== null ? "<null>" : ItemRevision.ToString());
    }
    if (TagRevisions != null && __isset.tagRevisions)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("TagRevisions: ");
      sb.Append(TagRevisions);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

