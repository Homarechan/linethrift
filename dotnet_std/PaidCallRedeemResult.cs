/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class PaidCallRedeemResult : TBase
{
  private string _eventName;
  private int _eventAmount;

  public string EventName
  {
    get
    {
      return _eventName;
    }
    set
    {
      __isset.eventName = true;
      this._eventName = value;
    }
  }

  public int EventAmount
  {
    get
    {
      return _eventAmount;
    }
    set
    {
      __isset.eventAmount = true;
      this._eventAmount = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool eventName;
    public bool eventAmount;
  }

  public PaidCallRedeemResult()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              EventName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              EventAmount = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("PaidCallRedeemResult");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (EventName != null && __isset.eventName)
      {
        field.Name = "eventName";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(EventName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.eventAmount)
      {
        field.Name = "eventAmount";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(EventAmount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as PaidCallRedeemResult;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.eventName == other.__isset.eventName) && ((!__isset.eventName) || (System.Object.Equals(EventName, other.EventName))))
      && ((__isset.eventAmount == other.__isset.eventAmount) && ((!__isset.eventAmount) || (System.Object.Equals(EventAmount, other.EventAmount))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.eventName)
        hashcode = (hashcode * 397) + EventName.GetHashCode();
      if(__isset.eventAmount)
        hashcode = (hashcode * 397) + EventAmount.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("PaidCallRedeemResult(");
    bool __first = true;
    if (EventName != null && __isset.eventName)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("EventName: ");
      EventName.ToString(sb);
    }
    if (__isset.eventAmount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("EventAmount: ");
      EventAmount.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

