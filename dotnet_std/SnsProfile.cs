/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class SnsProfile : TBase
{
  private string _snsUserId;
  private string _snsUserName;
  private string _email;
  private string _thumbnailUrl;

  public string SnsUserId
  {
    get
    {
      return _snsUserId;
    }
    set
    {
      __isset.snsUserId = true;
      this._snsUserId = value;
    }
  }

  public string SnsUserName
  {
    get
    {
      return _snsUserName;
    }
    set
    {
      __isset.snsUserName = true;
      this._snsUserName = value;
    }
  }

  public string Email
  {
    get
    {
      return _email;
    }
    set
    {
      __isset.email = true;
      this._email = value;
    }
  }

  public string ThumbnailUrl
  {
    get
    {
      return _thumbnailUrl;
    }
    set
    {
      __isset.thumbnailUrl = true;
      this._thumbnailUrl = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool snsUserId;
    public bool snsUserName;
    public bool email;
    public bool thumbnailUrl;
  }

  public SnsProfile()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              SnsUserId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              SnsUserName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Email = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              ThumbnailUrl = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("SnsProfile");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (SnsUserId != null && __isset.snsUserId)
      {
        field.Name = "snsUserId";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(SnsUserId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SnsUserName != null && __isset.snsUserName)
      {
        field.Name = "snsUserName";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(SnsUserName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Email != null && __isset.email)
      {
        field.Name = "email";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Email, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ThumbnailUrl != null && __isset.thumbnailUrl)
      {
        field.Name = "thumbnailUrl";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ThumbnailUrl, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as SnsProfile;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.snsUserId == other.__isset.snsUserId) && ((!__isset.snsUserId) || (System.Object.Equals(SnsUserId, other.SnsUserId))))
      && ((__isset.snsUserName == other.__isset.snsUserName) && ((!__isset.snsUserName) || (System.Object.Equals(SnsUserName, other.SnsUserName))))
      && ((__isset.email == other.__isset.email) && ((!__isset.email) || (System.Object.Equals(Email, other.Email))))
      && ((__isset.thumbnailUrl == other.__isset.thumbnailUrl) && ((!__isset.thumbnailUrl) || (System.Object.Equals(ThumbnailUrl, other.ThumbnailUrl))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.snsUserId)
        hashcode = (hashcode * 397) + SnsUserId.GetHashCode();
      if(__isset.snsUserName)
        hashcode = (hashcode * 397) + SnsUserName.GetHashCode();
      if(__isset.email)
        hashcode = (hashcode * 397) + Email.GetHashCode();
      if(__isset.thumbnailUrl)
        hashcode = (hashcode * 397) + ThumbnailUrl.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("SnsProfile(");
    bool __first = true;
    if (SnsUserId != null && __isset.snsUserId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SnsUserId: ");
      sb.Append(SnsUserId);
    }
    if (SnsUserName != null && __isset.snsUserName)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SnsUserName: ");
      sb.Append(SnsUserName);
    }
    if (Email != null && __isset.email)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Email: ");
      sb.Append(Email);
    }
    if (ThumbnailUrl != null && __isset.thumbnailUrl)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ThumbnailUrl: ");
      sb.Append(ThumbnailUrl);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

