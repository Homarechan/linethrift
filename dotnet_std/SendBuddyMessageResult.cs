/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class SendBuddyMessageResult : TBase
{
  private string _requestId;
  private BuddyResultState _state;
  private string _messageId;
  private int _eventNo;
  private long _receiverCount;
  private long _successCount;
  private long _failCount;
  private long _cancelCount;
  private long _blockCount;
  private long _unregisterCount;
  private long _timestamp;
  private string _message;

  public string RequestId
  {
    get
    {
      return _requestId;
    }
    set
    {
      __isset.requestId = true;
      this._requestId = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="BuddyResultState"/>
  /// </summary>
  public BuddyResultState State
  {
    get
    {
      return _state;
    }
    set
    {
      __isset.state = true;
      this._state = value;
    }
  }

  public string MessageId
  {
    get
    {
      return _messageId;
    }
    set
    {
      __isset.messageId = true;
      this._messageId = value;
    }
  }

  public int EventNo
  {
    get
    {
      return _eventNo;
    }
    set
    {
      __isset.eventNo = true;
      this._eventNo = value;
    }
  }

  public long ReceiverCount
  {
    get
    {
      return _receiverCount;
    }
    set
    {
      __isset.receiverCount = true;
      this._receiverCount = value;
    }
  }

  public long SuccessCount
  {
    get
    {
      return _successCount;
    }
    set
    {
      __isset.successCount = true;
      this._successCount = value;
    }
  }

  public long FailCount
  {
    get
    {
      return _failCount;
    }
    set
    {
      __isset.failCount = true;
      this._failCount = value;
    }
  }

  public long CancelCount
  {
    get
    {
      return _cancelCount;
    }
    set
    {
      __isset.cancelCount = true;
      this._cancelCount = value;
    }
  }

  public long BlockCount
  {
    get
    {
      return _blockCount;
    }
    set
    {
      __isset.blockCount = true;
      this._blockCount = value;
    }
  }

  public long UnregisterCount
  {
    get
    {
      return _unregisterCount;
    }
    set
    {
      __isset.unregisterCount = true;
      this._unregisterCount = value;
    }
  }

  public long Timestamp
  {
    get
    {
      return _timestamp;
    }
    set
    {
      __isset.timestamp = true;
      this._timestamp = value;
    }
  }

  public string Message
  {
    get
    {
      return _message;
    }
    set
    {
      __isset.message = true;
      this._message = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool requestId;
    public bool state;
    public bool messageId;
    public bool eventNo;
    public bool receiverCount;
    public bool successCount;
    public bool failCount;
    public bool cancelCount;
    public bool blockCount;
    public bool unregisterCount;
    public bool timestamp;
    public bool message;
  }

  public SendBuddyMessageResult()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              RequestId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              State = (BuddyResultState)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              MessageId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I32)
            {
              EventNo = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.I64)
            {
              ReceiverCount = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.I64)
            {
              SuccessCount = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 13:
            if (field.Type == TType.I64)
            {
              FailCount = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 14:
            if (field.Type == TType.I64)
            {
              CancelCount = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 15:
            if (field.Type == TType.I64)
            {
              BlockCount = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 16:
            if (field.Type == TType.I64)
            {
              UnregisterCount = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 21:
            if (field.Type == TType.I64)
            {
              Timestamp = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 22:
            if (field.Type == TType.String)
            {
              Message = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("SendBuddyMessageResult");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (RequestId != null && __isset.requestId)
      {
        field.Name = "requestId";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(RequestId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.state)
      {
        field.Name = "state";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)State, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (MessageId != null && __isset.messageId)
      {
        field.Name = "messageId";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(MessageId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.eventNo)
      {
        field.Name = "eventNo";
        field.Type = TType.I32;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(EventNo, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.receiverCount)
      {
        field.Name = "receiverCount";
        field.Type = TType.I64;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(ReceiverCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.successCount)
      {
        field.Name = "successCount";
        field.Type = TType.I64;
        field.ID = 12;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(SuccessCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.failCount)
      {
        field.Name = "failCount";
        field.Type = TType.I64;
        field.ID = 13;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(FailCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.cancelCount)
      {
        field.Name = "cancelCount";
        field.Type = TType.I64;
        field.ID = 14;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(CancelCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.blockCount)
      {
        field.Name = "blockCount";
        field.Type = TType.I64;
        field.ID = 15;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(BlockCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.unregisterCount)
      {
        field.Name = "unregisterCount";
        field.Type = TType.I64;
        field.ID = 16;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(UnregisterCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.timestamp)
      {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 21;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Timestamp, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Message != null && __isset.message)
      {
        field.Name = "message";
        field.Type = TType.String;
        field.ID = 22;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Message, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as SendBuddyMessageResult;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
      && ((__isset.state == other.__isset.state) && ((!__isset.state) || (System.Object.Equals(State, other.State))))
      && ((__isset.messageId == other.__isset.messageId) && ((!__isset.messageId) || (System.Object.Equals(MessageId, other.MessageId))))
      && ((__isset.eventNo == other.__isset.eventNo) && ((!__isset.eventNo) || (System.Object.Equals(EventNo, other.EventNo))))
      && ((__isset.receiverCount == other.__isset.receiverCount) && ((!__isset.receiverCount) || (System.Object.Equals(ReceiverCount, other.ReceiverCount))))
      && ((__isset.successCount == other.__isset.successCount) && ((!__isset.successCount) || (System.Object.Equals(SuccessCount, other.SuccessCount))))
      && ((__isset.failCount == other.__isset.failCount) && ((!__isset.failCount) || (System.Object.Equals(FailCount, other.FailCount))))
      && ((__isset.cancelCount == other.__isset.cancelCount) && ((!__isset.cancelCount) || (System.Object.Equals(CancelCount, other.CancelCount))))
      && ((__isset.blockCount == other.__isset.blockCount) && ((!__isset.blockCount) || (System.Object.Equals(BlockCount, other.BlockCount))))
      && ((__isset.unregisterCount == other.__isset.unregisterCount) && ((!__isset.unregisterCount) || (System.Object.Equals(UnregisterCount, other.UnregisterCount))))
      && ((__isset.timestamp == other.__isset.timestamp) && ((!__isset.timestamp) || (System.Object.Equals(Timestamp, other.Timestamp))))
      && ((__isset.message == other.__isset.message) && ((!__isset.message) || (System.Object.Equals(Message, other.Message))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.requestId)
        hashcode = (hashcode * 397) + RequestId.GetHashCode();
      if(__isset.state)
        hashcode = (hashcode * 397) + State.GetHashCode();
      if(__isset.messageId)
        hashcode = (hashcode * 397) + MessageId.GetHashCode();
      if(__isset.eventNo)
        hashcode = (hashcode * 397) + EventNo.GetHashCode();
      if(__isset.receiverCount)
        hashcode = (hashcode * 397) + ReceiverCount.GetHashCode();
      if(__isset.successCount)
        hashcode = (hashcode * 397) + SuccessCount.GetHashCode();
      if(__isset.failCount)
        hashcode = (hashcode * 397) + FailCount.GetHashCode();
      if(__isset.cancelCount)
        hashcode = (hashcode * 397) + CancelCount.GetHashCode();
      if(__isset.blockCount)
        hashcode = (hashcode * 397) + BlockCount.GetHashCode();
      if(__isset.unregisterCount)
        hashcode = (hashcode * 397) + UnregisterCount.GetHashCode();
      if(__isset.timestamp)
        hashcode = (hashcode * 397) + Timestamp.GetHashCode();
      if(__isset.message)
        hashcode = (hashcode * 397) + Message.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("SendBuddyMessageResult(");
    bool __first = true;
    if (RequestId != null && __isset.requestId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("RequestId: ");
      sb.Append(RequestId);
    }
    if (__isset.state)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("State: ");
      sb.Append(State);
    }
    if (MessageId != null && __isset.messageId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MessageId: ");
      sb.Append(MessageId);
    }
    if (__isset.eventNo)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("EventNo: ");
      sb.Append(EventNo);
    }
    if (__isset.receiverCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ReceiverCount: ");
      sb.Append(ReceiverCount);
    }
    if (__isset.successCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SuccessCount: ");
      sb.Append(SuccessCount);
    }
    if (__isset.failCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("FailCount: ");
      sb.Append(FailCount);
    }
    if (__isset.cancelCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CancelCount: ");
      sb.Append(CancelCount);
    }
    if (__isset.blockCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("BlockCount: ");
      sb.Append(BlockCount);
    }
    if (__isset.unregisterCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("UnregisterCount: ");
      sb.Append(UnregisterCount);
    }
    if (__isset.timestamp)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Timestamp: ");
      sb.Append(Timestamp);
    }
    if (Message != null && __isset.message)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Message: ");
      sb.Append(Message);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

