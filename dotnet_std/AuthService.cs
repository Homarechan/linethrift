/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


public partial class AuthService
{
  public interface IAsync
  {
    Task<string> normalizePhoneNumberAsync(string countryCode, string phoneNumber, string countryCodeHint, CancellationToken cancellationToken = default(CancellationToken));

    Task respondE2EELoginRequestAsync(string verifier, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain, ErrorCode errorCode, CancellationToken cancellationToken = default(CancellationToken));

    Task<string> confirmE2EELoginAsync(string verifier, byte[] deviceSecret, CancellationToken cancellationToken = default(CancellationToken));

    Task logoutZAsync(CancellationToken cancellationToken = default(CancellationToken));

    Task<LoginResult> loginZAsync(LoginRequest loginRequest, CancellationToken cancellationToken = default(CancellationToken));

    Task<SecurityCenterResult> issueTokenForAccountMigrationSettingsAsync(bool enforce, CancellationToken cancellationToken = default(CancellationToken));

    Task<SecurityCenterResult> issueTokenForAccountMigrationAsync(string migrationSessionId, CancellationToken cancellationToken = default(CancellationToken));

    Task<string> verifyQrcodeWithE2EEAsync(string verifier, string pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain, CancellationToken cancellationToken = default(CancellationToken));

  }


  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)    {
    }
    public async Task<string> normalizePhoneNumberAsync(string countryCode, string phoneNumber, string countryCodeHint, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("normalizePhoneNumber", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new normalizePhoneNumberArgs();
      args.CountryCode = countryCode;
      args.PhoneNumber = phoneNumber;
      args.CountryCodeHint = countryCodeHint;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new normalizePhoneNumberResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "normalizePhoneNumber failed: unknown result");
    }

    public async Task respondE2EELoginRequestAsync(string verifier, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain, ErrorCode errorCode, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("respondE2EELoginRequest", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new respondE2EELoginRequestArgs();
      args.Verifier = verifier;
      args.PublicKey = publicKey;
      args.EncryptedKeyChain = encryptedKeyChain;
      args.HashKeyChain = hashKeyChain;
      args.ErrorCode = errorCode;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new respondE2EELoginRequestResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.e)
      {
        throw result.E;
      }
      return;
    }

    public async Task<string> confirmE2EELoginAsync(string verifier, byte[] deviceSecret, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("confirmE2EELogin", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new confirmE2EELoginArgs();
      args.Verifier = verifier;
      args.DeviceSecret = deviceSecret;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new confirmE2EELoginResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "confirmE2EELogin failed: unknown result");
    }

    public async Task logoutZAsync(CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("logoutZ", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new logoutZArgs();
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new logoutZResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.e)
      {
        throw result.E;
      }
      return;
    }

    public async Task<LoginResult> loginZAsync(LoginRequest loginRequest, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("loginZ", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new loginZArgs();
      args.LoginRequest = loginRequest;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new loginZResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loginZ failed: unknown result");
    }

    public async Task<SecurityCenterResult> issueTokenForAccountMigrationSettingsAsync(bool enforce, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("issueTokenForAccountMigrationSettings", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new issueTokenForAccountMigrationSettingsArgs();
      args.Enforce = enforce;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new issueTokenForAccountMigrationSettingsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "issueTokenForAccountMigrationSettings failed: unknown result");
    }

    public async Task<SecurityCenterResult> issueTokenForAccountMigrationAsync(string migrationSessionId, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("issueTokenForAccountMigration", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new issueTokenForAccountMigrationArgs();
      args.MigrationSessionId = migrationSessionId;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new issueTokenForAccountMigrationResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "issueTokenForAccountMigration failed: unknown result");
    }

    public async Task<string> verifyQrcodeWithE2EEAsync(string verifier, string pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("verifyQrcodeWithE2EE", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new verifyQrcodeWithE2EEArgs();
      args.Verifier = verifier;
      args.PinCode = pinCode;
      args.ErrorCode = errorCode;
      args.PublicKey = publicKey;
      args.EncryptedKeyChain = encryptedKeyChain;
      args.HashKeyChain = hashKeyChain;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new verifyQrcodeWithE2EEResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "verifyQrcodeWithE2EE failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private IAsync _iAsync;

    public AsyncProcessor(IAsync iAsync)
    {
      if (iAsync == null) throw new ArgumentNullException(nameof(iAsync));

      _iAsync = iAsync;
      processMap_["normalizePhoneNumber"] = normalizePhoneNumber_ProcessAsync;
      processMap_["respondE2EELoginRequest"] = respondE2EELoginRequest_ProcessAsync;
      processMap_["confirmE2EELogin"] = confirmE2EELogin_ProcessAsync;
      processMap_["logoutZ"] = logoutZ_ProcessAsync;
      processMap_["loginZ"] = loginZ_ProcessAsync;
      processMap_["issueTokenForAccountMigrationSettings"] = issueTokenForAccountMigrationSettings_ProcessAsync;
      processMap_["issueTokenForAccountMigration"] = issueTokenForAccountMigration_ProcessAsync;
      processMap_["verifyQrcodeWithE2EE"] = verifyQrcodeWithE2EE_ProcessAsync;
    }

    protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async Task normalizePhoneNumber_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new normalizePhoneNumberArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new normalizePhoneNumberResult();
      try
      {
        try
        {
          result.Success = await _iAsync.normalizePhoneNumberAsync(args.CountryCode, args.PhoneNumber, args.CountryCodeHint, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("normalizePhoneNumber", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("normalizePhoneNumber", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task respondE2EELoginRequest_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new respondE2EELoginRequestArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new respondE2EELoginRequestResult();
      try
      {
        try
        {
          await _iAsync.respondE2EELoginRequestAsync(args.Verifier, args.PublicKey, args.EncryptedKeyChain, args.HashKeyChain, args.ErrorCode, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("respondE2EELoginRequest", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("respondE2EELoginRequest", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task confirmE2EELogin_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new confirmE2EELoginArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new confirmE2EELoginResult();
      try
      {
        try
        {
          result.Success = await _iAsync.confirmE2EELoginAsync(args.Verifier, args.DeviceSecret, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("confirmE2EELogin", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("confirmE2EELogin", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task logoutZ_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new logoutZArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new logoutZResult();
      try
      {
        try
        {
          await _iAsync.logoutZAsync(cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("logoutZ", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("logoutZ", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task loginZ_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new loginZArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new loginZResult();
      try
      {
        try
        {
          result.Success = await _iAsync.loginZAsync(args.LoginRequest, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("loginZ", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("loginZ", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task issueTokenForAccountMigrationSettings_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new issueTokenForAccountMigrationSettingsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new issueTokenForAccountMigrationSettingsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.issueTokenForAccountMigrationSettingsAsync(args.Enforce, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("issueTokenForAccountMigrationSettings", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("issueTokenForAccountMigrationSettings", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task issueTokenForAccountMigration_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new issueTokenForAccountMigrationArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new issueTokenForAccountMigrationResult();
      try
      {
        try
        {
          result.Success = await _iAsync.issueTokenForAccountMigrationAsync(args.MigrationSessionId, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("issueTokenForAccountMigration", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("issueTokenForAccountMigration", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task verifyQrcodeWithE2EE_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new verifyQrcodeWithE2EEArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new verifyQrcodeWithE2EEResult();
      try
      {
        try
        {
          result.Success = await _iAsync.verifyQrcodeWithE2EEAsync(args.Verifier, args.PinCode, args.ErrorCode, args.PublicKey, args.EncryptedKeyChain, args.HashKeyChain, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("verifyQrcodeWithE2EE", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("verifyQrcodeWithE2EE", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }


  public partial class normalizePhoneNumberArgs : TBase
  {
    private string _countryCode;
    private string _phoneNumber;
    private string _countryCodeHint;

    public string CountryCode
    {
      get
      {
        return _countryCode;
      }
      set
      {
        __isset.countryCode = true;
        this._countryCode = value;
      }
    }

    public string PhoneNumber
    {
      get
      {
        return _phoneNumber;
      }
      set
      {
        __isset.phoneNumber = true;
        this._phoneNumber = value;
      }
    }

    public string CountryCodeHint
    {
      get
      {
        return _countryCodeHint;
      }
      set
      {
        __isset.countryCodeHint = true;
        this._countryCodeHint = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool countryCode;
      public bool phoneNumber;
      public bool countryCodeHint;
    }

    public normalizePhoneNumberArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String)
              {
                CountryCode = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                PhoneNumber = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                CountryCodeHint = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("normalizePhoneNumber_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (CountryCode != null && __isset.countryCode)
        {
          field.Name = "countryCode";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(CountryCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (PhoneNumber != null && __isset.phoneNumber)
        {
          field.Name = "phoneNumber";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(PhoneNumber, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (CountryCodeHint != null && __isset.countryCodeHint)
        {
          field.Name = "countryCodeHint";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(CountryCodeHint, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as normalizePhoneNumberArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.countryCode == other.__isset.countryCode) && ((!__isset.countryCode) || (System.Object.Equals(CountryCode, other.CountryCode))))
        && ((__isset.phoneNumber == other.__isset.phoneNumber) && ((!__isset.phoneNumber) || (System.Object.Equals(PhoneNumber, other.PhoneNumber))))
        && ((__isset.countryCodeHint == other.__isset.countryCodeHint) && ((!__isset.countryCodeHint) || (System.Object.Equals(CountryCodeHint, other.CountryCodeHint))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.countryCode)
          hashcode = (hashcode * 397) + CountryCode.GetHashCode();
        if(__isset.phoneNumber)
          hashcode = (hashcode * 397) + PhoneNumber.GetHashCode();
        if(__isset.countryCodeHint)
          hashcode = (hashcode * 397) + CountryCodeHint.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("normalizePhoneNumber_args(");
      bool __first = true;
      if (CountryCode != null && __isset.countryCode)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CountryCode: ");
        CountryCode.ToString(sb);
      }
      if (PhoneNumber != null && __isset.phoneNumber)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("PhoneNumber: ");
        PhoneNumber.ToString(sb);
      }
      if (CountryCodeHint != null && __isset.countryCodeHint)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CountryCodeHint: ");
        CountryCodeHint.ToString(sb);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class normalizePhoneNumberResult : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public normalizePhoneNumberResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("normalizePhoneNumber_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as normalizePhoneNumberResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("normalizePhoneNumber_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        Success.ToString(sb);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        E.ToString(sb);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class respondE2EELoginRequestArgs : TBase
  {
    private string _verifier;
    private E2EEPublicKey _publicKey;
    private byte[] _encryptedKeyChain;
    private byte[] _hashKeyChain;
    private ErrorCode _errorCode;

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }

    public E2EEPublicKey PublicKey
    {
      get
      {
        return _publicKey;
      }
      set
      {
        __isset.publicKey = true;
        this._publicKey = value;
      }
    }

    public byte[] EncryptedKeyChain
    {
      get
      {
        return _encryptedKeyChain;
      }
      set
      {
        __isset.encryptedKeyChain = true;
        this._encryptedKeyChain = value;
      }
    }

    public byte[] HashKeyChain
    {
      get
      {
        return _hashKeyChain;
      }
      set
      {
        __isset.hashKeyChain = true;
        this._hashKeyChain = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ErrorCode"/>
    /// </summary>
    public ErrorCode ErrorCode
    {
      get
      {
        return _errorCode;
      }
      set
      {
        __isset.errorCode = true;
        this._errorCode = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool verifier;
      public bool publicKey;
      public bool encryptedKeyChain;
      public bool hashKeyChain;
      public bool errorCode;
    }

    public respondE2EELoginRequestArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Verifier = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                PublicKey = new E2EEPublicKey();
                await PublicKey.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                EncryptedKeyChain = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                HashKeyChain = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                ErrorCode = (ErrorCode)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("respondE2EELoginRequest_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Verifier != null && __isset.verifier)
        {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Verifier, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (PublicKey != null && __isset.publicKey)
        {
          field.Name = "publicKey";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await PublicKey.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (EncryptedKeyChain != null && __isset.encryptedKeyChain)
        {
          field.Name = "encryptedKeyChain";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(EncryptedKeyChain, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (HashKeyChain != null && __isset.hashKeyChain)
        {
          field.Name = "hashKeyChain";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(HashKeyChain, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.errorCode)
        {
          field.Name = "errorCode";
          field.Type = TType.I32;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)ErrorCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as respondE2EELoginRequestArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.verifier == other.__isset.verifier) && ((!__isset.verifier) || (System.Object.Equals(Verifier, other.Verifier))))
        && ((__isset.publicKey == other.__isset.publicKey) && ((!__isset.publicKey) || (System.Object.Equals(PublicKey, other.PublicKey))))
        && ((__isset.encryptedKeyChain == other.__isset.encryptedKeyChain) && ((!__isset.encryptedKeyChain) || (TCollections.Equals(EncryptedKeyChain, other.EncryptedKeyChain))))
        && ((__isset.hashKeyChain == other.__isset.hashKeyChain) && ((!__isset.hashKeyChain) || (TCollections.Equals(HashKeyChain, other.HashKeyChain))))
        && ((__isset.errorCode == other.__isset.errorCode) && ((!__isset.errorCode) || (System.Object.Equals(ErrorCode, other.ErrorCode))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.verifier)
          hashcode = (hashcode * 397) + Verifier.GetHashCode();
        if(__isset.publicKey)
          hashcode = (hashcode * 397) + PublicKey.GetHashCode();
        if(__isset.encryptedKeyChain)
          hashcode = (hashcode * 397) + EncryptedKeyChain.GetHashCode();
        if(__isset.hashKeyChain)
          hashcode = (hashcode * 397) + HashKeyChain.GetHashCode();
        if(__isset.errorCode)
          hashcode = (hashcode * 397) + ErrorCode.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("respondE2EELoginRequest_args(");
      bool __first = true;
      if (Verifier != null && __isset.verifier)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Verifier: ");
        Verifier.ToString(sb);
      }
      if (PublicKey != null && __isset.publicKey)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("PublicKey: ");
        PublicKey.ToString(sb);
      }
      if (EncryptedKeyChain != null && __isset.encryptedKeyChain)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("EncryptedKeyChain: ");
        EncryptedKeyChain.ToString(sb);
      }
      if (HashKeyChain != null && __isset.hashKeyChain)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("HashKeyChain: ");
        HashKeyChain.ToString(sb);
      }
      if (__isset.errorCode)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ErrorCode: ");
        ErrorCode.ToString(sb);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class respondE2EELoginRequestResult : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool e;
    }

    public respondE2EELoginRequestResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("respondE2EELoginRequest_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as respondE2EELoginRequestResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("respondE2EELoginRequest_result(");
      bool __first = true;
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        E.ToString(sb);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class confirmE2EELoginArgs : TBase
  {
    private string _verifier;
    private byte[] _deviceSecret;

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }

    public byte[] DeviceSecret
    {
      get
      {
        return _deviceSecret;
      }
      set
      {
        __isset.deviceSecret = true;
        this._deviceSecret = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool verifier;
      public bool deviceSecret;
    }

    public confirmE2EELoginArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Verifier = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                DeviceSecret = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("confirmE2EELogin_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Verifier != null && __isset.verifier)
        {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Verifier, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DeviceSecret != null && __isset.deviceSecret)
        {
          field.Name = "deviceSecret";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(DeviceSecret, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as confirmE2EELoginArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.verifier == other.__isset.verifier) && ((!__isset.verifier) || (System.Object.Equals(Verifier, other.Verifier))))
        && ((__isset.deviceSecret == other.__isset.deviceSecret) && ((!__isset.deviceSecret) || (TCollections.Equals(DeviceSecret, other.DeviceSecret))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.verifier)
          hashcode = (hashcode * 397) + Verifier.GetHashCode();
        if(__isset.deviceSecret)
          hashcode = (hashcode * 397) + DeviceSecret.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("confirmE2EELogin_args(");
      bool __first = true;
      if (Verifier != null && __isset.verifier)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Verifier: ");
        Verifier.ToString(sb);
      }
      if (DeviceSecret != null && __isset.deviceSecret)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DeviceSecret: ");
        DeviceSecret.ToString(sb);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class confirmE2EELoginResult : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public confirmE2EELoginResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("confirmE2EELogin_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as confirmE2EELoginResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("confirmE2EELogin_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        Success.ToString(sb);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        E.ToString(sb);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class logoutZArgs : TBase
  {

    public logoutZArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("logoutZ_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as logoutZArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return true;
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("logoutZ_args(");
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class logoutZResult : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool e;
    }

    public logoutZResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("logoutZ_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as logoutZResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("logoutZ_result(");
      bool __first = true;
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        E.ToString(sb);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class loginZArgs : TBase
  {
    private LoginRequest _loginRequest;

    public LoginRequest LoginRequest
    {
      get
      {
        return _loginRequest;
      }
      set
      {
        __isset.loginRequest = true;
        this._loginRequest = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool loginRequest;
    }

    public loginZArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct)
              {
                LoginRequest = new LoginRequest();
                await LoginRequest.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("loginZ_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (LoginRequest != null && __isset.loginRequest)
        {
          field.Name = "loginRequest";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await LoginRequest.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as loginZArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.loginRequest == other.__isset.loginRequest) && ((!__isset.loginRequest) || (System.Object.Equals(LoginRequest, other.LoginRequest))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.loginRequest)
          hashcode = (hashcode * 397) + LoginRequest.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("loginZ_args(");
      bool __first = true;
      if (LoginRequest != null && __isset.loginRequest)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("LoginRequest: ");
        LoginRequest.ToString(sb);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class loginZResult : TBase
  {
    private LoginResult _success;
    private TalkException _e;

    public LoginResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public loginZResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new LoginResult();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("loginZ_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as loginZResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("loginZ_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        Success.ToString(sb);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        E.ToString(sb);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class issueTokenForAccountMigrationSettingsArgs : TBase
  {
    private bool _enforce;

    public bool Enforce
    {
      get
      {
        return _enforce;
      }
      set
      {
        __isset.enforce = true;
        this._enforce = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool enforce;
    }

    public issueTokenForAccountMigrationSettingsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Bool)
              {
                Enforce = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("issueTokenForAccountMigrationSettings_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.enforce)
        {
          field.Name = "enforce";
          field.Type = TType.Bool;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Enforce, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as issueTokenForAccountMigrationSettingsArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.enforce == other.__isset.enforce) && ((!__isset.enforce) || (System.Object.Equals(Enforce, other.Enforce))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.enforce)
          hashcode = (hashcode * 397) + Enforce.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("issueTokenForAccountMigrationSettings_args(");
      bool __first = true;
      if (__isset.enforce)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Enforce: ");
        Enforce.ToString(sb);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class issueTokenForAccountMigrationSettingsResult : TBase
  {
    private SecurityCenterResult _success;
    private TalkException _e;

    public SecurityCenterResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public issueTokenForAccountMigrationSettingsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new SecurityCenterResult();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("issueTokenForAccountMigrationSettings_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as issueTokenForAccountMigrationSettingsResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("issueTokenForAccountMigrationSettings_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        Success.ToString(sb);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        E.ToString(sb);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class issueTokenForAccountMigrationArgs : TBase
  {
    private string _migrationSessionId;

    public string MigrationSessionId
    {
      get
      {
        return _migrationSessionId;
      }
      set
      {
        __isset.migrationSessionId = true;
        this._migrationSessionId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool migrationSessionId;
    }

    public issueTokenForAccountMigrationArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String)
              {
                MigrationSessionId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("issueTokenForAccountMigration_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (MigrationSessionId != null && __isset.migrationSessionId)
        {
          field.Name = "migrationSessionId";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(MigrationSessionId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as issueTokenForAccountMigrationArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.migrationSessionId == other.__isset.migrationSessionId) && ((!__isset.migrationSessionId) || (System.Object.Equals(MigrationSessionId, other.MigrationSessionId))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.migrationSessionId)
          hashcode = (hashcode * 397) + MigrationSessionId.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("issueTokenForAccountMigration_args(");
      bool __first = true;
      if (MigrationSessionId != null && __isset.migrationSessionId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("MigrationSessionId: ");
        MigrationSessionId.ToString(sb);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class issueTokenForAccountMigrationResult : TBase
  {
    private SecurityCenterResult _success;
    private TalkException _e;

    public SecurityCenterResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public issueTokenForAccountMigrationResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new SecurityCenterResult();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("issueTokenForAccountMigration_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as issueTokenForAccountMigrationResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("issueTokenForAccountMigration_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        Success.ToString(sb);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        E.ToString(sb);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class verifyQrcodeWithE2EEArgs : TBase
  {
    private string _verifier;
    private string _pinCode;
    private ErrorCode _errorCode;
    private E2EEPublicKey _publicKey;
    private byte[] _encryptedKeyChain;
    private byte[] _hashKeyChain;

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }

    public string PinCode
    {
      get
      {
        return _pinCode;
      }
      set
      {
        __isset.pinCode = true;
        this._pinCode = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ErrorCode"/>
    /// </summary>
    public ErrorCode ErrorCode
    {
      get
      {
        return _errorCode;
      }
      set
      {
        __isset.errorCode = true;
        this._errorCode = value;
      }
    }

    public E2EEPublicKey PublicKey
    {
      get
      {
        return _publicKey;
      }
      set
      {
        __isset.publicKey = true;
        this._publicKey = value;
      }
    }

    public byte[] EncryptedKeyChain
    {
      get
      {
        return _encryptedKeyChain;
      }
      set
      {
        __isset.encryptedKeyChain = true;
        this._encryptedKeyChain = value;
      }
    }

    public byte[] HashKeyChain
    {
      get
      {
        return _hashKeyChain;
      }
      set
      {
        __isset.hashKeyChain = true;
        this._hashKeyChain = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool verifier;
      public bool pinCode;
      public bool errorCode;
      public bool publicKey;
      public bool encryptedKeyChain;
      public bool hashKeyChain;
    }

    public verifyQrcodeWithE2EEArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String)
              {
                Verifier = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                PinCode = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                ErrorCode = (ErrorCode)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                PublicKey = new E2EEPublicKey();
                await PublicKey.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                EncryptedKeyChain = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.String)
              {
                HashKeyChain = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("verifyQrcodeWithE2EE_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Verifier != null && __isset.verifier)
        {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Verifier, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (PinCode != null && __isset.pinCode)
        {
          field.Name = "pinCode";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(PinCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.errorCode)
        {
          field.Name = "errorCode";
          field.Type = TType.I32;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)ErrorCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (PublicKey != null && __isset.publicKey)
        {
          field.Name = "publicKey";
          field.Type = TType.Struct;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await PublicKey.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (EncryptedKeyChain != null && __isset.encryptedKeyChain)
        {
          field.Name = "encryptedKeyChain";
          field.Type = TType.String;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(EncryptedKeyChain, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (HashKeyChain != null && __isset.hashKeyChain)
        {
          field.Name = "hashKeyChain";
          field.Type = TType.String;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(HashKeyChain, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as verifyQrcodeWithE2EEArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.verifier == other.__isset.verifier) && ((!__isset.verifier) || (System.Object.Equals(Verifier, other.Verifier))))
        && ((__isset.pinCode == other.__isset.pinCode) && ((!__isset.pinCode) || (System.Object.Equals(PinCode, other.PinCode))))
        && ((__isset.errorCode == other.__isset.errorCode) && ((!__isset.errorCode) || (System.Object.Equals(ErrorCode, other.ErrorCode))))
        && ((__isset.publicKey == other.__isset.publicKey) && ((!__isset.publicKey) || (System.Object.Equals(PublicKey, other.PublicKey))))
        && ((__isset.encryptedKeyChain == other.__isset.encryptedKeyChain) && ((!__isset.encryptedKeyChain) || (TCollections.Equals(EncryptedKeyChain, other.EncryptedKeyChain))))
        && ((__isset.hashKeyChain == other.__isset.hashKeyChain) && ((!__isset.hashKeyChain) || (TCollections.Equals(HashKeyChain, other.HashKeyChain))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.verifier)
          hashcode = (hashcode * 397) + Verifier.GetHashCode();
        if(__isset.pinCode)
          hashcode = (hashcode * 397) + PinCode.GetHashCode();
        if(__isset.errorCode)
          hashcode = (hashcode * 397) + ErrorCode.GetHashCode();
        if(__isset.publicKey)
          hashcode = (hashcode * 397) + PublicKey.GetHashCode();
        if(__isset.encryptedKeyChain)
          hashcode = (hashcode * 397) + EncryptedKeyChain.GetHashCode();
        if(__isset.hashKeyChain)
          hashcode = (hashcode * 397) + HashKeyChain.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("verifyQrcodeWithE2EE_args(");
      bool __first = true;
      if (Verifier != null && __isset.verifier)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Verifier: ");
        Verifier.ToString(sb);
      }
      if (PinCode != null && __isset.pinCode)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("PinCode: ");
        PinCode.ToString(sb);
      }
      if (__isset.errorCode)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ErrorCode: ");
        ErrorCode.ToString(sb);
      }
      if (PublicKey != null && __isset.publicKey)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("PublicKey: ");
        PublicKey.ToString(sb);
      }
      if (EncryptedKeyChain != null && __isset.encryptedKeyChain)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("EncryptedKeyChain: ");
        EncryptedKeyChain.ToString(sb);
      }
      if (HashKeyChain != null && __isset.hashKeyChain)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("HashKeyChain: ");
        HashKeyChain.ToString(sb);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class verifyQrcodeWithE2EEResult : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public verifyQrcodeWithE2EEResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("verifyQrcodeWithE2EE_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as verifyQrcodeWithE2EEResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("verifyQrcodeWithE2EE_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        Success.ToString(sb);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        E.ToString(sb);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
