/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class GroupCall : TBase
{
  private bool _online;
  private string _chatMid;
  private string _hostMids;
  private List<string> _memberMids;
  private long _started;
  private GroupCallMediaType _mediaType;

  public bool Online
  {
    get
    {
      return _online;
    }
    set
    {
      __isset.online = true;
      this._online = value;
    }
  }

  public string ChatMid
  {
    get
    {
      return _chatMid;
    }
    set
    {
      __isset.chatMid = true;
      this._chatMid = value;
    }
  }

  public string HostMids
  {
    get
    {
      return _hostMids;
    }
    set
    {
      __isset.hostMids = true;
      this._hostMids = value;
    }
  }

  public List<string> MemberMids
  {
    get
    {
      return _memberMids;
    }
    set
    {
      __isset.memberMids = true;
      this._memberMids = value;
    }
  }

  public long Started
  {
    get
    {
      return _started;
    }
    set
    {
      __isset.started = true;
      this._started = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="GroupCallMediaType"/>
  /// </summary>
  public GroupCallMediaType MediaType
  {
    get
    {
      return _mediaType;
    }
    set
    {
      __isset.mediaType = true;
      this._mediaType = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool online;
    public bool chatMid;
    public bool hostMids;
    public bool memberMids;
    public bool started;
    public bool mediaType;
  }

  public GroupCall()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool)
            {
              Online = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              ChatMid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              HostMids = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                TList _list541 = await iprot.ReadListBeginAsync(cancellationToken);
                MemberMids = new List<string>(_list541.Count);
                for(int _i542 = 0; _i542 < _list541.Count; ++_i542)
                {
                  string _elem543;
                  _elem543 = await iprot.ReadStringAsync(cancellationToken);
                  MemberMids.Add(_elem543);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I64)
            {
              Started = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.I32)
            {
              MediaType = (GroupCallMediaType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("GroupCall");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.online)
      {
        field.Name = "online";
        field.Type = TType.Bool;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(Online, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ChatMid != null && __isset.chatMid)
      {
        field.Name = "chatMid";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ChatMid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (HostMids != null && __isset.hostMids)
      {
        field.Name = "hostMids";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(HostMids, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (MemberMids != null && __isset.memberMids)
      {
        field.Name = "memberMids";
        field.Type = TType.List;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, MemberMids.Count), cancellationToken);
          foreach (string _iter544 in MemberMids)
          {
            await oprot.WriteStringAsync(_iter544, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.started)
      {
        field.Name = "started";
        field.Type = TType.I64;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Started, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.mediaType)
      {
        field.Name = "mediaType";
        field.Type = TType.I32;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)MediaType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as GroupCall;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.online == other.__isset.online) && ((!__isset.online) || (System.Object.Equals(Online, other.Online))))
      && ((__isset.chatMid == other.__isset.chatMid) && ((!__isset.chatMid) || (System.Object.Equals(ChatMid, other.ChatMid))))
      && ((__isset.hostMids == other.__isset.hostMids) && ((!__isset.hostMids) || (System.Object.Equals(HostMids, other.HostMids))))
      && ((__isset.memberMids == other.__isset.memberMids) && ((!__isset.memberMids) || (TCollections.Equals(MemberMids, other.MemberMids))))
      && ((__isset.started == other.__isset.started) && ((!__isset.started) || (System.Object.Equals(Started, other.Started))))
      && ((__isset.mediaType == other.__isset.mediaType) && ((!__isset.mediaType) || (System.Object.Equals(MediaType, other.MediaType))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.online)
        hashcode = (hashcode * 397) + Online.GetHashCode();
      if(__isset.chatMid)
        hashcode = (hashcode * 397) + ChatMid.GetHashCode();
      if(__isset.hostMids)
        hashcode = (hashcode * 397) + HostMids.GetHashCode();
      if(__isset.memberMids)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(MemberMids);
      if(__isset.started)
        hashcode = (hashcode * 397) + Started.GetHashCode();
      if(__isset.mediaType)
        hashcode = (hashcode * 397) + MediaType.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("GroupCall(");
    bool __first = true;
    if (__isset.online)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Online: ");
      sb.Append(Online);
    }
    if (ChatMid != null && __isset.chatMid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ChatMid: ");
      sb.Append(ChatMid);
    }
    if (HostMids != null && __isset.hostMids)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("HostMids: ");
      sb.Append(HostMids);
    }
    if (MemberMids != null && __isset.memberMids)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MemberMids: ");
      sb.Append(MemberMids);
    }
    if (__isset.started)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Started: ");
      sb.Append(Started);
    }
    if (__isset.mediaType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MediaType: ");
      sb.Append(MediaType);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

