/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class PaidCallMetadataResult : TBase
{
  private List<PaidCallCurrencyExchangeRate> _currencyExchangeRates;
  private List<string> _recommendedCountryCodes;
  private List<PaidCallAdCountry> _adCountries;

  public List<PaidCallCurrencyExchangeRate> CurrencyExchangeRates
  {
    get
    {
      return _currencyExchangeRates;
    }
    set
    {
      __isset.currencyExchangeRates = true;
      this._currencyExchangeRates = value;
    }
  }

  public List<string> RecommendedCountryCodes
  {
    get
    {
      return _recommendedCountryCodes;
    }
    set
    {
      __isset.recommendedCountryCodes = true;
      this._recommendedCountryCodes = value;
    }
  }

  public List<PaidCallAdCountry> AdCountries
  {
    get
    {
      return _adCountries;
    }
    set
    {
      __isset.adCountries = true;
      this._adCountries = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool currencyExchangeRates;
    public bool recommendedCountryCodes;
    public bool adCountries;
  }

  public PaidCallMetadataResult()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                TList _list20 = await iprot.ReadListBeginAsync(cancellationToken);
                CurrencyExchangeRates = new List<PaidCallCurrencyExchangeRate>(_list20.Count);
                for(int _i21 = 0; _i21 < _list20.Count; ++_i21)
                {
                  PaidCallCurrencyExchangeRate _elem22;
                  _elem22 = new PaidCallCurrencyExchangeRate();
                  await _elem22.ReadAsync(iprot, cancellationToken);
                  CurrencyExchangeRates.Add(_elem22);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list23 = await iprot.ReadListBeginAsync(cancellationToken);
                RecommendedCountryCodes = new List<string>(_list23.Count);
                for(int _i24 = 0; _i24 < _list23.Count; ++_i24)
                {
                  string _elem25;
                  _elem25 = await iprot.ReadStringAsync(cancellationToken);
                  RecommendedCountryCodes.Add(_elem25);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list26 = await iprot.ReadListBeginAsync(cancellationToken);
                AdCountries = new List<PaidCallAdCountry>(_list26.Count);
                for(int _i27 = 0; _i27 < _list26.Count; ++_i27)
                {
                  PaidCallAdCountry _elem28;
                  _elem28 = new PaidCallAdCountry();
                  await _elem28.ReadAsync(iprot, cancellationToken);
                  AdCountries.Add(_elem28);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("PaidCallMetadataResult");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (CurrencyExchangeRates != null && __isset.currencyExchangeRates)
      {
        field.Name = "currencyExchangeRates";
        field.Type = TType.List;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, CurrencyExchangeRates.Count), cancellationToken);
          foreach (PaidCallCurrencyExchangeRate _iter29 in CurrencyExchangeRates)
          {
            await _iter29.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (RecommendedCountryCodes != null && __isset.recommendedCountryCodes)
      {
        field.Name = "recommendedCountryCodes";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, RecommendedCountryCodes.Count), cancellationToken);
          foreach (string _iter30 in RecommendedCountryCodes)
          {
            await oprot.WriteStringAsync(_iter30, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (AdCountries != null && __isset.adCountries)
      {
        field.Name = "adCountries";
        field.Type = TType.List;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, AdCountries.Count), cancellationToken);
          foreach (PaidCallAdCountry _iter31 in AdCountries)
          {
            await _iter31.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as PaidCallMetadataResult;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.currencyExchangeRates == other.__isset.currencyExchangeRates) && ((!__isset.currencyExchangeRates) || (TCollections.Equals(CurrencyExchangeRates, other.CurrencyExchangeRates))))
      && ((__isset.recommendedCountryCodes == other.__isset.recommendedCountryCodes) && ((!__isset.recommendedCountryCodes) || (TCollections.Equals(RecommendedCountryCodes, other.RecommendedCountryCodes))))
      && ((__isset.adCountries == other.__isset.adCountries) && ((!__isset.adCountries) || (TCollections.Equals(AdCountries, other.AdCountries))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.currencyExchangeRates)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(CurrencyExchangeRates);
      if(__isset.recommendedCountryCodes)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(RecommendedCountryCodes);
      if(__isset.adCountries)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(AdCountries);
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("PaidCallMetadataResult(");
    bool __first = true;
    if (CurrencyExchangeRates != null && __isset.currencyExchangeRates)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CurrencyExchangeRates: ");
      sb.Append(CurrencyExchangeRates);
    }
    if (RecommendedCountryCodes != null && __isset.recommendedCountryCodes)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("RecommendedCountryCodes: ");
      sb.Append(RecommendedCountryCodes);
    }
    if (AdCountries != null && __isset.adCountries)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("AdCountries: ");
      sb.Append(AdCountries);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

