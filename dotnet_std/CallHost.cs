/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class CallHost : TBase
{
  private string _host;
  private int _port;
  private string _zone;

  public string Host
  {
    get
    {
      return _host;
    }
    set
    {
      __isset.host = true;
      this._host = value;
    }
  }

  public int Port
  {
    get
    {
      return _port;
    }
    set
    {
      __isset.port = true;
      this._port = value;
    }
  }

  public string Zone
  {
    get
    {
      return _zone;
    }
    set
    {
      __isset.zone = true;
      this._zone = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool host;
    public bool port;
    public bool zone;
  }

  public CallHost()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Host = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              Port = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Zone = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("CallHost");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Host != null && __isset.host)
      {
        field.Name = "host";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Host, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.port)
      {
        field.Name = "port";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Port, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Zone != null && __isset.zone)
      {
        field.Name = "zone";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Zone, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as CallHost;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.host == other.__isset.host) && ((!__isset.host) || (System.Object.Equals(Host, other.Host))))
      && ((__isset.port == other.__isset.port) && ((!__isset.port) || (System.Object.Equals(Port, other.Port))))
      && ((__isset.zone == other.__isset.zone) && ((!__isset.zone) || (System.Object.Equals(Zone, other.Zone))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.host)
        hashcode = (hashcode * 397) + Host.GetHashCode();
      if(__isset.port)
        hashcode = (hashcode * 397) + Port.GetHashCode();
      if(__isset.zone)
        hashcode = (hashcode * 397) + Zone.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("CallHost(");
    bool __first = true;
    if (Host != null && __isset.host)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Host: ");
      Host.ToString(sb);
    }
    if (__isset.port)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Port: ");
      Port.ToString(sb);
    }
    if (Zone != null && __isset.zone)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Zone: ");
      Zone.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

