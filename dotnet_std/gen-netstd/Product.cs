/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class Product : TBase
{
  private string _productId;
  private long _packageId;
  private int _version;
  private string _authorName;
  private bool _onSale;
  private int _validDays;
  private int _saleType;
  private string _copyright;
  private string _title;
  private string _descriptionText;
  private long _shopOrderId;
  private string _fromMid;
  private string _toMid;
  private long _validUntil;
  private int _priceTier;
  private string _price;
  private string _currency;
  private string _currencySymbol;
  private PaymentType _paymentType;
  private long _createDate;
  private bool _ownFlag;
  private ProductEventType _eventType;
  private string _urlSchema;
  private string _downloadUrl;
  private string _buddyMid;
  private long _publishSince;
  private bool _newFlag;
  private bool _missionFlag;
  private List<ProductCategory> _categories;
  private string _missionButtonText;
  private string _missionShortDescription;
  private string _authorId;
  private bool _grantedByDefault;
  private int _displayOrder;
  private bool _availableForPresent;
  private bool _availableForMyself;
  private bool _hasAnimation;
  private bool _hasSound;
  private bool _recommendationsEnabled;
  private StickerResourceType _stickerResourceType;

  public string ProductId
  {
    get
    {
      return _productId;
    }
    set
    {
      __isset.productId = true;
      this._productId = value;
    }
  }

  public long PackageId
  {
    get
    {
      return _packageId;
    }
    set
    {
      __isset.packageId = true;
      this._packageId = value;
    }
  }

  public int Version
  {
    get
    {
      return _version;
    }
    set
    {
      __isset.version = true;
      this._version = value;
    }
  }

  public string AuthorName
  {
    get
    {
      return _authorName;
    }
    set
    {
      __isset.authorName = true;
      this._authorName = value;
    }
  }

  public bool OnSale
  {
    get
    {
      return _onSale;
    }
    set
    {
      __isset.onSale = true;
      this._onSale = value;
    }
  }

  public int ValidDays
  {
    get
    {
      return _validDays;
    }
    set
    {
      __isset.validDays = true;
      this._validDays = value;
    }
  }

  public int SaleType
  {
    get
    {
      return _saleType;
    }
    set
    {
      __isset.saleType = true;
      this._saleType = value;
    }
  }

  public string Copyright
  {
    get
    {
      return _copyright;
    }
    set
    {
      __isset.copyright = true;
      this._copyright = value;
    }
  }

  public string Title
  {
    get
    {
      return _title;
    }
    set
    {
      __isset.title = true;
      this._title = value;
    }
  }

  public string DescriptionText
  {
    get
    {
      return _descriptionText;
    }
    set
    {
      __isset.descriptionText = true;
      this._descriptionText = value;
    }
  }

  public long ShopOrderId
  {
    get
    {
      return _shopOrderId;
    }
    set
    {
      __isset.shopOrderId = true;
      this._shopOrderId = value;
    }
  }

  public string FromMid
  {
    get
    {
      return _fromMid;
    }
    set
    {
      __isset.fromMid = true;
      this._fromMid = value;
    }
  }

  public string ToMid
  {
    get
    {
      return _toMid;
    }
    set
    {
      __isset.toMid = true;
      this._toMid = value;
    }
  }

  public long ValidUntil
  {
    get
    {
      return _validUntil;
    }
    set
    {
      __isset.validUntil = true;
      this._validUntil = value;
    }
  }

  public int PriceTier
  {
    get
    {
      return _priceTier;
    }
    set
    {
      __isset.priceTier = true;
      this._priceTier = value;
    }
  }

  public string Price
  {
    get
    {
      return _price;
    }
    set
    {
      __isset.price = true;
      this._price = value;
    }
  }

  public string Currency
  {
    get
    {
      return _currency;
    }
    set
    {
      __isset.currency = true;
      this._currency = value;
    }
  }

  public string CurrencySymbol
  {
    get
    {
      return _currencySymbol;
    }
    set
    {
      __isset.currencySymbol = true;
      this._currencySymbol = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="PaymentType"/>
  /// </summary>
  public PaymentType PaymentType
  {
    get
    {
      return _paymentType;
    }
    set
    {
      __isset.paymentType = true;
      this._paymentType = value;
    }
  }

  public long CreateDate
  {
    get
    {
      return _createDate;
    }
    set
    {
      __isset.createDate = true;
      this._createDate = value;
    }
  }

  public bool OwnFlag
  {
    get
    {
      return _ownFlag;
    }
    set
    {
      __isset.ownFlag = true;
      this._ownFlag = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="ProductEventType"/>
  /// </summary>
  public ProductEventType EventType
  {
    get
    {
      return _eventType;
    }
    set
    {
      __isset.eventType = true;
      this._eventType = value;
    }
  }

  public string UrlSchema
  {
    get
    {
      return _urlSchema;
    }
    set
    {
      __isset.urlSchema = true;
      this._urlSchema = value;
    }
  }

  public string DownloadUrl
  {
    get
    {
      return _downloadUrl;
    }
    set
    {
      __isset.downloadUrl = true;
      this._downloadUrl = value;
    }
  }

  public string BuddyMid
  {
    get
    {
      return _buddyMid;
    }
    set
    {
      __isset.buddyMid = true;
      this._buddyMid = value;
    }
  }

  public long PublishSince
  {
    get
    {
      return _publishSince;
    }
    set
    {
      __isset.publishSince = true;
      this._publishSince = value;
    }
  }

  public bool NewFlag
  {
    get
    {
      return _newFlag;
    }
    set
    {
      __isset.newFlag = true;
      this._newFlag = value;
    }
  }

  public bool MissionFlag
  {
    get
    {
      return _missionFlag;
    }
    set
    {
      __isset.missionFlag = true;
      this._missionFlag = value;
    }
  }

  public List<ProductCategory> Categories
  {
    get
    {
      return _categories;
    }
    set
    {
      __isset.categories = true;
      this._categories = value;
    }
  }

  public string MissionButtonText
  {
    get
    {
      return _missionButtonText;
    }
    set
    {
      __isset.missionButtonText = true;
      this._missionButtonText = value;
    }
  }

  public string MissionShortDescription
  {
    get
    {
      return _missionShortDescription;
    }
    set
    {
      __isset.missionShortDescription = true;
      this._missionShortDescription = value;
    }
  }

  public string AuthorId
  {
    get
    {
      return _authorId;
    }
    set
    {
      __isset.authorId = true;
      this._authorId = value;
    }
  }

  public bool GrantedByDefault
  {
    get
    {
      return _grantedByDefault;
    }
    set
    {
      __isset.grantedByDefault = true;
      this._grantedByDefault = value;
    }
  }

  public int DisplayOrder
  {
    get
    {
      return _displayOrder;
    }
    set
    {
      __isset.displayOrder = true;
      this._displayOrder = value;
    }
  }

  public bool AvailableForPresent
  {
    get
    {
      return _availableForPresent;
    }
    set
    {
      __isset.availableForPresent = true;
      this._availableForPresent = value;
    }
  }

  public bool AvailableForMyself
  {
    get
    {
      return _availableForMyself;
    }
    set
    {
      __isset.availableForMyself = true;
      this._availableForMyself = value;
    }
  }

  public bool HasAnimation
  {
    get
    {
      return _hasAnimation;
    }
    set
    {
      __isset.hasAnimation = true;
      this._hasAnimation = value;
    }
  }

  public bool HasSound
  {
    get
    {
      return _hasSound;
    }
    set
    {
      __isset.hasSound = true;
      this._hasSound = value;
    }
  }

  public bool RecommendationsEnabled
  {
    get
    {
      return _recommendationsEnabled;
    }
    set
    {
      __isset.recommendationsEnabled = true;
      this._recommendationsEnabled = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="StickerResourceType"/>
  /// </summary>
  public StickerResourceType StickerResourceType
  {
    get
    {
      return _stickerResourceType;
    }
    set
    {
      __isset.stickerResourceType = true;
      this._stickerResourceType = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool productId;
    public bool packageId;
    public bool version;
    public bool authorName;
    public bool onSale;
    public bool validDays;
    public bool saleType;
    public bool copyright;
    public bool title;
    public bool descriptionText;
    public bool shopOrderId;
    public bool fromMid;
    public bool toMid;
    public bool validUntil;
    public bool priceTier;
    public bool price;
    public bool currency;
    public bool currencySymbol;
    public bool paymentType;
    public bool createDate;
    public bool ownFlag;
    public bool eventType;
    public bool urlSchema;
    public bool downloadUrl;
    public bool buddyMid;
    public bool publishSince;
    public bool newFlag;
    public bool missionFlag;
    public bool categories;
    public bool missionButtonText;
    public bool missionShortDescription;
    public bool authorId;
    public bool grantedByDefault;
    public bool displayOrder;
    public bool availableForPresent;
    public bool availableForMyself;
    public bool hasAnimation;
    public bool hasSound;
    public bool recommendationsEnabled;
    public bool stickerResourceType;
  }

  public Product()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              ProductId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              PackageId = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              Version = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              AuthorName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.Bool)
            {
              OnSale = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.I32)
            {
              ValidDays = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.I32)
            {
              SaleType = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.String)
            {
              Copyright = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.String)
            {
              Title = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.String)
            {
              DescriptionText = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.I64)
            {
              ShopOrderId = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.String)
            {
              FromMid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 13:
            if (field.Type == TType.String)
            {
              ToMid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 14:
            if (field.Type == TType.I64)
            {
              ValidUntil = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 15:
            if (field.Type == TType.I32)
            {
              PriceTier = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 16:
            if (field.Type == TType.String)
            {
              Price = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 17:
            if (field.Type == TType.String)
            {
              Currency = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 18:
            if (field.Type == TType.String)
            {
              CurrencySymbol = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 19:
            if (field.Type == TType.I32)
            {
              PaymentType = (PaymentType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 20:
            if (field.Type == TType.I64)
            {
              CreateDate = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 21:
            if (field.Type == TType.Bool)
            {
              OwnFlag = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 22:
            if (field.Type == TType.I32)
            {
              EventType = (ProductEventType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 23:
            if (field.Type == TType.String)
            {
              UrlSchema = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 24:
            if (field.Type == TType.String)
            {
              DownloadUrl = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 25:
            if (field.Type == TType.String)
            {
              BuddyMid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 26:
            if (field.Type == TType.I64)
            {
              PublishSince = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 27:
            if (field.Type == TType.Bool)
            {
              NewFlag = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 28:
            if (field.Type == TType.Bool)
            {
              MissionFlag = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 29:
            if (field.Type == TType.List)
            {
              {
                TList _list193 = await iprot.ReadListBeginAsync(cancellationToken);
                Categories = new List<ProductCategory>(_list193.Count);
                for(int _i194 = 0; _i194 < _list193.Count; ++_i194)
                {
                  ProductCategory _elem195;
                  _elem195 = new ProductCategory();
                  await _elem195.ReadAsync(iprot, cancellationToken);
                  Categories.Add(_elem195);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 30:
            if (field.Type == TType.String)
            {
              MissionButtonText = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 31:
            if (field.Type == TType.String)
            {
              MissionShortDescription = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 32:
            if (field.Type == TType.String)
            {
              AuthorId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 41:
            if (field.Type == TType.Bool)
            {
              GrantedByDefault = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 42:
            if (field.Type == TType.I32)
            {
              DisplayOrder = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 43:
            if (field.Type == TType.Bool)
            {
              AvailableForPresent = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 44:
            if (field.Type == TType.Bool)
            {
              AvailableForMyself = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 51:
            if (field.Type == TType.Bool)
            {
              HasAnimation = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 52:
            if (field.Type == TType.Bool)
            {
              HasSound = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 53:
            if (field.Type == TType.Bool)
            {
              RecommendationsEnabled = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 54:
            if (field.Type == TType.I32)
            {
              StickerResourceType = (StickerResourceType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("Product");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (ProductId != null && __isset.productId)
      {
        field.Name = "productId";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ProductId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.packageId)
      {
        field.Name = "packageId";
        field.Type = TType.I64;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(PackageId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.version)
      {
        field.Name = "version";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Version, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (AuthorName != null && __isset.authorName)
      {
        field.Name = "authorName";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(AuthorName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.onSale)
      {
        field.Name = "onSale";
        field.Type = TType.Bool;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(OnSale, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.validDays)
      {
        field.Name = "validDays";
        field.Type = TType.I32;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(ValidDays, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.saleType)
      {
        field.Name = "saleType";
        field.Type = TType.I32;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(SaleType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Copyright != null && __isset.copyright)
      {
        field.Name = "copyright";
        field.Type = TType.String;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Copyright, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Title != null && __isset.title)
      {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 9;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Title, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (DescriptionText != null && __isset.descriptionText)
      {
        field.Name = "descriptionText";
        field.Type = TType.String;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(DescriptionText, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.shopOrderId)
      {
        field.Name = "shopOrderId";
        field.Type = TType.I64;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(ShopOrderId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (FromMid != null && __isset.fromMid)
      {
        field.Name = "fromMid";
        field.Type = TType.String;
        field.ID = 12;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(FromMid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ToMid != null && __isset.toMid)
      {
        field.Name = "toMid";
        field.Type = TType.String;
        field.ID = 13;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ToMid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.validUntil)
      {
        field.Name = "validUntil";
        field.Type = TType.I64;
        field.ID = 14;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(ValidUntil, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.priceTier)
      {
        field.Name = "priceTier";
        field.Type = TType.I32;
        field.ID = 15;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(PriceTier, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Price != null && __isset.price)
      {
        field.Name = "price";
        field.Type = TType.String;
        field.ID = 16;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Price, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Currency != null && __isset.currency)
      {
        field.Name = "currency";
        field.Type = TType.String;
        field.ID = 17;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Currency, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (CurrencySymbol != null && __isset.currencySymbol)
      {
        field.Name = "currencySymbol";
        field.Type = TType.String;
        field.ID = 18;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(CurrencySymbol, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.paymentType)
      {
        field.Name = "paymentType";
        field.Type = TType.I32;
        field.ID = 19;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)PaymentType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.createDate)
      {
        field.Name = "createDate";
        field.Type = TType.I64;
        field.ID = 20;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(CreateDate, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.ownFlag)
      {
        field.Name = "ownFlag";
        field.Type = TType.Bool;
        field.ID = 21;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(OwnFlag, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.eventType)
      {
        field.Name = "eventType";
        field.Type = TType.I32;
        field.ID = 22;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)EventType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (UrlSchema != null && __isset.urlSchema)
      {
        field.Name = "urlSchema";
        field.Type = TType.String;
        field.ID = 23;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(UrlSchema, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (DownloadUrl != null && __isset.downloadUrl)
      {
        field.Name = "downloadUrl";
        field.Type = TType.String;
        field.ID = 24;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(DownloadUrl, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (BuddyMid != null && __isset.buddyMid)
      {
        field.Name = "buddyMid";
        field.Type = TType.String;
        field.ID = 25;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(BuddyMid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.publishSince)
      {
        field.Name = "publishSince";
        field.Type = TType.I64;
        field.ID = 26;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(PublishSince, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.newFlag)
      {
        field.Name = "newFlag";
        field.Type = TType.Bool;
        field.ID = 27;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(NewFlag, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.missionFlag)
      {
        field.Name = "missionFlag";
        field.Type = TType.Bool;
        field.ID = 28;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(MissionFlag, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Categories != null && __isset.categories)
      {
        field.Name = "categories";
        field.Type = TType.List;
        field.ID = 29;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Categories.Count), cancellationToken);
          foreach (ProductCategory _iter196 in Categories)
          {
            await _iter196.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (MissionButtonText != null && __isset.missionButtonText)
      {
        field.Name = "missionButtonText";
        field.Type = TType.String;
        field.ID = 30;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(MissionButtonText, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (MissionShortDescription != null && __isset.missionShortDescription)
      {
        field.Name = "missionShortDescription";
        field.Type = TType.String;
        field.ID = 31;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(MissionShortDescription, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (AuthorId != null && __isset.authorId)
      {
        field.Name = "authorId";
        field.Type = TType.String;
        field.ID = 32;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(AuthorId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.grantedByDefault)
      {
        field.Name = "grantedByDefault";
        field.Type = TType.Bool;
        field.ID = 41;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(GrantedByDefault, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.displayOrder)
      {
        field.Name = "displayOrder";
        field.Type = TType.I32;
        field.ID = 42;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(DisplayOrder, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.availableForPresent)
      {
        field.Name = "availableForPresent";
        field.Type = TType.Bool;
        field.ID = 43;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(AvailableForPresent, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.availableForMyself)
      {
        field.Name = "availableForMyself";
        field.Type = TType.Bool;
        field.ID = 44;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(AvailableForMyself, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.hasAnimation)
      {
        field.Name = "hasAnimation";
        field.Type = TType.Bool;
        field.ID = 51;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(HasAnimation, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.hasSound)
      {
        field.Name = "hasSound";
        field.Type = TType.Bool;
        field.ID = 52;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(HasSound, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.recommendationsEnabled)
      {
        field.Name = "recommendationsEnabled";
        field.Type = TType.Bool;
        field.ID = 53;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(RecommendationsEnabled, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.stickerResourceType)
      {
        field.Name = "stickerResourceType";
        field.Type = TType.I32;
        field.ID = 54;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)StickerResourceType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as Product;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.productId == other.__isset.productId) && ((!__isset.productId) || (System.Object.Equals(ProductId, other.ProductId))))
      && ((__isset.packageId == other.__isset.packageId) && ((!__isset.packageId) || (System.Object.Equals(PackageId, other.PackageId))))
      && ((__isset.version == other.__isset.version) && ((!__isset.version) || (System.Object.Equals(Version, other.Version))))
      && ((__isset.authorName == other.__isset.authorName) && ((!__isset.authorName) || (System.Object.Equals(AuthorName, other.AuthorName))))
      && ((__isset.onSale == other.__isset.onSale) && ((!__isset.onSale) || (System.Object.Equals(OnSale, other.OnSale))))
      && ((__isset.validDays == other.__isset.validDays) && ((!__isset.validDays) || (System.Object.Equals(ValidDays, other.ValidDays))))
      && ((__isset.saleType == other.__isset.saleType) && ((!__isset.saleType) || (System.Object.Equals(SaleType, other.SaleType))))
      && ((__isset.copyright == other.__isset.copyright) && ((!__isset.copyright) || (System.Object.Equals(Copyright, other.Copyright))))
      && ((__isset.title == other.__isset.title) && ((!__isset.title) || (System.Object.Equals(Title, other.Title))))
      && ((__isset.descriptionText == other.__isset.descriptionText) && ((!__isset.descriptionText) || (System.Object.Equals(DescriptionText, other.DescriptionText))))
      && ((__isset.shopOrderId == other.__isset.shopOrderId) && ((!__isset.shopOrderId) || (System.Object.Equals(ShopOrderId, other.ShopOrderId))))
      && ((__isset.fromMid == other.__isset.fromMid) && ((!__isset.fromMid) || (System.Object.Equals(FromMid, other.FromMid))))
      && ((__isset.toMid == other.__isset.toMid) && ((!__isset.toMid) || (System.Object.Equals(ToMid, other.ToMid))))
      && ((__isset.validUntil == other.__isset.validUntil) && ((!__isset.validUntil) || (System.Object.Equals(ValidUntil, other.ValidUntil))))
      && ((__isset.priceTier == other.__isset.priceTier) && ((!__isset.priceTier) || (System.Object.Equals(PriceTier, other.PriceTier))))
      && ((__isset.price == other.__isset.price) && ((!__isset.price) || (System.Object.Equals(Price, other.Price))))
      && ((__isset.currency == other.__isset.currency) && ((!__isset.currency) || (System.Object.Equals(Currency, other.Currency))))
      && ((__isset.currencySymbol == other.__isset.currencySymbol) && ((!__isset.currencySymbol) || (System.Object.Equals(CurrencySymbol, other.CurrencySymbol))))
      && ((__isset.paymentType == other.__isset.paymentType) && ((!__isset.paymentType) || (System.Object.Equals(PaymentType, other.PaymentType))))
      && ((__isset.createDate == other.__isset.createDate) && ((!__isset.createDate) || (System.Object.Equals(CreateDate, other.CreateDate))))
      && ((__isset.ownFlag == other.__isset.ownFlag) && ((!__isset.ownFlag) || (System.Object.Equals(OwnFlag, other.OwnFlag))))
      && ((__isset.eventType == other.__isset.eventType) && ((!__isset.eventType) || (System.Object.Equals(EventType, other.EventType))))
      && ((__isset.urlSchema == other.__isset.urlSchema) && ((!__isset.urlSchema) || (System.Object.Equals(UrlSchema, other.UrlSchema))))
      && ((__isset.downloadUrl == other.__isset.downloadUrl) && ((!__isset.downloadUrl) || (System.Object.Equals(DownloadUrl, other.DownloadUrl))))
      && ((__isset.buddyMid == other.__isset.buddyMid) && ((!__isset.buddyMid) || (System.Object.Equals(BuddyMid, other.BuddyMid))))
      && ((__isset.publishSince == other.__isset.publishSince) && ((!__isset.publishSince) || (System.Object.Equals(PublishSince, other.PublishSince))))
      && ((__isset.newFlag == other.__isset.newFlag) && ((!__isset.newFlag) || (System.Object.Equals(NewFlag, other.NewFlag))))
      && ((__isset.missionFlag == other.__isset.missionFlag) && ((!__isset.missionFlag) || (System.Object.Equals(MissionFlag, other.MissionFlag))))
      && ((__isset.categories == other.__isset.categories) && ((!__isset.categories) || (TCollections.Equals(Categories, other.Categories))))
      && ((__isset.missionButtonText == other.__isset.missionButtonText) && ((!__isset.missionButtonText) || (System.Object.Equals(MissionButtonText, other.MissionButtonText))))
      && ((__isset.missionShortDescription == other.__isset.missionShortDescription) && ((!__isset.missionShortDescription) || (System.Object.Equals(MissionShortDescription, other.MissionShortDescription))))
      && ((__isset.authorId == other.__isset.authorId) && ((!__isset.authorId) || (System.Object.Equals(AuthorId, other.AuthorId))))
      && ((__isset.grantedByDefault == other.__isset.grantedByDefault) && ((!__isset.grantedByDefault) || (System.Object.Equals(GrantedByDefault, other.GrantedByDefault))))
      && ((__isset.displayOrder == other.__isset.displayOrder) && ((!__isset.displayOrder) || (System.Object.Equals(DisplayOrder, other.DisplayOrder))))
      && ((__isset.availableForPresent == other.__isset.availableForPresent) && ((!__isset.availableForPresent) || (System.Object.Equals(AvailableForPresent, other.AvailableForPresent))))
      && ((__isset.availableForMyself == other.__isset.availableForMyself) && ((!__isset.availableForMyself) || (System.Object.Equals(AvailableForMyself, other.AvailableForMyself))))
      && ((__isset.hasAnimation == other.__isset.hasAnimation) && ((!__isset.hasAnimation) || (System.Object.Equals(HasAnimation, other.HasAnimation))))
      && ((__isset.hasSound == other.__isset.hasSound) && ((!__isset.hasSound) || (System.Object.Equals(HasSound, other.HasSound))))
      && ((__isset.recommendationsEnabled == other.__isset.recommendationsEnabled) && ((!__isset.recommendationsEnabled) || (System.Object.Equals(RecommendationsEnabled, other.RecommendationsEnabled))))
      && ((__isset.stickerResourceType == other.__isset.stickerResourceType) && ((!__isset.stickerResourceType) || (System.Object.Equals(StickerResourceType, other.StickerResourceType))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.productId)
        hashcode = (hashcode * 397) + ProductId.GetHashCode();
      if(__isset.packageId)
        hashcode = (hashcode * 397) + PackageId.GetHashCode();
      if(__isset.version)
        hashcode = (hashcode * 397) + Version.GetHashCode();
      if(__isset.authorName)
        hashcode = (hashcode * 397) + AuthorName.GetHashCode();
      if(__isset.onSale)
        hashcode = (hashcode * 397) + OnSale.GetHashCode();
      if(__isset.validDays)
        hashcode = (hashcode * 397) + ValidDays.GetHashCode();
      if(__isset.saleType)
        hashcode = (hashcode * 397) + SaleType.GetHashCode();
      if(__isset.copyright)
        hashcode = (hashcode * 397) + Copyright.GetHashCode();
      if(__isset.title)
        hashcode = (hashcode * 397) + Title.GetHashCode();
      if(__isset.descriptionText)
        hashcode = (hashcode * 397) + DescriptionText.GetHashCode();
      if(__isset.shopOrderId)
        hashcode = (hashcode * 397) + ShopOrderId.GetHashCode();
      if(__isset.fromMid)
        hashcode = (hashcode * 397) + FromMid.GetHashCode();
      if(__isset.toMid)
        hashcode = (hashcode * 397) + ToMid.GetHashCode();
      if(__isset.validUntil)
        hashcode = (hashcode * 397) + ValidUntil.GetHashCode();
      if(__isset.priceTier)
        hashcode = (hashcode * 397) + PriceTier.GetHashCode();
      if(__isset.price)
        hashcode = (hashcode * 397) + Price.GetHashCode();
      if(__isset.currency)
        hashcode = (hashcode * 397) + Currency.GetHashCode();
      if(__isset.currencySymbol)
        hashcode = (hashcode * 397) + CurrencySymbol.GetHashCode();
      if(__isset.paymentType)
        hashcode = (hashcode * 397) + PaymentType.GetHashCode();
      if(__isset.createDate)
        hashcode = (hashcode * 397) + CreateDate.GetHashCode();
      if(__isset.ownFlag)
        hashcode = (hashcode * 397) + OwnFlag.GetHashCode();
      if(__isset.eventType)
        hashcode = (hashcode * 397) + EventType.GetHashCode();
      if(__isset.urlSchema)
        hashcode = (hashcode * 397) + UrlSchema.GetHashCode();
      if(__isset.downloadUrl)
        hashcode = (hashcode * 397) + DownloadUrl.GetHashCode();
      if(__isset.buddyMid)
        hashcode = (hashcode * 397) + BuddyMid.GetHashCode();
      if(__isset.publishSince)
        hashcode = (hashcode * 397) + PublishSince.GetHashCode();
      if(__isset.newFlag)
        hashcode = (hashcode * 397) + NewFlag.GetHashCode();
      if(__isset.missionFlag)
        hashcode = (hashcode * 397) + MissionFlag.GetHashCode();
      if(__isset.categories)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Categories);
      if(__isset.missionButtonText)
        hashcode = (hashcode * 397) + MissionButtonText.GetHashCode();
      if(__isset.missionShortDescription)
        hashcode = (hashcode * 397) + MissionShortDescription.GetHashCode();
      if(__isset.authorId)
        hashcode = (hashcode * 397) + AuthorId.GetHashCode();
      if(__isset.grantedByDefault)
        hashcode = (hashcode * 397) + GrantedByDefault.GetHashCode();
      if(__isset.displayOrder)
        hashcode = (hashcode * 397) + DisplayOrder.GetHashCode();
      if(__isset.availableForPresent)
        hashcode = (hashcode * 397) + AvailableForPresent.GetHashCode();
      if(__isset.availableForMyself)
        hashcode = (hashcode * 397) + AvailableForMyself.GetHashCode();
      if(__isset.hasAnimation)
        hashcode = (hashcode * 397) + HasAnimation.GetHashCode();
      if(__isset.hasSound)
        hashcode = (hashcode * 397) + HasSound.GetHashCode();
      if(__isset.recommendationsEnabled)
        hashcode = (hashcode * 397) + RecommendationsEnabled.GetHashCode();
      if(__isset.stickerResourceType)
        hashcode = (hashcode * 397) + StickerResourceType.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("Product(");
    bool __first = true;
    if (ProductId != null && __isset.productId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ProductId: ");
      ProductId.ToString(sb);
    }
    if (__isset.packageId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PackageId: ");
      PackageId.ToString(sb);
    }
    if (__isset.version)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Version: ");
      Version.ToString(sb);
    }
    if (AuthorName != null && __isset.authorName)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("AuthorName: ");
      AuthorName.ToString(sb);
    }
    if (__isset.onSale)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("OnSale: ");
      OnSale.ToString(sb);
    }
    if (__isset.validDays)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ValidDays: ");
      ValidDays.ToString(sb);
    }
    if (__isset.saleType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SaleType: ");
      SaleType.ToString(sb);
    }
    if (Copyright != null && __isset.copyright)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Copyright: ");
      Copyright.ToString(sb);
    }
    if (Title != null && __isset.title)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Title: ");
      Title.ToString(sb);
    }
    if (DescriptionText != null && __isset.descriptionText)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DescriptionText: ");
      DescriptionText.ToString(sb);
    }
    if (__isset.shopOrderId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ShopOrderId: ");
      ShopOrderId.ToString(sb);
    }
    if (FromMid != null && __isset.fromMid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("FromMid: ");
      FromMid.ToString(sb);
    }
    if (ToMid != null && __isset.toMid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ToMid: ");
      ToMid.ToString(sb);
    }
    if (__isset.validUntil)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ValidUntil: ");
      ValidUntil.ToString(sb);
    }
    if (__isset.priceTier)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PriceTier: ");
      PriceTier.ToString(sb);
    }
    if (Price != null && __isset.price)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Price: ");
      Price.ToString(sb);
    }
    if (Currency != null && __isset.currency)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Currency: ");
      Currency.ToString(sb);
    }
    if (CurrencySymbol != null && __isset.currencySymbol)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CurrencySymbol: ");
      CurrencySymbol.ToString(sb);
    }
    if (__isset.paymentType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PaymentType: ");
      PaymentType.ToString(sb);
    }
    if (__isset.createDate)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CreateDate: ");
      CreateDate.ToString(sb);
    }
    if (__isset.ownFlag)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("OwnFlag: ");
      OwnFlag.ToString(sb);
    }
    if (__isset.eventType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("EventType: ");
      EventType.ToString(sb);
    }
    if (UrlSchema != null && __isset.urlSchema)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("UrlSchema: ");
      UrlSchema.ToString(sb);
    }
    if (DownloadUrl != null && __isset.downloadUrl)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DownloadUrl: ");
      DownloadUrl.ToString(sb);
    }
    if (BuddyMid != null && __isset.buddyMid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("BuddyMid: ");
      BuddyMid.ToString(sb);
    }
    if (__isset.publishSince)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PublishSince: ");
      PublishSince.ToString(sb);
    }
    if (__isset.newFlag)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("NewFlag: ");
      NewFlag.ToString(sb);
    }
    if (__isset.missionFlag)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MissionFlag: ");
      MissionFlag.ToString(sb);
    }
    if (Categories != null && __isset.categories)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Categories: ");
      Categories.ToString(sb);
    }
    if (MissionButtonText != null && __isset.missionButtonText)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MissionButtonText: ");
      MissionButtonText.ToString(sb);
    }
    if (MissionShortDescription != null && __isset.missionShortDescription)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MissionShortDescription: ");
      MissionShortDescription.ToString(sb);
    }
    if (AuthorId != null && __isset.authorId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("AuthorId: ");
      AuthorId.ToString(sb);
    }
    if (__isset.grantedByDefault)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("GrantedByDefault: ");
      GrantedByDefault.ToString(sb);
    }
    if (__isset.displayOrder)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DisplayOrder: ");
      DisplayOrder.ToString(sb);
    }
    if (__isset.availableForPresent)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("AvailableForPresent: ");
      AvailableForPresent.ToString(sb);
    }
    if (__isset.availableForMyself)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("AvailableForMyself: ");
      AvailableForMyself.ToString(sb);
    }
    if (__isset.hasAnimation)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("HasAnimation: ");
      HasAnimation.ToString(sb);
    }
    if (__isset.hasSound)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("HasSound: ");
      HasSound.ToString(sb);
    }
    if (__isset.recommendationsEnabled)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("RecommendationsEnabled: ");
      RecommendationsEnabled.ToString(sb);
    }
    if (__isset.stickerResourceType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("StickerResourceType: ");
      StickerResourceType.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

