/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class MetaProfile : TBase
{
  private long _createTime;
  private string _regionCode;
  private Dictionary<RegistrationType, string> _identities;

  public long CreateTime
  {
    get
    {
      return _createTime;
    }
    set
    {
      __isset.createTime = true;
      this._createTime = value;
    }
  }

  public string RegionCode
  {
    get
    {
      return _regionCode;
    }
    set
    {
      __isset.regionCode = true;
      this._regionCode = value;
    }
  }

  public Dictionary<RegistrationType, string> Identities
  {
    get
    {
      return _identities;
    }
    set
    {
      __isset.identities = true;
      this._identities = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool createTime;
    public bool regionCode;
    public bool identities;
  }

  public MetaProfile()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              CreateTime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              RegionCode = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Map)
            {
              {
                TMap _map174 = await iprot.ReadMapBeginAsync(cancellationToken);
                Identities = new Dictionary<RegistrationType, string>(_map174.Count);
                for(int _i175 = 0; _i175 < _map174.Count; ++_i175)
                {
                  RegistrationType _key176;
                  string _val177;
                  _key176 = (RegistrationType)await iprot.ReadI32Async(cancellationToken);
                  _val177 = await iprot.ReadStringAsync(cancellationToken);
                  Identities[_key176] = _val177;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("MetaProfile");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.createTime)
      {
        field.Name = "createTime";
        field.Type = TType.I64;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(CreateTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (RegionCode != null && __isset.regionCode)
      {
        field.Name = "regionCode";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(RegionCode, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Identities != null && __isset.identities)
      {
        field.Name = "identities";
        field.Type = TType.Map;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.String, Identities.Count), cancellationToken);
          foreach (RegistrationType _iter178 in Identities.Keys)
          {
            await oprot.WriteI32Async((int)_iter178, cancellationToken);
            await oprot.WriteStringAsync(Identities[_iter178], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as MetaProfile;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.createTime == other.__isset.createTime) && ((!__isset.createTime) || (System.Object.Equals(CreateTime, other.CreateTime))))
      && ((__isset.regionCode == other.__isset.regionCode) && ((!__isset.regionCode) || (System.Object.Equals(RegionCode, other.RegionCode))))
      && ((__isset.identities == other.__isset.identities) && ((!__isset.identities) || (TCollections.Equals(Identities, other.Identities))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.createTime)
        hashcode = (hashcode * 397) + CreateTime.GetHashCode();
      if(__isset.regionCode)
        hashcode = (hashcode * 397) + RegionCode.GetHashCode();
      if(__isset.identities)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Identities);
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("MetaProfile(");
    bool __first = true;
    if (__isset.createTime)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CreateTime: ");
      CreateTime.ToString(sb);
    }
    if (RegionCode != null && __isset.regionCode)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("RegionCode: ");
      RegionCode.ToString(sb);
    }
    if (Identities != null && __isset.identities)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Identities: ");
      Identities.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

