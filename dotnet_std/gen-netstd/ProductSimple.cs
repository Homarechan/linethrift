/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class ProductSimple : TBase
{
  private string _productId;
  private long _packageId;
  private int _version;
  private bool _onSale;
  private long _validUntil;
  private List<StickerIdRange> _stickerIdRanges;
  private bool _grantedByDefault;
  private int _displayOrder;

  public string ProductId
  {
    get
    {
      return _productId;
    }
    set
    {
      __isset.productId = true;
      this._productId = value;
    }
  }

  public long PackageId
  {
    get
    {
      return _packageId;
    }
    set
    {
      __isset.packageId = true;
      this._packageId = value;
    }
  }

  public int Version
  {
    get
    {
      return _version;
    }
    set
    {
      __isset.version = true;
      this._version = value;
    }
  }

  public bool OnSale
  {
    get
    {
      return _onSale;
    }
    set
    {
      __isset.onSale = true;
      this._onSale = value;
    }
  }

  public long ValidUntil
  {
    get
    {
      return _validUntil;
    }
    set
    {
      __isset.validUntil = true;
      this._validUntil = value;
    }
  }

  public List<StickerIdRange> StickerIdRanges
  {
    get
    {
      return _stickerIdRanges;
    }
    set
    {
      __isset.stickerIdRanges = true;
      this._stickerIdRanges = value;
    }
  }

  public bool GrantedByDefault
  {
    get
    {
      return _grantedByDefault;
    }
    set
    {
      __isset.grantedByDefault = true;
      this._grantedByDefault = value;
    }
  }

  public int DisplayOrder
  {
    get
    {
      return _displayOrder;
    }
    set
    {
      __isset.displayOrder = true;
      this._displayOrder = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool productId;
    public bool packageId;
    public bool version;
    public bool onSale;
    public bool validUntil;
    public bool stickerIdRanges;
    public bool grantedByDefault;
    public bool displayOrder;
  }

  public ProductSimple()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              ProductId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              PackageId = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              Version = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Bool)
            {
              OnSale = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I64)
            {
              ValidUntil = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.List)
            {
              {
                TList _list201 = await iprot.ReadListBeginAsync(cancellationToken);
                StickerIdRanges = new List<StickerIdRange>(_list201.Count);
                for(int _i202 = 0; _i202 < _list201.Count; ++_i202)
                {
                  StickerIdRange _elem203;
                  _elem203 = new StickerIdRange();
                  await _elem203.ReadAsync(iprot, cancellationToken);
                  StickerIdRanges.Add(_elem203);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 41:
            if (field.Type == TType.Bool)
            {
              GrantedByDefault = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 42:
            if (field.Type == TType.I32)
            {
              DisplayOrder = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("ProductSimple");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (ProductId != null && __isset.productId)
      {
        field.Name = "productId";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ProductId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.packageId)
      {
        field.Name = "packageId";
        field.Type = TType.I64;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(PackageId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.version)
      {
        field.Name = "version";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Version, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.onSale)
      {
        field.Name = "onSale";
        field.Type = TType.Bool;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(OnSale, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.validUntil)
      {
        field.Name = "validUntil";
        field.Type = TType.I64;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(ValidUntil, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (StickerIdRanges != null && __isset.stickerIdRanges)
      {
        field.Name = "stickerIdRanges";
        field.Type = TType.List;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, StickerIdRanges.Count), cancellationToken);
          foreach (StickerIdRange _iter204 in StickerIdRanges)
          {
            await _iter204.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.grantedByDefault)
      {
        field.Name = "grantedByDefault";
        field.Type = TType.Bool;
        field.ID = 41;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(GrantedByDefault, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.displayOrder)
      {
        field.Name = "displayOrder";
        field.Type = TType.I32;
        field.ID = 42;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(DisplayOrder, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as ProductSimple;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.productId == other.__isset.productId) && ((!__isset.productId) || (System.Object.Equals(ProductId, other.ProductId))))
      && ((__isset.packageId == other.__isset.packageId) && ((!__isset.packageId) || (System.Object.Equals(PackageId, other.PackageId))))
      && ((__isset.version == other.__isset.version) && ((!__isset.version) || (System.Object.Equals(Version, other.Version))))
      && ((__isset.onSale == other.__isset.onSale) && ((!__isset.onSale) || (System.Object.Equals(OnSale, other.OnSale))))
      && ((__isset.validUntil == other.__isset.validUntil) && ((!__isset.validUntil) || (System.Object.Equals(ValidUntil, other.ValidUntil))))
      && ((__isset.stickerIdRanges == other.__isset.stickerIdRanges) && ((!__isset.stickerIdRanges) || (TCollections.Equals(StickerIdRanges, other.StickerIdRanges))))
      && ((__isset.grantedByDefault == other.__isset.grantedByDefault) && ((!__isset.grantedByDefault) || (System.Object.Equals(GrantedByDefault, other.GrantedByDefault))))
      && ((__isset.displayOrder == other.__isset.displayOrder) && ((!__isset.displayOrder) || (System.Object.Equals(DisplayOrder, other.DisplayOrder))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.productId)
        hashcode = (hashcode * 397) + ProductId.GetHashCode();
      if(__isset.packageId)
        hashcode = (hashcode * 397) + PackageId.GetHashCode();
      if(__isset.version)
        hashcode = (hashcode * 397) + Version.GetHashCode();
      if(__isset.onSale)
        hashcode = (hashcode * 397) + OnSale.GetHashCode();
      if(__isset.validUntil)
        hashcode = (hashcode * 397) + ValidUntil.GetHashCode();
      if(__isset.stickerIdRanges)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(StickerIdRanges);
      if(__isset.grantedByDefault)
        hashcode = (hashcode * 397) + GrantedByDefault.GetHashCode();
      if(__isset.displayOrder)
        hashcode = (hashcode * 397) + DisplayOrder.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("ProductSimple(");
    bool __first = true;
    if (ProductId != null && __isset.productId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ProductId: ");
      ProductId.ToString(sb);
    }
    if (__isset.packageId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PackageId: ");
      PackageId.ToString(sb);
    }
    if (__isset.version)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Version: ");
      Version.ToString(sb);
    }
    if (__isset.onSale)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("OnSale: ");
      OnSale.ToString(sb);
    }
    if (__isset.validUntil)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ValidUntil: ");
      ValidUntil.ToString(sb);
    }
    if (StickerIdRanges != null && __isset.stickerIdRanges)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("StickerIdRanges: ");
      StickerIdRanges.ToString(sb);
    }
    if (__isset.grantedByDefault)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("GrantedByDefault: ");
      GrantedByDefault.ToString(sb);
    }
    if (__isset.displayOrder)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DisplayOrder: ");
      DisplayOrder.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

