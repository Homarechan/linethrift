/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class ShouldSyncException : TException, TBase
{
  private long _syncOpRevision;
  private SyncScope _syncScope;
  private SyncTriggerReason _syncReason;
  private string _message;

  public long SyncOpRevision
  {
    get
    {
      return _syncOpRevision;
    }
    set
    {
      __isset.syncOpRevision = true;
      this._syncOpRevision = value;
    }
  }

  public SyncScope SyncScope
  {
    get
    {
      return _syncScope;
    }
    set
    {
      __isset.syncScope = true;
      this._syncScope = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="SyncTriggerReason"/>
  /// </summary>
  public SyncTriggerReason SyncReason
  {
    get
    {
      return _syncReason;
    }
    set
    {
      __isset.syncReason = true;
      this._syncReason = value;
    }
  }

  public string Message
  {
    get
    {
      return _message;
    }
    set
    {
      __isset.message = true;
      this._message = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool syncOpRevision;
    public bool syncScope;
    public bool syncReason;
    public bool message;
  }

  public ShouldSyncException()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              SyncOpRevision = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Struct)
            {
              SyncScope = new SyncScope();
              await SyncScope.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              SyncReason = (SyncTriggerReason)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Message = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("ShouldSyncException");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.syncOpRevision)
      {
        field.Name = "syncOpRevision";
        field.Type = TType.I64;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(SyncOpRevision, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SyncScope != null && __isset.syncScope)
      {
        field.Name = "syncScope";
        field.Type = TType.Struct;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await SyncScope.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.syncReason)
      {
        field.Name = "syncReason";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)SyncReason, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Message != null && __isset.message)
      {
        field.Name = "message";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Message, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as ShouldSyncException;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.syncOpRevision == other.__isset.syncOpRevision) && ((!__isset.syncOpRevision) || (System.Object.Equals(SyncOpRevision, other.SyncOpRevision))))
      && ((__isset.syncScope == other.__isset.syncScope) && ((!__isset.syncScope) || (System.Object.Equals(SyncScope, other.SyncScope))))
      && ((__isset.syncReason == other.__isset.syncReason) && ((!__isset.syncReason) || (System.Object.Equals(SyncReason, other.SyncReason))))
      && ((__isset.message == other.__isset.message) && ((!__isset.message) || (System.Object.Equals(Message, other.Message))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.syncOpRevision)
        hashcode = (hashcode * 397) + SyncOpRevision.GetHashCode();
      if(__isset.syncScope)
        hashcode = (hashcode * 397) + SyncScope.GetHashCode();
      if(__isset.syncReason)
        hashcode = (hashcode * 397) + SyncReason.GetHashCode();
      if(__isset.message)
        hashcode = (hashcode * 397) + Message.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("ShouldSyncException(");
    bool __first = true;
    if (__isset.syncOpRevision)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SyncOpRevision: ");
      SyncOpRevision.ToString(sb);
    }
    if (SyncScope != null && __isset.syncScope)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SyncScope: ");
      SyncScope.ToString(sb);
    }
    if (__isset.syncReason)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SyncReason: ");
      SyncReason.ToString(sb);
    }
    if (Message != null && __isset.message)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Message: ");
      Message.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

