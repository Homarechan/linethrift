/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class FriendRequest : TBase
{
  private string _eMid;
  private string _mid;
  private FriendRequestDirection _direction;
  private FriendRequestMethod _method;
  private string _param;
  private long _timestamp;
  private long _seqId;
  private string _displayName;
  private string _picturePath;
  private string _pictureStatus;

  public string EMid
  {
    get
    {
      return _eMid;
    }
    set
    {
      __isset.eMid = true;
      this._eMid = value;
    }
  }

  public string Mid
  {
    get
    {
      return _mid;
    }
    set
    {
      __isset.mid = true;
      this._mid = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="FriendRequestDirection"/>
  /// </summary>
  public FriendRequestDirection Direction
  {
    get
    {
      return _direction;
    }
    set
    {
      __isset.direction = true;
      this._direction = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="FriendRequestMethod"/>
  /// </summary>
  public FriendRequestMethod Method
  {
    get
    {
      return _method;
    }
    set
    {
      __isset.method = true;
      this._method = value;
    }
  }

  public string Param
  {
    get
    {
      return _param;
    }
    set
    {
      __isset.param = true;
      this._param = value;
    }
  }

  public long Timestamp
  {
    get
    {
      return _timestamp;
    }
    set
    {
      __isset.timestamp = true;
      this._timestamp = value;
    }
  }

  public long SeqId
  {
    get
    {
      return _seqId;
    }
    set
    {
      __isset.seqId = true;
      this._seqId = value;
    }
  }

  public string DisplayName
  {
    get
    {
      return _displayName;
    }
    set
    {
      __isset.displayName = true;
      this._displayName = value;
    }
  }

  public string PicturePath
  {
    get
    {
      return _picturePath;
    }
    set
    {
      __isset.picturePath = true;
      this._picturePath = value;
    }
  }

  public string PictureStatus
  {
    get
    {
      return _pictureStatus;
    }
    set
    {
      __isset.pictureStatus = true;
      this._pictureStatus = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool eMid;
    public bool mid;
    public bool direction;
    public bool method;
    public bool param;
    public bool timestamp;
    public bool seqId;
    public bool displayName;
    public bool picturePath;
    public bool pictureStatus;
  }

  public FriendRequest()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              EMid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Mid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              Direction = (FriendRequestDirection)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I32)
            {
              Method = (FriendRequestMethod)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Param = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.I64)
            {
              Timestamp = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.I64)
            {
              SeqId = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.String)
            {
              DisplayName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.String)
            {
              PicturePath = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.String)
            {
              PictureStatus = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("FriendRequest");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (EMid != null && __isset.eMid)
      {
        field.Name = "eMid";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(EMid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Mid != null && __isset.mid)
      {
        field.Name = "mid";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Mid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.direction)
      {
        field.Name = "direction";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Direction, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.method)
      {
        field.Name = "method";
        field.Type = TType.I32;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Method, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Param != null && __isset.param)
      {
        field.Name = "param";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Param, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.timestamp)
      {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Timestamp, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.seqId)
      {
        field.Name = "seqId";
        field.Type = TType.I64;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(SeqId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (DisplayName != null && __isset.displayName)
      {
        field.Name = "displayName";
        field.Type = TType.String;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(DisplayName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (PicturePath != null && __isset.picturePath)
      {
        field.Name = "picturePath";
        field.Type = TType.String;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(PicturePath, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (PictureStatus != null && __isset.pictureStatus)
      {
        field.Name = "pictureStatus";
        field.Type = TType.String;
        field.ID = 12;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(PictureStatus, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as FriendRequest;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.eMid == other.__isset.eMid) && ((!__isset.eMid) || (System.Object.Equals(EMid, other.EMid))))
      && ((__isset.mid == other.__isset.mid) && ((!__isset.mid) || (System.Object.Equals(Mid, other.Mid))))
      && ((__isset.direction == other.__isset.direction) && ((!__isset.direction) || (System.Object.Equals(Direction, other.Direction))))
      && ((__isset.method == other.__isset.method) && ((!__isset.method) || (System.Object.Equals(Method, other.Method))))
      && ((__isset.param == other.__isset.param) && ((!__isset.param) || (System.Object.Equals(Param, other.Param))))
      && ((__isset.timestamp == other.__isset.timestamp) && ((!__isset.timestamp) || (System.Object.Equals(Timestamp, other.Timestamp))))
      && ((__isset.seqId == other.__isset.seqId) && ((!__isset.seqId) || (System.Object.Equals(SeqId, other.SeqId))))
      && ((__isset.displayName == other.__isset.displayName) && ((!__isset.displayName) || (System.Object.Equals(DisplayName, other.DisplayName))))
      && ((__isset.picturePath == other.__isset.picturePath) && ((!__isset.picturePath) || (System.Object.Equals(PicturePath, other.PicturePath))))
      && ((__isset.pictureStatus == other.__isset.pictureStatus) && ((!__isset.pictureStatus) || (System.Object.Equals(PictureStatus, other.PictureStatus))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.eMid)
        hashcode = (hashcode * 397) + EMid.GetHashCode();
      if(__isset.mid)
        hashcode = (hashcode * 397) + Mid.GetHashCode();
      if(__isset.direction)
        hashcode = (hashcode * 397) + Direction.GetHashCode();
      if(__isset.method)
        hashcode = (hashcode * 397) + Method.GetHashCode();
      if(__isset.param)
        hashcode = (hashcode * 397) + Param.GetHashCode();
      if(__isset.timestamp)
        hashcode = (hashcode * 397) + Timestamp.GetHashCode();
      if(__isset.seqId)
        hashcode = (hashcode * 397) + SeqId.GetHashCode();
      if(__isset.displayName)
        hashcode = (hashcode * 397) + DisplayName.GetHashCode();
      if(__isset.picturePath)
        hashcode = (hashcode * 397) + PicturePath.GetHashCode();
      if(__isset.pictureStatus)
        hashcode = (hashcode * 397) + PictureStatus.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("FriendRequest(");
    bool __first = true;
    if (EMid != null && __isset.eMid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("EMid: ");
      EMid.ToString(sb);
    }
    if (Mid != null && __isset.mid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Mid: ");
      Mid.ToString(sb);
    }
    if (__isset.direction)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Direction: ");
      Direction.ToString(sb);
    }
    if (__isset.method)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Method: ");
      Method.ToString(sb);
    }
    if (Param != null && __isset.param)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Param: ");
      Param.ToString(sb);
    }
    if (__isset.timestamp)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Timestamp: ");
      Timestamp.ToString(sb);
    }
    if (__isset.seqId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SeqId: ");
      SeqId.ToString(sb);
    }
    if (DisplayName != null && __isset.displayName)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DisplayName: ");
      DisplayName.ToString(sb);
    }
    if (PicturePath != null && __isset.picturePath)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PicturePath: ");
      PicturePath.ToString(sb);
    }
    if (PictureStatus != null && __isset.pictureStatus)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PictureStatus: ");
      PictureStatus.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

