/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class TextMessageAnnouncementContents : TBase
{
  private string _messageId;
  private string _text;
  private string _senderSquareMemberMid;
  private long _createdAt;

  public string MessageId
  {
    get
    {
      return _messageId;
    }
    set
    {
      __isset.messageId = true;
      this._messageId = value;
    }
  }

  public string Text
  {
    get
    {
      return _text;
    }
    set
    {
      __isset.text = true;
      this._text = value;
    }
  }

  public string SenderSquareMemberMid
  {
    get
    {
      return _senderSquareMemberMid;
    }
    set
    {
      __isset.senderSquareMemberMid = true;
      this._senderSquareMemberMid = value;
    }
  }

  public long CreatedAt
  {
    get
    {
      return _createdAt;
    }
    set
    {
      __isset.createdAt = true;
      this._createdAt = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool messageId;
    public bool text;
    public bool senderSquareMemberMid;
    public bool createdAt;
  }

  public TextMessageAnnouncementContents()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              MessageId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Text = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              SenderSquareMemberMid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I64)
            {
              CreatedAt = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TextMessageAnnouncementContents");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (MessageId != null && __isset.messageId)
      {
        field.Name = "messageId";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(MessageId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Text != null && __isset.text)
      {
        field.Name = "text";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Text, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SenderSquareMemberMid != null && __isset.senderSquareMemberMid)
      {
        field.Name = "senderSquareMemberMid";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(SenderSquareMemberMid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.createdAt)
      {
        field.Name = "createdAt";
        field.Type = TType.I64;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(CreatedAt, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as TextMessageAnnouncementContents;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.messageId == other.__isset.messageId) && ((!__isset.messageId) || (System.Object.Equals(MessageId, other.MessageId))))
      && ((__isset.text == other.__isset.text) && ((!__isset.text) || (System.Object.Equals(Text, other.Text))))
      && ((__isset.senderSquareMemberMid == other.__isset.senderSquareMemberMid) && ((!__isset.senderSquareMemberMid) || (System.Object.Equals(SenderSquareMemberMid, other.SenderSquareMemberMid))))
      && ((__isset.createdAt == other.__isset.createdAt) && ((!__isset.createdAt) || (System.Object.Equals(CreatedAt, other.CreatedAt))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.messageId)
        hashcode = (hashcode * 397) + MessageId.GetHashCode();
      if(__isset.text)
        hashcode = (hashcode * 397) + Text.GetHashCode();
      if(__isset.senderSquareMemberMid)
        hashcode = (hashcode * 397) + SenderSquareMemberMid.GetHashCode();
      if(__isset.createdAt)
        hashcode = (hashcode * 397) + CreatedAt.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TextMessageAnnouncementContents(");
    bool __first = true;
    if (MessageId != null && __isset.messageId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MessageId: ");
      MessageId.ToString(sb);
    }
    if (Text != null && __isset.text)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Text: ");
      Text.ToString(sb);
    }
    if (SenderSquareMemberMid != null && __isset.senderSquareMemberMid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SenderSquareMemberMid: ");
      SenderSquareMemberMid.ToString(sb);
    }
    if (__isset.createdAt)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CreatedAt: ");
      CreatedAt.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

