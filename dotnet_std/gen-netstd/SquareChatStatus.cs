/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class SquareChatStatus : TBase
{
  private SquareMessage _lastMessage;
  private string _senderDisplayName;
  private SquareChatStatusWithoutMessage _otherStatus;

  public SquareMessage LastMessage
  {
    get
    {
      return _lastMessage;
    }
    set
    {
      __isset.lastMessage = true;
      this._lastMessage = value;
    }
  }

  public string SenderDisplayName
  {
    get
    {
      return _senderDisplayName;
    }
    set
    {
      __isset.senderDisplayName = true;
      this._senderDisplayName = value;
    }
  }

  public SquareChatStatusWithoutMessage OtherStatus
  {
    get
    {
      return _otherStatus;
    }
    set
    {
      __isset.otherStatus = true;
      this._otherStatus = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool lastMessage;
    public bool senderDisplayName;
    public bool otherStatus;
  }

  public SquareChatStatus()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 3:
            if (field.Type == TType.Struct)
            {
              LastMessage = new SquareMessage();
              await LastMessage.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              SenderDisplayName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.Struct)
            {
              OtherStatus = new SquareChatStatusWithoutMessage();
              await OtherStatus.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("SquareChatStatus");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (LastMessage != null && __isset.lastMessage)
      {
        field.Name = "lastMessage";
        field.Type = TType.Struct;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await LastMessage.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SenderDisplayName != null && __isset.senderDisplayName)
      {
        field.Name = "senderDisplayName";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(SenderDisplayName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (OtherStatus != null && __isset.otherStatus)
      {
        field.Name = "otherStatus";
        field.Type = TType.Struct;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await OtherStatus.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as SquareChatStatus;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.lastMessage == other.__isset.lastMessage) && ((!__isset.lastMessage) || (System.Object.Equals(LastMessage, other.LastMessage))))
      && ((__isset.senderDisplayName == other.__isset.senderDisplayName) && ((!__isset.senderDisplayName) || (System.Object.Equals(SenderDisplayName, other.SenderDisplayName))))
      && ((__isset.otherStatus == other.__isset.otherStatus) && ((!__isset.otherStatus) || (System.Object.Equals(OtherStatus, other.OtherStatus))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.lastMessage)
        hashcode = (hashcode * 397) + LastMessage.GetHashCode();
      if(__isset.senderDisplayName)
        hashcode = (hashcode * 397) + SenderDisplayName.GetHashCode();
      if(__isset.otherStatus)
        hashcode = (hashcode * 397) + OtherStatus.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("SquareChatStatus(");
    bool __first = true;
    if (LastMessage != null && __isset.lastMessage)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("LastMessage: ");
      LastMessage.ToString(sb);
    }
    if (SenderDisplayName != null && __isset.senderDisplayName)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SenderDisplayName: ");
      SenderDisplayName.ToString(sb);
    }
    if (OtherStatus != null && __isset.otherStatus)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("OtherStatus: ");
      OtherStatus.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

