/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class BuddyDetail : TBase
{
  private string _mid;
  private long _memberCount;
  private bool _onAir;
  private bool _businessAccount;
  private bool _addable;
  private THashSet<ContentType> _acceptableContentTypes;
  private bool _capableMyhome;

  public string Mid
  {
    get
    {
      return _mid;
    }
    set
    {
      __isset.mid = true;
      this._mid = value;
    }
  }

  public long MemberCount
  {
    get
    {
      return _memberCount;
    }
    set
    {
      __isset.memberCount = true;
      this._memberCount = value;
    }
  }

  public bool OnAir
  {
    get
    {
      return _onAir;
    }
    set
    {
      __isset.onAir = true;
      this._onAir = value;
    }
  }

  public bool BusinessAccount
  {
    get
    {
      return _businessAccount;
    }
    set
    {
      __isset.businessAccount = true;
      this._businessAccount = value;
    }
  }

  public bool Addable
  {
    get
    {
      return _addable;
    }
    set
    {
      __isset.addable = true;
      this._addable = value;
    }
  }

  public THashSet<ContentType> AcceptableContentTypes
  {
    get
    {
      return _acceptableContentTypes;
    }
    set
    {
      __isset.acceptableContentTypes = true;
      this._acceptableContentTypes = value;
    }
  }

  public bool CapableMyhome
  {
    get
    {
      return _capableMyhome;
    }
    set
    {
      __isset.capableMyhome = true;
      this._capableMyhome = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool mid;
    public bool memberCount;
    public bool onAir;
    public bool businessAccount;
    public bool addable;
    public bool acceptableContentTypes;
    public bool capableMyhome;
  }

  public BuddyDetail()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Mid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              MemberCount = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Bool)
            {
              OnAir = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Bool)
            {
              BusinessAccount = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.Bool)
            {
              Addable = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.Set)
            {
              {
                TSet _set56 = await iprot.ReadSetBeginAsync(cancellationToken);
                AcceptableContentTypes = new THashSet<ContentType>(_set56.Count);
                for(int _i57 = 0; _i57 < _set56.Count; ++_i57)
                {
                  ContentType _elem58;
                  _elem58 = (ContentType)await iprot.ReadI32Async(cancellationToken);
                  AcceptableContentTypes.Add(_elem58);
                }
                await iprot.ReadSetEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.Bool)
            {
              CapableMyhome = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("BuddyDetail");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Mid != null && __isset.mid)
      {
        field.Name = "mid";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Mid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.memberCount)
      {
        field.Name = "memberCount";
        field.Type = TType.I64;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(MemberCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.onAir)
      {
        field.Name = "onAir";
        field.Type = TType.Bool;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(OnAir, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.businessAccount)
      {
        field.Name = "businessAccount";
        field.Type = TType.Bool;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(BusinessAccount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.addable)
      {
        field.Name = "addable";
        field.Type = TType.Bool;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(Addable, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (AcceptableContentTypes != null && __isset.acceptableContentTypes)
      {
        field.Name = "acceptableContentTypes";
        field.Type = TType.Set;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteSetBeginAsync(new TSet(TType.I32, AcceptableContentTypes.Count), cancellationToken);
          foreach (ContentType _iter59 in AcceptableContentTypes)
          {
            await oprot.WriteI32Async((int)_iter59, cancellationToken);
          }
          await oprot.WriteSetEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.capableMyhome)
      {
        field.Name = "capableMyhome";
        field.Type = TType.Bool;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(CapableMyhome, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as BuddyDetail;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.mid == other.__isset.mid) && ((!__isset.mid) || (System.Object.Equals(Mid, other.Mid))))
      && ((__isset.memberCount == other.__isset.memberCount) && ((!__isset.memberCount) || (System.Object.Equals(MemberCount, other.MemberCount))))
      && ((__isset.onAir == other.__isset.onAir) && ((!__isset.onAir) || (System.Object.Equals(OnAir, other.OnAir))))
      && ((__isset.businessAccount == other.__isset.businessAccount) && ((!__isset.businessAccount) || (System.Object.Equals(BusinessAccount, other.BusinessAccount))))
      && ((__isset.addable == other.__isset.addable) && ((!__isset.addable) || (System.Object.Equals(Addable, other.Addable))))
      && ((__isset.acceptableContentTypes == other.__isset.acceptableContentTypes) && ((!__isset.acceptableContentTypes) || (TCollections.Equals(AcceptableContentTypes, other.AcceptableContentTypes))))
      && ((__isset.capableMyhome == other.__isset.capableMyhome) && ((!__isset.capableMyhome) || (System.Object.Equals(CapableMyhome, other.CapableMyhome))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.mid)
        hashcode = (hashcode * 397) + Mid.GetHashCode();
      if(__isset.memberCount)
        hashcode = (hashcode * 397) + MemberCount.GetHashCode();
      if(__isset.onAir)
        hashcode = (hashcode * 397) + OnAir.GetHashCode();
      if(__isset.businessAccount)
        hashcode = (hashcode * 397) + BusinessAccount.GetHashCode();
      if(__isset.addable)
        hashcode = (hashcode * 397) + Addable.GetHashCode();
      if(__isset.acceptableContentTypes)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(AcceptableContentTypes);
      if(__isset.capableMyhome)
        hashcode = (hashcode * 397) + CapableMyhome.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("BuddyDetail(");
    bool __first = true;
    if (Mid != null && __isset.mid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Mid: ");
      Mid.ToString(sb);
    }
    if (__isset.memberCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MemberCount: ");
      MemberCount.ToString(sb);
    }
    if (__isset.onAir)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("OnAir: ");
      OnAir.ToString(sb);
    }
    if (__isset.businessAccount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("BusinessAccount: ");
      BusinessAccount.ToString(sb);
    }
    if (__isset.addable)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Addable: ");
      Addable.ToString(sb);
    }
    if (AcceptableContentTypes != null && __isset.acceptableContentTypes)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("AcceptableContentTypes: ");
      AcceptableContentTypes.ToString(sb);
    }
    if (__isset.capableMyhome)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CapableMyhome: ");
      CapableMyhome.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

