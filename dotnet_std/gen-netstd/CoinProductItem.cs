/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class CoinProductItem : TBase
{
  private string _itemId;
  private int _coin;
  private int _freeCoin;
  private string _currency;
  private string _price;
  private string _displayPrice;
  private string _name;
  private string _desc;

  public string ItemId
  {
    get
    {
      return _itemId;
    }
    set
    {
      __isset.itemId = true;
      this._itemId = value;
    }
  }

  public int Coin
  {
    get
    {
      return _coin;
    }
    set
    {
      __isset.coin = true;
      this._coin = value;
    }
  }

  public int FreeCoin
  {
    get
    {
      return _freeCoin;
    }
    set
    {
      __isset.freeCoin = true;
      this._freeCoin = value;
    }
  }

  public string Currency
  {
    get
    {
      return _currency;
    }
    set
    {
      __isset.currency = true;
      this._currency = value;
    }
  }

  public string Price
  {
    get
    {
      return _price;
    }
    set
    {
      __isset.price = true;
      this._price = value;
    }
  }

  public string DisplayPrice
  {
    get
    {
      return _displayPrice;
    }
    set
    {
      __isset.displayPrice = true;
      this._displayPrice = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string Desc
  {
    get
    {
      return _desc;
    }
    set
    {
      __isset.desc = true;
      this._desc = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool itemId;
    public bool coin;
    public bool freeCoin;
    public bool currency;
    public bool price;
    public bool displayPrice;
    public bool name;
    public bool desc;
  }

  public CoinProductItem()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              ItemId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              Coin = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              FreeCoin = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Currency = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.String)
            {
              Price = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.String)
            {
              DisplayPrice = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.String)
            {
              Name = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.String)
            {
              Desc = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("CoinProductItem");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (ItemId != null && __isset.itemId)
      {
        field.Name = "itemId";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ItemId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.coin)
      {
        field.Name = "coin";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Coin, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.freeCoin)
      {
        field.Name = "freeCoin";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(FreeCoin, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Currency != null && __isset.currency)
      {
        field.Name = "currency";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Currency, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Price != null && __isset.price)
      {
        field.Name = "price";
        field.Type = TType.String;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Price, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (DisplayPrice != null && __isset.displayPrice)
      {
        field.Name = "displayPrice";
        field.Type = TType.String;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(DisplayPrice, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Name != null && __isset.name)
      {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Name, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Desc != null && __isset.desc)
      {
        field.Name = "desc";
        field.Type = TType.String;
        field.ID = 9;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Desc, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as CoinProductItem;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.itemId == other.__isset.itemId) && ((!__isset.itemId) || (System.Object.Equals(ItemId, other.ItemId))))
      && ((__isset.coin == other.__isset.coin) && ((!__isset.coin) || (System.Object.Equals(Coin, other.Coin))))
      && ((__isset.freeCoin == other.__isset.freeCoin) && ((!__isset.freeCoin) || (System.Object.Equals(FreeCoin, other.FreeCoin))))
      && ((__isset.currency == other.__isset.currency) && ((!__isset.currency) || (System.Object.Equals(Currency, other.Currency))))
      && ((__isset.price == other.__isset.price) && ((!__isset.price) || (System.Object.Equals(Price, other.Price))))
      && ((__isset.displayPrice == other.__isset.displayPrice) && ((!__isset.displayPrice) || (System.Object.Equals(DisplayPrice, other.DisplayPrice))))
      && ((__isset.name == other.__isset.name) && ((!__isset.name) || (System.Object.Equals(Name, other.Name))))
      && ((__isset.desc == other.__isset.desc) && ((!__isset.desc) || (System.Object.Equals(Desc, other.Desc))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.itemId)
        hashcode = (hashcode * 397) + ItemId.GetHashCode();
      if(__isset.coin)
        hashcode = (hashcode * 397) + Coin.GetHashCode();
      if(__isset.freeCoin)
        hashcode = (hashcode * 397) + FreeCoin.GetHashCode();
      if(__isset.currency)
        hashcode = (hashcode * 397) + Currency.GetHashCode();
      if(__isset.price)
        hashcode = (hashcode * 397) + Price.GetHashCode();
      if(__isset.displayPrice)
        hashcode = (hashcode * 397) + DisplayPrice.GetHashCode();
      if(__isset.name)
        hashcode = (hashcode * 397) + Name.GetHashCode();
      if(__isset.desc)
        hashcode = (hashcode * 397) + Desc.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("CoinProductItem(");
    bool __first = true;
    if (ItemId != null && __isset.itemId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ItemId: ");
      ItemId.ToString(sb);
    }
    if (__isset.coin)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Coin: ");
      Coin.ToString(sb);
    }
    if (__isset.freeCoin)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("FreeCoin: ");
      FreeCoin.ToString(sb);
    }
    if (Currency != null && __isset.currency)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Currency: ");
      Currency.ToString(sb);
    }
    if (Price != null && __isset.price)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Price: ");
      Price.ToString(sb);
    }
    if (DisplayPrice != null && __isset.displayPrice)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DisplayPrice: ");
      DisplayPrice.ToString(sb);
    }
    if (Name != null && __isset.name)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Name: ");
      Name.ToString(sb);
    }
    if (Desc != null && __isset.desc)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Desc: ");
      Desc.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

