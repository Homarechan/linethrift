/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class TMessageReadRange : TBase
{
  private string _chatId;
  private Dictionary<string, List<TMessageReadRangeEntry>> _ranges;

  public string ChatId
  {
    get
    {
      return _chatId;
    }
    set
    {
      __isset.chatId = true;
      this._chatId = value;
    }
  }

  public Dictionary<string, List<TMessageReadRangeEntry>> Ranges
  {
    get
    {
      return _ranges;
    }
    set
    {
      __isset.ranges = true;
      this._ranges = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool chatId;
    public bool ranges;
  }

  public TMessageReadRange()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              ChatId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Map)
            {
              {
                TMap _map267 = await iprot.ReadMapBeginAsync(cancellationToken);
                Ranges = new Dictionary<string, List<TMessageReadRangeEntry>>(_map267.Count);
                for(int _i268 = 0; _i268 < _map267.Count; ++_i268)
                {
                  string _key269;
                  List<TMessageReadRangeEntry> _val270;
                  _key269 = await iprot.ReadStringAsync(cancellationToken);
                  {
                    TList _list271 = await iprot.ReadListBeginAsync(cancellationToken);
                    _val270 = new List<TMessageReadRangeEntry>(_list271.Count);
                    for(int _i272 = 0; _i272 < _list271.Count; ++_i272)
                    {
                      TMessageReadRangeEntry _elem273;
                      _elem273 = new TMessageReadRangeEntry();
                      await _elem273.ReadAsync(iprot, cancellationToken);
                      _val270.Add(_elem273);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                  Ranges[_key269] = _val270;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TMessageReadRange");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (ChatId != null && __isset.chatId)
      {
        field.Name = "chatId";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ChatId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Ranges != null && __isset.ranges)
      {
        field.Name = "ranges";
        field.Type = TType.Map;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.List, Ranges.Count), cancellationToken);
          foreach (string _iter274 in Ranges.Keys)
          {
            await oprot.WriteStringAsync(_iter274, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Ranges[_iter274].Count), cancellationToken);
              foreach (TMessageReadRangeEntry _iter275 in Ranges[_iter274])
              {
                await _iter275.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as TMessageReadRange;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.chatId == other.__isset.chatId) && ((!__isset.chatId) || (System.Object.Equals(ChatId, other.ChatId))))
      && ((__isset.ranges == other.__isset.ranges) && ((!__isset.ranges) || (TCollections.Equals(Ranges, other.Ranges))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.chatId)
        hashcode = (hashcode * 397) + ChatId.GetHashCode();
      if(__isset.ranges)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Ranges);
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TMessageReadRange(");
    bool __first = true;
    if (ChatId != null && __isset.chatId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ChatId: ");
      ChatId.ToString(sb);
    }
    if (Ranges != null && __isset.ranges)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Ranges: ");
      Ranges.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

