/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class FriendChannelMatrix : TBase
{
  private string _channelId;
  private string _representMid;
  private int _count;
  private int _point;

  public string ChannelId
  {
    get
    {
      return _channelId;
    }
    set
    {
      __isset.channelId = true;
      this._channelId = value;
    }
  }

  public string RepresentMid
  {
    get
    {
      return _representMid;
    }
    set
    {
      __isset.representMid = true;
      this._representMid = value;
    }
  }

  public int Count
  {
    get
    {
      return _count;
    }
    set
    {
      __isset.count = true;
      this._count = value;
    }
  }

  public int Point
  {
    get
    {
      return _point;
    }
    set
    {
      __isset.point = true;
      this._point = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool channelId;
    public bool representMid;
    public bool count;
    public bool point;
  }

  public FriendChannelMatrix()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              ChannelId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              RepresentMid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              Count = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I32)
            {
              Point = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("FriendChannelMatrix");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (ChannelId != null && __isset.channelId)
      {
        field.Name = "channelId";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ChannelId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (RepresentMid != null && __isset.representMid)
      {
        field.Name = "representMid";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(RepresentMid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.count)
      {
        field.Name = "count";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Count, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.point)
      {
        field.Name = "point";
        field.Type = TType.I32;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Point, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as FriendChannelMatrix;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.channelId == other.__isset.channelId) && ((!__isset.channelId) || (System.Object.Equals(ChannelId, other.ChannelId))))
      && ((__isset.representMid == other.__isset.representMid) && ((!__isset.representMid) || (System.Object.Equals(RepresentMid, other.RepresentMid))))
      && ((__isset.count == other.__isset.count) && ((!__isset.count) || (System.Object.Equals(Count, other.Count))))
      && ((__isset.point == other.__isset.point) && ((!__isset.point) || (System.Object.Equals(Point, other.Point))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.channelId)
        hashcode = (hashcode * 397) + ChannelId.GetHashCode();
      if(__isset.representMid)
        hashcode = (hashcode * 397) + RepresentMid.GetHashCode();
      if(__isset.count)
        hashcode = (hashcode * 397) + Count.GetHashCode();
      if(__isset.point)
        hashcode = (hashcode * 397) + Point.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("FriendChannelMatrix(");
    bool __first = true;
    if (ChannelId != null && __isset.channelId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ChannelId: ");
      ChannelId.ToString(sb);
    }
    if (RepresentMid != null && __isset.representMid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("RepresentMid: ");
      RepresentMid.ToString(sb);
    }
    if (__isset.count)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Count: ");
      Count.ToString(sb);
    }
    if (__isset.point)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Point: ");
      Point.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

