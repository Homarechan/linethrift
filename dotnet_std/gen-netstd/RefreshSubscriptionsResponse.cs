/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class RefreshSubscriptionsResponse : TBase
{
  private long _ttlMillis;
  private Dictionary<long, SubscriptionState> _subscriptionStates;

  public long TtlMillis
  {
    get
    {
      return _ttlMillis;
    }
    set
    {
      __isset.ttlMillis = true;
      this._ttlMillis = value;
    }
  }

  public Dictionary<long, SubscriptionState> SubscriptionStates
  {
    get
    {
      return _subscriptionStates;
    }
    set
    {
      __isset.subscriptionStates = true;
      this._subscriptionStates = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool ttlMillis;
    public bool subscriptionStates;
  }

  public RefreshSubscriptionsResponse()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              TtlMillis = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Map)
            {
              {
                TMap _map466 = await iprot.ReadMapBeginAsync(cancellationToken);
                SubscriptionStates = new Dictionary<long, SubscriptionState>(_map466.Count);
                for(int _i467 = 0; _i467 < _map466.Count; ++_i467)
                {
                  long _key468;
                  SubscriptionState _val469;
                  _key468 = await iprot.ReadI64Async(cancellationToken);
                  _val469 = new SubscriptionState();
                  await _val469.ReadAsync(iprot, cancellationToken);
                  SubscriptionStates[_key468] = _val469;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("RefreshSubscriptionsResponse");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.ttlMillis)
      {
        field.Name = "ttlMillis";
        field.Type = TType.I64;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(TtlMillis, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SubscriptionStates != null && __isset.subscriptionStates)
      {
        field.Name = "subscriptionStates";
        field.Type = TType.Map;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.Struct, SubscriptionStates.Count), cancellationToken);
          foreach (long _iter470 in SubscriptionStates.Keys)
          {
            await oprot.WriteI64Async(_iter470, cancellationToken);
            await SubscriptionStates[_iter470].WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as RefreshSubscriptionsResponse;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.ttlMillis == other.__isset.ttlMillis) && ((!__isset.ttlMillis) || (System.Object.Equals(TtlMillis, other.TtlMillis))))
      && ((__isset.subscriptionStates == other.__isset.subscriptionStates) && ((!__isset.subscriptionStates) || (TCollections.Equals(SubscriptionStates, other.SubscriptionStates))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.ttlMillis)
        hashcode = (hashcode * 397) + TtlMillis.GetHashCode();
      if(__isset.subscriptionStates)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(SubscriptionStates);
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("RefreshSubscriptionsResponse(");
    bool __first = true;
    if (__isset.ttlMillis)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("TtlMillis: ");
      TtlMillis.ToString(sb);
    }
    if (SubscriptionStates != null && __isset.subscriptionStates)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SubscriptionStates: ");
      SubscriptionStates.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

