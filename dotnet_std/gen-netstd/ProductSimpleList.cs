/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class ProductSimpleList : TBase
{
  private bool _hasNext;
  private int _reinvokeHour;
  private long _lastVersionSeq;
  private List<ProductSimple> _productList;
  private long _recentNewReleaseDate;
  private long _recentEventReleaseDate;

  public bool HasNext
  {
    get
    {
      return _hasNext;
    }
    set
    {
      __isset.hasNext = true;
      this._hasNext = value;
    }
  }

  public int ReinvokeHour
  {
    get
    {
      return _reinvokeHour;
    }
    set
    {
      __isset.reinvokeHour = true;
      this._reinvokeHour = value;
    }
  }

  public long LastVersionSeq
  {
    get
    {
      return _lastVersionSeq;
    }
    set
    {
      __isset.lastVersionSeq = true;
      this._lastVersionSeq = value;
    }
  }

  public List<ProductSimple> ProductList
  {
    get
    {
      return _productList;
    }
    set
    {
      __isset.productList = true;
      this._productList = value;
    }
  }

  public long RecentNewReleaseDate
  {
    get
    {
      return _recentNewReleaseDate;
    }
    set
    {
      __isset.recentNewReleaseDate = true;
      this._recentNewReleaseDate = value;
    }
  }

  public long RecentEventReleaseDate
  {
    get
    {
      return _recentEventReleaseDate;
    }
    set
    {
      __isset.recentEventReleaseDate = true;
      this._recentEventReleaseDate = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool hasNext;
    public bool reinvokeHour;
    public bool lastVersionSeq;
    public bool productList;
    public bool recentNewReleaseDate;
    public bool recentEventReleaseDate;
  }

  public ProductSimpleList()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool)
            {
              HasNext = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              ReinvokeHour = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I64)
            {
              LastVersionSeq = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                TList _list205 = await iprot.ReadListBeginAsync(cancellationToken);
                ProductList = new List<ProductSimple>(_list205.Count);
                for(int _i206 = 0; _i206 < _list205.Count; ++_i206)
                {
                  ProductSimple _elem207;
                  _elem207 = new ProductSimple();
                  await _elem207.ReadAsync(iprot, cancellationToken);
                  ProductList.Add(_elem207);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I64)
            {
              RecentNewReleaseDate = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.I64)
            {
              RecentEventReleaseDate = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("ProductSimpleList");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.hasNext)
      {
        field.Name = "hasNext";
        field.Type = TType.Bool;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(HasNext, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.reinvokeHour)
      {
        field.Name = "reinvokeHour";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(ReinvokeHour, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.lastVersionSeq)
      {
        field.Name = "lastVersionSeq";
        field.Type = TType.I64;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(LastVersionSeq, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ProductList != null && __isset.productList)
      {
        field.Name = "productList";
        field.Type = TType.List;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, ProductList.Count), cancellationToken);
          foreach (ProductSimple _iter208 in ProductList)
          {
            await _iter208.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.recentNewReleaseDate)
      {
        field.Name = "recentNewReleaseDate";
        field.Type = TType.I64;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(RecentNewReleaseDate, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.recentEventReleaseDate)
      {
        field.Name = "recentEventReleaseDate";
        field.Type = TType.I64;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(RecentEventReleaseDate, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as ProductSimpleList;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.hasNext == other.__isset.hasNext) && ((!__isset.hasNext) || (System.Object.Equals(HasNext, other.HasNext))))
      && ((__isset.reinvokeHour == other.__isset.reinvokeHour) && ((!__isset.reinvokeHour) || (System.Object.Equals(ReinvokeHour, other.ReinvokeHour))))
      && ((__isset.lastVersionSeq == other.__isset.lastVersionSeq) && ((!__isset.lastVersionSeq) || (System.Object.Equals(LastVersionSeq, other.LastVersionSeq))))
      && ((__isset.productList == other.__isset.productList) && ((!__isset.productList) || (TCollections.Equals(ProductList, other.ProductList))))
      && ((__isset.recentNewReleaseDate == other.__isset.recentNewReleaseDate) && ((!__isset.recentNewReleaseDate) || (System.Object.Equals(RecentNewReleaseDate, other.RecentNewReleaseDate))))
      && ((__isset.recentEventReleaseDate == other.__isset.recentEventReleaseDate) && ((!__isset.recentEventReleaseDate) || (System.Object.Equals(RecentEventReleaseDate, other.RecentEventReleaseDate))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.hasNext)
        hashcode = (hashcode * 397) + HasNext.GetHashCode();
      if(__isset.reinvokeHour)
        hashcode = (hashcode * 397) + ReinvokeHour.GetHashCode();
      if(__isset.lastVersionSeq)
        hashcode = (hashcode * 397) + LastVersionSeq.GetHashCode();
      if(__isset.productList)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ProductList);
      if(__isset.recentNewReleaseDate)
        hashcode = (hashcode * 397) + RecentNewReleaseDate.GetHashCode();
      if(__isset.recentEventReleaseDate)
        hashcode = (hashcode * 397) + RecentEventReleaseDate.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("ProductSimpleList(");
    bool __first = true;
    if (__isset.hasNext)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("HasNext: ");
      HasNext.ToString(sb);
    }
    if (__isset.reinvokeHour)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ReinvokeHour: ");
      ReinvokeHour.ToString(sb);
    }
    if (__isset.lastVersionSeq)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("LastVersionSeq: ");
      LastVersionSeq.ToString(sb);
    }
    if (ProductList != null && __isset.productList)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ProductList: ");
      ProductList.ToString(sb);
    }
    if (__isset.recentNewReleaseDate)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("RecentNewReleaseDate: ");
      RecentNewReleaseDate.ToString(sb);
    }
    if (__isset.recentEventReleaseDate)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("RecentEventReleaseDate: ");
      RecentEventReleaseDate.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

