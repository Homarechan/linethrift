/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class Announcement : TBase
{
  private int _index;
  private bool _forceUpdate;
  private string _title;
  private string _text;
  private long _createdTime;
  private string _pictureUrl;
  private string _thumbnailUrl;

  public int Index
  {
    get
    {
      return _index;
    }
    set
    {
      __isset.index = true;
      this._index = value;
    }
  }

  public bool ForceUpdate
  {
    get
    {
      return _forceUpdate;
    }
    set
    {
      __isset.forceUpdate = true;
      this._forceUpdate = value;
    }
  }

  public string Title
  {
    get
    {
      return _title;
    }
    set
    {
      __isset.title = true;
      this._title = value;
    }
  }

  public string Text
  {
    get
    {
      return _text;
    }
    set
    {
      __isset.text = true;
      this._text = value;
    }
  }

  public long CreatedTime
  {
    get
    {
      return _createdTime;
    }
    set
    {
      __isset.createdTime = true;
      this._createdTime = value;
    }
  }

  public string PictureUrl
  {
    get
    {
      return _pictureUrl;
    }
    set
    {
      __isset.pictureUrl = true;
      this._pictureUrl = value;
    }
  }

  public string ThumbnailUrl
  {
    get
    {
      return _thumbnailUrl;
    }
    set
    {
      __isset.thumbnailUrl = true;
      this._thumbnailUrl = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool index;
    public bool forceUpdate;
    public bool title;
    public bool text;
    public bool createdTime;
    public bool pictureUrl;
    public bool thumbnailUrl;
  }

  public Announcement()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              Index = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.Bool)
            {
              ForceUpdate = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.String)
            {
              Title = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.String)
            {
              Text = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 13:
            if (field.Type == TType.I64)
            {
              CreatedTime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 14:
            if (field.Type == TType.String)
            {
              PictureUrl = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 15:
            if (field.Type == TType.String)
            {
              ThumbnailUrl = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("Announcement");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.index)
      {
        field.Name = "index";
        field.Type = TType.I32;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Index, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.forceUpdate)
      {
        field.Name = "forceUpdate";
        field.Type = TType.Bool;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(ForceUpdate, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Title != null && __isset.title)
      {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Title, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Text != null && __isset.text)
      {
        field.Name = "text";
        field.Type = TType.String;
        field.ID = 12;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Text, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.createdTime)
      {
        field.Name = "createdTime";
        field.Type = TType.I64;
        field.ID = 13;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(CreatedTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (PictureUrl != null && __isset.pictureUrl)
      {
        field.Name = "pictureUrl";
        field.Type = TType.String;
        field.ID = 14;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(PictureUrl, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ThumbnailUrl != null && __isset.thumbnailUrl)
      {
        field.Name = "thumbnailUrl";
        field.Type = TType.String;
        field.ID = 15;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ThumbnailUrl, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as Announcement;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.index == other.__isset.index) && ((!__isset.index) || (System.Object.Equals(Index, other.Index))))
      && ((__isset.forceUpdate == other.__isset.forceUpdate) && ((!__isset.forceUpdate) || (System.Object.Equals(ForceUpdate, other.ForceUpdate))))
      && ((__isset.title == other.__isset.title) && ((!__isset.title) || (System.Object.Equals(Title, other.Title))))
      && ((__isset.text == other.__isset.text) && ((!__isset.text) || (System.Object.Equals(Text, other.Text))))
      && ((__isset.createdTime == other.__isset.createdTime) && ((!__isset.createdTime) || (System.Object.Equals(CreatedTime, other.CreatedTime))))
      && ((__isset.pictureUrl == other.__isset.pictureUrl) && ((!__isset.pictureUrl) || (System.Object.Equals(PictureUrl, other.PictureUrl))))
      && ((__isset.thumbnailUrl == other.__isset.thumbnailUrl) && ((!__isset.thumbnailUrl) || (System.Object.Equals(ThumbnailUrl, other.ThumbnailUrl))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.index)
        hashcode = (hashcode * 397) + Index.GetHashCode();
      if(__isset.forceUpdate)
        hashcode = (hashcode * 397) + ForceUpdate.GetHashCode();
      if(__isset.title)
        hashcode = (hashcode * 397) + Title.GetHashCode();
      if(__isset.text)
        hashcode = (hashcode * 397) + Text.GetHashCode();
      if(__isset.createdTime)
        hashcode = (hashcode * 397) + CreatedTime.GetHashCode();
      if(__isset.pictureUrl)
        hashcode = (hashcode * 397) + PictureUrl.GetHashCode();
      if(__isset.thumbnailUrl)
        hashcode = (hashcode * 397) + ThumbnailUrl.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("Announcement(");
    bool __first = true;
    if (__isset.index)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Index: ");
      Index.ToString(sb);
    }
    if (__isset.forceUpdate)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ForceUpdate: ");
      ForceUpdate.ToString(sb);
    }
    if (Title != null && __isset.title)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Title: ");
      Title.ToString(sb);
    }
    if (Text != null && __isset.text)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Text: ");
      Text.ToString(sb);
    }
    if (__isset.createdTime)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CreatedTime: ");
      CreatedTime.ToString(sb);
    }
    if (PictureUrl != null && __isset.pictureUrl)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PictureUrl: ");
      PictureUrl.ToString(sb);
    }
    if (ThumbnailUrl != null && __isset.thumbnailUrl)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ThumbnailUrl: ");
      ThumbnailUrl.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

