/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class DeviceInfo : TBase
{
  private string _deviceName;
  private string _systemName;
  private string _systemVersion;
  private string _model;
  private CarrierCode _carrierCode;
  private string _carrierName;
  private ApplicationType _applicationType;

  public string DeviceName
  {
    get
    {
      return _deviceName;
    }
    set
    {
      __isset.deviceName = true;
      this._deviceName = value;
    }
  }

  public string SystemName
  {
    get
    {
      return _systemName;
    }
    set
    {
      __isset.systemName = true;
      this._systemName = value;
    }
  }

  public string SystemVersion
  {
    get
    {
      return _systemVersion;
    }
    set
    {
      __isset.systemVersion = true;
      this._systemVersion = value;
    }
  }

  public string Model
  {
    get
    {
      return _model;
    }
    set
    {
      __isset.model = true;
      this._model = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="CarrierCode"/>
  /// </summary>
  public CarrierCode CarrierCode
  {
    get
    {
      return _carrierCode;
    }
    set
    {
      __isset.carrierCode = true;
      this._carrierCode = value;
    }
  }

  public string CarrierName
  {
    get
    {
      return _carrierName;
    }
    set
    {
      __isset.carrierName = true;
      this._carrierName = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="ApplicationType"/>
  /// </summary>
  public ApplicationType ApplicationType
  {
    get
    {
      return _applicationType;
    }
    set
    {
      __isset.applicationType = true;
      this._applicationType = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool deviceName;
    public bool systemName;
    public bool systemVersion;
    public bool model;
    public bool carrierCode;
    public bool carrierName;
    public bool applicationType;
  }

  public DeviceInfo()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              DeviceName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              SystemName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              SystemVersion = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Model = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.I32)
            {
              CarrierCode = (CarrierCode)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.String)
            {
              CarrierName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 20:
            if (field.Type == TType.I32)
            {
              ApplicationType = (ApplicationType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("DeviceInfo");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (DeviceName != null && __isset.deviceName)
      {
        field.Name = "deviceName";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(DeviceName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SystemName != null && __isset.systemName)
      {
        field.Name = "systemName";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(SystemName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SystemVersion != null && __isset.systemVersion)
      {
        field.Name = "systemVersion";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(SystemVersion, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Model != null && __isset.model)
      {
        field.Name = "model";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Model, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.carrierCode)
      {
        field.Name = "carrierCode";
        field.Type = TType.I32;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)CarrierCode, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (CarrierName != null && __isset.carrierName)
      {
        field.Name = "carrierName";
        field.Type = TType.String;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(CarrierName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.applicationType)
      {
        field.Name = "applicationType";
        field.Type = TType.I32;
        field.ID = 20;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)ApplicationType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as DeviceInfo;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.deviceName == other.__isset.deviceName) && ((!__isset.deviceName) || (System.Object.Equals(DeviceName, other.DeviceName))))
      && ((__isset.systemName == other.__isset.systemName) && ((!__isset.systemName) || (System.Object.Equals(SystemName, other.SystemName))))
      && ((__isset.systemVersion == other.__isset.systemVersion) && ((!__isset.systemVersion) || (System.Object.Equals(SystemVersion, other.SystemVersion))))
      && ((__isset.model == other.__isset.model) && ((!__isset.model) || (System.Object.Equals(Model, other.Model))))
      && ((__isset.carrierCode == other.__isset.carrierCode) && ((!__isset.carrierCode) || (System.Object.Equals(CarrierCode, other.CarrierCode))))
      && ((__isset.carrierName == other.__isset.carrierName) && ((!__isset.carrierName) || (System.Object.Equals(CarrierName, other.CarrierName))))
      && ((__isset.applicationType == other.__isset.applicationType) && ((!__isset.applicationType) || (System.Object.Equals(ApplicationType, other.ApplicationType))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.deviceName)
        hashcode = (hashcode * 397) + DeviceName.GetHashCode();
      if(__isset.systemName)
        hashcode = (hashcode * 397) + SystemName.GetHashCode();
      if(__isset.systemVersion)
        hashcode = (hashcode * 397) + SystemVersion.GetHashCode();
      if(__isset.model)
        hashcode = (hashcode * 397) + Model.GetHashCode();
      if(__isset.carrierCode)
        hashcode = (hashcode * 397) + CarrierCode.GetHashCode();
      if(__isset.carrierName)
        hashcode = (hashcode * 397) + CarrierName.GetHashCode();
      if(__isset.applicationType)
        hashcode = (hashcode * 397) + ApplicationType.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("DeviceInfo(");
    bool __first = true;
    if (DeviceName != null && __isset.deviceName)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DeviceName: ");
      DeviceName.ToString(sb);
    }
    if (SystemName != null && __isset.systemName)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SystemName: ");
      SystemName.ToString(sb);
    }
    if (SystemVersion != null && __isset.systemVersion)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SystemVersion: ");
      SystemVersion.ToString(sb);
    }
    if (Model != null && __isset.model)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Model: ");
      Model.ToString(sb);
    }
    if (__isset.carrierCode)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CarrierCode: ");
      CarrierCode.ToString(sb);
    }
    if (CarrierName != null && __isset.carrierName)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CarrierName: ");
      CarrierName.ToString(sb);
    }
    if (__isset.applicationType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ApplicationType: ");
      ApplicationType.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

