/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class ProximityMatchCandidateResult : TBase
{
  private List<Contact> _users;
  private List<Contact> _buddies;

  public List<Contact> Users
  {
    get
    {
      return _users;
    }
    set
    {
      __isset.users = true;
      this._users = value;
    }
  }

  public List<Contact> Buddies
  {
    get
    {
      return _buddies;
    }
    set
    {
      __isset.buddies = true;
      this._buddies = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool users;
    public bool buddies;
  }

  public ProximityMatchCandidateResult()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                TList _list209 = await iprot.ReadListBeginAsync(cancellationToken);
                Users = new List<Contact>(_list209.Count);
                for(int _i210 = 0; _i210 < _list209.Count; ++_i210)
                {
                  Contact _elem211;
                  _elem211 = new Contact();
                  await _elem211.ReadAsync(iprot, cancellationToken);
                  Users.Add(_elem211);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list212 = await iprot.ReadListBeginAsync(cancellationToken);
                Buddies = new List<Contact>(_list212.Count);
                for(int _i213 = 0; _i213 < _list212.Count; ++_i213)
                {
                  Contact _elem214;
                  _elem214 = new Contact();
                  await _elem214.ReadAsync(iprot, cancellationToken);
                  Buddies.Add(_elem214);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("ProximityMatchCandidateResult");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Users != null && __isset.users)
      {
        field.Name = "users";
        field.Type = TType.List;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Users.Count), cancellationToken);
          foreach (Contact _iter215 in Users)
          {
            await _iter215.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Buddies != null && __isset.buddies)
      {
        field.Name = "buddies";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Buddies.Count), cancellationToken);
          foreach (Contact _iter216 in Buddies)
          {
            await _iter216.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as ProximityMatchCandidateResult;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.users == other.__isset.users) && ((!__isset.users) || (TCollections.Equals(Users, other.Users))))
      && ((__isset.buddies == other.__isset.buddies) && ((!__isset.buddies) || (TCollections.Equals(Buddies, other.Buddies))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.users)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Users);
      if(__isset.buddies)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Buddies);
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("ProximityMatchCandidateResult(");
    bool __first = true;
    if (Users != null && __isset.users)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Users: ");
      Users.ToString(sb);
    }
    if (Buddies != null && __isset.buddies)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Buddies: ");
      Buddies.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

