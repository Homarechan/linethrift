/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class BuddyProfile : TBase
{
  private string _buddyId;
  private string _mid;
  private string _searchId;
  private string _displayName;
  private string _statusMessage;
  private long _contactCount;

  public string BuddyId
  {
    get
    {
      return _buddyId;
    }
    set
    {
      __isset.buddyId = true;
      this._buddyId = value;
    }
  }

  public string Mid
  {
    get
    {
      return _mid;
    }
    set
    {
      __isset.mid = true;
      this._mid = value;
    }
  }

  public string SearchId
  {
    get
    {
      return _searchId;
    }
    set
    {
      __isset.searchId = true;
      this._searchId = value;
    }
  }

  public string DisplayName
  {
    get
    {
      return _displayName;
    }
    set
    {
      __isset.displayName = true;
      this._displayName = value;
    }
  }

  public string StatusMessage
  {
    get
    {
      return _statusMessage;
    }
    set
    {
      __isset.statusMessage = true;
      this._statusMessage = value;
    }
  }

  public long ContactCount
  {
    get
    {
      return _contactCount;
    }
    set
    {
      __isset.contactCount = true;
      this._contactCount = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool buddyId;
    public bool mid;
    public bool searchId;
    public bool displayName;
    public bool statusMessage;
    public bool contactCount;
  }

  public BuddyProfile()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              BuddyId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Mid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              SearchId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              DisplayName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              StatusMessage = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.I64)
            {
              ContactCount = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("BuddyProfile");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (BuddyId != null && __isset.buddyId)
      {
        field.Name = "buddyId";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(BuddyId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Mid != null && __isset.mid)
      {
        field.Name = "mid";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Mid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SearchId != null && __isset.searchId)
      {
        field.Name = "searchId";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(SearchId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (DisplayName != null && __isset.displayName)
      {
        field.Name = "displayName";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(DisplayName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (StatusMessage != null && __isset.statusMessage)
      {
        field.Name = "statusMessage";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(StatusMessage, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.contactCount)
      {
        field.Name = "contactCount";
        field.Type = TType.I64;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(ContactCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as BuddyProfile;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.buddyId == other.__isset.buddyId) && ((!__isset.buddyId) || (System.Object.Equals(BuddyId, other.BuddyId))))
      && ((__isset.mid == other.__isset.mid) && ((!__isset.mid) || (System.Object.Equals(Mid, other.Mid))))
      && ((__isset.searchId == other.__isset.searchId) && ((!__isset.searchId) || (System.Object.Equals(SearchId, other.SearchId))))
      && ((__isset.displayName == other.__isset.displayName) && ((!__isset.displayName) || (System.Object.Equals(DisplayName, other.DisplayName))))
      && ((__isset.statusMessage == other.__isset.statusMessage) && ((!__isset.statusMessage) || (System.Object.Equals(StatusMessage, other.StatusMessage))))
      && ((__isset.contactCount == other.__isset.contactCount) && ((!__isset.contactCount) || (System.Object.Equals(ContactCount, other.ContactCount))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.buddyId)
        hashcode = (hashcode * 397) + BuddyId.GetHashCode();
      if(__isset.mid)
        hashcode = (hashcode * 397) + Mid.GetHashCode();
      if(__isset.searchId)
        hashcode = (hashcode * 397) + SearchId.GetHashCode();
      if(__isset.displayName)
        hashcode = (hashcode * 397) + DisplayName.GetHashCode();
      if(__isset.statusMessage)
        hashcode = (hashcode * 397) + StatusMessage.GetHashCode();
      if(__isset.contactCount)
        hashcode = (hashcode * 397) + ContactCount.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("BuddyProfile(");
    bool __first = true;
    if (BuddyId != null && __isset.buddyId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("BuddyId: ");
      BuddyId.ToString(sb);
    }
    if (Mid != null && __isset.mid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Mid: ");
      Mid.ToString(sb);
    }
    if (SearchId != null && __isset.searchId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SearchId: ");
      SearchId.ToString(sb);
    }
    if (DisplayName != null && __isset.displayName)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DisplayName: ");
      DisplayName.ToString(sb);
    }
    if (StatusMessage != null && __isset.statusMessage)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("StatusMessage: ");
      StatusMessage.ToString(sb);
    }
    if (__isset.contactCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ContactCount: ");
      ContactCount.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

