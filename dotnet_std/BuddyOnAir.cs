/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class BuddyOnAir : TBase
{
  private string _mid;
  private long _freshnessLifetime;
  private string _onAirId;
  private bool _onAir;
  private string _text;
  private long _viewerCount;
  private long _targetCount;
  private BuddyOnAirType _onAirType;
  private BuddyOnAirUrls _onAirUrls;

  public string Mid
  {
    get
    {
      return _mid;
    }
    set
    {
      __isset.mid = true;
      this._mid = value;
    }
  }

  public long FreshnessLifetime
  {
    get
    {
      return _freshnessLifetime;
    }
    set
    {
      __isset.freshnessLifetime = true;
      this._freshnessLifetime = value;
    }
  }

  public string OnAirId
  {
    get
    {
      return _onAirId;
    }
    set
    {
      __isset.onAirId = true;
      this._onAirId = value;
    }
  }

  public bool OnAir
  {
    get
    {
      return _onAir;
    }
    set
    {
      __isset.onAir = true;
      this._onAir = value;
    }
  }

  public string Text
  {
    get
    {
      return _text;
    }
    set
    {
      __isset.text = true;
      this._text = value;
    }
  }

  public long ViewerCount
  {
    get
    {
      return _viewerCount;
    }
    set
    {
      __isset.viewerCount = true;
      this._viewerCount = value;
    }
  }

  public long TargetCount
  {
    get
    {
      return _targetCount;
    }
    set
    {
      __isset.targetCount = true;
      this._targetCount = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="BuddyOnAirType"/>
  /// </summary>
  public BuddyOnAirType OnAirType
  {
    get
    {
      return _onAirType;
    }
    set
    {
      __isset.onAirType = true;
      this._onAirType = value;
    }
  }

  public BuddyOnAirUrls OnAirUrls
  {
    get
    {
      return _onAirUrls;
    }
    set
    {
      __isset.onAirUrls = true;
      this._onAirUrls = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool mid;
    public bool freshnessLifetime;
    public bool onAirId;
    public bool onAir;
    public bool text;
    public bool viewerCount;
    public bool targetCount;
    public bool onAirType;
    public bool onAirUrls;
  }

  public BuddyOnAir()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Mid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I64)
            {
              FreshnessLifetime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              OnAirId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.Bool)
            {
              OnAir = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.String)
            {
              Text = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.I64)
            {
              ViewerCount = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 13:
            if (field.Type == TType.I64)
            {
              TargetCount = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 31:
            if (field.Type == TType.I32)
            {
              OnAirType = (BuddyOnAirType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 32:
            if (field.Type == TType.Struct)
            {
              OnAirUrls = new BuddyOnAirUrls();
              await OnAirUrls.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("BuddyOnAir");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Mid != null && __isset.mid)
      {
        field.Name = "mid";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Mid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.freshnessLifetime)
      {
        field.Name = "freshnessLifetime";
        field.Type = TType.I64;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(FreshnessLifetime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (OnAirId != null && __isset.onAirId)
      {
        field.Name = "onAirId";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(OnAirId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.onAir)
      {
        field.Name = "onAir";
        field.Type = TType.Bool;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(OnAir, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Text != null && __isset.text)
      {
        field.Name = "text";
        field.Type = TType.String;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Text, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.viewerCount)
      {
        field.Name = "viewerCount";
        field.Type = TType.I64;
        field.ID = 12;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(ViewerCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.targetCount)
      {
        field.Name = "targetCount";
        field.Type = TType.I64;
        field.ID = 13;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(TargetCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.onAirType)
      {
        field.Name = "onAirType";
        field.Type = TType.I32;
        field.ID = 31;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)OnAirType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (OnAirUrls != null && __isset.onAirUrls)
      {
        field.Name = "onAirUrls";
        field.Type = TType.Struct;
        field.ID = 32;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await OnAirUrls.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as BuddyOnAir;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.mid == other.__isset.mid) && ((!__isset.mid) || (System.Object.Equals(Mid, other.Mid))))
      && ((__isset.freshnessLifetime == other.__isset.freshnessLifetime) && ((!__isset.freshnessLifetime) || (System.Object.Equals(FreshnessLifetime, other.FreshnessLifetime))))
      && ((__isset.onAirId == other.__isset.onAirId) && ((!__isset.onAirId) || (System.Object.Equals(OnAirId, other.OnAirId))))
      && ((__isset.onAir == other.__isset.onAir) && ((!__isset.onAir) || (System.Object.Equals(OnAir, other.OnAir))))
      && ((__isset.text == other.__isset.text) && ((!__isset.text) || (System.Object.Equals(Text, other.Text))))
      && ((__isset.viewerCount == other.__isset.viewerCount) && ((!__isset.viewerCount) || (System.Object.Equals(ViewerCount, other.ViewerCount))))
      && ((__isset.targetCount == other.__isset.targetCount) && ((!__isset.targetCount) || (System.Object.Equals(TargetCount, other.TargetCount))))
      && ((__isset.onAirType == other.__isset.onAirType) && ((!__isset.onAirType) || (System.Object.Equals(OnAirType, other.OnAirType))))
      && ((__isset.onAirUrls == other.__isset.onAirUrls) && ((!__isset.onAirUrls) || (System.Object.Equals(OnAirUrls, other.OnAirUrls))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.mid)
        hashcode = (hashcode * 397) + Mid.GetHashCode();
      if(__isset.freshnessLifetime)
        hashcode = (hashcode * 397) + FreshnessLifetime.GetHashCode();
      if(__isset.onAirId)
        hashcode = (hashcode * 397) + OnAirId.GetHashCode();
      if(__isset.onAir)
        hashcode = (hashcode * 397) + OnAir.GetHashCode();
      if(__isset.text)
        hashcode = (hashcode * 397) + Text.GetHashCode();
      if(__isset.viewerCount)
        hashcode = (hashcode * 397) + ViewerCount.GetHashCode();
      if(__isset.targetCount)
        hashcode = (hashcode * 397) + TargetCount.GetHashCode();
      if(__isset.onAirType)
        hashcode = (hashcode * 397) + OnAirType.GetHashCode();
      if(__isset.onAirUrls)
        hashcode = (hashcode * 397) + OnAirUrls.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("BuddyOnAir(");
    bool __first = true;
    if (Mid != null && __isset.mid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Mid: ");
      sb.Append(Mid);
    }
    if (__isset.freshnessLifetime)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("FreshnessLifetime: ");
      sb.Append(FreshnessLifetime);
    }
    if (OnAirId != null && __isset.onAirId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("OnAirId: ");
      sb.Append(OnAirId);
    }
    if (__isset.onAir)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("OnAir: ");
      sb.Append(OnAir);
    }
    if (Text != null && __isset.text)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Text: ");
      sb.Append(Text);
    }
    if (__isset.viewerCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ViewerCount: ");
      sb.Append(ViewerCount);
    }
    if (__isset.targetCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("TargetCount: ");
      sb.Append(TargetCount);
    }
    if (__isset.onAirType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("OnAirType: ");
      sb.Append(OnAirType);
    }
    if (OnAirUrls != null && __isset.onAirUrls)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("OnAirUrls: ");
      sb.Append(OnAirUrls== null ? "<null>" : OnAirUrls.ToString());
    }
    sb.Append(")");
    return sb.ToString();
  }
}

