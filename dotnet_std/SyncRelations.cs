/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class SyncRelations : TBase
{
  private bool _syncAll;
  private List<SyncParamContact> _syncParamContact;
  private List<SyncParamMid> _syncParamMid;

  public bool SyncAll
  {
    get
    {
      return _syncAll;
    }
    set
    {
      __isset.syncAll = true;
      this._syncAll = value;
    }
  }

  public List<SyncParamContact> SyncParamContact
  {
    get
    {
      return _syncParamContact;
    }
    set
    {
      __isset.syncParamContact = true;
      this._syncParamContact = value;
    }
  }

  public List<SyncParamMid> SyncParamMid
  {
    get
    {
      return _syncParamMid;
    }
    set
    {
      __isset.syncParamMid = true;
      this._syncParamMid = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool syncAll;
    public bool syncParamContact;
    public bool syncParamMid;
  }

  public SyncRelations()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool)
            {
              SyncAll = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list276 = await iprot.ReadListBeginAsync(cancellationToken);
                SyncParamContact = new List<SyncParamContact>(_list276.Count);
                for(int _i277 = 0; _i277 < _list276.Count; ++_i277)
                {
                  SyncParamContact _elem278;
                  _elem278 = new SyncParamContact();
                  await _elem278.ReadAsync(iprot, cancellationToken);
                  SyncParamContact.Add(_elem278);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list279 = await iprot.ReadListBeginAsync(cancellationToken);
                SyncParamMid = new List<SyncParamMid>(_list279.Count);
                for(int _i280 = 0; _i280 < _list279.Count; ++_i280)
                {
                  SyncParamMid _elem281;
                  _elem281 = new SyncParamMid();
                  await _elem281.ReadAsync(iprot, cancellationToken);
                  SyncParamMid.Add(_elem281);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("SyncRelations");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.syncAll)
      {
        field.Name = "syncAll";
        field.Type = TType.Bool;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(SyncAll, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SyncParamContact != null && __isset.syncParamContact)
      {
        field.Name = "syncParamContact";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, SyncParamContact.Count), cancellationToken);
          foreach (SyncParamContact _iter282 in SyncParamContact)
          {
            await _iter282.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SyncParamMid != null && __isset.syncParamMid)
      {
        field.Name = "syncParamMid";
        field.Type = TType.List;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, SyncParamMid.Count), cancellationToken);
          foreach (SyncParamMid _iter283 in SyncParamMid)
          {
            await _iter283.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as SyncRelations;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.syncAll == other.__isset.syncAll) && ((!__isset.syncAll) || (System.Object.Equals(SyncAll, other.SyncAll))))
      && ((__isset.syncParamContact == other.__isset.syncParamContact) && ((!__isset.syncParamContact) || (TCollections.Equals(SyncParamContact, other.SyncParamContact))))
      && ((__isset.syncParamMid == other.__isset.syncParamMid) && ((!__isset.syncParamMid) || (TCollections.Equals(SyncParamMid, other.SyncParamMid))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.syncAll)
        hashcode = (hashcode * 397) + SyncAll.GetHashCode();
      if(__isset.syncParamContact)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(SyncParamContact);
      if(__isset.syncParamMid)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(SyncParamMid);
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("SyncRelations(");
    bool __first = true;
    if (__isset.syncAll)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SyncAll: ");
      sb.Append(SyncAll);
    }
    if (SyncParamContact != null && __isset.syncParamContact)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SyncParamContact: ");
      sb.Append(SyncParamContact);
    }
    if (SyncParamMid != null && __isset.syncParamMid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SyncParamMid: ");
      sb.Append(SyncParamMid);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

