/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class Settings : TBase
{
  private bool _notificationEnable;
  private long _notificationMuteExpiration;
  private bool _notificationNewMessage;
  private bool _notificationGroupInvitation;
  private bool _notificationShowMessage;
  private bool _notificationIncomingCall;
  private string _notificationSoundMessage;
  private string _notificationSoundGroup;
  private bool _notificationDisabledWithSub;
  private bool _privacySyncContacts;
  private bool _privacySearchByPhoneNumber;
  private bool _privacySearchByUserid;
  private bool _privacySearchByEmail;
  private bool _privacyAllowSecondaryDeviceLogin;
  private bool _privacyProfileImagePostToMyhome;
  private bool _privacyReceiveMessagesFromNotFriend;
  private string _contactMyTicket;
  private IdentityProvider _identityProvider;
  private string _identityIdentifier;
  private Dictionary<SnsIdType, string> _snsAccounts;
  private bool _phoneRegistration;
  private EmailConfirmationStatus _emailConfirmationStatus;
  private string _preferenceLocale;
  private Dictionary<CustomMode, string> _customModes;
  private bool _e2eeEnable;
  private bool _hitokotoBackupRequested;
  private bool _privacyProfileMusicPostToMyhome;
  private bool _privacyAllowNearby;
  private long _agreementNearbyTime;
  private long _agreementSquareTime;
  private bool _notificationMention;
  private long _botUseAgreementAcceptedAt;

  public bool NotificationEnable
  {
    get
    {
      return _notificationEnable;
    }
    set
    {
      __isset.notificationEnable = true;
      this._notificationEnable = value;
    }
  }

  public long NotificationMuteExpiration
  {
    get
    {
      return _notificationMuteExpiration;
    }
    set
    {
      __isset.notificationMuteExpiration = true;
      this._notificationMuteExpiration = value;
    }
  }

  public bool NotificationNewMessage
  {
    get
    {
      return _notificationNewMessage;
    }
    set
    {
      __isset.notificationNewMessage = true;
      this._notificationNewMessage = value;
    }
  }

  public bool NotificationGroupInvitation
  {
    get
    {
      return _notificationGroupInvitation;
    }
    set
    {
      __isset.notificationGroupInvitation = true;
      this._notificationGroupInvitation = value;
    }
  }

  public bool NotificationShowMessage
  {
    get
    {
      return _notificationShowMessage;
    }
    set
    {
      __isset.notificationShowMessage = true;
      this._notificationShowMessage = value;
    }
  }

  public bool NotificationIncomingCall
  {
    get
    {
      return _notificationIncomingCall;
    }
    set
    {
      __isset.notificationIncomingCall = true;
      this._notificationIncomingCall = value;
    }
  }

  public string NotificationSoundMessage
  {
    get
    {
      return _notificationSoundMessage;
    }
    set
    {
      __isset.notificationSoundMessage = true;
      this._notificationSoundMessage = value;
    }
  }

  public string NotificationSoundGroup
  {
    get
    {
      return _notificationSoundGroup;
    }
    set
    {
      __isset.notificationSoundGroup = true;
      this._notificationSoundGroup = value;
    }
  }

  public bool NotificationDisabledWithSub
  {
    get
    {
      return _notificationDisabledWithSub;
    }
    set
    {
      __isset.notificationDisabledWithSub = true;
      this._notificationDisabledWithSub = value;
    }
  }

  public bool PrivacySyncContacts
  {
    get
    {
      return _privacySyncContacts;
    }
    set
    {
      __isset.privacySyncContacts = true;
      this._privacySyncContacts = value;
    }
  }

  public bool PrivacySearchByPhoneNumber
  {
    get
    {
      return _privacySearchByPhoneNumber;
    }
    set
    {
      __isset.privacySearchByPhoneNumber = true;
      this._privacySearchByPhoneNumber = value;
    }
  }

  public bool PrivacySearchByUserid
  {
    get
    {
      return _privacySearchByUserid;
    }
    set
    {
      __isset.privacySearchByUserid = true;
      this._privacySearchByUserid = value;
    }
  }

  public bool PrivacySearchByEmail
  {
    get
    {
      return _privacySearchByEmail;
    }
    set
    {
      __isset.privacySearchByEmail = true;
      this._privacySearchByEmail = value;
    }
  }

  public bool PrivacyAllowSecondaryDeviceLogin
  {
    get
    {
      return _privacyAllowSecondaryDeviceLogin;
    }
    set
    {
      __isset.privacyAllowSecondaryDeviceLogin = true;
      this._privacyAllowSecondaryDeviceLogin = value;
    }
  }

  public bool PrivacyProfileImagePostToMyhome
  {
    get
    {
      return _privacyProfileImagePostToMyhome;
    }
    set
    {
      __isset.privacyProfileImagePostToMyhome = true;
      this._privacyProfileImagePostToMyhome = value;
    }
  }

  public bool PrivacyReceiveMessagesFromNotFriend
  {
    get
    {
      return _privacyReceiveMessagesFromNotFriend;
    }
    set
    {
      __isset.privacyReceiveMessagesFromNotFriend = true;
      this._privacyReceiveMessagesFromNotFriend = value;
    }
  }

  public string ContactMyTicket
  {
    get
    {
      return _contactMyTicket;
    }
    set
    {
      __isset.contactMyTicket = true;
      this._contactMyTicket = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="IdentityProvider"/>
  /// </summary>
  public IdentityProvider IdentityProvider
  {
    get
    {
      return _identityProvider;
    }
    set
    {
      __isset.identityProvider = true;
      this._identityProvider = value;
    }
  }

  public string IdentityIdentifier
  {
    get
    {
      return _identityIdentifier;
    }
    set
    {
      __isset.identityIdentifier = true;
      this._identityIdentifier = value;
    }
  }

  public Dictionary<SnsIdType, string> SnsAccounts
  {
    get
    {
      return _snsAccounts;
    }
    set
    {
      __isset.snsAccounts = true;
      this._snsAccounts = value;
    }
  }

  public bool PhoneRegistration
  {
    get
    {
      return _phoneRegistration;
    }
    set
    {
      __isset.phoneRegistration = true;
      this._phoneRegistration = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="EmailConfirmationStatus"/>
  /// </summary>
  public EmailConfirmationStatus EmailConfirmationStatus
  {
    get
    {
      return _emailConfirmationStatus;
    }
    set
    {
      __isset.emailConfirmationStatus = true;
      this._emailConfirmationStatus = value;
    }
  }

  public string PreferenceLocale
  {
    get
    {
      return _preferenceLocale;
    }
    set
    {
      __isset.preferenceLocale = true;
      this._preferenceLocale = value;
    }
  }

  public Dictionary<CustomMode, string> CustomModes
  {
    get
    {
      return _customModes;
    }
    set
    {
      __isset.customModes = true;
      this._customModes = value;
    }
  }

  public bool E2eeEnable
  {
    get
    {
      return _e2eeEnable;
    }
    set
    {
      __isset.e2eeEnable = true;
      this._e2eeEnable = value;
    }
  }

  public bool HitokotoBackupRequested
  {
    get
    {
      return _hitokotoBackupRequested;
    }
    set
    {
      __isset.hitokotoBackupRequested = true;
      this._hitokotoBackupRequested = value;
    }
  }

  public bool PrivacyProfileMusicPostToMyhome
  {
    get
    {
      return _privacyProfileMusicPostToMyhome;
    }
    set
    {
      __isset.privacyProfileMusicPostToMyhome = true;
      this._privacyProfileMusicPostToMyhome = value;
    }
  }

  public bool PrivacyAllowNearby
  {
    get
    {
      return _privacyAllowNearby;
    }
    set
    {
      __isset.privacyAllowNearby = true;
      this._privacyAllowNearby = value;
    }
  }

  public long AgreementNearbyTime
  {
    get
    {
      return _agreementNearbyTime;
    }
    set
    {
      __isset.agreementNearbyTime = true;
      this._agreementNearbyTime = value;
    }
  }

  public long AgreementSquareTime
  {
    get
    {
      return _agreementSquareTime;
    }
    set
    {
      __isset.agreementSquareTime = true;
      this._agreementSquareTime = value;
    }
  }

  public bool NotificationMention
  {
    get
    {
      return _notificationMention;
    }
    set
    {
      __isset.notificationMention = true;
      this._notificationMention = value;
    }
  }

  public long BotUseAgreementAcceptedAt
  {
    get
    {
      return _botUseAgreementAcceptedAt;
    }
    set
    {
      __isset.botUseAgreementAcceptedAt = true;
      this._botUseAgreementAcceptedAt = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool notificationEnable;
    public bool notificationMuteExpiration;
    public bool notificationNewMessage;
    public bool notificationGroupInvitation;
    public bool notificationShowMessage;
    public bool notificationIncomingCall;
    public bool notificationSoundMessage;
    public bool notificationSoundGroup;
    public bool notificationDisabledWithSub;
    public bool privacySyncContacts;
    public bool privacySearchByPhoneNumber;
    public bool privacySearchByUserid;
    public bool privacySearchByEmail;
    public bool privacyAllowSecondaryDeviceLogin;
    public bool privacyProfileImagePostToMyhome;
    public bool privacyReceiveMessagesFromNotFriend;
    public bool contactMyTicket;
    public bool identityProvider;
    public bool identityIdentifier;
    public bool snsAccounts;
    public bool phoneRegistration;
    public bool emailConfirmationStatus;
    public bool preferenceLocale;
    public bool customModes;
    public bool e2eeEnable;
    public bool hitokotoBackupRequested;
    public bool privacyProfileMusicPostToMyhome;
    public bool privacyAllowNearby;
    public bool agreementNearbyTime;
    public bool agreementSquareTime;
    public bool notificationMention;
    public bool botUseAgreementAcceptedAt;
  }

  public Settings()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.Bool)
            {
              NotificationEnable = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.I64)
            {
              NotificationMuteExpiration = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.Bool)
            {
              NotificationNewMessage = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 13:
            if (field.Type == TType.Bool)
            {
              NotificationGroupInvitation = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 14:
            if (field.Type == TType.Bool)
            {
              NotificationShowMessage = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 15:
            if (field.Type == TType.Bool)
            {
              NotificationIncomingCall = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 16:
            if (field.Type == TType.String)
            {
              NotificationSoundMessage = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 17:
            if (field.Type == TType.String)
            {
              NotificationSoundGroup = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 18:
            if (field.Type == TType.Bool)
            {
              NotificationDisabledWithSub = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 20:
            if (field.Type == TType.Bool)
            {
              PrivacySyncContacts = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 21:
            if (field.Type == TType.Bool)
            {
              PrivacySearchByPhoneNumber = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 22:
            if (field.Type == TType.Bool)
            {
              PrivacySearchByUserid = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 23:
            if (field.Type == TType.Bool)
            {
              PrivacySearchByEmail = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 24:
            if (field.Type == TType.Bool)
            {
              PrivacyAllowSecondaryDeviceLogin = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 25:
            if (field.Type == TType.Bool)
            {
              PrivacyProfileImagePostToMyhome = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 26:
            if (field.Type == TType.Bool)
            {
              PrivacyReceiveMessagesFromNotFriend = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 30:
            if (field.Type == TType.String)
            {
              ContactMyTicket = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 40:
            if (field.Type == TType.I32)
            {
              IdentityProvider = (IdentityProvider)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 41:
            if (field.Type == TType.String)
            {
              IdentityIdentifier = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 42:
            if (field.Type == TType.Map)
            {
              {
                TMap _map241 = await iprot.ReadMapBeginAsync(cancellationToken);
                SnsAccounts = new Dictionary<SnsIdType, string>(_map241.Count);
                for(int _i242 = 0; _i242 < _map241.Count; ++_i242)
                {
                  SnsIdType _key243;
                  string _val244;
                  _key243 = (SnsIdType)await iprot.ReadI32Async(cancellationToken);
                  _val244 = await iprot.ReadStringAsync(cancellationToken);
                  SnsAccounts[_key243] = _val244;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 43:
            if (field.Type == TType.Bool)
            {
              PhoneRegistration = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 44:
            if (field.Type == TType.I32)
            {
              EmailConfirmationStatus = (EmailConfirmationStatus)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 50:
            if (field.Type == TType.String)
            {
              PreferenceLocale = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 60:
            if (field.Type == TType.Map)
            {
              {
                TMap _map245 = await iprot.ReadMapBeginAsync(cancellationToken);
                CustomModes = new Dictionary<CustomMode, string>(_map245.Count);
                for(int _i246 = 0; _i246 < _map245.Count; ++_i246)
                {
                  CustomMode _key247;
                  string _val248;
                  _key247 = (CustomMode)await iprot.ReadI32Async(cancellationToken);
                  _val248 = await iprot.ReadStringAsync(cancellationToken);
                  CustomModes[_key247] = _val248;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 61:
            if (field.Type == TType.Bool)
            {
              E2eeEnable = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 62:
            if (field.Type == TType.Bool)
            {
              HitokotoBackupRequested = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 63:
            if (field.Type == TType.Bool)
            {
              PrivacyProfileMusicPostToMyhome = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 65:
            if (field.Type == TType.Bool)
            {
              PrivacyAllowNearby = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 66:
            if (field.Type == TType.I64)
            {
              AgreementNearbyTime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 67:
            if (field.Type == TType.I64)
            {
              AgreementSquareTime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 68:
            if (field.Type == TType.Bool)
            {
              NotificationMention = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 69:
            if (field.Type == TType.I64)
            {
              BotUseAgreementAcceptedAt = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("Settings");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.notificationEnable)
      {
        field.Name = "notificationEnable";
        field.Type = TType.Bool;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(NotificationEnable, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.notificationMuteExpiration)
      {
        field.Name = "notificationMuteExpiration";
        field.Type = TType.I64;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(NotificationMuteExpiration, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.notificationNewMessage)
      {
        field.Name = "notificationNewMessage";
        field.Type = TType.Bool;
        field.ID = 12;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(NotificationNewMessage, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.notificationGroupInvitation)
      {
        field.Name = "notificationGroupInvitation";
        field.Type = TType.Bool;
        field.ID = 13;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(NotificationGroupInvitation, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.notificationShowMessage)
      {
        field.Name = "notificationShowMessage";
        field.Type = TType.Bool;
        field.ID = 14;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(NotificationShowMessage, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.notificationIncomingCall)
      {
        field.Name = "notificationIncomingCall";
        field.Type = TType.Bool;
        field.ID = 15;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(NotificationIncomingCall, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (NotificationSoundMessage != null && __isset.notificationSoundMessage)
      {
        field.Name = "notificationSoundMessage";
        field.Type = TType.String;
        field.ID = 16;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(NotificationSoundMessage, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (NotificationSoundGroup != null && __isset.notificationSoundGroup)
      {
        field.Name = "notificationSoundGroup";
        field.Type = TType.String;
        field.ID = 17;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(NotificationSoundGroup, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.notificationDisabledWithSub)
      {
        field.Name = "notificationDisabledWithSub";
        field.Type = TType.Bool;
        field.ID = 18;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(NotificationDisabledWithSub, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.privacySyncContacts)
      {
        field.Name = "privacySyncContacts";
        field.Type = TType.Bool;
        field.ID = 20;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(PrivacySyncContacts, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.privacySearchByPhoneNumber)
      {
        field.Name = "privacySearchByPhoneNumber";
        field.Type = TType.Bool;
        field.ID = 21;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(PrivacySearchByPhoneNumber, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.privacySearchByUserid)
      {
        field.Name = "privacySearchByUserid";
        field.Type = TType.Bool;
        field.ID = 22;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(PrivacySearchByUserid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.privacySearchByEmail)
      {
        field.Name = "privacySearchByEmail";
        field.Type = TType.Bool;
        field.ID = 23;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(PrivacySearchByEmail, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.privacyAllowSecondaryDeviceLogin)
      {
        field.Name = "privacyAllowSecondaryDeviceLogin";
        field.Type = TType.Bool;
        field.ID = 24;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(PrivacyAllowSecondaryDeviceLogin, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.privacyProfileImagePostToMyhome)
      {
        field.Name = "privacyProfileImagePostToMyhome";
        field.Type = TType.Bool;
        field.ID = 25;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(PrivacyProfileImagePostToMyhome, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.privacyReceiveMessagesFromNotFriend)
      {
        field.Name = "privacyReceiveMessagesFromNotFriend";
        field.Type = TType.Bool;
        field.ID = 26;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(PrivacyReceiveMessagesFromNotFriend, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ContactMyTicket != null && __isset.contactMyTicket)
      {
        field.Name = "contactMyTicket";
        field.Type = TType.String;
        field.ID = 30;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ContactMyTicket, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.identityProvider)
      {
        field.Name = "identityProvider";
        field.Type = TType.I32;
        field.ID = 40;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)IdentityProvider, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (IdentityIdentifier != null && __isset.identityIdentifier)
      {
        field.Name = "identityIdentifier";
        field.Type = TType.String;
        field.ID = 41;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(IdentityIdentifier, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SnsAccounts != null && __isset.snsAccounts)
      {
        field.Name = "snsAccounts";
        field.Type = TType.Map;
        field.ID = 42;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.String, SnsAccounts.Count), cancellationToken);
          foreach (SnsIdType _iter249 in SnsAccounts.Keys)
          {
            await oprot.WriteI32Async((int)_iter249, cancellationToken);
            await oprot.WriteStringAsync(SnsAccounts[_iter249], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.phoneRegistration)
      {
        field.Name = "phoneRegistration";
        field.Type = TType.Bool;
        field.ID = 43;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(PhoneRegistration, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.emailConfirmationStatus)
      {
        field.Name = "emailConfirmationStatus";
        field.Type = TType.I32;
        field.ID = 44;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)EmailConfirmationStatus, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (PreferenceLocale != null && __isset.preferenceLocale)
      {
        field.Name = "preferenceLocale";
        field.Type = TType.String;
        field.ID = 50;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(PreferenceLocale, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (CustomModes != null && __isset.customModes)
      {
        field.Name = "customModes";
        field.Type = TType.Map;
        field.ID = 60;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.String, CustomModes.Count), cancellationToken);
          foreach (CustomMode _iter250 in CustomModes.Keys)
          {
            await oprot.WriteI32Async((int)_iter250, cancellationToken);
            await oprot.WriteStringAsync(CustomModes[_iter250], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.e2eeEnable)
      {
        field.Name = "e2eeEnable";
        field.Type = TType.Bool;
        field.ID = 61;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(E2eeEnable, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.hitokotoBackupRequested)
      {
        field.Name = "hitokotoBackupRequested";
        field.Type = TType.Bool;
        field.ID = 62;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(HitokotoBackupRequested, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.privacyProfileMusicPostToMyhome)
      {
        field.Name = "privacyProfileMusicPostToMyhome";
        field.Type = TType.Bool;
        field.ID = 63;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(PrivacyProfileMusicPostToMyhome, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.privacyAllowNearby)
      {
        field.Name = "privacyAllowNearby";
        field.Type = TType.Bool;
        field.ID = 65;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(PrivacyAllowNearby, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.agreementNearbyTime)
      {
        field.Name = "agreementNearbyTime";
        field.Type = TType.I64;
        field.ID = 66;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(AgreementNearbyTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.agreementSquareTime)
      {
        field.Name = "agreementSquareTime";
        field.Type = TType.I64;
        field.ID = 67;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(AgreementSquareTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.notificationMention)
      {
        field.Name = "notificationMention";
        field.Type = TType.Bool;
        field.ID = 68;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(NotificationMention, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.botUseAgreementAcceptedAt)
      {
        field.Name = "botUseAgreementAcceptedAt";
        field.Type = TType.I64;
        field.ID = 69;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(BotUseAgreementAcceptedAt, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as Settings;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.notificationEnable == other.__isset.notificationEnable) && ((!__isset.notificationEnable) || (System.Object.Equals(NotificationEnable, other.NotificationEnable))))
      && ((__isset.notificationMuteExpiration == other.__isset.notificationMuteExpiration) && ((!__isset.notificationMuteExpiration) || (System.Object.Equals(NotificationMuteExpiration, other.NotificationMuteExpiration))))
      && ((__isset.notificationNewMessage == other.__isset.notificationNewMessage) && ((!__isset.notificationNewMessage) || (System.Object.Equals(NotificationNewMessage, other.NotificationNewMessage))))
      && ((__isset.notificationGroupInvitation == other.__isset.notificationGroupInvitation) && ((!__isset.notificationGroupInvitation) || (System.Object.Equals(NotificationGroupInvitation, other.NotificationGroupInvitation))))
      && ((__isset.notificationShowMessage == other.__isset.notificationShowMessage) && ((!__isset.notificationShowMessage) || (System.Object.Equals(NotificationShowMessage, other.NotificationShowMessage))))
      && ((__isset.notificationIncomingCall == other.__isset.notificationIncomingCall) && ((!__isset.notificationIncomingCall) || (System.Object.Equals(NotificationIncomingCall, other.NotificationIncomingCall))))
      && ((__isset.notificationSoundMessage == other.__isset.notificationSoundMessage) && ((!__isset.notificationSoundMessage) || (System.Object.Equals(NotificationSoundMessage, other.NotificationSoundMessage))))
      && ((__isset.notificationSoundGroup == other.__isset.notificationSoundGroup) && ((!__isset.notificationSoundGroup) || (System.Object.Equals(NotificationSoundGroup, other.NotificationSoundGroup))))
      && ((__isset.notificationDisabledWithSub == other.__isset.notificationDisabledWithSub) && ((!__isset.notificationDisabledWithSub) || (System.Object.Equals(NotificationDisabledWithSub, other.NotificationDisabledWithSub))))
      && ((__isset.privacySyncContacts == other.__isset.privacySyncContacts) && ((!__isset.privacySyncContacts) || (System.Object.Equals(PrivacySyncContacts, other.PrivacySyncContacts))))
      && ((__isset.privacySearchByPhoneNumber == other.__isset.privacySearchByPhoneNumber) && ((!__isset.privacySearchByPhoneNumber) || (System.Object.Equals(PrivacySearchByPhoneNumber, other.PrivacySearchByPhoneNumber))))
      && ((__isset.privacySearchByUserid == other.__isset.privacySearchByUserid) && ((!__isset.privacySearchByUserid) || (System.Object.Equals(PrivacySearchByUserid, other.PrivacySearchByUserid))))
      && ((__isset.privacySearchByEmail == other.__isset.privacySearchByEmail) && ((!__isset.privacySearchByEmail) || (System.Object.Equals(PrivacySearchByEmail, other.PrivacySearchByEmail))))
      && ((__isset.privacyAllowSecondaryDeviceLogin == other.__isset.privacyAllowSecondaryDeviceLogin) && ((!__isset.privacyAllowSecondaryDeviceLogin) || (System.Object.Equals(PrivacyAllowSecondaryDeviceLogin, other.PrivacyAllowSecondaryDeviceLogin))))
      && ((__isset.privacyProfileImagePostToMyhome == other.__isset.privacyProfileImagePostToMyhome) && ((!__isset.privacyProfileImagePostToMyhome) || (System.Object.Equals(PrivacyProfileImagePostToMyhome, other.PrivacyProfileImagePostToMyhome))))
      && ((__isset.privacyReceiveMessagesFromNotFriend == other.__isset.privacyReceiveMessagesFromNotFriend) && ((!__isset.privacyReceiveMessagesFromNotFriend) || (System.Object.Equals(PrivacyReceiveMessagesFromNotFriend, other.PrivacyReceiveMessagesFromNotFriend))))
      && ((__isset.contactMyTicket == other.__isset.contactMyTicket) && ((!__isset.contactMyTicket) || (System.Object.Equals(ContactMyTicket, other.ContactMyTicket))))
      && ((__isset.identityProvider == other.__isset.identityProvider) && ((!__isset.identityProvider) || (System.Object.Equals(IdentityProvider, other.IdentityProvider))))
      && ((__isset.identityIdentifier == other.__isset.identityIdentifier) && ((!__isset.identityIdentifier) || (System.Object.Equals(IdentityIdentifier, other.IdentityIdentifier))))
      && ((__isset.snsAccounts == other.__isset.snsAccounts) && ((!__isset.snsAccounts) || (TCollections.Equals(SnsAccounts, other.SnsAccounts))))
      && ((__isset.phoneRegistration == other.__isset.phoneRegistration) && ((!__isset.phoneRegistration) || (System.Object.Equals(PhoneRegistration, other.PhoneRegistration))))
      && ((__isset.emailConfirmationStatus == other.__isset.emailConfirmationStatus) && ((!__isset.emailConfirmationStatus) || (System.Object.Equals(EmailConfirmationStatus, other.EmailConfirmationStatus))))
      && ((__isset.preferenceLocale == other.__isset.preferenceLocale) && ((!__isset.preferenceLocale) || (System.Object.Equals(PreferenceLocale, other.PreferenceLocale))))
      && ((__isset.customModes == other.__isset.customModes) && ((!__isset.customModes) || (TCollections.Equals(CustomModes, other.CustomModes))))
      && ((__isset.e2eeEnable == other.__isset.e2eeEnable) && ((!__isset.e2eeEnable) || (System.Object.Equals(E2eeEnable, other.E2eeEnable))))
      && ((__isset.hitokotoBackupRequested == other.__isset.hitokotoBackupRequested) && ((!__isset.hitokotoBackupRequested) || (System.Object.Equals(HitokotoBackupRequested, other.HitokotoBackupRequested))))
      && ((__isset.privacyProfileMusicPostToMyhome == other.__isset.privacyProfileMusicPostToMyhome) && ((!__isset.privacyProfileMusicPostToMyhome) || (System.Object.Equals(PrivacyProfileMusicPostToMyhome, other.PrivacyProfileMusicPostToMyhome))))
      && ((__isset.privacyAllowNearby == other.__isset.privacyAllowNearby) && ((!__isset.privacyAllowNearby) || (System.Object.Equals(PrivacyAllowNearby, other.PrivacyAllowNearby))))
      && ((__isset.agreementNearbyTime == other.__isset.agreementNearbyTime) && ((!__isset.agreementNearbyTime) || (System.Object.Equals(AgreementNearbyTime, other.AgreementNearbyTime))))
      && ((__isset.agreementSquareTime == other.__isset.agreementSquareTime) && ((!__isset.agreementSquareTime) || (System.Object.Equals(AgreementSquareTime, other.AgreementSquareTime))))
      && ((__isset.notificationMention == other.__isset.notificationMention) && ((!__isset.notificationMention) || (System.Object.Equals(NotificationMention, other.NotificationMention))))
      && ((__isset.botUseAgreementAcceptedAt == other.__isset.botUseAgreementAcceptedAt) && ((!__isset.botUseAgreementAcceptedAt) || (System.Object.Equals(BotUseAgreementAcceptedAt, other.BotUseAgreementAcceptedAt))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.notificationEnable)
        hashcode = (hashcode * 397) + NotificationEnable.GetHashCode();
      if(__isset.notificationMuteExpiration)
        hashcode = (hashcode * 397) + NotificationMuteExpiration.GetHashCode();
      if(__isset.notificationNewMessage)
        hashcode = (hashcode * 397) + NotificationNewMessage.GetHashCode();
      if(__isset.notificationGroupInvitation)
        hashcode = (hashcode * 397) + NotificationGroupInvitation.GetHashCode();
      if(__isset.notificationShowMessage)
        hashcode = (hashcode * 397) + NotificationShowMessage.GetHashCode();
      if(__isset.notificationIncomingCall)
        hashcode = (hashcode * 397) + NotificationIncomingCall.GetHashCode();
      if(__isset.notificationSoundMessage)
        hashcode = (hashcode * 397) + NotificationSoundMessage.GetHashCode();
      if(__isset.notificationSoundGroup)
        hashcode = (hashcode * 397) + NotificationSoundGroup.GetHashCode();
      if(__isset.notificationDisabledWithSub)
        hashcode = (hashcode * 397) + NotificationDisabledWithSub.GetHashCode();
      if(__isset.privacySyncContacts)
        hashcode = (hashcode * 397) + PrivacySyncContacts.GetHashCode();
      if(__isset.privacySearchByPhoneNumber)
        hashcode = (hashcode * 397) + PrivacySearchByPhoneNumber.GetHashCode();
      if(__isset.privacySearchByUserid)
        hashcode = (hashcode * 397) + PrivacySearchByUserid.GetHashCode();
      if(__isset.privacySearchByEmail)
        hashcode = (hashcode * 397) + PrivacySearchByEmail.GetHashCode();
      if(__isset.privacyAllowSecondaryDeviceLogin)
        hashcode = (hashcode * 397) + PrivacyAllowSecondaryDeviceLogin.GetHashCode();
      if(__isset.privacyProfileImagePostToMyhome)
        hashcode = (hashcode * 397) + PrivacyProfileImagePostToMyhome.GetHashCode();
      if(__isset.privacyReceiveMessagesFromNotFriend)
        hashcode = (hashcode * 397) + PrivacyReceiveMessagesFromNotFriend.GetHashCode();
      if(__isset.contactMyTicket)
        hashcode = (hashcode * 397) + ContactMyTicket.GetHashCode();
      if(__isset.identityProvider)
        hashcode = (hashcode * 397) + IdentityProvider.GetHashCode();
      if(__isset.identityIdentifier)
        hashcode = (hashcode * 397) + IdentityIdentifier.GetHashCode();
      if(__isset.snsAccounts)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(SnsAccounts);
      if(__isset.phoneRegistration)
        hashcode = (hashcode * 397) + PhoneRegistration.GetHashCode();
      if(__isset.emailConfirmationStatus)
        hashcode = (hashcode * 397) + EmailConfirmationStatus.GetHashCode();
      if(__isset.preferenceLocale)
        hashcode = (hashcode * 397) + PreferenceLocale.GetHashCode();
      if(__isset.customModes)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(CustomModes);
      if(__isset.e2eeEnable)
        hashcode = (hashcode * 397) + E2eeEnable.GetHashCode();
      if(__isset.hitokotoBackupRequested)
        hashcode = (hashcode * 397) + HitokotoBackupRequested.GetHashCode();
      if(__isset.privacyProfileMusicPostToMyhome)
        hashcode = (hashcode * 397) + PrivacyProfileMusicPostToMyhome.GetHashCode();
      if(__isset.privacyAllowNearby)
        hashcode = (hashcode * 397) + PrivacyAllowNearby.GetHashCode();
      if(__isset.agreementNearbyTime)
        hashcode = (hashcode * 397) + AgreementNearbyTime.GetHashCode();
      if(__isset.agreementSquareTime)
        hashcode = (hashcode * 397) + AgreementSquareTime.GetHashCode();
      if(__isset.notificationMention)
        hashcode = (hashcode * 397) + NotificationMention.GetHashCode();
      if(__isset.botUseAgreementAcceptedAt)
        hashcode = (hashcode * 397) + BotUseAgreementAcceptedAt.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("Settings(");
    bool __first = true;
    if (__isset.notificationEnable)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("NotificationEnable: ");
      sb.Append(NotificationEnable);
    }
    if (__isset.notificationMuteExpiration)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("NotificationMuteExpiration: ");
      sb.Append(NotificationMuteExpiration);
    }
    if (__isset.notificationNewMessage)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("NotificationNewMessage: ");
      sb.Append(NotificationNewMessage);
    }
    if (__isset.notificationGroupInvitation)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("NotificationGroupInvitation: ");
      sb.Append(NotificationGroupInvitation);
    }
    if (__isset.notificationShowMessage)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("NotificationShowMessage: ");
      sb.Append(NotificationShowMessage);
    }
    if (__isset.notificationIncomingCall)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("NotificationIncomingCall: ");
      sb.Append(NotificationIncomingCall);
    }
    if (NotificationSoundMessage != null && __isset.notificationSoundMessage)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("NotificationSoundMessage: ");
      sb.Append(NotificationSoundMessage);
    }
    if (NotificationSoundGroup != null && __isset.notificationSoundGroup)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("NotificationSoundGroup: ");
      sb.Append(NotificationSoundGroup);
    }
    if (__isset.notificationDisabledWithSub)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("NotificationDisabledWithSub: ");
      sb.Append(NotificationDisabledWithSub);
    }
    if (__isset.privacySyncContacts)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PrivacySyncContacts: ");
      sb.Append(PrivacySyncContacts);
    }
    if (__isset.privacySearchByPhoneNumber)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PrivacySearchByPhoneNumber: ");
      sb.Append(PrivacySearchByPhoneNumber);
    }
    if (__isset.privacySearchByUserid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PrivacySearchByUserid: ");
      sb.Append(PrivacySearchByUserid);
    }
    if (__isset.privacySearchByEmail)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PrivacySearchByEmail: ");
      sb.Append(PrivacySearchByEmail);
    }
    if (__isset.privacyAllowSecondaryDeviceLogin)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PrivacyAllowSecondaryDeviceLogin: ");
      sb.Append(PrivacyAllowSecondaryDeviceLogin);
    }
    if (__isset.privacyProfileImagePostToMyhome)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PrivacyProfileImagePostToMyhome: ");
      sb.Append(PrivacyProfileImagePostToMyhome);
    }
    if (__isset.privacyReceiveMessagesFromNotFriend)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PrivacyReceiveMessagesFromNotFriend: ");
      sb.Append(PrivacyReceiveMessagesFromNotFriend);
    }
    if (ContactMyTicket != null && __isset.contactMyTicket)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ContactMyTicket: ");
      sb.Append(ContactMyTicket);
    }
    if (__isset.identityProvider)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("IdentityProvider: ");
      sb.Append(IdentityProvider);
    }
    if (IdentityIdentifier != null && __isset.identityIdentifier)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("IdentityIdentifier: ");
      sb.Append(IdentityIdentifier);
    }
    if (SnsAccounts != null && __isset.snsAccounts)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SnsAccounts: ");
      sb.Append(SnsAccounts);
    }
    if (__isset.phoneRegistration)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PhoneRegistration: ");
      sb.Append(PhoneRegistration);
    }
    if (__isset.emailConfirmationStatus)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("EmailConfirmationStatus: ");
      sb.Append(EmailConfirmationStatus);
    }
    if (PreferenceLocale != null && __isset.preferenceLocale)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PreferenceLocale: ");
      sb.Append(PreferenceLocale);
    }
    if (CustomModes != null && __isset.customModes)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CustomModes: ");
      sb.Append(CustomModes);
    }
    if (__isset.e2eeEnable)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("E2eeEnable: ");
      sb.Append(E2eeEnable);
    }
    if (__isset.hitokotoBackupRequested)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("HitokotoBackupRequested: ");
      sb.Append(HitokotoBackupRequested);
    }
    if (__isset.privacyProfileMusicPostToMyhome)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PrivacyProfileMusicPostToMyhome: ");
      sb.Append(PrivacyProfileMusicPostToMyhome);
    }
    if (__isset.privacyAllowNearby)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PrivacyAllowNearby: ");
      sb.Append(PrivacyAllowNearby);
    }
    if (__isset.agreementNearbyTime)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("AgreementNearbyTime: ");
      sb.Append(AgreementNearbyTime);
    }
    if (__isset.agreementSquareTime)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("AgreementSquareTime: ");
      sb.Append(AgreementSquareTime);
    }
    if (__isset.notificationMention)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("NotificationMention: ");
      sb.Append(NotificationMention);
    }
    if (__isset.botUseAgreementAcceptedAt)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("BotUseAgreementAcceptedAt: ");
      sb.Append(BotUseAgreementAcceptedAt);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

