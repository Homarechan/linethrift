/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class EmailConfirmation : TBase
{
  private bool _usePasswordSet;
  private string _email;
  private string _password;
  private bool _ignoreDuplication;

  public bool UsePasswordSet
  {
    get
    {
      return _usePasswordSet;
    }
    set
    {
      __isset.usePasswordSet = true;
      this._usePasswordSet = value;
    }
  }

  public string Email
  {
    get
    {
      return _email;
    }
    set
    {
      __isset.email = true;
      this._email = value;
    }
  }

  public string Password
  {
    get
    {
      return _password;
    }
    set
    {
      __isset.password = true;
      this._password = value;
    }
  }

  public bool IgnoreDuplication
  {
    get
    {
      return _ignoreDuplication;
    }
    set
    {
      __isset.ignoreDuplication = true;
      this._ignoreDuplication = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool usePasswordSet;
    public bool email;
    public bool password;
    public bool ignoreDuplication;
  }

  public EmailConfirmation()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool)
            {
              UsePasswordSet = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Email = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Password = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Bool)
            {
              IgnoreDuplication = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("EmailConfirmation");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.usePasswordSet)
      {
        field.Name = "usePasswordSet";
        field.Type = TType.Bool;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(UsePasswordSet, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Email != null && __isset.email)
      {
        field.Name = "email";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Email, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Password != null && __isset.password)
      {
        field.Name = "password";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Password, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.ignoreDuplication)
      {
        field.Name = "ignoreDuplication";
        field.Type = TType.Bool;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(IgnoreDuplication, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as EmailConfirmation;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.usePasswordSet == other.__isset.usePasswordSet) && ((!__isset.usePasswordSet) || (System.Object.Equals(UsePasswordSet, other.UsePasswordSet))))
      && ((__isset.email == other.__isset.email) && ((!__isset.email) || (System.Object.Equals(Email, other.Email))))
      && ((__isset.password == other.__isset.password) && ((!__isset.password) || (System.Object.Equals(Password, other.Password))))
      && ((__isset.ignoreDuplication == other.__isset.ignoreDuplication) && ((!__isset.ignoreDuplication) || (System.Object.Equals(IgnoreDuplication, other.IgnoreDuplication))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.usePasswordSet)
        hashcode = (hashcode * 397) + UsePasswordSet.GetHashCode();
      if(__isset.email)
        hashcode = (hashcode * 397) + Email.GetHashCode();
      if(__isset.password)
        hashcode = (hashcode * 397) + Password.GetHashCode();
      if(__isset.ignoreDuplication)
        hashcode = (hashcode * 397) + IgnoreDuplication.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("EmailConfirmation(");
    bool __first = true;
    if (__isset.usePasswordSet)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("UsePasswordSet: ");
      sb.Append(UsePasswordSet);
    }
    if (Email != null && __isset.email)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Email: ");
      sb.Append(Email);
    }
    if (Password != null && __isset.password)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Password: ");
      sb.Append(Password);
    }
    if (__isset.ignoreDuplication)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("IgnoreDuplication: ");
      sb.Append(IgnoreDuplication);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

