/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class CoinHistory : TBase
{
  private long _payDate;
  private int _coinBalance;
  private int _coin;
  private string _price;
  private string _title;
  private bool _refund;
  private string _paySeq;
  private string _currency;
  private string _currencySign;
  private string _displayPrice;
  private CoinPayLoad _payload;
  private string _channelId;

  public long PayDate
  {
    get
    {
      return _payDate;
    }
    set
    {
      __isset.payDate = true;
      this._payDate = value;
    }
  }

  public int CoinBalance
  {
    get
    {
      return _coinBalance;
    }
    set
    {
      __isset.coinBalance = true;
      this._coinBalance = value;
    }
  }

  public int Coin
  {
    get
    {
      return _coin;
    }
    set
    {
      __isset.coin = true;
      this._coin = value;
    }
  }

  public string Price
  {
    get
    {
      return _price;
    }
    set
    {
      __isset.price = true;
      this._price = value;
    }
  }

  public string Title
  {
    get
    {
      return _title;
    }
    set
    {
      __isset.title = true;
      this._title = value;
    }
  }

  public bool Refund
  {
    get
    {
      return _refund;
    }
    set
    {
      __isset.refund = true;
      this._refund = value;
    }
  }

  public string PaySeq
  {
    get
    {
      return _paySeq;
    }
    set
    {
      __isset.paySeq = true;
      this._paySeq = value;
    }
  }

  public string Currency
  {
    get
    {
      return _currency;
    }
    set
    {
      __isset.currency = true;
      this._currency = value;
    }
  }

  public string CurrencySign
  {
    get
    {
      return _currencySign;
    }
    set
    {
      __isset.currencySign = true;
      this._currencySign = value;
    }
  }

  public string DisplayPrice
  {
    get
    {
      return _displayPrice;
    }
    set
    {
      __isset.displayPrice = true;
      this._displayPrice = value;
    }
  }

  public CoinPayLoad Payload
  {
    get
    {
      return _payload;
    }
    set
    {
      __isset.payload = true;
      this._payload = value;
    }
  }

  public string ChannelId
  {
    get
    {
      return _channelId;
    }
    set
    {
      __isset.channelId = true;
      this._channelId = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool payDate;
    public bool coinBalance;
    public bool coin;
    public bool price;
    public bool title;
    public bool refund;
    public bool paySeq;
    public bool currency;
    public bool currencySign;
    public bool displayPrice;
    public bool payload;
    public bool channelId;
  }

  public CoinHistory()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              PayDate = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              CoinBalance = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              Coin = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Price = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Title = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.Bool)
            {
              Refund = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.String)
            {
              PaySeq = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.String)
            {
              Currency = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.String)
            {
              CurrencySign = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.String)
            {
              DisplayPrice = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.Struct)
            {
              Payload = new CoinPayLoad();
              await Payload.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.String)
            {
              ChannelId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("CoinHistory");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.payDate)
      {
        field.Name = "payDate";
        field.Type = TType.I64;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(PayDate, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.coinBalance)
      {
        field.Name = "coinBalance";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(CoinBalance, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.coin)
      {
        field.Name = "coin";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Coin, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Price != null && __isset.price)
      {
        field.Name = "price";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Price, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Title != null && __isset.title)
      {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Title, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.refund)
      {
        field.Name = "refund";
        field.Type = TType.Bool;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(Refund, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (PaySeq != null && __isset.paySeq)
      {
        field.Name = "paySeq";
        field.Type = TType.String;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(PaySeq, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Currency != null && __isset.currency)
      {
        field.Name = "currency";
        field.Type = TType.String;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Currency, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (CurrencySign != null && __isset.currencySign)
      {
        field.Name = "currencySign";
        field.Type = TType.String;
        field.ID = 9;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(CurrencySign, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (DisplayPrice != null && __isset.displayPrice)
      {
        field.Name = "displayPrice";
        field.Type = TType.String;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(DisplayPrice, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Payload != null && __isset.payload)
      {
        field.Name = "payload";
        field.Type = TType.Struct;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Payload.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ChannelId != null && __isset.channelId)
      {
        field.Name = "channelId";
        field.Type = TType.String;
        field.ID = 12;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ChannelId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as CoinHistory;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.payDate == other.__isset.payDate) && ((!__isset.payDate) || (System.Object.Equals(PayDate, other.PayDate))))
      && ((__isset.coinBalance == other.__isset.coinBalance) && ((!__isset.coinBalance) || (System.Object.Equals(CoinBalance, other.CoinBalance))))
      && ((__isset.coin == other.__isset.coin) && ((!__isset.coin) || (System.Object.Equals(Coin, other.Coin))))
      && ((__isset.price == other.__isset.price) && ((!__isset.price) || (System.Object.Equals(Price, other.Price))))
      && ((__isset.title == other.__isset.title) && ((!__isset.title) || (System.Object.Equals(Title, other.Title))))
      && ((__isset.refund == other.__isset.refund) && ((!__isset.refund) || (System.Object.Equals(Refund, other.Refund))))
      && ((__isset.paySeq == other.__isset.paySeq) && ((!__isset.paySeq) || (System.Object.Equals(PaySeq, other.PaySeq))))
      && ((__isset.currency == other.__isset.currency) && ((!__isset.currency) || (System.Object.Equals(Currency, other.Currency))))
      && ((__isset.currencySign == other.__isset.currencySign) && ((!__isset.currencySign) || (System.Object.Equals(CurrencySign, other.CurrencySign))))
      && ((__isset.displayPrice == other.__isset.displayPrice) && ((!__isset.displayPrice) || (System.Object.Equals(DisplayPrice, other.DisplayPrice))))
      && ((__isset.payload == other.__isset.payload) && ((!__isset.payload) || (System.Object.Equals(Payload, other.Payload))))
      && ((__isset.channelId == other.__isset.channelId) && ((!__isset.channelId) || (System.Object.Equals(ChannelId, other.ChannelId))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.payDate)
        hashcode = (hashcode * 397) + PayDate.GetHashCode();
      if(__isset.coinBalance)
        hashcode = (hashcode * 397) + CoinBalance.GetHashCode();
      if(__isset.coin)
        hashcode = (hashcode * 397) + Coin.GetHashCode();
      if(__isset.price)
        hashcode = (hashcode * 397) + Price.GetHashCode();
      if(__isset.title)
        hashcode = (hashcode * 397) + Title.GetHashCode();
      if(__isset.refund)
        hashcode = (hashcode * 397) + Refund.GetHashCode();
      if(__isset.paySeq)
        hashcode = (hashcode * 397) + PaySeq.GetHashCode();
      if(__isset.currency)
        hashcode = (hashcode * 397) + Currency.GetHashCode();
      if(__isset.currencySign)
        hashcode = (hashcode * 397) + CurrencySign.GetHashCode();
      if(__isset.displayPrice)
        hashcode = (hashcode * 397) + DisplayPrice.GetHashCode();
      if(__isset.payload)
        hashcode = (hashcode * 397) + Payload.GetHashCode();
      if(__isset.channelId)
        hashcode = (hashcode * 397) + ChannelId.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("CoinHistory(");
    bool __first = true;
    if (__isset.payDate)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PayDate: ");
      sb.Append(PayDate);
    }
    if (__isset.coinBalance)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CoinBalance: ");
      sb.Append(CoinBalance);
    }
    if (__isset.coin)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Coin: ");
      sb.Append(Coin);
    }
    if (Price != null && __isset.price)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Price: ");
      sb.Append(Price);
    }
    if (Title != null && __isset.title)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Title: ");
      sb.Append(Title);
    }
    if (__isset.refund)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Refund: ");
      sb.Append(Refund);
    }
    if (PaySeq != null && __isset.paySeq)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PaySeq: ");
      sb.Append(PaySeq);
    }
    if (Currency != null && __isset.currency)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Currency: ");
      sb.Append(Currency);
    }
    if (CurrencySign != null && __isset.currencySign)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CurrencySign: ");
      sb.Append(CurrencySign);
    }
    if (DisplayPrice != null && __isset.displayPrice)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DisplayPrice: ");
      sb.Append(DisplayPrice);
    }
    if (Payload != null && __isset.payload)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Payload: ");
      sb.Append(Payload== null ? "<null>" : Payload.ToString());
    }
    if (ChannelId != null && __isset.channelId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ChannelId: ");
      sb.Append(ChannelId);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

