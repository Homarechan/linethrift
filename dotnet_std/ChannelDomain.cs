/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class ChannelDomain : TBase
{
  private string _host;
  private bool _removed;

  public string Host
  {
    get
    {
      return _host;
    }
    set
    {
      __isset.host = true;
      this._host = value;
    }
  }

  public bool Removed
  {
    get
    {
      return _removed;
    }
    set
    {
      __isset.removed = true;
      this._removed = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool host;
    public bool removed;
  }

  public ChannelDomain()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Host = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Bool)
            {
              Removed = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("ChannelDomain");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Host != null && __isset.host)
      {
        field.Name = "host";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Host, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.removed)
      {
        field.Name = "removed";
        field.Type = TType.Bool;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(Removed, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as ChannelDomain;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.host == other.__isset.host) && ((!__isset.host) || (System.Object.Equals(Host, other.Host))))
      && ((__isset.removed == other.__isset.removed) && ((!__isset.removed) || (System.Object.Equals(Removed, other.Removed))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.host)
        hashcode = (hashcode * 397) + Host.GetHashCode();
      if(__isset.removed)
        hashcode = (hashcode * 397) + Removed.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("ChannelDomain(");
    bool __first = true;
    if (Host != null && __isset.host)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Host: ");
      Host.ToString(sb);
    }
    if (__isset.removed)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Removed: ");
      Removed.ToString(sb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

