/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class SpotItem : TBase
{
  private string _name;
  private string _phone;
  private SpotCategory _category;
  private string _mid;
  private string _countryAreaCode;
  private bool _freePhoneCallable;

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string Phone
  {
    get
    {
      return _phone;
    }
    set
    {
      __isset.phone = true;
      this._phone = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="SpotCategory"/>
  /// </summary>
  public SpotCategory Category
  {
    get
    {
      return _category;
    }
    set
    {
      __isset.category = true;
      this._category = value;
    }
  }

  public string Mid
  {
    get
    {
      return _mid;
    }
    set
    {
      __isset.mid = true;
      this._mid = value;
    }
  }

  public string CountryAreaCode
  {
    get
    {
      return _countryAreaCode;
    }
    set
    {
      __isset.countryAreaCode = true;
      this._countryAreaCode = value;
    }
  }

  public bool FreePhoneCallable
  {
    get
    {
      return _freePhoneCallable;
    }
    set
    {
      __isset.freePhoneCallable = true;
      this._freePhoneCallable = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool name;
    public bool phone;
    public bool category;
    public bool mid;
    public bool countryAreaCode;
    public bool freePhoneCallable;
  }

  public SpotItem()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 2:
            if (field.Type == TType.String)
            {
              Name = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Phone = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I32)
            {
              Category = (SpotCategory)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Mid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.String)
            {
              CountryAreaCode = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.Bool)
            {
              FreePhoneCallable = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("SpotItem");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Name != null && __isset.name)
      {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Name, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Phone != null && __isset.phone)
      {
        field.Name = "phone";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Phone, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.category)
      {
        field.Name = "category";
        field.Type = TType.I32;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Category, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Mid != null && __isset.mid)
      {
        field.Name = "mid";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Mid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (CountryAreaCode != null && __isset.countryAreaCode)
      {
        field.Name = "countryAreaCode";
        field.Type = TType.String;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(CountryAreaCode, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.freePhoneCallable)
      {
        field.Name = "freePhoneCallable";
        field.Type = TType.Bool;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(FreePhoneCallable, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as SpotItem;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.name == other.__isset.name) && ((!__isset.name) || (System.Object.Equals(Name, other.Name))))
      && ((__isset.phone == other.__isset.phone) && ((!__isset.phone) || (System.Object.Equals(Phone, other.Phone))))
      && ((__isset.category == other.__isset.category) && ((!__isset.category) || (System.Object.Equals(Category, other.Category))))
      && ((__isset.mid == other.__isset.mid) && ((!__isset.mid) || (System.Object.Equals(Mid, other.Mid))))
      && ((__isset.countryAreaCode == other.__isset.countryAreaCode) && ((!__isset.countryAreaCode) || (System.Object.Equals(CountryAreaCode, other.CountryAreaCode))))
      && ((__isset.freePhoneCallable == other.__isset.freePhoneCallable) && ((!__isset.freePhoneCallable) || (System.Object.Equals(FreePhoneCallable, other.FreePhoneCallable))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.name)
        hashcode = (hashcode * 397) + Name.GetHashCode();
      if(__isset.phone)
        hashcode = (hashcode * 397) + Phone.GetHashCode();
      if(__isset.category)
        hashcode = (hashcode * 397) + Category.GetHashCode();
      if(__isset.mid)
        hashcode = (hashcode * 397) + Mid.GetHashCode();
      if(__isset.countryAreaCode)
        hashcode = (hashcode * 397) + CountryAreaCode.GetHashCode();
      if(__isset.freePhoneCallable)
        hashcode = (hashcode * 397) + FreePhoneCallable.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("SpotItem(");
    bool __first = true;
    if (Name != null && __isset.name)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Name: ");
      sb.Append(Name);
    }
    if (Phone != null && __isset.phone)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Phone: ");
      sb.Append(Phone);
    }
    if (__isset.category)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Category: ");
      sb.Append(Category);
    }
    if (Mid != null && __isset.mid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Mid: ");
      sb.Append(Mid);
    }
    if (CountryAreaCode != null && __isset.countryAreaCode)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CountryAreaCode: ");
      sb.Append(CountryAreaCode);
    }
    if (__isset.freePhoneCallable)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("FreePhoneCallable: ");
      sb.Append(FreePhoneCallable);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

