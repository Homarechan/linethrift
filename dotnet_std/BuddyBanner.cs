/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class BuddyBanner : TBase
{
  private BuddyBannerLinkType _buddyBannerLinkType;
  private string _buddyBannerLink;
  private string _buddyBannerImageUrl;

  /// <summary>
  /// 
  /// <seealso cref="BuddyBannerLinkType"/>
  /// </summary>
  public BuddyBannerLinkType BuddyBannerLinkType
  {
    get
    {
      return _buddyBannerLinkType;
    }
    set
    {
      __isset.buddyBannerLinkType = true;
      this._buddyBannerLinkType = value;
    }
  }

  public string BuddyBannerLink
  {
    get
    {
      return _buddyBannerLink;
    }
    set
    {
      __isset.buddyBannerLink = true;
      this._buddyBannerLink = value;
    }
  }

  public string BuddyBannerImageUrl
  {
    get
    {
      return _buddyBannerImageUrl;
    }
    set
    {
      __isset.buddyBannerImageUrl = true;
      this._buddyBannerImageUrl = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool buddyBannerLinkType;
    public bool buddyBannerLink;
    public bool buddyBannerImageUrl;
  }

  public BuddyBanner()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              BuddyBannerLinkType = (BuddyBannerLinkType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              BuddyBannerLink = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              BuddyBannerImageUrl = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("BuddyBanner");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.buddyBannerLinkType)
      {
        field.Name = "buddyBannerLinkType";
        field.Type = TType.I32;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)BuddyBannerLinkType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (BuddyBannerLink != null && __isset.buddyBannerLink)
      {
        field.Name = "buddyBannerLink";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(BuddyBannerLink, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (BuddyBannerImageUrl != null && __isset.buddyBannerImageUrl)
      {
        field.Name = "buddyBannerImageUrl";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(BuddyBannerImageUrl, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as BuddyBanner;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.buddyBannerLinkType == other.__isset.buddyBannerLinkType) && ((!__isset.buddyBannerLinkType) || (System.Object.Equals(BuddyBannerLinkType, other.BuddyBannerLinkType))))
      && ((__isset.buddyBannerLink == other.__isset.buddyBannerLink) && ((!__isset.buddyBannerLink) || (System.Object.Equals(BuddyBannerLink, other.BuddyBannerLink))))
      && ((__isset.buddyBannerImageUrl == other.__isset.buddyBannerImageUrl) && ((!__isset.buddyBannerImageUrl) || (System.Object.Equals(BuddyBannerImageUrl, other.BuddyBannerImageUrl))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.buddyBannerLinkType)
        hashcode = (hashcode * 397) + BuddyBannerLinkType.GetHashCode();
      if(__isset.buddyBannerLink)
        hashcode = (hashcode * 397) + BuddyBannerLink.GetHashCode();
      if(__isset.buddyBannerImageUrl)
        hashcode = (hashcode * 397) + BuddyBannerImageUrl.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("BuddyBanner(");
    bool __first = true;
    if (__isset.buddyBannerLinkType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("BuddyBannerLinkType: ");
      sb.Append(BuddyBannerLinkType);
    }
    if (BuddyBannerLink != null && __isset.buddyBannerLink)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("BuddyBannerLink: ");
      sb.Append(BuddyBannerLink);
    }
    if (BuddyBannerImageUrl != null && __isset.buddyBannerImageUrl)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("BuddyBannerImageUrl: ");
      sb.Append(BuddyBannerImageUrl);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

