/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class RSAKey : TBase
{
  private string _keynm;
  private string _nvalue;
  private string _evalue;
  private string _sessionKey;

  public string Keynm
  {
    get
    {
      return _keynm;
    }
    set
    {
      __isset.keynm = true;
      this._keynm = value;
    }
  }

  public string Nvalue
  {
    get
    {
      return _nvalue;
    }
    set
    {
      __isset.nvalue = true;
      this._nvalue = value;
    }
  }

  public string Evalue
  {
    get
    {
      return _evalue;
    }
    set
    {
      __isset.evalue = true;
      this._evalue = value;
    }
  }

  public string SessionKey
  {
    get
    {
      return _sessionKey;
    }
    set
    {
      __isset.sessionKey = true;
      this._sessionKey = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool keynm;
    public bool nvalue;
    public bool evalue;
    public bool sessionKey;
  }

  public RSAKey()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Keynm = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Nvalue = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Evalue = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              SessionKey = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("RSAKey");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Keynm != null && __isset.keynm)
      {
        field.Name = "keynm";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Keynm, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Nvalue != null && __isset.nvalue)
      {
        field.Name = "nvalue";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Nvalue, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Evalue != null && __isset.evalue)
      {
        field.Name = "evalue";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Evalue, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SessionKey != null && __isset.sessionKey)
      {
        field.Name = "sessionKey";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(SessionKey, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as RSAKey;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.keynm == other.__isset.keynm) && ((!__isset.keynm) || (System.Object.Equals(Keynm, other.Keynm))))
      && ((__isset.nvalue == other.__isset.nvalue) && ((!__isset.nvalue) || (System.Object.Equals(Nvalue, other.Nvalue))))
      && ((__isset.evalue == other.__isset.evalue) && ((!__isset.evalue) || (System.Object.Equals(Evalue, other.Evalue))))
      && ((__isset.sessionKey == other.__isset.sessionKey) && ((!__isset.sessionKey) || (System.Object.Equals(SessionKey, other.SessionKey))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.keynm)
        hashcode = (hashcode * 397) + Keynm.GetHashCode();
      if(__isset.nvalue)
        hashcode = (hashcode * 397) + Nvalue.GetHashCode();
      if(__isset.evalue)
        hashcode = (hashcode * 397) + Evalue.GetHashCode();
      if(__isset.sessionKey)
        hashcode = (hashcode * 397) + SessionKey.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("RSAKey(");
    bool __first = true;
    if (Keynm != null && __isset.keynm)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Keynm: ");
      sb.Append(Keynm);
    }
    if (Nvalue != null && __isset.nvalue)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Nvalue: ");
      sb.Append(Nvalue);
    }
    if (Evalue != null && __isset.evalue)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Evalue: ");
      sb.Append(Evalue);
    }
    if (SessionKey != null && __isset.sessionKey)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SessionKey: ");
      sb.Append(SessionKey);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

