/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class ProductList : TBase
{
  private bool _hasNext;
  private long _bannerSequence;
  private ProductBannerLinkType _bannerTargetType;
  private string _bannerTargetPath;
  private List<Product> _productList;
  private string _bannerLang;

  public bool HasNext
  {
    get
    {
      return _hasNext;
    }
    set
    {
      __isset.hasNext = true;
      this._hasNext = value;
    }
  }

  public long BannerSequence
  {
    get
    {
      return _bannerSequence;
    }
    set
    {
      __isset.bannerSequence = true;
      this._bannerSequence = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="ProductBannerLinkType"/>
  /// </summary>
  public ProductBannerLinkType BannerTargetType
  {
    get
    {
      return _bannerTargetType;
    }
    set
    {
      __isset.bannerTargetType = true;
      this._bannerTargetType = value;
    }
  }

  public string BannerTargetPath
  {
    get
    {
      return _bannerTargetPath;
    }
    set
    {
      __isset.bannerTargetPath = true;
      this._bannerTargetPath = value;
    }
  }

  public List<Product> ProductList_
  {
    get
    {
      return _productList;
    }
    set
    {
      __isset.productList = true;
      this._productList = value;
    }
  }

  public string BannerLang
  {
    get
    {
      return _bannerLang;
    }
    set
    {
      __isset.bannerLang = true;
      this._bannerLang = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool hasNext;
    public bool bannerSequence;
    public bool bannerTargetType;
    public bool bannerTargetPath;
    public bool productList;
    public bool bannerLang;
  }

  public ProductList()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool)
            {
              HasNext = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I64)
            {
              BannerSequence = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I32)
            {
              BannerTargetType = (ProductBannerLinkType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.String)
            {
              BannerTargetPath = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.List)
            {
              {
                TList _list197 = await iprot.ReadListBeginAsync(cancellationToken);
                ProductList_ = new List<Product>(_list197.Count);
                for(int _i198 = 0; _i198 < _list197.Count; ++_i198)
                {
                  Product _elem199;
                  _elem199 = new Product();
                  await _elem199.ReadAsync(iprot, cancellationToken);
                  ProductList_.Add(_elem199);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.String)
            {
              BannerLang = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("ProductList");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.hasNext)
      {
        field.Name = "hasNext";
        field.Type = TType.Bool;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(HasNext, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.bannerSequence)
      {
        field.Name = "bannerSequence";
        field.Type = TType.I64;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(BannerSequence, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.bannerTargetType)
      {
        field.Name = "bannerTargetType";
        field.Type = TType.I32;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)BannerTargetType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (BannerTargetPath != null && __isset.bannerTargetPath)
      {
        field.Name = "bannerTargetPath";
        field.Type = TType.String;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(BannerTargetPath, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ProductList_ != null && __isset.productList)
      {
        field.Name = "productList";
        field.Type = TType.List;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, ProductList_.Count), cancellationToken);
          foreach (Product _iter200 in ProductList_)
          {
            await _iter200.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (BannerLang != null && __isset.bannerLang)
      {
        field.Name = "bannerLang";
        field.Type = TType.String;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(BannerLang, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as ProductList;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.hasNext == other.__isset.hasNext) && ((!__isset.hasNext) || (System.Object.Equals(HasNext, other.HasNext))))
      && ((__isset.bannerSequence == other.__isset.bannerSequence) && ((!__isset.bannerSequence) || (System.Object.Equals(BannerSequence, other.BannerSequence))))
      && ((__isset.bannerTargetType == other.__isset.bannerTargetType) && ((!__isset.bannerTargetType) || (System.Object.Equals(BannerTargetType, other.BannerTargetType))))
      && ((__isset.bannerTargetPath == other.__isset.bannerTargetPath) && ((!__isset.bannerTargetPath) || (System.Object.Equals(BannerTargetPath, other.BannerTargetPath))))
      && ((__isset.productList == other.__isset.productList) && ((!__isset.productList) || (TCollections.Equals(ProductList_, other.ProductList_))))
      && ((__isset.bannerLang == other.__isset.bannerLang) && ((!__isset.bannerLang) || (System.Object.Equals(BannerLang, other.BannerLang))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.hasNext)
        hashcode = (hashcode * 397) + HasNext.GetHashCode();
      if(__isset.bannerSequence)
        hashcode = (hashcode * 397) + BannerSequence.GetHashCode();
      if(__isset.bannerTargetType)
        hashcode = (hashcode * 397) + BannerTargetType.GetHashCode();
      if(__isset.bannerTargetPath)
        hashcode = (hashcode * 397) + BannerTargetPath.GetHashCode();
      if(__isset.productList)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ProductList_);
      if(__isset.bannerLang)
        hashcode = (hashcode * 397) + BannerLang.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("ProductList(");
    bool __first = true;
    if (__isset.hasNext)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("HasNext: ");
      sb.Append(HasNext);
    }
    if (__isset.bannerSequence)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("BannerSequence: ");
      sb.Append(BannerSequence);
    }
    if (__isset.bannerTargetType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("BannerTargetType: ");
      sb.Append(BannerTargetType);
    }
    if (BannerTargetPath != null && __isset.bannerTargetPath)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("BannerTargetPath: ");
      sb.Append(BannerTargetPath);
    }
    if (ProductList_ != null && __isset.productList)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ProductList_: ");
      sb.Append(ProductList_);
    }
    if (BannerLang != null && __isset.bannerLang)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("BannerLang: ");
      sb.Append(BannerLang);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

