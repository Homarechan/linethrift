/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class SuggestDictionarySettings : TBase
{
  private long _revision;
  private long _newRevision;
  private List<SuggestDictionary> _dictionaries;
  private List<string> _preloadedDictionaries;

  public long Revision
  {
    get
    {
      return _revision;
    }
    set
    {
      __isset.revision = true;
      this._revision = value;
    }
  }

  public long NewRevision
  {
    get
    {
      return _newRevision;
    }
    set
    {
      __isset.newRevision = true;
      this._newRevision = value;
    }
  }

  public List<SuggestDictionary> Dictionaries
  {
    get
    {
      return _dictionaries;
    }
    set
    {
      __isset.dictionaries = true;
      this._dictionaries = value;
    }
  }

  public List<string> PreloadedDictionaries
  {
    get
    {
      return _preloadedDictionaries;
    }
    set
    {
      __isset.preloadedDictionaries = true;
      this._preloadedDictionaries = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool revision;
    public bool newRevision;
    public bool dictionaries;
    public bool preloadedDictionaries;
  }

  public SuggestDictionarySettings()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              Revision = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              NewRevision = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list233 = await iprot.ReadListBeginAsync(cancellationToken);
                Dictionaries = new List<SuggestDictionary>(_list233.Count);
                for(int _i234 = 0; _i234 < _list233.Count; ++_i234)
                {
                  SuggestDictionary _elem235;
                  _elem235 = new SuggestDictionary();
                  await _elem235.ReadAsync(iprot, cancellationToken);
                  Dictionaries.Add(_elem235);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                TList _list236 = await iprot.ReadListBeginAsync(cancellationToken);
                PreloadedDictionaries = new List<string>(_list236.Count);
                for(int _i237 = 0; _i237 < _list236.Count; ++_i237)
                {
                  string _elem238;
                  _elem238 = await iprot.ReadStringAsync(cancellationToken);
                  PreloadedDictionaries.Add(_elem238);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("SuggestDictionarySettings");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.revision)
      {
        field.Name = "revision";
        field.Type = TType.I64;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Revision, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.newRevision)
      {
        field.Name = "newRevision";
        field.Type = TType.I64;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(NewRevision, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Dictionaries != null && __isset.dictionaries)
      {
        field.Name = "dictionaries";
        field.Type = TType.List;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Dictionaries.Count), cancellationToken);
          foreach (SuggestDictionary _iter239 in Dictionaries)
          {
            await _iter239.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (PreloadedDictionaries != null && __isset.preloadedDictionaries)
      {
        field.Name = "preloadedDictionaries";
        field.Type = TType.List;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, PreloadedDictionaries.Count), cancellationToken);
          foreach (string _iter240 in PreloadedDictionaries)
          {
            await oprot.WriteStringAsync(_iter240, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as SuggestDictionarySettings;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.revision == other.__isset.revision) && ((!__isset.revision) || (System.Object.Equals(Revision, other.Revision))))
      && ((__isset.newRevision == other.__isset.newRevision) && ((!__isset.newRevision) || (System.Object.Equals(NewRevision, other.NewRevision))))
      && ((__isset.dictionaries == other.__isset.dictionaries) && ((!__isset.dictionaries) || (TCollections.Equals(Dictionaries, other.Dictionaries))))
      && ((__isset.preloadedDictionaries == other.__isset.preloadedDictionaries) && ((!__isset.preloadedDictionaries) || (TCollections.Equals(PreloadedDictionaries, other.PreloadedDictionaries))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.revision)
        hashcode = (hashcode * 397) + Revision.GetHashCode();
      if(__isset.newRevision)
        hashcode = (hashcode * 397) + NewRevision.GetHashCode();
      if(__isset.dictionaries)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Dictionaries);
      if(__isset.preloadedDictionaries)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(PreloadedDictionaries);
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("SuggestDictionarySettings(");
    bool __first = true;
    if (__isset.revision)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Revision: ");
      sb.Append(Revision);
    }
    if (__isset.newRevision)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("NewRevision: ");
      sb.Append(NewRevision);
    }
    if (Dictionaries != null && __isset.dictionaries)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Dictionaries: ");
      sb.Append(Dictionaries);
    }
    if (PreloadedDictionaries != null && __isset.preloadedDictionaries)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PreloadedDictionaries: ");
      sb.Append(PreloadedDictionaries);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

