/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class LoginSession : TBase
{
  private string _tokenKey;
  private long _expirationTime;
  private ApplicationType _applicationType;
  private string _systemName;
  private string _accessLocation;

  public string TokenKey
  {
    get
    {
      return _tokenKey;
    }
    set
    {
      __isset.tokenKey = true;
      this._tokenKey = value;
    }
  }

  public long ExpirationTime
  {
    get
    {
      return _expirationTime;
    }
    set
    {
      __isset.expirationTime = true;
      this._expirationTime = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="ApplicationType"/>
  /// </summary>
  public ApplicationType ApplicationType
  {
    get
    {
      return _applicationType;
    }
    set
    {
      __isset.applicationType = true;
      this._applicationType = value;
    }
  }

  public string SystemName
  {
    get
    {
      return _systemName;
    }
    set
    {
      __isset.systemName = true;
      this._systemName = value;
    }
  }

  public string AccessLocation
  {
    get
    {
      return _accessLocation;
    }
    set
    {
      __isset.accessLocation = true;
      this._accessLocation = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool tokenKey;
    public bool expirationTime;
    public bool applicationType;
    public bool systemName;
    public bool accessLocation;
  }

  public LoginSession()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              TokenKey = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I64)
            {
              ExpirationTime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.I32)
            {
              ApplicationType = (ApplicationType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.String)
            {
              SystemName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 22:
            if (field.Type == TType.String)
            {
              AccessLocation = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("LoginSession");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (TokenKey != null && __isset.tokenKey)
      {
        field.Name = "tokenKey";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(TokenKey, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.expirationTime)
      {
        field.Name = "expirationTime";
        field.Type = TType.I64;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(ExpirationTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.applicationType)
      {
        field.Name = "applicationType";
        field.Type = TType.I32;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)ApplicationType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SystemName != null && __isset.systemName)
      {
        field.Name = "systemName";
        field.Type = TType.String;
        field.ID = 12;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(SystemName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (AccessLocation != null && __isset.accessLocation)
      {
        field.Name = "accessLocation";
        field.Type = TType.String;
        field.ID = 22;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(AccessLocation, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as LoginSession;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.tokenKey == other.__isset.tokenKey) && ((!__isset.tokenKey) || (System.Object.Equals(TokenKey, other.TokenKey))))
      && ((__isset.expirationTime == other.__isset.expirationTime) && ((!__isset.expirationTime) || (System.Object.Equals(ExpirationTime, other.ExpirationTime))))
      && ((__isset.applicationType == other.__isset.applicationType) && ((!__isset.applicationType) || (System.Object.Equals(ApplicationType, other.ApplicationType))))
      && ((__isset.systemName == other.__isset.systemName) && ((!__isset.systemName) || (System.Object.Equals(SystemName, other.SystemName))))
      && ((__isset.accessLocation == other.__isset.accessLocation) && ((!__isset.accessLocation) || (System.Object.Equals(AccessLocation, other.AccessLocation))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.tokenKey)
        hashcode = (hashcode * 397) + TokenKey.GetHashCode();
      if(__isset.expirationTime)
        hashcode = (hashcode * 397) + ExpirationTime.GetHashCode();
      if(__isset.applicationType)
        hashcode = (hashcode * 397) + ApplicationType.GetHashCode();
      if(__isset.systemName)
        hashcode = (hashcode * 397) + SystemName.GetHashCode();
      if(__isset.accessLocation)
        hashcode = (hashcode * 397) + AccessLocation.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("LoginSession(");
    bool __first = true;
    if (TokenKey != null && __isset.tokenKey)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("TokenKey: ");
      sb.Append(TokenKey);
    }
    if (__isset.expirationTime)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ExpirationTime: ");
      sb.Append(ExpirationTime);
    }
    if (__isset.applicationType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ApplicationType: ");
      sb.Append(ApplicationType);
    }
    if (SystemName != null && __isset.systemName)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SystemName: ");
      sb.Append(SystemName);
    }
    if (AccessLocation != null && __isset.accessLocation)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("AccessLocation: ");
      sb.Append(AccessLocation);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

