/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class PaymentReservation : TBase
{
  private string _receiverMid;
  private string _productId;
  private string _language;
  private string _location;
  private string _currency;
  private string _price;
  private PaymentType _appStoreCode;
  private string _messageText;
  private int _messageTemplate;
  private long _packageId;

  public string ReceiverMid
  {
    get
    {
      return _receiverMid;
    }
    set
    {
      __isset.receiverMid = true;
      this._receiverMid = value;
    }
  }

  public string ProductId
  {
    get
    {
      return _productId;
    }
    set
    {
      __isset.productId = true;
      this._productId = value;
    }
  }

  public string Language
  {
    get
    {
      return _language;
    }
    set
    {
      __isset.language = true;
      this._language = value;
    }
  }

  public string Location
  {
    get
    {
      return _location;
    }
    set
    {
      __isset.location = true;
      this._location = value;
    }
  }

  public string Currency
  {
    get
    {
      return _currency;
    }
    set
    {
      __isset.currency = true;
      this._currency = value;
    }
  }

  public string Price
  {
    get
    {
      return _price;
    }
    set
    {
      __isset.price = true;
      this._price = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="PaymentType"/>
  /// </summary>
  public PaymentType AppStoreCode
  {
    get
    {
      return _appStoreCode;
    }
    set
    {
      __isset.appStoreCode = true;
      this._appStoreCode = value;
    }
  }

  public string MessageText
  {
    get
    {
      return _messageText;
    }
    set
    {
      __isset.messageText = true;
      this._messageText = value;
    }
  }

  public int MessageTemplate
  {
    get
    {
      return _messageTemplate;
    }
    set
    {
      __isset.messageTemplate = true;
      this._messageTemplate = value;
    }
  }

  public long PackageId
  {
    get
    {
      return _packageId;
    }
    set
    {
      __isset.packageId = true;
      this._packageId = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool receiverMid;
    public bool productId;
    public bool language;
    public bool location;
    public bool currency;
    public bool price;
    public bool appStoreCode;
    public bool messageText;
    public bool messageTemplate;
    public bool packageId;
  }

  public PaymentReservation()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              ReceiverMid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              ProductId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Language = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Location = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Currency = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.String)
            {
              Price = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.I32)
            {
              AppStoreCode = (PaymentType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.String)
            {
              MessageText = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.I32)
            {
              MessageTemplate = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.I64)
            {
              PackageId = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("PaymentReservation");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (ReceiverMid != null && __isset.receiverMid)
      {
        field.Name = "receiverMid";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ReceiverMid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ProductId != null && __isset.productId)
      {
        field.Name = "productId";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ProductId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Language != null && __isset.language)
      {
        field.Name = "language";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Language, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Location != null && __isset.location)
      {
        field.Name = "location";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Location, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Currency != null && __isset.currency)
      {
        field.Name = "currency";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Currency, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Price != null && __isset.price)
      {
        field.Name = "price";
        field.Type = TType.String;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Price, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.appStoreCode)
      {
        field.Name = "appStoreCode";
        field.Type = TType.I32;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)AppStoreCode, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (MessageText != null && __isset.messageText)
      {
        field.Name = "messageText";
        field.Type = TType.String;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(MessageText, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.messageTemplate)
      {
        field.Name = "messageTemplate";
        field.Type = TType.I32;
        field.ID = 9;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(MessageTemplate, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.packageId)
      {
        field.Name = "packageId";
        field.Type = TType.I64;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(PackageId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as PaymentReservation;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.receiverMid == other.__isset.receiverMid) && ((!__isset.receiverMid) || (System.Object.Equals(ReceiverMid, other.ReceiverMid))))
      && ((__isset.productId == other.__isset.productId) && ((!__isset.productId) || (System.Object.Equals(ProductId, other.ProductId))))
      && ((__isset.language == other.__isset.language) && ((!__isset.language) || (System.Object.Equals(Language, other.Language))))
      && ((__isset.location == other.__isset.location) && ((!__isset.location) || (System.Object.Equals(Location, other.Location))))
      && ((__isset.currency == other.__isset.currency) && ((!__isset.currency) || (System.Object.Equals(Currency, other.Currency))))
      && ((__isset.price == other.__isset.price) && ((!__isset.price) || (System.Object.Equals(Price, other.Price))))
      && ((__isset.appStoreCode == other.__isset.appStoreCode) && ((!__isset.appStoreCode) || (System.Object.Equals(AppStoreCode, other.AppStoreCode))))
      && ((__isset.messageText == other.__isset.messageText) && ((!__isset.messageText) || (System.Object.Equals(MessageText, other.MessageText))))
      && ((__isset.messageTemplate == other.__isset.messageTemplate) && ((!__isset.messageTemplate) || (System.Object.Equals(MessageTemplate, other.MessageTemplate))))
      && ((__isset.packageId == other.__isset.packageId) && ((!__isset.packageId) || (System.Object.Equals(PackageId, other.PackageId))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.receiverMid)
        hashcode = (hashcode * 397) + ReceiverMid.GetHashCode();
      if(__isset.productId)
        hashcode = (hashcode * 397) + ProductId.GetHashCode();
      if(__isset.language)
        hashcode = (hashcode * 397) + Language.GetHashCode();
      if(__isset.location)
        hashcode = (hashcode * 397) + Location.GetHashCode();
      if(__isset.currency)
        hashcode = (hashcode * 397) + Currency.GetHashCode();
      if(__isset.price)
        hashcode = (hashcode * 397) + Price.GetHashCode();
      if(__isset.appStoreCode)
        hashcode = (hashcode * 397) + AppStoreCode.GetHashCode();
      if(__isset.messageText)
        hashcode = (hashcode * 397) + MessageText.GetHashCode();
      if(__isset.messageTemplate)
        hashcode = (hashcode * 397) + MessageTemplate.GetHashCode();
      if(__isset.packageId)
        hashcode = (hashcode * 397) + PackageId.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("PaymentReservation(");
    bool __first = true;
    if (ReceiverMid != null && __isset.receiverMid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ReceiverMid: ");
      sb.Append(ReceiverMid);
    }
    if (ProductId != null && __isset.productId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ProductId: ");
      sb.Append(ProductId);
    }
    if (Language != null && __isset.language)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Language: ");
      sb.Append(Language);
    }
    if (Location != null && __isset.location)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Location: ");
      sb.Append(Location);
    }
    if (Currency != null && __isset.currency)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Currency: ");
      sb.Append(Currency);
    }
    if (Price != null && __isset.price)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Price: ");
      sb.Append(Price);
    }
    if (__isset.appStoreCode)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("AppStoreCode: ");
      sb.Append(AppStoreCode);
    }
    if (MessageText != null && __isset.messageText)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MessageText: ");
      sb.Append(MessageText);
    }
    if (__isset.messageTemplate)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MessageTemplate: ");
      sb.Append(MessageTemplate);
    }
    if (__isset.packageId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PackageId: ");
      sb.Append(PackageId);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

