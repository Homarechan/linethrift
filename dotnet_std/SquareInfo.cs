/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class SquareInfo : TBase
{
  private Square _square;
  private SquareStatus _squareStatus;
  private NoteStatus _squareNoteStatus;

  public Square Square
  {
    get
    {
      return _square;
    }
    set
    {
      __isset.square = true;
      this._square = value;
    }
  }

  public SquareStatus SquareStatus
  {
    get
    {
      return _squareStatus;
    }
    set
    {
      __isset.squareStatus = true;
      this._squareStatus = value;
    }
  }

  public NoteStatus SquareNoteStatus
  {
    get
    {
      return _squareNoteStatus;
    }
    set
    {
      __isset.squareNoteStatus = true;
      this._squareNoteStatus = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool square;
    public bool squareStatus;
    public bool squareNoteStatus;
  }

  public SquareInfo()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              Square = new Square();
              await Square.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Struct)
            {
              SquareStatus = new SquareStatus();
              await SquareStatus.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Struct)
            {
              SquareNoteStatus = new NoteStatus();
              await SquareNoteStatus.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("SquareInfo");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Square != null && __isset.square)
      {
        field.Name = "square";
        field.Type = TType.Struct;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Square.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SquareStatus != null && __isset.squareStatus)
      {
        field.Name = "squareStatus";
        field.Type = TType.Struct;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await SquareStatus.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SquareNoteStatus != null && __isset.squareNoteStatus)
      {
        field.Name = "squareNoteStatus";
        field.Type = TType.Struct;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await SquareNoteStatus.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as SquareInfo;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.square == other.__isset.square) && ((!__isset.square) || (System.Object.Equals(Square, other.Square))))
      && ((__isset.squareStatus == other.__isset.squareStatus) && ((!__isset.squareStatus) || (System.Object.Equals(SquareStatus, other.SquareStatus))))
      && ((__isset.squareNoteStatus == other.__isset.squareNoteStatus) && ((!__isset.squareNoteStatus) || (System.Object.Equals(SquareNoteStatus, other.SquareNoteStatus))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.square)
        hashcode = (hashcode * 397) + Square.GetHashCode();
      if(__isset.squareStatus)
        hashcode = (hashcode * 397) + SquareStatus.GetHashCode();
      if(__isset.squareNoteStatus)
        hashcode = (hashcode * 397) + SquareNoteStatus.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("SquareInfo(");
    bool __first = true;
    if (Square != null && __isset.square)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Square: ");
      sb.Append(Square== null ? "<null>" : Square.ToString());
    }
    if (SquareStatus != null && __isset.squareStatus)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SquareStatus: ");
      sb.Append(SquareStatus== null ? "<null>" : SquareStatus.ToString());
    }
    if (SquareNoteStatus != null && __isset.squareNoteStatus)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SquareNoteStatus: ");
      sb.Append(SquareNoteStatus== null ? "<null>" : SquareNoteStatus.ToString());
    }
    sb.Append(")");
    return sb.ToString();
  }
}

