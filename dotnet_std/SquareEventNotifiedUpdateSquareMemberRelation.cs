/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class SquareEventNotifiedUpdateSquareMemberRelation : TBase
{
  private string _squareMid;
  private string _myMemberMid;
  private string _targetSquareMemberMid;
  private SquareMemberRelation _squareMemberRelation;

  public string SquareMid
  {
    get
    {
      return _squareMid;
    }
    set
    {
      __isset.squareMid = true;
      this._squareMid = value;
    }
  }

  public string MyMemberMid
  {
    get
    {
      return _myMemberMid;
    }
    set
    {
      __isset.myMemberMid = true;
      this._myMemberMid = value;
    }
  }

  public string TargetSquareMemberMid
  {
    get
    {
      return _targetSquareMemberMid;
    }
    set
    {
      __isset.targetSquareMemberMid = true;
      this._targetSquareMemberMid = value;
    }
  }

  public SquareMemberRelation SquareMemberRelation
  {
    get
    {
      return _squareMemberRelation;
    }
    set
    {
      __isset.squareMemberRelation = true;
      this._squareMemberRelation = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool squareMid;
    public bool myMemberMid;
    public bool targetSquareMemberMid;
    public bool squareMemberRelation;
  }

  public SquareEventNotifiedUpdateSquareMemberRelation()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              SquareMid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              MyMemberMid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              TargetSquareMemberMid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Struct)
            {
              SquareMemberRelation = new SquareMemberRelation();
              await SquareMemberRelation.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("SquareEventNotifiedUpdateSquareMemberRelation");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (SquareMid != null && __isset.squareMid)
      {
        field.Name = "squareMid";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(SquareMid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (MyMemberMid != null && __isset.myMemberMid)
      {
        field.Name = "myMemberMid";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(MyMemberMid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (TargetSquareMemberMid != null && __isset.targetSquareMemberMid)
      {
        field.Name = "targetSquareMemberMid";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(TargetSquareMemberMid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SquareMemberRelation != null && __isset.squareMemberRelation)
      {
        field.Name = "squareMemberRelation";
        field.Type = TType.Struct;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await SquareMemberRelation.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as SquareEventNotifiedUpdateSquareMemberRelation;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.squareMid == other.__isset.squareMid) && ((!__isset.squareMid) || (System.Object.Equals(SquareMid, other.SquareMid))))
      && ((__isset.myMemberMid == other.__isset.myMemberMid) && ((!__isset.myMemberMid) || (System.Object.Equals(MyMemberMid, other.MyMemberMid))))
      && ((__isset.targetSquareMemberMid == other.__isset.targetSquareMemberMid) && ((!__isset.targetSquareMemberMid) || (System.Object.Equals(TargetSquareMemberMid, other.TargetSquareMemberMid))))
      && ((__isset.squareMemberRelation == other.__isset.squareMemberRelation) && ((!__isset.squareMemberRelation) || (System.Object.Equals(SquareMemberRelation, other.SquareMemberRelation))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.squareMid)
        hashcode = (hashcode * 397) + SquareMid.GetHashCode();
      if(__isset.myMemberMid)
        hashcode = (hashcode * 397) + MyMemberMid.GetHashCode();
      if(__isset.targetSquareMemberMid)
        hashcode = (hashcode * 397) + TargetSquareMemberMid.GetHashCode();
      if(__isset.squareMemberRelation)
        hashcode = (hashcode * 397) + SquareMemberRelation.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("SquareEventNotifiedUpdateSquareMemberRelation(");
    bool __first = true;
    if (SquareMid != null && __isset.squareMid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SquareMid: ");
      sb.Append(SquareMid);
    }
    if (MyMemberMid != null && __isset.myMemberMid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MyMemberMid: ");
      sb.Append(MyMemberMid);
    }
    if (TargetSquareMemberMid != null && __isset.targetSquareMemberMid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("TargetSquareMemberMid: ");
      sb.Append(TargetSquareMemberMid);
    }
    if (SquareMemberRelation != null && __isset.squareMemberRelation)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SquareMemberRelation: ");
      sb.Append(SquareMemberRelation== null ? "<null>" : SquareMemberRelation.ToString());
    }
    sb.Append(")");
    return sb.ToString();
  }
}

