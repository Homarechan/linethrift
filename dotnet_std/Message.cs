/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class Message : TBase
{
  private string __from;
  private string _to;
  private MIDType _toType;
  private string _id;
  private long _createdTime;
  private long _deliveredTime;
  private string _text;
  private Location _location;
  private bool _hasContent;
  private ContentType _contentType;
  private byte[] _contentPreview;
  private Dictionary<string, string> _contentMetadata;
  private sbyte _sessionId;
  private List<byte[]> _chunks;
  private string _relatedMessageId;
  private MessageRelationType _messageRelationType;
  private long _readCount;
  private ServiceCode _relatedMessageServiceCode;

  public string _from
  {
    get
    {
      return __from;
    }
    set
    {
      __isset._from = true;
      this.__from = value;
    }
  }

  public string To
  {
    get
    {
      return _to;
    }
    set
    {
      __isset.to = true;
      this._to = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="MIDType"/>
  /// </summary>
  public MIDType ToType
  {
    get
    {
      return _toType;
    }
    set
    {
      __isset.toType = true;
      this._toType = value;
    }
  }

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public long CreatedTime
  {
    get
    {
      return _createdTime;
    }
    set
    {
      __isset.createdTime = true;
      this._createdTime = value;
    }
  }

  public long DeliveredTime
  {
    get
    {
      return _deliveredTime;
    }
    set
    {
      __isset.deliveredTime = true;
      this._deliveredTime = value;
    }
  }

  public string Text
  {
    get
    {
      return _text;
    }
    set
    {
      __isset.text = true;
      this._text = value;
    }
  }

  public Location Location
  {
    get
    {
      return _location;
    }
    set
    {
      __isset.location = true;
      this._location = value;
    }
  }

  public bool HasContent
  {
    get
    {
      return _hasContent;
    }
    set
    {
      __isset.hasContent = true;
      this._hasContent = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="ContentType"/>
  /// </summary>
  public ContentType ContentType
  {
    get
    {
      return _contentType;
    }
    set
    {
      __isset.contentType = true;
      this._contentType = value;
    }
  }

  public byte[] ContentPreview
  {
    get
    {
      return _contentPreview;
    }
    set
    {
      __isset.contentPreview = true;
      this._contentPreview = value;
    }
  }

  public Dictionary<string, string> ContentMetadata
  {
    get
    {
      return _contentMetadata;
    }
    set
    {
      __isset.contentMetadata = true;
      this._contentMetadata = value;
    }
  }

  public sbyte SessionId
  {
    get
    {
      return _sessionId;
    }
    set
    {
      __isset.sessionId = true;
      this._sessionId = value;
    }
  }

  public List<byte[]> Chunks
  {
    get
    {
      return _chunks;
    }
    set
    {
      __isset.chunks = true;
      this._chunks = value;
    }
  }

  public string RelatedMessageId
  {
    get
    {
      return _relatedMessageId;
    }
    set
    {
      __isset.relatedMessageId = true;
      this._relatedMessageId = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="MessageRelationType"/>
  /// </summary>
  public MessageRelationType MessageRelationType
  {
    get
    {
      return _messageRelationType;
    }
    set
    {
      __isset.messageRelationType = true;
      this._messageRelationType = value;
    }
  }

  public long ReadCount
  {
    get
    {
      return _readCount;
    }
    set
    {
      __isset.readCount = true;
      this._readCount = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="ServiceCode"/>
  /// </summary>
  public ServiceCode RelatedMessageServiceCode
  {
    get
    {
      return _relatedMessageServiceCode;
    }
    set
    {
      __isset.relatedMessageServiceCode = true;
      this._relatedMessageServiceCode = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool _from;
    public bool to;
    public bool toType;
    public bool id;
    public bool createdTime;
    public bool deliveredTime;
    public bool text;
    public bool location;
    public bool hasContent;
    public bool contentType;
    public bool contentPreview;
    public bool contentMetadata;
    public bool sessionId;
    public bool chunks;
    public bool relatedMessageId;
    public bool messageRelationType;
    public bool readCount;
    public bool relatedMessageServiceCode;
  }

  public Message()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              _from = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              To = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              ToType = (MIDType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Id = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I64)
            {
              CreatedTime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.I64)
            {
              DeliveredTime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.String)
            {
              Text = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.Struct)
            {
              Location = new Location();
              await Location.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 14:
            if (field.Type == TType.Bool)
            {
              HasContent = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 15:
            if (field.Type == TType.I32)
            {
              ContentType = (ContentType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 17:
            if (field.Type == TType.String)
            {
              ContentPreview = await iprot.ReadBinaryAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 18:
            if (field.Type == TType.Map)
            {
              {
                TMap _map157 = await iprot.ReadMapBeginAsync(cancellationToken);
                ContentMetadata = new Dictionary<string, string>(_map157.Count);
                for(int _i158 = 0; _i158 < _map157.Count; ++_i158)
                {
                  string _key159;
                  string _val160;
                  _key159 = await iprot.ReadStringAsync(cancellationToken);
                  _val160 = await iprot.ReadStringAsync(cancellationToken);
                  ContentMetadata[_key159] = _val160;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 19:
            if (field.Type == TType.Byte)
            {
              SessionId = await iprot.ReadByteAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 20:
            if (field.Type == TType.List)
            {
              {
                TList _list161 = await iprot.ReadListBeginAsync(cancellationToken);
                Chunks = new List<byte[]>(_list161.Count);
                for(int _i162 = 0; _i162 < _list161.Count; ++_i162)
                {
                  byte[] _elem163;
                  _elem163 = await iprot.ReadBinaryAsync(cancellationToken);
                  Chunks.Add(_elem163);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 21:
            if (field.Type == TType.String)
            {
              RelatedMessageId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 22:
            if (field.Type == TType.I32)
            {
              MessageRelationType = (MessageRelationType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 23:
            if (field.Type == TType.I64)
            {
              ReadCount = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 24:
            if (field.Type == TType.I32)
            {
              RelatedMessageServiceCode = (ServiceCode)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("Message");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (_from != null && __isset._from)
      {
        field.Name = "_from";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(_from, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (To != null && __isset.to)
      {
        field.Name = "to";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(To, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.toType)
      {
        field.Name = "toType";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)ToType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Id != null && __isset.id)
      {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Id, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.createdTime)
      {
        field.Name = "createdTime";
        field.Type = TType.I64;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(CreatedTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.deliveredTime)
      {
        field.Name = "deliveredTime";
        field.Type = TType.I64;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(DeliveredTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Text != null && __isset.text)
      {
        field.Name = "text";
        field.Type = TType.String;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Text, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Location != null && __isset.location)
      {
        field.Name = "location";
        field.Type = TType.Struct;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Location.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.hasContent)
      {
        field.Name = "hasContent";
        field.Type = TType.Bool;
        field.ID = 14;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(HasContent, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.contentType)
      {
        field.Name = "contentType";
        field.Type = TType.I32;
        field.ID = 15;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)ContentType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ContentPreview != null && __isset.contentPreview)
      {
        field.Name = "contentPreview";
        field.Type = TType.String;
        field.ID = 17;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBinaryAsync(ContentPreview, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ContentMetadata != null && __isset.contentMetadata)
      {
        field.Name = "contentMetadata";
        field.Type = TType.Map;
        field.ID = 18;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ContentMetadata.Count), cancellationToken);
          foreach (string _iter164 in ContentMetadata.Keys)
          {
            await oprot.WriteStringAsync(_iter164, cancellationToken);
            await oprot.WriteStringAsync(ContentMetadata[_iter164], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.sessionId)
      {
        field.Name = "sessionId";
        field.Type = TType.Byte;
        field.ID = 19;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteByteAsync(SessionId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Chunks != null && __isset.chunks)
      {
        field.Name = "chunks";
        field.Type = TType.List;
        field.ID = 20;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Chunks.Count), cancellationToken);
          foreach (byte[] _iter165 in Chunks)
          {
            await oprot.WriteBinaryAsync(_iter165, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (RelatedMessageId != null && __isset.relatedMessageId)
      {
        field.Name = "relatedMessageId";
        field.Type = TType.String;
        field.ID = 21;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(RelatedMessageId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.messageRelationType)
      {
        field.Name = "messageRelationType";
        field.Type = TType.I32;
        field.ID = 22;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)MessageRelationType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.readCount)
      {
        field.Name = "readCount";
        field.Type = TType.I64;
        field.ID = 23;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(ReadCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.relatedMessageServiceCode)
      {
        field.Name = "relatedMessageServiceCode";
        field.Type = TType.I32;
        field.ID = 24;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)RelatedMessageServiceCode, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as Message;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset._from == other.__isset._from) && ((!__isset._from) || (System.Object.Equals(_from, other._from))))
      && ((__isset.to == other.__isset.to) && ((!__isset.to) || (System.Object.Equals(To, other.To))))
      && ((__isset.toType == other.__isset.toType) && ((!__isset.toType) || (System.Object.Equals(ToType, other.ToType))))
      && ((__isset.id == other.__isset.id) && ((!__isset.id) || (System.Object.Equals(Id, other.Id))))
      && ((__isset.createdTime == other.__isset.createdTime) && ((!__isset.createdTime) || (System.Object.Equals(CreatedTime, other.CreatedTime))))
      && ((__isset.deliveredTime == other.__isset.deliveredTime) && ((!__isset.deliveredTime) || (System.Object.Equals(DeliveredTime, other.DeliveredTime))))
      && ((__isset.text == other.__isset.text) && ((!__isset.text) || (System.Object.Equals(Text, other.Text))))
      && ((__isset.location == other.__isset.location) && ((!__isset.location) || (System.Object.Equals(Location, other.Location))))
      && ((__isset.hasContent == other.__isset.hasContent) && ((!__isset.hasContent) || (System.Object.Equals(HasContent, other.HasContent))))
      && ((__isset.contentType == other.__isset.contentType) && ((!__isset.contentType) || (System.Object.Equals(ContentType, other.ContentType))))
      && ((__isset.contentPreview == other.__isset.contentPreview) && ((!__isset.contentPreview) || (TCollections.Equals(ContentPreview, other.ContentPreview))))
      && ((__isset.contentMetadata == other.__isset.contentMetadata) && ((!__isset.contentMetadata) || (TCollections.Equals(ContentMetadata, other.ContentMetadata))))
      && ((__isset.sessionId == other.__isset.sessionId) && ((!__isset.sessionId) || (System.Object.Equals(SessionId, other.SessionId))))
      && ((__isset.chunks == other.__isset.chunks) && ((!__isset.chunks) || (TCollections.Equals(Chunks, other.Chunks))))
      && ((__isset.relatedMessageId == other.__isset.relatedMessageId) && ((!__isset.relatedMessageId) || (System.Object.Equals(RelatedMessageId, other.RelatedMessageId))))
      && ((__isset.messageRelationType == other.__isset.messageRelationType) && ((!__isset.messageRelationType) || (System.Object.Equals(MessageRelationType, other.MessageRelationType))))
      && ((__isset.readCount == other.__isset.readCount) && ((!__isset.readCount) || (System.Object.Equals(ReadCount, other.ReadCount))))
      && ((__isset.relatedMessageServiceCode == other.__isset.relatedMessageServiceCode) && ((!__isset.relatedMessageServiceCode) || (System.Object.Equals(RelatedMessageServiceCode, other.RelatedMessageServiceCode))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset._from)
        hashcode = (hashcode * 397) + _from.GetHashCode();
      if(__isset.to)
        hashcode = (hashcode * 397) + To.GetHashCode();
      if(__isset.toType)
        hashcode = (hashcode * 397) + ToType.GetHashCode();
      if(__isset.id)
        hashcode = (hashcode * 397) + Id.GetHashCode();
      if(__isset.createdTime)
        hashcode = (hashcode * 397) + CreatedTime.GetHashCode();
      if(__isset.deliveredTime)
        hashcode = (hashcode * 397) + DeliveredTime.GetHashCode();
      if(__isset.text)
        hashcode = (hashcode * 397) + Text.GetHashCode();
      if(__isset.location)
        hashcode = (hashcode * 397) + Location.GetHashCode();
      if(__isset.hasContent)
        hashcode = (hashcode * 397) + HasContent.GetHashCode();
      if(__isset.contentType)
        hashcode = (hashcode * 397) + ContentType.GetHashCode();
      if(__isset.contentPreview)
        hashcode = (hashcode * 397) + ContentPreview.GetHashCode();
      if(__isset.contentMetadata)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ContentMetadata);
      if(__isset.sessionId)
        hashcode = (hashcode * 397) + SessionId.GetHashCode();
      if(__isset.chunks)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Chunks);
      if(__isset.relatedMessageId)
        hashcode = (hashcode * 397) + RelatedMessageId.GetHashCode();
      if(__isset.messageRelationType)
        hashcode = (hashcode * 397) + MessageRelationType.GetHashCode();
      if(__isset.readCount)
        hashcode = (hashcode * 397) + ReadCount.GetHashCode();
      if(__isset.relatedMessageServiceCode)
        hashcode = (hashcode * 397) + RelatedMessageServiceCode.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("Message(");
    bool __first = true;
    if (_from != null && __isset._from)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("_from: ");
      sb.Append(_from);
    }
    if (To != null && __isset.to)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("To: ");
      sb.Append(To);
    }
    if (__isset.toType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ToType: ");
      sb.Append(ToType);
    }
    if (Id != null && __isset.id)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Id: ");
      sb.Append(Id);
    }
    if (__isset.createdTime)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CreatedTime: ");
      sb.Append(CreatedTime);
    }
    if (__isset.deliveredTime)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DeliveredTime: ");
      sb.Append(DeliveredTime);
    }
    if (Text != null && __isset.text)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Text: ");
      sb.Append(Text);
    }
    if (Location != null && __isset.location)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Location: ");
      sb.Append(Location== null ? "<null>" : Location.ToString());
    }
    if (__isset.hasContent)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("HasContent: ");
      sb.Append(HasContent);
    }
    if (__isset.contentType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ContentType: ");
      sb.Append(ContentType);
    }
    if (ContentPreview != null && __isset.contentPreview)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ContentPreview: ");
      sb.Append(ContentPreview);
    }
    if (ContentMetadata != null && __isset.contentMetadata)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ContentMetadata: ");
      sb.Append(ContentMetadata);
    }
    if (__isset.sessionId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SessionId: ");
      sb.Append(SessionId);
    }
    if (Chunks != null && __isset.chunks)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Chunks: ");
      sb.Append(Chunks);
    }
    if (RelatedMessageId != null && __isset.relatedMessageId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("RelatedMessageId: ");
      sb.Append(RelatedMessageId);
    }
    if (__isset.messageRelationType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MessageRelationType: ");
      sb.Append(MessageRelationType);
    }
    if (__isset.readCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ReadCount: ");
      sb.Append(ReadCount);
    }
    if (__isset.relatedMessageServiceCode)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("RelatedMessageServiceCode: ");
      sb.Append(RelatedMessageServiceCode);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

