/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class UpdateSquareAuthorityRequest : TBase
{
  private THashSet<SquareAuthorityAttribute> _updateAttributes;
  private SquareAuthority _authority;

  public THashSet<SquareAuthorityAttribute> UpdateAttributes
  {
    get
    {
      return _updateAttributes;
    }
    set
    {
      __isset.updateAttributes = true;
      this._updateAttributes = value;
    }
  }

  public SquareAuthority Authority
  {
    get
    {
      return _authority;
    }
    set
    {
      __isset.authority = true;
      this._authority = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool updateAttributes;
    public bool authority;
  }

  public UpdateSquareAuthorityRequest()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 2:
            if (field.Type == TType.Set)
            {
              {
                TSet _set483 = await iprot.ReadSetBeginAsync(cancellationToken);
                UpdateAttributes = new THashSet<SquareAuthorityAttribute>(_set483.Count);
                for(int _i484 = 0; _i484 < _set483.Count; ++_i484)
                {
                  SquareAuthorityAttribute _elem485;
                  _elem485 = (SquareAuthorityAttribute)await iprot.ReadI32Async(cancellationToken);
                  UpdateAttributes.Add(_elem485);
                }
                await iprot.ReadSetEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Struct)
            {
              Authority = new SquareAuthority();
              await Authority.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("UpdateSquareAuthorityRequest");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (UpdateAttributes != null && __isset.updateAttributes)
      {
        field.Name = "updateAttributes";
        field.Type = TType.Set;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteSetBeginAsync(new TSet(TType.I32, UpdateAttributes.Count), cancellationToken);
          foreach (SquareAuthorityAttribute _iter486 in UpdateAttributes)
          {
            await oprot.WriteI32Async((int)_iter486, cancellationToken);
          }
          await oprot.WriteSetEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Authority != null && __isset.authority)
      {
        field.Name = "authority";
        field.Type = TType.Struct;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Authority.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as UpdateSquareAuthorityRequest;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.updateAttributes == other.__isset.updateAttributes) && ((!__isset.updateAttributes) || (TCollections.Equals(UpdateAttributes, other.UpdateAttributes))))
      && ((__isset.authority == other.__isset.authority) && ((!__isset.authority) || (System.Object.Equals(Authority, other.Authority))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.updateAttributes)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(UpdateAttributes);
      if(__isset.authority)
        hashcode = (hashcode * 397) + Authority.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("UpdateSquareAuthorityRequest(");
    bool __first = true;
    if (UpdateAttributes != null && __isset.updateAttributes)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("UpdateAttributes: ");
      sb.Append(UpdateAttributes);
    }
    if (Authority != null && __isset.authority)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Authority: ");
      sb.Append(Authority== null ? "<null>" : Authority.ToString());
    }
    sb.Append(")");
    return sb.ToString();
  }
}

