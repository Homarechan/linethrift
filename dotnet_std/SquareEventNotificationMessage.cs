/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class SquareEventNotificationMessage : TBase
{
  private string _squareChatMid;
  private SquareMessage _squareMessage;
  private string _senderDisplayName;
  private int _unreadCount;
  private bool _requiredToFetchChatEvents;

  public string SquareChatMid
  {
    get
    {
      return _squareChatMid;
    }
    set
    {
      __isset.squareChatMid = true;
      this._squareChatMid = value;
    }
  }

  public SquareMessage SquareMessage
  {
    get
    {
      return _squareMessage;
    }
    set
    {
      __isset.squareMessage = true;
      this._squareMessage = value;
    }
  }

  public string SenderDisplayName
  {
    get
    {
      return _senderDisplayName;
    }
    set
    {
      __isset.senderDisplayName = true;
      this._senderDisplayName = value;
    }
  }

  public int UnreadCount
  {
    get
    {
      return _unreadCount;
    }
    set
    {
      __isset.unreadCount = true;
      this._unreadCount = value;
    }
  }

  public bool RequiredToFetchChatEvents
  {
    get
    {
      return _requiredToFetchChatEvents;
    }
    set
    {
      __isset.requiredToFetchChatEvents = true;
      this._requiredToFetchChatEvents = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool squareChatMid;
    public bool squareMessage;
    public bool senderDisplayName;
    public bool unreadCount;
    public bool requiredToFetchChatEvents;
  }

  public SquareEventNotificationMessage()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              SquareChatMid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Struct)
            {
              SquareMessage = new SquareMessage();
              await SquareMessage.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              SenderDisplayName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I32)
            {
              UnreadCount = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.Bool)
            {
              RequiredToFetchChatEvents = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("SquareEventNotificationMessage");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (SquareChatMid != null && __isset.squareChatMid)
      {
        field.Name = "squareChatMid";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(SquareChatMid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SquareMessage != null && __isset.squareMessage)
      {
        field.Name = "squareMessage";
        field.Type = TType.Struct;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await SquareMessage.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SenderDisplayName != null && __isset.senderDisplayName)
      {
        field.Name = "senderDisplayName";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(SenderDisplayName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.unreadCount)
      {
        field.Name = "unreadCount";
        field.Type = TType.I32;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(UnreadCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.requiredToFetchChatEvents)
      {
        field.Name = "requiredToFetchChatEvents";
        field.Type = TType.Bool;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(RequiredToFetchChatEvents, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as SquareEventNotificationMessage;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.squareChatMid == other.__isset.squareChatMid) && ((!__isset.squareChatMid) || (System.Object.Equals(SquareChatMid, other.SquareChatMid))))
      && ((__isset.squareMessage == other.__isset.squareMessage) && ((!__isset.squareMessage) || (System.Object.Equals(SquareMessage, other.SquareMessage))))
      && ((__isset.senderDisplayName == other.__isset.senderDisplayName) && ((!__isset.senderDisplayName) || (System.Object.Equals(SenderDisplayName, other.SenderDisplayName))))
      && ((__isset.unreadCount == other.__isset.unreadCount) && ((!__isset.unreadCount) || (System.Object.Equals(UnreadCount, other.UnreadCount))))
      && ((__isset.requiredToFetchChatEvents == other.__isset.requiredToFetchChatEvents) && ((!__isset.requiredToFetchChatEvents) || (System.Object.Equals(RequiredToFetchChatEvents, other.RequiredToFetchChatEvents))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.squareChatMid)
        hashcode = (hashcode * 397) + SquareChatMid.GetHashCode();
      if(__isset.squareMessage)
        hashcode = (hashcode * 397) + SquareMessage.GetHashCode();
      if(__isset.senderDisplayName)
        hashcode = (hashcode * 397) + SenderDisplayName.GetHashCode();
      if(__isset.unreadCount)
        hashcode = (hashcode * 397) + UnreadCount.GetHashCode();
      if(__isset.requiredToFetchChatEvents)
        hashcode = (hashcode * 397) + RequiredToFetchChatEvents.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("SquareEventNotificationMessage(");
    bool __first = true;
    if (SquareChatMid != null && __isset.squareChatMid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SquareChatMid: ");
      sb.Append(SquareChatMid);
    }
    if (SquareMessage != null && __isset.squareMessage)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SquareMessage: ");
      sb.Append(SquareMessage== null ? "<null>" : SquareMessage.ToString());
    }
    if (SenderDisplayName != null && __isset.senderDisplayName)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SenderDisplayName: ");
      sb.Append(SenderDisplayName);
    }
    if (__isset.unreadCount)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("UnreadCount: ");
      sb.Append(UnreadCount);
    }
    if (__isset.requiredToFetchChatEvents)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("RequiredToFetchChatEvents: ");
      sb.Append(RequiredToFetchChatEvents);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

