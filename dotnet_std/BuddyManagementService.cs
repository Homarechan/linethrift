/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


public partial class BuddyManagementService
{
  public interface IAsync
  {
    Task addBuddyMemberAsync(string requestId, string userMid, CancellationToken cancellationToken = default(CancellationToken));

    Task addBuddyMembersAsync(string requestId, List<string> userMids, CancellationToken cancellationToken = default(CancellationToken));

    Task blockBuddyMemberAsync(string requestId, string mid, CancellationToken cancellationToken = default(CancellationToken));

    Task<List<SendBuddyMessageResult>> commitSendMessagesToAllAsync(List<string> requestIdList, CancellationToken cancellationToken = default(CancellationToken));

    Task<List<SendBuddyMessageResult>> commitSendMessagesToMidsAsync(List<string> requestIdList, List<string> mids, CancellationToken cancellationToken = default(CancellationToken));

    Task<bool> containsBuddyMemberAsync(string requestId, string userMid, CancellationToken cancellationToken = default(CancellationToken));

    Task<byte[]> downloadMessageContentAsync(string requestId, string messageId, CancellationToken cancellationToken = default(CancellationToken));

    Task<byte[]> downloadMessageContentPreviewAsync(string requestId, string messageId, CancellationToken cancellationToken = default(CancellationToken));

    Task<byte[]> downloadProfileImageAsync(string requestId, CancellationToken cancellationToken = default(CancellationToken));

    Task<byte[]> downloadProfileImagePreviewAsync(string requestId, CancellationToken cancellationToken = default(CancellationToken));

    Task<long> getActiveMemberCountByBuddyMidAsync(string buddyMid, CancellationToken cancellationToken = default(CancellationToken));

    Task<List<string>> getActiveMemberMidsByBuddyMidAsync(string buddyMid, CancellationToken cancellationToken = default(CancellationToken));

    Task<List<string>> getAllBuddyMembersAsync(CancellationToken cancellationToken = default(CancellationToken));

    Task<List<string>> getBlockedBuddyMembersAsync(CancellationToken cancellationToken = default(CancellationToken));

    Task<long> getBlockerCountByBuddyMidAsync(string buddyMid, CancellationToken cancellationToken = default(CancellationToken));

    Task<BuddyDetail> getBuddyDetailByMidAsync(string buddyMid, CancellationToken cancellationToken = default(CancellationToken));

    Task<BuddyProfile> getBuddyProfileAsync(CancellationToken cancellationToken = default(CancellationToken));

    Task<Ticket> getContactTicketAsync(CancellationToken cancellationToken = default(CancellationToken));

    Task<long> getMemberCountByBuddyMidAsync(string buddyMid, CancellationToken cancellationToken = default(CancellationToken));

    Task<SendBuddyMessageResult> getSendBuddyMessageResultAsync(string sendBuddyMessageRequestId, CancellationToken cancellationToken = default(CancellationToken));

    Task<SetBuddyOnAirResult> getSetBuddyOnAirResultAsync(string setBuddyOnAirRequestId, CancellationToken cancellationToken = default(CancellationToken));

    Task<UpdateBuddyProfileResult> getUpdateBuddyProfileResultAsync(string updateBuddyProfileRequestId, CancellationToken cancellationToken = default(CancellationToken));

    Task<bool> isBuddyOnAirByMidAsync(string buddyMid, CancellationToken cancellationToken = default(CancellationToken));

    Task<string> linkAndSendBuddyContentMessageToAllAsyncAsync(string requestId, Message msg, string sourceContentId, CancellationToken cancellationToken = default(CancellationToken));

    Task<SendBuddyMessageResult> linkAndSendBuddyContentMessageToMidsAsync(string requestId, Message msg, string sourceContentId, List<string> mids, CancellationToken cancellationToken = default(CancellationToken));

    Task notifyBuddyBlockedAsync(string buddyMid, string blockerMid, CancellationToken cancellationToken = default(CancellationToken));

    Task notifyBuddyUnblockedAsync(string buddyMid, string blockerMid, CancellationToken cancellationToken = default(CancellationToken));

    Task<string> registerBuddyAsync(string buddyId, string searchId, string displayName, string statusMeessage, byte[] picture, Dictionary<string, string> settings, CancellationToken cancellationToken = default(CancellationToken));

    Task<string> registerBuddyAdminAsync(string buddyId, string searchId, string displayName, string statusMessage, byte[] picture, CancellationToken cancellationToken = default(CancellationToken));

    Task<string> reissueContactTicketAsync(long expirationTime, int maxUseCount, CancellationToken cancellationToken = default(CancellationToken));

    Task removeBuddyMemberAsync(string requestId, string userMid, CancellationToken cancellationToken = default(CancellationToken));

    Task removeBuddyMembersAsync(string requestId, List<string> userMids, CancellationToken cancellationToken = default(CancellationToken));

    Task<SendBuddyMessageResult> sendBuddyContentMessageToAllAsync(string requestId, Message msg, byte[] content, CancellationToken cancellationToken = default(CancellationToken));

    Task<string> sendBuddyContentMessageToAllAsyncAsync(string requestId, Message msg, byte[] content, CancellationToken cancellationToken = default(CancellationToken));

    Task<SendBuddyMessageResult> sendBuddyContentMessageToMidsAsync(string requestId, Message msg, byte[] content, List<string> mids, CancellationToken cancellationToken = default(CancellationToken));

    Task<string> sendBuddyContentMessageToMidsAsyncAsync(string requestId, Message msg, byte[] content, List<string> mids, CancellationToken cancellationToken = default(CancellationToken));

    Task<SendBuddyMessageResult> sendBuddyMessageToAllAsync(string requestId, Message msg, CancellationToken cancellationToken = default(CancellationToken));

    Task<string> sendBuddyMessageToAllAsyncAsync(string requestId, Message msg, CancellationToken cancellationToken = default(CancellationToken));

    Task<SendBuddyMessageResult> sendBuddyMessageToMidsAsync(string requestId, Message msg, List<string> mids, CancellationToken cancellationToken = default(CancellationToken));

    Task<string> sendBuddyMessageToMidsAsyncAsync(string requestId, Message msg, List<string> mids, CancellationToken cancellationToken = default(CancellationToken));

    Task sendIndividualEventToAllAsyncAsync(string requestId, string buddyMid, NotificationStatus notificationStatus, CancellationToken cancellationToken = default(CancellationToken));

    Task<SetBuddyOnAirResult> setBuddyOnAirAsync(string requestId, bool onAir, CancellationToken cancellationToken = default(CancellationToken));

    Task<string> setBuddyOnAirAsyncAsync(string requestId, bool onAir, CancellationToken cancellationToken = default(CancellationToken));

    Task<SendBuddyMessageResult> storeMessageAsync(string requestId, BuddyMessageRequest messageRequest, CancellationToken cancellationToken = default(CancellationToken));

    Task unblockBuddyMemberAsync(string requestId, string mid, CancellationToken cancellationToken = default(CancellationToken));

    Task unregisterBuddyAsync(string requestId, CancellationToken cancellationToken = default(CancellationToken));

    Task unregisterBuddyAdminAsync(string requestId, CancellationToken cancellationToken = default(CancellationToken));

    Task updateBuddyAdminProfileAttributeAsync(string requestId, Dictionary<string, string> attributes, CancellationToken cancellationToken = default(CancellationToken));

    Task updateBuddyAdminProfileImageAsync(string requestId, byte[] picture, CancellationToken cancellationToken = default(CancellationToken));

    Task<UpdateBuddyProfileResult> updateBuddyProfileAttributesAsync(string requestId, Dictionary<string, string> attributes, CancellationToken cancellationToken = default(CancellationToken));

    Task<string> updateBuddyProfileAttributesAsyncAsync(string requestId, Dictionary<string, string> attributes, CancellationToken cancellationToken = default(CancellationToken));

    Task<UpdateBuddyProfileResult> updateBuddyProfileImageAsync(string requestId, byte[] image, CancellationToken cancellationToken = default(CancellationToken));

    Task<string> updateBuddyProfileImageAsyncAsync(string requestId, byte[] image, CancellationToken cancellationToken = default(CancellationToken));

    Task updateBuddySearchIdAsync(string requestId, string searchId, CancellationToken cancellationToken = default(CancellationToken));

    Task updateBuddySettingsAsync(Dictionary<string, string> settings, CancellationToken cancellationToken = default(CancellationToken));

    Task<string> uploadBuddyContentAsync(ContentType contentType, byte[] content, CancellationToken cancellationToken = default(CancellationToken));

  }


  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)    {
    }
    public async Task addBuddyMemberAsync(string requestId, string userMid, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("addBuddyMember", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new addBuddyMemberArgs();
      args.RequestId = requestId;
      args.UserMid = userMid;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new addBuddyMemberResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.e)
      {
        throw result.E;
      }
      return;
    }

    public async Task addBuddyMembersAsync(string requestId, List<string> userMids, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("addBuddyMembers", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new addBuddyMembersArgs();
      args.RequestId = requestId;
      args.UserMids = userMids;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new addBuddyMembersResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.e)
      {
        throw result.E;
      }
      return;
    }

    public async Task blockBuddyMemberAsync(string requestId, string mid, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("blockBuddyMember", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new blockBuddyMemberArgs();
      args.RequestId = requestId;
      args.Mid = mid;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new blockBuddyMemberResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.e)
      {
        throw result.E;
      }
      return;
    }

    public async Task<List<SendBuddyMessageResult>> commitSendMessagesToAllAsync(List<string> requestIdList, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("commitSendMessagesToAll", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new commitSendMessagesToAllArgs();
      args.RequestIdList = requestIdList;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new commitSendMessagesToAllResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "commitSendMessagesToAll failed: unknown result");
    }

    public async Task<List<SendBuddyMessageResult>> commitSendMessagesToMidsAsync(List<string> requestIdList, List<string> mids, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("commitSendMessagesToMids", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new commitSendMessagesToMidsArgs();
      args.RequestIdList = requestIdList;
      args.Mids = mids;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new commitSendMessagesToMidsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "commitSendMessagesToMids failed: unknown result");
    }

    public async Task<bool> containsBuddyMemberAsync(string requestId, string userMid, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("containsBuddyMember", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new containsBuddyMemberArgs();
      args.RequestId = requestId;
      args.UserMid = userMid;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new containsBuddyMemberResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "containsBuddyMember failed: unknown result");
    }

    public async Task<byte[]> downloadMessageContentAsync(string requestId, string messageId, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("downloadMessageContent", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new downloadMessageContentArgs();
      args.RequestId = requestId;
      args.MessageId = messageId;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new downloadMessageContentResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "downloadMessageContent failed: unknown result");
    }

    public async Task<byte[]> downloadMessageContentPreviewAsync(string requestId, string messageId, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("downloadMessageContentPreview", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new downloadMessageContentPreviewArgs();
      args.RequestId = requestId;
      args.MessageId = messageId;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new downloadMessageContentPreviewResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "downloadMessageContentPreview failed: unknown result");
    }

    public async Task<byte[]> downloadProfileImageAsync(string requestId, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("downloadProfileImage", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new downloadProfileImageArgs();
      args.RequestId = requestId;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new downloadProfileImageResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "downloadProfileImage failed: unknown result");
    }

    public async Task<byte[]> downloadProfileImagePreviewAsync(string requestId, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("downloadProfileImagePreview", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new downloadProfileImagePreviewArgs();
      args.RequestId = requestId;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new downloadProfileImagePreviewResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "downloadProfileImagePreview failed: unknown result");
    }

    public async Task<long> getActiveMemberCountByBuddyMidAsync(string buddyMid, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getActiveMemberCountByBuddyMid", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getActiveMemberCountByBuddyMidArgs();
      args.BuddyMid = buddyMid;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getActiveMemberCountByBuddyMidResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getActiveMemberCountByBuddyMid failed: unknown result");
    }

    public async Task<List<string>> getActiveMemberMidsByBuddyMidAsync(string buddyMid, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getActiveMemberMidsByBuddyMid", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getActiveMemberMidsByBuddyMidArgs();
      args.BuddyMid = buddyMid;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getActiveMemberMidsByBuddyMidResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getActiveMemberMidsByBuddyMid failed: unknown result");
    }

    public async Task<List<string>> getAllBuddyMembersAsync(CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getAllBuddyMembers", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getAllBuddyMembersArgs();
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getAllBuddyMembersResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllBuddyMembers failed: unknown result");
    }

    public async Task<List<string>> getBlockedBuddyMembersAsync(CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getBlockedBuddyMembers", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getBlockedBuddyMembersArgs();
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getBlockedBuddyMembersResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBlockedBuddyMembers failed: unknown result");
    }

    public async Task<long> getBlockerCountByBuddyMidAsync(string buddyMid, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getBlockerCountByBuddyMid", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getBlockerCountByBuddyMidArgs();
      args.BuddyMid = buddyMid;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getBlockerCountByBuddyMidResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBlockerCountByBuddyMid failed: unknown result");
    }

    public async Task<BuddyDetail> getBuddyDetailByMidAsync(string buddyMid, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getBuddyDetailByMid", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getBuddyDetailByMidArgs();
      args.BuddyMid = buddyMid;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getBuddyDetailByMidResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBuddyDetailByMid failed: unknown result");
    }

    public async Task<BuddyProfile> getBuddyProfileAsync(CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getBuddyProfile", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getBuddyProfileArgs();
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getBuddyProfileResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBuddyProfile failed: unknown result");
    }

    public async Task<Ticket> getContactTicketAsync(CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getContactTicket", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getContactTicketArgs();
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getContactTicketResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getContactTicket failed: unknown result");
    }

    public async Task<long> getMemberCountByBuddyMidAsync(string buddyMid, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getMemberCountByBuddyMid", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getMemberCountByBuddyMidArgs();
      args.BuddyMid = buddyMid;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getMemberCountByBuddyMidResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMemberCountByBuddyMid failed: unknown result");
    }

    public async Task<SendBuddyMessageResult> getSendBuddyMessageResultAsync(string sendBuddyMessageRequestId, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getSendBuddyMessageResult", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getSendBuddyMessageResultArgs();
      args.SendBuddyMessageRequestId = sendBuddyMessageRequestId;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getSendBuddyMessageResultResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSendBuddyMessageResult failed: unknown result");
    }

    public async Task<SetBuddyOnAirResult> getSetBuddyOnAirResultAsync(string setBuddyOnAirRequestId, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getSetBuddyOnAirResult", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getSetBuddyOnAirResultArgs();
      args.SetBuddyOnAirRequestId = setBuddyOnAirRequestId;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getSetBuddyOnAirResultResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSetBuddyOnAirResult failed: unknown result");
    }

    public async Task<UpdateBuddyProfileResult> getUpdateBuddyProfileResultAsync(string updateBuddyProfileRequestId, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getUpdateBuddyProfileResult", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getUpdateBuddyProfileResultArgs();
      args.UpdateBuddyProfileRequestId = updateBuddyProfileRequestId;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getUpdateBuddyProfileResultResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUpdateBuddyProfileResult failed: unknown result");
    }

    public async Task<bool> isBuddyOnAirByMidAsync(string buddyMid, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("isBuddyOnAirByMid", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new isBuddyOnAirByMidArgs();
      args.BuddyMid = buddyMid;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new isBuddyOnAirByMidResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isBuddyOnAirByMid failed: unknown result");
    }

    public async Task<string> linkAndSendBuddyContentMessageToAllAsyncAsync(string requestId, Message msg, string sourceContentId, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("linkAndSendBuddyContentMessageToAllAsyncAsync", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new linkAndSendBuddyContentMessageToAllAsyncArgs();
      args.RequestId = requestId;
      args.Msg = msg;
      args.SourceContentId = sourceContentId;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new linkAndSendBuddyContentMessageToAllAsyncResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "linkAndSendBuddyContentMessageToAllAsyncAsync failed: unknown result");
    }

    public async Task<SendBuddyMessageResult> linkAndSendBuddyContentMessageToMidsAsync(string requestId, Message msg, string sourceContentId, List<string> mids, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("linkAndSendBuddyContentMessageToMids", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new linkAndSendBuddyContentMessageToMidsArgs();
      args.RequestId = requestId;
      args.Msg = msg;
      args.SourceContentId = sourceContentId;
      args.Mids = mids;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new linkAndSendBuddyContentMessageToMidsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "linkAndSendBuddyContentMessageToMids failed: unknown result");
    }

    public async Task notifyBuddyBlockedAsync(string buddyMid, string blockerMid, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("notifyBuddyBlocked", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new notifyBuddyBlockedArgs();
      args.BuddyMid = buddyMid;
      args.BlockerMid = blockerMid;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new notifyBuddyBlockedResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.e)
      {
        throw result.E;
      }
      return;
    }

    public async Task notifyBuddyUnblockedAsync(string buddyMid, string blockerMid, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("notifyBuddyUnblocked", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new notifyBuddyUnblockedArgs();
      args.BuddyMid = buddyMid;
      args.BlockerMid = blockerMid;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new notifyBuddyUnblockedResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.e)
      {
        throw result.E;
      }
      return;
    }

    public async Task<string> registerBuddyAsync(string buddyId, string searchId, string displayName, string statusMeessage, byte[] picture, Dictionary<string, string> settings, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerBuddy", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new registerBuddyArgs();
      args.BuddyId = buddyId;
      args.SearchId = searchId;
      args.DisplayName = displayName;
      args.StatusMeessage = statusMeessage;
      args.Picture = picture;
      args.Settings = settings;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new registerBuddyResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerBuddy failed: unknown result");
    }

    public async Task<string> registerBuddyAdminAsync(string buddyId, string searchId, string displayName, string statusMessage, byte[] picture, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerBuddyAdmin", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new registerBuddyAdminArgs();
      args.BuddyId = buddyId;
      args.SearchId = searchId;
      args.DisplayName = displayName;
      args.StatusMessage = statusMessage;
      args.Picture = picture;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new registerBuddyAdminResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerBuddyAdmin failed: unknown result");
    }

    public async Task<string> reissueContactTicketAsync(long expirationTime, int maxUseCount, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("reissueContactTicket", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new reissueContactTicketArgs();
      args.ExpirationTime = expirationTime;
      args.MaxUseCount = maxUseCount;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new reissueContactTicketResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reissueContactTicket failed: unknown result");
    }

    public async Task removeBuddyMemberAsync(string requestId, string userMid, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeBuddyMember", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new removeBuddyMemberArgs();
      args.RequestId = requestId;
      args.UserMid = userMid;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new removeBuddyMemberResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.e)
      {
        throw result.E;
      }
      return;
    }

    public async Task removeBuddyMembersAsync(string requestId, List<string> userMids, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeBuddyMembers", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new removeBuddyMembersArgs();
      args.RequestId = requestId;
      args.UserMids = userMids;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new removeBuddyMembersResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.e)
      {
        throw result.E;
      }
      return;
    }

    public async Task<SendBuddyMessageResult> sendBuddyContentMessageToAllAsync(string requestId, Message msg, byte[] content, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sendBuddyContentMessageToAll", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new sendBuddyContentMessageToAllArgs();
      args.RequestId = requestId;
      args.Msg = msg;
      args.Content = content;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new sendBuddyContentMessageToAllResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendBuddyContentMessageToAll failed: unknown result");
    }

    public async Task<string> sendBuddyContentMessageToAllAsyncAsync(string requestId, Message msg, byte[] content, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sendBuddyContentMessageToAllAsyncAsync", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new sendBuddyContentMessageToAllAsyncArgs();
      args.RequestId = requestId;
      args.Msg = msg;
      args.Content = content;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new sendBuddyContentMessageToAllAsyncResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendBuddyContentMessageToAllAsyncAsync failed: unknown result");
    }

    public async Task<SendBuddyMessageResult> sendBuddyContentMessageToMidsAsync(string requestId, Message msg, byte[] content, List<string> mids, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sendBuddyContentMessageToMids", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new sendBuddyContentMessageToMidsArgs();
      args.RequestId = requestId;
      args.Msg = msg;
      args.Content = content;
      args.Mids = mids;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new sendBuddyContentMessageToMidsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendBuddyContentMessageToMids failed: unknown result");
    }

    public async Task<string> sendBuddyContentMessageToMidsAsyncAsync(string requestId, Message msg, byte[] content, List<string> mids, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sendBuddyContentMessageToMidsAsyncAsync", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new sendBuddyContentMessageToMidsAsyncArgs();
      args.RequestId = requestId;
      args.Msg = msg;
      args.Content = content;
      args.Mids = mids;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new sendBuddyContentMessageToMidsAsyncResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendBuddyContentMessageToMidsAsyncAsync failed: unknown result");
    }

    public async Task<SendBuddyMessageResult> sendBuddyMessageToAllAsync(string requestId, Message msg, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sendBuddyMessageToAll", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new sendBuddyMessageToAllArgs();
      args.RequestId = requestId;
      args.Msg = msg;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new sendBuddyMessageToAllResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendBuddyMessageToAll failed: unknown result");
    }

    public async Task<string> sendBuddyMessageToAllAsyncAsync(string requestId, Message msg, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sendBuddyMessageToAllAsyncAsync", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new sendBuddyMessageToAllAsyncArgs();
      args.RequestId = requestId;
      args.Msg = msg;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new sendBuddyMessageToAllAsyncResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendBuddyMessageToAllAsyncAsync failed: unknown result");
    }

    public async Task<SendBuddyMessageResult> sendBuddyMessageToMidsAsync(string requestId, Message msg, List<string> mids, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sendBuddyMessageToMids", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new sendBuddyMessageToMidsArgs();
      args.RequestId = requestId;
      args.Msg = msg;
      args.Mids = mids;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new sendBuddyMessageToMidsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendBuddyMessageToMids failed: unknown result");
    }

    public async Task<string> sendBuddyMessageToMidsAsyncAsync(string requestId, Message msg, List<string> mids, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sendBuddyMessageToMidsAsyncAsync", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new sendBuddyMessageToMidsAsyncArgs();
      args.RequestId = requestId;
      args.Msg = msg;
      args.Mids = mids;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new sendBuddyMessageToMidsAsyncResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendBuddyMessageToMidsAsyncAsync failed: unknown result");
    }

    public async Task sendIndividualEventToAllAsyncAsync(string requestId, string buddyMid, NotificationStatus notificationStatus, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sendIndividualEventToAllAsyncAsync", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new sendIndividualEventToAllAsyncArgs();
      args.RequestId = requestId;
      args.BuddyMid = buddyMid;
      args.NotificationStatus = notificationStatus;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new sendIndividualEventToAllAsyncResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.e)
      {
        throw result.E;
      }
      return;
    }

    public async Task<SetBuddyOnAirResult> setBuddyOnAirAsync(string requestId, bool onAir, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("setBuddyOnAir", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new setBuddyOnAirArgs();
      args.RequestId = requestId;
      args.OnAir = onAir;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new setBuddyOnAirResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setBuddyOnAir failed: unknown result");
    }

    public async Task<string> setBuddyOnAirAsyncAsync(string requestId, bool onAir, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("setBuddyOnAirAsyncAsync", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new setBuddyOnAirAsyncArgs();
      args.RequestId = requestId;
      args.OnAir = onAir;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new setBuddyOnAirAsyncResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setBuddyOnAirAsyncAsync failed: unknown result");
    }

    public async Task<SendBuddyMessageResult> storeMessageAsync(string requestId, BuddyMessageRequest messageRequest, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("storeMessage", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new storeMessageArgs();
      args.RequestId = requestId;
      args.MessageRequest = messageRequest;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new storeMessageResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "storeMessage failed: unknown result");
    }

    public async Task unblockBuddyMemberAsync(string requestId, string mid, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("unblockBuddyMember", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new unblockBuddyMemberArgs();
      args.RequestId = requestId;
      args.Mid = mid;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new unblockBuddyMemberResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.e)
      {
        throw result.E;
      }
      return;
    }

    public async Task unregisterBuddyAsync(string requestId, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterBuddy", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new unregisterBuddyArgs();
      args.RequestId = requestId;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new unregisterBuddyResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.e)
      {
        throw result.E;
      }
      return;
    }

    public async Task unregisterBuddyAdminAsync(string requestId, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("unregisterBuddyAdmin", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new unregisterBuddyAdminArgs();
      args.RequestId = requestId;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new unregisterBuddyAdminResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.e)
      {
        throw result.E;
      }
      return;
    }

    public async Task updateBuddyAdminProfileAttributeAsync(string requestId, Dictionary<string, string> attributes, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateBuddyAdminProfileAttribute", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new updateBuddyAdminProfileAttributeArgs();
      args.RequestId = requestId;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new updateBuddyAdminProfileAttributeResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.e)
      {
        throw result.E;
      }
      return;
    }

    public async Task updateBuddyAdminProfileImageAsync(string requestId, byte[] picture, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateBuddyAdminProfileImage", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new updateBuddyAdminProfileImageArgs();
      args.RequestId = requestId;
      args.Picture = picture;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new updateBuddyAdminProfileImageResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.e)
      {
        throw result.E;
      }
      return;
    }

    public async Task<UpdateBuddyProfileResult> updateBuddyProfileAttributesAsync(string requestId, Dictionary<string, string> attributes, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateBuddyProfileAttributes", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new updateBuddyProfileAttributesArgs();
      args.RequestId = requestId;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new updateBuddyProfileAttributesResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateBuddyProfileAttributes failed: unknown result");
    }

    public async Task<string> updateBuddyProfileAttributesAsyncAsync(string requestId, Dictionary<string, string> attributes, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateBuddyProfileAttributesAsyncAsync", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new updateBuddyProfileAttributesAsyncArgs();
      args.RequestId = requestId;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new updateBuddyProfileAttributesAsyncResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateBuddyProfileAttributesAsyncAsync failed: unknown result");
    }

    public async Task<UpdateBuddyProfileResult> updateBuddyProfileImageAsync(string requestId, byte[] image, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateBuddyProfileImage", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new updateBuddyProfileImageArgs();
      args.RequestId = requestId;
      args.Image = image;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new updateBuddyProfileImageResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateBuddyProfileImage failed: unknown result");
    }

    public async Task<string> updateBuddyProfileImageAsyncAsync(string requestId, byte[] image, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateBuddyProfileImageAsyncAsync", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new updateBuddyProfileImageAsyncArgs();
      args.RequestId = requestId;
      args.Image = image;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new updateBuddyProfileImageAsyncResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateBuddyProfileImageAsyncAsync failed: unknown result");
    }

    public async Task updateBuddySearchIdAsync(string requestId, string searchId, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateBuddySearchId", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new updateBuddySearchIdArgs();
      args.RequestId = requestId;
      args.SearchId = searchId;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new updateBuddySearchIdResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.e)
      {
        throw result.E;
      }
      return;
    }

    public async Task updateBuddySettingsAsync(Dictionary<string, string> settings, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateBuddySettings", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new updateBuddySettingsArgs();
      args.Settings = settings;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new updateBuddySettingsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.e)
      {
        throw result.E;
      }
      return;
    }

    public async Task<string> uploadBuddyContentAsync(ContentType contentType, byte[] content, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("uploadBuddyContent", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new uploadBuddyContentArgs();
      args.ContentType = contentType;
      args.Content = content;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new uploadBuddyContentResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "uploadBuddyContent failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private IAsync _iAsync;

    public AsyncProcessor(IAsync iAsync)
    {
      if (iAsync == null) throw new ArgumentNullException(nameof(iAsync));

      _iAsync = iAsync;
      processMap_["addBuddyMember"] = addBuddyMember_ProcessAsync;
      processMap_["addBuddyMembers"] = addBuddyMembers_ProcessAsync;
      processMap_["blockBuddyMember"] = blockBuddyMember_ProcessAsync;
      processMap_["commitSendMessagesToAll"] = commitSendMessagesToAll_ProcessAsync;
      processMap_["commitSendMessagesToMids"] = commitSendMessagesToMids_ProcessAsync;
      processMap_["containsBuddyMember"] = containsBuddyMember_ProcessAsync;
      processMap_["downloadMessageContent"] = downloadMessageContent_ProcessAsync;
      processMap_["downloadMessageContentPreview"] = downloadMessageContentPreview_ProcessAsync;
      processMap_["downloadProfileImage"] = downloadProfileImage_ProcessAsync;
      processMap_["downloadProfileImagePreview"] = downloadProfileImagePreview_ProcessAsync;
      processMap_["getActiveMemberCountByBuddyMid"] = getActiveMemberCountByBuddyMid_ProcessAsync;
      processMap_["getActiveMemberMidsByBuddyMid"] = getActiveMemberMidsByBuddyMid_ProcessAsync;
      processMap_["getAllBuddyMembers"] = getAllBuddyMembers_ProcessAsync;
      processMap_["getBlockedBuddyMembers"] = getBlockedBuddyMembers_ProcessAsync;
      processMap_["getBlockerCountByBuddyMid"] = getBlockerCountByBuddyMid_ProcessAsync;
      processMap_["getBuddyDetailByMid"] = getBuddyDetailByMid_ProcessAsync;
      processMap_["getBuddyProfile"] = getBuddyProfile_ProcessAsync;
      processMap_["getContactTicket"] = getContactTicket_ProcessAsync;
      processMap_["getMemberCountByBuddyMid"] = getMemberCountByBuddyMid_ProcessAsync;
      processMap_["getSendBuddyMessageResult"] = getSendBuddyMessageResult_ProcessAsync;
      processMap_["getSetBuddyOnAirResult"] = getSetBuddyOnAirResult_ProcessAsync;
      processMap_["getUpdateBuddyProfileResult"] = getUpdateBuddyProfileResult_ProcessAsync;
      processMap_["isBuddyOnAirByMid"] = isBuddyOnAirByMid_ProcessAsync;
      processMap_["linkAndSendBuddyContentMessageToAllAsyncAsync"] = linkAndSendBuddyContentMessageToAllAsync_ProcessAsync;
      processMap_["linkAndSendBuddyContentMessageToMids"] = linkAndSendBuddyContentMessageToMids_ProcessAsync;
      processMap_["notifyBuddyBlocked"] = notifyBuddyBlocked_ProcessAsync;
      processMap_["notifyBuddyUnblocked"] = notifyBuddyUnblocked_ProcessAsync;
      processMap_["registerBuddy"] = registerBuddy_ProcessAsync;
      processMap_["registerBuddyAdmin"] = registerBuddyAdmin_ProcessAsync;
      processMap_["reissueContactTicket"] = reissueContactTicket_ProcessAsync;
      processMap_["removeBuddyMember"] = removeBuddyMember_ProcessAsync;
      processMap_["removeBuddyMembers"] = removeBuddyMembers_ProcessAsync;
      processMap_["sendBuddyContentMessageToAll"] = sendBuddyContentMessageToAll_ProcessAsync;
      processMap_["sendBuddyContentMessageToAllAsyncAsync"] = sendBuddyContentMessageToAllAsync_ProcessAsync;
      processMap_["sendBuddyContentMessageToMids"] = sendBuddyContentMessageToMids_ProcessAsync;
      processMap_["sendBuddyContentMessageToMidsAsyncAsync"] = sendBuddyContentMessageToMidsAsync_ProcessAsync;
      processMap_["sendBuddyMessageToAll"] = sendBuddyMessageToAll_ProcessAsync;
      processMap_["sendBuddyMessageToAllAsyncAsync"] = sendBuddyMessageToAllAsync_ProcessAsync;
      processMap_["sendBuddyMessageToMids"] = sendBuddyMessageToMids_ProcessAsync;
      processMap_["sendBuddyMessageToMidsAsyncAsync"] = sendBuddyMessageToMidsAsync_ProcessAsync;
      processMap_["sendIndividualEventToAllAsyncAsync"] = sendIndividualEventToAllAsync_ProcessAsync;
      processMap_["setBuddyOnAir"] = setBuddyOnAir_ProcessAsync;
      processMap_["setBuddyOnAirAsyncAsync"] = setBuddyOnAirAsync_ProcessAsync;
      processMap_["storeMessage"] = storeMessage_ProcessAsync;
      processMap_["unblockBuddyMember"] = unblockBuddyMember_ProcessAsync;
      processMap_["unregisterBuddy"] = unregisterBuddy_ProcessAsync;
      processMap_["unregisterBuddyAdmin"] = unregisterBuddyAdmin_ProcessAsync;
      processMap_["updateBuddyAdminProfileAttribute"] = updateBuddyAdminProfileAttribute_ProcessAsync;
      processMap_["updateBuddyAdminProfileImage"] = updateBuddyAdminProfileImage_ProcessAsync;
      processMap_["updateBuddyProfileAttributes"] = updateBuddyProfileAttributes_ProcessAsync;
      processMap_["updateBuddyProfileAttributesAsyncAsync"] = updateBuddyProfileAttributesAsync_ProcessAsync;
      processMap_["updateBuddyProfileImage"] = updateBuddyProfileImage_ProcessAsync;
      processMap_["updateBuddyProfileImageAsyncAsync"] = updateBuddyProfileImageAsync_ProcessAsync;
      processMap_["updateBuddySearchId"] = updateBuddySearchId_ProcessAsync;
      processMap_["updateBuddySettings"] = updateBuddySettings_ProcessAsync;
      processMap_["uploadBuddyContent"] = uploadBuddyContent_ProcessAsync;
    }

    protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async Task addBuddyMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new addBuddyMemberArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new addBuddyMemberResult();
      try
      {
        try
        {
          await _iAsync.addBuddyMemberAsync(args.RequestId, args.UserMid, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("addBuddyMember", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("addBuddyMember", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task addBuddyMembers_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new addBuddyMembersArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new addBuddyMembersResult();
      try
      {
        try
        {
          await _iAsync.addBuddyMembersAsync(args.RequestId, args.UserMids, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("addBuddyMembers", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("addBuddyMembers", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task blockBuddyMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new blockBuddyMemberArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new blockBuddyMemberResult();
      try
      {
        try
        {
          await _iAsync.blockBuddyMemberAsync(args.RequestId, args.Mid, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("blockBuddyMember", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("blockBuddyMember", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task commitSendMessagesToAll_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new commitSendMessagesToAllArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new commitSendMessagesToAllResult();
      try
      {
        try
        {
          result.Success = await _iAsync.commitSendMessagesToAllAsync(args.RequestIdList, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("commitSendMessagesToAll", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("commitSendMessagesToAll", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task commitSendMessagesToMids_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new commitSendMessagesToMidsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new commitSendMessagesToMidsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.commitSendMessagesToMidsAsync(args.RequestIdList, args.Mids, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("commitSendMessagesToMids", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("commitSendMessagesToMids", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task containsBuddyMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new containsBuddyMemberArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new containsBuddyMemberResult();
      try
      {
        try
        {
          result.Success = await _iAsync.containsBuddyMemberAsync(args.RequestId, args.UserMid, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("containsBuddyMember", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("containsBuddyMember", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task downloadMessageContent_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new downloadMessageContentArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new downloadMessageContentResult();
      try
      {
        try
        {
          result.Success = await _iAsync.downloadMessageContentAsync(args.RequestId, args.MessageId, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("downloadMessageContent", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("downloadMessageContent", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task downloadMessageContentPreview_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new downloadMessageContentPreviewArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new downloadMessageContentPreviewResult();
      try
      {
        try
        {
          result.Success = await _iAsync.downloadMessageContentPreviewAsync(args.RequestId, args.MessageId, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("downloadMessageContentPreview", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("downloadMessageContentPreview", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task downloadProfileImage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new downloadProfileImageArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new downloadProfileImageResult();
      try
      {
        try
        {
          result.Success = await _iAsync.downloadProfileImageAsync(args.RequestId, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("downloadProfileImage", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("downloadProfileImage", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task downloadProfileImagePreview_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new downloadProfileImagePreviewArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new downloadProfileImagePreviewResult();
      try
      {
        try
        {
          result.Success = await _iAsync.downloadProfileImagePreviewAsync(args.RequestId, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("downloadProfileImagePreview", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("downloadProfileImagePreview", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getActiveMemberCountByBuddyMid_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getActiveMemberCountByBuddyMidArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getActiveMemberCountByBuddyMidResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getActiveMemberCountByBuddyMidAsync(args.BuddyMid, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getActiveMemberCountByBuddyMid", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getActiveMemberCountByBuddyMid", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getActiveMemberMidsByBuddyMid_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getActiveMemberMidsByBuddyMidArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getActiveMemberMidsByBuddyMidResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getActiveMemberMidsByBuddyMidAsync(args.BuddyMid, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getActiveMemberMidsByBuddyMid", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getActiveMemberMidsByBuddyMid", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getAllBuddyMembers_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getAllBuddyMembersArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getAllBuddyMembersResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getAllBuddyMembersAsync(cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getAllBuddyMembers", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getAllBuddyMembers", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getBlockedBuddyMembers_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getBlockedBuddyMembersArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getBlockedBuddyMembersResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getBlockedBuddyMembersAsync(cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getBlockedBuddyMembers", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getBlockedBuddyMembers", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getBlockerCountByBuddyMid_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getBlockerCountByBuddyMidArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getBlockerCountByBuddyMidResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getBlockerCountByBuddyMidAsync(args.BuddyMid, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getBlockerCountByBuddyMid", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getBlockerCountByBuddyMid", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getBuddyDetailByMid_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getBuddyDetailByMidArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getBuddyDetailByMidResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getBuddyDetailByMidAsync(args.BuddyMid, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getBuddyDetailByMid", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getBuddyDetailByMid", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getBuddyProfile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getBuddyProfileArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getBuddyProfileResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getBuddyProfileAsync(cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getBuddyProfile", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getBuddyProfile", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getContactTicket_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getContactTicketArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getContactTicketResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getContactTicketAsync(cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getContactTicket", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getContactTicket", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getMemberCountByBuddyMid_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getMemberCountByBuddyMidArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getMemberCountByBuddyMidResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getMemberCountByBuddyMidAsync(args.BuddyMid, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getMemberCountByBuddyMid", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getMemberCountByBuddyMid", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getSendBuddyMessageResult_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getSendBuddyMessageResultArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getSendBuddyMessageResultResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getSendBuddyMessageResultAsync(args.SendBuddyMessageRequestId, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getSendBuddyMessageResult", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getSendBuddyMessageResult", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getSetBuddyOnAirResult_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getSetBuddyOnAirResultArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getSetBuddyOnAirResultResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getSetBuddyOnAirResultAsync(args.SetBuddyOnAirRequestId, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getSetBuddyOnAirResult", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getSetBuddyOnAirResult", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getUpdateBuddyProfileResult_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getUpdateBuddyProfileResultArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getUpdateBuddyProfileResultResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getUpdateBuddyProfileResultAsync(args.UpdateBuddyProfileRequestId, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getUpdateBuddyProfileResult", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getUpdateBuddyProfileResult", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task isBuddyOnAirByMid_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new isBuddyOnAirByMidArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new isBuddyOnAirByMidResult();
      try
      {
        try
        {
          result.Success = await _iAsync.isBuddyOnAirByMidAsync(args.BuddyMid, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("isBuddyOnAirByMid", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("isBuddyOnAirByMid", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task linkAndSendBuddyContentMessageToAllAsync_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new linkAndSendBuddyContentMessageToAllAsyncArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new linkAndSendBuddyContentMessageToAllAsyncResult();
      try
      {
        try
        {
          result.Success = await _iAsync.linkAndSendBuddyContentMessageToAllAsyncAsync(args.RequestId, args.Msg, args.SourceContentId, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("linkAndSendBuddyContentMessageToAllAsyncAsync", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("linkAndSendBuddyContentMessageToAllAsyncAsync", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task linkAndSendBuddyContentMessageToMids_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new linkAndSendBuddyContentMessageToMidsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new linkAndSendBuddyContentMessageToMidsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.linkAndSendBuddyContentMessageToMidsAsync(args.RequestId, args.Msg, args.SourceContentId, args.Mids, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("linkAndSendBuddyContentMessageToMids", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("linkAndSendBuddyContentMessageToMids", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task notifyBuddyBlocked_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new notifyBuddyBlockedArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new notifyBuddyBlockedResult();
      try
      {
        try
        {
          await _iAsync.notifyBuddyBlockedAsync(args.BuddyMid, args.BlockerMid, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("notifyBuddyBlocked", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("notifyBuddyBlocked", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task notifyBuddyUnblocked_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new notifyBuddyUnblockedArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new notifyBuddyUnblockedResult();
      try
      {
        try
        {
          await _iAsync.notifyBuddyUnblockedAsync(args.BuddyMid, args.BlockerMid, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("notifyBuddyUnblocked", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("notifyBuddyUnblocked", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task registerBuddy_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new registerBuddyArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new registerBuddyResult();
      try
      {
        try
        {
          result.Success = await _iAsync.registerBuddyAsync(args.BuddyId, args.SearchId, args.DisplayName, args.StatusMeessage, args.Picture, args.Settings, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("registerBuddy", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("registerBuddy", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task registerBuddyAdmin_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new registerBuddyAdminArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new registerBuddyAdminResult();
      try
      {
        try
        {
          result.Success = await _iAsync.registerBuddyAdminAsync(args.BuddyId, args.SearchId, args.DisplayName, args.StatusMessage, args.Picture, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("registerBuddyAdmin", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("registerBuddyAdmin", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task reissueContactTicket_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new reissueContactTicketArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new reissueContactTicketResult();
      try
      {
        try
        {
          result.Success = await _iAsync.reissueContactTicketAsync(args.ExpirationTime, args.MaxUseCount, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("reissueContactTicket", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("reissueContactTicket", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task removeBuddyMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new removeBuddyMemberArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new removeBuddyMemberResult();
      try
      {
        try
        {
          await _iAsync.removeBuddyMemberAsync(args.RequestId, args.UserMid, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("removeBuddyMember", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("removeBuddyMember", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task removeBuddyMembers_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new removeBuddyMembersArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new removeBuddyMembersResult();
      try
      {
        try
        {
          await _iAsync.removeBuddyMembersAsync(args.RequestId, args.UserMids, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("removeBuddyMembers", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("removeBuddyMembers", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task sendBuddyContentMessageToAll_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new sendBuddyContentMessageToAllArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new sendBuddyContentMessageToAllResult();
      try
      {
        try
        {
          result.Success = await _iAsync.sendBuddyContentMessageToAllAsync(args.RequestId, args.Msg, args.Content, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sendBuddyContentMessageToAll", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sendBuddyContentMessageToAll", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task sendBuddyContentMessageToAllAsync_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new sendBuddyContentMessageToAllAsyncArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new sendBuddyContentMessageToAllAsyncResult();
      try
      {
        try
        {
          result.Success = await _iAsync.sendBuddyContentMessageToAllAsyncAsync(args.RequestId, args.Msg, args.Content, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sendBuddyContentMessageToAllAsyncAsync", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sendBuddyContentMessageToAllAsyncAsync", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task sendBuddyContentMessageToMids_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new sendBuddyContentMessageToMidsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new sendBuddyContentMessageToMidsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.sendBuddyContentMessageToMidsAsync(args.RequestId, args.Msg, args.Content, args.Mids, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sendBuddyContentMessageToMids", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sendBuddyContentMessageToMids", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task sendBuddyContentMessageToMidsAsync_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new sendBuddyContentMessageToMidsAsyncArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new sendBuddyContentMessageToMidsAsyncResult();
      try
      {
        try
        {
          result.Success = await _iAsync.sendBuddyContentMessageToMidsAsyncAsync(args.RequestId, args.Msg, args.Content, args.Mids, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sendBuddyContentMessageToMidsAsyncAsync", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sendBuddyContentMessageToMidsAsyncAsync", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task sendBuddyMessageToAll_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new sendBuddyMessageToAllArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new sendBuddyMessageToAllResult();
      try
      {
        try
        {
          result.Success = await _iAsync.sendBuddyMessageToAllAsync(args.RequestId, args.Msg, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sendBuddyMessageToAll", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sendBuddyMessageToAll", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task sendBuddyMessageToAllAsync_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new sendBuddyMessageToAllAsyncArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new sendBuddyMessageToAllAsyncResult();
      try
      {
        try
        {
          result.Success = await _iAsync.sendBuddyMessageToAllAsyncAsync(args.RequestId, args.Msg, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sendBuddyMessageToAllAsyncAsync", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sendBuddyMessageToAllAsyncAsync", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task sendBuddyMessageToMids_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new sendBuddyMessageToMidsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new sendBuddyMessageToMidsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.sendBuddyMessageToMidsAsync(args.RequestId, args.Msg, args.Mids, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sendBuddyMessageToMids", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sendBuddyMessageToMids", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task sendBuddyMessageToMidsAsync_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new sendBuddyMessageToMidsAsyncArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new sendBuddyMessageToMidsAsyncResult();
      try
      {
        try
        {
          result.Success = await _iAsync.sendBuddyMessageToMidsAsyncAsync(args.RequestId, args.Msg, args.Mids, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sendBuddyMessageToMidsAsyncAsync", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sendBuddyMessageToMidsAsyncAsync", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task sendIndividualEventToAllAsync_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new sendIndividualEventToAllAsyncArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new sendIndividualEventToAllAsyncResult();
      try
      {
        try
        {
          await _iAsync.sendIndividualEventToAllAsyncAsync(args.RequestId, args.BuddyMid, args.NotificationStatus, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sendIndividualEventToAllAsyncAsync", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sendIndividualEventToAllAsyncAsync", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task setBuddyOnAir_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new setBuddyOnAirArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new setBuddyOnAirResult();
      try
      {
        try
        {
          result.Success = await _iAsync.setBuddyOnAirAsync(args.RequestId, args.OnAir, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("setBuddyOnAir", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("setBuddyOnAir", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task setBuddyOnAirAsync_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new setBuddyOnAirAsyncArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new setBuddyOnAirAsyncResult();
      try
      {
        try
        {
          result.Success = await _iAsync.setBuddyOnAirAsyncAsync(args.RequestId, args.OnAir, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("setBuddyOnAirAsyncAsync", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("setBuddyOnAirAsyncAsync", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task storeMessage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new storeMessageArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new storeMessageResult();
      try
      {
        try
        {
          result.Success = await _iAsync.storeMessageAsync(args.RequestId, args.MessageRequest, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("storeMessage", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("storeMessage", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task unblockBuddyMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new unblockBuddyMemberArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new unblockBuddyMemberResult();
      try
      {
        try
        {
          await _iAsync.unblockBuddyMemberAsync(args.RequestId, args.Mid, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("unblockBuddyMember", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("unblockBuddyMember", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task unregisterBuddy_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new unregisterBuddyArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new unregisterBuddyResult();
      try
      {
        try
        {
          await _iAsync.unregisterBuddyAsync(args.RequestId, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("unregisterBuddy", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("unregisterBuddy", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task unregisterBuddyAdmin_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new unregisterBuddyAdminArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new unregisterBuddyAdminResult();
      try
      {
        try
        {
          await _iAsync.unregisterBuddyAdminAsync(args.RequestId, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("unregisterBuddyAdmin", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("unregisterBuddyAdmin", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task updateBuddyAdminProfileAttribute_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new updateBuddyAdminProfileAttributeArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new updateBuddyAdminProfileAttributeResult();
      try
      {
        try
        {
          await _iAsync.updateBuddyAdminProfileAttributeAsync(args.RequestId, args.Attributes, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updateBuddyAdminProfileAttribute", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updateBuddyAdminProfileAttribute", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task updateBuddyAdminProfileImage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new updateBuddyAdminProfileImageArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new updateBuddyAdminProfileImageResult();
      try
      {
        try
        {
          await _iAsync.updateBuddyAdminProfileImageAsync(args.RequestId, args.Picture, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updateBuddyAdminProfileImage", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updateBuddyAdminProfileImage", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task updateBuddyProfileAttributes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new updateBuddyProfileAttributesArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new updateBuddyProfileAttributesResult();
      try
      {
        try
        {
          result.Success = await _iAsync.updateBuddyProfileAttributesAsync(args.RequestId, args.Attributes, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updateBuddyProfileAttributes", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updateBuddyProfileAttributes", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task updateBuddyProfileAttributesAsync_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new updateBuddyProfileAttributesAsyncArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new updateBuddyProfileAttributesAsyncResult();
      try
      {
        try
        {
          result.Success = await _iAsync.updateBuddyProfileAttributesAsyncAsync(args.RequestId, args.Attributes, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updateBuddyProfileAttributesAsyncAsync", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updateBuddyProfileAttributesAsyncAsync", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task updateBuddyProfileImage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new updateBuddyProfileImageArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new updateBuddyProfileImageResult();
      try
      {
        try
        {
          result.Success = await _iAsync.updateBuddyProfileImageAsync(args.RequestId, args.Image, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updateBuddyProfileImage", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updateBuddyProfileImage", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task updateBuddyProfileImageAsync_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new updateBuddyProfileImageAsyncArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new updateBuddyProfileImageAsyncResult();
      try
      {
        try
        {
          result.Success = await _iAsync.updateBuddyProfileImageAsyncAsync(args.RequestId, args.Image, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updateBuddyProfileImageAsyncAsync", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updateBuddyProfileImageAsyncAsync", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task updateBuddySearchId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new updateBuddySearchIdArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new updateBuddySearchIdResult();
      try
      {
        try
        {
          await _iAsync.updateBuddySearchIdAsync(args.RequestId, args.SearchId, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updateBuddySearchId", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updateBuddySearchId", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task updateBuddySettings_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new updateBuddySettingsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new updateBuddySettingsResult();
      try
      {
        try
        {
          await _iAsync.updateBuddySettingsAsync(args.Settings, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updateBuddySettings", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updateBuddySettings", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task uploadBuddyContent_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new uploadBuddyContentArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new uploadBuddyContentResult();
      try
      {
        try
        {
          result.Success = await _iAsync.uploadBuddyContentAsync(args.ContentType, args.Content, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("uploadBuddyContent", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("uploadBuddyContent", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }


  public partial class addBuddyMemberArgs : TBase
  {
    private string _requestId;
    private string _userMid;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public string UserMid
    {
      get
      {
        return _userMid;
      }
      set
      {
        __isset.userMid = true;
        this._userMid = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool userMid;
    }

    public addBuddyMemberArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                UserMid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("addBuddyMember_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (UserMid != null && __isset.userMid)
        {
          field.Name = "userMid";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(UserMid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as addBuddyMemberArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.userMid == other.__isset.userMid) && ((!__isset.userMid) || (System.Object.Equals(UserMid, other.UserMid))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.userMid)
          hashcode = (hashcode * 397) + UserMid.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("addBuddyMember_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (UserMid != null && __isset.userMid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("UserMid: ");
        sb.Append(UserMid);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class addBuddyMemberResult : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool e;
    }

    public addBuddyMemberResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("addBuddyMember_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as addBuddyMemberResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("addBuddyMember_result(");
      bool __first = true;
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class addBuddyMembersArgs : TBase
  {
    private string _requestId;
    private List<string> _userMids;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public List<string> UserMids
    {
      get
      {
        return _userMids;
      }
      set
      {
        __isset.userMids = true;
        this._userMids = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool userMids;
    }

    public addBuddyMembersArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list550 = await iprot.ReadListBeginAsync(cancellationToken);
                  UserMids = new List<string>(_list550.Count);
                  for(int _i551 = 0; _i551 < _list550.Count; ++_i551)
                  {
                    string _elem552;
                    _elem552 = await iprot.ReadStringAsync(cancellationToken);
                    UserMids.Add(_elem552);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("addBuddyMembers_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (UserMids != null && __isset.userMids)
        {
          field.Name = "userMids";
          field.Type = TType.List;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, UserMids.Count), cancellationToken);
            foreach (string _iter553 in UserMids)
            {
              await oprot.WriteStringAsync(_iter553, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as addBuddyMembersArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.userMids == other.__isset.userMids) && ((!__isset.userMids) || (TCollections.Equals(UserMids, other.UserMids))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.userMids)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(UserMids);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("addBuddyMembers_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (UserMids != null && __isset.userMids)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("UserMids: ");
        sb.Append(UserMids);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class addBuddyMembersResult : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool e;
    }

    public addBuddyMembersResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("addBuddyMembers_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as addBuddyMembersResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("addBuddyMembers_result(");
      bool __first = true;
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class blockBuddyMemberArgs : TBase
  {
    private string _requestId;
    private string _mid;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool mid;
    }

    public blockBuddyMemberArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Mid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("blockBuddyMember_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Mid != null && __isset.mid)
        {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Mid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as blockBuddyMemberArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.mid == other.__isset.mid) && ((!__isset.mid) || (System.Object.Equals(Mid, other.Mid))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.mid)
          hashcode = (hashcode * 397) + Mid.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("blockBuddyMember_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (Mid != null && __isset.mid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Mid: ");
        sb.Append(Mid);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class blockBuddyMemberResult : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool e;
    }

    public blockBuddyMemberResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("blockBuddyMember_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as blockBuddyMemberResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("blockBuddyMember_result(");
      bool __first = true;
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class commitSendMessagesToAllArgs : TBase
  {
    private List<string> _requestIdList;

    public List<string> RequestIdList
    {
      get
      {
        return _requestIdList;
      }
      set
      {
        __isset.requestIdList = true;
        this._requestIdList = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestIdList;
    }

    public commitSendMessagesToAllArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list554 = await iprot.ReadListBeginAsync(cancellationToken);
                  RequestIdList = new List<string>(_list554.Count);
                  for(int _i555 = 0; _i555 < _list554.Count; ++_i555)
                  {
                    string _elem556;
                    _elem556 = await iprot.ReadStringAsync(cancellationToken);
                    RequestIdList.Add(_elem556);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("commitSendMessagesToAll_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestIdList != null && __isset.requestIdList)
        {
          field.Name = "requestIdList";
          field.Type = TType.List;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, RequestIdList.Count), cancellationToken);
            foreach (string _iter557 in RequestIdList)
            {
              await oprot.WriteStringAsync(_iter557, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as commitSendMessagesToAllArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestIdList == other.__isset.requestIdList) && ((!__isset.requestIdList) || (TCollections.Equals(RequestIdList, other.RequestIdList))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestIdList)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(RequestIdList);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("commitSendMessagesToAll_args(");
      bool __first = true;
      if (RequestIdList != null && __isset.requestIdList)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestIdList: ");
        sb.Append(RequestIdList);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class commitSendMessagesToAllResult : TBase
  {
    private List<SendBuddyMessageResult> _success;
    private TalkException _e;

    public List<SendBuddyMessageResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public commitSendMessagesToAllResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  TList _list558 = await iprot.ReadListBeginAsync(cancellationToken);
                  Success = new List<SendBuddyMessageResult>(_list558.Count);
                  for(int _i559 = 0; _i559 < _list558.Count; ++_i559)
                  {
                    SendBuddyMessageResult _elem560;
                    _elem560 = new SendBuddyMessageResult();
                    await _elem560.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem560);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("commitSendMessagesToAll_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (SendBuddyMessageResult _iter561 in Success)
              {
                await _iter561.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as commitSendMessagesToAllResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("commitSendMessagesToAll_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class commitSendMessagesToMidsArgs : TBase
  {
    private List<string> _requestIdList;
    private List<string> _mids;

    public List<string> RequestIdList
    {
      get
      {
        return _requestIdList;
      }
      set
      {
        __isset.requestIdList = true;
        this._requestIdList = value;
      }
    }

    public List<string> Mids
    {
      get
      {
        return _mids;
      }
      set
      {
        __isset.mids = true;
        this._mids = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestIdList;
      public bool mids;
    }

    public commitSendMessagesToMidsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list562 = await iprot.ReadListBeginAsync(cancellationToken);
                  RequestIdList = new List<string>(_list562.Count);
                  for(int _i563 = 0; _i563 < _list562.Count; ++_i563)
                  {
                    string _elem564;
                    _elem564 = await iprot.ReadStringAsync(cancellationToken);
                    RequestIdList.Add(_elem564);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list565 = await iprot.ReadListBeginAsync(cancellationToken);
                  Mids = new List<string>(_list565.Count);
                  for(int _i566 = 0; _i566 < _list565.Count; ++_i566)
                  {
                    string _elem567;
                    _elem567 = await iprot.ReadStringAsync(cancellationToken);
                    Mids.Add(_elem567);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("commitSendMessagesToMids_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestIdList != null && __isset.requestIdList)
        {
          field.Name = "requestIdList";
          field.Type = TType.List;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, RequestIdList.Count), cancellationToken);
            foreach (string _iter568 in RequestIdList)
            {
              await oprot.WriteStringAsync(_iter568, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Mids != null && __isset.mids)
        {
          field.Name = "mids";
          field.Type = TType.List;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Mids.Count), cancellationToken);
            foreach (string _iter569 in Mids)
            {
              await oprot.WriteStringAsync(_iter569, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as commitSendMessagesToMidsArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestIdList == other.__isset.requestIdList) && ((!__isset.requestIdList) || (TCollections.Equals(RequestIdList, other.RequestIdList))))
        && ((__isset.mids == other.__isset.mids) && ((!__isset.mids) || (TCollections.Equals(Mids, other.Mids))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestIdList)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(RequestIdList);
        if(__isset.mids)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Mids);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("commitSendMessagesToMids_args(");
      bool __first = true;
      if (RequestIdList != null && __isset.requestIdList)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestIdList: ");
        sb.Append(RequestIdList);
      }
      if (Mids != null && __isset.mids)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Mids: ");
        sb.Append(Mids);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class commitSendMessagesToMidsResult : TBase
  {
    private List<SendBuddyMessageResult> _success;
    private TalkException _e;

    public List<SendBuddyMessageResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public commitSendMessagesToMidsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  TList _list570 = await iprot.ReadListBeginAsync(cancellationToken);
                  Success = new List<SendBuddyMessageResult>(_list570.Count);
                  for(int _i571 = 0; _i571 < _list570.Count; ++_i571)
                  {
                    SendBuddyMessageResult _elem572;
                    _elem572 = new SendBuddyMessageResult();
                    await _elem572.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem572);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("commitSendMessagesToMids_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (SendBuddyMessageResult _iter573 in Success)
              {
                await _iter573.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as commitSendMessagesToMidsResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("commitSendMessagesToMids_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class containsBuddyMemberArgs : TBase
  {
    private string _requestId;
    private string _userMid;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public string UserMid
    {
      get
      {
        return _userMid;
      }
      set
      {
        __isset.userMid = true;
        this._userMid = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool userMid;
    }

    public containsBuddyMemberArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                UserMid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("containsBuddyMember_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (UserMid != null && __isset.userMid)
        {
          field.Name = "userMid";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(UserMid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as containsBuddyMemberArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.userMid == other.__isset.userMid) && ((!__isset.userMid) || (System.Object.Equals(UserMid, other.UserMid))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.userMid)
          hashcode = (hashcode * 397) + UserMid.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("containsBuddyMember_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (UserMid != null && __isset.userMid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("UserMid: ");
        sb.Append(UserMid);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class containsBuddyMemberResult : TBase
  {
    private bool _success;
    private TalkException _e;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public containsBuddyMemberResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool)
              {
                Success = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("containsBuddyMember_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as containsBuddyMemberResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("containsBuddyMember_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class downloadMessageContentArgs : TBase
  {
    private string _requestId;
    private string _messageId;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public string MessageId
    {
      get
      {
        return _messageId;
      }
      set
      {
        __isset.messageId = true;
        this._messageId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool messageId;
    }

    public downloadMessageContentArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                MessageId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("downloadMessageContent_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (MessageId != null && __isset.messageId)
        {
          field.Name = "messageId";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(MessageId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as downloadMessageContentArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.messageId == other.__isset.messageId) && ((!__isset.messageId) || (System.Object.Equals(MessageId, other.MessageId))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.messageId)
          hashcode = (hashcode * 397) + MessageId.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("downloadMessageContent_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (MessageId != null && __isset.messageId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("MessageId: ");
        sb.Append(MessageId);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class downloadMessageContentResult : TBase
  {
    private byte[] _success;
    private TalkException _e;

    public byte[] Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public downloadMessageContentResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("downloadMessageContent_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBinaryAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as downloadMessageContentResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("downloadMessageContent_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class downloadMessageContentPreviewArgs : TBase
  {
    private string _requestId;
    private string _messageId;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public string MessageId
    {
      get
      {
        return _messageId;
      }
      set
      {
        __isset.messageId = true;
        this._messageId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool messageId;
    }

    public downloadMessageContentPreviewArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                MessageId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("downloadMessageContentPreview_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (MessageId != null && __isset.messageId)
        {
          field.Name = "messageId";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(MessageId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as downloadMessageContentPreviewArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.messageId == other.__isset.messageId) && ((!__isset.messageId) || (System.Object.Equals(MessageId, other.MessageId))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.messageId)
          hashcode = (hashcode * 397) + MessageId.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("downloadMessageContentPreview_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (MessageId != null && __isset.messageId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("MessageId: ");
        sb.Append(MessageId);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class downloadMessageContentPreviewResult : TBase
  {
    private byte[] _success;
    private TalkException _e;

    public byte[] Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public downloadMessageContentPreviewResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("downloadMessageContentPreview_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBinaryAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as downloadMessageContentPreviewResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("downloadMessageContentPreview_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class downloadProfileImageArgs : TBase
  {
    private string _requestId;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
    }

    public downloadProfileImageArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("downloadProfileImage_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as downloadProfileImageArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("downloadProfileImage_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class downloadProfileImageResult : TBase
  {
    private byte[] _success;
    private TalkException _e;

    public byte[] Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public downloadProfileImageResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("downloadProfileImage_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBinaryAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as downloadProfileImageResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("downloadProfileImage_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class downloadProfileImagePreviewArgs : TBase
  {
    private string _requestId;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
    }

    public downloadProfileImagePreviewArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("downloadProfileImagePreview_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as downloadProfileImagePreviewArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("downloadProfileImagePreview_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class downloadProfileImagePreviewResult : TBase
  {
    private byte[] _success;
    private TalkException _e;

    public byte[] Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public downloadProfileImagePreviewResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("downloadProfileImagePreview_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBinaryAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as downloadProfileImagePreviewResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("downloadProfileImagePreview_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getActiveMemberCountByBuddyMidArgs : TBase
  {
    private string _buddyMid;

    public string BuddyMid
    {
      get
      {
        return _buddyMid;
      }
      set
      {
        __isset.buddyMid = true;
        this._buddyMid = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool buddyMid;
    }

    public getActiveMemberCountByBuddyMidArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String)
              {
                BuddyMid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getActiveMemberCountByBuddyMid_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (BuddyMid != null && __isset.buddyMid)
        {
          field.Name = "buddyMid";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(BuddyMid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getActiveMemberCountByBuddyMidArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.buddyMid == other.__isset.buddyMid) && ((!__isset.buddyMid) || (System.Object.Equals(BuddyMid, other.BuddyMid))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.buddyMid)
          hashcode = (hashcode * 397) + BuddyMid.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getActiveMemberCountByBuddyMid_args(");
      bool __first = true;
      if (BuddyMid != null && __isset.buddyMid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BuddyMid: ");
        sb.Append(BuddyMid);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getActiveMemberCountByBuddyMidResult : TBase
  {
    private long _success;
    private TalkException _e;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getActiveMemberCountByBuddyMidResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64)
              {
                Success = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getActiveMemberCountByBuddyMid_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getActiveMemberCountByBuddyMidResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getActiveMemberCountByBuddyMid_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getActiveMemberMidsByBuddyMidArgs : TBase
  {
    private string _buddyMid;

    public string BuddyMid
    {
      get
      {
        return _buddyMid;
      }
      set
      {
        __isset.buddyMid = true;
        this._buddyMid = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool buddyMid;
    }

    public getActiveMemberMidsByBuddyMidArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String)
              {
                BuddyMid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getActiveMemberMidsByBuddyMid_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (BuddyMid != null && __isset.buddyMid)
        {
          field.Name = "buddyMid";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(BuddyMid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getActiveMemberMidsByBuddyMidArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.buddyMid == other.__isset.buddyMid) && ((!__isset.buddyMid) || (System.Object.Equals(BuddyMid, other.BuddyMid))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.buddyMid)
          hashcode = (hashcode * 397) + BuddyMid.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getActiveMemberMidsByBuddyMid_args(");
      bool __first = true;
      if (BuddyMid != null && __isset.buddyMid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BuddyMid: ");
        sb.Append(BuddyMid);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getActiveMemberMidsByBuddyMidResult : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getActiveMemberMidsByBuddyMidResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  TList _list574 = await iprot.ReadListBeginAsync(cancellationToken);
                  Success = new List<string>(_list574.Count);
                  for(int _i575 = 0; _i575 < _list574.Count; ++_i575)
                  {
                    string _elem576;
                    _elem576 = await iprot.ReadStringAsync(cancellationToken);
                    Success.Add(_elem576);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getActiveMemberMidsByBuddyMid_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
              foreach (string _iter577 in Success)
              {
                await oprot.WriteStringAsync(_iter577, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getActiveMemberMidsByBuddyMidResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getActiveMemberMidsByBuddyMid_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getAllBuddyMembersArgs : TBase
  {

    public getAllBuddyMembersArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getAllBuddyMembers_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getAllBuddyMembersArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return true;
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getAllBuddyMembers_args(");
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getAllBuddyMembersResult : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getAllBuddyMembersResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  TList _list578 = await iprot.ReadListBeginAsync(cancellationToken);
                  Success = new List<string>(_list578.Count);
                  for(int _i579 = 0; _i579 < _list578.Count; ++_i579)
                  {
                    string _elem580;
                    _elem580 = await iprot.ReadStringAsync(cancellationToken);
                    Success.Add(_elem580);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getAllBuddyMembers_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
              foreach (string _iter581 in Success)
              {
                await oprot.WriteStringAsync(_iter581, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getAllBuddyMembersResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getAllBuddyMembers_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getBlockedBuddyMembersArgs : TBase
  {

    public getBlockedBuddyMembersArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getBlockedBuddyMembers_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getBlockedBuddyMembersArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return true;
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getBlockedBuddyMembers_args(");
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getBlockedBuddyMembersResult : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getBlockedBuddyMembersResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  TList _list582 = await iprot.ReadListBeginAsync(cancellationToken);
                  Success = new List<string>(_list582.Count);
                  for(int _i583 = 0; _i583 < _list582.Count; ++_i583)
                  {
                    string _elem584;
                    _elem584 = await iprot.ReadStringAsync(cancellationToken);
                    Success.Add(_elem584);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getBlockedBuddyMembers_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
              foreach (string _iter585 in Success)
              {
                await oprot.WriteStringAsync(_iter585, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getBlockedBuddyMembersResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getBlockedBuddyMembers_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getBlockerCountByBuddyMidArgs : TBase
  {
    private string _buddyMid;

    public string BuddyMid
    {
      get
      {
        return _buddyMid;
      }
      set
      {
        __isset.buddyMid = true;
        this._buddyMid = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool buddyMid;
    }

    public getBlockerCountByBuddyMidArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String)
              {
                BuddyMid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getBlockerCountByBuddyMid_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (BuddyMid != null && __isset.buddyMid)
        {
          field.Name = "buddyMid";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(BuddyMid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getBlockerCountByBuddyMidArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.buddyMid == other.__isset.buddyMid) && ((!__isset.buddyMid) || (System.Object.Equals(BuddyMid, other.BuddyMid))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.buddyMid)
          hashcode = (hashcode * 397) + BuddyMid.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getBlockerCountByBuddyMid_args(");
      bool __first = true;
      if (BuddyMid != null && __isset.buddyMid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BuddyMid: ");
        sb.Append(BuddyMid);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getBlockerCountByBuddyMidResult : TBase
  {
    private long _success;
    private TalkException _e;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getBlockerCountByBuddyMidResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64)
              {
                Success = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getBlockerCountByBuddyMid_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getBlockerCountByBuddyMidResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getBlockerCountByBuddyMid_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getBuddyDetailByMidArgs : TBase
  {
    private string _buddyMid;

    public string BuddyMid
    {
      get
      {
        return _buddyMid;
      }
      set
      {
        __isset.buddyMid = true;
        this._buddyMid = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool buddyMid;
    }

    public getBuddyDetailByMidArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String)
              {
                BuddyMid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getBuddyDetailByMid_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (BuddyMid != null && __isset.buddyMid)
        {
          field.Name = "buddyMid";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(BuddyMid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getBuddyDetailByMidArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.buddyMid == other.__isset.buddyMid) && ((!__isset.buddyMid) || (System.Object.Equals(BuddyMid, other.BuddyMid))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.buddyMid)
          hashcode = (hashcode * 397) + BuddyMid.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getBuddyDetailByMid_args(");
      bool __first = true;
      if (BuddyMid != null && __isset.buddyMid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BuddyMid: ");
        sb.Append(BuddyMid);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getBuddyDetailByMidResult : TBase
  {
    private BuddyDetail _success;
    private TalkException _e;

    public BuddyDetail Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getBuddyDetailByMidResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new BuddyDetail();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getBuddyDetailByMid_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getBuddyDetailByMidResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getBuddyDetailByMid_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getBuddyProfileArgs : TBase
  {

    public getBuddyProfileArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getBuddyProfile_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getBuddyProfileArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return true;
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getBuddyProfile_args(");
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getBuddyProfileResult : TBase
  {
    private BuddyProfile _success;
    private TalkException _e;

    public BuddyProfile Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getBuddyProfileResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new BuddyProfile();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getBuddyProfile_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getBuddyProfileResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getBuddyProfile_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getContactTicketArgs : TBase
  {

    public getContactTicketArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getContactTicket_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getContactTicketArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return true;
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getContactTicket_args(");
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getContactTicketResult : TBase
  {
    private Ticket _success;
    private TalkException _e;

    public Ticket Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getContactTicketResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Ticket();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getContactTicket_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getContactTicketResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getContactTicket_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getMemberCountByBuddyMidArgs : TBase
  {
    private string _buddyMid;

    public string BuddyMid
    {
      get
      {
        return _buddyMid;
      }
      set
      {
        __isset.buddyMid = true;
        this._buddyMid = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool buddyMid;
    }

    public getMemberCountByBuddyMidArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String)
              {
                BuddyMid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getMemberCountByBuddyMid_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (BuddyMid != null && __isset.buddyMid)
        {
          field.Name = "buddyMid";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(BuddyMid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getMemberCountByBuddyMidArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.buddyMid == other.__isset.buddyMid) && ((!__isset.buddyMid) || (System.Object.Equals(BuddyMid, other.BuddyMid))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.buddyMid)
          hashcode = (hashcode * 397) + BuddyMid.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getMemberCountByBuddyMid_args(");
      bool __first = true;
      if (BuddyMid != null && __isset.buddyMid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BuddyMid: ");
        sb.Append(BuddyMid);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getMemberCountByBuddyMidResult : TBase
  {
    private long _success;
    private TalkException _e;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getMemberCountByBuddyMidResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64)
              {
                Success = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getMemberCountByBuddyMid_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getMemberCountByBuddyMidResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getMemberCountByBuddyMid_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getSendBuddyMessageResultArgs : TBase
  {
    private string _sendBuddyMessageRequestId;

    public string SendBuddyMessageRequestId
    {
      get
      {
        return _sendBuddyMessageRequestId;
      }
      set
      {
        __isset.sendBuddyMessageRequestId = true;
        this._sendBuddyMessageRequestId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool sendBuddyMessageRequestId;
    }

    public getSendBuddyMessageResultArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                SendBuddyMessageRequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getSendBuddyMessageResult_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (SendBuddyMessageRequestId != null && __isset.sendBuddyMessageRequestId)
        {
          field.Name = "sendBuddyMessageRequestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SendBuddyMessageRequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getSendBuddyMessageResultArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.sendBuddyMessageRequestId == other.__isset.sendBuddyMessageRequestId) && ((!__isset.sendBuddyMessageRequestId) || (System.Object.Equals(SendBuddyMessageRequestId, other.SendBuddyMessageRequestId))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.sendBuddyMessageRequestId)
          hashcode = (hashcode * 397) + SendBuddyMessageRequestId.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getSendBuddyMessageResult_args(");
      bool __first = true;
      if (SendBuddyMessageRequestId != null && __isset.sendBuddyMessageRequestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SendBuddyMessageRequestId: ");
        sb.Append(SendBuddyMessageRequestId);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getSendBuddyMessageResultResult : TBase
  {
    private SendBuddyMessageResult _success;
    private TalkException _e;

    public SendBuddyMessageResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getSendBuddyMessageResultResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new SendBuddyMessageResult();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getSendBuddyMessageResult_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getSendBuddyMessageResultResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getSendBuddyMessageResult_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getSetBuddyOnAirResultArgs : TBase
  {
    private string _setBuddyOnAirRequestId;

    public string SetBuddyOnAirRequestId
    {
      get
      {
        return _setBuddyOnAirRequestId;
      }
      set
      {
        __isset.setBuddyOnAirRequestId = true;
        this._setBuddyOnAirRequestId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool setBuddyOnAirRequestId;
    }

    public getSetBuddyOnAirResultArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                SetBuddyOnAirRequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getSetBuddyOnAirResult_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (SetBuddyOnAirRequestId != null && __isset.setBuddyOnAirRequestId)
        {
          field.Name = "setBuddyOnAirRequestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SetBuddyOnAirRequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getSetBuddyOnAirResultArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.setBuddyOnAirRequestId == other.__isset.setBuddyOnAirRequestId) && ((!__isset.setBuddyOnAirRequestId) || (System.Object.Equals(SetBuddyOnAirRequestId, other.SetBuddyOnAirRequestId))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.setBuddyOnAirRequestId)
          hashcode = (hashcode * 397) + SetBuddyOnAirRequestId.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getSetBuddyOnAirResult_args(");
      bool __first = true;
      if (SetBuddyOnAirRequestId != null && __isset.setBuddyOnAirRequestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SetBuddyOnAirRequestId: ");
        sb.Append(SetBuddyOnAirRequestId);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getSetBuddyOnAirResultResult : TBase
  {
    private SetBuddyOnAirResult _success;
    private TalkException _e;

    public SetBuddyOnAirResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getSetBuddyOnAirResultResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new SetBuddyOnAirResult();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getSetBuddyOnAirResult_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getSetBuddyOnAirResultResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getSetBuddyOnAirResult_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getUpdateBuddyProfileResultArgs : TBase
  {
    private string _updateBuddyProfileRequestId;

    public string UpdateBuddyProfileRequestId
    {
      get
      {
        return _updateBuddyProfileRequestId;
      }
      set
      {
        __isset.updateBuddyProfileRequestId = true;
        this._updateBuddyProfileRequestId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool updateBuddyProfileRequestId;
    }

    public getUpdateBuddyProfileResultArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                UpdateBuddyProfileRequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getUpdateBuddyProfileResult_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (UpdateBuddyProfileRequestId != null && __isset.updateBuddyProfileRequestId)
        {
          field.Name = "updateBuddyProfileRequestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(UpdateBuddyProfileRequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getUpdateBuddyProfileResultArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.updateBuddyProfileRequestId == other.__isset.updateBuddyProfileRequestId) && ((!__isset.updateBuddyProfileRequestId) || (System.Object.Equals(UpdateBuddyProfileRequestId, other.UpdateBuddyProfileRequestId))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.updateBuddyProfileRequestId)
          hashcode = (hashcode * 397) + UpdateBuddyProfileRequestId.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getUpdateBuddyProfileResult_args(");
      bool __first = true;
      if (UpdateBuddyProfileRequestId != null && __isset.updateBuddyProfileRequestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("UpdateBuddyProfileRequestId: ");
        sb.Append(UpdateBuddyProfileRequestId);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getUpdateBuddyProfileResultResult : TBase
  {
    private UpdateBuddyProfileResult _success;
    private TalkException _e;

    public UpdateBuddyProfileResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getUpdateBuddyProfileResultResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new UpdateBuddyProfileResult();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getUpdateBuddyProfileResult_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as getUpdateBuddyProfileResultResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getUpdateBuddyProfileResult_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class isBuddyOnAirByMidArgs : TBase
  {
    private string _buddyMid;

    public string BuddyMid
    {
      get
      {
        return _buddyMid;
      }
      set
      {
        __isset.buddyMid = true;
        this._buddyMid = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool buddyMid;
    }

    public isBuddyOnAirByMidArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String)
              {
                BuddyMid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("isBuddyOnAirByMid_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (BuddyMid != null && __isset.buddyMid)
        {
          field.Name = "buddyMid";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(BuddyMid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as isBuddyOnAirByMidArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.buddyMid == other.__isset.buddyMid) && ((!__isset.buddyMid) || (System.Object.Equals(BuddyMid, other.BuddyMid))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.buddyMid)
          hashcode = (hashcode * 397) + BuddyMid.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("isBuddyOnAirByMid_args(");
      bool __first = true;
      if (BuddyMid != null && __isset.buddyMid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BuddyMid: ");
        sb.Append(BuddyMid);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class isBuddyOnAirByMidResult : TBase
  {
    private bool _success;
    private TalkException _e;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public isBuddyOnAirByMidResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool)
              {
                Success = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("isBuddyOnAirByMid_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as isBuddyOnAirByMidResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("isBuddyOnAirByMid_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class linkAndSendBuddyContentMessageToAllAsyncArgs : TBase
  {
    private string _requestId;
    private Message _msg;
    private string _sourceContentId;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public Message Msg
    {
      get
      {
        return _msg;
      }
      set
      {
        __isset.msg = true;
        this._msg = value;
      }
    }

    public string SourceContentId
    {
      get
      {
        return _sourceContentId;
      }
      set
      {
        __isset.sourceContentId = true;
        this._sourceContentId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool msg;
      public bool sourceContentId;
    }

    public linkAndSendBuddyContentMessageToAllAsyncArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Msg = new Message();
                await Msg.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                SourceContentId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("linkAndSendBuddyContentMessageToAllAsync_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Msg != null && __isset.msg)
        {
          field.Name = "msg";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Msg.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SourceContentId != null && __isset.sourceContentId)
        {
          field.Name = "sourceContentId";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SourceContentId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as linkAndSendBuddyContentMessageToAllAsyncArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.msg == other.__isset.msg) && ((!__isset.msg) || (System.Object.Equals(Msg, other.Msg))))
        && ((__isset.sourceContentId == other.__isset.sourceContentId) && ((!__isset.sourceContentId) || (System.Object.Equals(SourceContentId, other.SourceContentId))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.msg)
          hashcode = (hashcode * 397) + Msg.GetHashCode();
        if(__isset.sourceContentId)
          hashcode = (hashcode * 397) + SourceContentId.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("linkAndSendBuddyContentMessageToAllAsync_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (Msg != null && __isset.msg)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Msg: ");
        sb.Append(Msg== null ? "<null>" : Msg.ToString());
      }
      if (SourceContentId != null && __isset.sourceContentId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SourceContentId: ");
        sb.Append(SourceContentId);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class linkAndSendBuddyContentMessageToAllAsyncResult : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public linkAndSendBuddyContentMessageToAllAsyncResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("linkAndSendBuddyContentMessageToAllAsync_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as linkAndSendBuddyContentMessageToAllAsyncResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("linkAndSendBuddyContentMessageToAllAsync_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class linkAndSendBuddyContentMessageToMidsArgs : TBase
  {
    private string _requestId;
    private Message _msg;
    private string _sourceContentId;
    private List<string> _mids;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public Message Msg
    {
      get
      {
        return _msg;
      }
      set
      {
        __isset.msg = true;
        this._msg = value;
      }
    }

    public string SourceContentId
    {
      get
      {
        return _sourceContentId;
      }
      set
      {
        __isset.sourceContentId = true;
        this._sourceContentId = value;
      }
    }

    public List<string> Mids
    {
      get
      {
        return _mids;
      }
      set
      {
        __isset.mids = true;
        this._mids = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool msg;
      public bool sourceContentId;
      public bool mids;
    }

    public linkAndSendBuddyContentMessageToMidsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Msg = new Message();
                await Msg.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                SourceContentId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list586 = await iprot.ReadListBeginAsync(cancellationToken);
                  Mids = new List<string>(_list586.Count);
                  for(int _i587 = 0; _i587 < _list586.Count; ++_i587)
                  {
                    string _elem588;
                    _elem588 = await iprot.ReadStringAsync(cancellationToken);
                    Mids.Add(_elem588);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("linkAndSendBuddyContentMessageToMids_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Msg != null && __isset.msg)
        {
          field.Name = "msg";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Msg.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SourceContentId != null && __isset.sourceContentId)
        {
          field.Name = "sourceContentId";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SourceContentId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Mids != null && __isset.mids)
        {
          field.Name = "mids";
          field.Type = TType.List;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Mids.Count), cancellationToken);
            foreach (string _iter589 in Mids)
            {
              await oprot.WriteStringAsync(_iter589, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as linkAndSendBuddyContentMessageToMidsArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.msg == other.__isset.msg) && ((!__isset.msg) || (System.Object.Equals(Msg, other.Msg))))
        && ((__isset.sourceContentId == other.__isset.sourceContentId) && ((!__isset.sourceContentId) || (System.Object.Equals(SourceContentId, other.SourceContentId))))
        && ((__isset.mids == other.__isset.mids) && ((!__isset.mids) || (TCollections.Equals(Mids, other.Mids))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.msg)
          hashcode = (hashcode * 397) + Msg.GetHashCode();
        if(__isset.sourceContentId)
          hashcode = (hashcode * 397) + SourceContentId.GetHashCode();
        if(__isset.mids)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Mids);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("linkAndSendBuddyContentMessageToMids_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (Msg != null && __isset.msg)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Msg: ");
        sb.Append(Msg== null ? "<null>" : Msg.ToString());
      }
      if (SourceContentId != null && __isset.sourceContentId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SourceContentId: ");
        sb.Append(SourceContentId);
      }
      if (Mids != null && __isset.mids)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Mids: ");
        sb.Append(Mids);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class linkAndSendBuddyContentMessageToMidsResult : TBase
  {
    private SendBuddyMessageResult _success;
    private TalkException _e;

    public SendBuddyMessageResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public linkAndSendBuddyContentMessageToMidsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new SendBuddyMessageResult();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("linkAndSendBuddyContentMessageToMids_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as linkAndSendBuddyContentMessageToMidsResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("linkAndSendBuddyContentMessageToMids_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class notifyBuddyBlockedArgs : TBase
  {
    private string _buddyMid;
    private string _blockerMid;

    public string BuddyMid
    {
      get
      {
        return _buddyMid;
      }
      set
      {
        __isset.buddyMid = true;
        this._buddyMid = value;
      }
    }

    public string BlockerMid
    {
      get
      {
        return _blockerMid;
      }
      set
      {
        __isset.blockerMid = true;
        this._blockerMid = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool buddyMid;
      public bool blockerMid;
    }

    public notifyBuddyBlockedArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                BuddyMid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                BlockerMid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("notifyBuddyBlocked_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (BuddyMid != null && __isset.buddyMid)
        {
          field.Name = "buddyMid";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(BuddyMid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (BlockerMid != null && __isset.blockerMid)
        {
          field.Name = "blockerMid";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(BlockerMid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as notifyBuddyBlockedArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.buddyMid == other.__isset.buddyMid) && ((!__isset.buddyMid) || (System.Object.Equals(BuddyMid, other.BuddyMid))))
        && ((__isset.blockerMid == other.__isset.blockerMid) && ((!__isset.blockerMid) || (System.Object.Equals(BlockerMid, other.BlockerMid))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.buddyMid)
          hashcode = (hashcode * 397) + BuddyMid.GetHashCode();
        if(__isset.blockerMid)
          hashcode = (hashcode * 397) + BlockerMid.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("notifyBuddyBlocked_args(");
      bool __first = true;
      if (BuddyMid != null && __isset.buddyMid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BuddyMid: ");
        sb.Append(BuddyMid);
      }
      if (BlockerMid != null && __isset.blockerMid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BlockerMid: ");
        sb.Append(BlockerMid);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class notifyBuddyBlockedResult : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool e;
    }

    public notifyBuddyBlockedResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("notifyBuddyBlocked_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as notifyBuddyBlockedResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("notifyBuddyBlocked_result(");
      bool __first = true;
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class notifyBuddyUnblockedArgs : TBase
  {
    private string _buddyMid;
    private string _blockerMid;

    public string BuddyMid
    {
      get
      {
        return _buddyMid;
      }
      set
      {
        __isset.buddyMid = true;
        this._buddyMid = value;
      }
    }

    public string BlockerMid
    {
      get
      {
        return _blockerMid;
      }
      set
      {
        __isset.blockerMid = true;
        this._blockerMid = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool buddyMid;
      public bool blockerMid;
    }

    public notifyBuddyUnblockedArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                BuddyMid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                BlockerMid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("notifyBuddyUnblocked_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (BuddyMid != null && __isset.buddyMid)
        {
          field.Name = "buddyMid";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(BuddyMid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (BlockerMid != null && __isset.blockerMid)
        {
          field.Name = "blockerMid";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(BlockerMid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as notifyBuddyUnblockedArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.buddyMid == other.__isset.buddyMid) && ((!__isset.buddyMid) || (System.Object.Equals(BuddyMid, other.BuddyMid))))
        && ((__isset.blockerMid == other.__isset.blockerMid) && ((!__isset.blockerMid) || (System.Object.Equals(BlockerMid, other.BlockerMid))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.buddyMid)
          hashcode = (hashcode * 397) + BuddyMid.GetHashCode();
        if(__isset.blockerMid)
          hashcode = (hashcode * 397) + BlockerMid.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("notifyBuddyUnblocked_args(");
      bool __first = true;
      if (BuddyMid != null && __isset.buddyMid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BuddyMid: ");
        sb.Append(BuddyMid);
      }
      if (BlockerMid != null && __isset.blockerMid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BlockerMid: ");
        sb.Append(BlockerMid);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class notifyBuddyUnblockedResult : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool e;
    }

    public notifyBuddyUnblockedResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("notifyBuddyUnblocked_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as notifyBuddyUnblockedResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("notifyBuddyUnblocked_result(");
      bool __first = true;
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class registerBuddyArgs : TBase
  {
    private string _buddyId;
    private string _searchId;
    private string _displayName;
    private string _statusMeessage;
    private byte[] _picture;
    private Dictionary<string, string> _settings;

    public string BuddyId
    {
      get
      {
        return _buddyId;
      }
      set
      {
        __isset.buddyId = true;
        this._buddyId = value;
      }
    }

    public string SearchId
    {
      get
      {
        return _searchId;
      }
      set
      {
        __isset.searchId = true;
        this._searchId = value;
      }
    }

    public string DisplayName
    {
      get
      {
        return _displayName;
      }
      set
      {
        __isset.displayName = true;
        this._displayName = value;
      }
    }

    public string StatusMeessage
    {
      get
      {
        return _statusMeessage;
      }
      set
      {
        __isset.statusMeessage = true;
        this._statusMeessage = value;
      }
    }

    public byte[] Picture
    {
      get
      {
        return _picture;
      }
      set
      {
        __isset.picture = true;
        this._picture = value;
      }
    }

    public Dictionary<string, string> Settings
    {
      get
      {
        return _settings;
      }
      set
      {
        __isset.settings = true;
        this._settings = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool buddyId;
      public bool searchId;
      public bool displayName;
      public bool statusMeessage;
      public bool picture;
      public bool settings;
    }

    public registerBuddyArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String)
              {
                BuddyId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                SearchId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                DisplayName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                StatusMeessage = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                Picture = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map590 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Settings = new Dictionary<string, string>(_map590.Count);
                  for(int _i591 = 0; _i591 < _map590.Count; ++_i591)
                  {
                    string _key592;
                    string _val593;
                    _key592 = await iprot.ReadStringAsync(cancellationToken);
                    _val593 = await iprot.ReadStringAsync(cancellationToken);
                    Settings[_key592] = _val593;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("registerBuddy_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (BuddyId != null && __isset.buddyId)
        {
          field.Name = "buddyId";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(BuddyId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SearchId != null && __isset.searchId)
        {
          field.Name = "searchId";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SearchId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DisplayName != null && __isset.displayName)
        {
          field.Name = "displayName";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(DisplayName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (StatusMeessage != null && __isset.statusMeessage)
        {
          field.Name = "statusMeessage";
          field.Type = TType.String;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(StatusMeessage, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Picture != null && __isset.picture)
        {
          field.Name = "picture";
          field.Type = TType.String;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Picture, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Settings != null && __isset.settings)
        {
          field.Name = "settings";
          field.Type = TType.Map;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Settings.Count), cancellationToken);
            foreach (string _iter594 in Settings.Keys)
            {
              await oprot.WriteStringAsync(_iter594, cancellationToken);
              await oprot.WriteStringAsync(Settings[_iter594], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as registerBuddyArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.buddyId == other.__isset.buddyId) && ((!__isset.buddyId) || (System.Object.Equals(BuddyId, other.BuddyId))))
        && ((__isset.searchId == other.__isset.searchId) && ((!__isset.searchId) || (System.Object.Equals(SearchId, other.SearchId))))
        && ((__isset.displayName == other.__isset.displayName) && ((!__isset.displayName) || (System.Object.Equals(DisplayName, other.DisplayName))))
        && ((__isset.statusMeessage == other.__isset.statusMeessage) && ((!__isset.statusMeessage) || (System.Object.Equals(StatusMeessage, other.StatusMeessage))))
        && ((__isset.picture == other.__isset.picture) && ((!__isset.picture) || (TCollections.Equals(Picture, other.Picture))))
        && ((__isset.settings == other.__isset.settings) && ((!__isset.settings) || (TCollections.Equals(Settings, other.Settings))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.buddyId)
          hashcode = (hashcode * 397) + BuddyId.GetHashCode();
        if(__isset.searchId)
          hashcode = (hashcode * 397) + SearchId.GetHashCode();
        if(__isset.displayName)
          hashcode = (hashcode * 397) + DisplayName.GetHashCode();
        if(__isset.statusMeessage)
          hashcode = (hashcode * 397) + StatusMeessage.GetHashCode();
        if(__isset.picture)
          hashcode = (hashcode * 397) + Picture.GetHashCode();
        if(__isset.settings)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Settings);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("registerBuddy_args(");
      bool __first = true;
      if (BuddyId != null && __isset.buddyId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BuddyId: ");
        sb.Append(BuddyId);
      }
      if (SearchId != null && __isset.searchId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SearchId: ");
        sb.Append(SearchId);
      }
      if (DisplayName != null && __isset.displayName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DisplayName: ");
        sb.Append(DisplayName);
      }
      if (StatusMeessage != null && __isset.statusMeessage)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("StatusMeessage: ");
        sb.Append(StatusMeessage);
      }
      if (Picture != null && __isset.picture)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Picture: ");
        sb.Append(Picture);
      }
      if (Settings != null && __isset.settings)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Settings: ");
        sb.Append(Settings);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class registerBuddyResult : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public registerBuddyResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("registerBuddy_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as registerBuddyResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("registerBuddy_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class registerBuddyAdminArgs : TBase
  {
    private string _buddyId;
    private string _searchId;
    private string _displayName;
    private string _statusMessage;
    private byte[] _picture;

    public string BuddyId
    {
      get
      {
        return _buddyId;
      }
      set
      {
        __isset.buddyId = true;
        this._buddyId = value;
      }
    }

    public string SearchId
    {
      get
      {
        return _searchId;
      }
      set
      {
        __isset.searchId = true;
        this._searchId = value;
      }
    }

    public string DisplayName
    {
      get
      {
        return _displayName;
      }
      set
      {
        __isset.displayName = true;
        this._displayName = value;
      }
    }

    public string StatusMessage
    {
      get
      {
        return _statusMessage;
      }
      set
      {
        __isset.statusMessage = true;
        this._statusMessage = value;
      }
    }

    public byte[] Picture
    {
      get
      {
        return _picture;
      }
      set
      {
        __isset.picture = true;
        this._picture = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool buddyId;
      public bool searchId;
      public bool displayName;
      public bool statusMessage;
      public bool picture;
    }

    public registerBuddyAdminArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String)
              {
                BuddyId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                SearchId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                DisplayName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                StatusMessage = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                Picture = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("registerBuddyAdmin_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (BuddyId != null && __isset.buddyId)
        {
          field.Name = "buddyId";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(BuddyId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SearchId != null && __isset.searchId)
        {
          field.Name = "searchId";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SearchId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DisplayName != null && __isset.displayName)
        {
          field.Name = "displayName";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(DisplayName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (StatusMessage != null && __isset.statusMessage)
        {
          field.Name = "statusMessage";
          field.Type = TType.String;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(StatusMessage, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Picture != null && __isset.picture)
        {
          field.Name = "picture";
          field.Type = TType.String;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Picture, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as registerBuddyAdminArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.buddyId == other.__isset.buddyId) && ((!__isset.buddyId) || (System.Object.Equals(BuddyId, other.BuddyId))))
        && ((__isset.searchId == other.__isset.searchId) && ((!__isset.searchId) || (System.Object.Equals(SearchId, other.SearchId))))
        && ((__isset.displayName == other.__isset.displayName) && ((!__isset.displayName) || (System.Object.Equals(DisplayName, other.DisplayName))))
        && ((__isset.statusMessage == other.__isset.statusMessage) && ((!__isset.statusMessage) || (System.Object.Equals(StatusMessage, other.StatusMessage))))
        && ((__isset.picture == other.__isset.picture) && ((!__isset.picture) || (TCollections.Equals(Picture, other.Picture))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.buddyId)
          hashcode = (hashcode * 397) + BuddyId.GetHashCode();
        if(__isset.searchId)
          hashcode = (hashcode * 397) + SearchId.GetHashCode();
        if(__isset.displayName)
          hashcode = (hashcode * 397) + DisplayName.GetHashCode();
        if(__isset.statusMessage)
          hashcode = (hashcode * 397) + StatusMessage.GetHashCode();
        if(__isset.picture)
          hashcode = (hashcode * 397) + Picture.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("registerBuddyAdmin_args(");
      bool __first = true;
      if (BuddyId != null && __isset.buddyId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BuddyId: ");
        sb.Append(BuddyId);
      }
      if (SearchId != null && __isset.searchId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SearchId: ");
        sb.Append(SearchId);
      }
      if (DisplayName != null && __isset.displayName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DisplayName: ");
        sb.Append(DisplayName);
      }
      if (StatusMessage != null && __isset.statusMessage)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("StatusMessage: ");
        sb.Append(StatusMessage);
      }
      if (Picture != null && __isset.picture)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Picture: ");
        sb.Append(Picture);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class registerBuddyAdminResult : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public registerBuddyAdminResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("registerBuddyAdmin_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as registerBuddyAdminResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("registerBuddyAdmin_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class reissueContactTicketArgs : TBase
  {
    private long _expirationTime;
    private int _maxUseCount;

    public long ExpirationTime
    {
      get
      {
        return _expirationTime;
      }
      set
      {
        __isset.expirationTime = true;
        this._expirationTime = value;
      }
    }

    public int MaxUseCount
    {
      get
      {
        return _maxUseCount;
      }
      set
      {
        __isset.maxUseCount = true;
        this._maxUseCount = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool expirationTime;
      public bool maxUseCount;
    }

    public reissueContactTicketArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.I64)
              {
                ExpirationTime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                MaxUseCount = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("reissueContactTicket_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.expirationTime)
        {
          field.Name = "expirationTime";
          field.Type = TType.I64;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(ExpirationTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.maxUseCount)
        {
          field.Name = "maxUseCount";
          field.Type = TType.I32;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(MaxUseCount, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as reissueContactTicketArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.expirationTime == other.__isset.expirationTime) && ((!__isset.expirationTime) || (System.Object.Equals(ExpirationTime, other.ExpirationTime))))
        && ((__isset.maxUseCount == other.__isset.maxUseCount) && ((!__isset.maxUseCount) || (System.Object.Equals(MaxUseCount, other.MaxUseCount))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.expirationTime)
          hashcode = (hashcode * 397) + ExpirationTime.GetHashCode();
        if(__isset.maxUseCount)
          hashcode = (hashcode * 397) + MaxUseCount.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("reissueContactTicket_args(");
      bool __first = true;
      if (__isset.expirationTime)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ExpirationTime: ");
        sb.Append(ExpirationTime);
      }
      if (__isset.maxUseCount)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("MaxUseCount: ");
        sb.Append(MaxUseCount);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class reissueContactTicketResult : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public reissueContactTicketResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("reissueContactTicket_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as reissueContactTicketResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("reissueContactTicket_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class removeBuddyMemberArgs : TBase
  {
    private string _requestId;
    private string _userMid;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public string UserMid
    {
      get
      {
        return _userMid;
      }
      set
      {
        __isset.userMid = true;
        this._userMid = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool userMid;
    }

    public removeBuddyMemberArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                UserMid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("removeBuddyMember_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (UserMid != null && __isset.userMid)
        {
          field.Name = "userMid";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(UserMid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as removeBuddyMemberArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.userMid == other.__isset.userMid) && ((!__isset.userMid) || (System.Object.Equals(UserMid, other.UserMid))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.userMid)
          hashcode = (hashcode * 397) + UserMid.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("removeBuddyMember_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (UserMid != null && __isset.userMid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("UserMid: ");
        sb.Append(UserMid);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class removeBuddyMemberResult : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool e;
    }

    public removeBuddyMemberResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("removeBuddyMember_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as removeBuddyMemberResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("removeBuddyMember_result(");
      bool __first = true;
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class removeBuddyMembersArgs : TBase
  {
    private string _requestId;
    private List<string> _userMids;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public List<string> UserMids
    {
      get
      {
        return _userMids;
      }
      set
      {
        __isset.userMids = true;
        this._userMids = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool userMids;
    }

    public removeBuddyMembersArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list595 = await iprot.ReadListBeginAsync(cancellationToken);
                  UserMids = new List<string>(_list595.Count);
                  for(int _i596 = 0; _i596 < _list595.Count; ++_i596)
                  {
                    string _elem597;
                    _elem597 = await iprot.ReadStringAsync(cancellationToken);
                    UserMids.Add(_elem597);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("removeBuddyMembers_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (UserMids != null && __isset.userMids)
        {
          field.Name = "userMids";
          field.Type = TType.List;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, UserMids.Count), cancellationToken);
            foreach (string _iter598 in UserMids)
            {
              await oprot.WriteStringAsync(_iter598, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as removeBuddyMembersArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.userMids == other.__isset.userMids) && ((!__isset.userMids) || (TCollections.Equals(UserMids, other.UserMids))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.userMids)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(UserMids);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("removeBuddyMembers_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (UserMids != null && __isset.userMids)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("UserMids: ");
        sb.Append(UserMids);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class removeBuddyMembersResult : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool e;
    }

    public removeBuddyMembersResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("removeBuddyMembers_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as removeBuddyMembersResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("removeBuddyMembers_result(");
      bool __first = true;
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class sendBuddyContentMessageToAllArgs : TBase
  {
    private string _requestId;
    private Message _msg;
    private byte[] _content;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public Message Msg
    {
      get
      {
        return _msg;
      }
      set
      {
        __isset.msg = true;
        this._msg = value;
      }
    }

    public byte[] Content
    {
      get
      {
        return _content;
      }
      set
      {
        __isset.content = true;
        this._content = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool msg;
      public bool content;
    }

    public sendBuddyContentMessageToAllArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Msg = new Message();
                await Msg.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Content = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("sendBuddyContentMessageToAll_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Msg != null && __isset.msg)
        {
          field.Name = "msg";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Msg.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Content != null && __isset.content)
        {
          field.Name = "content";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Content, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as sendBuddyContentMessageToAllArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.msg == other.__isset.msg) && ((!__isset.msg) || (System.Object.Equals(Msg, other.Msg))))
        && ((__isset.content == other.__isset.content) && ((!__isset.content) || (TCollections.Equals(Content, other.Content))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.msg)
          hashcode = (hashcode * 397) + Msg.GetHashCode();
        if(__isset.content)
          hashcode = (hashcode * 397) + Content.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("sendBuddyContentMessageToAll_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (Msg != null && __isset.msg)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Msg: ");
        sb.Append(Msg== null ? "<null>" : Msg.ToString());
      }
      if (Content != null && __isset.content)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Content: ");
        sb.Append(Content);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class sendBuddyContentMessageToAllResult : TBase
  {
    private SendBuddyMessageResult _success;
    private TalkException _e;

    public SendBuddyMessageResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public sendBuddyContentMessageToAllResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new SendBuddyMessageResult();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("sendBuddyContentMessageToAll_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as sendBuddyContentMessageToAllResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("sendBuddyContentMessageToAll_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class sendBuddyContentMessageToAllAsyncArgs : TBase
  {
    private string _requestId;
    private Message _msg;
    private byte[] _content;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public Message Msg
    {
      get
      {
        return _msg;
      }
      set
      {
        __isset.msg = true;
        this._msg = value;
      }
    }

    public byte[] Content
    {
      get
      {
        return _content;
      }
      set
      {
        __isset.content = true;
        this._content = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool msg;
      public bool content;
    }

    public sendBuddyContentMessageToAllAsyncArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Msg = new Message();
                await Msg.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Content = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("sendBuddyContentMessageToAllAsync_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Msg != null && __isset.msg)
        {
          field.Name = "msg";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Msg.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Content != null && __isset.content)
        {
          field.Name = "content";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Content, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as sendBuddyContentMessageToAllAsyncArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.msg == other.__isset.msg) && ((!__isset.msg) || (System.Object.Equals(Msg, other.Msg))))
        && ((__isset.content == other.__isset.content) && ((!__isset.content) || (TCollections.Equals(Content, other.Content))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.msg)
          hashcode = (hashcode * 397) + Msg.GetHashCode();
        if(__isset.content)
          hashcode = (hashcode * 397) + Content.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("sendBuddyContentMessageToAllAsync_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (Msg != null && __isset.msg)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Msg: ");
        sb.Append(Msg== null ? "<null>" : Msg.ToString());
      }
      if (Content != null && __isset.content)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Content: ");
        sb.Append(Content);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class sendBuddyContentMessageToAllAsyncResult : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public sendBuddyContentMessageToAllAsyncResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("sendBuddyContentMessageToAllAsync_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as sendBuddyContentMessageToAllAsyncResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("sendBuddyContentMessageToAllAsync_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class sendBuddyContentMessageToMidsArgs : TBase
  {
    private string _requestId;
    private Message _msg;
    private byte[] _content;
    private List<string> _mids;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public Message Msg
    {
      get
      {
        return _msg;
      }
      set
      {
        __isset.msg = true;
        this._msg = value;
      }
    }

    public byte[] Content
    {
      get
      {
        return _content;
      }
      set
      {
        __isset.content = true;
        this._content = value;
      }
    }

    public List<string> Mids
    {
      get
      {
        return _mids;
      }
      set
      {
        __isset.mids = true;
        this._mids = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool msg;
      public bool content;
      public bool mids;
    }

    public sendBuddyContentMessageToMidsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Msg = new Message();
                await Msg.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Content = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list599 = await iprot.ReadListBeginAsync(cancellationToken);
                  Mids = new List<string>(_list599.Count);
                  for(int _i600 = 0; _i600 < _list599.Count; ++_i600)
                  {
                    string _elem601;
                    _elem601 = await iprot.ReadStringAsync(cancellationToken);
                    Mids.Add(_elem601);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("sendBuddyContentMessageToMids_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Msg != null && __isset.msg)
        {
          field.Name = "msg";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Msg.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Content != null && __isset.content)
        {
          field.Name = "content";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Content, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Mids != null && __isset.mids)
        {
          field.Name = "mids";
          field.Type = TType.List;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Mids.Count), cancellationToken);
            foreach (string _iter602 in Mids)
            {
              await oprot.WriteStringAsync(_iter602, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as sendBuddyContentMessageToMidsArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.msg == other.__isset.msg) && ((!__isset.msg) || (System.Object.Equals(Msg, other.Msg))))
        && ((__isset.content == other.__isset.content) && ((!__isset.content) || (TCollections.Equals(Content, other.Content))))
        && ((__isset.mids == other.__isset.mids) && ((!__isset.mids) || (TCollections.Equals(Mids, other.Mids))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.msg)
          hashcode = (hashcode * 397) + Msg.GetHashCode();
        if(__isset.content)
          hashcode = (hashcode * 397) + Content.GetHashCode();
        if(__isset.mids)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Mids);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("sendBuddyContentMessageToMids_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (Msg != null && __isset.msg)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Msg: ");
        sb.Append(Msg== null ? "<null>" : Msg.ToString());
      }
      if (Content != null && __isset.content)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Content: ");
        sb.Append(Content);
      }
      if (Mids != null && __isset.mids)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Mids: ");
        sb.Append(Mids);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class sendBuddyContentMessageToMidsResult : TBase
  {
    private SendBuddyMessageResult _success;
    private TalkException _e;

    public SendBuddyMessageResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public sendBuddyContentMessageToMidsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new SendBuddyMessageResult();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("sendBuddyContentMessageToMids_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as sendBuddyContentMessageToMidsResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("sendBuddyContentMessageToMids_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class sendBuddyContentMessageToMidsAsyncArgs : TBase
  {
    private string _requestId;
    private Message _msg;
    private byte[] _content;
    private List<string> _mids;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public Message Msg
    {
      get
      {
        return _msg;
      }
      set
      {
        __isset.msg = true;
        this._msg = value;
      }
    }

    public byte[] Content
    {
      get
      {
        return _content;
      }
      set
      {
        __isset.content = true;
        this._content = value;
      }
    }

    public List<string> Mids
    {
      get
      {
        return _mids;
      }
      set
      {
        __isset.mids = true;
        this._mids = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool msg;
      public bool content;
      public bool mids;
    }

    public sendBuddyContentMessageToMidsAsyncArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Msg = new Message();
                await Msg.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Content = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list603 = await iprot.ReadListBeginAsync(cancellationToken);
                  Mids = new List<string>(_list603.Count);
                  for(int _i604 = 0; _i604 < _list603.Count; ++_i604)
                  {
                    string _elem605;
                    _elem605 = await iprot.ReadStringAsync(cancellationToken);
                    Mids.Add(_elem605);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("sendBuddyContentMessageToMidsAsync_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Msg != null && __isset.msg)
        {
          field.Name = "msg";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Msg.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Content != null && __isset.content)
        {
          field.Name = "content";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Content, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Mids != null && __isset.mids)
        {
          field.Name = "mids";
          field.Type = TType.List;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Mids.Count), cancellationToken);
            foreach (string _iter606 in Mids)
            {
              await oprot.WriteStringAsync(_iter606, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as sendBuddyContentMessageToMidsAsyncArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.msg == other.__isset.msg) && ((!__isset.msg) || (System.Object.Equals(Msg, other.Msg))))
        && ((__isset.content == other.__isset.content) && ((!__isset.content) || (TCollections.Equals(Content, other.Content))))
        && ((__isset.mids == other.__isset.mids) && ((!__isset.mids) || (TCollections.Equals(Mids, other.Mids))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.msg)
          hashcode = (hashcode * 397) + Msg.GetHashCode();
        if(__isset.content)
          hashcode = (hashcode * 397) + Content.GetHashCode();
        if(__isset.mids)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Mids);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("sendBuddyContentMessageToMidsAsync_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (Msg != null && __isset.msg)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Msg: ");
        sb.Append(Msg== null ? "<null>" : Msg.ToString());
      }
      if (Content != null && __isset.content)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Content: ");
        sb.Append(Content);
      }
      if (Mids != null && __isset.mids)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Mids: ");
        sb.Append(Mids);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class sendBuddyContentMessageToMidsAsyncResult : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public sendBuddyContentMessageToMidsAsyncResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("sendBuddyContentMessageToMidsAsync_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as sendBuddyContentMessageToMidsAsyncResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("sendBuddyContentMessageToMidsAsync_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class sendBuddyMessageToAllArgs : TBase
  {
    private string _requestId;
    private Message _msg;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public Message Msg
    {
      get
      {
        return _msg;
      }
      set
      {
        __isset.msg = true;
        this._msg = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool msg;
    }

    public sendBuddyMessageToAllArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Msg = new Message();
                await Msg.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("sendBuddyMessageToAll_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Msg != null && __isset.msg)
        {
          field.Name = "msg";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Msg.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as sendBuddyMessageToAllArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.msg == other.__isset.msg) && ((!__isset.msg) || (System.Object.Equals(Msg, other.Msg))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.msg)
          hashcode = (hashcode * 397) + Msg.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("sendBuddyMessageToAll_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (Msg != null && __isset.msg)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Msg: ");
        sb.Append(Msg== null ? "<null>" : Msg.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class sendBuddyMessageToAllResult : TBase
  {
    private SendBuddyMessageResult _success;
    private TalkException _e;

    public SendBuddyMessageResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public sendBuddyMessageToAllResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new SendBuddyMessageResult();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("sendBuddyMessageToAll_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as sendBuddyMessageToAllResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("sendBuddyMessageToAll_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class sendBuddyMessageToAllAsyncArgs : TBase
  {
    private string _requestId;
    private Message _msg;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public Message Msg
    {
      get
      {
        return _msg;
      }
      set
      {
        __isset.msg = true;
        this._msg = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool msg;
    }

    public sendBuddyMessageToAllAsyncArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Msg = new Message();
                await Msg.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("sendBuddyMessageToAllAsync_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Msg != null && __isset.msg)
        {
          field.Name = "msg";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Msg.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as sendBuddyMessageToAllAsyncArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.msg == other.__isset.msg) && ((!__isset.msg) || (System.Object.Equals(Msg, other.Msg))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.msg)
          hashcode = (hashcode * 397) + Msg.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("sendBuddyMessageToAllAsync_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (Msg != null && __isset.msg)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Msg: ");
        sb.Append(Msg== null ? "<null>" : Msg.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class sendBuddyMessageToAllAsyncResult : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public sendBuddyMessageToAllAsyncResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("sendBuddyMessageToAllAsync_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as sendBuddyMessageToAllAsyncResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("sendBuddyMessageToAllAsync_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class sendBuddyMessageToMidsArgs : TBase
  {
    private string _requestId;
    private Message _msg;
    private List<string> _mids;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public Message Msg
    {
      get
      {
        return _msg;
      }
      set
      {
        __isset.msg = true;
        this._msg = value;
      }
    }

    public List<string> Mids
    {
      get
      {
        return _mids;
      }
      set
      {
        __isset.mids = true;
        this._mids = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool msg;
      public bool mids;
    }

    public sendBuddyMessageToMidsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Msg = new Message();
                await Msg.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list607 = await iprot.ReadListBeginAsync(cancellationToken);
                  Mids = new List<string>(_list607.Count);
                  for(int _i608 = 0; _i608 < _list607.Count; ++_i608)
                  {
                    string _elem609;
                    _elem609 = await iprot.ReadStringAsync(cancellationToken);
                    Mids.Add(_elem609);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("sendBuddyMessageToMids_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Msg != null && __isset.msg)
        {
          field.Name = "msg";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Msg.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Mids != null && __isset.mids)
        {
          field.Name = "mids";
          field.Type = TType.List;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Mids.Count), cancellationToken);
            foreach (string _iter610 in Mids)
            {
              await oprot.WriteStringAsync(_iter610, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as sendBuddyMessageToMidsArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.msg == other.__isset.msg) && ((!__isset.msg) || (System.Object.Equals(Msg, other.Msg))))
        && ((__isset.mids == other.__isset.mids) && ((!__isset.mids) || (TCollections.Equals(Mids, other.Mids))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.msg)
          hashcode = (hashcode * 397) + Msg.GetHashCode();
        if(__isset.mids)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Mids);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("sendBuddyMessageToMids_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (Msg != null && __isset.msg)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Msg: ");
        sb.Append(Msg== null ? "<null>" : Msg.ToString());
      }
      if (Mids != null && __isset.mids)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Mids: ");
        sb.Append(Mids);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class sendBuddyMessageToMidsResult : TBase
  {
    private SendBuddyMessageResult _success;
    private TalkException _e;

    public SendBuddyMessageResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public sendBuddyMessageToMidsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new SendBuddyMessageResult();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("sendBuddyMessageToMids_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as sendBuddyMessageToMidsResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("sendBuddyMessageToMids_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class sendBuddyMessageToMidsAsyncArgs : TBase
  {
    private string _requestId;
    private Message _msg;
    private List<string> _mids;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public Message Msg
    {
      get
      {
        return _msg;
      }
      set
      {
        __isset.msg = true;
        this._msg = value;
      }
    }

    public List<string> Mids
    {
      get
      {
        return _mids;
      }
      set
      {
        __isset.mids = true;
        this._mids = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool msg;
      public bool mids;
    }

    public sendBuddyMessageToMidsAsyncArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Msg = new Message();
                await Msg.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list611 = await iprot.ReadListBeginAsync(cancellationToken);
                  Mids = new List<string>(_list611.Count);
                  for(int _i612 = 0; _i612 < _list611.Count; ++_i612)
                  {
                    string _elem613;
                    _elem613 = await iprot.ReadStringAsync(cancellationToken);
                    Mids.Add(_elem613);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("sendBuddyMessageToMidsAsync_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Msg != null && __isset.msg)
        {
          field.Name = "msg";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Msg.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Mids != null && __isset.mids)
        {
          field.Name = "mids";
          field.Type = TType.List;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Mids.Count), cancellationToken);
            foreach (string _iter614 in Mids)
            {
              await oprot.WriteStringAsync(_iter614, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as sendBuddyMessageToMidsAsyncArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.msg == other.__isset.msg) && ((!__isset.msg) || (System.Object.Equals(Msg, other.Msg))))
        && ((__isset.mids == other.__isset.mids) && ((!__isset.mids) || (TCollections.Equals(Mids, other.Mids))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.msg)
          hashcode = (hashcode * 397) + Msg.GetHashCode();
        if(__isset.mids)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Mids);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("sendBuddyMessageToMidsAsync_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (Msg != null && __isset.msg)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Msg: ");
        sb.Append(Msg== null ? "<null>" : Msg.ToString());
      }
      if (Mids != null && __isset.mids)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Mids: ");
        sb.Append(Mids);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class sendBuddyMessageToMidsAsyncResult : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public sendBuddyMessageToMidsAsyncResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("sendBuddyMessageToMidsAsync_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as sendBuddyMessageToMidsAsyncResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("sendBuddyMessageToMidsAsync_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class sendIndividualEventToAllAsyncArgs : TBase
  {
    private string _requestId;
    private string _buddyMid;
    private NotificationStatus _notificationStatus;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public string BuddyMid
    {
      get
      {
        return _buddyMid;
      }
      set
      {
        __isset.buddyMid = true;
        this._buddyMid = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="NotificationStatus"/>
    /// </summary>
    public NotificationStatus NotificationStatus
    {
      get
      {
        return _notificationStatus;
      }
      set
      {
        __isset.notificationStatus = true;
        this._notificationStatus = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool buddyMid;
      public bool notificationStatus;
    }

    public sendIndividualEventToAllAsyncArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                BuddyMid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                NotificationStatus = (NotificationStatus)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("sendIndividualEventToAllAsync_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (BuddyMid != null && __isset.buddyMid)
        {
          field.Name = "buddyMid";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(BuddyMid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.notificationStatus)
        {
          field.Name = "notificationStatus";
          field.Type = TType.I32;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)NotificationStatus, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as sendIndividualEventToAllAsyncArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.buddyMid == other.__isset.buddyMid) && ((!__isset.buddyMid) || (System.Object.Equals(BuddyMid, other.BuddyMid))))
        && ((__isset.notificationStatus == other.__isset.notificationStatus) && ((!__isset.notificationStatus) || (System.Object.Equals(NotificationStatus, other.NotificationStatus))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.buddyMid)
          hashcode = (hashcode * 397) + BuddyMid.GetHashCode();
        if(__isset.notificationStatus)
          hashcode = (hashcode * 397) + NotificationStatus.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("sendIndividualEventToAllAsync_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (BuddyMid != null && __isset.buddyMid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BuddyMid: ");
        sb.Append(BuddyMid);
      }
      if (__isset.notificationStatus)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NotificationStatus: ");
        sb.Append(NotificationStatus);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class sendIndividualEventToAllAsyncResult : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool e;
    }

    public sendIndividualEventToAllAsyncResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("sendIndividualEventToAllAsync_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as sendIndividualEventToAllAsyncResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("sendIndividualEventToAllAsync_result(");
      bool __first = true;
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class setBuddyOnAirArgs : TBase
  {
    private string _requestId;
    private bool _onAir;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public bool OnAir
    {
      get
      {
        return _onAir;
      }
      set
      {
        __isset.onAir = true;
        this._onAir = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool onAir;
    }

    public setBuddyOnAirArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                OnAir = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("setBuddyOnAir_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.onAir)
        {
          field.Name = "onAir";
          field.Type = TType.Bool;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(OnAir, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as setBuddyOnAirArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.onAir == other.__isset.onAir) && ((!__isset.onAir) || (System.Object.Equals(OnAir, other.OnAir))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.onAir)
          hashcode = (hashcode * 397) + OnAir.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("setBuddyOnAir_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (__isset.onAir)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("OnAir: ");
        sb.Append(OnAir);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class setBuddyOnAirResult : TBase
  {
    private SetBuddyOnAirResult _success;
    private TalkException _e;

    public SetBuddyOnAirResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public setBuddyOnAirResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new SetBuddyOnAirResult();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("setBuddyOnAir_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as setBuddyOnAirResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("setBuddyOnAir_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class setBuddyOnAirAsyncArgs : TBase
  {
    private string _requestId;
    private bool _onAir;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public bool OnAir
    {
      get
      {
        return _onAir;
      }
      set
      {
        __isset.onAir = true;
        this._onAir = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool onAir;
    }

    public setBuddyOnAirAsyncArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                OnAir = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("setBuddyOnAirAsync_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.onAir)
        {
          field.Name = "onAir";
          field.Type = TType.Bool;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(OnAir, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as setBuddyOnAirAsyncArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.onAir == other.__isset.onAir) && ((!__isset.onAir) || (System.Object.Equals(OnAir, other.OnAir))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.onAir)
          hashcode = (hashcode * 397) + OnAir.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("setBuddyOnAirAsync_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (__isset.onAir)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("OnAir: ");
        sb.Append(OnAir);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class setBuddyOnAirAsyncResult : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public setBuddyOnAirAsyncResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("setBuddyOnAirAsync_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as setBuddyOnAirAsyncResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("setBuddyOnAirAsync_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class storeMessageArgs : TBase
  {
    private string _requestId;
    private BuddyMessageRequest _messageRequest;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public BuddyMessageRequest MessageRequest
    {
      get
      {
        return _messageRequest;
      }
      set
      {
        __isset.messageRequest = true;
        this._messageRequest = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool messageRequest;
    }

    public storeMessageArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                MessageRequest = new BuddyMessageRequest();
                await MessageRequest.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("storeMessage_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (MessageRequest != null && __isset.messageRequest)
        {
          field.Name = "messageRequest";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await MessageRequest.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as storeMessageArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.messageRequest == other.__isset.messageRequest) && ((!__isset.messageRequest) || (System.Object.Equals(MessageRequest, other.MessageRequest))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.messageRequest)
          hashcode = (hashcode * 397) + MessageRequest.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("storeMessage_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (MessageRequest != null && __isset.messageRequest)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("MessageRequest: ");
        sb.Append(MessageRequest== null ? "<null>" : MessageRequest.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class storeMessageResult : TBase
  {
    private SendBuddyMessageResult _success;
    private TalkException _e;

    public SendBuddyMessageResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public storeMessageResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new SendBuddyMessageResult();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("storeMessage_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as storeMessageResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("storeMessage_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class unblockBuddyMemberArgs : TBase
  {
    private string _requestId;
    private string _mid;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool mid;
    }

    public unblockBuddyMemberArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Mid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("unblockBuddyMember_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Mid != null && __isset.mid)
        {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Mid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as unblockBuddyMemberArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.mid == other.__isset.mid) && ((!__isset.mid) || (System.Object.Equals(Mid, other.Mid))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.mid)
          hashcode = (hashcode * 397) + Mid.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("unblockBuddyMember_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (Mid != null && __isset.mid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Mid: ");
        sb.Append(Mid);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class unblockBuddyMemberResult : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool e;
    }

    public unblockBuddyMemberResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("unblockBuddyMember_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as unblockBuddyMemberResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("unblockBuddyMember_result(");
      bool __first = true;
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class unregisterBuddyArgs : TBase
  {
    private string _requestId;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
    }

    public unregisterBuddyArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("unregisterBuddy_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as unregisterBuddyArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("unregisterBuddy_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class unregisterBuddyResult : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool e;
    }

    public unregisterBuddyResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("unregisterBuddy_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as unregisterBuddyResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("unregisterBuddy_result(");
      bool __first = true;
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class unregisterBuddyAdminArgs : TBase
  {
    private string _requestId;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
    }

    public unregisterBuddyAdminArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("unregisterBuddyAdmin_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as unregisterBuddyAdminArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("unregisterBuddyAdmin_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class unregisterBuddyAdminResult : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool e;
    }

    public unregisterBuddyAdminResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("unregisterBuddyAdmin_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as unregisterBuddyAdminResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("unregisterBuddyAdmin_result(");
      bool __first = true;
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class updateBuddyAdminProfileAttributeArgs : TBase
  {
    private string _requestId;
    private Dictionary<string, string> _attributes;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public Dictionary<string, string> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool attributes;
    }

    public updateBuddyAdminProfileAttributeArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map615 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Attributes = new Dictionary<string, string>(_map615.Count);
                  for(int _i616 = 0; _i616 < _map615.Count; ++_i616)
                  {
                    string _key617;
                    string _val618;
                    _key617 = await iprot.ReadStringAsync(cancellationToken);
                    _val618 = await iprot.ReadStringAsync(cancellationToken);
                    Attributes[_key617] = _val618;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("updateBuddyAdminProfileAttribute_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (string _iter619 in Attributes.Keys)
            {
              await oprot.WriteStringAsync(_iter619, cancellationToken);
              await oprot.WriteStringAsync(Attributes[_iter619], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as updateBuddyAdminProfileAttributeArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.attributes == other.__isset.attributes) && ((!__isset.attributes) || (TCollections.Equals(Attributes, other.Attributes))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.attributes)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Attributes);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("updateBuddyAdminProfileAttribute_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class updateBuddyAdminProfileAttributeResult : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool e;
    }

    public updateBuddyAdminProfileAttributeResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("updateBuddyAdminProfileAttribute_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as updateBuddyAdminProfileAttributeResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("updateBuddyAdminProfileAttribute_result(");
      bool __first = true;
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class updateBuddyAdminProfileImageArgs : TBase
  {
    private string _requestId;
    private byte[] _picture;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public byte[] Picture
    {
      get
      {
        return _picture;
      }
      set
      {
        __isset.picture = true;
        this._picture = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool picture;
    }

    public updateBuddyAdminProfileImageArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Picture = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("updateBuddyAdminProfileImage_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Picture != null && __isset.picture)
        {
          field.Name = "picture";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Picture, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as updateBuddyAdminProfileImageArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.picture == other.__isset.picture) && ((!__isset.picture) || (TCollections.Equals(Picture, other.Picture))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.picture)
          hashcode = (hashcode * 397) + Picture.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("updateBuddyAdminProfileImage_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (Picture != null && __isset.picture)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Picture: ");
        sb.Append(Picture);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class updateBuddyAdminProfileImageResult : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool e;
    }

    public updateBuddyAdminProfileImageResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("updateBuddyAdminProfileImage_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as updateBuddyAdminProfileImageResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("updateBuddyAdminProfileImage_result(");
      bool __first = true;
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class updateBuddyProfileAttributesArgs : TBase
  {
    private string _requestId;
    private Dictionary<string, string> _attributes;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public Dictionary<string, string> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool attributes;
    }

    public updateBuddyProfileAttributesArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map620 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Attributes = new Dictionary<string, string>(_map620.Count);
                  for(int _i621 = 0; _i621 < _map620.Count; ++_i621)
                  {
                    string _key622;
                    string _val623;
                    _key622 = await iprot.ReadStringAsync(cancellationToken);
                    _val623 = await iprot.ReadStringAsync(cancellationToken);
                    Attributes[_key622] = _val623;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("updateBuddyProfileAttributes_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (string _iter624 in Attributes.Keys)
            {
              await oprot.WriteStringAsync(_iter624, cancellationToken);
              await oprot.WriteStringAsync(Attributes[_iter624], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as updateBuddyProfileAttributesArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.attributes == other.__isset.attributes) && ((!__isset.attributes) || (TCollections.Equals(Attributes, other.Attributes))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.attributes)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Attributes);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("updateBuddyProfileAttributes_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class updateBuddyProfileAttributesResult : TBase
  {
    private UpdateBuddyProfileResult _success;
    private TalkException _e;

    public UpdateBuddyProfileResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public updateBuddyProfileAttributesResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new UpdateBuddyProfileResult();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("updateBuddyProfileAttributes_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as updateBuddyProfileAttributesResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("updateBuddyProfileAttributes_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class updateBuddyProfileAttributesAsyncArgs : TBase
  {
    private string _requestId;
    private Dictionary<string, string> _attributes;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public Dictionary<string, string> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool attributes;
    }

    public updateBuddyProfileAttributesAsyncArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map625 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Attributes = new Dictionary<string, string>(_map625.Count);
                  for(int _i626 = 0; _i626 < _map625.Count; ++_i626)
                  {
                    string _key627;
                    string _val628;
                    _key627 = await iprot.ReadStringAsync(cancellationToken);
                    _val628 = await iprot.ReadStringAsync(cancellationToken);
                    Attributes[_key627] = _val628;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("updateBuddyProfileAttributesAsync_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (string _iter629 in Attributes.Keys)
            {
              await oprot.WriteStringAsync(_iter629, cancellationToken);
              await oprot.WriteStringAsync(Attributes[_iter629], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as updateBuddyProfileAttributesAsyncArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.attributes == other.__isset.attributes) && ((!__isset.attributes) || (TCollections.Equals(Attributes, other.Attributes))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.attributes)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Attributes);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("updateBuddyProfileAttributesAsync_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class updateBuddyProfileAttributesAsyncResult : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public updateBuddyProfileAttributesAsyncResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("updateBuddyProfileAttributesAsync_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as updateBuddyProfileAttributesAsyncResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("updateBuddyProfileAttributesAsync_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class updateBuddyProfileImageArgs : TBase
  {
    private string _requestId;
    private byte[] _image;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public byte[] Image
    {
      get
      {
        return _image;
      }
      set
      {
        __isset.image = true;
        this._image = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool image;
    }

    public updateBuddyProfileImageArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Image = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("updateBuddyProfileImage_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Image != null && __isset.image)
        {
          field.Name = "image";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Image, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as updateBuddyProfileImageArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.image == other.__isset.image) && ((!__isset.image) || (TCollections.Equals(Image, other.Image))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.image)
          hashcode = (hashcode * 397) + Image.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("updateBuddyProfileImage_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (Image != null && __isset.image)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Image: ");
        sb.Append(Image);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class updateBuddyProfileImageResult : TBase
  {
    private UpdateBuddyProfileResult _success;
    private TalkException _e;

    public UpdateBuddyProfileResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public updateBuddyProfileImageResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new UpdateBuddyProfileResult();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("updateBuddyProfileImage_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as updateBuddyProfileImageResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("updateBuddyProfileImage_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class updateBuddyProfileImageAsyncArgs : TBase
  {
    private string _requestId;
    private byte[] _image;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public byte[] Image
    {
      get
      {
        return _image;
      }
      set
      {
        __isset.image = true;
        this._image = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool image;
    }

    public updateBuddyProfileImageAsyncArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Image = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("updateBuddyProfileImageAsync_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Image != null && __isset.image)
        {
          field.Name = "image";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Image, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as updateBuddyProfileImageAsyncArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.image == other.__isset.image) && ((!__isset.image) || (TCollections.Equals(Image, other.Image))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.image)
          hashcode = (hashcode * 397) + Image.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("updateBuddyProfileImageAsync_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (Image != null && __isset.image)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Image: ");
        sb.Append(Image);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class updateBuddyProfileImageAsyncResult : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public updateBuddyProfileImageAsyncResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("updateBuddyProfileImageAsync_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as updateBuddyProfileImageAsyncResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("updateBuddyProfileImageAsync_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class updateBuddySearchIdArgs : TBase
  {
    private string _requestId;
    private string _searchId;

    public string RequestId
    {
      get
      {
        return _requestId;
      }
      set
      {
        __isset.requestId = true;
        this._requestId = value;
      }
    }

    public string SearchId
    {
      get
      {
        return _searchId;
      }
      set
      {
        __isset.searchId = true;
        this._searchId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool requestId;
      public bool searchId;
    }

    public updateBuddySearchIdArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                RequestId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                SearchId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("updateBuddySearchId_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (RequestId != null && __isset.requestId)
        {
          field.Name = "requestId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(RequestId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SearchId != null && __isset.searchId)
        {
          field.Name = "searchId";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SearchId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as updateBuddySearchIdArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.requestId == other.__isset.requestId) && ((!__isset.requestId) || (System.Object.Equals(RequestId, other.RequestId))))
        && ((__isset.searchId == other.__isset.searchId) && ((!__isset.searchId) || (System.Object.Equals(SearchId, other.SearchId))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.requestId)
          hashcode = (hashcode * 397) + RequestId.GetHashCode();
        if(__isset.searchId)
          hashcode = (hashcode * 397) + SearchId.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("updateBuddySearchId_args(");
      bool __first = true;
      if (RequestId != null && __isset.requestId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestId: ");
        sb.Append(RequestId);
      }
      if (SearchId != null && __isset.searchId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SearchId: ");
        sb.Append(SearchId);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class updateBuddySearchIdResult : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool e;
    }

    public updateBuddySearchIdResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("updateBuddySearchId_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as updateBuddySearchIdResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("updateBuddySearchId_result(");
      bool __first = true;
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class updateBuddySettingsArgs : TBase
  {
    private Dictionary<string, string> _settings;

    public Dictionary<string, string> Settings
    {
      get
      {
        return _settings;
      }
      set
      {
        __isset.settings = true;
        this._settings = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool settings;
    }

    public updateBuddySettingsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map630 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Settings = new Dictionary<string, string>(_map630.Count);
                  for(int _i631 = 0; _i631 < _map630.Count; ++_i631)
                  {
                    string _key632;
                    string _val633;
                    _key632 = await iprot.ReadStringAsync(cancellationToken);
                    _val633 = await iprot.ReadStringAsync(cancellationToken);
                    Settings[_key632] = _val633;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("updateBuddySettings_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Settings != null && __isset.settings)
        {
          field.Name = "settings";
          field.Type = TType.Map;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Settings.Count), cancellationToken);
            foreach (string _iter634 in Settings.Keys)
            {
              await oprot.WriteStringAsync(_iter634, cancellationToken);
              await oprot.WriteStringAsync(Settings[_iter634], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as updateBuddySettingsArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.settings == other.__isset.settings) && ((!__isset.settings) || (TCollections.Equals(Settings, other.Settings))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.settings)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Settings);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("updateBuddySettings_args(");
      bool __first = true;
      if (Settings != null && __isset.settings)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Settings: ");
        sb.Append(Settings);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class updateBuddySettingsResult : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool e;
    }

    public updateBuddySettingsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("updateBuddySettings_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as updateBuddySettingsResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("updateBuddySettings_result(");
      bool __first = true;
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class uploadBuddyContentArgs : TBase
  {
    private ContentType _contentType;
    private byte[] _content;

    /// <summary>
    /// 
    /// <seealso cref="ContentType"/>
    /// </summary>
    public ContentType ContentType
    {
      get
      {
        return _contentType;
      }
      set
      {
        __isset.contentType = true;
        this._contentType = value;
      }
    }

    public byte[] Content
    {
      get
      {
        return _content;
      }
      set
      {
        __isset.content = true;
        this._content = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool contentType;
      public bool content;
    }

    public uploadBuddyContentArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32)
              {
                ContentType = (ContentType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Content = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("uploadBuddyContent_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.contentType)
        {
          field.Name = "contentType";
          field.Type = TType.I32;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)ContentType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Content != null && __isset.content)
        {
          field.Name = "content";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Content, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as uploadBuddyContentArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.contentType == other.__isset.contentType) && ((!__isset.contentType) || (System.Object.Equals(ContentType, other.ContentType))))
        && ((__isset.content == other.__isset.content) && ((!__isset.content) || (TCollections.Equals(Content, other.Content))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.contentType)
          hashcode = (hashcode * 397) + ContentType.GetHashCode();
        if(__isset.content)
          hashcode = (hashcode * 397) + Content.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("uploadBuddyContent_args(");
      bool __first = true;
      if (__isset.contentType)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ContentType: ");
        sb.Append(ContentType);
      }
      if (Content != null && __isset.content)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Content: ");
        sb.Append(Content);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class uploadBuddyContentResult : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public uploadBuddyContentResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("uploadBuddyContent_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as uploadBuddyContentResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.e)
          hashcode = (hashcode * 397) + E.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("uploadBuddyContent_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
