/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class NotiCenterEventData : TBase
{
  private string _id;
  private string _to;
  private string _from_;
  private string _toChannel;
  private string _fromChannel;
  private string _eventType;
  private long _createdTime;
  private long _operationRevision;
  private Dictionary<string, string> _content;
  private Dictionary<string, string> _push;

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public string To
  {
    get
    {
      return _to;
    }
    set
    {
      __isset.to = true;
      this._to = value;
    }
  }

  public string From_
  {
    get
    {
      return _from_;
    }
    set
    {
      __isset.from_ = true;
      this._from_ = value;
    }
  }

  public string ToChannel
  {
    get
    {
      return _toChannel;
    }
    set
    {
      __isset.toChannel = true;
      this._toChannel = value;
    }
  }

  public string FromChannel
  {
    get
    {
      return _fromChannel;
    }
    set
    {
      __isset.fromChannel = true;
      this._fromChannel = value;
    }
  }

  public string EventType
  {
    get
    {
      return _eventType;
    }
    set
    {
      __isset.eventType = true;
      this._eventType = value;
    }
  }

  public long CreatedTime
  {
    get
    {
      return _createdTime;
    }
    set
    {
      __isset.createdTime = true;
      this._createdTime = value;
    }
  }

  public long OperationRevision
  {
    get
    {
      return _operationRevision;
    }
    set
    {
      __isset.operationRevision = true;
      this._operationRevision = value;
    }
  }

  public Dictionary<string, string> Content
  {
    get
    {
      return _content;
    }
    set
    {
      __isset.content = true;
      this._content = value;
    }
  }

  public Dictionary<string, string> Push
  {
    get
    {
      return _push;
    }
    set
    {
      __isset.push = true;
      this._push = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool id;
    public bool to;
    public bool from_;
    public bool toChannel;
    public bool fromChannel;
    public bool eventType;
    public bool createdTime;
    public bool operationRevision;
    public bool content;
    public bool push;
  }

  public NotiCenterEventData()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Id = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              To = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              From_ = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              ToChannel = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              FromChannel = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.String)
            {
              EventType = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.I64)
            {
              CreatedTime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.I64)
            {
              OperationRevision = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.Map)
            {
              {
                TMap _map95 = await iprot.ReadMapBeginAsync(cancellationToken);
                Content = new Dictionary<string, string>(_map95.Count);
                for(int _i96 = 0; _i96 < _map95.Count; ++_i96)
                {
                  string _key97;
                  string _val98;
                  _key97 = await iprot.ReadStringAsync(cancellationToken);
                  _val98 = await iprot.ReadStringAsync(cancellationToken);
                  Content[_key97] = _val98;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.Map)
            {
              {
                TMap _map99 = await iprot.ReadMapBeginAsync(cancellationToken);
                Push = new Dictionary<string, string>(_map99.Count);
                for(int _i100 = 0; _i100 < _map99.Count; ++_i100)
                {
                  string _key101;
                  string _val102;
                  _key101 = await iprot.ReadStringAsync(cancellationToken);
                  _val102 = await iprot.ReadStringAsync(cancellationToken);
                  Push[_key101] = _val102;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("NotiCenterEventData");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Id != null && __isset.id)
      {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Id, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (To != null && __isset.to)
      {
        field.Name = "to";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(To, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (From_ != null && __isset.from_)
      {
        field.Name = "from_";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(From_, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ToChannel != null && __isset.toChannel)
      {
        field.Name = "toChannel";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ToChannel, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (FromChannel != null && __isset.fromChannel)
      {
        field.Name = "fromChannel";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(FromChannel, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (EventType != null && __isset.eventType)
      {
        field.Name = "eventType";
        field.Type = TType.String;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(EventType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.createdTime)
      {
        field.Name = "createdTime";
        field.Type = TType.I64;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(CreatedTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.operationRevision)
      {
        field.Name = "operationRevision";
        field.Type = TType.I64;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(OperationRevision, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Content != null && __isset.content)
      {
        field.Name = "content";
        field.Type = TType.Map;
        field.ID = 9;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Content.Count), cancellationToken);
          foreach (string _iter103 in Content.Keys)
          {
            await oprot.WriteStringAsync(_iter103, cancellationToken);
            await oprot.WriteStringAsync(Content[_iter103], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Push != null && __isset.push)
      {
        field.Name = "push";
        field.Type = TType.Map;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Push.Count), cancellationToken);
          foreach (string _iter104 in Push.Keys)
          {
            await oprot.WriteStringAsync(_iter104, cancellationToken);
            await oprot.WriteStringAsync(Push[_iter104], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as NotiCenterEventData;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.id == other.__isset.id) && ((!__isset.id) || (System.Object.Equals(Id, other.Id))))
      && ((__isset.to == other.__isset.to) && ((!__isset.to) || (System.Object.Equals(To, other.To))))
      && ((__isset.from_ == other.__isset.from_) && ((!__isset.from_) || (System.Object.Equals(From_, other.From_))))
      && ((__isset.toChannel == other.__isset.toChannel) && ((!__isset.toChannel) || (System.Object.Equals(ToChannel, other.ToChannel))))
      && ((__isset.fromChannel == other.__isset.fromChannel) && ((!__isset.fromChannel) || (System.Object.Equals(FromChannel, other.FromChannel))))
      && ((__isset.eventType == other.__isset.eventType) && ((!__isset.eventType) || (System.Object.Equals(EventType, other.EventType))))
      && ((__isset.createdTime == other.__isset.createdTime) && ((!__isset.createdTime) || (System.Object.Equals(CreatedTime, other.CreatedTime))))
      && ((__isset.operationRevision == other.__isset.operationRevision) && ((!__isset.operationRevision) || (System.Object.Equals(OperationRevision, other.OperationRevision))))
      && ((__isset.content == other.__isset.content) && ((!__isset.content) || (TCollections.Equals(Content, other.Content))))
      && ((__isset.push == other.__isset.push) && ((!__isset.push) || (TCollections.Equals(Push, other.Push))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.id)
        hashcode = (hashcode * 397) + Id.GetHashCode();
      if(__isset.to)
        hashcode = (hashcode * 397) + To.GetHashCode();
      if(__isset.from_)
        hashcode = (hashcode * 397) + From_.GetHashCode();
      if(__isset.toChannel)
        hashcode = (hashcode * 397) + ToChannel.GetHashCode();
      if(__isset.fromChannel)
        hashcode = (hashcode * 397) + FromChannel.GetHashCode();
      if(__isset.eventType)
        hashcode = (hashcode * 397) + EventType.GetHashCode();
      if(__isset.createdTime)
        hashcode = (hashcode * 397) + CreatedTime.GetHashCode();
      if(__isset.operationRevision)
        hashcode = (hashcode * 397) + OperationRevision.GetHashCode();
      if(__isset.content)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Content);
      if(__isset.push)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Push);
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("NotiCenterEventData(");
    bool __first = true;
    if (Id != null && __isset.id)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Id: ");
      sb.Append(Id);
    }
    if (To != null && __isset.to)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("To: ");
      sb.Append(To);
    }
    if (From_ != null && __isset.from_)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("From_: ");
      sb.Append(From_);
    }
    if (ToChannel != null && __isset.toChannel)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ToChannel: ");
      sb.Append(ToChannel);
    }
    if (FromChannel != null && __isset.fromChannel)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("FromChannel: ");
      sb.Append(FromChannel);
    }
    if (EventType != null && __isset.eventType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("EventType: ");
      sb.Append(EventType);
    }
    if (__isset.createdTime)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CreatedTime: ");
      sb.Append(CreatedTime);
    }
    if (__isset.operationRevision)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("OperationRevision: ");
      sb.Append(OperationRevision);
    }
    if (Content != null && __isset.content)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Content: ");
      sb.Append(Content);
    }
    if (Push != null && __isset.push)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Push: ");
      sb.Append(Push);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

