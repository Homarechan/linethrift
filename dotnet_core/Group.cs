/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



public partial class @Group : TBase
{
  private string _id;
  private long _createdTime;
  private string _name;
  private string _pictureStatus;
  private bool _preventedJoinByTicket;
  private GroupPreference _groupPreference;
  private List<Contact> _members;
  private Contact _creator;
  private List<Contact> _invitee;
  private bool _notificationDisabled;

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public long CreatedTime
  {
    get
    {
      return _createdTime;
    }
    set
    {
      __isset.createdTime = true;
      this._createdTime = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string PictureStatus
  {
    get
    {
      return _pictureStatus;
    }
    set
    {
      __isset.pictureStatus = true;
      this._pictureStatus = value;
    }
  }

  public bool PreventedJoinByTicket
  {
    get
    {
      return _preventedJoinByTicket;
    }
    set
    {
      __isset.preventedJoinByTicket = true;
      this._preventedJoinByTicket = value;
    }
  }

  public GroupPreference GroupPreference
  {
    get
    {
      return _groupPreference;
    }
    set
    {
      __isset.groupPreference = true;
      this._groupPreference = value;
    }
  }

  public List<Contact> Members
  {
    get
    {
      return _members;
    }
    set
    {
      __isset.members = true;
      this._members = value;
    }
  }

  public Contact Creator
  {
    get
    {
      return _creator;
    }
    set
    {
      __isset.creator = true;
      this._creator = value;
    }
  }

  public List<Contact> Invitee
  {
    get
    {
      return _invitee;
    }
    set
    {
      __isset.invitee = true;
      this._invitee = value;
    }
  }

  public bool NotificationDisabled
  {
    get
    {
      return _notificationDisabled;
    }
    set
    {
      __isset.notificationDisabled = true;
      this._notificationDisabled = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool id;
    public bool createdTime;
    public bool name;
    public bool pictureStatus;
    public bool preventedJoinByTicket;
    public bool groupPreference;
    public bool members;
    public bool creator;
    public bool invitee;
    public bool notificationDisabled;
  }

  public @Group()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Id = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              CreatedTime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.String)
            {
              Name = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.String)
            {
              PictureStatus = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.Bool)
            {
              PreventedJoinByTicket = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 13:
            if (field.Type == TType.Struct)
            {
              GroupPreference = new GroupPreference();
              await GroupPreference.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 20:
            if (field.Type == TType.List)
            {
              {
                Members = new List<Contact>();
                TList _list141 = await iprot.ReadListBeginAsync(cancellationToken);
                for(int _i142 = 0; _i142 < _list141.Count; ++_i142)
                {
                  Contact _elem143;
                  _elem143 = new Contact();
                  await _elem143.ReadAsync(iprot, cancellationToken);
                  Members.Add(_elem143);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 21:
            if (field.Type == TType.Struct)
            {
              Creator = new Contact();
              await Creator.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 22:
            if (field.Type == TType.List)
            {
              {
                Invitee = new List<Contact>();
                TList _list144 = await iprot.ReadListBeginAsync(cancellationToken);
                for(int _i145 = 0; _i145 < _list144.Count; ++_i145)
                {
                  Contact _elem146;
                  _elem146 = new Contact();
                  await _elem146.ReadAsync(iprot, cancellationToken);
                  Invitee.Add(_elem146);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 31:
            if (field.Type == TType.Bool)
            {
              NotificationDisabled = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("Group");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Id != null && __isset.id)
      {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Id, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.createdTime)
      {
        field.Name = "createdTime";
        field.Type = TType.I64;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(CreatedTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Name != null && __isset.name)
      {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Name, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (PictureStatus != null && __isset.pictureStatus)
      {
        field.Name = "pictureStatus";
        field.Type = TType.String;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(PictureStatus, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.preventedJoinByTicket)
      {
        field.Name = "preventedJoinByTicket";
        field.Type = TType.Bool;
        field.ID = 12;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(PreventedJoinByTicket, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (GroupPreference != null && __isset.groupPreference)
      {
        field.Name = "groupPreference";
        field.Type = TType.Struct;
        field.ID = 13;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await GroupPreference.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Members != null && __isset.members)
      {
        field.Name = "members";
        field.Type = TType.List;
        field.ID = 20;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Members.Count), cancellationToken);
          foreach (Contact _iter147 in Members)
          {
            await _iter147.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Creator != null && __isset.creator)
      {
        field.Name = "creator";
        field.Type = TType.Struct;
        field.ID = 21;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Creator.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Invitee != null && __isset.invitee)
      {
        field.Name = "invitee";
        field.Type = TType.List;
        field.ID = 22;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Invitee.Count), cancellationToken);
          foreach (Contact _iter148 in Invitee)
          {
            await _iter148.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.notificationDisabled)
      {
        field.Name = "notificationDisabled";
        field.Type = TType.Bool;
        field.ID = 31;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(NotificationDisabled, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("Group(");
    bool __first = true;
    if (Id != null && __isset.id)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Id: ");
      sb.Append(Id);
    }
    if (__isset.createdTime)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CreatedTime: ");
      sb.Append(CreatedTime);
    }
    if (Name != null && __isset.name)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Name: ");
      sb.Append(Name);
    }
    if (PictureStatus != null && __isset.pictureStatus)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PictureStatus: ");
      sb.Append(PictureStatus);
    }
    if (__isset.preventedJoinByTicket)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PreventedJoinByTicket: ");
      sb.Append(PreventedJoinByTicket);
    }
    if (GroupPreference != null && __isset.groupPreference)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("GroupPreference: ");
      sb.Append(GroupPreference== null ? "<null>" : GroupPreference.ToString());
    }
    if (Members != null && __isset.members)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Members: ");
      sb.Append(Members);
    }
    if (Creator != null && __isset.creator)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Creator: ");
      sb.Append(Creator== null ? "<null>" : Creator.ToString());
    }
    if (Invitee != null && __isset.invitee)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Invitee: ");
      sb.Append(Invitee);
    }
    if (__isset.notificationDisabled)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("NotificationDisabled: ");
      sb.Append(NotificationDisabled);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

