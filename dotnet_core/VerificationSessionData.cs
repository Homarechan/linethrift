/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



public partial class VerificationSessionData : TBase
{
  private string _sessionId;
  private VerificationMethod _method;
  private string _callback;
  private string _normalizedPhone;
  private string _countryCode;
  private string _nationalSignificantNumber;
  private List<VerificationMethod> _availableVerificationMethods;

  public string SessionId
  {
    get
    {
      return _sessionId;
    }
    set
    {
      __isset.sessionId = true;
      this._sessionId = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="VerificationMethod"/>
  /// </summary>
  public VerificationMethod Method
  {
    get
    {
      return _method;
    }
    set
    {
      __isset.method = true;
      this._method = value;
    }
  }

  public string Callback
  {
    get
    {
      return _callback;
    }
    set
    {
      __isset.callback = true;
      this._callback = value;
    }
  }

  public string NormalizedPhone
  {
    get
    {
      return _normalizedPhone;
    }
    set
    {
      __isset.normalizedPhone = true;
      this._normalizedPhone = value;
    }
  }

  public string CountryCode
  {
    get
    {
      return _countryCode;
    }
    set
    {
      __isset.countryCode = true;
      this._countryCode = value;
    }
  }

  public string NationalSignificantNumber
  {
    get
    {
      return _nationalSignificantNumber;
    }
    set
    {
      __isset.nationalSignificantNumber = true;
      this._nationalSignificantNumber = value;
    }
  }

  public List<VerificationMethod> AvailableVerificationMethods
  {
    get
    {
      return _availableVerificationMethods;
    }
    set
    {
      __isset.availableVerificationMethods = true;
      this._availableVerificationMethods = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool sessionId;
    public bool method;
    public bool callback;
    public bool normalizedPhone;
    public bool countryCode;
    public bool nationalSignificantNumber;
    public bool availableVerificationMethods;
  }

  public VerificationSessionData()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              SessionId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              Method = (VerificationMethod)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Callback = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              NormalizedPhone = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              CountryCode = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.String)
            {
              NationalSignificantNumber = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.List)
            {
              {
                AvailableVerificationMethods = new List<VerificationMethod>();
                TList _list153 = await iprot.ReadListBeginAsync(cancellationToken);
                for(int _i154 = 0; _i154 < _list153.Count; ++_i154)
                {
                  VerificationMethod _elem155;
                  _elem155 = (VerificationMethod)await iprot.ReadI32Async(cancellationToken);
                  AvailableVerificationMethods.Add(_elem155);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("VerificationSessionData");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (SessionId != null && __isset.sessionId)
      {
        field.Name = "sessionId";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(SessionId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.method)
      {
        field.Name = "method";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Method, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Callback != null && __isset.callback)
      {
        field.Name = "callback";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Callback, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (NormalizedPhone != null && __isset.normalizedPhone)
      {
        field.Name = "normalizedPhone";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(NormalizedPhone, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (CountryCode != null && __isset.countryCode)
      {
        field.Name = "countryCode";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(CountryCode, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (NationalSignificantNumber != null && __isset.nationalSignificantNumber)
      {
        field.Name = "nationalSignificantNumber";
        field.Type = TType.String;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(NationalSignificantNumber, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (AvailableVerificationMethods != null && __isset.availableVerificationMethods)
      {
        field.Name = "availableVerificationMethods";
        field.Type = TType.List;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I32, AvailableVerificationMethods.Count), cancellationToken);
          foreach (VerificationMethod _iter156 in AvailableVerificationMethods)
          {
            await oprot.WriteI32Async((int)_iter156, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("VerificationSessionData(");
    bool __first = true;
    if (SessionId != null && __isset.sessionId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SessionId: ");
      sb.Append(SessionId);
    }
    if (__isset.method)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Method: ");
      sb.Append(Method);
    }
    if (Callback != null && __isset.callback)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Callback: ");
      sb.Append(Callback);
    }
    if (NormalizedPhone != null && __isset.normalizedPhone)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("NormalizedPhone: ");
      sb.Append(NormalizedPhone);
    }
    if (CountryCode != null && __isset.countryCode)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CountryCode: ");
      sb.Append(CountryCode);
    }
    if (NationalSignificantNumber != null && __isset.nationalSignificantNumber)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("NationalSignificantNumber: ");
      sb.Append(NationalSignificantNumber);
    }
    if (AvailableVerificationMethods != null && __isset.availableVerificationMethods)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("AvailableVerificationMethods: ");
      sb.Append(AvailableVerificationMethods);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

