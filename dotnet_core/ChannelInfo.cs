/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



public partial class ChannelInfo : TBase
{
  private string _channelId;
  private string _name;
  private string _entryPageUrl;
  private string _descriptionText;
  private ChannelProvider _provider;
  private PublicType _publicType;
  private string _iconImage;
  private List<string> _permissions;
  private string _iconThumbnailImage;
  private List<ChannelConfiguration> _channelConfigurations;
  private bool _lcsAllApiUsable;
  private THashSet<ChannelPermission> _allowedPermissions;
  private List<ChannelDomain> _channelDomains;
  private long _updatedTimestamp;

  public string ChannelId
  {
    get
    {
      return _channelId;
    }
    set
    {
      __isset.channelId = true;
      this._channelId = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string EntryPageUrl
  {
    get
    {
      return _entryPageUrl;
    }
    set
    {
      __isset.entryPageUrl = true;
      this._entryPageUrl = value;
    }
  }

  public string DescriptionText
  {
    get
    {
      return _descriptionText;
    }
    set
    {
      __isset.descriptionText = true;
      this._descriptionText = value;
    }
  }

  public ChannelProvider Provider
  {
    get
    {
      return _provider;
    }
    set
    {
      __isset.provider = true;
      this._provider = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="PublicType"/>
  /// </summary>
  public PublicType PublicType
  {
    get
    {
      return _publicType;
    }
    set
    {
      __isset.publicType = true;
      this._publicType = value;
    }
  }

  public string IconImage
  {
    get
    {
      return _iconImage;
    }
    set
    {
      __isset.iconImage = true;
      this._iconImage = value;
    }
  }

  public List<string> Permissions
  {
    get
    {
      return _permissions;
    }
    set
    {
      __isset.permissions = true;
      this._permissions = value;
    }
  }

  public string IconThumbnailImage
  {
    get
    {
      return _iconThumbnailImage;
    }
    set
    {
      __isset.iconThumbnailImage = true;
      this._iconThumbnailImage = value;
    }
  }

  public List<ChannelConfiguration> ChannelConfigurations
  {
    get
    {
      return _channelConfigurations;
    }
    set
    {
      __isset.channelConfigurations = true;
      this._channelConfigurations = value;
    }
  }

  public bool LcsAllApiUsable
  {
    get
    {
      return _lcsAllApiUsable;
    }
    set
    {
      __isset.lcsAllApiUsable = true;
      this._lcsAllApiUsable = value;
    }
  }

  public THashSet<ChannelPermission> AllowedPermissions
  {
    get
    {
      return _allowedPermissions;
    }
    set
    {
      __isset.allowedPermissions = true;
      this._allowedPermissions = value;
    }
  }

  public List<ChannelDomain> ChannelDomains
  {
    get
    {
      return _channelDomains;
    }
    set
    {
      __isset.channelDomains = true;
      this._channelDomains = value;
    }
  }

  public long UpdatedTimestamp
  {
    get
    {
      return _updatedTimestamp;
    }
    set
    {
      __isset.updatedTimestamp = true;
      this._updatedTimestamp = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool channelId;
    public bool name;
    public bool entryPageUrl;
    public bool descriptionText;
    public bool provider;
    public bool publicType;
    public bool iconImage;
    public bool permissions;
    public bool iconThumbnailImage;
    public bool channelConfigurations;
    public bool lcsAllApiUsable;
    public bool allowedPermissions;
    public bool channelDomains;
    public bool updatedTimestamp;
  }

  public ChannelInfo()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              ChannelId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Name = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              EntryPageUrl = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              DescriptionText = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.Struct)
            {
              Provider = new ChannelProvider();
              await Provider.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.I32)
            {
              PublicType = (PublicType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.String)
            {
              IconImage = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.List)
            {
              {
                Permissions = new List<string>();
                TList _list36 = await iprot.ReadListBeginAsync(cancellationToken);
                for(int _i37 = 0; _i37 < _list36.Count; ++_i37)
                {
                  string _elem38;
                  _elem38 = await iprot.ReadStringAsync(cancellationToken);
                  Permissions.Add(_elem38);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.String)
            {
              IconThumbnailImage = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.List)
            {
              {
                ChannelConfigurations = new List<ChannelConfiguration>();
                TList _list39 = await iprot.ReadListBeginAsync(cancellationToken);
                for(int _i40 = 0; _i40 < _list39.Count; ++_i40)
                {
                  ChannelConfiguration _elem41;
                  _elem41 = (ChannelConfiguration)await iprot.ReadI32Async(cancellationToken);
                  ChannelConfigurations.Add(_elem41);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 13:
            if (field.Type == TType.Bool)
            {
              LcsAllApiUsable = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 14:
            if (field.Type == TType.Set)
            {
              {
                AllowedPermissions = new THashSet<ChannelPermission>();
                TSet _set42 = await iprot.ReadSetBeginAsync(cancellationToken);
                for(int _i43 = 0; _i43 < _set42.Count; ++_i43)
                {
                  ChannelPermission _elem44;
                  _elem44 = (ChannelPermission)await iprot.ReadI32Async(cancellationToken);
                  AllowedPermissions.Add(_elem44);
                }
                await iprot.ReadSetEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 15:
            if (field.Type == TType.List)
            {
              {
                ChannelDomains = new List<ChannelDomain>();
                TList _list45 = await iprot.ReadListBeginAsync(cancellationToken);
                for(int _i46 = 0; _i46 < _list45.Count; ++_i46)
                {
                  ChannelDomain _elem47;
                  _elem47 = new ChannelDomain();
                  await _elem47.ReadAsync(iprot, cancellationToken);
                  ChannelDomains.Add(_elem47);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 16:
            if (field.Type == TType.I64)
            {
              UpdatedTimestamp = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("ChannelInfo");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (ChannelId != null && __isset.channelId)
      {
        field.Name = "channelId";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ChannelId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Name != null && __isset.name)
      {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Name, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (EntryPageUrl != null && __isset.entryPageUrl)
      {
        field.Name = "entryPageUrl";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(EntryPageUrl, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (DescriptionText != null && __isset.descriptionText)
      {
        field.Name = "descriptionText";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(DescriptionText, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Provider != null && __isset.provider)
      {
        field.Name = "provider";
        field.Type = TType.Struct;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Provider.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.publicType)
      {
        field.Name = "publicType";
        field.Type = TType.I32;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)PublicType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (IconImage != null && __isset.iconImage)
      {
        field.Name = "iconImage";
        field.Type = TType.String;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(IconImage, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Permissions != null && __isset.permissions)
      {
        field.Name = "permissions";
        field.Type = TType.List;
        field.ID = 9;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Permissions.Count), cancellationToken);
          foreach (string _iter48 in Permissions)
          {
            await oprot.WriteStringAsync(_iter48, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (IconThumbnailImage != null && __isset.iconThumbnailImage)
      {
        field.Name = "iconThumbnailImage";
        field.Type = TType.String;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(IconThumbnailImage, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ChannelConfigurations != null && __isset.channelConfigurations)
      {
        field.Name = "channelConfigurations";
        field.Type = TType.List;
        field.ID = 12;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I32, ChannelConfigurations.Count), cancellationToken);
          foreach (ChannelConfiguration _iter49 in ChannelConfigurations)
          {
            await oprot.WriteI32Async((int)_iter49, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.lcsAllApiUsable)
      {
        field.Name = "lcsAllApiUsable";
        field.Type = TType.Bool;
        field.ID = 13;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(LcsAllApiUsable, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (AllowedPermissions != null && __isset.allowedPermissions)
      {
        field.Name = "allowedPermissions";
        field.Type = TType.Set;
        field.ID = 14;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteSetBeginAsync(new TSet(TType.I32, AllowedPermissions.Count), cancellationToken);
          foreach (ChannelPermission _iter50 in AllowedPermissions)
          {
            await oprot.WriteI32Async((int)_iter50, cancellationToken);
          }
          await oprot.WriteSetEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ChannelDomains != null && __isset.channelDomains)
      {
        field.Name = "channelDomains";
        field.Type = TType.List;
        field.ID = 15;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, ChannelDomains.Count), cancellationToken);
          foreach (ChannelDomain _iter51 in ChannelDomains)
          {
            await _iter51.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.updatedTimestamp)
      {
        field.Name = "updatedTimestamp";
        field.Type = TType.I64;
        field.ID = 16;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(UpdatedTimestamp, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("ChannelInfo(");
    bool __first = true;
    if (ChannelId != null && __isset.channelId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ChannelId: ");
      sb.Append(ChannelId);
    }
    if (Name != null && __isset.name)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Name: ");
      sb.Append(Name);
    }
    if (EntryPageUrl != null && __isset.entryPageUrl)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("EntryPageUrl: ");
      sb.Append(EntryPageUrl);
    }
    if (DescriptionText != null && __isset.descriptionText)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DescriptionText: ");
      sb.Append(DescriptionText);
    }
    if (Provider != null && __isset.provider)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Provider: ");
      sb.Append(Provider== null ? "<null>" : Provider.ToString());
    }
    if (__isset.publicType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("PublicType: ");
      sb.Append(PublicType);
    }
    if (IconImage != null && __isset.iconImage)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("IconImage: ");
      sb.Append(IconImage);
    }
    if (Permissions != null && __isset.permissions)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Permissions: ");
      sb.Append(Permissions);
    }
    if (IconThumbnailImage != null && __isset.iconThumbnailImage)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("IconThumbnailImage: ");
      sb.Append(IconThumbnailImage);
    }
    if (ChannelConfigurations != null && __isset.channelConfigurations)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ChannelConfigurations: ");
      sb.Append(ChannelConfigurations);
    }
    if (__isset.lcsAllApiUsable)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("LcsAllApiUsable: ");
      sb.Append(LcsAllApiUsable);
    }
    if (AllowedPermissions != null && __isset.allowedPermissions)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("AllowedPermissions: ");
      sb.Append(AllowedPermissions);
    }
    if (ChannelDomains != null && __isset.channelDomains)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ChannelDomains: ");
      sb.Append(ChannelDomains);
    }
    if (__isset.updatedTimestamp)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("UpdatedTimestamp: ");
      sb.Append(UpdatedTimestamp);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

