/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



public partial class BuddyMessageRequest : TBase
{
  private ContentType _contentType;
  private string _text;
  private Location _location;
  private byte[] _content;
  private Dictionary<string, string> _contentMetadata;

  /// <summary>
  /// 
  /// <seealso cref="ContentType"/>
  /// </summary>
  public ContentType ContentType
  {
    get
    {
      return _contentType;
    }
    set
    {
      __isset.contentType = true;
      this._contentType = value;
    }
  }

  public string Text
  {
    get
    {
      return _text;
    }
    set
    {
      __isset.text = true;
      this._text = value;
    }
  }

  public Location Location
  {
    get
    {
      return _location;
    }
    set
    {
      __isset.location = true;
      this._location = value;
    }
  }

  public byte[] Content
  {
    get
    {
      return _content;
    }
    set
    {
      __isset.content = true;
      this._content = value;
    }
  }

  public Dictionary<string, string> ContentMetadata
  {
    get
    {
      return _contentMetadata;
    }
    set
    {
      __isset.contentMetadata = true;
      this._contentMetadata = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool contentType;
    public bool text;
    public bool location;
    public bool content;
    public bool contentMetadata;
  }

  public BuddyMessageRequest()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              ContentType = (ContentType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Text = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Struct)
            {
              Location = new Location();
              await Location.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Content = await iprot.ReadBinaryAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.Map)
            {
              {
                ContentMetadata = new Dictionary<string, string>();
                TMap _map64 = await iprot.ReadMapBeginAsync(cancellationToken);
                for(int _i65 = 0; _i65 < _map64.Count; ++_i65)
                {
                  string _key66;
                  string _val67;
                  _key66 = await iprot.ReadStringAsync(cancellationToken);
                  _val67 = await iprot.ReadStringAsync(cancellationToken);
                  ContentMetadata[_key66] = _val67;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("BuddyMessageRequest");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.contentType)
      {
        field.Name = "contentType";
        field.Type = TType.I32;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)ContentType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Text != null && __isset.text)
      {
        field.Name = "text";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Text, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Location != null && __isset.location)
      {
        field.Name = "location";
        field.Type = TType.Struct;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Location.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Content != null && __isset.content)
      {
        field.Name = "content";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBinaryAsync(Content, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ContentMetadata != null && __isset.contentMetadata)
      {
        field.Name = "contentMetadata";
        field.Type = TType.Map;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ContentMetadata.Count), cancellationToken);
          foreach (string _iter68 in ContentMetadata.Keys)
          {
            await oprot.WriteStringAsync(_iter68, cancellationToken);
            await oprot.WriteStringAsync(ContentMetadata[_iter68], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("BuddyMessageRequest(");
    bool __first = true;
    if (__isset.contentType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ContentType: ");
      sb.Append(ContentType);
    }
    if (Text != null && __isset.text)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Text: ");
      sb.Append(Text);
    }
    if (Location != null && __isset.location)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Location: ");
      sb.Append(Location== null ? "<null>" : Location.ToString());
    }
    if (Content != null && __isset.content)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Content: ");
      sb.Append(Content);
    }
    if (ContentMetadata != null && __isset.contentMetadata)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ContentMetadata: ");
      sb.Append(ContentMetadata);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

