/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



public partial class SearchSquaresResponse : TBase
{
  private List<Square> _squares;
  private Dictionary<string, SquareStatus> _squareStatuses;
  private Dictionary<string, SquareMember> _myMemberships;
  private string _continuationToken;
  private Dictionary<string, NoteStatus> _noteStatuses;

  public List<Square> Squares
  {
    get
    {
      return _squares;
    }
    set
    {
      __isset.squares = true;
      this._squares = value;
    }
  }

  public Dictionary<string, SquareStatus> SquareStatuses
  {
    get
    {
      return _squareStatuses;
    }
    set
    {
      __isset.squareStatuses = true;
      this._squareStatuses = value;
    }
  }

  public Dictionary<string, SquareMember> MyMemberships
  {
    get
    {
      return _myMemberships;
    }
    set
    {
      __isset.myMemberships = true;
      this._myMemberships = value;
    }
  }

  public string ContinuationToken
  {
    get
    {
      return _continuationToken;
    }
    set
    {
      __isset.continuationToken = true;
      this._continuationToken = value;
    }
  }

  public Dictionary<string, NoteStatus> NoteStatuses
  {
    get
    {
      return _noteStatuses;
    }
    set
    {
      __isset.noteStatuses = true;
      this._noteStatuses = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool squares;
    public bool squareStatuses;
    public bool myMemberships;
    public bool continuationToken;
    public bool noteStatuses;
  }

  public SearchSquaresResponse()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                Squares = new List<Square>();
                TList _list390 = await iprot.ReadListBeginAsync(cancellationToken);
                for(int _i391 = 0; _i391 < _list390.Count; ++_i391)
                {
                  Square _elem392;
                  _elem392 = new Square();
                  await _elem392.ReadAsync(iprot, cancellationToken);
                  Squares.Add(_elem392);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Map)
            {
              {
                SquareStatuses = new Dictionary<string, SquareStatus>();
                TMap _map393 = await iprot.ReadMapBeginAsync(cancellationToken);
                for(int _i394 = 0; _i394 < _map393.Count; ++_i394)
                {
                  string _key395;
                  SquareStatus _val396;
                  _key395 = await iprot.ReadStringAsync(cancellationToken);
                  _val396 = new SquareStatus();
                  await _val396.ReadAsync(iprot, cancellationToken);
                  SquareStatuses[_key395] = _val396;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Map)
            {
              {
                MyMemberships = new Dictionary<string, SquareMember>();
                TMap _map397 = await iprot.ReadMapBeginAsync(cancellationToken);
                for(int _i398 = 0; _i398 < _map397.Count; ++_i398)
                {
                  string _key399;
                  SquareMember _val400;
                  _key399 = await iprot.ReadStringAsync(cancellationToken);
                  _val400 = new SquareMember();
                  await _val400.ReadAsync(iprot, cancellationToken);
                  MyMemberships[_key399] = _val400;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              ContinuationToken = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.Map)
            {
              {
                NoteStatuses = new Dictionary<string, NoteStatus>();
                TMap _map401 = await iprot.ReadMapBeginAsync(cancellationToken);
                for(int _i402 = 0; _i402 < _map401.Count; ++_i402)
                {
                  string _key403;
                  NoteStatus _val404;
                  _key403 = await iprot.ReadStringAsync(cancellationToken);
                  _val404 = new NoteStatus();
                  await _val404.ReadAsync(iprot, cancellationToken);
                  NoteStatuses[_key403] = _val404;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("SearchSquaresResponse");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Squares != null && __isset.squares)
      {
        field.Name = "squares";
        field.Type = TType.List;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Squares.Count), cancellationToken);
          foreach (Square _iter405 in Squares)
          {
            await _iter405.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SquareStatuses != null && __isset.squareStatuses)
      {
        field.Name = "squareStatuses";
        field.Type = TType.Map;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, SquareStatuses.Count), cancellationToken);
          foreach (string _iter406 in SquareStatuses.Keys)
          {
            await oprot.WriteStringAsync(_iter406, cancellationToken);
            await SquareStatuses[_iter406].WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (MyMemberships != null && __isset.myMemberships)
      {
        field.Name = "myMemberships";
        field.Type = TType.Map;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, MyMemberships.Count), cancellationToken);
          foreach (string _iter407 in MyMemberships.Keys)
          {
            await oprot.WriteStringAsync(_iter407, cancellationToken);
            await MyMemberships[_iter407].WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ContinuationToken != null && __isset.continuationToken)
      {
        field.Name = "continuationToken";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ContinuationToken, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (NoteStatuses != null && __isset.noteStatuses)
      {
        field.Name = "noteStatuses";
        field.Type = TType.Map;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, NoteStatuses.Count), cancellationToken);
          foreach (string _iter408 in NoteStatuses.Keys)
          {
            await oprot.WriteStringAsync(_iter408, cancellationToken);
            await NoteStatuses[_iter408].WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("SearchSquaresResponse(");
    bool __first = true;
    if (Squares != null && __isset.squares)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Squares: ");
      sb.Append(Squares);
    }
    if (SquareStatuses != null && __isset.squareStatuses)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SquareStatuses: ");
      sb.Append(SquareStatuses);
    }
    if (MyMemberships != null && __isset.myMemberships)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MyMemberships: ");
      sb.Append(MyMemberships);
    }
    if (ContinuationToken != null && __isset.continuationToken)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ContinuationToken: ");
      sb.Append(ContinuationToken);
    }
    if (NoteStatuses != null && __isset.noteStatuses)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("NoteStatuses: ");
      sb.Append(NoteStatuses);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

