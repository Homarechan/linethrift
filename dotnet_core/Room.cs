/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



public partial class Room : TBase
{
  private string _mid;
  private long _createdTime;
  private List<Contact> _contacts;
  private bool _notificationDisabled;
  private List<string> _memberMids;

  public string Mid
  {
    get
    {
      return _mid;
    }
    set
    {
      __isset.mid = true;
      this._mid = value;
    }
  }

  public long CreatedTime
  {
    get
    {
      return _createdTime;
    }
    set
    {
      __isset.createdTime = true;
      this._createdTime = value;
    }
  }

  public List<Contact> Contacts
  {
    get
    {
      return _contacts;
    }
    set
    {
      __isset.contacts = true;
      this._contacts = value;
    }
  }

  public bool NotificationDisabled
  {
    get
    {
      return _notificationDisabled;
    }
    set
    {
      __isset.notificationDisabled = true;
      this._notificationDisabled = value;
    }
  }

  public List<string> MemberMids
  {
    get
    {
      return _memberMids;
    }
    set
    {
      __isset.memberMids = true;
      this._memberMids = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool mid;
    public bool createdTime;
    public bool contacts;
    public bool notificationDisabled;
    public bool memberMids;
  }

  public Room()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Mid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              CreatedTime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.List)
            {
              {
                Contacts = new List<Contact>();
                TList _list217 = await iprot.ReadListBeginAsync(cancellationToken);
                for(int _i218 = 0; _i218 < _list217.Count; ++_i218)
                {
                  Contact _elem219;
                  _elem219 = new Contact();
                  await _elem219.ReadAsync(iprot, cancellationToken);
                  Contacts.Add(_elem219);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 31:
            if (field.Type == TType.Bool)
            {
              NotificationDisabled = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 40:
            if (field.Type == TType.List)
            {
              {
                MemberMids = new List<string>();
                TList _list220 = await iprot.ReadListBeginAsync(cancellationToken);
                for(int _i221 = 0; _i221 < _list220.Count; ++_i221)
                {
                  string _elem222;
                  _elem222 = await iprot.ReadStringAsync(cancellationToken);
                  MemberMids.Add(_elem222);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("Room");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Mid != null && __isset.mid)
      {
        field.Name = "mid";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Mid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.createdTime)
      {
        field.Name = "createdTime";
        field.Type = TType.I64;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(CreatedTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Contacts != null && __isset.contacts)
      {
        field.Name = "contacts";
        field.Type = TType.List;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Contacts.Count), cancellationToken);
          foreach (Contact _iter223 in Contacts)
          {
            await _iter223.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.notificationDisabled)
      {
        field.Name = "notificationDisabled";
        field.Type = TType.Bool;
        field.ID = 31;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(NotificationDisabled, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (MemberMids != null && __isset.memberMids)
      {
        field.Name = "memberMids";
        field.Type = TType.List;
        field.ID = 40;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, MemberMids.Count), cancellationToken);
          foreach (string _iter224 in MemberMids)
          {
            await oprot.WriteStringAsync(_iter224, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("Room(");
    bool __first = true;
    if (Mid != null && __isset.mid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Mid: ");
      sb.Append(Mid);
    }
    if (__isset.createdTime)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CreatedTime: ");
      sb.Append(CreatedTime);
    }
    if (Contacts != null && __isset.contacts)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Contacts: ");
      sb.Append(Contacts);
    }
    if (__isset.notificationDisabled)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("NotificationDisabled: ");
      sb.Append(NotificationDisabled);
    }
    if (MemberMids != null && __isset.memberMids)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MemberMids: ");
      sb.Append(MemberMids);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

