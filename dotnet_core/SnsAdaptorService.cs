/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


public partial class SnsAdaptorService
{
  public interface IAsync
  {
    Task<SnsFriends> getSnsFriendsAsync(SnsIdType snsIdType, string snsAccessToken, int startIdx, int limit, CancellationToken cancellationToken);

    Task<SnsProfile> getSnsMyProfileAsync(SnsIdType snsIdType, string snsAccessToken, CancellationToken cancellationToken);

    Task postSnsInvitationMessageAsync(SnsIdType snsIdType, string snsAccessToken, string toSnsUserId, CancellationToken cancellationToken);

  }


  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)    {
    }
    public async Task<SnsFriends> getSnsFriendsAsync(SnsIdType snsIdType, string snsAccessToken, int startIdx, int limit, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getSnsFriends", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getSnsFriendsArgs();
      args.SnsIdType = snsIdType;
      args.SnsAccessToken = snsAccessToken;
      args.StartIdx = startIdx;
      args.Limit = limit;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getSnsFriendsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSnsFriends failed: unknown result");
    }

    public async Task<SnsProfile> getSnsMyProfileAsync(SnsIdType snsIdType, string snsAccessToken, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getSnsMyProfile", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getSnsMyProfileArgs();
      args.SnsIdType = snsIdType;
      args.SnsAccessToken = snsAccessToken;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getSnsMyProfileResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSnsMyProfile failed: unknown result");
    }

    public async Task postSnsInvitationMessageAsync(SnsIdType snsIdType, string snsAccessToken, string toSnsUserId, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("postSnsInvitationMessage", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new postSnsInvitationMessageArgs();
      args.SnsIdType = snsIdType;
      args.SnsAccessToken = snsAccessToken;
      args.ToSnsUserId = toSnsUserId;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new postSnsInvitationMessageResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.e)
      {
        throw result.E;
      }
      return;
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private IAsync _iAsync;

    public AsyncProcessor(IAsync iAsync)
    {
      if (iAsync == null) throw new ArgumentNullException(nameof(iAsync));

      _iAsync = iAsync;
      processMap_["getSnsFriends"] = getSnsFriends_ProcessAsync;
      processMap_["getSnsMyProfile"] = getSnsMyProfile_ProcessAsync;
      processMap_["postSnsInvitationMessage"] = postSnsInvitationMessage_ProcessAsync;
    }

    protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async Task getSnsFriends_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getSnsFriendsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getSnsFriendsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getSnsFriendsAsync(args.SnsIdType, args.SnsAccessToken, args.StartIdx, args.Limit, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getSnsFriends", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getSnsFriends", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getSnsMyProfile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getSnsMyProfileArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getSnsMyProfileResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getSnsMyProfileAsync(args.SnsIdType, args.SnsAccessToken, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getSnsMyProfile", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getSnsMyProfile", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task postSnsInvitationMessage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new postSnsInvitationMessageArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new postSnsInvitationMessageResult();
      try
      {
        try
        {
          await _iAsync.postSnsInvitationMessageAsync(args.SnsIdType, args.SnsAccessToken, args.ToSnsUserId, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("postSnsInvitationMessage", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("postSnsInvitationMessage", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }


  public partial class getSnsFriendsArgs : TBase
  {
    private SnsIdType _snsIdType;
    private string _snsAccessToken;
    private int _startIdx;
    private int _limit;

    /// <summary>
    /// 
    /// <seealso cref="SnsIdType"/>
    /// </summary>
    public SnsIdType SnsIdType
    {
      get
      {
        return _snsIdType;
      }
      set
      {
        __isset.snsIdType = true;
        this._snsIdType = value;
      }
    }

    public string SnsAccessToken
    {
      get
      {
        return _snsAccessToken;
      }
      set
      {
        __isset.snsAccessToken = true;
        this._snsAccessToken = value;
      }
    }

    public int StartIdx
    {
      get
      {
        return _startIdx;
      }
      set
      {
        __isset.startIdx = true;
        this._startIdx = value;
      }
    }

    public int Limit
    {
      get
      {
        return _limit;
      }
      set
      {
        __isset.limit = true;
        this._limit = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool snsIdType;
      public bool snsAccessToken;
      public bool startIdx;
      public bool limit;
    }

    public getSnsFriendsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32)
              {
                SnsIdType = (SnsIdType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                SnsAccessToken = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                StartIdx = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                Limit = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getSnsFriends_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.snsIdType)
        {
          field.Name = "snsIdType";
          field.Type = TType.I32;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)SnsIdType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SnsAccessToken != null && __isset.snsAccessToken)
        {
          field.Name = "snsAccessToken";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SnsAccessToken, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.startIdx)
        {
          field.Name = "startIdx";
          field.Type = TType.I32;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(StartIdx, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.limit)
        {
          field.Name = "limit";
          field.Type = TType.I32;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Limit, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getSnsFriends_args(");
      bool __first = true;
      if (__isset.snsIdType)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SnsIdType: ");
        sb.Append(SnsIdType);
      }
      if (SnsAccessToken != null && __isset.snsAccessToken)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SnsAccessToken: ");
        sb.Append(SnsAccessToken);
      }
      if (__isset.startIdx)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("StartIdx: ");
        sb.Append(StartIdx);
      }
      if (__isset.limit)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Limit: ");
        sb.Append(Limit);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getSnsFriendsResult : TBase
  {
    private SnsFriends _success;
    private TalkException _e;

    public SnsFriends Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getSnsFriendsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new SnsFriends();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getSnsFriends_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getSnsFriends_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getSnsMyProfileArgs : TBase
  {
    private SnsIdType _snsIdType;
    private string _snsAccessToken;

    /// <summary>
    /// 
    /// <seealso cref="SnsIdType"/>
    /// </summary>
    public SnsIdType SnsIdType
    {
      get
      {
        return _snsIdType;
      }
      set
      {
        __isset.snsIdType = true;
        this._snsIdType = value;
      }
    }

    public string SnsAccessToken
    {
      get
      {
        return _snsAccessToken;
      }
      set
      {
        __isset.snsAccessToken = true;
        this._snsAccessToken = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool snsIdType;
      public bool snsAccessToken;
    }

    public getSnsMyProfileArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32)
              {
                SnsIdType = (SnsIdType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                SnsAccessToken = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getSnsMyProfile_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.snsIdType)
        {
          field.Name = "snsIdType";
          field.Type = TType.I32;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)SnsIdType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SnsAccessToken != null && __isset.snsAccessToken)
        {
          field.Name = "snsAccessToken";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SnsAccessToken, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getSnsMyProfile_args(");
      bool __first = true;
      if (__isset.snsIdType)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SnsIdType: ");
        sb.Append(SnsIdType);
      }
      if (SnsAccessToken != null && __isset.snsAccessToken)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SnsAccessToken: ");
        sb.Append(SnsAccessToken);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getSnsMyProfileResult : TBase
  {
    private SnsProfile _success;
    private TalkException _e;

    public SnsProfile Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getSnsMyProfileResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new SnsProfile();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getSnsMyProfile_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getSnsMyProfile_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class postSnsInvitationMessageArgs : TBase
  {
    private SnsIdType _snsIdType;
    private string _snsAccessToken;
    private string _toSnsUserId;

    /// <summary>
    /// 
    /// <seealso cref="SnsIdType"/>
    /// </summary>
    public SnsIdType SnsIdType
    {
      get
      {
        return _snsIdType;
      }
      set
      {
        __isset.snsIdType = true;
        this._snsIdType = value;
      }
    }

    public string SnsAccessToken
    {
      get
      {
        return _snsAccessToken;
      }
      set
      {
        __isset.snsAccessToken = true;
        this._snsAccessToken = value;
      }
    }

    public string ToSnsUserId
    {
      get
      {
        return _toSnsUserId;
      }
      set
      {
        __isset.toSnsUserId = true;
        this._toSnsUserId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool snsIdType;
      public bool snsAccessToken;
      public bool toSnsUserId;
    }

    public postSnsInvitationMessageArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32)
              {
                SnsIdType = (SnsIdType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                SnsAccessToken = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                ToSnsUserId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("postSnsInvitationMessage_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.snsIdType)
        {
          field.Name = "snsIdType";
          field.Type = TType.I32;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)SnsIdType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SnsAccessToken != null && __isset.snsAccessToken)
        {
          field.Name = "snsAccessToken";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SnsAccessToken, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ToSnsUserId != null && __isset.toSnsUserId)
        {
          field.Name = "toSnsUserId";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ToSnsUserId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("postSnsInvitationMessage_args(");
      bool __first = true;
      if (__isset.snsIdType)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SnsIdType: ");
        sb.Append(SnsIdType);
      }
      if (SnsAccessToken != null && __isset.snsAccessToken)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SnsAccessToken: ");
        sb.Append(SnsAccessToken);
      }
      if (ToSnsUserId != null && __isset.toSnsUserId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ToSnsUserId: ");
        sb.Append(ToSnsUserId);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class postSnsInvitationMessageResult : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool e;
    }

    public postSnsInvitationMessageResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("postSnsInvitationMessage_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("postSnsInvitationMessage_result(");
      bool __first = true;
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
