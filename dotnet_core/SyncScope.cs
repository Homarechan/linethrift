/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



public partial class SyncScope : TBase
{
  private bool _syncProfile;
  private bool _syncSettings;
  private bool _syncSticker;
  private bool _syncThemeShop;
  private SyncRelations _contact;
  private SyncRelations _group;
  private SyncRelations _room;
  private SyncRelations _chat;

  public bool SyncProfile
  {
    get
    {
      return _syncProfile;
    }
    set
    {
      __isset.syncProfile = true;
      this._syncProfile = value;
    }
  }

  public bool SyncSettings
  {
    get
    {
      return _syncSettings;
    }
    set
    {
      __isset.syncSettings = true;
      this._syncSettings = value;
    }
  }

  public bool SyncSticker
  {
    get
    {
      return _syncSticker;
    }
    set
    {
      __isset.syncSticker = true;
      this._syncSticker = value;
    }
  }

  public bool SyncThemeShop
  {
    get
    {
      return _syncThemeShop;
    }
    set
    {
      __isset.syncThemeShop = true;
      this._syncThemeShop = value;
    }
  }

  public SyncRelations Contact
  {
    get
    {
      return _contact;
    }
    set
    {
      __isset.contact = true;
      this._contact = value;
    }
  }

  public SyncRelations Group
  {
    get
    {
      return _group;
    }
    set
    {
      __isset.@group = true;
      this._group = value;
    }
  }

  public SyncRelations Room
  {
    get
    {
      return _room;
    }
    set
    {
      __isset.room = true;
      this._room = value;
    }
  }

  public SyncRelations Chat
  {
    get
    {
      return _chat;
    }
    set
    {
      __isset.chat = true;
      this._chat = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool syncProfile;
    public bool syncSettings;
    public bool syncSticker;
    public bool syncThemeShop;
    public bool contact;
    public bool @group;
    public bool room;
    public bool chat;
  }

  public SyncScope()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool)
            {
              SyncProfile = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Bool)
            {
              SyncSettings = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Bool)
            {
              SyncSticker = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Bool)
            {
              SyncThemeShop = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.Struct)
            {
              Contact = new SyncRelations();
              await Contact.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.Struct)
            {
              Group = new SyncRelations();
              await Group.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.Struct)
            {
              Room = new SyncRelations();
              await Room.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 13:
            if (field.Type == TType.Struct)
            {
              Chat = new SyncRelations();
              await Chat.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("SyncScope");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.syncProfile)
      {
        field.Name = "syncProfile";
        field.Type = TType.Bool;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(SyncProfile, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.syncSettings)
      {
        field.Name = "syncSettings";
        field.Type = TType.Bool;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(SyncSettings, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.syncSticker)
      {
        field.Name = "syncSticker";
        field.Type = TType.Bool;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(SyncSticker, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.syncThemeShop)
      {
        field.Name = "syncThemeShop";
        field.Type = TType.Bool;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(SyncThemeShop, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Contact != null && __isset.contact)
      {
        field.Name = "contact";
        field.Type = TType.Struct;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Contact.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Group != null && __isset.@group)
      {
        field.Name = "group";
        field.Type = TType.Struct;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Group.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Room != null && __isset.room)
      {
        field.Name = "room";
        field.Type = TType.Struct;
        field.ID = 12;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Room.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Chat != null && __isset.chat)
      {
        field.Name = "chat";
        field.Type = TType.Struct;
        field.ID = 13;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Chat.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("SyncScope(");
    bool __first = true;
    if (__isset.syncProfile)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SyncProfile: ");
      sb.Append(SyncProfile);
    }
    if (__isset.syncSettings)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SyncSettings: ");
      sb.Append(SyncSettings);
    }
    if (__isset.syncSticker)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SyncSticker: ");
      sb.Append(SyncSticker);
    }
    if (__isset.syncThemeShop)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SyncThemeShop: ");
      sb.Append(SyncThemeShop);
    }
    if (Contact != null && __isset.contact)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Contact: ");
      sb.Append(Contact== null ? "<null>" : Contact.ToString());
    }
    if (Group != null && __isset.@group)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Group: ");
      sb.Append(Group== null ? "<null>" : Group.ToString());
    }
    if (Room != null && __isset.room)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Room: ");
      sb.Append(Room== null ? "<null>" : Room.ToString());
    }
    if (Chat != null && __isset.chat)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Chat: ");
      sb.Append(Chat== null ? "<null>" : Chat.ToString());
    }
    sb.Append(")");
    return sb.ToString();
  }
}

