/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



public partial class PaidCallResponse : TBase
{
  private CallHost _host;
  private PaidCallDialing _dialing;
  private string _token;
  private List<SpotItem> _spotItems;

  public CallHost Host
  {
    get
    {
      return _host;
    }
    set
    {
      __isset.host = true;
      this._host = value;
    }
  }

  public PaidCallDialing Dialing
  {
    get
    {
      return _dialing;
    }
    set
    {
      __isset.dialing = true;
      this._dialing = value;
    }
  }

  public string Token
  {
    get
    {
      return _token;
    }
    set
    {
      __isset.token = true;
      this._token = value;
    }
  }

  public List<SpotItem> SpotItems
  {
    get
    {
      return _spotItems;
    }
    set
    {
      __isset.spotItems = true;
      this._spotItems = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool host;
    public bool dialing;
    public bool token;
    public bool spotItems;
  }

  public PaidCallResponse()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              Host = new CallHost();
              await Host.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Struct)
            {
              Dialing = new PaidCallDialing();
              await Dialing.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Token = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                SpotItems = new List<SpotItem>();
                TList _list32 = await iprot.ReadListBeginAsync(cancellationToken);
                for(int _i33 = 0; _i33 < _list32.Count; ++_i33)
                {
                  SpotItem _elem34;
                  _elem34 = new SpotItem();
                  await _elem34.ReadAsync(iprot, cancellationToken);
                  SpotItems.Add(_elem34);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("PaidCallResponse");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Host != null && __isset.host)
      {
        field.Name = "host";
        field.Type = TType.Struct;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Host.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Dialing != null && __isset.dialing)
      {
        field.Name = "dialing";
        field.Type = TType.Struct;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Dialing.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Token != null && __isset.token)
      {
        field.Name = "token";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Token, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SpotItems != null && __isset.spotItems)
      {
        field.Name = "spotItems";
        field.Type = TType.List;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, SpotItems.Count), cancellationToken);
          foreach (SpotItem _iter35 in SpotItems)
          {
            await _iter35.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("PaidCallResponse(");
    bool __first = true;
    if (Host != null && __isset.host)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Host: ");
      sb.Append(Host== null ? "<null>" : Host.ToString());
    }
    if (Dialing != null && __isset.dialing)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Dialing: ");
      sb.Append(Dialing== null ? "<null>" : Dialing.ToString());
    }
    if (Token != null && __isset.token)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Token: ");
      sb.Append(Token);
    }
    if (SpotItems != null && __isset.spotItems)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SpotItems: ");
      sb.Append(SpotItems);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

