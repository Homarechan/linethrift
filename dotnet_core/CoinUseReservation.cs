/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



public partial class CoinUseReservation : TBase
{
  private string _channelId;
  private string _shopOrderId;
  private PaymentType _appStoreCode;
  private List<CoinUseReservationItem> _items;
  private string _country;

  public string ChannelId
  {
    get
    {
      return _channelId;
    }
    set
    {
      __isset.channelId = true;
      this._channelId = value;
    }
  }

  public string ShopOrderId
  {
    get
    {
      return _shopOrderId;
    }
    set
    {
      __isset.shopOrderId = true;
      this._shopOrderId = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="PaymentType"/>
  /// </summary>
  public PaymentType AppStoreCode
  {
    get
    {
      return _appStoreCode;
    }
    set
    {
      __isset.appStoreCode = true;
      this._appStoreCode = value;
    }
  }

  public List<CoinUseReservationItem> Items
  {
    get
    {
      return _items;
    }
    set
    {
      __isset.items = true;
      this._items = value;
    }
  }

  public string Country
  {
    get
    {
      return _country;
    }
    set
    {
      __isset.country = true;
      this._country = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool channelId;
    public bool shopOrderId;
    public bool appStoreCode;
    public bool items;
    public bool country;
  }

  public CoinUseReservation()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              ChannelId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              ShopOrderId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              AppStoreCode = (PaymentType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                Items = new List<CoinUseReservationItem>();
                TList _list109 = await iprot.ReadListBeginAsync(cancellationToken);
                for(int _i110 = 0; _i110 < _list109.Count; ++_i110)
                {
                  CoinUseReservationItem _elem111;
                  _elem111 = new CoinUseReservationItem();
                  await _elem111.ReadAsync(iprot, cancellationToken);
                  Items.Add(_elem111);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Country = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("CoinUseReservation");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (ChannelId != null && __isset.channelId)
      {
        field.Name = "channelId";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ChannelId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ShopOrderId != null && __isset.shopOrderId)
      {
        field.Name = "shopOrderId";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ShopOrderId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.appStoreCode)
      {
        field.Name = "appStoreCode";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)AppStoreCode, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Items != null && __isset.items)
      {
        field.Name = "items";
        field.Type = TType.List;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Items.Count), cancellationToken);
          foreach (CoinUseReservationItem _iter112 in Items)
          {
            await _iter112.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Country != null && __isset.country)
      {
        field.Name = "country";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Country, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("CoinUseReservation(");
    bool __first = true;
    if (ChannelId != null && __isset.channelId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ChannelId: ");
      sb.Append(ChannelId);
    }
    if (ShopOrderId != null && __isset.shopOrderId)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ShopOrderId: ");
      sb.Append(ShopOrderId);
    }
    if (__isset.appStoreCode)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("AppStoreCode: ");
      sb.Append(AppStoreCode);
    }
    if (Items != null && __isset.items)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Items: ");
      sb.Append(Items);
    }
    if (Country != null && __isset.country)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Country: ");
      sb.Append(Country);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

