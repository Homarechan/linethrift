/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



public partial class PaidCallHistory : TBase
{
  private long _seq;
  private PaidCallType _type;
  private string _dialedNumber;
  private string _calledNumber;
  private string _toMid;
  private string _toName;
  private long _setupTime;
  private long _startTime;
  private long _endTime;
  private long _duration;
  private int _terminate;
  private PaidCallProductType _productType;
  private int _charge;
  private string _unit;
  private string _result;

  public long Seq
  {
    get
    {
      return _seq;
    }
    set
    {
      __isset.seq = true;
      this._seq = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="PaidCallType"/>
  /// </summary>
  public PaidCallType Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  public string DialedNumber
  {
    get
    {
      return _dialedNumber;
    }
    set
    {
      __isset.dialedNumber = true;
      this._dialedNumber = value;
    }
  }

  public string CalledNumber
  {
    get
    {
      return _calledNumber;
    }
    set
    {
      __isset.calledNumber = true;
      this._calledNumber = value;
    }
  }

  public string ToMid
  {
    get
    {
      return _toMid;
    }
    set
    {
      __isset.toMid = true;
      this._toMid = value;
    }
  }

  public string ToName
  {
    get
    {
      return _toName;
    }
    set
    {
      __isset.toName = true;
      this._toName = value;
    }
  }

  public long SetupTime
  {
    get
    {
      return _setupTime;
    }
    set
    {
      __isset.setupTime = true;
      this._setupTime = value;
    }
  }

  public long StartTime
  {
    get
    {
      return _startTime;
    }
    set
    {
      __isset.startTime = true;
      this._startTime = value;
    }
  }

  public long EndTime
  {
    get
    {
      return _endTime;
    }
    set
    {
      __isset.endTime = true;
      this._endTime = value;
    }
  }

  public long Duration
  {
    get
    {
      return _duration;
    }
    set
    {
      __isset.duration = true;
      this._duration = value;
    }
  }

  public int Terminate
  {
    get
    {
      return _terminate;
    }
    set
    {
      __isset.terminate = true;
      this._terminate = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="PaidCallProductType"/>
  /// </summary>
  public PaidCallProductType ProductType
  {
    get
    {
      return _productType;
    }
    set
    {
      __isset.productType = true;
      this._productType = value;
    }
  }

  public int Charge
  {
    get
    {
      return _charge;
    }
    set
    {
      __isset.charge = true;
      this._charge = value;
    }
  }

  public string Unit
  {
    get
    {
      return _unit;
    }
    set
    {
      __isset.unit = true;
      this._unit = value;
    }
  }

  public string Result
  {
    get
    {
      return _result;
    }
    set
    {
      __isset.result = true;
      this._result = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool seq;
    public bool type;
    public bool dialedNumber;
    public bool calledNumber;
    public bool toMid;
    public bool toName;
    public bool setupTime;
    public bool startTime;
    public bool endTime;
    public bool duration;
    public bool terminate;
    public bool productType;
    public bool charge;
    public bool unit;
    public bool result;
  }

  public PaidCallHistory()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              Seq = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              Type = (PaidCallType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              DialedNumber = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              CalledNumber = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              ToMid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.String)
            {
              ToName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.I64)
            {
              SetupTime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.I64)
            {
              StartTime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.I64)
            {
              EndTime = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.I64)
            {
              Duration = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.I32)
            {
              Terminate = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.I32)
            {
              ProductType = (PaidCallProductType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 13:
            if (field.Type == TType.I32)
            {
              Charge = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 14:
            if (field.Type == TType.String)
            {
              Unit = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 15:
            if (field.Type == TType.String)
            {
              Result = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("PaidCallHistory");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.seq)
      {
        field.Name = "seq";
        field.Type = TType.I64;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Seq, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.type)
      {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (DialedNumber != null && __isset.dialedNumber)
      {
        field.Name = "dialedNumber";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(DialedNumber, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (CalledNumber != null && __isset.calledNumber)
      {
        field.Name = "calledNumber";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(CalledNumber, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ToMid != null && __isset.toMid)
      {
        field.Name = "toMid";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ToMid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ToName != null && __isset.toName)
      {
        field.Name = "toName";
        field.Type = TType.String;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ToName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.setupTime)
      {
        field.Name = "setupTime";
        field.Type = TType.I64;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(SetupTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.startTime)
      {
        field.Name = "startTime";
        field.Type = TType.I64;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(StartTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.endTime)
      {
        field.Name = "endTime";
        field.Type = TType.I64;
        field.ID = 9;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(EndTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.duration)
      {
        field.Name = "duration";
        field.Type = TType.I64;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Duration, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.terminate)
      {
        field.Name = "terminate";
        field.Type = TType.I32;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Terminate, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.productType)
      {
        field.Name = "productType";
        field.Type = TType.I32;
        field.ID = 12;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)ProductType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.charge)
      {
        field.Name = "charge";
        field.Type = TType.I32;
        field.ID = 13;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Charge, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Unit != null && __isset.unit)
      {
        field.Name = "unit";
        field.Type = TType.String;
        field.ID = 14;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Unit, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Result != null && __isset.result)
      {
        field.Name = "result";
        field.Type = TType.String;
        field.ID = 15;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Result, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("PaidCallHistory(");
    bool __first = true;
    if (__isset.seq)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Seq: ");
      sb.Append(Seq);
    }
    if (__isset.type)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Type: ");
      sb.Append(Type);
    }
    if (DialedNumber != null && __isset.dialedNumber)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DialedNumber: ");
      sb.Append(DialedNumber);
    }
    if (CalledNumber != null && __isset.calledNumber)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CalledNumber: ");
      sb.Append(CalledNumber);
    }
    if (ToMid != null && __isset.toMid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ToMid: ");
      sb.Append(ToMid);
    }
    if (ToName != null && __isset.toName)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ToName: ");
      sb.Append(ToName);
    }
    if (__isset.setupTime)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SetupTime: ");
      sb.Append(SetupTime);
    }
    if (__isset.startTime)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("StartTime: ");
      sb.Append(StartTime);
    }
    if (__isset.endTime)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("EndTime: ");
      sb.Append(EndTime);
    }
    if (__isset.duration)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Duration: ");
      sb.Append(Duration);
    }
    if (__isset.terminate)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Terminate: ");
      sb.Append(Terminate);
    }
    if (__isset.productType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ProductType: ");
      sb.Append(ProductType);
    }
    if (__isset.charge)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Charge: ");
      sb.Append(Charge);
    }
    if (Unit != null && __isset.unit)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Unit: ");
      sb.Append(Unit);
    }
    if (Result != null && __isset.result)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Result: ");
      sb.Append(Result);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

