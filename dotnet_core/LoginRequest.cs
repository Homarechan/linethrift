/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



public partial class LoginRequest : TBase
{
  private int _type;
  private int _identityProvider;
  private string _identifier;
  private string _password;
  private bool _keepLoggedIn;
  private string _accessLocation;
  private string _systemName;
  private string _certificate;
  private string _verifier;
  private string _secret;
  private int _e2eeVersion;

  public int Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  public int IdentityProvider
  {
    get
    {
      return _identityProvider;
    }
    set
    {
      __isset.identityProvider = true;
      this._identityProvider = value;
    }
  }

  public string Identifier
  {
    get
    {
      return _identifier;
    }
    set
    {
      __isset.identifier = true;
      this._identifier = value;
    }
  }

  public string Password
  {
    get
    {
      return _password;
    }
    set
    {
      __isset.password = true;
      this._password = value;
    }
  }

  public bool KeepLoggedIn
  {
    get
    {
      return _keepLoggedIn;
    }
    set
    {
      __isset.keepLoggedIn = true;
      this._keepLoggedIn = value;
    }
  }

  public string AccessLocation
  {
    get
    {
      return _accessLocation;
    }
    set
    {
      __isset.accessLocation = true;
      this._accessLocation = value;
    }
  }

  public string SystemName
  {
    get
    {
      return _systemName;
    }
    set
    {
      __isset.systemName = true;
      this._systemName = value;
    }
  }

  public string Certificate
  {
    get
    {
      return _certificate;
    }
    set
    {
      __isset.certificate = true;
      this._certificate = value;
    }
  }

  public string Verifier
  {
    get
    {
      return _verifier;
    }
    set
    {
      __isset.verifier = true;
      this._verifier = value;
    }
  }

  public string Secret
  {
    get
    {
      return _secret;
    }
    set
    {
      __isset.secret = true;
      this._secret = value;
    }
  }

  public int E2eeVersion
  {
    get
    {
      return _e2eeVersion;
    }
    set
    {
      __isset.e2eeVersion = true;
      this._e2eeVersion = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool type;
    public bool identityProvider;
    public bool identifier;
    public bool password;
    public bool keepLoggedIn;
    public bool accessLocation;
    public bool systemName;
    public bool certificate;
    public bool verifier;
    public bool secret;
    public bool e2eeVersion;
  }

  public LoginRequest()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              Type = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              IdentityProvider = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Identifier = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Password = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.Bool)
            {
              KeepLoggedIn = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.String)
            {
              AccessLocation = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.String)
            {
              SystemName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.String)
            {
              Certificate = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.String)
            {
              Verifier = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.String)
            {
              Secret = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.I32)
            {
              E2eeVersion = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("LoginRequest");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.type)
      {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.identityProvider)
      {
        field.Name = "identityProvider";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(IdentityProvider, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Identifier != null && __isset.identifier)
      {
        field.Name = "identifier";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Identifier, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Password != null && __isset.password)
      {
        field.Name = "password";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Password, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.keepLoggedIn)
      {
        field.Name = "keepLoggedIn";
        field.Type = TType.Bool;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(KeepLoggedIn, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (AccessLocation != null && __isset.accessLocation)
      {
        field.Name = "accessLocation";
        field.Type = TType.String;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(AccessLocation, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (SystemName != null && __isset.systemName)
      {
        field.Name = "systemName";
        field.Type = TType.String;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(SystemName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Certificate != null && __isset.certificate)
      {
        field.Name = "certificate";
        field.Type = TType.String;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Certificate, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Verifier != null && __isset.verifier)
      {
        field.Name = "verifier";
        field.Type = TType.String;
        field.ID = 9;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Verifier, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Secret != null && __isset.secret)
      {
        field.Name = "secret";
        field.Type = TType.String;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Secret, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.e2eeVersion)
      {
        field.Name = "e2eeVersion";
        field.Type = TType.I32;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(E2eeVersion, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("LoginRequest(");
    bool __first = true;
    if (__isset.type)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Type: ");
      sb.Append(Type);
    }
    if (__isset.identityProvider)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("IdentityProvider: ");
      sb.Append(IdentityProvider);
    }
    if (Identifier != null && __isset.identifier)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Identifier: ");
      sb.Append(Identifier);
    }
    if (Password != null && __isset.password)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Password: ");
      sb.Append(Password);
    }
    if (__isset.keepLoggedIn)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("KeepLoggedIn: ");
      sb.Append(KeepLoggedIn);
    }
    if (AccessLocation != null && __isset.accessLocation)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("AccessLocation: ");
      sb.Append(AccessLocation);
    }
    if (SystemName != null && __isset.systemName)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SystemName: ");
      sb.Append(SystemName);
    }
    if (Certificate != null && __isset.certificate)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Certificate: ");
      sb.Append(Certificate);
    }
    if (Verifier != null && __isset.verifier)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Verifier: ");
      sb.Append(Verifier);
    }
    if (Secret != null && __isset.secret)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Secret: ");
      sb.Append(Secret);
    }
    if (__isset.e2eeVersion)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("E2eeVersion: ");
      sb.Append(E2eeVersion);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

