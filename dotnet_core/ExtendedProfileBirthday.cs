/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



public partial class ExtendedProfileBirthday : TBase
{
  private string _year;
  private PrivacyLevelType _yearPrivacyLevelType;
  private bool _yearEnabled;
  private string _day;
  private PrivacyLevelType _dayPrivacyLevelType;
  private bool _dayEnabled;

  public string Year
  {
    get
    {
      return _year;
    }
    set
    {
      __isset.year = true;
      this._year = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="PrivacyLevelType"/>
  /// </summary>
  public PrivacyLevelType YearPrivacyLevelType
  {
    get
    {
      return _yearPrivacyLevelType;
    }
    set
    {
      __isset.yearPrivacyLevelType = true;
      this._yearPrivacyLevelType = value;
    }
  }

  public bool YearEnabled
  {
    get
    {
      return _yearEnabled;
    }
    set
    {
      __isset.yearEnabled = true;
      this._yearEnabled = value;
    }
  }

  public string Day
  {
    get
    {
      return _day;
    }
    set
    {
      __isset.day = true;
      this._day = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="PrivacyLevelType"/>
  /// </summary>
  public PrivacyLevelType DayPrivacyLevelType
  {
    get
    {
      return _dayPrivacyLevelType;
    }
    set
    {
      __isset.dayPrivacyLevelType = true;
      this._dayPrivacyLevelType = value;
    }
  }

  public bool DayEnabled
  {
    get
    {
      return _dayEnabled;
    }
    set
    {
      __isset.dayEnabled = true;
      this._dayEnabled = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool year;
    public bool yearPrivacyLevelType;
    public bool yearEnabled;
    public bool day;
    public bool dayPrivacyLevelType;
    public bool dayEnabled;
  }

  public ExtendedProfileBirthday()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Year = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              YearPrivacyLevelType = (PrivacyLevelType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Bool)
            {
              YearEnabled = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Day = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.I32)
            {
              DayPrivacyLevelType = (PrivacyLevelType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.Bool)
            {
              DayEnabled = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("ExtendedProfileBirthday");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Year != null && __isset.year)
      {
        field.Name = "year";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Year, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.yearPrivacyLevelType)
      {
        field.Name = "yearPrivacyLevelType";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)YearPrivacyLevelType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.yearEnabled)
      {
        field.Name = "yearEnabled";
        field.Type = TType.Bool;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(YearEnabled, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Day != null && __isset.day)
      {
        field.Name = "day";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Day, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.dayPrivacyLevelType)
      {
        field.Name = "dayPrivacyLevelType";
        field.Type = TType.I32;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)DayPrivacyLevelType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.dayEnabled)
      {
        field.Name = "dayEnabled";
        field.Type = TType.Bool;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(DayEnabled, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("ExtendedProfileBirthday(");
    bool __first = true;
    if (Year != null && __isset.year)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Year: ");
      sb.Append(Year);
    }
    if (__isset.yearPrivacyLevelType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("YearPrivacyLevelType: ");
      sb.Append(YearPrivacyLevelType);
    }
    if (__isset.yearEnabled)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("YearEnabled: ");
      sb.Append(YearEnabled);
    }
    if (Day != null && __isset.day)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Day: ");
      sb.Append(Day);
    }
    if (__isset.dayPrivacyLevelType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DayPrivacyLevelType: ");
      sb.Append(DayPrivacyLevelType);
    }
    if (__isset.dayEnabled)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DayEnabled: ");
      sb.Append(DayEnabled);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

