/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



public partial class SquareFeatureSet : TBase
{
  private string _squareMid;
  private long _revision;
  private SquareFeature _creatingSecretSquareChat;
  private SquareFeature _invitingIntoOpenSquareChat;

  public string SquareMid
  {
    get
    {
      return _squareMid;
    }
    set
    {
      __isset.squareMid = true;
      this._squareMid = value;
    }
  }

  public long Revision
  {
    get
    {
      return _revision;
    }
    set
    {
      __isset.revision = true;
      this._revision = value;
    }
  }

  public SquareFeature CreatingSecretSquareChat
  {
    get
    {
      return _creatingSecretSquareChat;
    }
    set
    {
      __isset.creatingSecretSquareChat = true;
      this._creatingSecretSquareChat = value;
    }
  }

  public SquareFeature InvitingIntoOpenSquareChat
  {
    get
    {
      return _invitingIntoOpenSquareChat;
    }
    set
    {
      __isset.invitingIntoOpenSquareChat = true;
      this._invitingIntoOpenSquareChat = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool squareMid;
    public bool revision;
    public bool creatingSecretSquareChat;
    public bool invitingIntoOpenSquareChat;
  }

  public SquareFeatureSet()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              SquareMid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              Revision = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.Struct)
            {
              CreatingSecretSquareChat = new SquareFeature();
              await CreatingSecretSquareChat.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.Struct)
            {
              InvitingIntoOpenSquareChat = new SquareFeature();
              await InvitingIntoOpenSquareChat.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("SquareFeatureSet");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (SquareMid != null && __isset.squareMid)
      {
        field.Name = "squareMid";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(SquareMid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.revision)
      {
        field.Name = "revision";
        field.Type = TType.I64;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Revision, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (CreatingSecretSquareChat != null && __isset.creatingSecretSquareChat)
      {
        field.Name = "creatingSecretSquareChat";
        field.Type = TType.Struct;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await CreatingSecretSquareChat.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (InvitingIntoOpenSquareChat != null && __isset.invitingIntoOpenSquareChat)
      {
        field.Name = "invitingIntoOpenSquareChat";
        field.Type = TType.Struct;
        field.ID = 12;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await InvitingIntoOpenSquareChat.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("SquareFeatureSet(");
    bool __first = true;
    if (SquareMid != null && __isset.squareMid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SquareMid: ");
      sb.Append(SquareMid);
    }
    if (__isset.revision)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Revision: ");
      sb.Append(Revision);
    }
    if (CreatingSecretSquareChat != null && __isset.creatingSecretSquareChat)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CreatingSecretSquareChat: ");
      sb.Append(CreatingSecretSquareChat== null ? "<null>" : CreatingSecretSquareChat.ToString());
    }
    if (InvitingIntoOpenSquareChat != null && __isset.invitingIntoOpenSquareChat)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("InvitingIntoOpenSquareChat: ");
      sb.Append(InvitingIntoOpenSquareChat== null ? "<null>" : InvitingIntoOpenSquareChat.ToString());
    }
    sb.Append(")");
    return sb.ToString();
  }
}

