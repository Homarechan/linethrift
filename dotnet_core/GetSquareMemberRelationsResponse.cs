/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



public partial class GetSquareMemberRelationsResponse : TBase
{
  private List<SquareMember> _squareMembers;
  private Dictionary<string, SquareMemberRelation> _relations;
  private string _continuationToken;

  public List<SquareMember> SquareMembers
  {
    get
    {
      return _squareMembers;
    }
    set
    {
      __isset.squareMembers = true;
      this._squareMembers = value;
    }
  }

  public Dictionary<string, SquareMemberRelation> Relations
  {
    get
    {
      return _relations;
    }
    set
    {
      __isset.relations = true;
      this._relations = value;
    }
  }

  public string ContinuationToken
  {
    get
    {
      return _continuationToken;
    }
    set
    {
      __isset.continuationToken = true;
      this._continuationToken = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool squareMembers;
    public bool relations;
    public bool continuationToken;
  }

  public GetSquareMemberRelationsResponse()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                SquareMembers = new List<SquareMember>();
                TList _list369 = await iprot.ReadListBeginAsync(cancellationToken);
                for(int _i370 = 0; _i370 < _list369.Count; ++_i370)
                {
                  SquareMember _elem371;
                  _elem371 = new SquareMember();
                  await _elem371.ReadAsync(iprot, cancellationToken);
                  SquareMembers.Add(_elem371);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Map)
            {
              {
                Relations = new Dictionary<string, SquareMemberRelation>();
                TMap _map372 = await iprot.ReadMapBeginAsync(cancellationToken);
                for(int _i373 = 0; _i373 < _map372.Count; ++_i373)
                {
                  string _key374;
                  SquareMemberRelation _val375;
                  _key374 = await iprot.ReadStringAsync(cancellationToken);
                  _val375 = new SquareMemberRelation();
                  await _val375.ReadAsync(iprot, cancellationToken);
                  Relations[_key374] = _val375;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              ContinuationToken = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("GetSquareMemberRelationsResponse");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (SquareMembers != null && __isset.squareMembers)
      {
        field.Name = "squareMembers";
        field.Type = TType.List;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, SquareMembers.Count), cancellationToken);
          foreach (SquareMember _iter376 in SquareMembers)
          {
            await _iter376.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Relations != null && __isset.relations)
      {
        field.Name = "relations";
        field.Type = TType.Map;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Relations.Count), cancellationToken);
          foreach (string _iter377 in Relations.Keys)
          {
            await oprot.WriteStringAsync(_iter377, cancellationToken);
            await Relations[_iter377].WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ContinuationToken != null && __isset.continuationToken)
      {
        field.Name = "continuationToken";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ContinuationToken, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("GetSquareMemberRelationsResponse(");
    bool __first = true;
    if (SquareMembers != null && __isset.squareMembers)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SquareMembers: ");
      sb.Append(SquareMembers);
    }
    if (Relations != null && __isset.relations)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Relations: ");
      sb.Append(Relations);
    }
    if (ContinuationToken != null && __isset.continuationToken)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ContinuationToken: ");
      sb.Append(ContinuationToken);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

