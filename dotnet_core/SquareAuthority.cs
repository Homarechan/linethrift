/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



public partial class SquareAuthority : TBase
{
  private string _squareMid;
  private SquareMemberRole _updateSquareProfile;
  private SquareMemberRole _inviteNewMember;
  private SquareMemberRole _approveJoinRequest;
  private SquareMemberRole _createPost;
  private SquareMemberRole _createOpenSquareChat;
  private SquareMemberRole _deleteSquareChatOrPost;
  private SquareMemberRole _removeSquareMember;
  private SquareMemberRole _grantRole;
  private SquareMemberRole _enableInvitationTicket;
  private long _revision;

  public string SquareMid
  {
    get
    {
      return _squareMid;
    }
    set
    {
      __isset.squareMid = true;
      this._squareMid = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="SquareMemberRole"/>
  /// </summary>
  public SquareMemberRole UpdateSquareProfile
  {
    get
    {
      return _updateSquareProfile;
    }
    set
    {
      __isset.updateSquareProfile = true;
      this._updateSquareProfile = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="SquareMemberRole"/>
  /// </summary>
  public SquareMemberRole InviteNewMember
  {
    get
    {
      return _inviteNewMember;
    }
    set
    {
      __isset.inviteNewMember = true;
      this._inviteNewMember = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="SquareMemberRole"/>
  /// </summary>
  public SquareMemberRole ApproveJoinRequest
  {
    get
    {
      return _approveJoinRequest;
    }
    set
    {
      __isset.approveJoinRequest = true;
      this._approveJoinRequest = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="SquareMemberRole"/>
  /// </summary>
  public SquareMemberRole CreatePost
  {
    get
    {
      return _createPost;
    }
    set
    {
      __isset.createPost = true;
      this._createPost = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="SquareMemberRole"/>
  /// </summary>
  public SquareMemberRole CreateOpenSquareChat
  {
    get
    {
      return _createOpenSquareChat;
    }
    set
    {
      __isset.createOpenSquareChat = true;
      this._createOpenSquareChat = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="SquareMemberRole"/>
  /// </summary>
  public SquareMemberRole DeleteSquareChatOrPost
  {
    get
    {
      return _deleteSquareChatOrPost;
    }
    set
    {
      __isset.deleteSquareChatOrPost = true;
      this._deleteSquareChatOrPost = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="SquareMemberRole"/>
  /// </summary>
  public SquareMemberRole RemoveSquareMember
  {
    get
    {
      return _removeSquareMember;
    }
    set
    {
      __isset.removeSquareMember = true;
      this._removeSquareMember = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="SquareMemberRole"/>
  /// </summary>
  public SquareMemberRole GrantRole
  {
    get
    {
      return _grantRole;
    }
    set
    {
      __isset.grantRole = true;
      this._grantRole = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="SquareMemberRole"/>
  /// </summary>
  public SquareMemberRole EnableInvitationTicket
  {
    get
    {
      return _enableInvitationTicket;
    }
    set
    {
      __isset.enableInvitationTicket = true;
      this._enableInvitationTicket = value;
    }
  }

  public long Revision
  {
    get
    {
      return _revision;
    }
    set
    {
      __isset.revision = true;
      this._revision = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool squareMid;
    public bool updateSquareProfile;
    public bool inviteNewMember;
    public bool approveJoinRequest;
    public bool createPost;
    public bool createOpenSquareChat;
    public bool deleteSquareChatOrPost;
    public bool removeSquareMember;
    public bool grantRole;
    public bool enableInvitationTicket;
    public bool revision;
  }

  public SquareAuthority()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              SquareMid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              UpdateSquareProfile = (SquareMemberRole)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              InviteNewMember = (SquareMemberRole)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I32)
            {
              ApproveJoinRequest = (SquareMemberRole)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I32)
            {
              CreatePost = (SquareMemberRole)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.I32)
            {
              CreateOpenSquareChat = (SquareMemberRole)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.I32)
            {
              DeleteSquareChatOrPost = (SquareMemberRole)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.I32)
            {
              RemoveSquareMember = (SquareMemberRole)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.I32)
            {
              GrantRole = (SquareMemberRole)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.I32)
            {
              EnableInvitationTicket = (SquareMemberRole)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.I64)
            {
              Revision = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("SquareAuthority");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (SquareMid != null && __isset.squareMid)
      {
        field.Name = "squareMid";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(SquareMid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.updateSquareProfile)
      {
        field.Name = "updateSquareProfile";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)UpdateSquareProfile, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.inviteNewMember)
      {
        field.Name = "inviteNewMember";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)InviteNewMember, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.approveJoinRequest)
      {
        field.Name = "approveJoinRequest";
        field.Type = TType.I32;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)ApproveJoinRequest, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.createPost)
      {
        field.Name = "createPost";
        field.Type = TType.I32;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)CreatePost, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.createOpenSquareChat)
      {
        field.Name = "createOpenSquareChat";
        field.Type = TType.I32;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)CreateOpenSquareChat, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.deleteSquareChatOrPost)
      {
        field.Name = "deleteSquareChatOrPost";
        field.Type = TType.I32;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)DeleteSquareChatOrPost, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.removeSquareMember)
      {
        field.Name = "removeSquareMember";
        field.Type = TType.I32;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)RemoveSquareMember, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.grantRole)
      {
        field.Name = "grantRole";
        field.Type = TType.I32;
        field.ID = 9;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)GrantRole, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.enableInvitationTicket)
      {
        field.Name = "enableInvitationTicket";
        field.Type = TType.I32;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)EnableInvitationTicket, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.revision)
      {
        field.Name = "revision";
        field.Type = TType.I64;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Revision, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("SquareAuthority(");
    bool __first = true;
    if (SquareMid != null && __isset.squareMid)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("SquareMid: ");
      sb.Append(SquareMid);
    }
    if (__isset.updateSquareProfile)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("UpdateSquareProfile: ");
      sb.Append(UpdateSquareProfile);
    }
    if (__isset.inviteNewMember)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("InviteNewMember: ");
      sb.Append(InviteNewMember);
    }
    if (__isset.approveJoinRequest)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ApproveJoinRequest: ");
      sb.Append(ApproveJoinRequest);
    }
    if (__isset.createPost)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CreatePost: ");
      sb.Append(CreatePost);
    }
    if (__isset.createOpenSquareChat)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CreateOpenSquareChat: ");
      sb.Append(CreateOpenSquareChat);
    }
    if (__isset.deleteSquareChatOrPost)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DeleteSquareChatOrPost: ");
      sb.Append(DeleteSquareChatOrPost);
    }
    if (__isset.removeSquareMember)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("RemoveSquareMember: ");
      sb.Append(RemoveSquareMember);
    }
    if (__isset.grantRole)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("GrantRole: ");
      sb.Append(GrantRole);
    }
    if (__isset.enableInvitationTicket)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("EnableInvitationTicket: ");
      sb.Append(EnableInvitationTicket);
    }
    if (__isset.revision)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Revision: ");
      sb.Append(Revision);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

