/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


public partial class BuddyService
{
  public interface IAsync
  {
    Task<List<BuddySearchResult>> findBuddyContactsByQueryAsync(string language, string country, string query, int fromIndex, int count, BuddySearchRequestSource requestSource, CancellationToken cancellationToken);

    Task<List<Contact>> getBuddyContactsAsync(string language, string country, string classification, int fromIndex, int count, CancellationToken cancellationToken);

    Task<BuddyDetail> getBuddyDetailAsync(string buddyMid, CancellationToken cancellationToken);

    Task<BuddyOnAir> getBuddyOnAirAsync(string buddyMid, CancellationToken cancellationToken);

    Task<List<string>> getCountriesHavingBuddyAsync(CancellationToken cancellationToken);

    Task<Dictionary<string, long>> getNewlyReleasedBuddyIdsAsync(string country, CancellationToken cancellationToken);

    Task<BuddyBanner> getPopularBuddyBannerAsync(string language, string country, ApplicationType applicationType, string resourceSpecification, CancellationToken cancellationToken);

    Task<List<BuddyList>> getPopularBuddyListsAsync(string language, string country, CancellationToken cancellationToken);

    Task<List<Contact>> getPromotedBuddyContactsAsync(string language, string country, CancellationToken cancellationToken);

  }


  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)    {
    }
    public async Task<List<BuddySearchResult>> findBuddyContactsByQueryAsync(string language, string country, string query, int fromIndex, int count, BuddySearchRequestSource requestSource, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("findBuddyContactsByQuery", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new findBuddyContactsByQueryArgs();
      args.Language = language;
      args.Country = country;
      args.Query = query;
      args.FromIndex = fromIndex;
      args.Count = count;
      args.RequestSource = requestSource;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new findBuddyContactsByQueryResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findBuddyContactsByQuery failed: unknown result");
    }

    public async Task<List<Contact>> getBuddyContactsAsync(string language, string country, string classification, int fromIndex, int count, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getBuddyContacts", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getBuddyContactsArgs();
      args.Language = language;
      args.Country = country;
      args.Classification = classification;
      args.FromIndex = fromIndex;
      args.Count = count;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getBuddyContactsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBuddyContacts failed: unknown result");
    }

    public async Task<BuddyDetail> getBuddyDetailAsync(string buddyMid, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getBuddyDetail", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getBuddyDetailArgs();
      args.BuddyMid = buddyMid;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getBuddyDetailResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBuddyDetail failed: unknown result");
    }

    public async Task<BuddyOnAir> getBuddyOnAirAsync(string buddyMid, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getBuddyOnAir", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getBuddyOnAirArgs();
      args.BuddyMid = buddyMid;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getBuddyOnAirResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBuddyOnAir failed: unknown result");
    }

    public async Task<List<string>> getCountriesHavingBuddyAsync(CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getCountriesHavingBuddy", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getCountriesHavingBuddyArgs();
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getCountriesHavingBuddyResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCountriesHavingBuddy failed: unknown result");
    }

    public async Task<Dictionary<string, long>> getNewlyReleasedBuddyIdsAsync(string country, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getNewlyReleasedBuddyIds", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getNewlyReleasedBuddyIdsArgs();
      args.Country = country;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getNewlyReleasedBuddyIdsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNewlyReleasedBuddyIds failed: unknown result");
    }

    public async Task<BuddyBanner> getPopularBuddyBannerAsync(string language, string country, ApplicationType applicationType, string resourceSpecification, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getPopularBuddyBanner", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getPopularBuddyBannerArgs();
      args.Language = language;
      args.Country = country;
      args.ApplicationType = applicationType;
      args.ResourceSpecification = resourceSpecification;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getPopularBuddyBannerResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPopularBuddyBanner failed: unknown result");
    }

    public async Task<List<BuddyList>> getPopularBuddyListsAsync(string language, string country, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getPopularBuddyLists", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getPopularBuddyListsArgs();
      args.Language = language;
      args.Country = country;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getPopularBuddyListsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPopularBuddyLists failed: unknown result");
    }

    public async Task<List<Contact>> getPromotedBuddyContactsAsync(string language, string country, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getPromotedBuddyContacts", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getPromotedBuddyContactsArgs();
      args.Language = language;
      args.Country = country;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getPromotedBuddyContactsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.e)
      {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPromotedBuddyContacts failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private IAsync _iAsync;

    public AsyncProcessor(IAsync iAsync)
    {
      if (iAsync == null) throw new ArgumentNullException(nameof(iAsync));

      _iAsync = iAsync;
      processMap_["findBuddyContactsByQuery"] = findBuddyContactsByQuery_ProcessAsync;
      processMap_["getBuddyContacts"] = getBuddyContacts_ProcessAsync;
      processMap_["getBuddyDetail"] = getBuddyDetail_ProcessAsync;
      processMap_["getBuddyOnAir"] = getBuddyOnAir_ProcessAsync;
      processMap_["getCountriesHavingBuddy"] = getCountriesHavingBuddy_ProcessAsync;
      processMap_["getNewlyReleasedBuddyIds"] = getNewlyReleasedBuddyIds_ProcessAsync;
      processMap_["getPopularBuddyBanner"] = getPopularBuddyBanner_ProcessAsync;
      processMap_["getPopularBuddyLists"] = getPopularBuddyLists_ProcessAsync;
      processMap_["getPromotedBuddyContacts"] = getPromotedBuddyContacts_ProcessAsync;
    }

    protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async Task findBuddyContactsByQuery_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new findBuddyContactsByQueryArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new findBuddyContactsByQueryResult();
      try
      {
        try
        {
          result.Success = await _iAsync.findBuddyContactsByQueryAsync(args.Language, args.Country, args.Query, args.FromIndex, args.Count, args.RequestSource, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("findBuddyContactsByQuery", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("findBuddyContactsByQuery", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getBuddyContacts_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getBuddyContactsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getBuddyContactsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getBuddyContactsAsync(args.Language, args.Country, args.Classification, args.FromIndex, args.Count, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getBuddyContacts", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getBuddyContacts", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getBuddyDetail_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getBuddyDetailArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getBuddyDetailResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getBuddyDetailAsync(args.BuddyMid, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getBuddyDetail", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getBuddyDetail", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getBuddyOnAir_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getBuddyOnAirArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getBuddyOnAirResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getBuddyOnAirAsync(args.BuddyMid, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getBuddyOnAir", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getBuddyOnAir", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getCountriesHavingBuddy_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getCountriesHavingBuddyArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getCountriesHavingBuddyResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getCountriesHavingBuddyAsync(cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getCountriesHavingBuddy", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getCountriesHavingBuddy", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getNewlyReleasedBuddyIds_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getNewlyReleasedBuddyIdsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getNewlyReleasedBuddyIdsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getNewlyReleasedBuddyIdsAsync(args.Country, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getNewlyReleasedBuddyIds", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getNewlyReleasedBuddyIds", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getPopularBuddyBanner_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getPopularBuddyBannerArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getPopularBuddyBannerResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getPopularBuddyBannerAsync(args.Language, args.Country, args.ApplicationType, args.ResourceSpecification, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getPopularBuddyBanner", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getPopularBuddyBanner", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getPopularBuddyLists_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getPopularBuddyListsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getPopularBuddyListsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getPopularBuddyListsAsync(args.Language, args.Country, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getPopularBuddyLists", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getPopularBuddyLists", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getPromotedBuddyContacts_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getPromotedBuddyContactsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getPromotedBuddyContactsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getPromotedBuddyContactsAsync(args.Language, args.Country, cancellationToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getPromotedBuddyContacts", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getPromotedBuddyContacts", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }


  public partial class findBuddyContactsByQueryArgs : TBase
  {
    private string _language;
    private string _country;
    private string _query;
    private int _fromIndex;
    private int _count;
    private BuddySearchRequestSource _requestSource;

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }

    public string Query
    {
      get
      {
        return _query;
      }
      set
      {
        __isset.query = true;
        this._query = value;
      }
    }

    public int FromIndex
    {
      get
      {
        return _fromIndex;
      }
      set
      {
        __isset.fromIndex = true;
        this._fromIndex = value;
      }
    }

    public int Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="BuddySearchRequestSource"/>
    /// </summary>
    public BuddySearchRequestSource RequestSource
    {
      get
      {
        return _requestSource;
      }
      set
      {
        __isset.requestSource = true;
        this._requestSource = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool language;
      public bool country;
      public bool query;
      public bool fromIndex;
      public bool count;
      public bool requestSource;
    }

    public findBuddyContactsByQueryArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String)
              {
                Language = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Country = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Query = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                FromIndex = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I32)
              {
                Count = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I32)
              {
                RequestSource = (BuddySearchRequestSource)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("findBuddyContactsByQuery_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Language != null && __isset.language)
        {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Language, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Country != null && __isset.country)
        {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Country, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Query != null && __isset.query)
        {
          field.Name = "query";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Query, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.fromIndex)
        {
          field.Name = "fromIndex";
          field.Type = TType.I32;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(FromIndex, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.count)
        {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Count, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.requestSource)
        {
          field.Name = "requestSource";
          field.Type = TType.I32;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)RequestSource, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("findBuddyContactsByQuery_args(");
      bool __first = true;
      if (Language != null && __isset.language)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Language: ");
        sb.Append(Language);
      }
      if (Country != null && __isset.country)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Country: ");
        sb.Append(Country);
      }
      if (Query != null && __isset.query)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Query: ");
        sb.Append(Query);
      }
      if (__isset.fromIndex)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("FromIndex: ");
        sb.Append(FromIndex);
      }
      if (__isset.count)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Count: ");
        sb.Append(Count);
      }
      if (__isset.requestSource)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RequestSource: ");
        sb.Append(RequestSource);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class findBuddyContactsByQueryResult : TBase
  {
    private List<BuddySearchResult> _success;
    private TalkException _e;

    public List<BuddySearchResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public findBuddyContactsByQueryResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<BuddySearchResult>();
                  TList _list635 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i636 = 0; _i636 < _list635.Count; ++_i636)
                  {
                    BuddySearchResult _elem637;
                    _elem637 = new BuddySearchResult();
                    await _elem637.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem637);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("findBuddyContactsByQuery_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (BuddySearchResult _iter638 in Success)
              {
                await _iter638.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("findBuddyContactsByQuery_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getBuddyContactsArgs : TBase
  {
    private string _language;
    private string _country;
    private string _classification;
    private int _fromIndex;
    private int _count;

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }

    public string Classification
    {
      get
      {
        return _classification;
      }
      set
      {
        __isset.classification = true;
        this._classification = value;
      }
    }

    public int FromIndex
    {
      get
      {
        return _fromIndex;
      }
      set
      {
        __isset.fromIndex = true;
        this._fromIndex = value;
      }
    }

    public int Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool language;
      public bool country;
      public bool classification;
      public bool fromIndex;
      public bool count;
    }

    public getBuddyContactsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String)
              {
                Language = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Country = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Classification = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                FromIndex = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I32)
              {
                Count = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getBuddyContacts_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Language != null && __isset.language)
        {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Language, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Country != null && __isset.country)
        {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Country, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Classification != null && __isset.classification)
        {
          field.Name = "classification";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Classification, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.fromIndex)
        {
          field.Name = "fromIndex";
          field.Type = TType.I32;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(FromIndex, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.count)
        {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Count, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getBuddyContacts_args(");
      bool __first = true;
      if (Language != null && __isset.language)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Language: ");
        sb.Append(Language);
      }
      if (Country != null && __isset.country)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Country: ");
        sb.Append(Country);
      }
      if (Classification != null && __isset.classification)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Classification: ");
        sb.Append(Classification);
      }
      if (__isset.fromIndex)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("FromIndex: ");
        sb.Append(FromIndex);
      }
      if (__isset.count)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Count: ");
        sb.Append(Count);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getBuddyContactsResult : TBase
  {
    private List<Contact> _success;
    private TalkException _e;

    public List<Contact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getBuddyContactsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<Contact>();
                  TList _list639 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i640 = 0; _i640 < _list639.Count; ++_i640)
                  {
                    Contact _elem641;
                    _elem641 = new Contact();
                    await _elem641.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem641);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getBuddyContacts_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Contact _iter642 in Success)
              {
                await _iter642.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getBuddyContacts_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getBuddyDetailArgs : TBase
  {
    private string _buddyMid;

    public string BuddyMid
    {
      get
      {
        return _buddyMid;
      }
      set
      {
        __isset.buddyMid = true;
        this._buddyMid = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool buddyMid;
    }

    public getBuddyDetailArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 4:
              if (field.Type == TType.String)
              {
                BuddyMid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getBuddyDetail_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (BuddyMid != null && __isset.buddyMid)
        {
          field.Name = "buddyMid";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(BuddyMid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getBuddyDetail_args(");
      bool __first = true;
      if (BuddyMid != null && __isset.buddyMid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BuddyMid: ");
        sb.Append(BuddyMid);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getBuddyDetailResult : TBase
  {
    private BuddyDetail _success;
    private TalkException _e;

    public BuddyDetail Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getBuddyDetailResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new BuddyDetail();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getBuddyDetail_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getBuddyDetail_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getBuddyOnAirArgs : TBase
  {
    private string _buddyMid;

    public string BuddyMid
    {
      get
      {
        return _buddyMid;
      }
      set
      {
        __isset.buddyMid = true;
        this._buddyMid = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool buddyMid;
    }

    public getBuddyOnAirArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 4:
              if (field.Type == TType.String)
              {
                BuddyMid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getBuddyOnAir_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (BuddyMid != null && __isset.buddyMid)
        {
          field.Name = "buddyMid";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(BuddyMid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getBuddyOnAir_args(");
      bool __first = true;
      if (BuddyMid != null && __isset.buddyMid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BuddyMid: ");
        sb.Append(BuddyMid);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getBuddyOnAirResult : TBase
  {
    private BuddyOnAir _success;
    private TalkException _e;

    public BuddyOnAir Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getBuddyOnAirResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new BuddyOnAir();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getBuddyOnAir_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getBuddyOnAir_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getCountriesHavingBuddyArgs : TBase
  {

    public getCountriesHavingBuddyArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getCountriesHavingBuddy_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getCountriesHavingBuddy_args(");
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getCountriesHavingBuddyResult : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getCountriesHavingBuddyResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<string>();
                  TList _list643 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i644 = 0; _i644 < _list643.Count; ++_i644)
                  {
                    string _elem645;
                    _elem645 = await iprot.ReadStringAsync(cancellationToken);
                    Success.Add(_elem645);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getCountriesHavingBuddy_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
              foreach (string _iter646 in Success)
              {
                await oprot.WriteStringAsync(_iter646, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getCountriesHavingBuddy_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getNewlyReleasedBuddyIdsArgs : TBase
  {
    private string _country;

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool country;
    }

    public getNewlyReleasedBuddyIdsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.String)
              {
                Country = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getNewlyReleasedBuddyIds_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Country != null && __isset.country)
        {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Country, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getNewlyReleasedBuddyIds_args(");
      bool __first = true;
      if (Country != null && __isset.country)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Country: ");
        sb.Append(Country);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getNewlyReleasedBuddyIdsResult : TBase
  {
    private Dictionary<string, long> _success;
    private TalkException _e;

    public Dictionary<string, long> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getNewlyReleasedBuddyIdsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map)
              {
                {
                  Success = new Dictionary<string, long>();
                  TMap _map647 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i648 = 0; _i648 < _map647.Count; ++_i648)
                  {
                    string _key649;
                    long _val650;
                    _key649 = await iprot.ReadStringAsync(cancellationToken);
                    _val650 = await iprot.ReadI64Async(cancellationToken);
                    Success[_key649] = _val650;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getNewlyReleasedBuddyIds_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I64, Success.Count), cancellationToken);
              foreach (string _iter651 in Success.Keys)
              {
                await oprot.WriteStringAsync(_iter651, cancellationToken);
                await oprot.WriteI64Async(Success[_iter651], cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getNewlyReleasedBuddyIds_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getPopularBuddyBannerArgs : TBase
  {
    private string _language;
    private string _country;
    private ApplicationType _applicationType;
    private string _resourceSpecification;

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ApplicationType"/>
    /// </summary>
    public ApplicationType ApplicationType
    {
      get
      {
        return _applicationType;
      }
      set
      {
        __isset.applicationType = true;
        this._applicationType = value;
      }
    }

    public string ResourceSpecification
    {
      get
      {
        return _resourceSpecification;
      }
      set
      {
        __isset.resourceSpecification = true;
        this._resourceSpecification = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool language;
      public bool country;
      public bool applicationType;
      public bool resourceSpecification;
    }

    public getPopularBuddyBannerArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String)
              {
                Language = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Country = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                ApplicationType = (ApplicationType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                ResourceSpecification = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getPopularBuddyBanner_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Language != null && __isset.language)
        {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Language, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Country != null && __isset.country)
        {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Country, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.applicationType)
        {
          field.Name = "applicationType";
          field.Type = TType.I32;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)ApplicationType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ResourceSpecification != null && __isset.resourceSpecification)
        {
          field.Name = "resourceSpecification";
          field.Type = TType.String;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ResourceSpecification, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getPopularBuddyBanner_args(");
      bool __first = true;
      if (Language != null && __isset.language)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Language: ");
        sb.Append(Language);
      }
      if (Country != null && __isset.country)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Country: ");
        sb.Append(Country);
      }
      if (__isset.applicationType)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ApplicationType: ");
        sb.Append(ApplicationType);
      }
      if (ResourceSpecification != null && __isset.resourceSpecification)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ResourceSpecification: ");
        sb.Append(ResourceSpecification);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getPopularBuddyBannerResult : TBase
  {
    private BuddyBanner _success;
    private TalkException _e;

    public BuddyBanner Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getPopularBuddyBannerResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new BuddyBanner();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getPopularBuddyBanner_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getPopularBuddyBanner_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getPopularBuddyListsArgs : TBase
  {
    private string _language;
    private string _country;

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool language;
      public bool country;
    }

    public getPopularBuddyListsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String)
              {
                Language = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Country = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getPopularBuddyLists_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Language != null && __isset.language)
        {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Language, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Country != null && __isset.country)
        {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Country, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getPopularBuddyLists_args(");
      bool __first = true;
      if (Language != null && __isset.language)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Language: ");
        sb.Append(Language);
      }
      if (Country != null && __isset.country)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Country: ");
        sb.Append(Country);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getPopularBuddyListsResult : TBase
  {
    private List<BuddyList> _success;
    private TalkException _e;

    public List<BuddyList> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getPopularBuddyListsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<BuddyList>();
                  TList _list652 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i653 = 0; _i653 < _list652.Count; ++_i653)
                  {
                    BuddyList _elem654;
                    _elem654 = new BuddyList();
                    await _elem654.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem654);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getPopularBuddyLists_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (BuddyList _iter655 in Success)
              {
                await _iter655.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getPopularBuddyLists_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getPromotedBuddyContactsArgs : TBase
  {
    private string _language;
    private string _country;

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool language;
      public bool country;
    }

    public getPromotedBuddyContactsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String)
              {
                Language = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Country = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getPromotedBuddyContacts_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Language != null && __isset.language)
        {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Language, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Country != null && __isset.country)
        {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Country, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getPromotedBuddyContacts_args(");
      bool __first = true;
      if (Language != null && __isset.language)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Language: ");
        sb.Append(Language);
      }
      if (Country != null && __isset.country)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Country: ");
        sb.Append(Country);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getPromotedBuddyContactsResult : TBase
  {
    private List<Contact> _success;
    private TalkException _e;

    public List<Contact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool e;
    }

    public getPromotedBuddyContactsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<Contact>();
                  TList _list656 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i657 = 0; _i657 < _list656.Count; ++_i657)
                  {
                    Contact _elem658;
                    _elem658 = new Contact();
                    await _elem658.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem658);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                E = new TalkException();
                await E.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getPromotedBuddyContacts_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Contact _iter659 in Success)
              {
                await _iter659.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.e)
        {
          if (E != null)
          {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getPromotedBuddyContacts_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (E != null && __isset.e)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
