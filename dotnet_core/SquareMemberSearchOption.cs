/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



public partial class SquareMemberSearchOption : TBase
{
  private SquareMembershipState _membershipState;
  private THashSet<SquareMemberRole> _memberRoles;
  private string _displayName;
  private BooleanState _ableToReceiveMessage;
  private BooleanState _ableToReceiveFriendRequest;
  private string _chatMidToExcludeMembers;
  private bool _includingMe;

  /// <summary>
  /// 
  /// <seealso cref="SquareMembershipState"/>
  /// </summary>
  public SquareMembershipState MembershipState
  {
    get
    {
      return _membershipState;
    }
    set
    {
      __isset.membershipState = true;
      this._membershipState = value;
    }
  }

  public THashSet<SquareMemberRole> MemberRoles
  {
    get
    {
      return _memberRoles;
    }
    set
    {
      __isset.memberRoles = true;
      this._memberRoles = value;
    }
  }

  public string DisplayName
  {
    get
    {
      return _displayName;
    }
    set
    {
      __isset.displayName = true;
      this._displayName = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="BooleanState"/>
  /// </summary>
  public BooleanState AbleToReceiveMessage
  {
    get
    {
      return _ableToReceiveMessage;
    }
    set
    {
      __isset.ableToReceiveMessage = true;
      this._ableToReceiveMessage = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="BooleanState"/>
  /// </summary>
  public BooleanState AbleToReceiveFriendRequest
  {
    get
    {
      return _ableToReceiveFriendRequest;
    }
    set
    {
      __isset.ableToReceiveFriendRequest = true;
      this._ableToReceiveFriendRequest = value;
    }
  }

  public string ChatMidToExcludeMembers
  {
    get
    {
      return _chatMidToExcludeMembers;
    }
    set
    {
      __isset.chatMidToExcludeMembers = true;
      this._chatMidToExcludeMembers = value;
    }
  }

  public bool IncludingMe
  {
    get
    {
      return _includingMe;
    }
    set
    {
      __isset.includingMe = true;
      this._includingMe = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool membershipState;
    public bool memberRoles;
    public bool displayName;
    public bool ableToReceiveMessage;
    public bool ableToReceiveFriendRequest;
    public bool chatMidToExcludeMembers;
    public bool includingMe;
  }

  public SquareMemberSearchOption()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              MembershipState = (SquareMembershipState)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Set)
            {
              {
                MemberRoles = new THashSet<SquareMemberRole>();
                TSet _set329 = await iprot.ReadSetBeginAsync(cancellationToken);
                for(int _i330 = 0; _i330 < _set329.Count; ++_i330)
                {
                  SquareMemberRole _elem331;
                  _elem331 = (SquareMemberRole)await iprot.ReadI32Async(cancellationToken);
                  MemberRoles.Add(_elem331);
                }
                await iprot.ReadSetEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              DisplayName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I32)
            {
              AbleToReceiveMessage = (BooleanState)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I32)
            {
              AbleToReceiveFriendRequest = (BooleanState)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.String)
            {
              ChatMidToExcludeMembers = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.Bool)
            {
              IncludingMe = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("SquareMemberSearchOption");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.membershipState)
      {
        field.Name = "membershipState";
        field.Type = TType.I32;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)MembershipState, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (MemberRoles != null && __isset.memberRoles)
      {
        field.Name = "memberRoles";
        field.Type = TType.Set;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteSetBeginAsync(new TSet(TType.I32, MemberRoles.Count), cancellationToken);
          foreach (SquareMemberRole _iter332 in MemberRoles)
          {
            await oprot.WriteI32Async((int)_iter332, cancellationToken);
          }
          await oprot.WriteSetEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (DisplayName != null && __isset.displayName)
      {
        field.Name = "displayName";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(DisplayName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.ableToReceiveMessage)
      {
        field.Name = "ableToReceiveMessage";
        field.Type = TType.I32;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)AbleToReceiveMessage, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.ableToReceiveFriendRequest)
      {
        field.Name = "ableToReceiveFriendRequest";
        field.Type = TType.I32;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)AbleToReceiveFriendRequest, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ChatMidToExcludeMembers != null && __isset.chatMidToExcludeMembers)
      {
        field.Name = "chatMidToExcludeMembers";
        field.Type = TType.String;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ChatMidToExcludeMembers, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.includingMe)
      {
        field.Name = "includingMe";
        field.Type = TType.Bool;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(IncludingMe, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("SquareMemberSearchOption(");
    bool __first = true;
    if (__isset.membershipState)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MembershipState: ");
      sb.Append(MembershipState);
    }
    if (MemberRoles != null && __isset.memberRoles)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MemberRoles: ");
      sb.Append(MemberRoles);
    }
    if (DisplayName != null && __isset.displayName)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("DisplayName: ");
      sb.Append(DisplayName);
    }
    if (__isset.ableToReceiveMessage)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("AbleToReceiveMessage: ");
      sb.Append(AbleToReceiveMessage);
    }
    if (__isset.ableToReceiveFriendRequest)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("AbleToReceiveFriendRequest: ");
      sb.Append(AbleToReceiveFriendRequest);
    }
    if (ChatMidToExcludeMembers != null && __isset.chatMidToExcludeMembers)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ChatMidToExcludeMembers: ");
      sb.Append(ChatMidToExcludeMembers);
    }
    if (__isset.includingMe)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("IncludingMe: ");
      sb.Append(IncludingMe);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

