{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.11.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module CallService_Client(getUserStatus,updateProfileAttributeForChannel,updateExtendedProfileAttribute,getAllSimpleChannelContacts,getUserIdentities,markPaidCallAd,isGroupMember,getPhoneInfoFromPhoneNumber,redeemPaidCallVoucher,getPreferredDisplayName,getContactsForChannel,getCallCreditProducts,getCompactContacts,notifyNotiCenterEvent,isInContact,lookupGroupMembers,getRoomInformation,getGroupCall,isAllowSecondaryDeviceLogin,getPrimaryClientForChannel,createRoomWithBuddy,getDisplayName,getPaidCallMetadata,getMid,getUserCountryForBilling,getFavoriteGroupIdsForChannel,getPaidCallHistory,sendPinCodeOperation,inviteIntoGroupCall,getFriendMids,getMetaProfile,sendMessageForChannel,activeBuddySubscriberCount,getCallCreditPurchaseHistory,isRoomMember,sendSystemOAMessage,acquirePaidCallRoute,getGroupsForChannel,getUserCreateTime,registerChannelCP,reserveCallCreditPurchase,acquirePaidCallCurrencyExchangeRate,getRoomMemberMidsForAppPlatform,getPaidCallBalanceList,getPersonalInfos,getPrimaryClientsForChannel,addBuddyToContact,getGroupMemberMidsForAppPlatform,getUserLanguage,lookupPaidCall,getExtendedProfile,getReverseCompactContacts,getPaidCallAdStatus,findContactByUseridWithoutAbuseBlockForChannel,getGroupMemberMids,sendMessageWithoutRelationship,displayBuddySubscriberCountInBulk,lookupRoomMembers,getFavoriteMidsForChannel,getAllContactIdsForChannel,displayBuddySubscriberCount,getProfileForChannel,getUserTickets,getOAFriendMids,searchPaidCallUserRate,getJoinedGroupIdsForChannel,acquireGroupCallRoute,getUserMidsWhoAddedMe,getIdentityCredential,addOperationForChannel,getSimpleChannelContacts,getUserLastSentMessageTimeStamp) where
import qualified Data.IORef as R
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Line_Types
import CallService
seqid = R.newIORef 0
getUserStatus (ip,op) arg_mid = do
  send_getUserStatus op arg_mid
  recv_getUserStatus ip
send_getUserStatus op arg_mid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getUserStatus", T.M_CALL, seqn) $
    write_GetUserStatus_args op (GetUserStatus_args{getUserStatus_args_mid=arg_mid})
recv_getUserStatus ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetUserStatus_result ip
    P.maybe (P.return ()) X.throw (getUserStatus_result_e res)
    P.return $ getUserStatus_result_success res
updateProfileAttributeForChannel (ip,op) arg_profileAttribute arg_value = do
  send_updateProfileAttributeForChannel op arg_profileAttribute arg_value
  recv_updateProfileAttributeForChannel ip
send_updateProfileAttributeForChannel op arg_profileAttribute arg_value = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateProfileAttributeForChannel", T.M_CALL, seqn) $
    write_UpdateProfileAttributeForChannel_args op (UpdateProfileAttributeForChannel_args{updateProfileAttributeForChannel_args_profileAttribute=arg_profileAttribute,updateProfileAttributeForChannel_args_value=arg_value})
recv_updateProfileAttributeForChannel ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateProfileAttributeForChannel_result ip
    P.maybe (P.return ()) X.throw (updateProfileAttributeForChannel_result_e res)
    P.return ()
updateExtendedProfileAttribute (ip,op) arg_attr arg_extendedProfile = do
  send_updateExtendedProfileAttribute op arg_attr arg_extendedProfile
  recv_updateExtendedProfileAttribute ip
send_updateExtendedProfileAttribute op arg_attr arg_extendedProfile = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateExtendedProfileAttribute", T.M_CALL, seqn) $
    write_UpdateExtendedProfileAttribute_args op (UpdateExtendedProfileAttribute_args{updateExtendedProfileAttribute_args_attr=arg_attr,updateExtendedProfileAttribute_args_extendedProfile=arg_extendedProfile})
recv_updateExtendedProfileAttribute ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateExtendedProfileAttribute_result ip
    P.maybe (P.return ()) X.throw (updateExtendedProfileAttribute_result_e res)
    P.return ()
getAllSimpleChannelContacts (ip,op) arg_statusSticonFallbackDisabled = do
  send_getAllSimpleChannelContacts op arg_statusSticonFallbackDisabled
  recv_getAllSimpleChannelContacts ip
send_getAllSimpleChannelContacts op arg_statusSticonFallbackDisabled = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getAllSimpleChannelContacts", T.M_CALL, seqn) $
    write_GetAllSimpleChannelContacts_args op (GetAllSimpleChannelContacts_args{getAllSimpleChannelContacts_args_statusSticonFallbackDisabled=arg_statusSticonFallbackDisabled})
recv_getAllSimpleChannelContacts ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetAllSimpleChannelContacts_result ip
    P.maybe (P.return ()) X.throw (getAllSimpleChannelContacts_result_e res)
    P.return $ getAllSimpleChannelContacts_result_success res
getUserIdentities (ip,op) = do
  send_getUserIdentities op
  recv_getUserIdentities ip
send_getUserIdentities op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getUserIdentities", T.M_CALL, seqn) $
    write_GetUserIdentities_args op (GetUserIdentities_args{})
recv_getUserIdentities ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetUserIdentities_result ip
    P.maybe (P.return ()) X.throw (getUserIdentities_result_e res)
    P.return $ getUserIdentities_result_success res
markPaidCallAd (ip,op) arg_dialedNumber arg_language arg_disableCallerId = do
  send_markPaidCallAd op arg_dialedNumber arg_language arg_disableCallerId
  recv_markPaidCallAd ip
send_markPaidCallAd op arg_dialedNumber arg_language arg_disableCallerId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("markPaidCallAd", T.M_CALL, seqn) $
    write_MarkPaidCallAd_args op (MarkPaidCallAd_args{markPaidCallAd_args_dialedNumber=arg_dialedNumber,markPaidCallAd_args_language=arg_language,markPaidCallAd_args_disableCallerId=arg_disableCallerId})
recv_markPaidCallAd ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_MarkPaidCallAd_result ip
    P.maybe (P.return ()) X.throw (markPaidCallAd_result_e res)
    P.return $ markPaidCallAd_result_success res
isGroupMember (ip,op) arg_groupId = do
  send_isGroupMember op arg_groupId
  recv_isGroupMember ip
send_isGroupMember op arg_groupId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("isGroupMember", T.M_CALL, seqn) $
    write_IsGroupMember_args op (IsGroupMember_args{isGroupMember_args_groupId=arg_groupId})
recv_isGroupMember ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_IsGroupMember_result ip
    P.maybe (P.return ()) X.throw (isGroupMember_result_e res)
    P.return $ isGroupMember_result_success res
getPhoneInfoFromPhoneNumber (ip,op) arg_region arg_phoneNumber = do
  send_getPhoneInfoFromPhoneNumber op arg_region arg_phoneNumber
  recv_getPhoneInfoFromPhoneNumber ip
send_getPhoneInfoFromPhoneNumber op arg_region arg_phoneNumber = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getPhoneInfoFromPhoneNumber", T.M_CALL, seqn) $
    write_GetPhoneInfoFromPhoneNumber_args op (GetPhoneInfoFromPhoneNumber_args{getPhoneInfoFromPhoneNumber_args_region=arg_region,getPhoneInfoFromPhoneNumber_args_phoneNumber=arg_phoneNumber})
recv_getPhoneInfoFromPhoneNumber ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetPhoneInfoFromPhoneNumber_result ip
    P.maybe (P.return ()) X.throw (getPhoneInfoFromPhoneNumber_result_e res)
    P.return $ getPhoneInfoFromPhoneNumber_result_success res
redeemPaidCallVoucher (ip,op) arg_serial arg_language = do
  send_redeemPaidCallVoucher op arg_serial arg_language
  recv_redeemPaidCallVoucher ip
send_redeemPaidCallVoucher op arg_serial arg_language = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("redeemPaidCallVoucher", T.M_CALL, seqn) $
    write_RedeemPaidCallVoucher_args op (RedeemPaidCallVoucher_args{redeemPaidCallVoucher_args_serial=arg_serial,redeemPaidCallVoucher_args_language=arg_language})
recv_redeemPaidCallVoucher ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RedeemPaidCallVoucher_result ip
    P.maybe (P.return ()) X.throw (redeemPaidCallVoucher_result_e res)
    P.return $ redeemPaidCallVoucher_result_success res
getPreferredDisplayName (ip,op) arg_mids = do
  send_getPreferredDisplayName op arg_mids
  recv_getPreferredDisplayName ip
send_getPreferredDisplayName op arg_mids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getPreferredDisplayName", T.M_CALL, seqn) $
    write_GetPreferredDisplayName_args op (GetPreferredDisplayName_args{getPreferredDisplayName_args_mids=arg_mids})
recv_getPreferredDisplayName ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetPreferredDisplayName_result ip
    P.maybe (P.return ()) X.throw (getPreferredDisplayName_result_e res)
    P.return $ getPreferredDisplayName_result_success res
getContactsForChannel (ip,op) arg_ids = do
  send_getContactsForChannel op arg_ids
  recv_getContactsForChannel ip
send_getContactsForChannel op arg_ids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getContactsForChannel", T.M_CALL, seqn) $
    write_GetContactsForChannel_args op (GetContactsForChannel_args{getContactsForChannel_args_ids=arg_ids})
recv_getContactsForChannel ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetContactsForChannel_result ip
    P.maybe (P.return ()) X.throw (getContactsForChannel_result_e res)
    P.return $ getContactsForChannel_result_success res
getCallCreditProducts (ip,op) arg_appStoreCode arg_pgCode arg_country arg_language = do
  send_getCallCreditProducts op arg_appStoreCode arg_pgCode arg_country arg_language
  recv_getCallCreditProducts ip
send_getCallCreditProducts op arg_appStoreCode arg_pgCode arg_country arg_language = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getCallCreditProducts", T.M_CALL, seqn) $
    write_GetCallCreditProducts_args op (GetCallCreditProducts_args{getCallCreditProducts_args_appStoreCode=arg_appStoreCode,getCallCreditProducts_args_pgCode=arg_pgCode,getCallCreditProducts_args_country=arg_country,getCallCreditProducts_args_language=arg_language})
recv_getCallCreditProducts ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetCallCreditProducts_result ip
    P.maybe (P.return ()) X.throw (getCallCreditProducts_result_e res)
    P.return $ getCallCreditProducts_result_success res
getCompactContacts (ip,op) arg_lastModifiedTimestamp = do
  send_getCompactContacts op arg_lastModifiedTimestamp
  recv_getCompactContacts ip
send_getCompactContacts op arg_lastModifiedTimestamp = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getCompactContacts", T.M_CALL, seqn) $
    write_GetCompactContacts_args op (GetCompactContacts_args{getCompactContacts_args_lastModifiedTimestamp=arg_lastModifiedTimestamp})
recv_getCompactContacts ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetCompactContacts_result ip
    P.maybe (P.return ()) X.throw (getCompactContacts_result_e res)
    P.return $ getCompactContacts_result_success res
notifyNotiCenterEvent (ip,op) arg_event = do
  send_notifyNotiCenterEvent op arg_event
  recv_notifyNotiCenterEvent ip
send_notifyNotiCenterEvent op arg_event = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("notifyNotiCenterEvent", T.M_CALL, seqn) $
    write_NotifyNotiCenterEvent_args op (NotifyNotiCenterEvent_args{notifyNotiCenterEvent_args_event=arg_event})
recv_notifyNotiCenterEvent ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_NotifyNotiCenterEvent_result ip
    P.maybe (P.return ()) X.throw (notifyNotiCenterEvent_result_e res)
    P.return ()
isInContact (ip,op) arg_mid = do
  send_isInContact op arg_mid
  recv_isInContact ip
send_isInContact op arg_mid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("isInContact", T.M_CALL, seqn) $
    write_IsInContact_args op (IsInContact_args{isInContact_args_mid=arg_mid})
recv_isInContact ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_IsInContact_result ip
    P.maybe (P.return ()) X.throw (isInContact_result_e res)
    P.return $ isInContact_result_success res
lookupGroupMembers (ip,op) arg_groupId arg_mids = do
  send_lookupGroupMembers op arg_groupId arg_mids
  recv_lookupGroupMembers ip
send_lookupGroupMembers op arg_groupId arg_mids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("lookupGroupMembers", T.M_CALL, seqn) $
    write_LookupGroupMembers_args op (LookupGroupMembers_args{lookupGroupMembers_args_groupId=arg_groupId,lookupGroupMembers_args_mids=arg_mids})
recv_lookupGroupMembers ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_LookupGroupMembers_result ip
    P.maybe (P.return ()) X.throw (lookupGroupMembers_result_e res)
    P.return $ lookupGroupMembers_result_success res
getRoomInformation (ip,op) arg_roomMid = do
  send_getRoomInformation op arg_roomMid
  recv_getRoomInformation ip
send_getRoomInformation op arg_roomMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getRoomInformation", T.M_CALL, seqn) $
    write_GetRoomInformation_args op (GetRoomInformation_args{getRoomInformation_args_roomMid=arg_roomMid})
recv_getRoomInformation ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetRoomInformation_result ip
    P.maybe (P.return ()) X.throw (getRoomInformation_result_e res)
    P.return $ getRoomInformation_result_success res
getGroupCall (ip,op) arg_chatMid = do
  send_getGroupCall op arg_chatMid
  recv_getGroupCall ip
send_getGroupCall op arg_chatMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getGroupCall", T.M_CALL, seqn) $
    write_GetGroupCall_args op (GetGroupCall_args{getGroupCall_args_chatMid=arg_chatMid})
recv_getGroupCall ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetGroupCall_result ip
    P.maybe (P.return ()) X.throw (getGroupCall_result_e res)
    P.return $ getGroupCall_result_success res
isAllowSecondaryDeviceLogin (ip,op) = do
  send_isAllowSecondaryDeviceLogin op
  recv_isAllowSecondaryDeviceLogin ip
send_isAllowSecondaryDeviceLogin op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("isAllowSecondaryDeviceLogin", T.M_CALL, seqn) $
    write_IsAllowSecondaryDeviceLogin_args op (IsAllowSecondaryDeviceLogin_args{})
recv_isAllowSecondaryDeviceLogin ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_IsAllowSecondaryDeviceLogin_result ip
    P.maybe (P.return ()) X.throw (isAllowSecondaryDeviceLogin_result_e res)
    P.return $ isAllowSecondaryDeviceLogin_result_success res
getPrimaryClientForChannel (ip,op) = do
  send_getPrimaryClientForChannel op
  recv_getPrimaryClientForChannel ip
send_getPrimaryClientForChannel op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getPrimaryClientForChannel", T.M_CALL, seqn) $
    write_GetPrimaryClientForChannel_args op (GetPrimaryClientForChannel_args{})
recv_getPrimaryClientForChannel ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetPrimaryClientForChannel_result ip
    P.maybe (P.return ()) X.throw (getPrimaryClientForChannel_result_e res)
    P.return $ getPrimaryClientForChannel_result_success res
createRoomWithBuddy (ip,op) arg_reqSeq arg_buddyMid arg_contactIds = do
  send_createRoomWithBuddy op arg_reqSeq arg_buddyMid arg_contactIds
  recv_createRoomWithBuddy ip
send_createRoomWithBuddy op arg_reqSeq arg_buddyMid arg_contactIds = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("createRoomWithBuddy", T.M_CALL, seqn) $
    write_CreateRoomWithBuddy_args op (CreateRoomWithBuddy_args{createRoomWithBuddy_args_reqSeq=arg_reqSeq,createRoomWithBuddy_args_buddyMid=arg_buddyMid,createRoomWithBuddy_args_contactIds=arg_contactIds})
recv_createRoomWithBuddy ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CreateRoomWithBuddy_result ip
    P.maybe (P.return ()) X.throw (createRoomWithBuddy_result_e res)
    P.return $ createRoomWithBuddy_result_success res
getDisplayName (ip,op) arg_mid = do
  send_getDisplayName op arg_mid
  recv_getDisplayName ip
send_getDisplayName op arg_mid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getDisplayName", T.M_CALL, seqn) $
    write_GetDisplayName_args op (GetDisplayName_args{getDisplayName_args_mid=arg_mid})
recv_getDisplayName ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetDisplayName_result ip
    P.maybe (P.return ()) X.throw (getDisplayName_result_e res)
    P.return $ getDisplayName_result_success res
getPaidCallMetadata (ip,op) arg_language = do
  send_getPaidCallMetadata op arg_language
  recv_getPaidCallMetadata ip
send_getPaidCallMetadata op arg_language = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getPaidCallMetadata", T.M_CALL, seqn) $
    write_GetPaidCallMetadata_args op (GetPaidCallMetadata_args{getPaidCallMetadata_args_language=arg_language})
recv_getPaidCallMetadata ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetPaidCallMetadata_result ip
    P.maybe (P.return ()) X.throw (getPaidCallMetadata_result_e res)
    P.return $ getPaidCallMetadata_result_success res
getMid (ip,op) = do
  send_getMid op
  recv_getMid ip
send_getMid op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getMid", T.M_CALL, seqn) $
    write_GetMid_args op (GetMid_args{})
recv_getMid ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetMid_result ip
    P.maybe (P.return ()) X.throw (getMid_result_e res)
    P.return $ getMid_result_success res
getUserCountryForBilling (ip,op) arg_country arg_remoteIp = do
  send_getUserCountryForBilling op arg_country arg_remoteIp
  recv_getUserCountryForBilling ip
send_getUserCountryForBilling op arg_country arg_remoteIp = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getUserCountryForBilling", T.M_CALL, seqn) $
    write_GetUserCountryForBilling_args op (GetUserCountryForBilling_args{getUserCountryForBilling_args_country=arg_country,getUserCountryForBilling_args_remoteIp=arg_remoteIp})
recv_getUserCountryForBilling ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetUserCountryForBilling_result ip
    P.maybe (P.return ()) X.throw (getUserCountryForBilling_result_e res)
    P.return $ getUserCountryForBilling_result_success res
getFavoriteGroupIdsForChannel (ip,op) = do
  send_getFavoriteGroupIdsForChannel op
  recv_getFavoriteGroupIdsForChannel ip
send_getFavoriteGroupIdsForChannel op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getFavoriteGroupIdsForChannel", T.M_CALL, seqn) $
    write_GetFavoriteGroupIdsForChannel_args op (GetFavoriteGroupIdsForChannel_args{})
recv_getFavoriteGroupIdsForChannel ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetFavoriteGroupIdsForChannel_result ip
    P.maybe (P.return ()) X.throw (getFavoriteGroupIdsForChannel_result_e res)
    P.return $ getFavoriteGroupIdsForChannel_result_success res
getPaidCallHistory (ip,op) arg_start arg_size arg_language = do
  send_getPaidCallHistory op arg_start arg_size arg_language
  recv_getPaidCallHistory ip
send_getPaidCallHistory op arg_start arg_size arg_language = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getPaidCallHistory", T.M_CALL, seqn) $
    write_GetPaidCallHistory_args op (GetPaidCallHistory_args{getPaidCallHistory_args_start=arg_start,getPaidCallHistory_args_size=arg_size,getPaidCallHistory_args_language=arg_language})
recv_getPaidCallHistory ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetPaidCallHistory_result ip
    P.maybe (P.return ()) X.throw (getPaidCallHistory_result_e res)
    P.return $ getPaidCallHistory_result_success res
sendPinCodeOperation (ip,op) arg_verifier = do
  send_sendPinCodeOperation op arg_verifier
  recv_sendPinCodeOperation ip
send_sendPinCodeOperation op arg_verifier = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendPinCodeOperation", T.M_CALL, seqn) $
    write_SendPinCodeOperation_args op (SendPinCodeOperation_args{sendPinCodeOperation_args_verifier=arg_verifier})
recv_sendPinCodeOperation ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendPinCodeOperation_result ip
    P.maybe (P.return ()) X.throw (sendPinCodeOperation_result_e res)
    P.return ()
inviteIntoGroupCall (ip,op) arg_chatMid arg_memberMids arg_mediaType = do
  send_inviteIntoGroupCall op arg_chatMid arg_memberMids arg_mediaType
  recv_inviteIntoGroupCall ip
send_inviteIntoGroupCall op arg_chatMid arg_memberMids arg_mediaType = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("inviteIntoGroupCall", T.M_CALL, seqn) $
    write_InviteIntoGroupCall_args op (InviteIntoGroupCall_args{inviteIntoGroupCall_args_chatMid=arg_chatMid,inviteIntoGroupCall_args_memberMids=arg_memberMids,inviteIntoGroupCall_args_mediaType=arg_mediaType})
recv_inviteIntoGroupCall ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_InviteIntoGroupCall_result ip
    P.maybe (P.return ()) X.throw (inviteIntoGroupCall_result_e res)
    P.return ()
getFriendMids (ip,op) = do
  send_getFriendMids op
  recv_getFriendMids ip
send_getFriendMids op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getFriendMids", T.M_CALL, seqn) $
    write_GetFriendMids_args op (GetFriendMids_args{})
recv_getFriendMids ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetFriendMids_result ip
    P.maybe (P.return ()) X.throw (getFriendMids_result_e res)
    P.return $ getFriendMids_result_success res
getMetaProfile (ip,op) = do
  send_getMetaProfile op
  recv_getMetaProfile ip
send_getMetaProfile op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getMetaProfile", T.M_CALL, seqn) $
    write_GetMetaProfile_args op (GetMetaProfile_args{})
recv_getMetaProfile ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetMetaProfile_result ip
    P.maybe (P.return ()) X.throw (getMetaProfile_result_e res)
    P.return $ getMetaProfile_result_success res
sendMessageForChannel (ip,op) arg_message = do
  send_sendMessageForChannel op arg_message
  recv_sendMessageForChannel ip
send_sendMessageForChannel op arg_message = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendMessageForChannel", T.M_CALL, seqn) $
    write_SendMessageForChannel_args op (SendMessageForChannel_args{sendMessageForChannel_args_message=arg_message})
recv_sendMessageForChannel ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendMessageForChannel_result ip
    P.maybe (P.return ()) X.throw (sendMessageForChannel_result_e res)
    P.return $ sendMessageForChannel_result_success res
activeBuddySubscriberCount (ip,op) = do
  send_activeBuddySubscriberCount op
  recv_activeBuddySubscriberCount ip
send_activeBuddySubscriberCount op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("activeBuddySubscriberCount", T.M_CALL, seqn) $
    write_ActiveBuddySubscriberCount_args op (ActiveBuddySubscriberCount_args{})
recv_activeBuddySubscriberCount ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ActiveBuddySubscriberCount_result ip
    P.maybe (P.return ()) X.throw (activeBuddySubscriberCount_result_e res)
    P.return $ activeBuddySubscriberCount_result_success res
getCallCreditPurchaseHistory (ip,op) arg_request = do
  send_getCallCreditPurchaseHistory op arg_request
  recv_getCallCreditPurchaseHistory ip
send_getCallCreditPurchaseHistory op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getCallCreditPurchaseHistory", T.M_CALL, seqn) $
    write_GetCallCreditPurchaseHistory_args op (GetCallCreditPurchaseHistory_args{getCallCreditPurchaseHistory_args_request=arg_request})
recv_getCallCreditPurchaseHistory ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetCallCreditPurchaseHistory_result ip
    P.maybe (P.return ()) X.throw (getCallCreditPurchaseHistory_result_e res)
    P.return $ getCallCreditPurchaseHistory_result_success res
isRoomMember (ip,op) arg_roomId = do
  send_isRoomMember op arg_roomId
  recv_isRoomMember ip
send_isRoomMember op arg_roomId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("isRoomMember", T.M_CALL, seqn) $
    write_IsRoomMember_args op (IsRoomMember_args{isRoomMember_args_roomId=arg_roomId})
recv_isRoomMember ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_IsRoomMember_result ip
    P.maybe (P.return ()) X.throw (isRoomMember_result_e res)
    P.return $ isRoomMember_result_success res
sendSystemOAMessage (ip,op) arg_message = do
  send_sendSystemOAMessage op arg_message
  recv_sendSystemOAMessage ip
send_sendSystemOAMessage op arg_message = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendSystemOAMessage", T.M_CALL, seqn) $
    write_SendSystemOAMessage_args op (SendSystemOAMessage_args{sendSystemOAMessage_args_message=arg_message})
recv_sendSystemOAMessage ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendSystemOAMessage_result ip
    P.maybe (P.return ()) X.throw (sendSystemOAMessage_result_e res)
    P.return $ sendSystemOAMessage_result_success res
acquirePaidCallRoute (ip,op) arg_paidCallType arg_dialedNumber arg_language arg_networkCode arg_disableCallerId arg_referer arg_adSessionId = do
  send_acquirePaidCallRoute op arg_paidCallType arg_dialedNumber arg_language arg_networkCode arg_disableCallerId arg_referer arg_adSessionId
  recv_acquirePaidCallRoute ip
send_acquirePaidCallRoute op arg_paidCallType arg_dialedNumber arg_language arg_networkCode arg_disableCallerId arg_referer arg_adSessionId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("acquirePaidCallRoute", T.M_CALL, seqn) $
    write_AcquirePaidCallRoute_args op (AcquirePaidCallRoute_args{acquirePaidCallRoute_args_paidCallType=arg_paidCallType,acquirePaidCallRoute_args_dialedNumber=arg_dialedNumber,acquirePaidCallRoute_args_language=arg_language,acquirePaidCallRoute_args_networkCode=arg_networkCode,acquirePaidCallRoute_args_disableCallerId=arg_disableCallerId,acquirePaidCallRoute_args_referer=arg_referer,acquirePaidCallRoute_args_adSessionId=arg_adSessionId})
recv_acquirePaidCallRoute ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_AcquirePaidCallRoute_result ip
    P.maybe (P.return ()) X.throw (acquirePaidCallRoute_result_e res)
    P.return $ acquirePaidCallRoute_result_success res
getGroupsForChannel (ip,op) arg_groupIds = do
  send_getGroupsForChannel op arg_groupIds
  recv_getGroupsForChannel ip
send_getGroupsForChannel op arg_groupIds = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getGroupsForChannel", T.M_CALL, seqn) $
    write_GetGroupsForChannel_args op (GetGroupsForChannel_args{getGroupsForChannel_args_groupIds=arg_groupIds})
recv_getGroupsForChannel ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetGroupsForChannel_result ip
    P.maybe (P.return ()) X.throw (getGroupsForChannel_result_e res)
    P.return $ getGroupsForChannel_result_success res
getUserCreateTime (ip,op) = do
  send_getUserCreateTime op
  recv_getUserCreateTime ip
send_getUserCreateTime op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getUserCreateTime", T.M_CALL, seqn) $
    write_GetUserCreateTime_args op (GetUserCreateTime_args{})
recv_getUserCreateTime ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetUserCreateTime_result ip
    P.maybe (P.return ()) X.throw (getUserCreateTime_result_e res)
    P.return $ getUserCreateTime_result_success res
registerChannelCP (ip,op) arg_cpId arg_registerPassword = do
  send_registerChannelCP op arg_cpId arg_registerPassword
  recv_registerChannelCP ip
send_registerChannelCP op arg_cpId arg_registerPassword = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("registerChannelCP", T.M_CALL, seqn) $
    write_RegisterChannelCP_args op (RegisterChannelCP_args{registerChannelCP_args_cpId=arg_cpId,registerChannelCP_args_registerPassword=arg_registerPassword})
recv_registerChannelCP ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RegisterChannelCP_result ip
    P.maybe (P.return ()) X.throw (registerChannelCP_result_e res)
    P.return $ registerChannelCP_result_success res
reserveCallCreditPurchase (ip,op) arg_request = do
  send_reserveCallCreditPurchase op arg_request
  recv_reserveCallCreditPurchase ip
send_reserveCallCreditPurchase op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("reserveCallCreditPurchase", T.M_CALL, seqn) $
    write_ReserveCallCreditPurchase_args op (ReserveCallCreditPurchase_args{reserveCallCreditPurchase_args_request=arg_request})
recv_reserveCallCreditPurchase ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ReserveCallCreditPurchase_result ip
    P.maybe (P.return ()) X.throw (reserveCallCreditPurchase_result_e res)
    P.return $ reserveCallCreditPurchase_result_success res
acquirePaidCallCurrencyExchangeRate (ip,op) arg_language = do
  send_acquirePaidCallCurrencyExchangeRate op arg_language
  recv_acquirePaidCallCurrencyExchangeRate ip
send_acquirePaidCallCurrencyExchangeRate op arg_language = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("acquirePaidCallCurrencyExchangeRate", T.M_CALL, seqn) $
    write_AcquirePaidCallCurrencyExchangeRate_args op (AcquirePaidCallCurrencyExchangeRate_args{acquirePaidCallCurrencyExchangeRate_args_language=arg_language})
recv_acquirePaidCallCurrencyExchangeRate ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_AcquirePaidCallCurrencyExchangeRate_result ip
    P.maybe (P.return ()) X.throw (acquirePaidCallCurrencyExchangeRate_result_e res)
    P.return $ acquirePaidCallCurrencyExchangeRate_result_success res
getRoomMemberMidsForAppPlatform (ip,op) arg_roomId = do
  send_getRoomMemberMidsForAppPlatform op arg_roomId
  recv_getRoomMemberMidsForAppPlatform ip
send_getRoomMemberMidsForAppPlatform op arg_roomId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getRoomMemberMidsForAppPlatform", T.M_CALL, seqn) $
    write_GetRoomMemberMidsForAppPlatform_args op (GetRoomMemberMidsForAppPlatform_args{getRoomMemberMidsForAppPlatform_args_roomId=arg_roomId})
recv_getRoomMemberMidsForAppPlatform ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetRoomMemberMidsForAppPlatform_result ip
    P.maybe (P.return ()) X.throw (getRoomMemberMidsForAppPlatform_result_e res)
    P.return $ getRoomMemberMidsForAppPlatform_result_success res
getPaidCallBalanceList (ip,op) arg_language = do
  send_getPaidCallBalanceList op arg_language
  recv_getPaidCallBalanceList ip
send_getPaidCallBalanceList op arg_language = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getPaidCallBalanceList", T.M_CALL, seqn) $
    write_GetPaidCallBalanceList_args op (GetPaidCallBalanceList_args{getPaidCallBalanceList_args_language=arg_language})
recv_getPaidCallBalanceList ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetPaidCallBalanceList_result ip
    P.maybe (P.return ()) X.throw (getPaidCallBalanceList_result_e res)
    P.return $ getPaidCallBalanceList_result_success res
getPersonalInfos (ip,op) arg_requiredPersonalInfos = do
  send_getPersonalInfos op arg_requiredPersonalInfos
  recv_getPersonalInfos ip
send_getPersonalInfos op arg_requiredPersonalInfos = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getPersonalInfos", T.M_CALL, seqn) $
    write_GetPersonalInfos_args op (GetPersonalInfos_args{getPersonalInfos_args_requiredPersonalInfos=arg_requiredPersonalInfos})
recv_getPersonalInfos ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetPersonalInfos_result ip
    P.maybe (P.return ()) X.throw (getPersonalInfos_result_e res)
    P.return $ getPersonalInfos_result_success res
getPrimaryClientsForChannel (ip,op) arg_userMids = do
  send_getPrimaryClientsForChannel op arg_userMids
  recv_getPrimaryClientsForChannel ip
send_getPrimaryClientsForChannel op arg_userMids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getPrimaryClientsForChannel", T.M_CALL, seqn) $
    write_GetPrimaryClientsForChannel_args op (GetPrimaryClientsForChannel_args{getPrimaryClientsForChannel_args_userMids=arg_userMids})
recv_getPrimaryClientsForChannel ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetPrimaryClientsForChannel_result ip
    P.maybe (P.return ()) X.throw (getPrimaryClientsForChannel_result_e res)
    P.return $ getPrimaryClientsForChannel_result_success res
addBuddyToContact (ip,op) arg_buddyMid = do
  send_addBuddyToContact op arg_buddyMid
  recv_addBuddyToContact ip
send_addBuddyToContact op arg_buddyMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("addBuddyToContact", T.M_CALL, seqn) $
    write_AddBuddyToContact_args op (AddBuddyToContact_args{addBuddyToContact_args_buddyMid=arg_buddyMid})
recv_addBuddyToContact ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_AddBuddyToContact_result ip
    P.maybe (P.return ()) X.throw (addBuddyToContact_result_e res)
    P.return $ addBuddyToContact_result_success res
getGroupMemberMidsForAppPlatform (ip,op) arg_groupId = do
  send_getGroupMemberMidsForAppPlatform op arg_groupId
  recv_getGroupMemberMidsForAppPlatform ip
send_getGroupMemberMidsForAppPlatform op arg_groupId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getGroupMemberMidsForAppPlatform", T.M_CALL, seqn) $
    write_GetGroupMemberMidsForAppPlatform_args op (GetGroupMemberMidsForAppPlatform_args{getGroupMemberMidsForAppPlatform_args_groupId=arg_groupId})
recv_getGroupMemberMidsForAppPlatform ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetGroupMemberMidsForAppPlatform_result ip
    P.maybe (P.return ()) X.throw (getGroupMemberMidsForAppPlatform_result_e res)
    P.return $ getGroupMemberMidsForAppPlatform_result_success res
getUserLanguage (ip,op) = do
  send_getUserLanguage op
  recv_getUserLanguage ip
send_getUserLanguage op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getUserLanguage", T.M_CALL, seqn) $
    write_GetUserLanguage_args op (GetUserLanguage_args{})
recv_getUserLanguage ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetUserLanguage_result ip
    P.maybe (P.return ()) X.throw (getUserLanguage_result_e res)
    P.return $ getUserLanguage_result_success res
lookupPaidCall (ip,op) arg_dialedNumber arg_language arg_referer = do
  send_lookupPaidCall op arg_dialedNumber arg_language arg_referer
  recv_lookupPaidCall ip
send_lookupPaidCall op arg_dialedNumber arg_language arg_referer = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("lookupPaidCall", T.M_CALL, seqn) $
    write_LookupPaidCall_args op (LookupPaidCall_args{lookupPaidCall_args_dialedNumber=arg_dialedNumber,lookupPaidCall_args_language=arg_language,lookupPaidCall_args_referer=arg_referer})
recv_lookupPaidCall ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_LookupPaidCall_result ip
    P.maybe (P.return ()) X.throw (lookupPaidCall_result_e res)
    P.return $ lookupPaidCall_result_success res
getExtendedProfile (ip,op) = do
  send_getExtendedProfile op
  recv_getExtendedProfile ip
send_getExtendedProfile op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getExtendedProfile", T.M_CALL, seqn) $
    write_GetExtendedProfile_args op (GetExtendedProfile_args{})
recv_getExtendedProfile ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetExtendedProfile_result ip
    P.maybe (P.return ()) X.throw (getExtendedProfile_result_e res)
    P.return $ getExtendedProfile_result_success res
getReverseCompactContacts (ip,op) arg_ids = do
  send_getReverseCompactContacts op arg_ids
  recv_getReverseCompactContacts ip
send_getReverseCompactContacts op arg_ids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getReverseCompactContacts", T.M_CALL, seqn) $
    write_GetReverseCompactContacts_args op (GetReverseCompactContacts_args{getReverseCompactContacts_args_ids=arg_ids})
recv_getReverseCompactContacts ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetReverseCompactContacts_result ip
    P.maybe (P.return ()) X.throw (getReverseCompactContacts_result_e res)
    P.return $ getReverseCompactContacts_result_success res
getPaidCallAdStatus (ip,op) = do
  send_getPaidCallAdStatus op
  recv_getPaidCallAdStatus ip
send_getPaidCallAdStatus op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getPaidCallAdStatus", T.M_CALL, seqn) $
    write_GetPaidCallAdStatus_args op (GetPaidCallAdStatus_args{})
recv_getPaidCallAdStatus ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetPaidCallAdStatus_result ip
    P.maybe (P.return ()) X.throw (getPaidCallAdStatus_result_e res)
    P.return $ getPaidCallAdStatus_result_success res
findContactByUseridWithoutAbuseBlockForChannel (ip,op) arg_userid = do
  send_findContactByUseridWithoutAbuseBlockForChannel op arg_userid
  recv_findContactByUseridWithoutAbuseBlockForChannel ip
send_findContactByUseridWithoutAbuseBlockForChannel op arg_userid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("findContactByUseridWithoutAbuseBlockForChannel", T.M_CALL, seqn) $
    write_FindContactByUseridWithoutAbuseBlockForChannel_args op (FindContactByUseridWithoutAbuseBlockForChannel_args{findContactByUseridWithoutAbuseBlockForChannel_args_userid=arg_userid})
recv_findContactByUseridWithoutAbuseBlockForChannel ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FindContactByUseridWithoutAbuseBlockForChannel_result ip
    P.maybe (P.return ()) X.throw (findContactByUseridWithoutAbuseBlockForChannel_result_e res)
    P.return $ findContactByUseridWithoutAbuseBlockForChannel_result_success res
getGroupMemberMids (ip,op) arg_groupId = do
  send_getGroupMemberMids op arg_groupId
  recv_getGroupMemberMids ip
send_getGroupMemberMids op arg_groupId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getGroupMemberMids", T.M_CALL, seqn) $
    write_GetGroupMemberMids_args op (GetGroupMemberMids_args{getGroupMemberMids_args_groupId=arg_groupId})
recv_getGroupMemberMids ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetGroupMemberMids_result ip
    P.maybe (P.return ()) X.throw (getGroupMemberMids_result_e res)
    P.return $ getGroupMemberMids_result_success res
sendMessageWithoutRelationship (ip,op) arg_message = do
  send_sendMessageWithoutRelationship op arg_message
  recv_sendMessageWithoutRelationship ip
send_sendMessageWithoutRelationship op arg_message = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendMessageWithoutRelationship", T.M_CALL, seqn) $
    write_SendMessageWithoutRelationship_args op (SendMessageWithoutRelationship_args{sendMessageWithoutRelationship_args_message=arg_message})
recv_sendMessageWithoutRelationship ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendMessageWithoutRelationship_result ip
    P.maybe (P.return ()) X.throw (sendMessageWithoutRelationship_result_e res)
    P.return $ sendMessageWithoutRelationship_result_success res
displayBuddySubscriberCountInBulk (ip,op) arg_mids = do
  send_displayBuddySubscriberCountInBulk op arg_mids
  recv_displayBuddySubscriberCountInBulk ip
send_displayBuddySubscriberCountInBulk op arg_mids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("displayBuddySubscriberCountInBulk", T.M_CALL, seqn) $
    write_DisplayBuddySubscriberCountInBulk_args op (DisplayBuddySubscriberCountInBulk_args{displayBuddySubscriberCountInBulk_args_mids=arg_mids})
recv_displayBuddySubscriberCountInBulk ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_DisplayBuddySubscriberCountInBulk_result ip
    P.maybe (P.return ()) X.throw (displayBuddySubscriberCountInBulk_result_e res)
    P.return $ displayBuddySubscriberCountInBulk_result_success res
lookupRoomMembers (ip,op) arg_roomId arg_mids = do
  send_lookupRoomMembers op arg_roomId arg_mids
  recv_lookupRoomMembers ip
send_lookupRoomMembers op arg_roomId arg_mids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("lookupRoomMembers", T.M_CALL, seqn) $
    write_LookupRoomMembers_args op (LookupRoomMembers_args{lookupRoomMembers_args_roomId=arg_roomId,lookupRoomMembers_args_mids=arg_mids})
recv_lookupRoomMembers ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_LookupRoomMembers_result ip
    P.maybe (P.return ()) X.throw (lookupRoomMembers_result_e res)
    P.return $ lookupRoomMembers_result_success res
getFavoriteMidsForChannel (ip,op) = do
  send_getFavoriteMidsForChannel op
  recv_getFavoriteMidsForChannel ip
send_getFavoriteMidsForChannel op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getFavoriteMidsForChannel", T.M_CALL, seqn) $
    write_GetFavoriteMidsForChannel_args op (GetFavoriteMidsForChannel_args{})
recv_getFavoriteMidsForChannel ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetFavoriteMidsForChannel_result ip
    P.maybe (P.return ()) X.throw (getFavoriteMidsForChannel_result_e res)
    P.return $ getFavoriteMidsForChannel_result_success res
getAllContactIdsForChannel (ip,op) = do
  send_getAllContactIdsForChannel op
  recv_getAllContactIdsForChannel ip
send_getAllContactIdsForChannel op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getAllContactIdsForChannel", T.M_CALL, seqn) $
    write_GetAllContactIdsForChannel_args op (GetAllContactIdsForChannel_args{})
recv_getAllContactIdsForChannel ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetAllContactIdsForChannel_result ip
    P.maybe (P.return ()) X.throw (getAllContactIdsForChannel_result_e res)
    P.return $ getAllContactIdsForChannel_result_success res
displayBuddySubscriberCount (ip,op) = do
  send_displayBuddySubscriberCount op
  recv_displayBuddySubscriberCount ip
send_displayBuddySubscriberCount op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("displayBuddySubscriberCount", T.M_CALL, seqn) $
    write_DisplayBuddySubscriberCount_args op (DisplayBuddySubscriberCount_args{})
recv_displayBuddySubscriberCount ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_DisplayBuddySubscriberCount_result ip
    P.maybe (P.return ()) X.throw (displayBuddySubscriberCount_result_e res)
    P.return $ displayBuddySubscriberCount_result_success res
getProfileForChannel (ip,op) = do
  send_getProfileForChannel op
  recv_getProfileForChannel ip
send_getProfileForChannel op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getProfileForChannel", T.M_CALL, seqn) $
    write_GetProfileForChannel_args op (GetProfileForChannel_args{})
recv_getProfileForChannel ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetProfileForChannel_result ip
    P.maybe (P.return ()) X.throw (getProfileForChannel_result_e res)
    P.return $ getProfileForChannel_result_success res
getUserTickets (ip,op) arg_userMids = do
  send_getUserTickets op arg_userMids
  recv_getUserTickets ip
send_getUserTickets op arg_userMids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getUserTickets", T.M_CALL, seqn) $
    write_GetUserTickets_args op (GetUserTickets_args{getUserTickets_args_userMids=arg_userMids})
recv_getUserTickets ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetUserTickets_result ip
    P.maybe (P.return ()) X.throw (getUserTickets_result_e res)
    P.return $ getUserTickets_result_success res
getOAFriendMids (ip,op) = do
  send_getOAFriendMids op
  recv_getOAFriendMids ip
send_getOAFriendMids op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getOAFriendMids", T.M_CALL, seqn) $
    write_GetOAFriendMids_args op (GetOAFriendMids_args{})
recv_getOAFriendMids ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetOAFriendMids_result ip
    P.maybe (P.return ()) X.throw (getOAFriendMids_result_e res)
    P.return $ getOAFriendMids_result_success res
searchPaidCallUserRate (ip,op) arg_countryCode arg_language = do
  send_searchPaidCallUserRate op arg_countryCode arg_language
  recv_searchPaidCallUserRate ip
send_searchPaidCallUserRate op arg_countryCode arg_language = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("searchPaidCallUserRate", T.M_CALL, seqn) $
    write_SearchPaidCallUserRate_args op (SearchPaidCallUserRate_args{searchPaidCallUserRate_args_countryCode=arg_countryCode,searchPaidCallUserRate_args_language=arg_language})
recv_searchPaidCallUserRate ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SearchPaidCallUserRate_result ip
    P.maybe (P.return ()) X.throw (searchPaidCallUserRate_result_e res)
    P.return $ searchPaidCallUserRate_result_success res
getJoinedGroupIdsForChannel (ip,op) = do
  send_getJoinedGroupIdsForChannel op
  recv_getJoinedGroupIdsForChannel ip
send_getJoinedGroupIdsForChannel op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getJoinedGroupIdsForChannel", T.M_CALL, seqn) $
    write_GetJoinedGroupIdsForChannel_args op (GetJoinedGroupIdsForChannel_args{})
recv_getJoinedGroupIdsForChannel ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetJoinedGroupIdsForChannel_result ip
    P.maybe (P.return ()) X.throw (getJoinedGroupIdsForChannel_result_e res)
    P.return $ getJoinedGroupIdsForChannel_result_success res
acquireGroupCallRoute (ip,op) arg_chatMid arg_mediaType = do
  send_acquireGroupCallRoute op arg_chatMid arg_mediaType
  recv_acquireGroupCallRoute ip
send_acquireGroupCallRoute op arg_chatMid arg_mediaType = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("acquireGroupCallRoute", T.M_CALL, seqn) $
    write_AcquireGroupCallRoute_args op (AcquireGroupCallRoute_args{acquireGroupCallRoute_args_chatMid=arg_chatMid,acquireGroupCallRoute_args_mediaType=arg_mediaType})
recv_acquireGroupCallRoute ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_AcquireGroupCallRoute_result ip
    P.maybe (P.return ()) X.throw (acquireGroupCallRoute_result_e res)
    P.return $ acquireGroupCallRoute_result_success res
getUserMidsWhoAddedMe (ip,op) = do
  send_getUserMidsWhoAddedMe op
  recv_getUserMidsWhoAddedMe ip
send_getUserMidsWhoAddedMe op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getUserMidsWhoAddedMe", T.M_CALL, seqn) $
    write_GetUserMidsWhoAddedMe_args op (GetUserMidsWhoAddedMe_args{})
recv_getUserMidsWhoAddedMe ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetUserMidsWhoAddedMe_result ip
    P.maybe (P.return ()) X.throw (getUserMidsWhoAddedMe_result_e res)
    P.return $ getUserMidsWhoAddedMe_result_success res
getIdentityCredential (ip,op) = do
  send_getIdentityCredential op
  recv_getIdentityCredential ip
send_getIdentityCredential op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getIdentityCredential", T.M_CALL, seqn) $
    write_GetIdentityCredential_args op (GetIdentityCredential_args{})
recv_getIdentityCredential ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetIdentityCredential_result ip
    P.maybe (P.return ()) X.throw (getIdentityCredential_result_e res)
    P.return $ getIdentityCredential_result_success res
addOperationForChannel (ip,op) arg_opType arg_param1 arg_param2 arg_param3 = do
  send_addOperationForChannel op arg_opType arg_param1 arg_param2 arg_param3
  recv_addOperationForChannel ip
send_addOperationForChannel op arg_opType arg_param1 arg_param2 arg_param3 = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("addOperationForChannel", T.M_CALL, seqn) $
    write_AddOperationForChannel_args op (AddOperationForChannel_args{addOperationForChannel_args_opType=arg_opType,addOperationForChannel_args_param1=arg_param1,addOperationForChannel_args_param2=arg_param2,addOperationForChannel_args_param3=arg_param3})
recv_addOperationForChannel ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_AddOperationForChannel_result ip
    P.maybe (P.return ()) X.throw (addOperationForChannel_result_e res)
    P.return ()
getSimpleChannelContacts (ip,op) arg_ids arg_statusSticonFallbackDisabled = do
  send_getSimpleChannelContacts op arg_ids arg_statusSticonFallbackDisabled
  recv_getSimpleChannelContacts ip
send_getSimpleChannelContacts op arg_ids arg_statusSticonFallbackDisabled = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSimpleChannelContacts", T.M_CALL, seqn) $
    write_GetSimpleChannelContacts_args op (GetSimpleChannelContacts_args{getSimpleChannelContacts_args_ids=arg_ids,getSimpleChannelContacts_args_statusSticonFallbackDisabled=arg_statusSticonFallbackDisabled})
recv_getSimpleChannelContacts ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSimpleChannelContacts_result ip
    P.maybe (P.return ()) X.throw (getSimpleChannelContacts_result_e res)
    P.return $ getSimpleChannelContacts_result_success res
getUserLastSentMessageTimeStamp (ip,op) arg_mid = do
  send_getUserLastSentMessageTimeStamp op arg_mid
  recv_getUserLastSentMessageTimeStamp ip
send_getUserLastSentMessageTimeStamp op arg_mid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getUserLastSentMessageTimeStamp", T.M_CALL, seqn) $
    write_GetUserLastSentMessageTimeStamp_args op (GetUserLastSentMessageTimeStamp_args{getUserLastSentMessageTimeStamp_args_mid=arg_mid})
recv_getUserLastSentMessageTimeStamp ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetUserLastSentMessageTimeStamp_result ip
    P.maybe (P.return ()) X.throw (getUserLastSentMessageTimeStamp_result_e res)
    P.return $ getUserLastSentMessageTimeStamp_result_success res
