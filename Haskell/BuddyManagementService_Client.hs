{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.14.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module BuddyManagementService_Client(addBuddyMember,addBuddyMembers,blockBuddyMember,commitSendMessagesToAll,commitSendMessagesToMids,containsBuddyMember,downloadMessageContent,downloadMessageContentPreview,downloadProfileImage,downloadProfileImagePreview,getActiveMemberCountByBuddyMid,getActiveMemberMidsByBuddyMid,getAllBuddyMembers,getBlockedBuddyMembers,getBlockerCountByBuddyMid,getBuddyDetailByMid,getBuddyProfile,getContactTicket,getMemberCountByBuddyMid,getSendBuddyMessageResult,getSetBuddyOnAirResult,getUpdateBuddyProfileResult,isBuddyOnAirByMid,linkAndSendBuddyContentMessageToAllAsync,linkAndSendBuddyContentMessageToMids,notifyBuddyBlocked,notifyBuddyUnblocked,registerBuddy,registerBuddyAdmin,reissueContactTicket,removeBuddyMember,removeBuddyMembers,sendBuddyContentMessageToAll,sendBuddyContentMessageToAllAsync,sendBuddyContentMessageToMids,sendBuddyContentMessageToMidsAsync,sendBuddyMessageToAll,sendBuddyMessageToAllAsync,sendBuddyMessageToMids,sendBuddyMessageToMidsAsync,sendIndividualEventToAllAsync,setBuddyOnAir,setBuddyOnAirAsync,storeMessage,unblockBuddyMember,unregisterBuddy,unregisterBuddyAdmin,updateBuddyAdminProfileAttribute,updateBuddyAdminProfileImage,updateBuddyProfileAttributes,updateBuddyProfileAttributesAsync,updateBuddyProfileImage,updateBuddyProfileImageAsync,updateBuddySearchId,updateBuddySettings,uploadBuddyContent) where
import qualified Data.IORef as R
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Line_Types
import BuddyManagementService
seqid = R.newIORef 0
addBuddyMember (ip,op) arg_requestId arg_userMid = do
  send_addBuddyMember op arg_requestId arg_userMid
  recv_addBuddyMember ip
send_addBuddyMember op arg_requestId arg_userMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("addBuddyMember", T.M_CALL, seqn) $
    write_AddBuddyMember_args op (AddBuddyMember_args{addBuddyMember_args_requestId=arg_requestId,addBuddyMember_args_userMid=arg_userMid})
recv_addBuddyMember ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_AddBuddyMember_result ip
    P.maybe (P.return ()) X.throw (addBuddyMember_result_e res)
    P.return ()
addBuddyMembers (ip,op) arg_requestId arg_userMids = do
  send_addBuddyMembers op arg_requestId arg_userMids
  recv_addBuddyMembers ip
send_addBuddyMembers op arg_requestId arg_userMids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("addBuddyMembers", T.M_CALL, seqn) $
    write_AddBuddyMembers_args op (AddBuddyMembers_args{addBuddyMembers_args_requestId=arg_requestId,addBuddyMembers_args_userMids=arg_userMids})
recv_addBuddyMembers ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_AddBuddyMembers_result ip
    P.maybe (P.return ()) X.throw (addBuddyMembers_result_e res)
    P.return ()
blockBuddyMember (ip,op) arg_requestId arg_mid = do
  send_blockBuddyMember op arg_requestId arg_mid
  recv_blockBuddyMember ip
send_blockBuddyMember op arg_requestId arg_mid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("blockBuddyMember", T.M_CALL, seqn) $
    write_BlockBuddyMember_args op (BlockBuddyMember_args{blockBuddyMember_args_requestId=arg_requestId,blockBuddyMember_args_mid=arg_mid})
recv_blockBuddyMember ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_BlockBuddyMember_result ip
    P.maybe (P.return ()) X.throw (blockBuddyMember_result_e res)
    P.return ()
commitSendMessagesToAll (ip,op) arg_requestIdList = do
  send_commitSendMessagesToAll op arg_requestIdList
  recv_commitSendMessagesToAll ip
send_commitSendMessagesToAll op arg_requestIdList = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("commitSendMessagesToAll", T.M_CALL, seqn) $
    write_CommitSendMessagesToAll_args op (CommitSendMessagesToAll_args{commitSendMessagesToAll_args_requestIdList=arg_requestIdList})
recv_commitSendMessagesToAll ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CommitSendMessagesToAll_result ip
    P.maybe (P.return ()) X.throw (commitSendMessagesToAll_result_e res)
    P.return $ commitSendMessagesToAll_result_success res
commitSendMessagesToMids (ip,op) arg_requestIdList arg_mids = do
  send_commitSendMessagesToMids op arg_requestIdList arg_mids
  recv_commitSendMessagesToMids ip
send_commitSendMessagesToMids op arg_requestIdList arg_mids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("commitSendMessagesToMids", T.M_CALL, seqn) $
    write_CommitSendMessagesToMids_args op (CommitSendMessagesToMids_args{commitSendMessagesToMids_args_requestIdList=arg_requestIdList,commitSendMessagesToMids_args_mids=arg_mids})
recv_commitSendMessagesToMids ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CommitSendMessagesToMids_result ip
    P.maybe (P.return ()) X.throw (commitSendMessagesToMids_result_e res)
    P.return $ commitSendMessagesToMids_result_success res
containsBuddyMember (ip,op) arg_requestId arg_userMid = do
  send_containsBuddyMember op arg_requestId arg_userMid
  recv_containsBuddyMember ip
send_containsBuddyMember op arg_requestId arg_userMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("containsBuddyMember", T.M_CALL, seqn) $
    write_ContainsBuddyMember_args op (ContainsBuddyMember_args{containsBuddyMember_args_requestId=arg_requestId,containsBuddyMember_args_userMid=arg_userMid})
recv_containsBuddyMember ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ContainsBuddyMember_result ip
    P.maybe (P.return ()) X.throw (containsBuddyMember_result_e res)
    P.return $ containsBuddyMember_result_success res
downloadMessageContent (ip,op) arg_requestId arg_messageId = do
  send_downloadMessageContent op arg_requestId arg_messageId
  recv_downloadMessageContent ip
send_downloadMessageContent op arg_requestId arg_messageId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("downloadMessageContent", T.M_CALL, seqn) $
    write_DownloadMessageContent_args op (DownloadMessageContent_args{downloadMessageContent_args_requestId=arg_requestId,downloadMessageContent_args_messageId=arg_messageId})
recv_downloadMessageContent ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_DownloadMessageContent_result ip
    P.maybe (P.return ()) X.throw (downloadMessageContent_result_e res)
    P.return $ downloadMessageContent_result_success res
downloadMessageContentPreview (ip,op) arg_requestId arg_messageId = do
  send_downloadMessageContentPreview op arg_requestId arg_messageId
  recv_downloadMessageContentPreview ip
send_downloadMessageContentPreview op arg_requestId arg_messageId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("downloadMessageContentPreview", T.M_CALL, seqn) $
    write_DownloadMessageContentPreview_args op (DownloadMessageContentPreview_args{downloadMessageContentPreview_args_requestId=arg_requestId,downloadMessageContentPreview_args_messageId=arg_messageId})
recv_downloadMessageContentPreview ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_DownloadMessageContentPreview_result ip
    P.maybe (P.return ()) X.throw (downloadMessageContentPreview_result_e res)
    P.return $ downloadMessageContentPreview_result_success res
downloadProfileImage (ip,op) arg_requestId = do
  send_downloadProfileImage op arg_requestId
  recv_downloadProfileImage ip
send_downloadProfileImage op arg_requestId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("downloadProfileImage", T.M_CALL, seqn) $
    write_DownloadProfileImage_args op (DownloadProfileImage_args{downloadProfileImage_args_requestId=arg_requestId})
recv_downloadProfileImage ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_DownloadProfileImage_result ip
    P.maybe (P.return ()) X.throw (downloadProfileImage_result_e res)
    P.return $ downloadProfileImage_result_success res
downloadProfileImagePreview (ip,op) arg_requestId = do
  send_downloadProfileImagePreview op arg_requestId
  recv_downloadProfileImagePreview ip
send_downloadProfileImagePreview op arg_requestId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("downloadProfileImagePreview", T.M_CALL, seqn) $
    write_DownloadProfileImagePreview_args op (DownloadProfileImagePreview_args{downloadProfileImagePreview_args_requestId=arg_requestId})
recv_downloadProfileImagePreview ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_DownloadProfileImagePreview_result ip
    P.maybe (P.return ()) X.throw (downloadProfileImagePreview_result_e res)
    P.return $ downloadProfileImagePreview_result_success res
getActiveMemberCountByBuddyMid (ip,op) arg_buddyMid = do
  send_getActiveMemberCountByBuddyMid op arg_buddyMid
  recv_getActiveMemberCountByBuddyMid ip
send_getActiveMemberCountByBuddyMid op arg_buddyMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getActiveMemberCountByBuddyMid", T.M_CALL, seqn) $
    write_GetActiveMemberCountByBuddyMid_args op (GetActiveMemberCountByBuddyMid_args{getActiveMemberCountByBuddyMid_args_buddyMid=arg_buddyMid})
recv_getActiveMemberCountByBuddyMid ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetActiveMemberCountByBuddyMid_result ip
    P.maybe (P.return ()) X.throw (getActiveMemberCountByBuddyMid_result_e res)
    P.return $ getActiveMemberCountByBuddyMid_result_success res
getActiveMemberMidsByBuddyMid (ip,op) arg_buddyMid = do
  send_getActiveMemberMidsByBuddyMid op arg_buddyMid
  recv_getActiveMemberMidsByBuddyMid ip
send_getActiveMemberMidsByBuddyMid op arg_buddyMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getActiveMemberMidsByBuddyMid", T.M_CALL, seqn) $
    write_GetActiveMemberMidsByBuddyMid_args op (GetActiveMemberMidsByBuddyMid_args{getActiveMemberMidsByBuddyMid_args_buddyMid=arg_buddyMid})
recv_getActiveMemberMidsByBuddyMid ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetActiveMemberMidsByBuddyMid_result ip
    P.maybe (P.return ()) X.throw (getActiveMemberMidsByBuddyMid_result_e res)
    P.return $ getActiveMemberMidsByBuddyMid_result_success res
getAllBuddyMembers (ip,op) = do
  send_getAllBuddyMembers op
  recv_getAllBuddyMembers ip
send_getAllBuddyMembers op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getAllBuddyMembers", T.M_CALL, seqn) $
    write_GetAllBuddyMembers_args op (GetAllBuddyMembers_args{})
recv_getAllBuddyMembers ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetAllBuddyMembers_result ip
    P.maybe (P.return ()) X.throw (getAllBuddyMembers_result_e res)
    P.return $ getAllBuddyMembers_result_success res
getBlockedBuddyMembers (ip,op) = do
  send_getBlockedBuddyMembers op
  recv_getBlockedBuddyMembers ip
send_getBlockedBuddyMembers op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getBlockedBuddyMembers", T.M_CALL, seqn) $
    write_GetBlockedBuddyMembers_args op (GetBlockedBuddyMembers_args{})
recv_getBlockedBuddyMembers ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetBlockedBuddyMembers_result ip
    P.maybe (P.return ()) X.throw (getBlockedBuddyMembers_result_e res)
    P.return $ getBlockedBuddyMembers_result_success res
getBlockerCountByBuddyMid (ip,op) arg_buddyMid = do
  send_getBlockerCountByBuddyMid op arg_buddyMid
  recv_getBlockerCountByBuddyMid ip
send_getBlockerCountByBuddyMid op arg_buddyMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getBlockerCountByBuddyMid", T.M_CALL, seqn) $
    write_GetBlockerCountByBuddyMid_args op (GetBlockerCountByBuddyMid_args{getBlockerCountByBuddyMid_args_buddyMid=arg_buddyMid})
recv_getBlockerCountByBuddyMid ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetBlockerCountByBuddyMid_result ip
    P.maybe (P.return ()) X.throw (getBlockerCountByBuddyMid_result_e res)
    P.return $ getBlockerCountByBuddyMid_result_success res
getBuddyDetailByMid (ip,op) arg_buddyMid = do
  send_getBuddyDetailByMid op arg_buddyMid
  recv_getBuddyDetailByMid ip
send_getBuddyDetailByMid op arg_buddyMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getBuddyDetailByMid", T.M_CALL, seqn) $
    write_GetBuddyDetailByMid_args op (GetBuddyDetailByMid_args{getBuddyDetailByMid_args_buddyMid=arg_buddyMid})
recv_getBuddyDetailByMid ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetBuddyDetailByMid_result ip
    P.maybe (P.return ()) X.throw (getBuddyDetailByMid_result_e res)
    P.return $ getBuddyDetailByMid_result_success res
getBuddyProfile (ip,op) = do
  send_getBuddyProfile op
  recv_getBuddyProfile ip
send_getBuddyProfile op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getBuddyProfile", T.M_CALL, seqn) $
    write_GetBuddyProfile_args op (GetBuddyProfile_args{})
recv_getBuddyProfile ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetBuddyProfile_result ip
    P.maybe (P.return ()) X.throw (getBuddyProfile_result_e res)
    P.return $ getBuddyProfile_result_success res
getContactTicket (ip,op) = do
  send_getContactTicket op
  recv_getContactTicket ip
send_getContactTicket op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getContactTicket", T.M_CALL, seqn) $
    write_GetContactTicket_args op (GetContactTicket_args{})
recv_getContactTicket ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetContactTicket_result ip
    P.maybe (P.return ()) X.throw (getContactTicket_result_e res)
    P.return $ getContactTicket_result_success res
getMemberCountByBuddyMid (ip,op) arg_buddyMid = do
  send_getMemberCountByBuddyMid op arg_buddyMid
  recv_getMemberCountByBuddyMid ip
send_getMemberCountByBuddyMid op arg_buddyMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getMemberCountByBuddyMid", T.M_CALL, seqn) $
    write_GetMemberCountByBuddyMid_args op (GetMemberCountByBuddyMid_args{getMemberCountByBuddyMid_args_buddyMid=arg_buddyMid})
recv_getMemberCountByBuddyMid ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetMemberCountByBuddyMid_result ip
    P.maybe (P.return ()) X.throw (getMemberCountByBuddyMid_result_e res)
    P.return $ getMemberCountByBuddyMid_result_success res
getSendBuddyMessageResult (ip,op) arg_sendBuddyMessageRequestId = do
  send_getSendBuddyMessageResult op arg_sendBuddyMessageRequestId
  recv_getSendBuddyMessageResult ip
send_getSendBuddyMessageResult op arg_sendBuddyMessageRequestId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSendBuddyMessageResult", T.M_CALL, seqn) $
    write_GetSendBuddyMessageResult_args op (GetSendBuddyMessageResult_args{getSendBuddyMessageResult_args_sendBuddyMessageRequestId=arg_sendBuddyMessageRequestId})
recv_getSendBuddyMessageResult ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSendBuddyMessageResult_result ip
    P.maybe (P.return ()) X.throw (getSendBuddyMessageResult_result_e res)
    P.return $ getSendBuddyMessageResult_result_success res
getSetBuddyOnAirResult (ip,op) arg_setBuddyOnAirRequestId = do
  send_getSetBuddyOnAirResult op arg_setBuddyOnAirRequestId
  recv_getSetBuddyOnAirResult ip
send_getSetBuddyOnAirResult op arg_setBuddyOnAirRequestId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSetBuddyOnAirResult", T.M_CALL, seqn) $
    write_GetSetBuddyOnAirResult_args op (GetSetBuddyOnAirResult_args{getSetBuddyOnAirResult_args_setBuddyOnAirRequestId=arg_setBuddyOnAirRequestId})
recv_getSetBuddyOnAirResult ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSetBuddyOnAirResult_result ip
    P.maybe (P.return ()) X.throw (getSetBuddyOnAirResult_result_e res)
    P.return $ getSetBuddyOnAirResult_result_success res
getUpdateBuddyProfileResult (ip,op) arg_updateBuddyProfileRequestId = do
  send_getUpdateBuddyProfileResult op arg_updateBuddyProfileRequestId
  recv_getUpdateBuddyProfileResult ip
send_getUpdateBuddyProfileResult op arg_updateBuddyProfileRequestId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getUpdateBuddyProfileResult", T.M_CALL, seqn) $
    write_GetUpdateBuddyProfileResult_args op (GetUpdateBuddyProfileResult_args{getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId=arg_updateBuddyProfileRequestId})
recv_getUpdateBuddyProfileResult ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetUpdateBuddyProfileResult_result ip
    P.maybe (P.return ()) X.throw (getUpdateBuddyProfileResult_result_e res)
    P.return $ getUpdateBuddyProfileResult_result_success res
isBuddyOnAirByMid (ip,op) arg_buddyMid = do
  send_isBuddyOnAirByMid op arg_buddyMid
  recv_isBuddyOnAirByMid ip
send_isBuddyOnAirByMid op arg_buddyMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("isBuddyOnAirByMid", T.M_CALL, seqn) $
    write_IsBuddyOnAirByMid_args op (IsBuddyOnAirByMid_args{isBuddyOnAirByMid_args_buddyMid=arg_buddyMid})
recv_isBuddyOnAirByMid ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_IsBuddyOnAirByMid_result ip
    P.maybe (P.return ()) X.throw (isBuddyOnAirByMid_result_e res)
    P.return $ isBuddyOnAirByMid_result_success res
linkAndSendBuddyContentMessageToAllAsync (ip,op) arg_requestId arg_msg arg_sourceContentId = do
  send_linkAndSendBuddyContentMessageToAllAsync op arg_requestId arg_msg arg_sourceContentId
  recv_linkAndSendBuddyContentMessageToAllAsync ip
send_linkAndSendBuddyContentMessageToAllAsync op arg_requestId arg_msg arg_sourceContentId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("linkAndSendBuddyContentMessageToAllAsync", T.M_CALL, seqn) $
    write_LinkAndSendBuddyContentMessageToAllAsync_args op (LinkAndSendBuddyContentMessageToAllAsync_args{linkAndSendBuddyContentMessageToAllAsync_args_requestId=arg_requestId,linkAndSendBuddyContentMessageToAllAsync_args_msg=arg_msg,linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId=arg_sourceContentId})
recv_linkAndSendBuddyContentMessageToAllAsync ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_LinkAndSendBuddyContentMessageToAllAsync_result ip
    P.maybe (P.return ()) X.throw (linkAndSendBuddyContentMessageToAllAsync_result_e res)
    P.return $ linkAndSendBuddyContentMessageToAllAsync_result_success res
linkAndSendBuddyContentMessageToMids (ip,op) arg_requestId arg_msg arg_sourceContentId arg_mids = do
  send_linkAndSendBuddyContentMessageToMids op arg_requestId arg_msg arg_sourceContentId arg_mids
  recv_linkAndSendBuddyContentMessageToMids ip
send_linkAndSendBuddyContentMessageToMids op arg_requestId arg_msg arg_sourceContentId arg_mids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("linkAndSendBuddyContentMessageToMids", T.M_CALL, seqn) $
    write_LinkAndSendBuddyContentMessageToMids_args op (LinkAndSendBuddyContentMessageToMids_args{linkAndSendBuddyContentMessageToMids_args_requestId=arg_requestId,linkAndSendBuddyContentMessageToMids_args_msg=arg_msg,linkAndSendBuddyContentMessageToMids_args_sourceContentId=arg_sourceContentId,linkAndSendBuddyContentMessageToMids_args_mids=arg_mids})
recv_linkAndSendBuddyContentMessageToMids ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_LinkAndSendBuddyContentMessageToMids_result ip
    P.maybe (P.return ()) X.throw (linkAndSendBuddyContentMessageToMids_result_e res)
    P.return $ linkAndSendBuddyContentMessageToMids_result_success res
notifyBuddyBlocked (ip,op) arg_buddyMid arg_blockerMid = do
  send_notifyBuddyBlocked op arg_buddyMid arg_blockerMid
  recv_notifyBuddyBlocked ip
send_notifyBuddyBlocked op arg_buddyMid arg_blockerMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("notifyBuddyBlocked", T.M_CALL, seqn) $
    write_NotifyBuddyBlocked_args op (NotifyBuddyBlocked_args{notifyBuddyBlocked_args_buddyMid=arg_buddyMid,notifyBuddyBlocked_args_blockerMid=arg_blockerMid})
recv_notifyBuddyBlocked ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_NotifyBuddyBlocked_result ip
    P.maybe (P.return ()) X.throw (notifyBuddyBlocked_result_e res)
    P.return ()
notifyBuddyUnblocked (ip,op) arg_buddyMid arg_blockerMid = do
  send_notifyBuddyUnblocked op arg_buddyMid arg_blockerMid
  recv_notifyBuddyUnblocked ip
send_notifyBuddyUnblocked op arg_buddyMid arg_blockerMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("notifyBuddyUnblocked", T.M_CALL, seqn) $
    write_NotifyBuddyUnblocked_args op (NotifyBuddyUnblocked_args{notifyBuddyUnblocked_args_buddyMid=arg_buddyMid,notifyBuddyUnblocked_args_blockerMid=arg_blockerMid})
recv_notifyBuddyUnblocked ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_NotifyBuddyUnblocked_result ip
    P.maybe (P.return ()) X.throw (notifyBuddyUnblocked_result_e res)
    P.return ()
registerBuddy (ip,op) arg_buddyId arg_searchId arg_displayName arg_statusMeessage arg_picture arg_settings = do
  send_registerBuddy op arg_buddyId arg_searchId arg_displayName arg_statusMeessage arg_picture arg_settings
  recv_registerBuddy ip
send_registerBuddy op arg_buddyId arg_searchId arg_displayName arg_statusMeessage arg_picture arg_settings = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("registerBuddy", T.M_CALL, seqn) $
    write_RegisterBuddy_args op (RegisterBuddy_args{registerBuddy_args_buddyId=arg_buddyId,registerBuddy_args_searchId=arg_searchId,registerBuddy_args_displayName=arg_displayName,registerBuddy_args_statusMeessage=arg_statusMeessage,registerBuddy_args_picture=arg_picture,registerBuddy_args_settings=arg_settings})
recv_registerBuddy ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RegisterBuddy_result ip
    P.maybe (P.return ()) X.throw (registerBuddy_result_e res)
    P.return $ registerBuddy_result_success res
registerBuddyAdmin (ip,op) arg_buddyId arg_searchId arg_displayName arg_statusMessage arg_picture = do
  send_registerBuddyAdmin op arg_buddyId arg_searchId arg_displayName arg_statusMessage arg_picture
  recv_registerBuddyAdmin ip
send_registerBuddyAdmin op arg_buddyId arg_searchId arg_displayName arg_statusMessage arg_picture = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("registerBuddyAdmin", T.M_CALL, seqn) $
    write_RegisterBuddyAdmin_args op (RegisterBuddyAdmin_args{registerBuddyAdmin_args_buddyId=arg_buddyId,registerBuddyAdmin_args_searchId=arg_searchId,registerBuddyAdmin_args_displayName=arg_displayName,registerBuddyAdmin_args_statusMessage=arg_statusMessage,registerBuddyAdmin_args_picture=arg_picture})
recv_registerBuddyAdmin ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RegisterBuddyAdmin_result ip
    P.maybe (P.return ()) X.throw (registerBuddyAdmin_result_e res)
    P.return $ registerBuddyAdmin_result_success res
reissueContactTicket (ip,op) arg_expirationTime arg_maxUseCount = do
  send_reissueContactTicket op arg_expirationTime arg_maxUseCount
  recv_reissueContactTicket ip
send_reissueContactTicket op arg_expirationTime arg_maxUseCount = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("reissueContactTicket", T.M_CALL, seqn) $
    write_ReissueContactTicket_args op (ReissueContactTicket_args{reissueContactTicket_args_expirationTime=arg_expirationTime,reissueContactTicket_args_maxUseCount=arg_maxUseCount})
recv_reissueContactTicket ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ReissueContactTicket_result ip
    P.maybe (P.return ()) X.throw (reissueContactTicket_result_e res)
    P.return $ reissueContactTicket_result_success res
removeBuddyMember (ip,op) arg_requestId arg_userMid = do
  send_removeBuddyMember op arg_requestId arg_userMid
  recv_removeBuddyMember ip
send_removeBuddyMember op arg_requestId arg_userMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("removeBuddyMember", T.M_CALL, seqn) $
    write_RemoveBuddyMember_args op (RemoveBuddyMember_args{removeBuddyMember_args_requestId=arg_requestId,removeBuddyMember_args_userMid=arg_userMid})
recv_removeBuddyMember ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RemoveBuddyMember_result ip
    P.maybe (P.return ()) X.throw (removeBuddyMember_result_e res)
    P.return ()
removeBuddyMembers (ip,op) arg_requestId arg_userMids = do
  send_removeBuddyMembers op arg_requestId arg_userMids
  recv_removeBuddyMembers ip
send_removeBuddyMembers op arg_requestId arg_userMids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("removeBuddyMembers", T.M_CALL, seqn) $
    write_RemoveBuddyMembers_args op (RemoveBuddyMembers_args{removeBuddyMembers_args_requestId=arg_requestId,removeBuddyMembers_args_userMids=arg_userMids})
recv_removeBuddyMembers ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RemoveBuddyMembers_result ip
    P.maybe (P.return ()) X.throw (removeBuddyMembers_result_e res)
    P.return ()
sendBuddyContentMessageToAll (ip,op) arg_requestId arg_msg arg_content = do
  send_sendBuddyContentMessageToAll op arg_requestId arg_msg arg_content
  recv_sendBuddyContentMessageToAll ip
send_sendBuddyContentMessageToAll op arg_requestId arg_msg arg_content = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendBuddyContentMessageToAll", T.M_CALL, seqn) $
    write_SendBuddyContentMessageToAll_args op (SendBuddyContentMessageToAll_args{sendBuddyContentMessageToAll_args_requestId=arg_requestId,sendBuddyContentMessageToAll_args_msg=arg_msg,sendBuddyContentMessageToAll_args_content=arg_content})
recv_sendBuddyContentMessageToAll ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendBuddyContentMessageToAll_result ip
    P.maybe (P.return ()) X.throw (sendBuddyContentMessageToAll_result_e res)
    P.return $ sendBuddyContentMessageToAll_result_success res
sendBuddyContentMessageToAllAsync (ip,op) arg_requestId arg_msg arg_content = do
  send_sendBuddyContentMessageToAllAsync op arg_requestId arg_msg arg_content
  recv_sendBuddyContentMessageToAllAsync ip
send_sendBuddyContentMessageToAllAsync op arg_requestId arg_msg arg_content = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendBuddyContentMessageToAllAsync", T.M_CALL, seqn) $
    write_SendBuddyContentMessageToAllAsync_args op (SendBuddyContentMessageToAllAsync_args{sendBuddyContentMessageToAllAsync_args_requestId=arg_requestId,sendBuddyContentMessageToAllAsync_args_msg=arg_msg,sendBuddyContentMessageToAllAsync_args_content=arg_content})
recv_sendBuddyContentMessageToAllAsync ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendBuddyContentMessageToAllAsync_result ip
    P.maybe (P.return ()) X.throw (sendBuddyContentMessageToAllAsync_result_e res)
    P.return $ sendBuddyContentMessageToAllAsync_result_success res
sendBuddyContentMessageToMids (ip,op) arg_requestId arg_msg arg_content arg_mids = do
  send_sendBuddyContentMessageToMids op arg_requestId arg_msg arg_content arg_mids
  recv_sendBuddyContentMessageToMids ip
send_sendBuddyContentMessageToMids op arg_requestId arg_msg arg_content arg_mids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendBuddyContentMessageToMids", T.M_CALL, seqn) $
    write_SendBuddyContentMessageToMids_args op (SendBuddyContentMessageToMids_args{sendBuddyContentMessageToMids_args_requestId=arg_requestId,sendBuddyContentMessageToMids_args_msg=arg_msg,sendBuddyContentMessageToMids_args_content=arg_content,sendBuddyContentMessageToMids_args_mids=arg_mids})
recv_sendBuddyContentMessageToMids ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendBuddyContentMessageToMids_result ip
    P.maybe (P.return ()) X.throw (sendBuddyContentMessageToMids_result_e res)
    P.return $ sendBuddyContentMessageToMids_result_success res
sendBuddyContentMessageToMidsAsync (ip,op) arg_requestId arg_msg arg_content arg_mids = do
  send_sendBuddyContentMessageToMidsAsync op arg_requestId arg_msg arg_content arg_mids
  recv_sendBuddyContentMessageToMidsAsync ip
send_sendBuddyContentMessageToMidsAsync op arg_requestId arg_msg arg_content arg_mids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendBuddyContentMessageToMidsAsync", T.M_CALL, seqn) $
    write_SendBuddyContentMessageToMidsAsync_args op (SendBuddyContentMessageToMidsAsync_args{sendBuddyContentMessageToMidsAsync_args_requestId=arg_requestId,sendBuddyContentMessageToMidsAsync_args_msg=arg_msg,sendBuddyContentMessageToMidsAsync_args_content=arg_content,sendBuddyContentMessageToMidsAsync_args_mids=arg_mids})
recv_sendBuddyContentMessageToMidsAsync ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendBuddyContentMessageToMidsAsync_result ip
    P.maybe (P.return ()) X.throw (sendBuddyContentMessageToMidsAsync_result_e res)
    P.return $ sendBuddyContentMessageToMidsAsync_result_success res
sendBuddyMessageToAll (ip,op) arg_requestId arg_msg = do
  send_sendBuddyMessageToAll op arg_requestId arg_msg
  recv_sendBuddyMessageToAll ip
send_sendBuddyMessageToAll op arg_requestId arg_msg = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendBuddyMessageToAll", T.M_CALL, seqn) $
    write_SendBuddyMessageToAll_args op (SendBuddyMessageToAll_args{sendBuddyMessageToAll_args_requestId=arg_requestId,sendBuddyMessageToAll_args_msg=arg_msg})
recv_sendBuddyMessageToAll ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendBuddyMessageToAll_result ip
    P.maybe (P.return ()) X.throw (sendBuddyMessageToAll_result_e res)
    P.return $ sendBuddyMessageToAll_result_success res
sendBuddyMessageToAllAsync (ip,op) arg_requestId arg_msg = do
  send_sendBuddyMessageToAllAsync op arg_requestId arg_msg
  recv_sendBuddyMessageToAllAsync ip
send_sendBuddyMessageToAllAsync op arg_requestId arg_msg = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendBuddyMessageToAllAsync", T.M_CALL, seqn) $
    write_SendBuddyMessageToAllAsync_args op (SendBuddyMessageToAllAsync_args{sendBuddyMessageToAllAsync_args_requestId=arg_requestId,sendBuddyMessageToAllAsync_args_msg=arg_msg})
recv_sendBuddyMessageToAllAsync ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendBuddyMessageToAllAsync_result ip
    P.maybe (P.return ()) X.throw (sendBuddyMessageToAllAsync_result_e res)
    P.return $ sendBuddyMessageToAllAsync_result_success res
sendBuddyMessageToMids (ip,op) arg_requestId arg_msg arg_mids = do
  send_sendBuddyMessageToMids op arg_requestId arg_msg arg_mids
  recv_sendBuddyMessageToMids ip
send_sendBuddyMessageToMids op arg_requestId arg_msg arg_mids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendBuddyMessageToMids", T.M_CALL, seqn) $
    write_SendBuddyMessageToMids_args op (SendBuddyMessageToMids_args{sendBuddyMessageToMids_args_requestId=arg_requestId,sendBuddyMessageToMids_args_msg=arg_msg,sendBuddyMessageToMids_args_mids=arg_mids})
recv_sendBuddyMessageToMids ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendBuddyMessageToMids_result ip
    P.maybe (P.return ()) X.throw (sendBuddyMessageToMids_result_e res)
    P.return $ sendBuddyMessageToMids_result_success res
sendBuddyMessageToMidsAsync (ip,op) arg_requestId arg_msg arg_mids = do
  send_sendBuddyMessageToMidsAsync op arg_requestId arg_msg arg_mids
  recv_sendBuddyMessageToMidsAsync ip
send_sendBuddyMessageToMidsAsync op arg_requestId arg_msg arg_mids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendBuddyMessageToMidsAsync", T.M_CALL, seqn) $
    write_SendBuddyMessageToMidsAsync_args op (SendBuddyMessageToMidsAsync_args{sendBuddyMessageToMidsAsync_args_requestId=arg_requestId,sendBuddyMessageToMidsAsync_args_msg=arg_msg,sendBuddyMessageToMidsAsync_args_mids=arg_mids})
recv_sendBuddyMessageToMidsAsync ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendBuddyMessageToMidsAsync_result ip
    P.maybe (P.return ()) X.throw (sendBuddyMessageToMidsAsync_result_e res)
    P.return $ sendBuddyMessageToMidsAsync_result_success res
sendIndividualEventToAllAsync (ip,op) arg_requestId arg_buddyMid arg_notificationStatus = do
  send_sendIndividualEventToAllAsync op arg_requestId arg_buddyMid arg_notificationStatus
  recv_sendIndividualEventToAllAsync ip
send_sendIndividualEventToAllAsync op arg_requestId arg_buddyMid arg_notificationStatus = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendIndividualEventToAllAsync", T.M_CALL, seqn) $
    write_SendIndividualEventToAllAsync_args op (SendIndividualEventToAllAsync_args{sendIndividualEventToAllAsync_args_requestId=arg_requestId,sendIndividualEventToAllAsync_args_buddyMid=arg_buddyMid,sendIndividualEventToAllAsync_args_notificationStatus=arg_notificationStatus})
recv_sendIndividualEventToAllAsync ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendIndividualEventToAllAsync_result ip
    P.maybe (P.return ()) X.throw (sendIndividualEventToAllAsync_result_e res)
    P.return ()
setBuddyOnAir (ip,op) arg_requestId arg_onAir = do
  send_setBuddyOnAir op arg_requestId arg_onAir
  recv_setBuddyOnAir ip
send_setBuddyOnAir op arg_requestId arg_onAir = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("setBuddyOnAir", T.M_CALL, seqn) $
    write_SetBuddyOnAir_args op (SetBuddyOnAir_args{setBuddyOnAir_args_requestId=arg_requestId,setBuddyOnAir_args_onAir=arg_onAir})
recv_setBuddyOnAir ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SetBuddyOnAir_result ip
    P.maybe (P.return ()) X.throw (setBuddyOnAir_result_e res)
    P.return $ setBuddyOnAir_result_success res
setBuddyOnAirAsync (ip,op) arg_requestId arg_onAir = do
  send_setBuddyOnAirAsync op arg_requestId arg_onAir
  recv_setBuddyOnAirAsync ip
send_setBuddyOnAirAsync op arg_requestId arg_onAir = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("setBuddyOnAirAsync", T.M_CALL, seqn) $
    write_SetBuddyOnAirAsync_args op (SetBuddyOnAirAsync_args{setBuddyOnAirAsync_args_requestId=arg_requestId,setBuddyOnAirAsync_args_onAir=arg_onAir})
recv_setBuddyOnAirAsync ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SetBuddyOnAirAsync_result ip
    P.maybe (P.return ()) X.throw (setBuddyOnAirAsync_result_e res)
    P.return $ setBuddyOnAirAsync_result_success res
storeMessage (ip,op) arg_requestId arg_messageRequest = do
  send_storeMessage op arg_requestId arg_messageRequest
  recv_storeMessage ip
send_storeMessage op arg_requestId arg_messageRequest = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("storeMessage", T.M_CALL, seqn) $
    write_StoreMessage_args op (StoreMessage_args{storeMessage_args_requestId=arg_requestId,storeMessage_args_messageRequest=arg_messageRequest})
recv_storeMessage ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_StoreMessage_result ip
    P.maybe (P.return ()) X.throw (storeMessage_result_e res)
    P.return $ storeMessage_result_success res
unblockBuddyMember (ip,op) arg_requestId arg_mid = do
  send_unblockBuddyMember op arg_requestId arg_mid
  recv_unblockBuddyMember ip
send_unblockBuddyMember op arg_requestId arg_mid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("unblockBuddyMember", T.M_CALL, seqn) $
    write_UnblockBuddyMember_args op (UnblockBuddyMember_args{unblockBuddyMember_args_requestId=arg_requestId,unblockBuddyMember_args_mid=arg_mid})
recv_unblockBuddyMember ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UnblockBuddyMember_result ip
    P.maybe (P.return ()) X.throw (unblockBuddyMember_result_e res)
    P.return ()
unregisterBuddy (ip,op) arg_requestId = do
  send_unregisterBuddy op arg_requestId
  recv_unregisterBuddy ip
send_unregisterBuddy op arg_requestId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("unregisterBuddy", T.M_CALL, seqn) $
    write_UnregisterBuddy_args op (UnregisterBuddy_args{unregisterBuddy_args_requestId=arg_requestId})
recv_unregisterBuddy ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UnregisterBuddy_result ip
    P.maybe (P.return ()) X.throw (unregisterBuddy_result_e res)
    P.return ()
unregisterBuddyAdmin (ip,op) arg_requestId = do
  send_unregisterBuddyAdmin op arg_requestId
  recv_unregisterBuddyAdmin ip
send_unregisterBuddyAdmin op arg_requestId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("unregisterBuddyAdmin", T.M_CALL, seqn) $
    write_UnregisterBuddyAdmin_args op (UnregisterBuddyAdmin_args{unregisterBuddyAdmin_args_requestId=arg_requestId})
recv_unregisterBuddyAdmin ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UnregisterBuddyAdmin_result ip
    P.maybe (P.return ()) X.throw (unregisterBuddyAdmin_result_e res)
    P.return ()
updateBuddyAdminProfileAttribute (ip,op) arg_requestId arg_attributes = do
  send_updateBuddyAdminProfileAttribute op arg_requestId arg_attributes
  recv_updateBuddyAdminProfileAttribute ip
send_updateBuddyAdminProfileAttribute op arg_requestId arg_attributes = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateBuddyAdminProfileAttribute", T.M_CALL, seqn) $
    write_UpdateBuddyAdminProfileAttribute_args op (UpdateBuddyAdminProfileAttribute_args{updateBuddyAdminProfileAttribute_args_requestId=arg_requestId,updateBuddyAdminProfileAttribute_args_attributes=arg_attributes})
recv_updateBuddyAdminProfileAttribute ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateBuddyAdminProfileAttribute_result ip
    P.maybe (P.return ()) X.throw (updateBuddyAdminProfileAttribute_result_e res)
    P.return ()
updateBuddyAdminProfileImage (ip,op) arg_requestId arg_picture = do
  send_updateBuddyAdminProfileImage op arg_requestId arg_picture
  recv_updateBuddyAdminProfileImage ip
send_updateBuddyAdminProfileImage op arg_requestId arg_picture = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateBuddyAdminProfileImage", T.M_CALL, seqn) $
    write_UpdateBuddyAdminProfileImage_args op (UpdateBuddyAdminProfileImage_args{updateBuddyAdminProfileImage_args_requestId=arg_requestId,updateBuddyAdminProfileImage_args_picture=arg_picture})
recv_updateBuddyAdminProfileImage ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateBuddyAdminProfileImage_result ip
    P.maybe (P.return ()) X.throw (updateBuddyAdminProfileImage_result_e res)
    P.return ()
updateBuddyProfileAttributes (ip,op) arg_requestId arg_attributes = do
  send_updateBuddyProfileAttributes op arg_requestId arg_attributes
  recv_updateBuddyProfileAttributes ip
send_updateBuddyProfileAttributes op arg_requestId arg_attributes = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateBuddyProfileAttributes", T.M_CALL, seqn) $
    write_UpdateBuddyProfileAttributes_args op (UpdateBuddyProfileAttributes_args{updateBuddyProfileAttributes_args_requestId=arg_requestId,updateBuddyProfileAttributes_args_attributes=arg_attributes})
recv_updateBuddyProfileAttributes ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateBuddyProfileAttributes_result ip
    P.maybe (P.return ()) X.throw (updateBuddyProfileAttributes_result_e res)
    P.return $ updateBuddyProfileAttributes_result_success res
updateBuddyProfileAttributesAsync (ip,op) arg_requestId arg_attributes = do
  send_updateBuddyProfileAttributesAsync op arg_requestId arg_attributes
  recv_updateBuddyProfileAttributesAsync ip
send_updateBuddyProfileAttributesAsync op arg_requestId arg_attributes = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateBuddyProfileAttributesAsync", T.M_CALL, seqn) $
    write_UpdateBuddyProfileAttributesAsync_args op (UpdateBuddyProfileAttributesAsync_args{updateBuddyProfileAttributesAsync_args_requestId=arg_requestId,updateBuddyProfileAttributesAsync_args_attributes=arg_attributes})
recv_updateBuddyProfileAttributesAsync ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateBuddyProfileAttributesAsync_result ip
    P.maybe (P.return ()) X.throw (updateBuddyProfileAttributesAsync_result_e res)
    P.return $ updateBuddyProfileAttributesAsync_result_success res
updateBuddyProfileImage (ip,op) arg_requestId arg_image = do
  send_updateBuddyProfileImage op arg_requestId arg_image
  recv_updateBuddyProfileImage ip
send_updateBuddyProfileImage op arg_requestId arg_image = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateBuddyProfileImage", T.M_CALL, seqn) $
    write_UpdateBuddyProfileImage_args op (UpdateBuddyProfileImage_args{updateBuddyProfileImage_args_requestId=arg_requestId,updateBuddyProfileImage_args_image=arg_image})
recv_updateBuddyProfileImage ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateBuddyProfileImage_result ip
    P.maybe (P.return ()) X.throw (updateBuddyProfileImage_result_e res)
    P.return $ updateBuddyProfileImage_result_success res
updateBuddyProfileImageAsync (ip,op) arg_requestId arg_image = do
  send_updateBuddyProfileImageAsync op arg_requestId arg_image
  recv_updateBuddyProfileImageAsync ip
send_updateBuddyProfileImageAsync op arg_requestId arg_image = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateBuddyProfileImageAsync", T.M_CALL, seqn) $
    write_UpdateBuddyProfileImageAsync_args op (UpdateBuddyProfileImageAsync_args{updateBuddyProfileImageAsync_args_requestId=arg_requestId,updateBuddyProfileImageAsync_args_image=arg_image})
recv_updateBuddyProfileImageAsync ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateBuddyProfileImageAsync_result ip
    P.maybe (P.return ()) X.throw (updateBuddyProfileImageAsync_result_e res)
    P.return $ updateBuddyProfileImageAsync_result_success res
updateBuddySearchId (ip,op) arg_requestId arg_searchId = do
  send_updateBuddySearchId op arg_requestId arg_searchId
  recv_updateBuddySearchId ip
send_updateBuddySearchId op arg_requestId arg_searchId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateBuddySearchId", T.M_CALL, seqn) $
    write_UpdateBuddySearchId_args op (UpdateBuddySearchId_args{updateBuddySearchId_args_requestId=arg_requestId,updateBuddySearchId_args_searchId=arg_searchId})
recv_updateBuddySearchId ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateBuddySearchId_result ip
    P.maybe (P.return ()) X.throw (updateBuddySearchId_result_e res)
    P.return ()
updateBuddySettings (ip,op) arg_settings = do
  send_updateBuddySettings op arg_settings
  recv_updateBuddySettings ip
send_updateBuddySettings op arg_settings = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateBuddySettings", T.M_CALL, seqn) $
    write_UpdateBuddySettings_args op (UpdateBuddySettings_args{updateBuddySettings_args_settings=arg_settings})
recv_updateBuddySettings ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateBuddySettings_result ip
    P.maybe (P.return ()) X.throw (updateBuddySettings_result_e res)
    P.return ()
uploadBuddyContent (ip,op) arg_contentType arg_content = do
  send_uploadBuddyContent op arg_contentType arg_content
  recv_uploadBuddyContent ip
send_uploadBuddyContent op arg_contentType arg_content = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("uploadBuddyContent", T.M_CALL, seqn) $
    write_UploadBuddyContent_args op (UploadBuddyContent_args{uploadBuddyContent_args_contentType=arg_contentType,uploadBuddyContent_args_content=arg_content})
recv_uploadBuddyContent ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UploadBuddyContent_result ip
    P.maybe (P.return ()) X.throw (uploadBuddyContent_result_e res)
    P.return $ uploadBuddyContent_result_success res
