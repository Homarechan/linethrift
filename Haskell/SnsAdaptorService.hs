{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.14.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module SnsAdaptorService where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Line_Types
import qualified SnsAdaptorService_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data GetSnsFriends_args = GetSnsFriends_args  { getSnsFriends_args_snsIdType :: SnsIdType
  , getSnsFriends_args_snsAccessToken :: LT.Text
  , getSnsFriends_args_startIdx :: I.Int32
  , getSnsFriends_args_limit :: I.Int32
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetSnsFriends_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getSnsFriends_args_snsIdType record   `H.hashWithSalt` getSnsFriends_args_snsAccessToken record   `H.hashWithSalt` getSnsFriends_args_startIdx record   `H.hashWithSalt` getSnsFriends_args_limit record  
instance QC.Arbitrary GetSnsFriends_args where 
  arbitrary = M.liftM GetSnsFriends_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_GetSnsFriends_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetSnsFriends_args{getSnsFriends_args_snsIdType = getSnsFriends_args_snsIdType obj} then P.Nothing else P.Just $ default_GetSnsFriends_args{getSnsFriends_args_snsIdType = getSnsFriends_args_snsIdType obj}
    , if obj == default_GetSnsFriends_args{getSnsFriends_args_snsAccessToken = getSnsFriends_args_snsAccessToken obj} then P.Nothing else P.Just $ default_GetSnsFriends_args{getSnsFriends_args_snsAccessToken = getSnsFriends_args_snsAccessToken obj}
    , if obj == default_GetSnsFriends_args{getSnsFriends_args_startIdx = getSnsFriends_args_startIdx obj} then P.Nothing else P.Just $ default_GetSnsFriends_args{getSnsFriends_args_startIdx = getSnsFriends_args_startIdx obj}
    , if obj == default_GetSnsFriends_args{getSnsFriends_args_limit = getSnsFriends_args_limit obj} then P.Nothing else P.Just $ default_GetSnsFriends_args{getSnsFriends_args_limit = getSnsFriends_args_limit obj}
    ]
from_GetSnsFriends_args :: GetSnsFriends_args -> T.ThriftVal
from_GetSnsFriends_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v5901 -> P.Just (2, ("snsIdType",T.TI32 $ P.fromIntegral $ P.fromEnum _v5901))) $ getSnsFriends_args_snsIdType record
  , (\_v5901 -> P.Just (3, ("snsAccessToken",T.TString $ E.encodeUtf8 _v5901))) $ getSnsFriends_args_snsAccessToken record
  , (\_v5901 -> P.Just (4, ("startIdx",T.TI32 _v5901))) $ getSnsFriends_args_startIdx record
  , (\_v5901 -> P.Just (5, ("limit",T.TI32 _v5901))) $ getSnsFriends_args_limit record
  ]
write_GetSnsFriends_args :: T.Protocol p => p -> GetSnsFriends_args -> P.IO ()
write_GetSnsFriends_args oprot record = T.writeVal oprot $ from_GetSnsFriends_args record
encode_GetSnsFriends_args :: T.StatelessProtocol p => p -> GetSnsFriends_args -> LBS.ByteString
encode_GetSnsFriends_args oprot record = T.serializeVal oprot $ from_GetSnsFriends_args record
to_GetSnsFriends_args :: T.ThriftVal -> GetSnsFriends_args
to_GetSnsFriends_args (T.TStruct fields) = GetSnsFriends_args{
  getSnsFriends_args_snsIdType = P.maybe (getSnsFriends_args_snsIdType default_GetSnsFriends_args) (\(_,_val5903) -> (case _val5903 of {T.TI32 _val5904 -> P.toEnum $ P.fromIntegral _val5904; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  getSnsFriends_args_snsAccessToken = P.maybe (getSnsFriends_args_snsAccessToken default_GetSnsFriends_args) (\(_,_val5903) -> (case _val5903 of {T.TString _val5905 -> E.decodeUtf8 _val5905; _ -> P.error "wrong type"})) (Map.lookup (3) fields),
  getSnsFriends_args_startIdx = P.maybe (getSnsFriends_args_startIdx default_GetSnsFriends_args) (\(_,_val5903) -> (case _val5903 of {T.TI32 _val5906 -> _val5906; _ -> P.error "wrong type"})) (Map.lookup (4) fields),
  getSnsFriends_args_limit = P.maybe (getSnsFriends_args_limit default_GetSnsFriends_args) (\(_,_val5903) -> (case _val5903 of {T.TI32 _val5907 -> _val5907; _ -> P.error "wrong type"})) (Map.lookup (5) fields)
  }
to_GetSnsFriends_args _ = P.error "not a struct"
read_GetSnsFriends_args :: T.Protocol p => p -> P.IO GetSnsFriends_args
read_GetSnsFriends_args iprot = to_GetSnsFriends_args <$> T.readVal iprot (T.T_STRUCT typemap_GetSnsFriends_args)
decode_GetSnsFriends_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetSnsFriends_args
decode_GetSnsFriends_args iprot bs = to_GetSnsFriends_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetSnsFriends_args) bs
typemap_GetSnsFriends_args :: T.TypeMap
typemap_GetSnsFriends_args = Map.fromList [(2,("snsIdType",T.T_I32)),(3,("snsAccessToken",T.T_STRING)),(4,("startIdx",T.T_I32)),(5,("limit",T.T_I32))]
default_GetSnsFriends_args :: GetSnsFriends_args
default_GetSnsFriends_args = GetSnsFriends_args{
  getSnsFriends_args_snsIdType = (P.toEnum 0),
  getSnsFriends_args_snsAccessToken = "",
  getSnsFriends_args_startIdx = 0,
  getSnsFriends_args_limit = 0}
data GetSnsFriends_result = GetSnsFriends_result  { getSnsFriends_result_success :: SnsFriends
  , getSnsFriends_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetSnsFriends_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getSnsFriends_result_success record   `H.hashWithSalt` getSnsFriends_result_e record  
instance QC.Arbitrary GetSnsFriends_result where 
  arbitrary = M.liftM GetSnsFriends_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetSnsFriends_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetSnsFriends_result{getSnsFriends_result_success = getSnsFriends_result_success obj} then P.Nothing else P.Just $ default_GetSnsFriends_result{getSnsFriends_result_success = getSnsFriends_result_success obj}
    , if obj == default_GetSnsFriends_result{getSnsFriends_result_e = getSnsFriends_result_e obj} then P.Nothing else P.Just $ default_GetSnsFriends_result{getSnsFriends_result_e = getSnsFriends_result_e obj}
    ]
from_GetSnsFriends_result :: GetSnsFriends_result -> T.ThriftVal
from_GetSnsFriends_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v5910 -> (1, ("e",from_TalkException _v5910))) <$> getSnsFriends_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v5910 -> P.Just (0, ("success",from_SnsFriends _v5910))) $ getSnsFriends_result_success record
    , (\_v5910 -> (1, ("e",from_TalkException _v5910))) <$> getSnsFriends_result_e record
    ]
    )
write_GetSnsFriends_result :: T.Protocol p => p -> GetSnsFriends_result -> P.IO ()
write_GetSnsFriends_result oprot record = T.writeVal oprot $ from_GetSnsFriends_result record
encode_GetSnsFriends_result :: T.StatelessProtocol p => p -> GetSnsFriends_result -> LBS.ByteString
encode_GetSnsFriends_result oprot record = T.serializeVal oprot $ from_GetSnsFriends_result record
to_GetSnsFriends_result :: T.ThriftVal -> GetSnsFriends_result
to_GetSnsFriends_result (T.TStruct fields) = GetSnsFriends_result{
  getSnsFriends_result_success = P.maybe (getSnsFriends_result_success default_GetSnsFriends_result) (\(_,_val5912) -> (case _val5912 of {T.TStruct _val5913 -> (to_SnsFriends (T.TStruct _val5913)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getSnsFriends_result_e = P.maybe (P.Nothing) (\(_,_val5912) -> P.Just (case _val5912 of {T.TStruct _val5914 -> (to_TalkException (T.TStruct _val5914)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetSnsFriends_result _ = P.error "not a struct"
read_GetSnsFriends_result :: T.Protocol p => p -> P.IO GetSnsFriends_result
read_GetSnsFriends_result iprot = to_GetSnsFriends_result <$> T.readVal iprot (T.T_STRUCT typemap_GetSnsFriends_result)
decode_GetSnsFriends_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetSnsFriends_result
decode_GetSnsFriends_result iprot bs = to_GetSnsFriends_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetSnsFriends_result) bs
typemap_GetSnsFriends_result :: T.TypeMap
typemap_GetSnsFriends_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SnsFriends))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetSnsFriends_result :: GetSnsFriends_result
default_GetSnsFriends_result = GetSnsFriends_result{
  getSnsFriends_result_success = default_SnsFriends,
  getSnsFriends_result_e = P.Nothing}
data GetSnsMyProfile_args = GetSnsMyProfile_args  { getSnsMyProfile_args_snsIdType :: SnsIdType
  , getSnsMyProfile_args_snsAccessToken :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetSnsMyProfile_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getSnsMyProfile_args_snsIdType record   `H.hashWithSalt` getSnsMyProfile_args_snsAccessToken record  
instance QC.Arbitrary GetSnsMyProfile_args where 
  arbitrary = M.liftM GetSnsMyProfile_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_GetSnsMyProfile_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetSnsMyProfile_args{getSnsMyProfile_args_snsIdType = getSnsMyProfile_args_snsIdType obj} then P.Nothing else P.Just $ default_GetSnsMyProfile_args{getSnsMyProfile_args_snsIdType = getSnsMyProfile_args_snsIdType obj}
    , if obj == default_GetSnsMyProfile_args{getSnsMyProfile_args_snsAccessToken = getSnsMyProfile_args_snsAccessToken obj} then P.Nothing else P.Just $ default_GetSnsMyProfile_args{getSnsMyProfile_args_snsAccessToken = getSnsMyProfile_args_snsAccessToken obj}
    ]
from_GetSnsMyProfile_args :: GetSnsMyProfile_args -> T.ThriftVal
from_GetSnsMyProfile_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v5917 -> P.Just (2, ("snsIdType",T.TI32 $ P.fromIntegral $ P.fromEnum _v5917))) $ getSnsMyProfile_args_snsIdType record
  , (\_v5917 -> P.Just (3, ("snsAccessToken",T.TString $ E.encodeUtf8 _v5917))) $ getSnsMyProfile_args_snsAccessToken record
  ]
write_GetSnsMyProfile_args :: T.Protocol p => p -> GetSnsMyProfile_args -> P.IO ()
write_GetSnsMyProfile_args oprot record = T.writeVal oprot $ from_GetSnsMyProfile_args record
encode_GetSnsMyProfile_args :: T.StatelessProtocol p => p -> GetSnsMyProfile_args -> LBS.ByteString
encode_GetSnsMyProfile_args oprot record = T.serializeVal oprot $ from_GetSnsMyProfile_args record
to_GetSnsMyProfile_args :: T.ThriftVal -> GetSnsMyProfile_args
to_GetSnsMyProfile_args (T.TStruct fields) = GetSnsMyProfile_args{
  getSnsMyProfile_args_snsIdType = P.maybe (getSnsMyProfile_args_snsIdType default_GetSnsMyProfile_args) (\(_,_val5919) -> (case _val5919 of {T.TI32 _val5920 -> P.toEnum $ P.fromIntegral _val5920; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  getSnsMyProfile_args_snsAccessToken = P.maybe (getSnsMyProfile_args_snsAccessToken default_GetSnsMyProfile_args) (\(_,_val5919) -> (case _val5919 of {T.TString _val5921 -> E.decodeUtf8 _val5921; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_GetSnsMyProfile_args _ = P.error "not a struct"
read_GetSnsMyProfile_args :: T.Protocol p => p -> P.IO GetSnsMyProfile_args
read_GetSnsMyProfile_args iprot = to_GetSnsMyProfile_args <$> T.readVal iprot (T.T_STRUCT typemap_GetSnsMyProfile_args)
decode_GetSnsMyProfile_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetSnsMyProfile_args
decode_GetSnsMyProfile_args iprot bs = to_GetSnsMyProfile_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetSnsMyProfile_args) bs
typemap_GetSnsMyProfile_args :: T.TypeMap
typemap_GetSnsMyProfile_args = Map.fromList [(2,("snsIdType",T.T_I32)),(3,("snsAccessToken",T.T_STRING))]
default_GetSnsMyProfile_args :: GetSnsMyProfile_args
default_GetSnsMyProfile_args = GetSnsMyProfile_args{
  getSnsMyProfile_args_snsIdType = (P.toEnum 0),
  getSnsMyProfile_args_snsAccessToken = ""}
data GetSnsMyProfile_result = GetSnsMyProfile_result  { getSnsMyProfile_result_success :: SnsProfile
  , getSnsMyProfile_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetSnsMyProfile_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getSnsMyProfile_result_success record   `H.hashWithSalt` getSnsMyProfile_result_e record  
instance QC.Arbitrary GetSnsMyProfile_result where 
  arbitrary = M.liftM GetSnsMyProfile_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetSnsMyProfile_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetSnsMyProfile_result{getSnsMyProfile_result_success = getSnsMyProfile_result_success obj} then P.Nothing else P.Just $ default_GetSnsMyProfile_result{getSnsMyProfile_result_success = getSnsMyProfile_result_success obj}
    , if obj == default_GetSnsMyProfile_result{getSnsMyProfile_result_e = getSnsMyProfile_result_e obj} then P.Nothing else P.Just $ default_GetSnsMyProfile_result{getSnsMyProfile_result_e = getSnsMyProfile_result_e obj}
    ]
from_GetSnsMyProfile_result :: GetSnsMyProfile_result -> T.ThriftVal
from_GetSnsMyProfile_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v5924 -> (1, ("e",from_TalkException _v5924))) <$> getSnsMyProfile_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v5924 -> P.Just (0, ("success",from_SnsProfile _v5924))) $ getSnsMyProfile_result_success record
    , (\_v5924 -> (1, ("e",from_TalkException _v5924))) <$> getSnsMyProfile_result_e record
    ]
    )
write_GetSnsMyProfile_result :: T.Protocol p => p -> GetSnsMyProfile_result -> P.IO ()
write_GetSnsMyProfile_result oprot record = T.writeVal oprot $ from_GetSnsMyProfile_result record
encode_GetSnsMyProfile_result :: T.StatelessProtocol p => p -> GetSnsMyProfile_result -> LBS.ByteString
encode_GetSnsMyProfile_result oprot record = T.serializeVal oprot $ from_GetSnsMyProfile_result record
to_GetSnsMyProfile_result :: T.ThriftVal -> GetSnsMyProfile_result
to_GetSnsMyProfile_result (T.TStruct fields) = GetSnsMyProfile_result{
  getSnsMyProfile_result_success = P.maybe (getSnsMyProfile_result_success default_GetSnsMyProfile_result) (\(_,_val5926) -> (case _val5926 of {T.TStruct _val5927 -> (to_SnsProfile (T.TStruct _val5927)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getSnsMyProfile_result_e = P.maybe (P.Nothing) (\(_,_val5926) -> P.Just (case _val5926 of {T.TStruct _val5928 -> (to_TalkException (T.TStruct _val5928)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetSnsMyProfile_result _ = P.error "not a struct"
read_GetSnsMyProfile_result :: T.Protocol p => p -> P.IO GetSnsMyProfile_result
read_GetSnsMyProfile_result iprot = to_GetSnsMyProfile_result <$> T.readVal iprot (T.T_STRUCT typemap_GetSnsMyProfile_result)
decode_GetSnsMyProfile_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetSnsMyProfile_result
decode_GetSnsMyProfile_result iprot bs = to_GetSnsMyProfile_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetSnsMyProfile_result) bs
typemap_GetSnsMyProfile_result :: T.TypeMap
typemap_GetSnsMyProfile_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SnsProfile))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetSnsMyProfile_result :: GetSnsMyProfile_result
default_GetSnsMyProfile_result = GetSnsMyProfile_result{
  getSnsMyProfile_result_success = default_SnsProfile,
  getSnsMyProfile_result_e = P.Nothing}
data PostSnsInvitationMessage_args = PostSnsInvitationMessage_args  { postSnsInvitationMessage_args_snsIdType :: SnsIdType
  , postSnsInvitationMessage_args_snsAccessToken :: LT.Text
  , postSnsInvitationMessage_args_toSnsUserId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable PostSnsInvitationMessage_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` postSnsInvitationMessage_args_snsIdType record   `H.hashWithSalt` postSnsInvitationMessage_args_snsAccessToken record   `H.hashWithSalt` postSnsInvitationMessage_args_toSnsUserId record  
instance QC.Arbitrary PostSnsInvitationMessage_args where 
  arbitrary = M.liftM PostSnsInvitationMessage_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_PostSnsInvitationMessage_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_PostSnsInvitationMessage_args{postSnsInvitationMessage_args_snsIdType = postSnsInvitationMessage_args_snsIdType obj} then P.Nothing else P.Just $ default_PostSnsInvitationMessage_args{postSnsInvitationMessage_args_snsIdType = postSnsInvitationMessage_args_snsIdType obj}
    , if obj == default_PostSnsInvitationMessage_args{postSnsInvitationMessage_args_snsAccessToken = postSnsInvitationMessage_args_snsAccessToken obj} then P.Nothing else P.Just $ default_PostSnsInvitationMessage_args{postSnsInvitationMessage_args_snsAccessToken = postSnsInvitationMessage_args_snsAccessToken obj}
    , if obj == default_PostSnsInvitationMessage_args{postSnsInvitationMessage_args_toSnsUserId = postSnsInvitationMessage_args_toSnsUserId obj} then P.Nothing else P.Just $ default_PostSnsInvitationMessage_args{postSnsInvitationMessage_args_toSnsUserId = postSnsInvitationMessage_args_toSnsUserId obj}
    ]
from_PostSnsInvitationMessage_args :: PostSnsInvitationMessage_args -> T.ThriftVal
from_PostSnsInvitationMessage_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v5931 -> P.Just (2, ("snsIdType",T.TI32 $ P.fromIntegral $ P.fromEnum _v5931))) $ postSnsInvitationMessage_args_snsIdType record
  , (\_v5931 -> P.Just (3, ("snsAccessToken",T.TString $ E.encodeUtf8 _v5931))) $ postSnsInvitationMessage_args_snsAccessToken record
  , (\_v5931 -> P.Just (4, ("toSnsUserId",T.TString $ E.encodeUtf8 _v5931))) $ postSnsInvitationMessage_args_toSnsUserId record
  ]
write_PostSnsInvitationMessage_args :: T.Protocol p => p -> PostSnsInvitationMessage_args -> P.IO ()
write_PostSnsInvitationMessage_args oprot record = T.writeVal oprot $ from_PostSnsInvitationMessage_args record
encode_PostSnsInvitationMessage_args :: T.StatelessProtocol p => p -> PostSnsInvitationMessage_args -> LBS.ByteString
encode_PostSnsInvitationMessage_args oprot record = T.serializeVal oprot $ from_PostSnsInvitationMessage_args record
to_PostSnsInvitationMessage_args :: T.ThriftVal -> PostSnsInvitationMessage_args
to_PostSnsInvitationMessage_args (T.TStruct fields) = PostSnsInvitationMessage_args{
  postSnsInvitationMessage_args_snsIdType = P.maybe (postSnsInvitationMessage_args_snsIdType default_PostSnsInvitationMessage_args) (\(_,_val5933) -> (case _val5933 of {T.TI32 _val5934 -> P.toEnum $ P.fromIntegral _val5934; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  postSnsInvitationMessage_args_snsAccessToken = P.maybe (postSnsInvitationMessage_args_snsAccessToken default_PostSnsInvitationMessage_args) (\(_,_val5933) -> (case _val5933 of {T.TString _val5935 -> E.decodeUtf8 _val5935; _ -> P.error "wrong type"})) (Map.lookup (3) fields),
  postSnsInvitationMessage_args_toSnsUserId = P.maybe (postSnsInvitationMessage_args_toSnsUserId default_PostSnsInvitationMessage_args) (\(_,_val5933) -> (case _val5933 of {T.TString _val5936 -> E.decodeUtf8 _val5936; _ -> P.error "wrong type"})) (Map.lookup (4) fields)
  }
to_PostSnsInvitationMessage_args _ = P.error "not a struct"
read_PostSnsInvitationMessage_args :: T.Protocol p => p -> P.IO PostSnsInvitationMessage_args
read_PostSnsInvitationMessage_args iprot = to_PostSnsInvitationMessage_args <$> T.readVal iprot (T.T_STRUCT typemap_PostSnsInvitationMessage_args)
decode_PostSnsInvitationMessage_args :: T.StatelessProtocol p => p -> LBS.ByteString -> PostSnsInvitationMessage_args
decode_PostSnsInvitationMessage_args iprot bs = to_PostSnsInvitationMessage_args $ T.deserializeVal iprot (T.T_STRUCT typemap_PostSnsInvitationMessage_args) bs
typemap_PostSnsInvitationMessage_args :: T.TypeMap
typemap_PostSnsInvitationMessage_args = Map.fromList [(2,("snsIdType",T.T_I32)),(3,("snsAccessToken",T.T_STRING)),(4,("toSnsUserId",T.T_STRING))]
default_PostSnsInvitationMessage_args :: PostSnsInvitationMessage_args
default_PostSnsInvitationMessage_args = PostSnsInvitationMessage_args{
  postSnsInvitationMessage_args_snsIdType = (P.toEnum 0),
  postSnsInvitationMessage_args_snsAccessToken = "",
  postSnsInvitationMessage_args_toSnsUserId = ""}
data PostSnsInvitationMessage_result = PostSnsInvitationMessage_result  { postSnsInvitationMessage_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable PostSnsInvitationMessage_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` postSnsInvitationMessage_result_e record  
instance QC.Arbitrary PostSnsInvitationMessage_result where 
  arbitrary = M.liftM PostSnsInvitationMessage_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_PostSnsInvitationMessage_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_PostSnsInvitationMessage_result{postSnsInvitationMessage_result_e = postSnsInvitationMessage_result_e obj} then P.Nothing else P.Just $ default_PostSnsInvitationMessage_result{postSnsInvitationMessage_result_e = postSnsInvitationMessage_result_e obj}
    ]
from_PostSnsInvitationMessage_result :: PostSnsInvitationMessage_result -> T.ThriftVal
from_PostSnsInvitationMessage_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v5939 -> (1, ("e",from_TalkException _v5939))) <$> postSnsInvitationMessage_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v5939 -> (1, ("e",from_TalkException _v5939))) <$> postSnsInvitationMessage_result_e record
    ]
    )
write_PostSnsInvitationMessage_result :: T.Protocol p => p -> PostSnsInvitationMessage_result -> P.IO ()
write_PostSnsInvitationMessage_result oprot record = T.writeVal oprot $ from_PostSnsInvitationMessage_result record
encode_PostSnsInvitationMessage_result :: T.StatelessProtocol p => p -> PostSnsInvitationMessage_result -> LBS.ByteString
encode_PostSnsInvitationMessage_result oprot record = T.serializeVal oprot $ from_PostSnsInvitationMessage_result record
to_PostSnsInvitationMessage_result :: T.ThriftVal -> PostSnsInvitationMessage_result
to_PostSnsInvitationMessage_result (T.TStruct fields) = PostSnsInvitationMessage_result{
  postSnsInvitationMessage_result_e = P.maybe (P.Nothing) (\(_,_val5941) -> P.Just (case _val5941 of {T.TStruct _val5942 -> (to_TalkException (T.TStruct _val5942)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_PostSnsInvitationMessage_result _ = P.error "not a struct"
read_PostSnsInvitationMessage_result :: T.Protocol p => p -> P.IO PostSnsInvitationMessage_result
read_PostSnsInvitationMessage_result iprot = to_PostSnsInvitationMessage_result <$> T.readVal iprot (T.T_STRUCT typemap_PostSnsInvitationMessage_result)
decode_PostSnsInvitationMessage_result :: T.StatelessProtocol p => p -> LBS.ByteString -> PostSnsInvitationMessage_result
decode_PostSnsInvitationMessage_result iprot bs = to_PostSnsInvitationMessage_result $ T.deserializeVal iprot (T.T_STRUCT typemap_PostSnsInvitationMessage_result) bs
typemap_PostSnsInvitationMessage_result :: T.TypeMap
typemap_PostSnsInvitationMessage_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_PostSnsInvitationMessage_result :: PostSnsInvitationMessage_result
default_PostSnsInvitationMessage_result = PostSnsInvitationMessage_result{
  postSnsInvitationMessage_result_e = P.Nothing}
process_getSnsFriends (seqid, iprot, oprot, handler) = do
  args <- read_GetSnsFriends_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getSnsFriends handler (getSnsFriends_args_snsIdType args) (getSnsFriends_args_snsAccessToken args) (getSnsFriends_args_startIdx args) (getSnsFriends_args_limit args)
        let res = default_GetSnsFriends_result{getSnsFriends_result_success = val}
        T.writeMessage oprot ("getSnsFriends", T.M_REPLY, seqid) $
          write_GetSnsFriends_result oprot res)
      (\e  -> do
        let res = default_GetSnsFriends_result{getSnsFriends_result_e = P.Just e}
        T.writeMessage oprot ("getSnsFriends", T.M_REPLY, seqid) $
          write_GetSnsFriends_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getSnsFriends", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getSnsMyProfile (seqid, iprot, oprot, handler) = do
  args <- read_GetSnsMyProfile_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getSnsMyProfile handler (getSnsMyProfile_args_snsIdType args) (getSnsMyProfile_args_snsAccessToken args)
        let res = default_GetSnsMyProfile_result{getSnsMyProfile_result_success = val}
        T.writeMessage oprot ("getSnsMyProfile", T.M_REPLY, seqid) $
          write_GetSnsMyProfile_result oprot res)
      (\e  -> do
        let res = default_GetSnsMyProfile_result{getSnsMyProfile_result_e = P.Just e}
        T.writeMessage oprot ("getSnsMyProfile", T.M_REPLY, seqid) $
          write_GetSnsMyProfile_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getSnsMyProfile", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_postSnsInvitationMessage (seqid, iprot, oprot, handler) = do
  args <- read_PostSnsInvitationMessage_args iprot
  (X.catch
    (X.catch
      (do
        Iface.postSnsInvitationMessage handler (postSnsInvitationMessage_args_snsIdType args) (postSnsInvitationMessage_args_snsAccessToken args) (postSnsInvitationMessage_args_toSnsUserId args)
        let res = default_PostSnsInvitationMessage_result
        T.writeMessage oprot ("postSnsInvitationMessage", T.M_REPLY, seqid) $
          write_PostSnsInvitationMessage_result oprot res)
      (\e  -> do
        let res = default_PostSnsInvitationMessage_result{postSnsInvitationMessage_result_e = P.Just e}
        T.writeMessage oprot ("postSnsInvitationMessage", T.M_REPLY, seqid) $
          write_PostSnsInvitationMessage_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("postSnsInvitationMessage", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "getSnsFriends" -> process_getSnsFriends (seqid,iprot,oprot,handler)
  "getSnsMyProfile" -> process_getSnsMyProfile (seqid,iprot,oprot,handler)
  "postSnsInvitationMessage" -> process_postSnsInvitationMessage (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessage oprot (name,T.M_EXCEPTION,seqid) $
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
process handler (iprot, oprot) = do
  T.readMessage iprot (
    proc_ handler (iprot,oprot))
  P.return P.True
