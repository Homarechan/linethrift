{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.14.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module ShopService_Iface where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Line_Types

class ShopService_Iface a where
  buyCoinProduct :: a -> PaymentReservation -> P.IO ()
  buyFreeProduct :: a -> LT.Text -> LT.Text -> I.Int32 -> LT.Text -> LT.Text -> I.Int64 -> P.IO ()
  buyMustbuyProduct :: a -> LT.Text -> LT.Text -> I.Int32 -> LT.Text -> LT.Text -> I.Int64 -> LT.Text -> P.IO ()
  checkCanReceivePresent :: a -> LT.Text -> I.Int64 -> LT.Text -> LT.Text -> P.IO ()
  getActivePurchases :: a -> I.Int64 -> I.Int32 -> LT.Text -> LT.Text -> P.IO ProductList
  getActivePurchaseVersions :: a -> I.Int64 -> I.Int32 -> LT.Text -> LT.Text -> P.IO ProductSimpleList
  getCoinProducts :: a -> PaymentType -> LT.Text -> LT.Text -> P.IO (Vector.Vector CoinProductItem)
  getCoinProductsByPgCode :: a -> PaymentType -> PaymentPgType -> LT.Text -> LT.Text -> P.IO (Vector.Vector CoinProductItem)
  getCoinPurchaseHistory :: a -> CoinHistoryCondition -> P.IO CoinHistoryResult
  getCoinUseAndRefundHistory :: a -> CoinHistoryCondition -> P.IO CoinHistoryResult
  getDownloads :: a -> I.Int64 -> I.Int32 -> LT.Text -> LT.Text -> P.IO ProductList
  getEventPackages :: a -> I.Int64 -> I.Int32 -> LT.Text -> LT.Text -> P.IO ProductList
  getNewlyReleasedPackages :: a -> I.Int64 -> I.Int32 -> LT.Text -> LT.Text -> P.IO ProductList
  getPopularPackages :: a -> I.Int64 -> I.Int32 -> LT.Text -> LT.Text -> P.IO ProductList
  getPresentsReceived :: a -> I.Int64 -> I.Int32 -> LT.Text -> LT.Text -> P.IO ProductList
  getPresentsSent :: a -> I.Int64 -> I.Int32 -> LT.Text -> LT.Text -> P.IO ProductList
  getProduct :: a -> I.Int64 -> LT.Text -> LT.Text -> P.IO Product
  getProductList :: a -> (Vector.Vector LT.Text) -> LT.Text -> LT.Text -> P.IO ProductList
  getProductListWithCarrier :: a -> (Vector.Vector LT.Text) -> LT.Text -> LT.Text -> LT.Text -> P.IO ProductList
  getProductWithCarrier :: a -> I.Int64 -> LT.Text -> LT.Text -> LT.Text -> P.IO Product
  getPurchaseHistory :: a -> I.Int64 -> I.Int32 -> LT.Text -> LT.Text -> P.IO ProductList
  getTotalBalance :: a -> PaymentType -> P.IO Coin
  notifyDownloaded :: a -> I.Int64 -> LT.Text -> P.IO I.Int64
  reserveCoinPurchase :: a -> CoinPurchaseReservation -> P.IO PaymentReservationResult
  reservePayment :: a -> PaymentReservation -> P.IO PaymentReservationResult
