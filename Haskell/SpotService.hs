{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.11.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module SpotService where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Line_Types
import qualified SpotService_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data LookupByPhoneNumber_args = LookupByPhoneNumber_args  { lookupByPhoneNumber_args_countryAreaCode :: LT.Text
  , lookupByPhoneNumber_args_phoneNumber :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable LookupByPhoneNumber_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` lookupByPhoneNumber_args_countryAreaCode record   `H.hashWithSalt` lookupByPhoneNumber_args_phoneNumber record  
instance QC.Arbitrary LookupByPhoneNumber_args where 
  arbitrary = M.liftM LookupByPhoneNumber_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_LookupByPhoneNumber_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_LookupByPhoneNumber_args{lookupByPhoneNumber_args_countryAreaCode = lookupByPhoneNumber_args_countryAreaCode obj} then P.Nothing else P.Just $ default_LookupByPhoneNumber_args{lookupByPhoneNumber_args_countryAreaCode = lookupByPhoneNumber_args_countryAreaCode obj}
    , if obj == default_LookupByPhoneNumber_args{lookupByPhoneNumber_args_phoneNumber = lookupByPhoneNumber_args_phoneNumber obj} then P.Nothing else P.Just $ default_LookupByPhoneNumber_args{lookupByPhoneNumber_args_phoneNumber = lookupByPhoneNumber_args_phoneNumber obj}
    ]
from_LookupByPhoneNumber_args :: LookupByPhoneNumber_args -> T.ThriftVal
from_LookupByPhoneNumber_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3527 -> P.Just (2, ("countryAreaCode",T.TString $ E.encodeUtf8 _v3527))) $ lookupByPhoneNumber_args_countryAreaCode record
  , (\_v3527 -> P.Just (3, ("phoneNumber",T.TString $ E.encodeUtf8 _v3527))) $ lookupByPhoneNumber_args_phoneNumber record
  ]
write_LookupByPhoneNumber_args :: T.Protocol p => p -> LookupByPhoneNumber_args -> P.IO ()
write_LookupByPhoneNumber_args oprot record = T.writeVal oprot $ from_LookupByPhoneNumber_args record
encode_LookupByPhoneNumber_args :: T.StatelessProtocol p => p -> LookupByPhoneNumber_args -> LBS.ByteString
encode_LookupByPhoneNumber_args oprot record = T.serializeVal oprot $ from_LookupByPhoneNumber_args record
to_LookupByPhoneNumber_args :: T.ThriftVal -> LookupByPhoneNumber_args
to_LookupByPhoneNumber_args (T.TStruct fields) = LookupByPhoneNumber_args{
  lookupByPhoneNumber_args_countryAreaCode = P.maybe (lookupByPhoneNumber_args_countryAreaCode default_LookupByPhoneNumber_args) (\(_,_val3529) -> (case _val3529 of {T.TString _val3530 -> E.decodeUtf8 _val3530; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  lookupByPhoneNumber_args_phoneNumber = P.maybe (lookupByPhoneNumber_args_phoneNumber default_LookupByPhoneNumber_args) (\(_,_val3529) -> (case _val3529 of {T.TString _val3531 -> E.decodeUtf8 _val3531; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_LookupByPhoneNumber_args _ = P.error "not a struct"
read_LookupByPhoneNumber_args :: T.Protocol p => p -> P.IO LookupByPhoneNumber_args
read_LookupByPhoneNumber_args iprot = to_LookupByPhoneNumber_args <$> T.readVal iprot (T.T_STRUCT typemap_LookupByPhoneNumber_args)
decode_LookupByPhoneNumber_args :: T.StatelessProtocol p => p -> LBS.ByteString -> LookupByPhoneNumber_args
decode_LookupByPhoneNumber_args iprot bs = to_LookupByPhoneNumber_args $ T.deserializeVal iprot (T.T_STRUCT typemap_LookupByPhoneNumber_args) bs
typemap_LookupByPhoneNumber_args :: T.TypeMap
typemap_LookupByPhoneNumber_args = Map.fromList [(2,("countryAreaCode",T.T_STRING)),(3,("phoneNumber",T.T_STRING))]
default_LookupByPhoneNumber_args :: LookupByPhoneNumber_args
default_LookupByPhoneNumber_args = LookupByPhoneNumber_args{
  lookupByPhoneNumber_args_countryAreaCode = "",
  lookupByPhoneNumber_args_phoneNumber = ""}
data LookupByPhoneNumber_result = LookupByPhoneNumber_result  { lookupByPhoneNumber_result_success :: SpotPhoneNumberResponse
  , lookupByPhoneNumber_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable LookupByPhoneNumber_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` lookupByPhoneNumber_result_success record   `H.hashWithSalt` lookupByPhoneNumber_result_e record  
instance QC.Arbitrary LookupByPhoneNumber_result where 
  arbitrary = M.liftM LookupByPhoneNumber_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_LookupByPhoneNumber_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_LookupByPhoneNumber_result{lookupByPhoneNumber_result_success = lookupByPhoneNumber_result_success obj} then P.Nothing else P.Just $ default_LookupByPhoneNumber_result{lookupByPhoneNumber_result_success = lookupByPhoneNumber_result_success obj}
    , if obj == default_LookupByPhoneNumber_result{lookupByPhoneNumber_result_e = lookupByPhoneNumber_result_e obj} then P.Nothing else P.Just $ default_LookupByPhoneNumber_result{lookupByPhoneNumber_result_e = lookupByPhoneNumber_result_e obj}
    ]
from_LookupByPhoneNumber_result :: LookupByPhoneNumber_result -> T.ThriftVal
from_LookupByPhoneNumber_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3534 -> (1, ("e",from_TalkException _v3534))) <$> lookupByPhoneNumber_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3534 -> P.Just (0, ("success",from_SpotPhoneNumberResponse _v3534))) $ lookupByPhoneNumber_result_success record
    , (\_v3534 -> (1, ("e",from_TalkException _v3534))) <$> lookupByPhoneNumber_result_e record
    ]
    )
write_LookupByPhoneNumber_result :: T.Protocol p => p -> LookupByPhoneNumber_result -> P.IO ()
write_LookupByPhoneNumber_result oprot record = T.writeVal oprot $ from_LookupByPhoneNumber_result record
encode_LookupByPhoneNumber_result :: T.StatelessProtocol p => p -> LookupByPhoneNumber_result -> LBS.ByteString
encode_LookupByPhoneNumber_result oprot record = T.serializeVal oprot $ from_LookupByPhoneNumber_result record
to_LookupByPhoneNumber_result :: T.ThriftVal -> LookupByPhoneNumber_result
to_LookupByPhoneNumber_result (T.TStruct fields) = LookupByPhoneNumber_result{
  lookupByPhoneNumber_result_success = P.maybe (lookupByPhoneNumber_result_success default_LookupByPhoneNumber_result) (\(_,_val3536) -> (case _val3536 of {T.TStruct _val3537 -> (to_SpotPhoneNumberResponse (T.TStruct _val3537)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  lookupByPhoneNumber_result_e = P.maybe (P.Nothing) (\(_,_val3536) -> P.Just (case _val3536 of {T.TStruct _val3538 -> (to_TalkException (T.TStruct _val3538)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_LookupByPhoneNumber_result _ = P.error "not a struct"
read_LookupByPhoneNumber_result :: T.Protocol p => p -> P.IO LookupByPhoneNumber_result
read_LookupByPhoneNumber_result iprot = to_LookupByPhoneNumber_result <$> T.readVal iprot (T.T_STRUCT typemap_LookupByPhoneNumber_result)
decode_LookupByPhoneNumber_result :: T.StatelessProtocol p => p -> LBS.ByteString -> LookupByPhoneNumber_result
decode_LookupByPhoneNumber_result iprot bs = to_LookupByPhoneNumber_result $ T.deserializeVal iprot (T.T_STRUCT typemap_LookupByPhoneNumber_result) bs
typemap_LookupByPhoneNumber_result :: T.TypeMap
typemap_LookupByPhoneNumber_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SpotPhoneNumberResponse))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_LookupByPhoneNumber_result :: LookupByPhoneNumber_result
default_LookupByPhoneNumber_result = LookupByPhoneNumber_result{
  lookupByPhoneNumber_result_success = default_SpotPhoneNumberResponse,
  lookupByPhoneNumber_result_e = P.Nothing}
data LookupNearby_args = LookupNearby_args  { lookupNearby_args_location :: Location
  , lookupNearby_args_category :: SpotCategory
  , lookupNearby_args_query :: LT.Text
  , lookupNearby_args_countryAreaCode :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable LookupNearby_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` lookupNearby_args_location record   `H.hashWithSalt` lookupNearby_args_category record   `H.hashWithSalt` lookupNearby_args_query record   `H.hashWithSalt` lookupNearby_args_countryAreaCode record  
instance QC.Arbitrary LookupNearby_args where 
  arbitrary = M.liftM LookupNearby_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_LookupNearby_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_LookupNearby_args{lookupNearby_args_location = lookupNearby_args_location obj} then P.Nothing else P.Just $ default_LookupNearby_args{lookupNearby_args_location = lookupNearby_args_location obj}
    , if obj == default_LookupNearby_args{lookupNearby_args_category = lookupNearby_args_category obj} then P.Nothing else P.Just $ default_LookupNearby_args{lookupNearby_args_category = lookupNearby_args_category obj}
    , if obj == default_LookupNearby_args{lookupNearby_args_query = lookupNearby_args_query obj} then P.Nothing else P.Just $ default_LookupNearby_args{lookupNearby_args_query = lookupNearby_args_query obj}
    , if obj == default_LookupNearby_args{lookupNearby_args_countryAreaCode = lookupNearby_args_countryAreaCode obj} then P.Nothing else P.Just $ default_LookupNearby_args{lookupNearby_args_countryAreaCode = lookupNearby_args_countryAreaCode obj}
    ]
from_LookupNearby_args :: LookupNearby_args -> T.ThriftVal
from_LookupNearby_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3541 -> P.Just (2, ("location",from_Location _v3541))) $ lookupNearby_args_location record
  , (\_v3541 -> P.Just (3, ("category",T.TI32 $ P.fromIntegral $ P.fromEnum _v3541))) $ lookupNearby_args_category record
  , (\_v3541 -> P.Just (4, ("query",T.TString $ E.encodeUtf8 _v3541))) $ lookupNearby_args_query record
  , (\_v3541 -> P.Just (5, ("countryAreaCode",T.TString $ E.encodeUtf8 _v3541))) $ lookupNearby_args_countryAreaCode record
  ]
write_LookupNearby_args :: T.Protocol p => p -> LookupNearby_args -> P.IO ()
write_LookupNearby_args oprot record = T.writeVal oprot $ from_LookupNearby_args record
encode_LookupNearby_args :: T.StatelessProtocol p => p -> LookupNearby_args -> LBS.ByteString
encode_LookupNearby_args oprot record = T.serializeVal oprot $ from_LookupNearby_args record
to_LookupNearby_args :: T.ThriftVal -> LookupNearby_args
to_LookupNearby_args (T.TStruct fields) = LookupNearby_args{
  lookupNearby_args_location = P.maybe (lookupNearby_args_location default_LookupNearby_args) (\(_,_val3543) -> (case _val3543 of {T.TStruct _val3544 -> (to_Location (T.TStruct _val3544)); _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  lookupNearby_args_category = P.maybe (lookupNearby_args_category default_LookupNearby_args) (\(_,_val3543) -> (case _val3543 of {T.TI32 _val3545 -> P.toEnum $ P.fromIntegral _val3545; _ -> P.error "wrong type"})) (Map.lookup (3) fields),
  lookupNearby_args_query = P.maybe (lookupNearby_args_query default_LookupNearby_args) (\(_,_val3543) -> (case _val3543 of {T.TString _val3546 -> E.decodeUtf8 _val3546; _ -> P.error "wrong type"})) (Map.lookup (4) fields),
  lookupNearby_args_countryAreaCode = P.maybe (lookupNearby_args_countryAreaCode default_LookupNearby_args) (\(_,_val3543) -> (case _val3543 of {T.TString _val3547 -> E.decodeUtf8 _val3547; _ -> P.error "wrong type"})) (Map.lookup (5) fields)
  }
to_LookupNearby_args _ = P.error "not a struct"
read_LookupNearby_args :: T.Protocol p => p -> P.IO LookupNearby_args
read_LookupNearby_args iprot = to_LookupNearby_args <$> T.readVal iprot (T.T_STRUCT typemap_LookupNearby_args)
decode_LookupNearby_args :: T.StatelessProtocol p => p -> LBS.ByteString -> LookupNearby_args
decode_LookupNearby_args iprot bs = to_LookupNearby_args $ T.deserializeVal iprot (T.T_STRUCT typemap_LookupNearby_args) bs
typemap_LookupNearby_args :: T.TypeMap
typemap_LookupNearby_args = Map.fromList [(2,("location",(T.T_STRUCT typemap_Location))),(3,("category",T.T_I32)),(4,("query",T.T_STRING)),(5,("countryAreaCode",T.T_STRING))]
default_LookupNearby_args :: LookupNearby_args
default_LookupNearby_args = LookupNearby_args{
  lookupNearby_args_location = default_Location,
  lookupNearby_args_category = (P.toEnum 0),
  lookupNearby_args_query = "",
  lookupNearby_args_countryAreaCode = ""}
data LookupNearby_result = LookupNearby_result  { lookupNearby_result_success :: SpotNearbyResponse
  , lookupNearby_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable LookupNearby_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` lookupNearby_result_success record   `H.hashWithSalt` lookupNearby_result_e record  
instance QC.Arbitrary LookupNearby_result where 
  arbitrary = M.liftM LookupNearby_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_LookupNearby_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_LookupNearby_result{lookupNearby_result_success = lookupNearby_result_success obj} then P.Nothing else P.Just $ default_LookupNearby_result{lookupNearby_result_success = lookupNearby_result_success obj}
    , if obj == default_LookupNearby_result{lookupNearby_result_e = lookupNearby_result_e obj} then P.Nothing else P.Just $ default_LookupNearby_result{lookupNearby_result_e = lookupNearby_result_e obj}
    ]
from_LookupNearby_result :: LookupNearby_result -> T.ThriftVal
from_LookupNearby_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3550 -> (1, ("e",from_TalkException _v3550))) <$> lookupNearby_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3550 -> P.Just (0, ("success",from_SpotNearbyResponse _v3550))) $ lookupNearby_result_success record
    , (\_v3550 -> (1, ("e",from_TalkException _v3550))) <$> lookupNearby_result_e record
    ]
    )
write_LookupNearby_result :: T.Protocol p => p -> LookupNearby_result -> P.IO ()
write_LookupNearby_result oprot record = T.writeVal oprot $ from_LookupNearby_result record
encode_LookupNearby_result :: T.StatelessProtocol p => p -> LookupNearby_result -> LBS.ByteString
encode_LookupNearby_result oprot record = T.serializeVal oprot $ from_LookupNearby_result record
to_LookupNearby_result :: T.ThriftVal -> LookupNearby_result
to_LookupNearby_result (T.TStruct fields) = LookupNearby_result{
  lookupNearby_result_success = P.maybe (lookupNearby_result_success default_LookupNearby_result) (\(_,_val3552) -> (case _val3552 of {T.TStruct _val3553 -> (to_SpotNearbyResponse (T.TStruct _val3553)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  lookupNearby_result_e = P.maybe (P.Nothing) (\(_,_val3552) -> P.Just (case _val3552 of {T.TStruct _val3554 -> (to_TalkException (T.TStruct _val3554)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_LookupNearby_result _ = P.error "not a struct"
read_LookupNearby_result :: T.Protocol p => p -> P.IO LookupNearby_result
read_LookupNearby_result iprot = to_LookupNearby_result <$> T.readVal iprot (T.T_STRUCT typemap_LookupNearby_result)
decode_LookupNearby_result :: T.StatelessProtocol p => p -> LBS.ByteString -> LookupNearby_result
decode_LookupNearby_result iprot bs = to_LookupNearby_result $ T.deserializeVal iprot (T.T_STRUCT typemap_LookupNearby_result) bs
typemap_LookupNearby_result :: T.TypeMap
typemap_LookupNearby_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SpotNearbyResponse))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_LookupNearby_result :: LookupNearby_result
default_LookupNearby_result = LookupNearby_result{
  lookupNearby_result_success = default_SpotNearbyResponse,
  lookupNearby_result_e = P.Nothing}
process_lookupByPhoneNumber (seqid, iprot, oprot, handler) = do
  args <- read_LookupByPhoneNumber_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.lookupByPhoneNumber handler (lookupByPhoneNumber_args_countryAreaCode args) (lookupByPhoneNumber_args_phoneNumber args)
        let res = default_LookupByPhoneNumber_result{lookupByPhoneNumber_result_success = val}
        T.writeMessage oprot ("lookupByPhoneNumber", T.M_REPLY, seqid) $
          write_LookupByPhoneNumber_result oprot res)
      (\e  -> do
        let res = default_LookupByPhoneNumber_result{lookupByPhoneNumber_result_e = P.Just e}
        T.writeMessage oprot ("lookupByPhoneNumber", T.M_REPLY, seqid) $
          write_LookupByPhoneNumber_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("lookupByPhoneNumber", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_lookupNearby (seqid, iprot, oprot, handler) = do
  args <- read_LookupNearby_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.lookupNearby handler (lookupNearby_args_location args) (lookupNearby_args_category args) (lookupNearby_args_query args) (lookupNearby_args_countryAreaCode args)
        let res = default_LookupNearby_result{lookupNearby_result_success = val}
        T.writeMessage oprot ("lookupNearby", T.M_REPLY, seqid) $
          write_LookupNearby_result oprot res)
      (\e  -> do
        let res = default_LookupNearby_result{lookupNearby_result_e = P.Just e}
        T.writeMessage oprot ("lookupNearby", T.M_REPLY, seqid) $
          write_LookupNearby_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("lookupNearby", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "lookupByPhoneNumber" -> process_lookupByPhoneNumber (seqid,iprot,oprot,handler)
  "lookupNearby" -> process_lookupNearby (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessage oprot (name,T.M_EXCEPTION,seqid) $
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
process handler (iprot, oprot) = do
  T.readMessage iprot (
    proc_ handler (iprot,oprot))
  P.return P.True
