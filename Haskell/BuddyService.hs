{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.11.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module BuddyService where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Line_Types
import qualified BuddyService_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data FindBuddyContactsByQuery_args = FindBuddyContactsByQuery_args  { findBuddyContactsByQuery_args_language :: LT.Text
  , findBuddyContactsByQuery_args_country :: LT.Text
  , findBuddyContactsByQuery_args_query :: LT.Text
  , findBuddyContactsByQuery_args_fromIndex :: I.Int32
  , findBuddyContactsByQuery_args_count :: I.Int32
  , findBuddyContactsByQuery_args_requestSource :: BuddySearchRequestSource
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable FindBuddyContactsByQuery_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` findBuddyContactsByQuery_args_language record   `H.hashWithSalt` findBuddyContactsByQuery_args_country record   `H.hashWithSalt` findBuddyContactsByQuery_args_query record   `H.hashWithSalt` findBuddyContactsByQuery_args_fromIndex record   `H.hashWithSalt` findBuddyContactsByQuery_args_count record   `H.hashWithSalt` findBuddyContactsByQuery_args_requestSource record  
instance QC.Arbitrary FindBuddyContactsByQuery_args where 
  arbitrary = M.liftM FindBuddyContactsByQuery_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_FindBuddyContactsByQuery_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_FindBuddyContactsByQuery_args{findBuddyContactsByQuery_args_language = findBuddyContactsByQuery_args_language obj} then P.Nothing else P.Just $ default_FindBuddyContactsByQuery_args{findBuddyContactsByQuery_args_language = findBuddyContactsByQuery_args_language obj}
    , if obj == default_FindBuddyContactsByQuery_args{findBuddyContactsByQuery_args_country = findBuddyContactsByQuery_args_country obj} then P.Nothing else P.Just $ default_FindBuddyContactsByQuery_args{findBuddyContactsByQuery_args_country = findBuddyContactsByQuery_args_country obj}
    , if obj == default_FindBuddyContactsByQuery_args{findBuddyContactsByQuery_args_query = findBuddyContactsByQuery_args_query obj} then P.Nothing else P.Just $ default_FindBuddyContactsByQuery_args{findBuddyContactsByQuery_args_query = findBuddyContactsByQuery_args_query obj}
    , if obj == default_FindBuddyContactsByQuery_args{findBuddyContactsByQuery_args_fromIndex = findBuddyContactsByQuery_args_fromIndex obj} then P.Nothing else P.Just $ default_FindBuddyContactsByQuery_args{findBuddyContactsByQuery_args_fromIndex = findBuddyContactsByQuery_args_fromIndex obj}
    , if obj == default_FindBuddyContactsByQuery_args{findBuddyContactsByQuery_args_count = findBuddyContactsByQuery_args_count obj} then P.Nothing else P.Just $ default_FindBuddyContactsByQuery_args{findBuddyContactsByQuery_args_count = findBuddyContactsByQuery_args_count obj}
    , if obj == default_FindBuddyContactsByQuery_args{findBuddyContactsByQuery_args_requestSource = findBuddyContactsByQuery_args_requestSource obj} then P.Nothing else P.Just $ default_FindBuddyContactsByQuery_args{findBuddyContactsByQuery_args_requestSource = findBuddyContactsByQuery_args_requestSource obj}
    ]
from_FindBuddyContactsByQuery_args :: FindBuddyContactsByQuery_args -> T.ThriftVal
from_FindBuddyContactsByQuery_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4520 -> P.Just (2, ("language",T.TString $ E.encodeUtf8 _v4520))) $ findBuddyContactsByQuery_args_language record
  , (\_v4520 -> P.Just (3, ("country",T.TString $ E.encodeUtf8 _v4520))) $ findBuddyContactsByQuery_args_country record
  , (\_v4520 -> P.Just (4, ("query",T.TString $ E.encodeUtf8 _v4520))) $ findBuddyContactsByQuery_args_query record
  , (\_v4520 -> P.Just (5, ("fromIndex",T.TI32 _v4520))) $ findBuddyContactsByQuery_args_fromIndex record
  , (\_v4520 -> P.Just (6, ("count",T.TI32 _v4520))) $ findBuddyContactsByQuery_args_count record
  , (\_v4520 -> P.Just (7, ("requestSource",T.TI32 $ P.fromIntegral $ P.fromEnum _v4520))) $ findBuddyContactsByQuery_args_requestSource record
  ]
write_FindBuddyContactsByQuery_args :: T.Protocol p => p -> FindBuddyContactsByQuery_args -> P.IO ()
write_FindBuddyContactsByQuery_args oprot record = T.writeVal oprot $ from_FindBuddyContactsByQuery_args record
encode_FindBuddyContactsByQuery_args :: T.StatelessProtocol p => p -> FindBuddyContactsByQuery_args -> LBS.ByteString
encode_FindBuddyContactsByQuery_args oprot record = T.serializeVal oprot $ from_FindBuddyContactsByQuery_args record
to_FindBuddyContactsByQuery_args :: T.ThriftVal -> FindBuddyContactsByQuery_args
to_FindBuddyContactsByQuery_args (T.TStruct fields) = FindBuddyContactsByQuery_args{
  findBuddyContactsByQuery_args_language = P.maybe (findBuddyContactsByQuery_args_language default_FindBuddyContactsByQuery_args) (\(_,_val4522) -> (case _val4522 of {T.TString _val4523 -> E.decodeUtf8 _val4523; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  findBuddyContactsByQuery_args_country = P.maybe (findBuddyContactsByQuery_args_country default_FindBuddyContactsByQuery_args) (\(_,_val4522) -> (case _val4522 of {T.TString _val4524 -> E.decodeUtf8 _val4524; _ -> P.error "wrong type"})) (Map.lookup (3) fields),
  findBuddyContactsByQuery_args_query = P.maybe (findBuddyContactsByQuery_args_query default_FindBuddyContactsByQuery_args) (\(_,_val4522) -> (case _val4522 of {T.TString _val4525 -> E.decodeUtf8 _val4525; _ -> P.error "wrong type"})) (Map.lookup (4) fields),
  findBuddyContactsByQuery_args_fromIndex = P.maybe (findBuddyContactsByQuery_args_fromIndex default_FindBuddyContactsByQuery_args) (\(_,_val4522) -> (case _val4522 of {T.TI32 _val4526 -> _val4526; _ -> P.error "wrong type"})) (Map.lookup (5) fields),
  findBuddyContactsByQuery_args_count = P.maybe (findBuddyContactsByQuery_args_count default_FindBuddyContactsByQuery_args) (\(_,_val4522) -> (case _val4522 of {T.TI32 _val4527 -> _val4527; _ -> P.error "wrong type"})) (Map.lookup (6) fields),
  findBuddyContactsByQuery_args_requestSource = P.maybe (findBuddyContactsByQuery_args_requestSource default_FindBuddyContactsByQuery_args) (\(_,_val4522) -> (case _val4522 of {T.TI32 _val4528 -> P.toEnum $ P.fromIntegral _val4528; _ -> P.error "wrong type"})) (Map.lookup (7) fields)
  }
to_FindBuddyContactsByQuery_args _ = P.error "not a struct"
read_FindBuddyContactsByQuery_args :: T.Protocol p => p -> P.IO FindBuddyContactsByQuery_args
read_FindBuddyContactsByQuery_args iprot = to_FindBuddyContactsByQuery_args <$> T.readVal iprot (T.T_STRUCT typemap_FindBuddyContactsByQuery_args)
decode_FindBuddyContactsByQuery_args :: T.StatelessProtocol p => p -> LBS.ByteString -> FindBuddyContactsByQuery_args
decode_FindBuddyContactsByQuery_args iprot bs = to_FindBuddyContactsByQuery_args $ T.deserializeVal iprot (T.T_STRUCT typemap_FindBuddyContactsByQuery_args) bs
typemap_FindBuddyContactsByQuery_args :: T.TypeMap
typemap_FindBuddyContactsByQuery_args = Map.fromList [(2,("language",T.T_STRING)),(3,("country",T.T_STRING)),(4,("query",T.T_STRING)),(5,("fromIndex",T.T_I32)),(6,("count",T.T_I32)),(7,("requestSource",T.T_I32))]
default_FindBuddyContactsByQuery_args :: FindBuddyContactsByQuery_args
default_FindBuddyContactsByQuery_args = FindBuddyContactsByQuery_args{
  findBuddyContactsByQuery_args_language = "",
  findBuddyContactsByQuery_args_country = "",
  findBuddyContactsByQuery_args_query = "",
  findBuddyContactsByQuery_args_fromIndex = 0,
  findBuddyContactsByQuery_args_count = 0,
  findBuddyContactsByQuery_args_requestSource = (P.toEnum 0)}
data FindBuddyContactsByQuery_result = FindBuddyContactsByQuery_result  { findBuddyContactsByQuery_result_success :: (Vector.Vector BuddySearchResult)
  , findBuddyContactsByQuery_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable FindBuddyContactsByQuery_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` findBuddyContactsByQuery_result_success record   `H.hashWithSalt` findBuddyContactsByQuery_result_e record  
instance QC.Arbitrary FindBuddyContactsByQuery_result where 
  arbitrary = M.liftM FindBuddyContactsByQuery_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_FindBuddyContactsByQuery_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_FindBuddyContactsByQuery_result{findBuddyContactsByQuery_result_success = findBuddyContactsByQuery_result_success obj} then P.Nothing else P.Just $ default_FindBuddyContactsByQuery_result{findBuddyContactsByQuery_result_success = findBuddyContactsByQuery_result_success obj}
    , if obj == default_FindBuddyContactsByQuery_result{findBuddyContactsByQuery_result_e = findBuddyContactsByQuery_result_e obj} then P.Nothing else P.Just $ default_FindBuddyContactsByQuery_result{findBuddyContactsByQuery_result_e = findBuddyContactsByQuery_result_e obj}
    ]
from_FindBuddyContactsByQuery_result :: FindBuddyContactsByQuery_result -> T.ThriftVal
from_FindBuddyContactsByQuery_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4531 -> (1, ("e",from_TalkException _v4531))) <$> findBuddyContactsByQuery_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4531 -> P.Just (0, ("success",T.TList (T.T_STRUCT typemap_BuddySearchResult) $ P.map (\_v4533 -> from_BuddySearchResult _v4533) $ Vector.toList _v4531))) $ findBuddyContactsByQuery_result_success record
    , (\_v4531 -> (1, ("e",from_TalkException _v4531))) <$> findBuddyContactsByQuery_result_e record
    ]
    )
write_FindBuddyContactsByQuery_result :: T.Protocol p => p -> FindBuddyContactsByQuery_result -> P.IO ()
write_FindBuddyContactsByQuery_result oprot record = T.writeVal oprot $ from_FindBuddyContactsByQuery_result record
encode_FindBuddyContactsByQuery_result :: T.StatelessProtocol p => p -> FindBuddyContactsByQuery_result -> LBS.ByteString
encode_FindBuddyContactsByQuery_result oprot record = T.serializeVal oprot $ from_FindBuddyContactsByQuery_result record
to_FindBuddyContactsByQuery_result :: T.ThriftVal -> FindBuddyContactsByQuery_result
to_FindBuddyContactsByQuery_result (T.TStruct fields) = FindBuddyContactsByQuery_result{
  findBuddyContactsByQuery_result_success = P.maybe (findBuddyContactsByQuery_result_success default_FindBuddyContactsByQuery_result) (\(_,_val4535) -> (case _val4535 of {T.TList _ _val4536 -> (Vector.fromList $ P.map (\_v4537 -> (case _v4537 of {T.TStruct _val4538 -> (to_BuddySearchResult (T.TStruct _val4538)); _ -> P.error "wrong type"})) _val4536); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  findBuddyContactsByQuery_result_e = P.maybe (P.Nothing) (\(_,_val4535) -> P.Just (case _val4535 of {T.TStruct _val4539 -> (to_TalkException (T.TStruct _val4539)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_FindBuddyContactsByQuery_result _ = P.error "not a struct"
read_FindBuddyContactsByQuery_result :: T.Protocol p => p -> P.IO FindBuddyContactsByQuery_result
read_FindBuddyContactsByQuery_result iprot = to_FindBuddyContactsByQuery_result <$> T.readVal iprot (T.T_STRUCT typemap_FindBuddyContactsByQuery_result)
decode_FindBuddyContactsByQuery_result :: T.StatelessProtocol p => p -> LBS.ByteString -> FindBuddyContactsByQuery_result
decode_FindBuddyContactsByQuery_result iprot bs = to_FindBuddyContactsByQuery_result $ T.deserializeVal iprot (T.T_STRUCT typemap_FindBuddyContactsByQuery_result) bs
typemap_FindBuddyContactsByQuery_result :: T.TypeMap
typemap_FindBuddyContactsByQuery_result = Map.fromList [(0,("success",(T.T_LIST (T.T_STRUCT typemap_BuddySearchResult)))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_FindBuddyContactsByQuery_result :: FindBuddyContactsByQuery_result
default_FindBuddyContactsByQuery_result = FindBuddyContactsByQuery_result{
  findBuddyContactsByQuery_result_success = Vector.empty,
  findBuddyContactsByQuery_result_e = P.Nothing}
data GetBuddyContacts_args = GetBuddyContacts_args  { getBuddyContacts_args_language :: LT.Text
  , getBuddyContacts_args_country :: LT.Text
  , getBuddyContacts_args_classification :: LT.Text
  , getBuddyContacts_args_fromIndex :: I.Int32
  , getBuddyContacts_args_count :: I.Int32
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBuddyContacts_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getBuddyContacts_args_language record   `H.hashWithSalt` getBuddyContacts_args_country record   `H.hashWithSalt` getBuddyContacts_args_classification record   `H.hashWithSalt` getBuddyContacts_args_fromIndex record   `H.hashWithSalt` getBuddyContacts_args_count record  
instance QC.Arbitrary GetBuddyContacts_args where 
  arbitrary = M.liftM GetBuddyContacts_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_GetBuddyContacts_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetBuddyContacts_args{getBuddyContacts_args_language = getBuddyContacts_args_language obj} then P.Nothing else P.Just $ default_GetBuddyContacts_args{getBuddyContacts_args_language = getBuddyContacts_args_language obj}
    , if obj == default_GetBuddyContacts_args{getBuddyContacts_args_country = getBuddyContacts_args_country obj} then P.Nothing else P.Just $ default_GetBuddyContacts_args{getBuddyContacts_args_country = getBuddyContacts_args_country obj}
    , if obj == default_GetBuddyContacts_args{getBuddyContacts_args_classification = getBuddyContacts_args_classification obj} then P.Nothing else P.Just $ default_GetBuddyContacts_args{getBuddyContacts_args_classification = getBuddyContacts_args_classification obj}
    , if obj == default_GetBuddyContacts_args{getBuddyContacts_args_fromIndex = getBuddyContacts_args_fromIndex obj} then P.Nothing else P.Just $ default_GetBuddyContacts_args{getBuddyContacts_args_fromIndex = getBuddyContacts_args_fromIndex obj}
    , if obj == default_GetBuddyContacts_args{getBuddyContacts_args_count = getBuddyContacts_args_count obj} then P.Nothing else P.Just $ default_GetBuddyContacts_args{getBuddyContacts_args_count = getBuddyContacts_args_count obj}
    ]
from_GetBuddyContacts_args :: GetBuddyContacts_args -> T.ThriftVal
from_GetBuddyContacts_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4542 -> P.Just (2, ("language",T.TString $ E.encodeUtf8 _v4542))) $ getBuddyContacts_args_language record
  , (\_v4542 -> P.Just (3, ("country",T.TString $ E.encodeUtf8 _v4542))) $ getBuddyContacts_args_country record
  , (\_v4542 -> P.Just (4, ("classification",T.TString $ E.encodeUtf8 _v4542))) $ getBuddyContacts_args_classification record
  , (\_v4542 -> P.Just (5, ("fromIndex",T.TI32 _v4542))) $ getBuddyContacts_args_fromIndex record
  , (\_v4542 -> P.Just (6, ("count",T.TI32 _v4542))) $ getBuddyContacts_args_count record
  ]
write_GetBuddyContacts_args :: T.Protocol p => p -> GetBuddyContacts_args -> P.IO ()
write_GetBuddyContacts_args oprot record = T.writeVal oprot $ from_GetBuddyContacts_args record
encode_GetBuddyContacts_args :: T.StatelessProtocol p => p -> GetBuddyContacts_args -> LBS.ByteString
encode_GetBuddyContacts_args oprot record = T.serializeVal oprot $ from_GetBuddyContacts_args record
to_GetBuddyContacts_args :: T.ThriftVal -> GetBuddyContacts_args
to_GetBuddyContacts_args (T.TStruct fields) = GetBuddyContacts_args{
  getBuddyContacts_args_language = P.maybe (getBuddyContacts_args_language default_GetBuddyContacts_args) (\(_,_val4544) -> (case _val4544 of {T.TString _val4545 -> E.decodeUtf8 _val4545; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  getBuddyContacts_args_country = P.maybe (getBuddyContacts_args_country default_GetBuddyContacts_args) (\(_,_val4544) -> (case _val4544 of {T.TString _val4546 -> E.decodeUtf8 _val4546; _ -> P.error "wrong type"})) (Map.lookup (3) fields),
  getBuddyContacts_args_classification = P.maybe (getBuddyContacts_args_classification default_GetBuddyContacts_args) (\(_,_val4544) -> (case _val4544 of {T.TString _val4547 -> E.decodeUtf8 _val4547; _ -> P.error "wrong type"})) (Map.lookup (4) fields),
  getBuddyContacts_args_fromIndex = P.maybe (getBuddyContacts_args_fromIndex default_GetBuddyContacts_args) (\(_,_val4544) -> (case _val4544 of {T.TI32 _val4548 -> _val4548; _ -> P.error "wrong type"})) (Map.lookup (5) fields),
  getBuddyContacts_args_count = P.maybe (getBuddyContacts_args_count default_GetBuddyContacts_args) (\(_,_val4544) -> (case _val4544 of {T.TI32 _val4549 -> _val4549; _ -> P.error "wrong type"})) (Map.lookup (6) fields)
  }
to_GetBuddyContacts_args _ = P.error "not a struct"
read_GetBuddyContacts_args :: T.Protocol p => p -> P.IO GetBuddyContacts_args
read_GetBuddyContacts_args iprot = to_GetBuddyContacts_args <$> T.readVal iprot (T.T_STRUCT typemap_GetBuddyContacts_args)
decode_GetBuddyContacts_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBuddyContacts_args
decode_GetBuddyContacts_args iprot bs = to_GetBuddyContacts_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBuddyContacts_args) bs
typemap_GetBuddyContacts_args :: T.TypeMap
typemap_GetBuddyContacts_args = Map.fromList [(2,("language",T.T_STRING)),(3,("country",T.T_STRING)),(4,("classification",T.T_STRING)),(5,("fromIndex",T.T_I32)),(6,("count",T.T_I32))]
default_GetBuddyContacts_args :: GetBuddyContacts_args
default_GetBuddyContacts_args = GetBuddyContacts_args{
  getBuddyContacts_args_language = "",
  getBuddyContacts_args_country = "",
  getBuddyContacts_args_classification = "",
  getBuddyContacts_args_fromIndex = 0,
  getBuddyContacts_args_count = 0}
data GetBuddyContacts_result = GetBuddyContacts_result  { getBuddyContacts_result_success :: (Vector.Vector Contact)
  , getBuddyContacts_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBuddyContacts_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getBuddyContacts_result_success record   `H.hashWithSalt` getBuddyContacts_result_e record  
instance QC.Arbitrary GetBuddyContacts_result where 
  arbitrary = M.liftM GetBuddyContacts_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetBuddyContacts_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetBuddyContacts_result{getBuddyContacts_result_success = getBuddyContacts_result_success obj} then P.Nothing else P.Just $ default_GetBuddyContacts_result{getBuddyContacts_result_success = getBuddyContacts_result_success obj}
    , if obj == default_GetBuddyContacts_result{getBuddyContacts_result_e = getBuddyContacts_result_e obj} then P.Nothing else P.Just $ default_GetBuddyContacts_result{getBuddyContacts_result_e = getBuddyContacts_result_e obj}
    ]
from_GetBuddyContacts_result :: GetBuddyContacts_result -> T.ThriftVal
from_GetBuddyContacts_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4552 -> (1, ("e",from_TalkException _v4552))) <$> getBuddyContacts_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4552 -> P.Just (0, ("success",T.TList (T.T_STRUCT typemap_Contact) $ P.map (\_v4554 -> from_Contact _v4554) $ Vector.toList _v4552))) $ getBuddyContacts_result_success record
    , (\_v4552 -> (1, ("e",from_TalkException _v4552))) <$> getBuddyContacts_result_e record
    ]
    )
write_GetBuddyContacts_result :: T.Protocol p => p -> GetBuddyContacts_result -> P.IO ()
write_GetBuddyContacts_result oprot record = T.writeVal oprot $ from_GetBuddyContacts_result record
encode_GetBuddyContacts_result :: T.StatelessProtocol p => p -> GetBuddyContacts_result -> LBS.ByteString
encode_GetBuddyContacts_result oprot record = T.serializeVal oprot $ from_GetBuddyContacts_result record
to_GetBuddyContacts_result :: T.ThriftVal -> GetBuddyContacts_result
to_GetBuddyContacts_result (T.TStruct fields) = GetBuddyContacts_result{
  getBuddyContacts_result_success = P.maybe (getBuddyContacts_result_success default_GetBuddyContacts_result) (\(_,_val4556) -> (case _val4556 of {T.TList _ _val4557 -> (Vector.fromList $ P.map (\_v4558 -> (case _v4558 of {T.TStruct _val4559 -> (to_Contact (T.TStruct _val4559)); _ -> P.error "wrong type"})) _val4557); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getBuddyContacts_result_e = P.maybe (P.Nothing) (\(_,_val4556) -> P.Just (case _val4556 of {T.TStruct _val4560 -> (to_TalkException (T.TStruct _val4560)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetBuddyContacts_result _ = P.error "not a struct"
read_GetBuddyContacts_result :: T.Protocol p => p -> P.IO GetBuddyContacts_result
read_GetBuddyContacts_result iprot = to_GetBuddyContacts_result <$> T.readVal iprot (T.T_STRUCT typemap_GetBuddyContacts_result)
decode_GetBuddyContacts_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBuddyContacts_result
decode_GetBuddyContacts_result iprot bs = to_GetBuddyContacts_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBuddyContacts_result) bs
typemap_GetBuddyContacts_result :: T.TypeMap
typemap_GetBuddyContacts_result = Map.fromList [(0,("success",(T.T_LIST (T.T_STRUCT typemap_Contact)))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetBuddyContacts_result :: GetBuddyContacts_result
default_GetBuddyContacts_result = GetBuddyContacts_result{
  getBuddyContacts_result_success = Vector.empty,
  getBuddyContacts_result_e = P.Nothing}
data GetBuddyDetail_args = GetBuddyDetail_args  { getBuddyDetail_args_buddyMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBuddyDetail_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getBuddyDetail_args_buddyMid record  
instance QC.Arbitrary GetBuddyDetail_args where 
  arbitrary = M.liftM GetBuddyDetail_args (QC.arbitrary)
  shrink obj | obj == default_GetBuddyDetail_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetBuddyDetail_args{getBuddyDetail_args_buddyMid = getBuddyDetail_args_buddyMid obj} then P.Nothing else P.Just $ default_GetBuddyDetail_args{getBuddyDetail_args_buddyMid = getBuddyDetail_args_buddyMid obj}
    ]
from_GetBuddyDetail_args :: GetBuddyDetail_args -> T.ThriftVal
from_GetBuddyDetail_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4563 -> P.Just (4, ("buddyMid",T.TString $ E.encodeUtf8 _v4563))) $ getBuddyDetail_args_buddyMid record
  ]
write_GetBuddyDetail_args :: T.Protocol p => p -> GetBuddyDetail_args -> P.IO ()
write_GetBuddyDetail_args oprot record = T.writeVal oprot $ from_GetBuddyDetail_args record
encode_GetBuddyDetail_args :: T.StatelessProtocol p => p -> GetBuddyDetail_args -> LBS.ByteString
encode_GetBuddyDetail_args oprot record = T.serializeVal oprot $ from_GetBuddyDetail_args record
to_GetBuddyDetail_args :: T.ThriftVal -> GetBuddyDetail_args
to_GetBuddyDetail_args (T.TStruct fields) = GetBuddyDetail_args{
  getBuddyDetail_args_buddyMid = P.maybe (getBuddyDetail_args_buddyMid default_GetBuddyDetail_args) (\(_,_val4565) -> (case _val4565 of {T.TString _val4566 -> E.decodeUtf8 _val4566; _ -> P.error "wrong type"})) (Map.lookup (4) fields)
  }
to_GetBuddyDetail_args _ = P.error "not a struct"
read_GetBuddyDetail_args :: T.Protocol p => p -> P.IO GetBuddyDetail_args
read_GetBuddyDetail_args iprot = to_GetBuddyDetail_args <$> T.readVal iprot (T.T_STRUCT typemap_GetBuddyDetail_args)
decode_GetBuddyDetail_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBuddyDetail_args
decode_GetBuddyDetail_args iprot bs = to_GetBuddyDetail_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBuddyDetail_args) bs
typemap_GetBuddyDetail_args :: T.TypeMap
typemap_GetBuddyDetail_args = Map.fromList [(4,("buddyMid",T.T_STRING))]
default_GetBuddyDetail_args :: GetBuddyDetail_args
default_GetBuddyDetail_args = GetBuddyDetail_args{
  getBuddyDetail_args_buddyMid = ""}
data GetBuddyDetail_result = GetBuddyDetail_result  { getBuddyDetail_result_success :: BuddyDetail
  , getBuddyDetail_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBuddyDetail_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getBuddyDetail_result_success record   `H.hashWithSalt` getBuddyDetail_result_e record  
instance QC.Arbitrary GetBuddyDetail_result where 
  arbitrary = M.liftM GetBuddyDetail_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetBuddyDetail_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetBuddyDetail_result{getBuddyDetail_result_success = getBuddyDetail_result_success obj} then P.Nothing else P.Just $ default_GetBuddyDetail_result{getBuddyDetail_result_success = getBuddyDetail_result_success obj}
    , if obj == default_GetBuddyDetail_result{getBuddyDetail_result_e = getBuddyDetail_result_e obj} then P.Nothing else P.Just $ default_GetBuddyDetail_result{getBuddyDetail_result_e = getBuddyDetail_result_e obj}
    ]
from_GetBuddyDetail_result :: GetBuddyDetail_result -> T.ThriftVal
from_GetBuddyDetail_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4569 -> (1, ("e",from_TalkException _v4569))) <$> getBuddyDetail_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4569 -> P.Just (0, ("success",from_BuddyDetail _v4569))) $ getBuddyDetail_result_success record
    , (\_v4569 -> (1, ("e",from_TalkException _v4569))) <$> getBuddyDetail_result_e record
    ]
    )
write_GetBuddyDetail_result :: T.Protocol p => p -> GetBuddyDetail_result -> P.IO ()
write_GetBuddyDetail_result oprot record = T.writeVal oprot $ from_GetBuddyDetail_result record
encode_GetBuddyDetail_result :: T.StatelessProtocol p => p -> GetBuddyDetail_result -> LBS.ByteString
encode_GetBuddyDetail_result oprot record = T.serializeVal oprot $ from_GetBuddyDetail_result record
to_GetBuddyDetail_result :: T.ThriftVal -> GetBuddyDetail_result
to_GetBuddyDetail_result (T.TStruct fields) = GetBuddyDetail_result{
  getBuddyDetail_result_success = P.maybe (getBuddyDetail_result_success default_GetBuddyDetail_result) (\(_,_val4571) -> (case _val4571 of {T.TStruct _val4572 -> (to_BuddyDetail (T.TStruct _val4572)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getBuddyDetail_result_e = P.maybe (P.Nothing) (\(_,_val4571) -> P.Just (case _val4571 of {T.TStruct _val4573 -> (to_TalkException (T.TStruct _val4573)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetBuddyDetail_result _ = P.error "not a struct"
read_GetBuddyDetail_result :: T.Protocol p => p -> P.IO GetBuddyDetail_result
read_GetBuddyDetail_result iprot = to_GetBuddyDetail_result <$> T.readVal iprot (T.T_STRUCT typemap_GetBuddyDetail_result)
decode_GetBuddyDetail_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBuddyDetail_result
decode_GetBuddyDetail_result iprot bs = to_GetBuddyDetail_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBuddyDetail_result) bs
typemap_GetBuddyDetail_result :: T.TypeMap
typemap_GetBuddyDetail_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_BuddyDetail))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetBuddyDetail_result :: GetBuddyDetail_result
default_GetBuddyDetail_result = GetBuddyDetail_result{
  getBuddyDetail_result_success = default_BuddyDetail,
  getBuddyDetail_result_e = P.Nothing}
data GetBuddyOnAir_args = GetBuddyOnAir_args  { getBuddyOnAir_args_buddyMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBuddyOnAir_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getBuddyOnAir_args_buddyMid record  
instance QC.Arbitrary GetBuddyOnAir_args where 
  arbitrary = M.liftM GetBuddyOnAir_args (QC.arbitrary)
  shrink obj | obj == default_GetBuddyOnAir_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetBuddyOnAir_args{getBuddyOnAir_args_buddyMid = getBuddyOnAir_args_buddyMid obj} then P.Nothing else P.Just $ default_GetBuddyOnAir_args{getBuddyOnAir_args_buddyMid = getBuddyOnAir_args_buddyMid obj}
    ]
from_GetBuddyOnAir_args :: GetBuddyOnAir_args -> T.ThriftVal
from_GetBuddyOnAir_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4576 -> P.Just (4, ("buddyMid",T.TString $ E.encodeUtf8 _v4576))) $ getBuddyOnAir_args_buddyMid record
  ]
write_GetBuddyOnAir_args :: T.Protocol p => p -> GetBuddyOnAir_args -> P.IO ()
write_GetBuddyOnAir_args oprot record = T.writeVal oprot $ from_GetBuddyOnAir_args record
encode_GetBuddyOnAir_args :: T.StatelessProtocol p => p -> GetBuddyOnAir_args -> LBS.ByteString
encode_GetBuddyOnAir_args oprot record = T.serializeVal oprot $ from_GetBuddyOnAir_args record
to_GetBuddyOnAir_args :: T.ThriftVal -> GetBuddyOnAir_args
to_GetBuddyOnAir_args (T.TStruct fields) = GetBuddyOnAir_args{
  getBuddyOnAir_args_buddyMid = P.maybe (getBuddyOnAir_args_buddyMid default_GetBuddyOnAir_args) (\(_,_val4578) -> (case _val4578 of {T.TString _val4579 -> E.decodeUtf8 _val4579; _ -> P.error "wrong type"})) (Map.lookup (4) fields)
  }
to_GetBuddyOnAir_args _ = P.error "not a struct"
read_GetBuddyOnAir_args :: T.Protocol p => p -> P.IO GetBuddyOnAir_args
read_GetBuddyOnAir_args iprot = to_GetBuddyOnAir_args <$> T.readVal iprot (T.T_STRUCT typemap_GetBuddyOnAir_args)
decode_GetBuddyOnAir_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBuddyOnAir_args
decode_GetBuddyOnAir_args iprot bs = to_GetBuddyOnAir_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBuddyOnAir_args) bs
typemap_GetBuddyOnAir_args :: T.TypeMap
typemap_GetBuddyOnAir_args = Map.fromList [(4,("buddyMid",T.T_STRING))]
default_GetBuddyOnAir_args :: GetBuddyOnAir_args
default_GetBuddyOnAir_args = GetBuddyOnAir_args{
  getBuddyOnAir_args_buddyMid = ""}
data GetBuddyOnAir_result = GetBuddyOnAir_result  { getBuddyOnAir_result_success :: BuddyOnAir
  , getBuddyOnAir_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBuddyOnAir_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getBuddyOnAir_result_success record   `H.hashWithSalt` getBuddyOnAir_result_e record  
instance QC.Arbitrary GetBuddyOnAir_result where 
  arbitrary = M.liftM GetBuddyOnAir_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetBuddyOnAir_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetBuddyOnAir_result{getBuddyOnAir_result_success = getBuddyOnAir_result_success obj} then P.Nothing else P.Just $ default_GetBuddyOnAir_result{getBuddyOnAir_result_success = getBuddyOnAir_result_success obj}
    , if obj == default_GetBuddyOnAir_result{getBuddyOnAir_result_e = getBuddyOnAir_result_e obj} then P.Nothing else P.Just $ default_GetBuddyOnAir_result{getBuddyOnAir_result_e = getBuddyOnAir_result_e obj}
    ]
from_GetBuddyOnAir_result :: GetBuddyOnAir_result -> T.ThriftVal
from_GetBuddyOnAir_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4582 -> (1, ("e",from_TalkException _v4582))) <$> getBuddyOnAir_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4582 -> P.Just (0, ("success",from_BuddyOnAir _v4582))) $ getBuddyOnAir_result_success record
    , (\_v4582 -> (1, ("e",from_TalkException _v4582))) <$> getBuddyOnAir_result_e record
    ]
    )
write_GetBuddyOnAir_result :: T.Protocol p => p -> GetBuddyOnAir_result -> P.IO ()
write_GetBuddyOnAir_result oprot record = T.writeVal oprot $ from_GetBuddyOnAir_result record
encode_GetBuddyOnAir_result :: T.StatelessProtocol p => p -> GetBuddyOnAir_result -> LBS.ByteString
encode_GetBuddyOnAir_result oprot record = T.serializeVal oprot $ from_GetBuddyOnAir_result record
to_GetBuddyOnAir_result :: T.ThriftVal -> GetBuddyOnAir_result
to_GetBuddyOnAir_result (T.TStruct fields) = GetBuddyOnAir_result{
  getBuddyOnAir_result_success = P.maybe (getBuddyOnAir_result_success default_GetBuddyOnAir_result) (\(_,_val4584) -> (case _val4584 of {T.TStruct _val4585 -> (to_BuddyOnAir (T.TStruct _val4585)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getBuddyOnAir_result_e = P.maybe (P.Nothing) (\(_,_val4584) -> P.Just (case _val4584 of {T.TStruct _val4586 -> (to_TalkException (T.TStruct _val4586)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetBuddyOnAir_result _ = P.error "not a struct"
read_GetBuddyOnAir_result :: T.Protocol p => p -> P.IO GetBuddyOnAir_result
read_GetBuddyOnAir_result iprot = to_GetBuddyOnAir_result <$> T.readVal iprot (T.T_STRUCT typemap_GetBuddyOnAir_result)
decode_GetBuddyOnAir_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBuddyOnAir_result
decode_GetBuddyOnAir_result iprot bs = to_GetBuddyOnAir_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBuddyOnAir_result) bs
typemap_GetBuddyOnAir_result :: T.TypeMap
typemap_GetBuddyOnAir_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_BuddyOnAir))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetBuddyOnAir_result :: GetBuddyOnAir_result
default_GetBuddyOnAir_result = GetBuddyOnAir_result{
  getBuddyOnAir_result_success = default_BuddyOnAir,
  getBuddyOnAir_result_e = P.Nothing}
data GetCountriesHavingBuddy_args = GetCountriesHavingBuddy_args deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetCountriesHavingBuddy_args where
  hashWithSalt salt record = salt  
instance QC.Arbitrary GetCountriesHavingBuddy_args where 
  arbitrary = QC.elements [GetCountriesHavingBuddy_args]
from_GetCountriesHavingBuddy_args :: GetCountriesHavingBuddy_args -> T.ThriftVal
from_GetCountriesHavingBuddy_args record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_GetCountriesHavingBuddy_args :: T.Protocol p => p -> GetCountriesHavingBuddy_args -> P.IO ()
write_GetCountriesHavingBuddy_args oprot record = T.writeVal oprot $ from_GetCountriesHavingBuddy_args record
encode_GetCountriesHavingBuddy_args :: T.StatelessProtocol p => p -> GetCountriesHavingBuddy_args -> LBS.ByteString
encode_GetCountriesHavingBuddy_args oprot record = T.serializeVal oprot $ from_GetCountriesHavingBuddy_args record
to_GetCountriesHavingBuddy_args :: T.ThriftVal -> GetCountriesHavingBuddy_args
to_GetCountriesHavingBuddy_args (T.TStruct fields) = GetCountriesHavingBuddy_args{

  }
to_GetCountriesHavingBuddy_args _ = P.error "not a struct"
read_GetCountriesHavingBuddy_args :: T.Protocol p => p -> P.IO GetCountriesHavingBuddy_args
read_GetCountriesHavingBuddy_args iprot = to_GetCountriesHavingBuddy_args <$> T.readVal iprot (T.T_STRUCT typemap_GetCountriesHavingBuddy_args)
decode_GetCountriesHavingBuddy_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetCountriesHavingBuddy_args
decode_GetCountriesHavingBuddy_args iprot bs = to_GetCountriesHavingBuddy_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetCountriesHavingBuddy_args) bs
typemap_GetCountriesHavingBuddy_args :: T.TypeMap
typemap_GetCountriesHavingBuddy_args = Map.fromList []
default_GetCountriesHavingBuddy_args :: GetCountriesHavingBuddy_args
default_GetCountriesHavingBuddy_args = GetCountriesHavingBuddy_args{
}
data GetCountriesHavingBuddy_result = GetCountriesHavingBuddy_result  { getCountriesHavingBuddy_result_success :: (Vector.Vector LT.Text)
  , getCountriesHavingBuddy_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetCountriesHavingBuddy_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getCountriesHavingBuddy_result_success record   `H.hashWithSalt` getCountriesHavingBuddy_result_e record  
instance QC.Arbitrary GetCountriesHavingBuddy_result where 
  arbitrary = M.liftM GetCountriesHavingBuddy_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetCountriesHavingBuddy_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetCountriesHavingBuddy_result{getCountriesHavingBuddy_result_success = getCountriesHavingBuddy_result_success obj} then P.Nothing else P.Just $ default_GetCountriesHavingBuddy_result{getCountriesHavingBuddy_result_success = getCountriesHavingBuddy_result_success obj}
    , if obj == default_GetCountriesHavingBuddy_result{getCountriesHavingBuddy_result_e = getCountriesHavingBuddy_result_e obj} then P.Nothing else P.Just $ default_GetCountriesHavingBuddy_result{getCountriesHavingBuddy_result_e = getCountriesHavingBuddy_result_e obj}
    ]
from_GetCountriesHavingBuddy_result :: GetCountriesHavingBuddy_result -> T.ThriftVal
from_GetCountriesHavingBuddy_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4594 -> (1, ("e",from_TalkException _v4594))) <$> getCountriesHavingBuddy_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4594 -> P.Just (0, ("success",T.TList T.T_STRING $ P.map (\_v4596 -> T.TString $ E.encodeUtf8 _v4596) $ Vector.toList _v4594))) $ getCountriesHavingBuddy_result_success record
    , (\_v4594 -> (1, ("e",from_TalkException _v4594))) <$> getCountriesHavingBuddy_result_e record
    ]
    )
write_GetCountriesHavingBuddy_result :: T.Protocol p => p -> GetCountriesHavingBuddy_result -> P.IO ()
write_GetCountriesHavingBuddy_result oprot record = T.writeVal oprot $ from_GetCountriesHavingBuddy_result record
encode_GetCountriesHavingBuddy_result :: T.StatelessProtocol p => p -> GetCountriesHavingBuddy_result -> LBS.ByteString
encode_GetCountriesHavingBuddy_result oprot record = T.serializeVal oprot $ from_GetCountriesHavingBuddy_result record
to_GetCountriesHavingBuddy_result :: T.ThriftVal -> GetCountriesHavingBuddy_result
to_GetCountriesHavingBuddy_result (T.TStruct fields) = GetCountriesHavingBuddy_result{
  getCountriesHavingBuddy_result_success = P.maybe (getCountriesHavingBuddy_result_success default_GetCountriesHavingBuddy_result) (\(_,_val4598) -> (case _val4598 of {T.TList _ _val4599 -> (Vector.fromList $ P.map (\_v4600 -> (case _v4600 of {T.TString _val4601 -> E.decodeUtf8 _val4601; _ -> P.error "wrong type"})) _val4599); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getCountriesHavingBuddy_result_e = P.maybe (P.Nothing) (\(_,_val4598) -> P.Just (case _val4598 of {T.TStruct _val4602 -> (to_TalkException (T.TStruct _val4602)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetCountriesHavingBuddy_result _ = P.error "not a struct"
read_GetCountriesHavingBuddy_result :: T.Protocol p => p -> P.IO GetCountriesHavingBuddy_result
read_GetCountriesHavingBuddy_result iprot = to_GetCountriesHavingBuddy_result <$> T.readVal iprot (T.T_STRUCT typemap_GetCountriesHavingBuddy_result)
decode_GetCountriesHavingBuddy_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetCountriesHavingBuddy_result
decode_GetCountriesHavingBuddy_result iprot bs = to_GetCountriesHavingBuddy_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetCountriesHavingBuddy_result) bs
typemap_GetCountriesHavingBuddy_result :: T.TypeMap
typemap_GetCountriesHavingBuddy_result = Map.fromList [(0,("success",(T.T_LIST T.T_STRING))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetCountriesHavingBuddy_result :: GetCountriesHavingBuddy_result
default_GetCountriesHavingBuddy_result = GetCountriesHavingBuddy_result{
  getCountriesHavingBuddy_result_success = Vector.empty,
  getCountriesHavingBuddy_result_e = P.Nothing}
data GetNewlyReleasedBuddyIds_args = GetNewlyReleasedBuddyIds_args  { getNewlyReleasedBuddyIds_args_country :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetNewlyReleasedBuddyIds_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getNewlyReleasedBuddyIds_args_country record  
instance QC.Arbitrary GetNewlyReleasedBuddyIds_args where 
  arbitrary = M.liftM GetNewlyReleasedBuddyIds_args (QC.arbitrary)
  shrink obj | obj == default_GetNewlyReleasedBuddyIds_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetNewlyReleasedBuddyIds_args{getNewlyReleasedBuddyIds_args_country = getNewlyReleasedBuddyIds_args_country obj} then P.Nothing else P.Just $ default_GetNewlyReleasedBuddyIds_args{getNewlyReleasedBuddyIds_args_country = getNewlyReleasedBuddyIds_args_country obj}
    ]
from_GetNewlyReleasedBuddyIds_args :: GetNewlyReleasedBuddyIds_args -> T.ThriftVal
from_GetNewlyReleasedBuddyIds_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4605 -> P.Just (3, ("country",T.TString $ E.encodeUtf8 _v4605))) $ getNewlyReleasedBuddyIds_args_country record
  ]
write_GetNewlyReleasedBuddyIds_args :: T.Protocol p => p -> GetNewlyReleasedBuddyIds_args -> P.IO ()
write_GetNewlyReleasedBuddyIds_args oprot record = T.writeVal oprot $ from_GetNewlyReleasedBuddyIds_args record
encode_GetNewlyReleasedBuddyIds_args :: T.StatelessProtocol p => p -> GetNewlyReleasedBuddyIds_args -> LBS.ByteString
encode_GetNewlyReleasedBuddyIds_args oprot record = T.serializeVal oprot $ from_GetNewlyReleasedBuddyIds_args record
to_GetNewlyReleasedBuddyIds_args :: T.ThriftVal -> GetNewlyReleasedBuddyIds_args
to_GetNewlyReleasedBuddyIds_args (T.TStruct fields) = GetNewlyReleasedBuddyIds_args{
  getNewlyReleasedBuddyIds_args_country = P.maybe (getNewlyReleasedBuddyIds_args_country default_GetNewlyReleasedBuddyIds_args) (\(_,_val4607) -> (case _val4607 of {T.TString _val4608 -> E.decodeUtf8 _val4608; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_GetNewlyReleasedBuddyIds_args _ = P.error "not a struct"
read_GetNewlyReleasedBuddyIds_args :: T.Protocol p => p -> P.IO GetNewlyReleasedBuddyIds_args
read_GetNewlyReleasedBuddyIds_args iprot = to_GetNewlyReleasedBuddyIds_args <$> T.readVal iprot (T.T_STRUCT typemap_GetNewlyReleasedBuddyIds_args)
decode_GetNewlyReleasedBuddyIds_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetNewlyReleasedBuddyIds_args
decode_GetNewlyReleasedBuddyIds_args iprot bs = to_GetNewlyReleasedBuddyIds_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetNewlyReleasedBuddyIds_args) bs
typemap_GetNewlyReleasedBuddyIds_args :: T.TypeMap
typemap_GetNewlyReleasedBuddyIds_args = Map.fromList [(3,("country",T.T_STRING))]
default_GetNewlyReleasedBuddyIds_args :: GetNewlyReleasedBuddyIds_args
default_GetNewlyReleasedBuddyIds_args = GetNewlyReleasedBuddyIds_args{
  getNewlyReleasedBuddyIds_args_country = ""}
data GetNewlyReleasedBuddyIds_result = GetNewlyReleasedBuddyIds_result  { getNewlyReleasedBuddyIds_result_success :: (Map.HashMap LT.Text I.Int64)
  , getNewlyReleasedBuddyIds_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetNewlyReleasedBuddyIds_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getNewlyReleasedBuddyIds_result_success record   `H.hashWithSalt` getNewlyReleasedBuddyIds_result_e record  
instance QC.Arbitrary GetNewlyReleasedBuddyIds_result where 
  arbitrary = M.liftM GetNewlyReleasedBuddyIds_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetNewlyReleasedBuddyIds_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetNewlyReleasedBuddyIds_result{getNewlyReleasedBuddyIds_result_success = getNewlyReleasedBuddyIds_result_success obj} then P.Nothing else P.Just $ default_GetNewlyReleasedBuddyIds_result{getNewlyReleasedBuddyIds_result_success = getNewlyReleasedBuddyIds_result_success obj}
    , if obj == default_GetNewlyReleasedBuddyIds_result{getNewlyReleasedBuddyIds_result_e = getNewlyReleasedBuddyIds_result_e obj} then P.Nothing else P.Just $ default_GetNewlyReleasedBuddyIds_result{getNewlyReleasedBuddyIds_result_e = getNewlyReleasedBuddyIds_result_e obj}
    ]
from_GetNewlyReleasedBuddyIds_result :: GetNewlyReleasedBuddyIds_result -> T.ThriftVal
from_GetNewlyReleasedBuddyIds_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4611 -> (1, ("e",from_TalkException _v4611))) <$> getNewlyReleasedBuddyIds_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4611 -> P.Just (0, ("success",T.TMap T.T_STRING T.T_I64 $ P.map (\(_k4612,_v4613) -> (T.TString $ E.encodeUtf8 _k4612, T.TI64 _v4613)) $ Map.toList _v4611))) $ getNewlyReleasedBuddyIds_result_success record
    , (\_v4611 -> (1, ("e",from_TalkException _v4611))) <$> getNewlyReleasedBuddyIds_result_e record
    ]
    )
write_GetNewlyReleasedBuddyIds_result :: T.Protocol p => p -> GetNewlyReleasedBuddyIds_result -> P.IO ()
write_GetNewlyReleasedBuddyIds_result oprot record = T.writeVal oprot $ from_GetNewlyReleasedBuddyIds_result record
encode_GetNewlyReleasedBuddyIds_result :: T.StatelessProtocol p => p -> GetNewlyReleasedBuddyIds_result -> LBS.ByteString
encode_GetNewlyReleasedBuddyIds_result oprot record = T.serializeVal oprot $ from_GetNewlyReleasedBuddyIds_result record
to_GetNewlyReleasedBuddyIds_result :: T.ThriftVal -> GetNewlyReleasedBuddyIds_result
to_GetNewlyReleasedBuddyIds_result (T.TStruct fields) = GetNewlyReleasedBuddyIds_result{
  getNewlyReleasedBuddyIds_result_success = P.maybe (getNewlyReleasedBuddyIds_result_success default_GetNewlyReleasedBuddyIds_result) (\(_,_val4615) -> (case _val4615 of {T.TMap _ _ _val4616 -> (Map.fromList $ P.map (\(_k4618,_v4617) -> ((case _k4618 of {T.TString _val4619 -> E.decodeUtf8 _val4619; _ -> P.error "wrong type"}),(case _v4617 of {T.TI64 _val4620 -> _val4620; _ -> P.error "wrong type"}))) _val4616); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getNewlyReleasedBuddyIds_result_e = P.maybe (P.Nothing) (\(_,_val4615) -> P.Just (case _val4615 of {T.TStruct _val4621 -> (to_TalkException (T.TStruct _val4621)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetNewlyReleasedBuddyIds_result _ = P.error "not a struct"
read_GetNewlyReleasedBuddyIds_result :: T.Protocol p => p -> P.IO GetNewlyReleasedBuddyIds_result
read_GetNewlyReleasedBuddyIds_result iprot = to_GetNewlyReleasedBuddyIds_result <$> T.readVal iprot (T.T_STRUCT typemap_GetNewlyReleasedBuddyIds_result)
decode_GetNewlyReleasedBuddyIds_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetNewlyReleasedBuddyIds_result
decode_GetNewlyReleasedBuddyIds_result iprot bs = to_GetNewlyReleasedBuddyIds_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetNewlyReleasedBuddyIds_result) bs
typemap_GetNewlyReleasedBuddyIds_result :: T.TypeMap
typemap_GetNewlyReleasedBuddyIds_result = Map.fromList [(0,("success",(T.T_MAP T.T_STRING T.T_I64))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetNewlyReleasedBuddyIds_result :: GetNewlyReleasedBuddyIds_result
default_GetNewlyReleasedBuddyIds_result = GetNewlyReleasedBuddyIds_result{
  getNewlyReleasedBuddyIds_result_success = Map.empty,
  getNewlyReleasedBuddyIds_result_e = P.Nothing}
data GetPopularBuddyBanner_args = GetPopularBuddyBanner_args  { getPopularBuddyBanner_args_language :: LT.Text
  , getPopularBuddyBanner_args_country :: LT.Text
  , getPopularBuddyBanner_args_applicationType :: ApplicationType
  , getPopularBuddyBanner_args_resourceSpecification :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetPopularBuddyBanner_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getPopularBuddyBanner_args_language record   `H.hashWithSalt` getPopularBuddyBanner_args_country record   `H.hashWithSalt` getPopularBuddyBanner_args_applicationType record   `H.hashWithSalt` getPopularBuddyBanner_args_resourceSpecification record  
instance QC.Arbitrary GetPopularBuddyBanner_args where 
  arbitrary = M.liftM GetPopularBuddyBanner_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_GetPopularBuddyBanner_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetPopularBuddyBanner_args{getPopularBuddyBanner_args_language = getPopularBuddyBanner_args_language obj} then P.Nothing else P.Just $ default_GetPopularBuddyBanner_args{getPopularBuddyBanner_args_language = getPopularBuddyBanner_args_language obj}
    , if obj == default_GetPopularBuddyBanner_args{getPopularBuddyBanner_args_country = getPopularBuddyBanner_args_country obj} then P.Nothing else P.Just $ default_GetPopularBuddyBanner_args{getPopularBuddyBanner_args_country = getPopularBuddyBanner_args_country obj}
    , if obj == default_GetPopularBuddyBanner_args{getPopularBuddyBanner_args_applicationType = getPopularBuddyBanner_args_applicationType obj} then P.Nothing else P.Just $ default_GetPopularBuddyBanner_args{getPopularBuddyBanner_args_applicationType = getPopularBuddyBanner_args_applicationType obj}
    , if obj == default_GetPopularBuddyBanner_args{getPopularBuddyBanner_args_resourceSpecification = getPopularBuddyBanner_args_resourceSpecification obj} then P.Nothing else P.Just $ default_GetPopularBuddyBanner_args{getPopularBuddyBanner_args_resourceSpecification = getPopularBuddyBanner_args_resourceSpecification obj}
    ]
from_GetPopularBuddyBanner_args :: GetPopularBuddyBanner_args -> T.ThriftVal
from_GetPopularBuddyBanner_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4624 -> P.Just (2, ("language",T.TString $ E.encodeUtf8 _v4624))) $ getPopularBuddyBanner_args_language record
  , (\_v4624 -> P.Just (3, ("country",T.TString $ E.encodeUtf8 _v4624))) $ getPopularBuddyBanner_args_country record
  , (\_v4624 -> P.Just (4, ("applicationType",T.TI32 $ P.fromIntegral $ P.fromEnum _v4624))) $ getPopularBuddyBanner_args_applicationType record
  , (\_v4624 -> P.Just (5, ("resourceSpecification",T.TString $ E.encodeUtf8 _v4624))) $ getPopularBuddyBanner_args_resourceSpecification record
  ]
write_GetPopularBuddyBanner_args :: T.Protocol p => p -> GetPopularBuddyBanner_args -> P.IO ()
write_GetPopularBuddyBanner_args oprot record = T.writeVal oprot $ from_GetPopularBuddyBanner_args record
encode_GetPopularBuddyBanner_args :: T.StatelessProtocol p => p -> GetPopularBuddyBanner_args -> LBS.ByteString
encode_GetPopularBuddyBanner_args oprot record = T.serializeVal oprot $ from_GetPopularBuddyBanner_args record
to_GetPopularBuddyBanner_args :: T.ThriftVal -> GetPopularBuddyBanner_args
to_GetPopularBuddyBanner_args (T.TStruct fields) = GetPopularBuddyBanner_args{
  getPopularBuddyBanner_args_language = P.maybe (getPopularBuddyBanner_args_language default_GetPopularBuddyBanner_args) (\(_,_val4626) -> (case _val4626 of {T.TString _val4627 -> E.decodeUtf8 _val4627; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  getPopularBuddyBanner_args_country = P.maybe (getPopularBuddyBanner_args_country default_GetPopularBuddyBanner_args) (\(_,_val4626) -> (case _val4626 of {T.TString _val4628 -> E.decodeUtf8 _val4628; _ -> P.error "wrong type"})) (Map.lookup (3) fields),
  getPopularBuddyBanner_args_applicationType = P.maybe (getPopularBuddyBanner_args_applicationType default_GetPopularBuddyBanner_args) (\(_,_val4626) -> (case _val4626 of {T.TI32 _val4629 -> P.toEnum $ P.fromIntegral _val4629; _ -> P.error "wrong type"})) (Map.lookup (4) fields),
  getPopularBuddyBanner_args_resourceSpecification = P.maybe (getPopularBuddyBanner_args_resourceSpecification default_GetPopularBuddyBanner_args) (\(_,_val4626) -> (case _val4626 of {T.TString _val4630 -> E.decodeUtf8 _val4630; _ -> P.error "wrong type"})) (Map.lookup (5) fields)
  }
to_GetPopularBuddyBanner_args _ = P.error "not a struct"
read_GetPopularBuddyBanner_args :: T.Protocol p => p -> P.IO GetPopularBuddyBanner_args
read_GetPopularBuddyBanner_args iprot = to_GetPopularBuddyBanner_args <$> T.readVal iprot (T.T_STRUCT typemap_GetPopularBuddyBanner_args)
decode_GetPopularBuddyBanner_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetPopularBuddyBanner_args
decode_GetPopularBuddyBanner_args iprot bs = to_GetPopularBuddyBanner_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetPopularBuddyBanner_args) bs
typemap_GetPopularBuddyBanner_args :: T.TypeMap
typemap_GetPopularBuddyBanner_args = Map.fromList [(2,("language",T.T_STRING)),(3,("country",T.T_STRING)),(4,("applicationType",T.T_I32)),(5,("resourceSpecification",T.T_STRING))]
default_GetPopularBuddyBanner_args :: GetPopularBuddyBanner_args
default_GetPopularBuddyBanner_args = GetPopularBuddyBanner_args{
  getPopularBuddyBanner_args_language = "",
  getPopularBuddyBanner_args_country = "",
  getPopularBuddyBanner_args_applicationType = (P.toEnum 0),
  getPopularBuddyBanner_args_resourceSpecification = ""}
data GetPopularBuddyBanner_result = GetPopularBuddyBanner_result  { getPopularBuddyBanner_result_success :: BuddyBanner
  , getPopularBuddyBanner_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetPopularBuddyBanner_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getPopularBuddyBanner_result_success record   `H.hashWithSalt` getPopularBuddyBanner_result_e record  
instance QC.Arbitrary GetPopularBuddyBanner_result where 
  arbitrary = M.liftM GetPopularBuddyBanner_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetPopularBuddyBanner_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetPopularBuddyBanner_result{getPopularBuddyBanner_result_success = getPopularBuddyBanner_result_success obj} then P.Nothing else P.Just $ default_GetPopularBuddyBanner_result{getPopularBuddyBanner_result_success = getPopularBuddyBanner_result_success obj}
    , if obj == default_GetPopularBuddyBanner_result{getPopularBuddyBanner_result_e = getPopularBuddyBanner_result_e obj} then P.Nothing else P.Just $ default_GetPopularBuddyBanner_result{getPopularBuddyBanner_result_e = getPopularBuddyBanner_result_e obj}
    ]
from_GetPopularBuddyBanner_result :: GetPopularBuddyBanner_result -> T.ThriftVal
from_GetPopularBuddyBanner_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4633 -> (1, ("e",from_TalkException _v4633))) <$> getPopularBuddyBanner_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4633 -> P.Just (0, ("success",from_BuddyBanner _v4633))) $ getPopularBuddyBanner_result_success record
    , (\_v4633 -> (1, ("e",from_TalkException _v4633))) <$> getPopularBuddyBanner_result_e record
    ]
    )
write_GetPopularBuddyBanner_result :: T.Protocol p => p -> GetPopularBuddyBanner_result -> P.IO ()
write_GetPopularBuddyBanner_result oprot record = T.writeVal oprot $ from_GetPopularBuddyBanner_result record
encode_GetPopularBuddyBanner_result :: T.StatelessProtocol p => p -> GetPopularBuddyBanner_result -> LBS.ByteString
encode_GetPopularBuddyBanner_result oprot record = T.serializeVal oprot $ from_GetPopularBuddyBanner_result record
to_GetPopularBuddyBanner_result :: T.ThriftVal -> GetPopularBuddyBanner_result
to_GetPopularBuddyBanner_result (T.TStruct fields) = GetPopularBuddyBanner_result{
  getPopularBuddyBanner_result_success = P.maybe (getPopularBuddyBanner_result_success default_GetPopularBuddyBanner_result) (\(_,_val4635) -> (case _val4635 of {T.TStruct _val4636 -> (to_BuddyBanner (T.TStruct _val4636)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getPopularBuddyBanner_result_e = P.maybe (P.Nothing) (\(_,_val4635) -> P.Just (case _val4635 of {T.TStruct _val4637 -> (to_TalkException (T.TStruct _val4637)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetPopularBuddyBanner_result _ = P.error "not a struct"
read_GetPopularBuddyBanner_result :: T.Protocol p => p -> P.IO GetPopularBuddyBanner_result
read_GetPopularBuddyBanner_result iprot = to_GetPopularBuddyBanner_result <$> T.readVal iprot (T.T_STRUCT typemap_GetPopularBuddyBanner_result)
decode_GetPopularBuddyBanner_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetPopularBuddyBanner_result
decode_GetPopularBuddyBanner_result iprot bs = to_GetPopularBuddyBanner_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetPopularBuddyBanner_result) bs
typemap_GetPopularBuddyBanner_result :: T.TypeMap
typemap_GetPopularBuddyBanner_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_BuddyBanner))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetPopularBuddyBanner_result :: GetPopularBuddyBanner_result
default_GetPopularBuddyBanner_result = GetPopularBuddyBanner_result{
  getPopularBuddyBanner_result_success = default_BuddyBanner,
  getPopularBuddyBanner_result_e = P.Nothing}
data GetPopularBuddyLists_args = GetPopularBuddyLists_args  { getPopularBuddyLists_args_language :: LT.Text
  , getPopularBuddyLists_args_country :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetPopularBuddyLists_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getPopularBuddyLists_args_language record   `H.hashWithSalt` getPopularBuddyLists_args_country record  
instance QC.Arbitrary GetPopularBuddyLists_args where 
  arbitrary = M.liftM GetPopularBuddyLists_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_GetPopularBuddyLists_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetPopularBuddyLists_args{getPopularBuddyLists_args_language = getPopularBuddyLists_args_language obj} then P.Nothing else P.Just $ default_GetPopularBuddyLists_args{getPopularBuddyLists_args_language = getPopularBuddyLists_args_language obj}
    , if obj == default_GetPopularBuddyLists_args{getPopularBuddyLists_args_country = getPopularBuddyLists_args_country obj} then P.Nothing else P.Just $ default_GetPopularBuddyLists_args{getPopularBuddyLists_args_country = getPopularBuddyLists_args_country obj}
    ]
from_GetPopularBuddyLists_args :: GetPopularBuddyLists_args -> T.ThriftVal
from_GetPopularBuddyLists_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4640 -> P.Just (2, ("language",T.TString $ E.encodeUtf8 _v4640))) $ getPopularBuddyLists_args_language record
  , (\_v4640 -> P.Just (3, ("country",T.TString $ E.encodeUtf8 _v4640))) $ getPopularBuddyLists_args_country record
  ]
write_GetPopularBuddyLists_args :: T.Protocol p => p -> GetPopularBuddyLists_args -> P.IO ()
write_GetPopularBuddyLists_args oprot record = T.writeVal oprot $ from_GetPopularBuddyLists_args record
encode_GetPopularBuddyLists_args :: T.StatelessProtocol p => p -> GetPopularBuddyLists_args -> LBS.ByteString
encode_GetPopularBuddyLists_args oprot record = T.serializeVal oprot $ from_GetPopularBuddyLists_args record
to_GetPopularBuddyLists_args :: T.ThriftVal -> GetPopularBuddyLists_args
to_GetPopularBuddyLists_args (T.TStruct fields) = GetPopularBuddyLists_args{
  getPopularBuddyLists_args_language = P.maybe (getPopularBuddyLists_args_language default_GetPopularBuddyLists_args) (\(_,_val4642) -> (case _val4642 of {T.TString _val4643 -> E.decodeUtf8 _val4643; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  getPopularBuddyLists_args_country = P.maybe (getPopularBuddyLists_args_country default_GetPopularBuddyLists_args) (\(_,_val4642) -> (case _val4642 of {T.TString _val4644 -> E.decodeUtf8 _val4644; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_GetPopularBuddyLists_args _ = P.error "not a struct"
read_GetPopularBuddyLists_args :: T.Protocol p => p -> P.IO GetPopularBuddyLists_args
read_GetPopularBuddyLists_args iprot = to_GetPopularBuddyLists_args <$> T.readVal iprot (T.T_STRUCT typemap_GetPopularBuddyLists_args)
decode_GetPopularBuddyLists_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetPopularBuddyLists_args
decode_GetPopularBuddyLists_args iprot bs = to_GetPopularBuddyLists_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetPopularBuddyLists_args) bs
typemap_GetPopularBuddyLists_args :: T.TypeMap
typemap_GetPopularBuddyLists_args = Map.fromList [(2,("language",T.T_STRING)),(3,("country",T.T_STRING))]
default_GetPopularBuddyLists_args :: GetPopularBuddyLists_args
default_GetPopularBuddyLists_args = GetPopularBuddyLists_args{
  getPopularBuddyLists_args_language = "",
  getPopularBuddyLists_args_country = ""}
data GetPopularBuddyLists_result = GetPopularBuddyLists_result  { getPopularBuddyLists_result_success :: (Vector.Vector BuddyList)
  , getPopularBuddyLists_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetPopularBuddyLists_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getPopularBuddyLists_result_success record   `H.hashWithSalt` getPopularBuddyLists_result_e record  
instance QC.Arbitrary GetPopularBuddyLists_result where 
  arbitrary = M.liftM GetPopularBuddyLists_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetPopularBuddyLists_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetPopularBuddyLists_result{getPopularBuddyLists_result_success = getPopularBuddyLists_result_success obj} then P.Nothing else P.Just $ default_GetPopularBuddyLists_result{getPopularBuddyLists_result_success = getPopularBuddyLists_result_success obj}
    , if obj == default_GetPopularBuddyLists_result{getPopularBuddyLists_result_e = getPopularBuddyLists_result_e obj} then P.Nothing else P.Just $ default_GetPopularBuddyLists_result{getPopularBuddyLists_result_e = getPopularBuddyLists_result_e obj}
    ]
from_GetPopularBuddyLists_result :: GetPopularBuddyLists_result -> T.ThriftVal
from_GetPopularBuddyLists_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4647 -> (1, ("e",from_TalkException _v4647))) <$> getPopularBuddyLists_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4647 -> P.Just (0, ("success",T.TList (T.T_STRUCT typemap_BuddyList) $ P.map (\_v4649 -> from_BuddyList _v4649) $ Vector.toList _v4647))) $ getPopularBuddyLists_result_success record
    , (\_v4647 -> (1, ("e",from_TalkException _v4647))) <$> getPopularBuddyLists_result_e record
    ]
    )
write_GetPopularBuddyLists_result :: T.Protocol p => p -> GetPopularBuddyLists_result -> P.IO ()
write_GetPopularBuddyLists_result oprot record = T.writeVal oprot $ from_GetPopularBuddyLists_result record
encode_GetPopularBuddyLists_result :: T.StatelessProtocol p => p -> GetPopularBuddyLists_result -> LBS.ByteString
encode_GetPopularBuddyLists_result oprot record = T.serializeVal oprot $ from_GetPopularBuddyLists_result record
to_GetPopularBuddyLists_result :: T.ThriftVal -> GetPopularBuddyLists_result
to_GetPopularBuddyLists_result (T.TStruct fields) = GetPopularBuddyLists_result{
  getPopularBuddyLists_result_success = P.maybe (getPopularBuddyLists_result_success default_GetPopularBuddyLists_result) (\(_,_val4651) -> (case _val4651 of {T.TList _ _val4652 -> (Vector.fromList $ P.map (\_v4653 -> (case _v4653 of {T.TStruct _val4654 -> (to_BuddyList (T.TStruct _val4654)); _ -> P.error "wrong type"})) _val4652); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getPopularBuddyLists_result_e = P.maybe (P.Nothing) (\(_,_val4651) -> P.Just (case _val4651 of {T.TStruct _val4655 -> (to_TalkException (T.TStruct _val4655)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetPopularBuddyLists_result _ = P.error "not a struct"
read_GetPopularBuddyLists_result :: T.Protocol p => p -> P.IO GetPopularBuddyLists_result
read_GetPopularBuddyLists_result iprot = to_GetPopularBuddyLists_result <$> T.readVal iprot (T.T_STRUCT typemap_GetPopularBuddyLists_result)
decode_GetPopularBuddyLists_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetPopularBuddyLists_result
decode_GetPopularBuddyLists_result iprot bs = to_GetPopularBuddyLists_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetPopularBuddyLists_result) bs
typemap_GetPopularBuddyLists_result :: T.TypeMap
typemap_GetPopularBuddyLists_result = Map.fromList [(0,("success",(T.T_LIST (T.T_STRUCT typemap_BuddyList)))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetPopularBuddyLists_result :: GetPopularBuddyLists_result
default_GetPopularBuddyLists_result = GetPopularBuddyLists_result{
  getPopularBuddyLists_result_success = Vector.empty,
  getPopularBuddyLists_result_e = P.Nothing}
data GetPromotedBuddyContacts_args = GetPromotedBuddyContacts_args  { getPromotedBuddyContacts_args_language :: LT.Text
  , getPromotedBuddyContacts_args_country :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetPromotedBuddyContacts_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getPromotedBuddyContacts_args_language record   `H.hashWithSalt` getPromotedBuddyContacts_args_country record  
instance QC.Arbitrary GetPromotedBuddyContacts_args where 
  arbitrary = M.liftM GetPromotedBuddyContacts_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_GetPromotedBuddyContacts_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetPromotedBuddyContacts_args{getPromotedBuddyContacts_args_language = getPromotedBuddyContacts_args_language obj} then P.Nothing else P.Just $ default_GetPromotedBuddyContacts_args{getPromotedBuddyContacts_args_language = getPromotedBuddyContacts_args_language obj}
    , if obj == default_GetPromotedBuddyContacts_args{getPromotedBuddyContacts_args_country = getPromotedBuddyContacts_args_country obj} then P.Nothing else P.Just $ default_GetPromotedBuddyContacts_args{getPromotedBuddyContacts_args_country = getPromotedBuddyContacts_args_country obj}
    ]
from_GetPromotedBuddyContacts_args :: GetPromotedBuddyContacts_args -> T.ThriftVal
from_GetPromotedBuddyContacts_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4658 -> P.Just (2, ("language",T.TString $ E.encodeUtf8 _v4658))) $ getPromotedBuddyContacts_args_language record
  , (\_v4658 -> P.Just (3, ("country",T.TString $ E.encodeUtf8 _v4658))) $ getPromotedBuddyContacts_args_country record
  ]
write_GetPromotedBuddyContacts_args :: T.Protocol p => p -> GetPromotedBuddyContacts_args -> P.IO ()
write_GetPromotedBuddyContacts_args oprot record = T.writeVal oprot $ from_GetPromotedBuddyContacts_args record
encode_GetPromotedBuddyContacts_args :: T.StatelessProtocol p => p -> GetPromotedBuddyContacts_args -> LBS.ByteString
encode_GetPromotedBuddyContacts_args oprot record = T.serializeVal oprot $ from_GetPromotedBuddyContacts_args record
to_GetPromotedBuddyContacts_args :: T.ThriftVal -> GetPromotedBuddyContacts_args
to_GetPromotedBuddyContacts_args (T.TStruct fields) = GetPromotedBuddyContacts_args{
  getPromotedBuddyContacts_args_language = P.maybe (getPromotedBuddyContacts_args_language default_GetPromotedBuddyContacts_args) (\(_,_val4660) -> (case _val4660 of {T.TString _val4661 -> E.decodeUtf8 _val4661; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  getPromotedBuddyContacts_args_country = P.maybe (getPromotedBuddyContacts_args_country default_GetPromotedBuddyContacts_args) (\(_,_val4660) -> (case _val4660 of {T.TString _val4662 -> E.decodeUtf8 _val4662; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_GetPromotedBuddyContacts_args _ = P.error "not a struct"
read_GetPromotedBuddyContacts_args :: T.Protocol p => p -> P.IO GetPromotedBuddyContacts_args
read_GetPromotedBuddyContacts_args iprot = to_GetPromotedBuddyContacts_args <$> T.readVal iprot (T.T_STRUCT typemap_GetPromotedBuddyContacts_args)
decode_GetPromotedBuddyContacts_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetPromotedBuddyContacts_args
decode_GetPromotedBuddyContacts_args iprot bs = to_GetPromotedBuddyContacts_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetPromotedBuddyContacts_args) bs
typemap_GetPromotedBuddyContacts_args :: T.TypeMap
typemap_GetPromotedBuddyContacts_args = Map.fromList [(2,("language",T.T_STRING)),(3,("country",T.T_STRING))]
default_GetPromotedBuddyContacts_args :: GetPromotedBuddyContacts_args
default_GetPromotedBuddyContacts_args = GetPromotedBuddyContacts_args{
  getPromotedBuddyContacts_args_language = "",
  getPromotedBuddyContacts_args_country = ""}
data GetPromotedBuddyContacts_result = GetPromotedBuddyContacts_result  { getPromotedBuddyContacts_result_success :: (Vector.Vector Contact)
  , getPromotedBuddyContacts_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetPromotedBuddyContacts_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getPromotedBuddyContacts_result_success record   `H.hashWithSalt` getPromotedBuddyContacts_result_e record  
instance QC.Arbitrary GetPromotedBuddyContacts_result where 
  arbitrary = M.liftM GetPromotedBuddyContacts_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetPromotedBuddyContacts_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetPromotedBuddyContacts_result{getPromotedBuddyContacts_result_success = getPromotedBuddyContacts_result_success obj} then P.Nothing else P.Just $ default_GetPromotedBuddyContacts_result{getPromotedBuddyContacts_result_success = getPromotedBuddyContacts_result_success obj}
    , if obj == default_GetPromotedBuddyContacts_result{getPromotedBuddyContacts_result_e = getPromotedBuddyContacts_result_e obj} then P.Nothing else P.Just $ default_GetPromotedBuddyContacts_result{getPromotedBuddyContacts_result_e = getPromotedBuddyContacts_result_e obj}
    ]
from_GetPromotedBuddyContacts_result :: GetPromotedBuddyContacts_result -> T.ThriftVal
from_GetPromotedBuddyContacts_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4665 -> (1, ("e",from_TalkException _v4665))) <$> getPromotedBuddyContacts_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4665 -> P.Just (0, ("success",T.TList (T.T_STRUCT typemap_Contact) $ P.map (\_v4667 -> from_Contact _v4667) $ Vector.toList _v4665))) $ getPromotedBuddyContacts_result_success record
    , (\_v4665 -> (1, ("e",from_TalkException _v4665))) <$> getPromotedBuddyContacts_result_e record
    ]
    )
write_GetPromotedBuddyContacts_result :: T.Protocol p => p -> GetPromotedBuddyContacts_result -> P.IO ()
write_GetPromotedBuddyContacts_result oprot record = T.writeVal oprot $ from_GetPromotedBuddyContacts_result record
encode_GetPromotedBuddyContacts_result :: T.StatelessProtocol p => p -> GetPromotedBuddyContacts_result -> LBS.ByteString
encode_GetPromotedBuddyContacts_result oprot record = T.serializeVal oprot $ from_GetPromotedBuddyContacts_result record
to_GetPromotedBuddyContacts_result :: T.ThriftVal -> GetPromotedBuddyContacts_result
to_GetPromotedBuddyContacts_result (T.TStruct fields) = GetPromotedBuddyContacts_result{
  getPromotedBuddyContacts_result_success = P.maybe (getPromotedBuddyContacts_result_success default_GetPromotedBuddyContacts_result) (\(_,_val4669) -> (case _val4669 of {T.TList _ _val4670 -> (Vector.fromList $ P.map (\_v4671 -> (case _v4671 of {T.TStruct _val4672 -> (to_Contact (T.TStruct _val4672)); _ -> P.error "wrong type"})) _val4670); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getPromotedBuddyContacts_result_e = P.maybe (P.Nothing) (\(_,_val4669) -> P.Just (case _val4669 of {T.TStruct _val4673 -> (to_TalkException (T.TStruct _val4673)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetPromotedBuddyContacts_result _ = P.error "not a struct"
read_GetPromotedBuddyContacts_result :: T.Protocol p => p -> P.IO GetPromotedBuddyContacts_result
read_GetPromotedBuddyContacts_result iprot = to_GetPromotedBuddyContacts_result <$> T.readVal iprot (T.T_STRUCT typemap_GetPromotedBuddyContacts_result)
decode_GetPromotedBuddyContacts_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetPromotedBuddyContacts_result
decode_GetPromotedBuddyContacts_result iprot bs = to_GetPromotedBuddyContacts_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetPromotedBuddyContacts_result) bs
typemap_GetPromotedBuddyContacts_result :: T.TypeMap
typemap_GetPromotedBuddyContacts_result = Map.fromList [(0,("success",(T.T_LIST (T.T_STRUCT typemap_Contact)))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetPromotedBuddyContacts_result :: GetPromotedBuddyContacts_result
default_GetPromotedBuddyContacts_result = GetPromotedBuddyContacts_result{
  getPromotedBuddyContacts_result_success = Vector.empty,
  getPromotedBuddyContacts_result_e = P.Nothing}
process_findBuddyContactsByQuery (seqid, iprot, oprot, handler) = do
  args <- read_FindBuddyContactsByQuery_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.findBuddyContactsByQuery handler (findBuddyContactsByQuery_args_language args) (findBuddyContactsByQuery_args_country args) (findBuddyContactsByQuery_args_query args) (findBuddyContactsByQuery_args_fromIndex args) (findBuddyContactsByQuery_args_count args) (findBuddyContactsByQuery_args_requestSource args)
        let res = default_FindBuddyContactsByQuery_result{findBuddyContactsByQuery_result_success = val}
        T.writeMessage oprot ("findBuddyContactsByQuery", T.M_REPLY, seqid) $
          write_FindBuddyContactsByQuery_result oprot res)
      (\e  -> do
        let res = default_FindBuddyContactsByQuery_result{findBuddyContactsByQuery_result_e = P.Just e}
        T.writeMessage oprot ("findBuddyContactsByQuery", T.M_REPLY, seqid) $
          write_FindBuddyContactsByQuery_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("findBuddyContactsByQuery", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getBuddyContacts (seqid, iprot, oprot, handler) = do
  args <- read_GetBuddyContacts_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getBuddyContacts handler (getBuddyContacts_args_language args) (getBuddyContacts_args_country args) (getBuddyContacts_args_classification args) (getBuddyContacts_args_fromIndex args) (getBuddyContacts_args_count args)
        let res = default_GetBuddyContacts_result{getBuddyContacts_result_success = val}
        T.writeMessage oprot ("getBuddyContacts", T.M_REPLY, seqid) $
          write_GetBuddyContacts_result oprot res)
      (\e  -> do
        let res = default_GetBuddyContacts_result{getBuddyContacts_result_e = P.Just e}
        T.writeMessage oprot ("getBuddyContacts", T.M_REPLY, seqid) $
          write_GetBuddyContacts_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getBuddyContacts", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getBuddyDetail (seqid, iprot, oprot, handler) = do
  args <- read_GetBuddyDetail_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getBuddyDetail handler (getBuddyDetail_args_buddyMid args)
        let res = default_GetBuddyDetail_result{getBuddyDetail_result_success = val}
        T.writeMessage oprot ("getBuddyDetail", T.M_REPLY, seqid) $
          write_GetBuddyDetail_result oprot res)
      (\e  -> do
        let res = default_GetBuddyDetail_result{getBuddyDetail_result_e = P.Just e}
        T.writeMessage oprot ("getBuddyDetail", T.M_REPLY, seqid) $
          write_GetBuddyDetail_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getBuddyDetail", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getBuddyOnAir (seqid, iprot, oprot, handler) = do
  args <- read_GetBuddyOnAir_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getBuddyOnAir handler (getBuddyOnAir_args_buddyMid args)
        let res = default_GetBuddyOnAir_result{getBuddyOnAir_result_success = val}
        T.writeMessage oprot ("getBuddyOnAir", T.M_REPLY, seqid) $
          write_GetBuddyOnAir_result oprot res)
      (\e  -> do
        let res = default_GetBuddyOnAir_result{getBuddyOnAir_result_e = P.Just e}
        T.writeMessage oprot ("getBuddyOnAir", T.M_REPLY, seqid) $
          write_GetBuddyOnAir_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getBuddyOnAir", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getCountriesHavingBuddy (seqid, iprot, oprot, handler) = do
  args <- read_GetCountriesHavingBuddy_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getCountriesHavingBuddy handler
        let res = default_GetCountriesHavingBuddy_result{getCountriesHavingBuddy_result_success = val}
        T.writeMessage oprot ("getCountriesHavingBuddy", T.M_REPLY, seqid) $
          write_GetCountriesHavingBuddy_result oprot res)
      (\e  -> do
        let res = default_GetCountriesHavingBuddy_result{getCountriesHavingBuddy_result_e = P.Just e}
        T.writeMessage oprot ("getCountriesHavingBuddy", T.M_REPLY, seqid) $
          write_GetCountriesHavingBuddy_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getCountriesHavingBuddy", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getNewlyReleasedBuddyIds (seqid, iprot, oprot, handler) = do
  args <- read_GetNewlyReleasedBuddyIds_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getNewlyReleasedBuddyIds handler (getNewlyReleasedBuddyIds_args_country args)
        let res = default_GetNewlyReleasedBuddyIds_result{getNewlyReleasedBuddyIds_result_success = val}
        T.writeMessage oprot ("getNewlyReleasedBuddyIds", T.M_REPLY, seqid) $
          write_GetNewlyReleasedBuddyIds_result oprot res)
      (\e  -> do
        let res = default_GetNewlyReleasedBuddyIds_result{getNewlyReleasedBuddyIds_result_e = P.Just e}
        T.writeMessage oprot ("getNewlyReleasedBuddyIds", T.M_REPLY, seqid) $
          write_GetNewlyReleasedBuddyIds_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getNewlyReleasedBuddyIds", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getPopularBuddyBanner (seqid, iprot, oprot, handler) = do
  args <- read_GetPopularBuddyBanner_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getPopularBuddyBanner handler (getPopularBuddyBanner_args_language args) (getPopularBuddyBanner_args_country args) (getPopularBuddyBanner_args_applicationType args) (getPopularBuddyBanner_args_resourceSpecification args)
        let res = default_GetPopularBuddyBanner_result{getPopularBuddyBanner_result_success = val}
        T.writeMessage oprot ("getPopularBuddyBanner", T.M_REPLY, seqid) $
          write_GetPopularBuddyBanner_result oprot res)
      (\e  -> do
        let res = default_GetPopularBuddyBanner_result{getPopularBuddyBanner_result_e = P.Just e}
        T.writeMessage oprot ("getPopularBuddyBanner", T.M_REPLY, seqid) $
          write_GetPopularBuddyBanner_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getPopularBuddyBanner", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getPopularBuddyLists (seqid, iprot, oprot, handler) = do
  args <- read_GetPopularBuddyLists_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getPopularBuddyLists handler (getPopularBuddyLists_args_language args) (getPopularBuddyLists_args_country args)
        let res = default_GetPopularBuddyLists_result{getPopularBuddyLists_result_success = val}
        T.writeMessage oprot ("getPopularBuddyLists", T.M_REPLY, seqid) $
          write_GetPopularBuddyLists_result oprot res)
      (\e  -> do
        let res = default_GetPopularBuddyLists_result{getPopularBuddyLists_result_e = P.Just e}
        T.writeMessage oprot ("getPopularBuddyLists", T.M_REPLY, seqid) $
          write_GetPopularBuddyLists_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getPopularBuddyLists", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getPromotedBuddyContacts (seqid, iprot, oprot, handler) = do
  args <- read_GetPromotedBuddyContacts_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getPromotedBuddyContacts handler (getPromotedBuddyContacts_args_language args) (getPromotedBuddyContacts_args_country args)
        let res = default_GetPromotedBuddyContacts_result{getPromotedBuddyContacts_result_success = val}
        T.writeMessage oprot ("getPromotedBuddyContacts", T.M_REPLY, seqid) $
          write_GetPromotedBuddyContacts_result oprot res)
      (\e  -> do
        let res = default_GetPromotedBuddyContacts_result{getPromotedBuddyContacts_result_e = P.Just e}
        T.writeMessage oprot ("getPromotedBuddyContacts", T.M_REPLY, seqid) $
          write_GetPromotedBuddyContacts_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getPromotedBuddyContacts", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "findBuddyContactsByQuery" -> process_findBuddyContactsByQuery (seqid,iprot,oprot,handler)
  "getBuddyContacts" -> process_getBuddyContacts (seqid,iprot,oprot,handler)
  "getBuddyDetail" -> process_getBuddyDetail (seqid,iprot,oprot,handler)
  "getBuddyOnAir" -> process_getBuddyOnAir (seqid,iprot,oprot,handler)
  "getCountriesHavingBuddy" -> process_getCountriesHavingBuddy (seqid,iprot,oprot,handler)
  "getNewlyReleasedBuddyIds" -> process_getNewlyReleasedBuddyIds (seqid,iprot,oprot,handler)
  "getPopularBuddyBanner" -> process_getPopularBuddyBanner (seqid,iprot,oprot,handler)
  "getPopularBuddyLists" -> process_getPopularBuddyLists (seqid,iprot,oprot,handler)
  "getPromotedBuddyContacts" -> process_getPromotedBuddyContacts (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessage oprot (name,T.M_EXCEPTION,seqid) $
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
process handler (iprot, oprot) = do
  T.readMessage iprot (
    proc_ handler (iprot,oprot))
  P.return P.True
