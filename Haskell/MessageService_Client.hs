{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.14.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module MessageService_Client(fetchMessageOperations,getLastReadMessageIds,multiGetLastReadMessageIds) where
import qualified Data.IORef as R
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Line_Types
import MessageService
seqid = R.newIORef 0
fetchMessageOperations (ip,op) arg_localRevision arg_lastOpTimestamp arg_count = do
  send_fetchMessageOperations op arg_localRevision arg_lastOpTimestamp arg_count
  recv_fetchMessageOperations ip
send_fetchMessageOperations op arg_localRevision arg_lastOpTimestamp arg_count = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("fetchMessageOperations", T.M_CALL, seqn) $
    write_FetchMessageOperations_args op (FetchMessageOperations_args{fetchMessageOperations_args_localRevision=arg_localRevision,fetchMessageOperations_args_lastOpTimestamp=arg_lastOpTimestamp,fetchMessageOperations_args_count=arg_count})
recv_fetchMessageOperations ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FetchMessageOperations_result ip
    P.maybe (P.return ()) X.throw (fetchMessageOperations_result_e res)
    P.return $ fetchMessageOperations_result_success res
getLastReadMessageIds (ip,op) arg_chatId = do
  send_getLastReadMessageIds op arg_chatId
  recv_getLastReadMessageIds ip
send_getLastReadMessageIds op arg_chatId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getLastReadMessageIds", T.M_CALL, seqn) $
    write_GetLastReadMessageIds_args op (GetLastReadMessageIds_args{getLastReadMessageIds_args_chatId=arg_chatId})
recv_getLastReadMessageIds ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetLastReadMessageIds_result ip
    P.maybe (P.return ()) X.throw (getLastReadMessageIds_result_e res)
    P.return $ getLastReadMessageIds_result_success res
multiGetLastReadMessageIds (ip,op) arg_chatIds = do
  send_multiGetLastReadMessageIds op arg_chatIds
  recv_multiGetLastReadMessageIds ip
send_multiGetLastReadMessageIds op arg_chatIds = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("multiGetLastReadMessageIds", T.M_CALL, seqn) $
    write_MultiGetLastReadMessageIds_args op (MultiGetLastReadMessageIds_args{multiGetLastReadMessageIds_args_chatIds=arg_chatIds})
recv_multiGetLastReadMessageIds ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_MultiGetLastReadMessageIds_result ip
    P.maybe (P.return ()) X.throw (multiGetLastReadMessageIds_result_e res)
    P.return $ multiGetLastReadMessageIds_result_success res
