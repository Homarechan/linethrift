{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.13.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module SquareService_Client(getSquareChatAnnouncements,deleteSquareChatAnnouncement,createSquareChatAnnouncement,getNoteStatus,getSquareStatus,reportSquareMember,reportSquareMessage,reportSquareChat,reportSquare,updateSquareMemberRelation,updateSquareAuthority,updateSquareChatMember,updateSquareChat,refreshSubscriptions,removeSubscriptions,rejectSquareMembers,updateSquareMembers,updateSquareMember,updateSquareFeatureSet,getSquareFeatureSet,searchSquares,updateSquare,getCategories,searchSquareMembers,fetchSquareChatEvents,fetchMyEvents,markAsRead,getSquareAuthority,sendMessage,leaveSquare,leaveSquareChat,joinSquareChat,joinSquare,inviteToSquare,inviteToSquareChat,getSquareMember,getSquareMembers,getSquareMemberRelation,getSquareMemberRelations,getSquareChatMembers,getSquareChatStatus,getSquareChat,getSquare,getJoinedSquares,getJoinedSquareChats,approveSquareMembers,createSquareChat,createSquare,deleteSquareChat,deleteSquare,destroyMessage,getJoinableSquareChats,getInvitationTicketUrl,findSquareByInvitationTicket) where
import qualified Data.IORef as R
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Line_Types
import SquareService
seqid = R.newIORef 0
getSquareChatAnnouncements (ip,op) arg_request = do
  send_getSquareChatAnnouncements op arg_request
  recv_getSquareChatAnnouncements ip
send_getSquareChatAnnouncements op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSquareChatAnnouncements", T.M_CALL, seqn) $
    write_GetSquareChatAnnouncements_args op (GetSquareChatAnnouncements_args{getSquareChatAnnouncements_args_request=arg_request})
recv_getSquareChatAnnouncements ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSquareChatAnnouncements_result ip
    P.maybe (P.return ()) X.throw (getSquareChatAnnouncements_result_e res)
    P.return $ getSquareChatAnnouncements_result_success res
deleteSquareChatAnnouncement (ip,op) arg_request = do
  send_deleteSquareChatAnnouncement op arg_request
  recv_deleteSquareChatAnnouncement ip
send_deleteSquareChatAnnouncement op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("deleteSquareChatAnnouncement", T.M_CALL, seqn) $
    write_DeleteSquareChatAnnouncement_args op (DeleteSquareChatAnnouncement_args{deleteSquareChatAnnouncement_args_request=arg_request})
recv_deleteSquareChatAnnouncement ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_DeleteSquareChatAnnouncement_result ip
    P.maybe (P.return ()) X.throw (deleteSquareChatAnnouncement_result_e res)
    P.return $ deleteSquareChatAnnouncement_result_success res
createSquareChatAnnouncement (ip,op) arg_request = do
  send_createSquareChatAnnouncement op arg_request
  recv_createSquareChatAnnouncement ip
send_createSquareChatAnnouncement op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("createSquareChatAnnouncement", T.M_CALL, seqn) $
    write_CreateSquareChatAnnouncement_args op (CreateSquareChatAnnouncement_args{createSquareChatAnnouncement_args_request=arg_request})
recv_createSquareChatAnnouncement ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CreateSquareChatAnnouncement_result ip
    P.maybe (P.return ()) X.throw (createSquareChatAnnouncement_result_e res)
    P.return $ createSquareChatAnnouncement_result_success res
getNoteStatus (ip,op) arg_request = do
  send_getNoteStatus op arg_request
  recv_getNoteStatus ip
send_getNoteStatus op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getNoteStatus", T.M_CALL, seqn) $
    write_GetNoteStatus_args op (GetNoteStatus_args{getNoteStatus_args_request=arg_request})
recv_getNoteStatus ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetNoteStatus_result ip
    P.maybe (P.return ()) X.throw (getNoteStatus_result_e res)
    P.return $ getNoteStatus_result_success res
getSquareStatus (ip,op) arg_request = do
  send_getSquareStatus op arg_request
  recv_getSquareStatus ip
send_getSquareStatus op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSquareStatus", T.M_CALL, seqn) $
    write_GetSquareStatus_args op (GetSquareStatus_args{getSquareStatus_args_request=arg_request})
recv_getSquareStatus ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSquareStatus_result ip
    P.maybe (P.return ()) X.throw (getSquareStatus_result_e res)
    P.return $ getSquareStatus_result_success res
reportSquareMember (ip,op) arg_request = do
  send_reportSquareMember op arg_request
  recv_reportSquareMember ip
send_reportSquareMember op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("reportSquareMember", T.M_CALL, seqn) $
    write_ReportSquareMember_args op (ReportSquareMember_args{reportSquareMember_args_request=arg_request})
recv_reportSquareMember ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ReportSquareMember_result ip
    P.maybe (P.return ()) X.throw (reportSquareMember_result_e res)
    P.return $ reportSquareMember_result_success res
reportSquareMessage (ip,op) arg_request = do
  send_reportSquareMessage op arg_request
  recv_reportSquareMessage ip
send_reportSquareMessage op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("reportSquareMessage", T.M_CALL, seqn) $
    write_ReportSquareMessage_args op (ReportSquareMessage_args{reportSquareMessage_args_request=arg_request})
recv_reportSquareMessage ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ReportSquareMessage_result ip
    P.maybe (P.return ()) X.throw (reportSquareMessage_result_e res)
    P.return $ reportSquareMessage_result_success res
reportSquareChat (ip,op) arg_request = do
  send_reportSquareChat op arg_request
  recv_reportSquareChat ip
send_reportSquareChat op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("reportSquareChat", T.M_CALL, seqn) $
    write_ReportSquareChat_args op (ReportSquareChat_args{reportSquareChat_args_request=arg_request})
recv_reportSquareChat ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ReportSquareChat_result ip
    P.maybe (P.return ()) X.throw (reportSquareChat_result_e res)
    P.return $ reportSquareChat_result_success res
reportSquare (ip,op) arg_request = do
  send_reportSquare op arg_request
  recv_reportSquare ip
send_reportSquare op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("reportSquare", T.M_CALL, seqn) $
    write_ReportSquare_args op (ReportSquare_args{reportSquare_args_request=arg_request})
recv_reportSquare ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ReportSquare_result ip
    P.maybe (P.return ()) X.throw (reportSquare_result_e res)
    P.return $ reportSquare_result_success res
updateSquareMemberRelation (ip,op) arg_request = do
  send_updateSquareMemberRelation op arg_request
  recv_updateSquareMemberRelation ip
send_updateSquareMemberRelation op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateSquareMemberRelation", T.M_CALL, seqn) $
    write_UpdateSquareMemberRelation_args op (UpdateSquareMemberRelation_args{updateSquareMemberRelation_args_request=arg_request})
recv_updateSquareMemberRelation ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateSquareMemberRelation_result ip
    P.maybe (P.return ()) X.throw (updateSquareMemberRelation_result_e res)
    P.return $ updateSquareMemberRelation_result_success res
updateSquareAuthority (ip,op) arg_request = do
  send_updateSquareAuthority op arg_request
  recv_updateSquareAuthority ip
send_updateSquareAuthority op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateSquareAuthority", T.M_CALL, seqn) $
    write_UpdateSquareAuthority_args op (UpdateSquareAuthority_args{updateSquareAuthority_args_request=arg_request})
recv_updateSquareAuthority ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateSquareAuthority_result ip
    P.maybe (P.return ()) X.throw (updateSquareAuthority_result_e res)
    P.return $ updateSquareAuthority_result_success res
updateSquareChatMember (ip,op) arg_request = do
  send_updateSquareChatMember op arg_request
  recv_updateSquareChatMember ip
send_updateSquareChatMember op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateSquareChatMember", T.M_CALL, seqn) $
    write_UpdateSquareChatMember_args op (UpdateSquareChatMember_args{updateSquareChatMember_args_request=arg_request})
recv_updateSquareChatMember ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateSquareChatMember_result ip
    P.maybe (P.return ()) X.throw (updateSquareChatMember_result_e res)
    P.return $ updateSquareChatMember_result_success res
updateSquareChat (ip,op) arg_request = do
  send_updateSquareChat op arg_request
  recv_updateSquareChat ip
send_updateSquareChat op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateSquareChat", T.M_CALL, seqn) $
    write_UpdateSquareChat_args op (UpdateSquareChat_args{updateSquareChat_args_request=arg_request})
recv_updateSquareChat ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateSquareChat_result ip
    P.maybe (P.return ()) X.throw (updateSquareChat_result_e res)
    P.return $ updateSquareChat_result_success res
refreshSubscriptions (ip,op) arg_request = do
  send_refreshSubscriptions op arg_request
  recv_refreshSubscriptions ip
send_refreshSubscriptions op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("refreshSubscriptions", T.M_CALL, seqn) $
    write_RefreshSubscriptions_args op (RefreshSubscriptions_args{refreshSubscriptions_args_request=arg_request})
recv_refreshSubscriptions ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RefreshSubscriptions_result ip
    P.maybe (P.return ()) X.throw (refreshSubscriptions_result_e res)
    P.return $ refreshSubscriptions_result_success res
removeSubscriptions (ip,op) arg_request = do
  send_removeSubscriptions op arg_request
  recv_removeSubscriptions ip
send_removeSubscriptions op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("removeSubscriptions", T.M_CALL, seqn) $
    write_RemoveSubscriptions_args op (RemoveSubscriptions_args{removeSubscriptions_args_request=arg_request})
recv_removeSubscriptions ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RemoveSubscriptions_result ip
    P.maybe (P.return ()) X.throw (removeSubscriptions_result_e res)
    P.return $ removeSubscriptions_result_success res
rejectSquareMembers (ip,op) arg_request = do
  send_rejectSquareMembers op arg_request
  recv_rejectSquareMembers ip
send_rejectSquareMembers op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("rejectSquareMembers", T.M_CALL, seqn) $
    write_RejectSquareMembers_args op (RejectSquareMembers_args{rejectSquareMembers_args_request=arg_request})
recv_rejectSquareMembers ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RejectSquareMembers_result ip
    P.maybe (P.return ()) X.throw (rejectSquareMembers_result_e res)
    P.return $ rejectSquareMembers_result_success res
updateSquareMembers (ip,op) arg_request = do
  send_updateSquareMembers op arg_request
  recv_updateSquareMembers ip
send_updateSquareMembers op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateSquareMembers", T.M_CALL, seqn) $
    write_UpdateSquareMembers_args op (UpdateSquareMembers_args{updateSquareMembers_args_request=arg_request})
recv_updateSquareMembers ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateSquareMembers_result ip
    P.maybe (P.return ()) X.throw (updateSquareMembers_result_e res)
    P.return $ updateSquareMembers_result_success res
updateSquareMember (ip,op) arg_request = do
  send_updateSquareMember op arg_request
  recv_updateSquareMember ip
send_updateSquareMember op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateSquareMember", T.M_CALL, seqn) $
    write_UpdateSquareMember_args op (UpdateSquareMember_args{updateSquareMember_args_request=arg_request})
recv_updateSquareMember ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateSquareMember_result ip
    P.maybe (P.return ()) X.throw (updateSquareMember_result_e res)
    P.return $ updateSquareMember_result_success res
updateSquareFeatureSet (ip,op) arg_request = do
  send_updateSquareFeatureSet op arg_request
  recv_updateSquareFeatureSet ip
send_updateSquareFeatureSet op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateSquareFeatureSet", T.M_CALL, seqn) $
    write_UpdateSquareFeatureSet_args op (UpdateSquareFeatureSet_args{updateSquareFeatureSet_args_request=arg_request})
recv_updateSquareFeatureSet ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateSquareFeatureSet_result ip
    P.maybe (P.return ()) X.throw (updateSquareFeatureSet_result_e res)
    P.return $ updateSquareFeatureSet_result_success res
getSquareFeatureSet (ip,op) arg_request = do
  send_getSquareFeatureSet op arg_request
  recv_getSquareFeatureSet ip
send_getSquareFeatureSet op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSquareFeatureSet", T.M_CALL, seqn) $
    write_GetSquareFeatureSet_args op (GetSquareFeatureSet_args{getSquareFeatureSet_args_request=arg_request})
recv_getSquareFeatureSet ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSquareFeatureSet_result ip
    P.maybe (P.return ()) X.throw (getSquareFeatureSet_result_e res)
    P.return $ getSquareFeatureSet_result_success res
searchSquares (ip,op) arg_request = do
  send_searchSquares op arg_request
  recv_searchSquares ip
send_searchSquares op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("searchSquares", T.M_CALL, seqn) $
    write_SearchSquares_args op (SearchSquares_args{searchSquares_args_request=arg_request})
recv_searchSquares ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SearchSquares_result ip
    P.maybe (P.return ()) X.throw (searchSquares_result_e res)
    P.return $ searchSquares_result_success res
updateSquare (ip,op) arg_request = do
  send_updateSquare op arg_request
  recv_updateSquare ip
send_updateSquare op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateSquare", T.M_CALL, seqn) $
    write_UpdateSquare_args op (UpdateSquare_args{updateSquare_args_request=arg_request})
recv_updateSquare ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateSquare_result ip
    P.maybe (P.return ()) X.throw (updateSquare_result_e res)
    P.return $ updateSquare_result_success res
getCategories (ip,op) arg_request = do
  send_getCategories op arg_request
  recv_getCategories ip
send_getCategories op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getCategories", T.M_CALL, seqn) $
    write_GetCategories_args op (GetCategories_args{getCategories_args_request=arg_request})
recv_getCategories ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetCategories_result ip
    P.maybe (P.return ()) X.throw (getCategories_result_e res)
    P.return $ getCategories_result_success res
searchSquareMembers (ip,op) arg_request = do
  send_searchSquareMembers op arg_request
  recv_searchSquareMembers ip
send_searchSquareMembers op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("searchSquareMembers", T.M_CALL, seqn) $
    write_SearchSquareMembers_args op (SearchSquareMembers_args{searchSquareMembers_args_request=arg_request})
recv_searchSquareMembers ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SearchSquareMembers_result ip
    P.maybe (P.return ()) X.throw (searchSquareMembers_result_e res)
    P.return $ searchSquareMembers_result_success res
fetchSquareChatEvents (ip,op) arg_request = do
  send_fetchSquareChatEvents op arg_request
  recv_fetchSquareChatEvents ip
send_fetchSquareChatEvents op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("fetchSquareChatEvents", T.M_CALL, seqn) $
    write_FetchSquareChatEvents_args op (FetchSquareChatEvents_args{fetchSquareChatEvents_args_request=arg_request})
recv_fetchSquareChatEvents ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FetchSquareChatEvents_result ip
    P.maybe (P.return ()) X.throw (fetchSquareChatEvents_result_e res)
    P.return $ fetchSquareChatEvents_result_success res
fetchMyEvents (ip,op) arg_request = do
  send_fetchMyEvents op arg_request
  recv_fetchMyEvents ip
send_fetchMyEvents op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("fetchMyEvents", T.M_CALL, seqn) $
    write_FetchMyEvents_args op (FetchMyEvents_args{fetchMyEvents_args_request=arg_request})
recv_fetchMyEvents ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FetchMyEvents_result ip
    P.maybe (P.return ()) X.throw (fetchMyEvents_result_e res)
    P.return $ fetchMyEvents_result_success res
markAsRead (ip,op) arg_request = do
  send_markAsRead op arg_request
  recv_markAsRead ip
send_markAsRead op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("markAsRead", T.M_CALL, seqn) $
    write_MarkAsRead_args op (MarkAsRead_args{markAsRead_args_request=arg_request})
recv_markAsRead ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_MarkAsRead_result ip
    P.maybe (P.return ()) X.throw (markAsRead_result_e res)
    P.return $ markAsRead_result_success res
getSquareAuthority (ip,op) arg_request = do
  send_getSquareAuthority op arg_request
  recv_getSquareAuthority ip
send_getSquareAuthority op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSquareAuthority", T.M_CALL, seqn) $
    write_GetSquareAuthority_args op (GetSquareAuthority_args{getSquareAuthority_args_request=arg_request})
recv_getSquareAuthority ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSquareAuthority_result ip
    P.maybe (P.return ()) X.throw (getSquareAuthority_result_e res)
    P.return $ getSquareAuthority_result_success res
sendMessage (ip,op) arg_request = do
  send_sendMessage op arg_request
  recv_sendMessage ip
send_sendMessage op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendMessage", T.M_CALL, seqn) $
    write_SendMessage_args op (SendMessage_args{sendMessage_args_request=arg_request})
recv_sendMessage ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendMessage_result ip
    P.maybe (P.return ()) X.throw (sendMessage_result_e res)
    P.return $ sendMessage_result_success res
leaveSquare (ip,op) arg_request = do
  send_leaveSquare op arg_request
  recv_leaveSquare ip
send_leaveSquare op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("leaveSquare", T.M_CALL, seqn) $
    write_LeaveSquare_args op (LeaveSquare_args{leaveSquare_args_request=arg_request})
recv_leaveSquare ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_LeaveSquare_result ip
    P.maybe (P.return ()) X.throw (leaveSquare_result_e res)
    P.return $ leaveSquare_result_success res
leaveSquareChat (ip,op) arg_request = do
  send_leaveSquareChat op arg_request
  recv_leaveSquareChat ip
send_leaveSquareChat op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("leaveSquareChat", T.M_CALL, seqn) $
    write_LeaveSquareChat_args op (LeaveSquareChat_args{leaveSquareChat_args_request=arg_request})
recv_leaveSquareChat ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_LeaveSquareChat_result ip
    P.maybe (P.return ()) X.throw (leaveSquareChat_result_e res)
    P.return $ leaveSquareChat_result_success res
joinSquareChat (ip,op) arg_request = do
  send_joinSquareChat op arg_request
  recv_joinSquareChat ip
send_joinSquareChat op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("joinSquareChat", T.M_CALL, seqn) $
    write_JoinSquareChat_args op (JoinSquareChat_args{joinSquareChat_args_request=arg_request})
recv_joinSquareChat ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_JoinSquareChat_result ip
    P.maybe (P.return ()) X.throw (joinSquareChat_result_e res)
    P.return $ joinSquareChat_result_success res
joinSquare (ip,op) arg_request = do
  send_joinSquare op arg_request
  recv_joinSquare ip
send_joinSquare op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("joinSquare", T.M_CALL, seqn) $
    write_JoinSquare_args op (JoinSquare_args{joinSquare_args_request=arg_request})
recv_joinSquare ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_JoinSquare_result ip
    P.maybe (P.return ()) X.throw (joinSquare_result_e res)
    P.return $ joinSquare_result_success res
inviteToSquare (ip,op) arg_request = do
  send_inviteToSquare op arg_request
  recv_inviteToSquare ip
send_inviteToSquare op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("inviteToSquare", T.M_CALL, seqn) $
    write_InviteToSquare_args op (InviteToSquare_args{inviteToSquare_args_request=arg_request})
recv_inviteToSquare ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_InviteToSquare_result ip
    P.maybe (P.return ()) X.throw (inviteToSquare_result_e res)
    P.return $ inviteToSquare_result_success res
inviteToSquareChat (ip,op) arg_request = do
  send_inviteToSquareChat op arg_request
  recv_inviteToSquareChat ip
send_inviteToSquareChat op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("inviteToSquareChat", T.M_CALL, seqn) $
    write_InviteToSquareChat_args op (InviteToSquareChat_args{inviteToSquareChat_args_request=arg_request})
recv_inviteToSquareChat ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_InviteToSquareChat_result ip
    P.maybe (P.return ()) X.throw (inviteToSquareChat_result_e res)
    P.return $ inviteToSquareChat_result_success res
getSquareMember (ip,op) arg_request = do
  send_getSquareMember op arg_request
  recv_getSquareMember ip
send_getSquareMember op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSquareMember", T.M_CALL, seqn) $
    write_GetSquareMember_args op (GetSquareMember_args{getSquareMember_args_request=arg_request})
recv_getSquareMember ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSquareMember_result ip
    P.maybe (P.return ()) X.throw (getSquareMember_result_e res)
    P.return $ getSquareMember_result_success res
getSquareMembers (ip,op) arg_request = do
  send_getSquareMembers op arg_request
  recv_getSquareMembers ip
send_getSquareMembers op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSquareMembers", T.M_CALL, seqn) $
    write_GetSquareMembers_args op (GetSquareMembers_args{getSquareMembers_args_request=arg_request})
recv_getSquareMembers ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSquareMembers_result ip
    P.maybe (P.return ()) X.throw (getSquareMembers_result_e res)
    P.return $ getSquareMembers_result_success res
getSquareMemberRelation (ip,op) arg_request = do
  send_getSquareMemberRelation op arg_request
  recv_getSquareMemberRelation ip
send_getSquareMemberRelation op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSquareMemberRelation", T.M_CALL, seqn) $
    write_GetSquareMemberRelation_args op (GetSquareMemberRelation_args{getSquareMemberRelation_args_request=arg_request})
recv_getSquareMemberRelation ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSquareMemberRelation_result ip
    P.maybe (P.return ()) X.throw (getSquareMemberRelation_result_e res)
    P.return $ getSquareMemberRelation_result_success res
getSquareMemberRelations (ip,op) arg_request = do
  send_getSquareMemberRelations op arg_request
  recv_getSquareMemberRelations ip
send_getSquareMemberRelations op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSquareMemberRelations", T.M_CALL, seqn) $
    write_GetSquareMemberRelations_args op (GetSquareMemberRelations_args{getSquareMemberRelations_args_request=arg_request})
recv_getSquareMemberRelations ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSquareMemberRelations_result ip
    P.maybe (P.return ()) X.throw (getSquareMemberRelations_result_e res)
    P.return $ getSquareMemberRelations_result_success res
getSquareChatMembers (ip,op) arg_request = do
  send_getSquareChatMembers op arg_request
  recv_getSquareChatMembers ip
send_getSquareChatMembers op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSquareChatMembers", T.M_CALL, seqn) $
    write_GetSquareChatMembers_args op (GetSquareChatMembers_args{getSquareChatMembers_args_request=arg_request})
recv_getSquareChatMembers ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSquareChatMembers_result ip
    P.maybe (P.return ()) X.throw (getSquareChatMembers_result_e res)
    P.return $ getSquareChatMembers_result_success res
getSquareChatStatus (ip,op) arg_request = do
  send_getSquareChatStatus op arg_request
  recv_getSquareChatStatus ip
send_getSquareChatStatus op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSquareChatStatus", T.M_CALL, seqn) $
    write_GetSquareChatStatus_args op (GetSquareChatStatus_args{getSquareChatStatus_args_request=arg_request})
recv_getSquareChatStatus ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSquareChatStatus_result ip
    P.maybe (P.return ()) X.throw (getSquareChatStatus_result_e res)
    P.return $ getSquareChatStatus_result_success res
getSquareChat (ip,op) arg_request = do
  send_getSquareChat op arg_request
  recv_getSquareChat ip
send_getSquareChat op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSquareChat", T.M_CALL, seqn) $
    write_GetSquareChat_args op (GetSquareChat_args{getSquareChat_args_request=arg_request})
recv_getSquareChat ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSquareChat_result ip
    P.maybe (P.return ()) X.throw (getSquareChat_result_e res)
    P.return $ getSquareChat_result_success res
getSquare (ip,op) arg_request = do
  send_getSquare op arg_request
  recv_getSquare ip
send_getSquare op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSquare", T.M_CALL, seqn) $
    write_GetSquare_args op (GetSquare_args{getSquare_args_request=arg_request})
recv_getSquare ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSquare_result ip
    P.maybe (P.return ()) X.throw (getSquare_result_e res)
    P.return $ getSquare_result_success res
getJoinedSquares (ip,op) arg_request = do
  send_getJoinedSquares op arg_request
  recv_getJoinedSquares ip
send_getJoinedSquares op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getJoinedSquares", T.M_CALL, seqn) $
    write_GetJoinedSquares_args op (GetJoinedSquares_args{getJoinedSquares_args_request=arg_request})
recv_getJoinedSquares ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetJoinedSquares_result ip
    P.maybe (P.return ()) X.throw (getJoinedSquares_result_e res)
    P.return $ getJoinedSquares_result_success res
getJoinedSquareChats (ip,op) arg_request = do
  send_getJoinedSquareChats op arg_request
  recv_getJoinedSquareChats ip
send_getJoinedSquareChats op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getJoinedSquareChats", T.M_CALL, seqn) $
    write_GetJoinedSquareChats_args op (GetJoinedSquareChats_args{getJoinedSquareChats_args_request=arg_request})
recv_getJoinedSquareChats ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetJoinedSquareChats_result ip
    P.maybe (P.return ()) X.throw (getJoinedSquareChats_result_e res)
    P.return $ getJoinedSquareChats_result_success res
approveSquareMembers (ip,op) arg_request = do
  send_approveSquareMembers op arg_request
  recv_approveSquareMembers ip
send_approveSquareMembers op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("approveSquareMembers", T.M_CALL, seqn) $
    write_ApproveSquareMembers_args op (ApproveSquareMembers_args{approveSquareMembers_args_request=arg_request})
recv_approveSquareMembers ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ApproveSquareMembers_result ip
    P.maybe (P.return ()) X.throw (approveSquareMembers_result_e res)
    P.return $ approveSquareMembers_result_success res
createSquareChat (ip,op) arg_request = do
  send_createSquareChat op arg_request
  recv_createSquareChat ip
send_createSquareChat op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("createSquareChat", T.M_CALL, seqn) $
    write_CreateSquareChat_args op (CreateSquareChat_args{createSquareChat_args_request=arg_request})
recv_createSquareChat ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CreateSquareChat_result ip
    P.maybe (P.return ()) X.throw (createSquareChat_result_e res)
    P.return $ createSquareChat_result_success res
createSquare (ip,op) arg_request = do
  send_createSquare op arg_request
  recv_createSquare ip
send_createSquare op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("createSquare", T.M_CALL, seqn) $
    write_CreateSquare_args op (CreateSquare_args{createSquare_args_request=arg_request})
recv_createSquare ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CreateSquare_result ip
    P.maybe (P.return ()) X.throw (createSquare_result_e res)
    P.return $ createSquare_result_success res
deleteSquareChat (ip,op) arg_request = do
  send_deleteSquareChat op arg_request
  recv_deleteSquareChat ip
send_deleteSquareChat op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("deleteSquareChat", T.M_CALL, seqn) $
    write_DeleteSquareChat_args op (DeleteSquareChat_args{deleteSquareChat_args_request=arg_request})
recv_deleteSquareChat ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_DeleteSquareChat_result ip
    P.maybe (P.return ()) X.throw (deleteSquareChat_result_e res)
    P.return $ deleteSquareChat_result_success res
deleteSquare (ip,op) arg_request = do
  send_deleteSquare op arg_request
  recv_deleteSquare ip
send_deleteSquare op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("deleteSquare", T.M_CALL, seqn) $
    write_DeleteSquare_args op (DeleteSquare_args{deleteSquare_args_request=arg_request})
recv_deleteSquare ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_DeleteSquare_result ip
    P.maybe (P.return ()) X.throw (deleteSquare_result_e res)
    P.return $ deleteSquare_result_success res
destroyMessage (ip,op) arg_request = do
  send_destroyMessage op arg_request
  recv_destroyMessage ip
send_destroyMessage op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("destroyMessage", T.M_CALL, seqn) $
    write_DestroyMessage_args op (DestroyMessage_args{destroyMessage_args_request=arg_request})
recv_destroyMessage ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_DestroyMessage_result ip
    P.maybe (P.return ()) X.throw (destroyMessage_result_e res)
    P.return $ destroyMessage_result_success res
getJoinableSquareChats (ip,op) arg_request = do
  send_getJoinableSquareChats op arg_request
  recv_getJoinableSquareChats ip
send_getJoinableSquareChats op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getJoinableSquareChats", T.M_CALL, seqn) $
    write_GetJoinableSquareChats_args op (GetJoinableSquareChats_args{getJoinableSquareChats_args_request=arg_request})
recv_getJoinableSquareChats ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetJoinableSquareChats_result ip
    P.maybe (P.return ()) X.throw (getJoinableSquareChats_result_e res)
    P.return $ getJoinableSquareChats_result_success res
getInvitationTicketUrl (ip,op) arg_request = do
  send_getInvitationTicketUrl op arg_request
  recv_getInvitationTicketUrl ip
send_getInvitationTicketUrl op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getInvitationTicketUrl", T.M_CALL, seqn) $
    write_GetInvitationTicketUrl_args op (GetInvitationTicketUrl_args{getInvitationTicketUrl_args_request=arg_request})
recv_getInvitationTicketUrl ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetInvitationTicketUrl_result ip
    P.maybe (P.return ()) X.throw (getInvitationTicketUrl_result_e res)
    P.return $ getInvitationTicketUrl_result_success res
findSquareByInvitationTicket (ip,op) arg_request = do
  send_findSquareByInvitationTicket op arg_request
  recv_findSquareByInvitationTicket ip
send_findSquareByInvitationTicket op arg_request = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("findSquareByInvitationTicket", T.M_CALL, seqn) $
    write_FindSquareByInvitationTicket_args op (FindSquareByInvitationTicket_args{findSquareByInvitationTicket_args_request=arg_request})
recv_findSquareByInvitationTicket ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FindSquareByInvitationTicket_result ip
    P.maybe (P.return ()) X.throw (findSquareByInvitationTicket_result_e res)
    P.return $ findSquareByInvitationTicket_result_success res
