{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.13.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module TalkService_Client(getChatRoomAnnouncementsBulk,getChatRoomAnnouncements,createChatRoomAnnouncement,removeChatRoomAnnouncement,unsendMessage,getGroupWithoutMembers,requestResendMessage,respondResendMessage,acceptGroupInvitation,acceptGroupInvitationByTicket,acceptProximityMatches,acquireCallRoute,acquireCallTicket,acquireEncryptedAccessToken,addSnsId,blockContact,blockRecommendation,cancelGroupInvitation,changeVerificationMethod,clearIdentityCredential,clearMessageBox,closeProximityMatch,commitSendMessage,commitSendMessages,commitUpdateProfile,confirmEmail,createGroup,createQrcodeBase64Image,createRoom,createSession,fetchAnnouncements,fetchMessages,fetchOperations,fetchOps,findAndAddContactsByEmail,findAndAddContactsByMid,findGroupByTicketV2,findAndAddContactsByPhone,getFriendRequests,removeFriendRequest,findAndAddContactsByUserid,findContactByUserid,findContactByUserTicket,findContactsByEmail,findContactsByPhone,findSnsIdUserStatus,finishUpdateVerification,generateUserTicket,destroyMessage,getAcceptedProximityMatches,getActiveBuddySubscriberIds,getAllContactIds,getAuthQrcode,getBlockedContactIds,registerWithPhoneNumber,registerWithPhoneNumberAndPassword,getAnalyticsInfo,reportClientStatistics,verifyPhoneNumberForLogin,verifyPhoneNumber,getBlockedContactIdsByRange,getBlockedRecommendationIds,getBuddyBlockerIds,getBuddyLocation,getCompactContactsModifiedSince,getCompactGroup,getCompactRoom,getContact,getContacts,getContactWithFriendRequestStatus,getCountryWithRequestIp,getFavoriteMids,getGroup,getGroupIdsInvited,getGroupIdsJoined,getGroups,getHiddenContactMids,getIdentityIdentifier,getLastAnnouncementIndex,getLastOpRevision,getSuggestRevisions,getPreviousMessagesV2WithReadCount,getMessageBox,getMessageBoxCompactWrapUp,getMessageBoxCompactWrapUpList,getMessageBoxList,getMessageBoxListByStatus,getMessageBoxWrapUp,getMessageBoxWrapUpList,getMessagesBySequenceNumber,getNextMessages,getNotificationPolicy,getPreviousMessages,getProfile,getProximityMatchCandidateList,getProximityMatchCandidates,getRecentMessages,getRecommendationIds,getRoom,getRSAKeyInfo,getServerTime,getSessions,getSettings,getGroupsV2,getSettingsAttributes,getSystemConfiguration,getUserTicket,getWapInvitation,invalidateUserTicket,inviteFriendsBySms,inviteIntoGroup,inviteIntoRoom,inviteViaEmail,isIdentityIdentifierAvailable,isUseridAvailable,kickoutFromGroup,reissueGroupTicket,findGroupByTicket,leaveGroup,leaveRoom,loginWithIdentityCredential,loginWithIdentityCredentialForCertificate,loginWithVerifier,loginWithVerifierForCerificate,loginWithVerifierForCertificate,logout,logoutSession,noop,notifiedRedirect,notifyBuddyOnAir,notifyIndividualEvent,notifyInstalled,notifyRegistrationComplete,notifySleep,notifyUpdated,openProximityMatch,registerBuddyUser,registerBuddyUserid,registerDevice,registerDeviceWithIdentityCredential,registerDeviceWithoutPhoneNumber,registerDeviceWithoutPhoneNumberWithIdentityCredential,registerUserid,registerWapDevice,registerWithExistingSnsIdAndIdentityCredential,registerWithSnsId,registerWithSnsIdAndIdentityCredential,reissueDeviceCredential,reissueUserTicket,getMessageReadRange,rejectGroupInvitation,releaseSession,removeAllMessages,removeBuddyLocation,removeMessage,makeUserAddMyselfAsContact,removeMessageFromMyHome,removeSnsId,report,reportContacts,reportGroups,reportProfile,reportRooms,findAndAddContactByMetaTag,reportSettings,reportSpam,reportSpammer,requestAccountPasswordReset,requestEmailConfirmation,requestIdentityUnbind,resendEmailConfirmation,resendPinCode,resendPinCodeBySMS,sendChatChecked,sendMessageAwaitCommit,sendChatRemoved,sendContentPreviewUpdated,sendContentReceipt,sendDummyPush,removeE2EEPublicKey,negotiateE2EEPublicKey,getE2EEPublicKey,requestE2EEKeyExchange,getLastE2EEPublicKeys,registerE2EEPublicKey,getE2EEPublicKeys,getE2EEPublicKeysEx,getReadMessageOpsInBulk,sendEvent,sendMessage,sendMessageIgnored,sendMessageReceipt,findContactByMetaTag,sendMessageToMyHome,setBuddyLocation,setIdentityCredential,setNotificationsEnabled,startUpdateVerification,startVerification,updateGroupPreferenceAttribute,createRoomV2,storeUpdateProfileAttribute,syncContactBySnsIds,syncContacts,trySendMessage,getNextMessagesV2,getMessageBoxCompactWrapUpV2,getRecentMessagesV2,validateContactsOnBot,tryFriendRequest,unblockContact,unblockRecommendation,unregisterUserAndDevice,updateApnsDeviceToken,updateBuddySetting,updateC2DMRegistrationId,updateContactSetting,updateCustomModeSettings,updateDeviceInfo,updateGroup,updateNotificationToken,updateNotificationTokenWithBytes,updateProfile,updateProfileAttribute,updateRegion,updateSettings,updateSettings2,updateSettingsAttribute,updateSettingsAttributes,verifyIdentityCredential,verifyIdentityCredentialWithResult,verifyPhone,verifyQrcode) where
import qualified Data.IORef as R
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Line_Types
import TalkService
seqid = R.newIORef 0
getChatRoomAnnouncementsBulk (ip,op) arg_chatRoomMids = do
  send_getChatRoomAnnouncementsBulk op arg_chatRoomMids
  recv_getChatRoomAnnouncementsBulk ip
send_getChatRoomAnnouncementsBulk op arg_chatRoomMids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getChatRoomAnnouncementsBulk", T.M_CALL, seqn) $
    write_GetChatRoomAnnouncementsBulk_args op (GetChatRoomAnnouncementsBulk_args{getChatRoomAnnouncementsBulk_args_chatRoomMids=arg_chatRoomMids})
recv_getChatRoomAnnouncementsBulk ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetChatRoomAnnouncementsBulk_result ip
    P.maybe (P.return ()) X.throw (getChatRoomAnnouncementsBulk_result_e res)
    P.return $ getChatRoomAnnouncementsBulk_result_success res
getChatRoomAnnouncements (ip,op) arg_chatRoomMid = do
  send_getChatRoomAnnouncements op arg_chatRoomMid
  recv_getChatRoomAnnouncements ip
send_getChatRoomAnnouncements op arg_chatRoomMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getChatRoomAnnouncements", T.M_CALL, seqn) $
    write_GetChatRoomAnnouncements_args op (GetChatRoomAnnouncements_args{getChatRoomAnnouncements_args_chatRoomMid=arg_chatRoomMid})
recv_getChatRoomAnnouncements ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetChatRoomAnnouncements_result ip
    P.maybe (P.return ()) X.throw (getChatRoomAnnouncements_result_e res)
    P.return $ getChatRoomAnnouncements_result_success res
createChatRoomAnnouncement (ip,op) arg_reqSeq arg_chatRoomMid arg_type arg_contents = do
  send_createChatRoomAnnouncement op arg_reqSeq arg_chatRoomMid arg_type arg_contents
  recv_createChatRoomAnnouncement ip
send_createChatRoomAnnouncement op arg_reqSeq arg_chatRoomMid arg_type arg_contents = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("createChatRoomAnnouncement", T.M_CALL, seqn) $
    write_CreateChatRoomAnnouncement_args op (CreateChatRoomAnnouncement_args{createChatRoomAnnouncement_args_reqSeq=arg_reqSeq,createChatRoomAnnouncement_args_chatRoomMid=arg_chatRoomMid,createChatRoomAnnouncement_args_type=arg_type,createChatRoomAnnouncement_args_contents=arg_contents})
recv_createChatRoomAnnouncement ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CreateChatRoomAnnouncement_result ip
    P.maybe (P.return ()) X.throw (createChatRoomAnnouncement_result_e res)
    P.return $ createChatRoomAnnouncement_result_success res
removeChatRoomAnnouncement (ip,op) arg_reqSeq arg_chatRoomMid arg_announcementSeq = do
  send_removeChatRoomAnnouncement op arg_reqSeq arg_chatRoomMid arg_announcementSeq
  recv_removeChatRoomAnnouncement ip
send_removeChatRoomAnnouncement op arg_reqSeq arg_chatRoomMid arg_announcementSeq = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("removeChatRoomAnnouncement", T.M_CALL, seqn) $
    write_RemoveChatRoomAnnouncement_args op (RemoveChatRoomAnnouncement_args{removeChatRoomAnnouncement_args_reqSeq=arg_reqSeq,removeChatRoomAnnouncement_args_chatRoomMid=arg_chatRoomMid,removeChatRoomAnnouncement_args_announcementSeq=arg_announcementSeq})
recv_removeChatRoomAnnouncement ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RemoveChatRoomAnnouncement_result ip
    P.maybe (P.return ()) X.throw (removeChatRoomAnnouncement_result_e res)
    P.return ()
unsendMessage (ip,op) arg_seq arg_messageId = do
  send_unsendMessage op arg_seq arg_messageId
  recv_unsendMessage ip
send_unsendMessage op arg_seq arg_messageId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("unsendMessage", T.M_CALL, seqn) $
    write_UnsendMessage_args op (UnsendMessage_args{unsendMessage_args_seq=arg_seq,unsendMessage_args_messageId=arg_messageId})
recv_unsendMessage ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UnsendMessage_result ip
    P.maybe (P.return ()) X.throw (unsendMessage_result_e res)
    P.return ()
getGroupWithoutMembers (ip,op) arg_groupId = do
  send_getGroupWithoutMembers op arg_groupId
  recv_getGroupWithoutMembers ip
send_getGroupWithoutMembers op arg_groupId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getGroupWithoutMembers", T.M_CALL, seqn) $
    write_GetGroupWithoutMembers_args op (GetGroupWithoutMembers_args{getGroupWithoutMembers_args_groupId=arg_groupId})
recv_getGroupWithoutMembers ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetGroupWithoutMembers_result ip
    P.maybe (P.return ()) X.throw (getGroupWithoutMembers_result_e res)
    P.return $ getGroupWithoutMembers_result_success res
requestResendMessage (ip,op) arg_reqSeq arg_senderMid arg_messageId = do
  send_requestResendMessage op arg_reqSeq arg_senderMid arg_messageId
  recv_requestResendMessage ip
send_requestResendMessage op arg_reqSeq arg_senderMid arg_messageId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("requestResendMessage", T.M_CALL, seqn) $
    write_RequestResendMessage_args op (RequestResendMessage_args{requestResendMessage_args_reqSeq=arg_reqSeq,requestResendMessage_args_senderMid=arg_senderMid,requestResendMessage_args_messageId=arg_messageId})
recv_requestResendMessage ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RequestResendMessage_result ip
    P.maybe (P.return ()) X.throw (requestResendMessage_result_e res)
    P.return ()
respondResendMessage (ip,op) arg_reqSeq arg_receiverMid arg_originalMessageId arg_resendMessage arg_errorCode = do
  send_respondResendMessage op arg_reqSeq arg_receiverMid arg_originalMessageId arg_resendMessage arg_errorCode
  recv_respondResendMessage ip
send_respondResendMessage op arg_reqSeq arg_receiverMid arg_originalMessageId arg_resendMessage arg_errorCode = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("respondResendMessage", T.M_CALL, seqn) $
    write_RespondResendMessage_args op (RespondResendMessage_args{respondResendMessage_args_reqSeq=arg_reqSeq,respondResendMessage_args_receiverMid=arg_receiverMid,respondResendMessage_args_originalMessageId=arg_originalMessageId,respondResendMessage_args_resendMessage=arg_resendMessage,respondResendMessage_args_errorCode=arg_errorCode})
recv_respondResendMessage ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RespondResendMessage_result ip
    P.maybe (P.return ()) X.throw (respondResendMessage_result_e res)
    P.return ()
acceptGroupInvitation (ip,op) arg_reqSeq arg_groupId = do
  send_acceptGroupInvitation op arg_reqSeq arg_groupId
  recv_acceptGroupInvitation ip
send_acceptGroupInvitation op arg_reqSeq arg_groupId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("acceptGroupInvitation", T.M_CALL, seqn) $
    write_AcceptGroupInvitation_args op (AcceptGroupInvitation_args{acceptGroupInvitation_args_reqSeq=arg_reqSeq,acceptGroupInvitation_args_groupId=arg_groupId})
recv_acceptGroupInvitation ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_AcceptGroupInvitation_result ip
    P.maybe (P.return ()) X.throw (acceptGroupInvitation_result_e res)
    P.return ()
acceptGroupInvitationByTicket (ip,op) arg_reqSeq arg_GroupMid arg_ticketId = do
  send_acceptGroupInvitationByTicket op arg_reqSeq arg_GroupMid arg_ticketId
  recv_acceptGroupInvitationByTicket ip
send_acceptGroupInvitationByTicket op arg_reqSeq arg_GroupMid arg_ticketId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("acceptGroupInvitationByTicket", T.M_CALL, seqn) $
    write_AcceptGroupInvitationByTicket_args op (AcceptGroupInvitationByTicket_args{acceptGroupInvitationByTicket_args_reqSeq=arg_reqSeq,acceptGroupInvitationByTicket_args_GroupMid=arg_GroupMid,acceptGroupInvitationByTicket_args_ticketId=arg_ticketId})
recv_acceptGroupInvitationByTicket ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_AcceptGroupInvitationByTicket_result ip
    P.maybe (P.return ()) X.throw (acceptGroupInvitationByTicket_result_e res)
    P.return ()
acceptProximityMatches (ip,op) arg_sessionId arg_ids = do
  send_acceptProximityMatches op arg_sessionId arg_ids
  recv_acceptProximityMatches ip
send_acceptProximityMatches op arg_sessionId arg_ids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("acceptProximityMatches", T.M_CALL, seqn) $
    write_AcceptProximityMatches_args op (AcceptProximityMatches_args{acceptProximityMatches_args_sessionId=arg_sessionId,acceptProximityMatches_args_ids=arg_ids})
recv_acceptProximityMatches ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_AcceptProximityMatches_result ip
    P.maybe (P.return ()) X.throw (acceptProximityMatches_result_e res)
    P.return ()
acquireCallRoute (ip,op) arg_to = do
  send_acquireCallRoute op arg_to
  recv_acquireCallRoute ip
send_acquireCallRoute op arg_to = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("acquireCallRoute", T.M_CALL, seqn) $
    write_AcquireCallRoute_args op (AcquireCallRoute_args{acquireCallRoute_args_to=arg_to})
recv_acquireCallRoute ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_AcquireCallRoute_result ip
    P.maybe (P.return ()) X.throw (acquireCallRoute_result_e res)
    P.return $ acquireCallRoute_result_success res
acquireCallTicket (ip,op) arg_to = do
  send_acquireCallTicket op arg_to
  recv_acquireCallTicket ip
send_acquireCallTicket op arg_to = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("acquireCallTicket", T.M_CALL, seqn) $
    write_AcquireCallTicket_args op (AcquireCallTicket_args{acquireCallTicket_args_to=arg_to})
recv_acquireCallTicket ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_AcquireCallTicket_result ip
    P.maybe (P.return ()) X.throw (acquireCallTicket_result_e res)
    P.return $ acquireCallTicket_result_success res
acquireEncryptedAccessToken (ip,op) arg_featureType = do
  send_acquireEncryptedAccessToken op arg_featureType
  recv_acquireEncryptedAccessToken ip
send_acquireEncryptedAccessToken op arg_featureType = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("acquireEncryptedAccessToken", T.M_CALL, seqn) $
    write_AcquireEncryptedAccessToken_args op (AcquireEncryptedAccessToken_args{acquireEncryptedAccessToken_args_featureType=arg_featureType})
recv_acquireEncryptedAccessToken ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_AcquireEncryptedAccessToken_result ip
    P.maybe (P.return ()) X.throw (acquireEncryptedAccessToken_result_e res)
    P.return $ acquireEncryptedAccessToken_result_success res
addSnsId (ip,op) arg_snsIdType arg_snsAccessToken = do
  send_addSnsId op arg_snsIdType arg_snsAccessToken
  recv_addSnsId ip
send_addSnsId op arg_snsIdType arg_snsAccessToken = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("addSnsId", T.M_CALL, seqn) $
    write_AddSnsId_args op (AddSnsId_args{addSnsId_args_snsIdType=arg_snsIdType,addSnsId_args_snsAccessToken=arg_snsAccessToken})
recv_addSnsId ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_AddSnsId_result ip
    P.maybe (P.return ()) X.throw (addSnsId_result_e res)
    P.return $ addSnsId_result_success res
blockContact (ip,op) arg_reqSeq arg_id = do
  send_blockContact op arg_reqSeq arg_id
  recv_blockContact ip
send_blockContact op arg_reqSeq arg_id = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("blockContact", T.M_CALL, seqn) $
    write_BlockContact_args op (BlockContact_args{blockContact_args_reqSeq=arg_reqSeq,blockContact_args_id=arg_id})
recv_blockContact ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_BlockContact_result ip
    P.maybe (P.return ()) X.throw (blockContact_result_e res)
    P.return ()
blockRecommendation (ip,op) arg_reqSeq arg_id = do
  send_blockRecommendation op arg_reqSeq arg_id
  recv_blockRecommendation ip
send_blockRecommendation op arg_reqSeq arg_id = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("blockRecommendation", T.M_CALL, seqn) $
    write_BlockRecommendation_args op (BlockRecommendation_args{blockRecommendation_args_reqSeq=arg_reqSeq,blockRecommendation_args_id=arg_id})
recv_blockRecommendation ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_BlockRecommendation_result ip
    P.maybe (P.return ()) X.throw (blockRecommendation_result_e res)
    P.return ()
cancelGroupInvitation (ip,op) arg_reqSeq arg_groupId arg_contactIds = do
  send_cancelGroupInvitation op arg_reqSeq arg_groupId arg_contactIds
  recv_cancelGroupInvitation ip
send_cancelGroupInvitation op arg_reqSeq arg_groupId arg_contactIds = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("cancelGroupInvitation", T.M_CALL, seqn) $
    write_CancelGroupInvitation_args op (CancelGroupInvitation_args{cancelGroupInvitation_args_reqSeq=arg_reqSeq,cancelGroupInvitation_args_groupId=arg_groupId,cancelGroupInvitation_args_contactIds=arg_contactIds})
recv_cancelGroupInvitation ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CancelGroupInvitation_result ip
    P.maybe (P.return ()) X.throw (cancelGroupInvitation_result_e res)
    P.return ()
changeVerificationMethod (ip,op) arg_sessionId arg_method = do
  send_changeVerificationMethod op arg_sessionId arg_method
  recv_changeVerificationMethod ip
send_changeVerificationMethod op arg_sessionId arg_method = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("changeVerificationMethod", T.M_CALL, seqn) $
    write_ChangeVerificationMethod_args op (ChangeVerificationMethod_args{changeVerificationMethod_args_sessionId=arg_sessionId,changeVerificationMethod_args_method=arg_method})
recv_changeVerificationMethod ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ChangeVerificationMethod_result ip
    P.maybe (P.return ()) X.throw (changeVerificationMethod_result_e res)
    P.return $ changeVerificationMethod_result_success res
clearIdentityCredential (ip,op) = do
  send_clearIdentityCredential op
  recv_clearIdentityCredential ip
send_clearIdentityCredential op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("clearIdentityCredential", T.M_CALL, seqn) $
    write_ClearIdentityCredential_args op (ClearIdentityCredential_args{})
recv_clearIdentityCredential ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ClearIdentityCredential_result ip
    P.maybe (P.return ()) X.throw (clearIdentityCredential_result_e res)
    P.return ()
clearMessageBox (ip,op) arg_channelId arg_messageBoxId = do
  send_clearMessageBox op arg_channelId arg_messageBoxId
  recv_clearMessageBox ip
send_clearMessageBox op arg_channelId arg_messageBoxId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("clearMessageBox", T.M_CALL, seqn) $
    write_ClearMessageBox_args op (ClearMessageBox_args{clearMessageBox_args_channelId=arg_channelId,clearMessageBox_args_messageBoxId=arg_messageBoxId})
recv_clearMessageBox ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ClearMessageBox_result ip
    P.maybe (P.return ()) X.throw (clearMessageBox_result_e res)
    P.return ()
closeProximityMatch (ip,op) arg_sessionId = do
  send_closeProximityMatch op arg_sessionId
  recv_closeProximityMatch ip
send_closeProximityMatch op arg_sessionId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("closeProximityMatch", T.M_CALL, seqn) $
    write_CloseProximityMatch_args op (CloseProximityMatch_args{closeProximityMatch_args_sessionId=arg_sessionId})
recv_closeProximityMatch ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CloseProximityMatch_result ip
    P.maybe (P.return ()) X.throw (closeProximityMatch_result_e res)
    P.return ()
commitSendMessage (ip,op) arg_seq arg_messageId arg_receiverMids = do
  send_commitSendMessage op arg_seq arg_messageId arg_receiverMids
  recv_commitSendMessage ip
send_commitSendMessage op arg_seq arg_messageId arg_receiverMids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("commitSendMessage", T.M_CALL, seqn) $
    write_CommitSendMessage_args op (CommitSendMessage_args{commitSendMessage_args_seq=arg_seq,commitSendMessage_args_messageId=arg_messageId,commitSendMessage_args_receiverMids=arg_receiverMids})
recv_commitSendMessage ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CommitSendMessage_result ip
    P.maybe (P.return ()) X.throw (commitSendMessage_result_e res)
    P.return $ commitSendMessage_result_success res
commitSendMessages (ip,op) arg_seq arg_messageIds arg_receiverMids = do
  send_commitSendMessages op arg_seq arg_messageIds arg_receiverMids
  recv_commitSendMessages ip
send_commitSendMessages op arg_seq arg_messageIds arg_receiverMids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("commitSendMessages", T.M_CALL, seqn) $
    write_CommitSendMessages_args op (CommitSendMessages_args{commitSendMessages_args_seq=arg_seq,commitSendMessages_args_messageIds=arg_messageIds,commitSendMessages_args_receiverMids=arg_receiverMids})
recv_commitSendMessages ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CommitSendMessages_result ip
    P.maybe (P.return ()) X.throw (commitSendMessages_result_e res)
    P.return $ commitSendMessages_result_success res
commitUpdateProfile (ip,op) arg_seq arg_attrs arg_receiverMids = do
  send_commitUpdateProfile op arg_seq arg_attrs arg_receiverMids
  recv_commitUpdateProfile ip
send_commitUpdateProfile op arg_seq arg_attrs arg_receiverMids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("commitUpdateProfile", T.M_CALL, seqn) $
    write_CommitUpdateProfile_args op (CommitUpdateProfile_args{commitUpdateProfile_args_seq=arg_seq,commitUpdateProfile_args_attrs=arg_attrs,commitUpdateProfile_args_receiverMids=arg_receiverMids})
recv_commitUpdateProfile ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CommitUpdateProfile_result ip
    P.maybe (P.return ()) X.throw (commitUpdateProfile_result_e res)
    P.return $ commitUpdateProfile_result_success res
confirmEmail (ip,op) arg_verifier arg_pinCode = do
  send_confirmEmail op arg_verifier arg_pinCode
  recv_confirmEmail ip
send_confirmEmail op arg_verifier arg_pinCode = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("confirmEmail", T.M_CALL, seqn) $
    write_ConfirmEmail_args op (ConfirmEmail_args{confirmEmail_args_verifier=arg_verifier,confirmEmail_args_pinCode=arg_pinCode})
recv_confirmEmail ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ConfirmEmail_result ip
    P.maybe (P.return ()) X.throw (confirmEmail_result_e res)
    P.return ()
createGroup (ip,op) arg_seq arg_name arg_contactIds = do
  send_createGroup op arg_seq arg_name arg_contactIds
  recv_createGroup ip
send_createGroup op arg_seq arg_name arg_contactIds = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("createGroup", T.M_CALL, seqn) $
    write_CreateGroup_args op (CreateGroup_args{createGroup_args_seq=arg_seq,createGroup_args_name=arg_name,createGroup_args_contactIds=arg_contactIds})
recv_createGroup ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CreateGroup_result ip
    P.maybe (P.return ()) X.throw (createGroup_result_e res)
    P.return $ createGroup_result_success res
createQrcodeBase64Image (ip,op) arg_url arg_characterSet arg_imageSize arg_x arg_y arg_width arg_height = do
  send_createQrcodeBase64Image op arg_url arg_characterSet arg_imageSize arg_x arg_y arg_width arg_height
  recv_createQrcodeBase64Image ip
send_createQrcodeBase64Image op arg_url arg_characterSet arg_imageSize arg_x arg_y arg_width arg_height = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("createQrcodeBase64Image", T.M_CALL, seqn) $
    write_CreateQrcodeBase64Image_args op (CreateQrcodeBase64Image_args{createQrcodeBase64Image_args_url=arg_url,createQrcodeBase64Image_args_characterSet=arg_characterSet,createQrcodeBase64Image_args_imageSize=arg_imageSize,createQrcodeBase64Image_args_x=arg_x,createQrcodeBase64Image_args_y=arg_y,createQrcodeBase64Image_args_width=arg_width,createQrcodeBase64Image_args_height=arg_height})
recv_createQrcodeBase64Image ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CreateQrcodeBase64Image_result ip
    P.maybe (P.return ()) X.throw (createQrcodeBase64Image_result_e res)
    P.return $ createQrcodeBase64Image_result_success res
createRoom (ip,op) arg_reqSeq arg_contactIds = do
  send_createRoom op arg_reqSeq arg_contactIds
  recv_createRoom ip
send_createRoom op arg_reqSeq arg_contactIds = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("createRoom", T.M_CALL, seqn) $
    write_CreateRoom_args op (CreateRoom_args{createRoom_args_reqSeq=arg_reqSeq,createRoom_args_contactIds=arg_contactIds})
recv_createRoom ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CreateRoom_result ip
    P.maybe (P.return ()) X.throw (createRoom_result_e res)
    P.return $ createRoom_result_success res
createSession (ip,op) = do
  send_createSession op
  recv_createSession ip
send_createSession op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("createSession", T.M_CALL, seqn) $
    write_CreateSession_args op (CreateSession_args{})
recv_createSession ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CreateSession_result ip
    P.maybe (P.return ()) X.throw (createSession_result_e res)
    P.return $ createSession_result_success res
fetchAnnouncements (ip,op) arg_lastFetchedIndex = do
  send_fetchAnnouncements op arg_lastFetchedIndex
  recv_fetchAnnouncements ip
send_fetchAnnouncements op arg_lastFetchedIndex = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("fetchAnnouncements", T.M_CALL, seqn) $
    write_FetchAnnouncements_args op (FetchAnnouncements_args{fetchAnnouncements_args_lastFetchedIndex=arg_lastFetchedIndex})
recv_fetchAnnouncements ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FetchAnnouncements_result ip
    P.maybe (P.return ()) X.throw (fetchAnnouncements_result_e res)
    P.return $ fetchAnnouncements_result_success res
fetchMessages (ip,op) arg_localTs arg_count = do
  send_fetchMessages op arg_localTs arg_count
  recv_fetchMessages ip
send_fetchMessages op arg_localTs arg_count = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("fetchMessages", T.M_CALL, seqn) $
    write_FetchMessages_args op (FetchMessages_args{fetchMessages_args_localTs=arg_localTs,fetchMessages_args_count=arg_count})
recv_fetchMessages ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FetchMessages_result ip
    P.maybe (P.return ()) X.throw (fetchMessages_result_e res)
    P.return $ fetchMessages_result_success res
fetchOperations (ip,op) arg_localRev arg_count = do
  send_fetchOperations op arg_localRev arg_count
  recv_fetchOperations ip
send_fetchOperations op arg_localRev arg_count = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("fetchOperations", T.M_CALL, seqn) $
    write_FetchOperations_args op (FetchOperations_args{fetchOperations_args_localRev=arg_localRev,fetchOperations_args_count=arg_count})
recv_fetchOperations ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FetchOperations_result ip
    P.maybe (P.return ()) X.throw (fetchOperations_result_e res)
    P.return $ fetchOperations_result_success res
fetchOps (ip,op) arg_localRev arg_count arg_globalRev arg_individualRev = do
  send_fetchOps op arg_localRev arg_count arg_globalRev arg_individualRev
  recv_fetchOps ip
send_fetchOps op arg_localRev arg_count arg_globalRev arg_individualRev = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("fetchOps", T.M_CALL, seqn) $
    write_FetchOps_args op (FetchOps_args{fetchOps_args_localRev=arg_localRev,fetchOps_args_count=arg_count,fetchOps_args_globalRev=arg_globalRev,fetchOps_args_individualRev=arg_individualRev})
recv_fetchOps ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FetchOps_result ip
    P.maybe (P.return ()) X.throw (fetchOps_result_e res)
    P.return $ fetchOps_result_success res
findAndAddContactsByEmail (ip,op) arg_reqSeq arg_emails = do
  send_findAndAddContactsByEmail op arg_reqSeq arg_emails
  recv_findAndAddContactsByEmail ip
send_findAndAddContactsByEmail op arg_reqSeq arg_emails = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("findAndAddContactsByEmail", T.M_CALL, seqn) $
    write_FindAndAddContactsByEmail_args op (FindAndAddContactsByEmail_args{findAndAddContactsByEmail_args_reqSeq=arg_reqSeq,findAndAddContactsByEmail_args_emails=arg_emails})
recv_findAndAddContactsByEmail ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FindAndAddContactsByEmail_result ip
    P.maybe (P.return ()) X.throw (findAndAddContactsByEmail_result_e res)
    P.return $ findAndAddContactsByEmail_result_success res
findAndAddContactsByMid (ip,op) arg_reqSeq arg_mid arg_type arg_reference = do
  send_findAndAddContactsByMid op arg_reqSeq arg_mid arg_type arg_reference
  recv_findAndAddContactsByMid ip
send_findAndAddContactsByMid op arg_reqSeq arg_mid arg_type arg_reference = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("findAndAddContactsByMid", T.M_CALL, seqn) $
    write_FindAndAddContactsByMid_args op (FindAndAddContactsByMid_args{findAndAddContactsByMid_args_reqSeq=arg_reqSeq,findAndAddContactsByMid_args_mid=arg_mid,findAndAddContactsByMid_args_type=arg_type,findAndAddContactsByMid_args_reference=arg_reference})
recv_findAndAddContactsByMid ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FindAndAddContactsByMid_result ip
    P.maybe (P.return ()) X.throw (findAndAddContactsByMid_result_e res)
    P.return $ findAndAddContactsByMid_result_success res
findGroupByTicketV2 (ip,op) arg_ticketId = do
  send_findGroupByTicketV2 op arg_ticketId
  recv_findGroupByTicketV2 ip
send_findGroupByTicketV2 op arg_ticketId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("findGroupByTicketV2", T.M_CALL, seqn) $
    write_FindGroupByTicketV2_args op (FindGroupByTicketV2_args{findGroupByTicketV2_args_ticketId=arg_ticketId})
recv_findGroupByTicketV2 ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FindGroupByTicketV2_result ip
    P.maybe (P.return ()) X.throw (findGroupByTicketV2_result_e res)
    P.return $ findGroupByTicketV2_result_success res
findAndAddContactsByPhone (ip,op) arg_reqSeq arg_phones = do
  send_findAndAddContactsByPhone op arg_reqSeq arg_phones
  recv_findAndAddContactsByPhone ip
send_findAndAddContactsByPhone op arg_reqSeq arg_phones = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("findAndAddContactsByPhone", T.M_CALL, seqn) $
    write_FindAndAddContactsByPhone_args op (FindAndAddContactsByPhone_args{findAndAddContactsByPhone_args_reqSeq=arg_reqSeq,findAndAddContactsByPhone_args_phones=arg_phones})
recv_findAndAddContactsByPhone ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FindAndAddContactsByPhone_result ip
    P.maybe (P.return ()) X.throw (findAndAddContactsByPhone_result_e res)
    P.return $ findAndAddContactsByPhone_result_success res
getFriendRequests (ip,op) arg_direction arg_lastSeenSeqId = do
  send_getFriendRequests op arg_direction arg_lastSeenSeqId
  recv_getFriendRequests ip
send_getFriendRequests op arg_direction arg_lastSeenSeqId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getFriendRequests", T.M_CALL, seqn) $
    write_GetFriendRequests_args op (GetFriendRequests_args{getFriendRequests_args_direction=arg_direction,getFriendRequests_args_lastSeenSeqId=arg_lastSeenSeqId})
recv_getFriendRequests ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetFriendRequests_result ip
    P.maybe (P.return ()) X.throw (getFriendRequests_result_e res)
    P.return $ getFriendRequests_result_success res
removeFriendRequest (ip,op) arg_direction arg_midOrEMid = do
  send_removeFriendRequest op arg_direction arg_midOrEMid
  recv_removeFriendRequest ip
send_removeFriendRequest op arg_direction arg_midOrEMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("removeFriendRequest", T.M_CALL, seqn) $
    write_RemoveFriendRequest_args op (RemoveFriendRequest_args{removeFriendRequest_args_direction=arg_direction,removeFriendRequest_args_midOrEMid=arg_midOrEMid})
recv_removeFriendRequest ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RemoveFriendRequest_result ip
    P.maybe (P.return ()) X.throw (removeFriendRequest_result_e res)
    P.return ()
findAndAddContactsByUserid (ip,op) arg_reqSeq arg_userid = do
  send_findAndAddContactsByUserid op arg_reqSeq arg_userid
  recv_findAndAddContactsByUserid ip
send_findAndAddContactsByUserid op arg_reqSeq arg_userid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("findAndAddContactsByUserid", T.M_CALL, seqn) $
    write_FindAndAddContactsByUserid_args op (FindAndAddContactsByUserid_args{findAndAddContactsByUserid_args_reqSeq=arg_reqSeq,findAndAddContactsByUserid_args_userid=arg_userid})
recv_findAndAddContactsByUserid ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FindAndAddContactsByUserid_result ip
    P.maybe (P.return ()) X.throw (findAndAddContactsByUserid_result_e res)
    P.return $ findAndAddContactsByUserid_result_success res
findContactByUserid (ip,op) arg_userid = do
  send_findContactByUserid op arg_userid
  recv_findContactByUserid ip
send_findContactByUserid op arg_userid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("findContactByUserid", T.M_CALL, seqn) $
    write_FindContactByUserid_args op (FindContactByUserid_args{findContactByUserid_args_userid=arg_userid})
recv_findContactByUserid ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FindContactByUserid_result ip
    P.maybe (P.return ()) X.throw (findContactByUserid_result_e res)
    P.return $ findContactByUserid_result_success res
findContactByUserTicket (ip,op) arg_ticketIdWithTag = do
  send_findContactByUserTicket op arg_ticketIdWithTag
  recv_findContactByUserTicket ip
send_findContactByUserTicket op arg_ticketIdWithTag = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("findContactByUserTicket", T.M_CALL, seqn) $
    write_FindContactByUserTicket_args op (FindContactByUserTicket_args{findContactByUserTicket_args_ticketIdWithTag=arg_ticketIdWithTag})
recv_findContactByUserTicket ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FindContactByUserTicket_result ip
    P.maybe (P.return ()) X.throw (findContactByUserTicket_result_e res)
    P.return $ findContactByUserTicket_result_success res
findContactsByEmail (ip,op) arg_emails = do
  send_findContactsByEmail op arg_emails
  recv_findContactsByEmail ip
send_findContactsByEmail op arg_emails = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("findContactsByEmail", T.M_CALL, seqn) $
    write_FindContactsByEmail_args op (FindContactsByEmail_args{findContactsByEmail_args_emails=arg_emails})
recv_findContactsByEmail ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FindContactsByEmail_result ip
    P.maybe (P.return ()) X.throw (findContactsByEmail_result_e res)
    P.return $ findContactsByEmail_result_success res
findContactsByPhone (ip,op) arg_phones = do
  send_findContactsByPhone op arg_phones
  recv_findContactsByPhone ip
send_findContactsByPhone op arg_phones = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("findContactsByPhone", T.M_CALL, seqn) $
    write_FindContactsByPhone_args op (FindContactsByPhone_args{findContactsByPhone_args_phones=arg_phones})
recv_findContactsByPhone ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FindContactsByPhone_result ip
    P.maybe (P.return ()) X.throw (findContactsByPhone_result_e res)
    P.return $ findContactsByPhone_result_success res
findSnsIdUserStatus (ip,op) arg_snsIdType arg_snsAccessToken arg_udidHash = do
  send_findSnsIdUserStatus op arg_snsIdType arg_snsAccessToken arg_udidHash
  recv_findSnsIdUserStatus ip
send_findSnsIdUserStatus op arg_snsIdType arg_snsAccessToken arg_udidHash = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("findSnsIdUserStatus", T.M_CALL, seqn) $
    write_FindSnsIdUserStatus_args op (FindSnsIdUserStatus_args{findSnsIdUserStatus_args_snsIdType=arg_snsIdType,findSnsIdUserStatus_args_snsAccessToken=arg_snsAccessToken,findSnsIdUserStatus_args_udidHash=arg_udidHash})
recv_findSnsIdUserStatus ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FindSnsIdUserStatus_result ip
    P.maybe (P.return ()) X.throw (findSnsIdUserStatus_result_e res)
    P.return $ findSnsIdUserStatus_result_success res
finishUpdateVerification (ip,op) arg_sessionId = do
  send_finishUpdateVerification op arg_sessionId
  recv_finishUpdateVerification ip
send_finishUpdateVerification op arg_sessionId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("finishUpdateVerification", T.M_CALL, seqn) $
    write_FinishUpdateVerification_args op (FinishUpdateVerification_args{finishUpdateVerification_args_sessionId=arg_sessionId})
recv_finishUpdateVerification ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FinishUpdateVerification_result ip
    P.maybe (P.return ()) X.throw (finishUpdateVerification_result_e res)
    P.return ()
generateUserTicket (ip,op) arg_expirationTime arg_maxUseCount = do
  send_generateUserTicket op arg_expirationTime arg_maxUseCount
  recv_generateUserTicket ip
send_generateUserTicket op arg_expirationTime arg_maxUseCount = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("generateUserTicket", T.M_CALL, seqn) $
    write_GenerateUserTicket_args op (GenerateUserTicket_args{generateUserTicket_args_expirationTime=arg_expirationTime,generateUserTicket_args_maxUseCount=arg_maxUseCount})
recv_generateUserTicket ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GenerateUserTicket_result ip
    P.maybe (P.return ()) X.throw (generateUserTicket_result_e res)
    P.return $ generateUserTicket_result_success res
destroyMessage (ip,op) arg_seq arg_chatId arg_messageId arg_sessionId = do
  send_destroyMessage op arg_seq arg_chatId arg_messageId arg_sessionId
  recv_destroyMessage ip
send_destroyMessage op arg_seq arg_chatId arg_messageId arg_sessionId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("destroyMessage", T.M_CALL, seqn) $
    write_DestroyMessage_args op (DestroyMessage_args{destroyMessage_args_seq=arg_seq,destroyMessage_args_chatId=arg_chatId,destroyMessage_args_messageId=arg_messageId,destroyMessage_args_sessionId=arg_sessionId})
recv_destroyMessage ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_DestroyMessage_result ip
    P.maybe (P.return ()) X.throw (destroyMessage_result_e res)
    P.return ()
getAcceptedProximityMatches (ip,op) arg_sessionId = do
  send_getAcceptedProximityMatches op arg_sessionId
  recv_getAcceptedProximityMatches ip
send_getAcceptedProximityMatches op arg_sessionId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getAcceptedProximityMatches", T.M_CALL, seqn) $
    write_GetAcceptedProximityMatches_args op (GetAcceptedProximityMatches_args{getAcceptedProximityMatches_args_sessionId=arg_sessionId})
recv_getAcceptedProximityMatches ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetAcceptedProximityMatches_result ip
    P.maybe (P.return ()) X.throw (getAcceptedProximityMatches_result_e res)
    P.return $ getAcceptedProximityMatches_result_success res
getActiveBuddySubscriberIds (ip,op) = do
  send_getActiveBuddySubscriberIds op
  recv_getActiveBuddySubscriberIds ip
send_getActiveBuddySubscriberIds op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getActiveBuddySubscriberIds", T.M_CALL, seqn) $
    write_GetActiveBuddySubscriberIds_args op (GetActiveBuddySubscriberIds_args{})
recv_getActiveBuddySubscriberIds ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetActiveBuddySubscriberIds_result ip
    P.maybe (P.return ()) X.throw (getActiveBuddySubscriberIds_result_e res)
    P.return $ getActiveBuddySubscriberIds_result_success res
getAllContactIds (ip,op) = do
  send_getAllContactIds op
  recv_getAllContactIds ip
send_getAllContactIds op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getAllContactIds", T.M_CALL, seqn) $
    write_GetAllContactIds_args op (GetAllContactIds_args{})
recv_getAllContactIds ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetAllContactIds_result ip
    P.maybe (P.return ()) X.throw (getAllContactIds_result_e res)
    P.return $ getAllContactIds_result_success res
getAuthQrcode (ip,op) arg_keepLoggedIn arg_systemName = do
  send_getAuthQrcode op arg_keepLoggedIn arg_systemName
  recv_getAuthQrcode ip
send_getAuthQrcode op arg_keepLoggedIn arg_systemName = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getAuthQrcode", T.M_CALL, seqn) $
    write_GetAuthQrcode_args op (GetAuthQrcode_args{getAuthQrcode_args_keepLoggedIn=arg_keepLoggedIn,getAuthQrcode_args_systemName=arg_systemName})
recv_getAuthQrcode ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetAuthQrcode_result ip
    P.maybe (P.return ()) X.throw (getAuthQrcode_result_e res)
    P.return $ getAuthQrcode_result_success res
getBlockedContactIds (ip,op) = do
  send_getBlockedContactIds op
  recv_getBlockedContactIds ip
send_getBlockedContactIds op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getBlockedContactIds", T.M_CALL, seqn) $
    write_GetBlockedContactIds_args op (GetBlockedContactIds_args{})
recv_getBlockedContactIds ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetBlockedContactIds_result ip
    P.maybe (P.return ()) X.throw (getBlockedContactIds_result_e res)
    P.return $ getBlockedContactIds_result_success res
registerWithPhoneNumber (ip,op) arg_sessionId arg_migrationPincodeSessionId = do
  send_registerWithPhoneNumber op arg_sessionId arg_migrationPincodeSessionId
  recv_registerWithPhoneNumber ip
send_registerWithPhoneNumber op arg_sessionId arg_migrationPincodeSessionId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("registerWithPhoneNumber", T.M_CALL, seqn) $
    write_RegisterWithPhoneNumber_args op (RegisterWithPhoneNumber_args{registerWithPhoneNumber_args_sessionId=arg_sessionId,registerWithPhoneNumber_args_migrationPincodeSessionId=arg_migrationPincodeSessionId})
recv_registerWithPhoneNumber ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RegisterWithPhoneNumber_result ip
    P.maybe (P.return ()) X.throw (registerWithPhoneNumber_result_e res)
    P.return $ registerWithPhoneNumber_result_success res
registerWithPhoneNumberAndPassword (ip,op) arg_sessionId arg_keynm arg_encrypted = do
  send_registerWithPhoneNumberAndPassword op arg_sessionId arg_keynm arg_encrypted
  recv_registerWithPhoneNumberAndPassword ip
send_registerWithPhoneNumberAndPassword op arg_sessionId arg_keynm arg_encrypted = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("registerWithPhoneNumberAndPassword", T.M_CALL, seqn) $
    write_RegisterWithPhoneNumberAndPassword_args op (RegisterWithPhoneNumberAndPassword_args{registerWithPhoneNumberAndPassword_args_sessionId=arg_sessionId,registerWithPhoneNumberAndPassword_args_keynm=arg_keynm,registerWithPhoneNumberAndPassword_args_encrypted=arg_encrypted})
recv_registerWithPhoneNumberAndPassword ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RegisterWithPhoneNumberAndPassword_result ip
    P.maybe (P.return ()) X.throw (registerWithPhoneNumberAndPassword_result_e res)
    P.return $ registerWithPhoneNumberAndPassword_result_success res
getAnalyticsInfo (ip,op) = do
  send_getAnalyticsInfo op
  recv_getAnalyticsInfo ip
send_getAnalyticsInfo op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getAnalyticsInfo", T.M_CALL, seqn) $
    write_GetAnalyticsInfo_args op (GetAnalyticsInfo_args{})
recv_getAnalyticsInfo ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetAnalyticsInfo_result ip
    P.maybe (P.return ()) X.throw (getAnalyticsInfo_result_e res)
    P.return $ getAnalyticsInfo_result_success res
reportClientStatistics (ip,op) arg_reqSeq arg_category arg_count = do
  send_reportClientStatistics op arg_reqSeq arg_category arg_count
  recv_reportClientStatistics ip
send_reportClientStatistics op arg_reqSeq arg_category arg_count = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("reportClientStatistics", T.M_CALL, seqn) $
    write_ReportClientStatistics_args op (ReportClientStatistics_args{reportClientStatistics_args_reqSeq=arg_reqSeq,reportClientStatistics_args_category=arg_category,reportClientStatistics_args_count=arg_count})
recv_reportClientStatistics ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ReportClientStatistics_result ip
    P.maybe (P.return ()) X.throw (reportClientStatistics_result_e res)
    P.return ()
verifyPhoneNumberForLogin (ip,op) arg_verifierFromPhone arg_pinCodeForPhone arg_verifierFromLogin = do
  send_verifyPhoneNumberForLogin op arg_verifierFromPhone arg_pinCodeForPhone arg_verifierFromLogin
  recv_verifyPhoneNumberForLogin ip
send_verifyPhoneNumberForLogin op arg_verifierFromPhone arg_pinCodeForPhone arg_verifierFromLogin = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("verifyPhoneNumberForLogin", T.M_CALL, seqn) $
    write_VerifyPhoneNumberForLogin_args op (VerifyPhoneNumberForLogin_args{verifyPhoneNumberForLogin_args_verifierFromPhone=arg_verifierFromPhone,verifyPhoneNumberForLogin_args_pinCodeForPhone=arg_pinCodeForPhone,verifyPhoneNumberForLogin_args_verifierFromLogin=arg_verifierFromLogin})
recv_verifyPhoneNumberForLogin ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_VerifyPhoneNumberForLogin_result ip
    P.maybe (P.return ()) X.throw (verifyPhoneNumberForLogin_result_e res)
    P.return $ verifyPhoneNumberForLogin_result_success res
verifyPhoneNumber (ip,op) arg_sessionId arg_pinCode arg_udidHash arg_migrationPincodeSessionId arg_oldUdidHash = do
  send_verifyPhoneNumber op arg_sessionId arg_pinCode arg_udidHash arg_migrationPincodeSessionId arg_oldUdidHash
  recv_verifyPhoneNumber ip
send_verifyPhoneNumber op arg_sessionId arg_pinCode arg_udidHash arg_migrationPincodeSessionId arg_oldUdidHash = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("verifyPhoneNumber", T.M_CALL, seqn) $
    write_VerifyPhoneNumber_args op (VerifyPhoneNumber_args{verifyPhoneNumber_args_sessionId=arg_sessionId,verifyPhoneNumber_args_pinCode=arg_pinCode,verifyPhoneNumber_args_udidHash=arg_udidHash,verifyPhoneNumber_args_migrationPincodeSessionId=arg_migrationPincodeSessionId,verifyPhoneNumber_args_oldUdidHash=arg_oldUdidHash})
recv_verifyPhoneNumber ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_VerifyPhoneNumber_result ip
    P.maybe (P.return ()) X.throw (verifyPhoneNumber_result_e res)
    P.return $ verifyPhoneNumber_result_success res
getBlockedContactIdsByRange (ip,op) arg_start arg_count = do
  send_getBlockedContactIdsByRange op arg_start arg_count
  recv_getBlockedContactIdsByRange ip
send_getBlockedContactIdsByRange op arg_start arg_count = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getBlockedContactIdsByRange", T.M_CALL, seqn) $
    write_GetBlockedContactIdsByRange_args op (GetBlockedContactIdsByRange_args{getBlockedContactIdsByRange_args_start=arg_start,getBlockedContactIdsByRange_args_count=arg_count})
recv_getBlockedContactIdsByRange ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetBlockedContactIdsByRange_result ip
    P.maybe (P.return ()) X.throw (getBlockedContactIdsByRange_result_e res)
    P.return $ getBlockedContactIdsByRange_result_success res
getBlockedRecommendationIds (ip,op) = do
  send_getBlockedRecommendationIds op
  recv_getBlockedRecommendationIds ip
send_getBlockedRecommendationIds op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getBlockedRecommendationIds", T.M_CALL, seqn) $
    write_GetBlockedRecommendationIds_args op (GetBlockedRecommendationIds_args{})
recv_getBlockedRecommendationIds ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetBlockedRecommendationIds_result ip
    P.maybe (P.return ()) X.throw (getBlockedRecommendationIds_result_e res)
    P.return $ getBlockedRecommendationIds_result_success res
getBuddyBlockerIds (ip,op) = do
  send_getBuddyBlockerIds op
  recv_getBuddyBlockerIds ip
send_getBuddyBlockerIds op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getBuddyBlockerIds", T.M_CALL, seqn) $
    write_GetBuddyBlockerIds_args op (GetBuddyBlockerIds_args{})
recv_getBuddyBlockerIds ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetBuddyBlockerIds_result ip
    P.maybe (P.return ()) X.throw (getBuddyBlockerIds_result_e res)
    P.return $ getBuddyBlockerIds_result_success res
getBuddyLocation (ip,op) arg_mid arg_index = do
  send_getBuddyLocation op arg_mid arg_index
  recv_getBuddyLocation ip
send_getBuddyLocation op arg_mid arg_index = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getBuddyLocation", T.M_CALL, seqn) $
    write_GetBuddyLocation_args op (GetBuddyLocation_args{getBuddyLocation_args_mid=arg_mid,getBuddyLocation_args_index=arg_index})
recv_getBuddyLocation ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetBuddyLocation_result ip
    P.maybe (P.return ()) X.throw (getBuddyLocation_result_e res)
    P.return $ getBuddyLocation_result_success res
getCompactContactsModifiedSince (ip,op) arg_timestamp = do
  send_getCompactContactsModifiedSince op arg_timestamp
  recv_getCompactContactsModifiedSince ip
send_getCompactContactsModifiedSince op arg_timestamp = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getCompactContactsModifiedSince", T.M_CALL, seqn) $
    write_GetCompactContactsModifiedSince_args op (GetCompactContactsModifiedSince_args{getCompactContactsModifiedSince_args_timestamp=arg_timestamp})
recv_getCompactContactsModifiedSince ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetCompactContactsModifiedSince_result ip
    P.maybe (P.return ()) X.throw (getCompactContactsModifiedSince_result_e res)
    P.return $ getCompactContactsModifiedSince_result_success res
getCompactGroup (ip,op) arg_groupId = do
  send_getCompactGroup op arg_groupId
  recv_getCompactGroup ip
send_getCompactGroup op arg_groupId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getCompactGroup", T.M_CALL, seqn) $
    write_GetCompactGroup_args op (GetCompactGroup_args{getCompactGroup_args_groupId=arg_groupId})
recv_getCompactGroup ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetCompactGroup_result ip
    P.maybe (P.return ()) X.throw (getCompactGroup_result_e res)
    P.return $ getCompactGroup_result_success res
getCompactRoom (ip,op) arg_roomId = do
  send_getCompactRoom op arg_roomId
  recv_getCompactRoom ip
send_getCompactRoom op arg_roomId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getCompactRoom", T.M_CALL, seqn) $
    write_GetCompactRoom_args op (GetCompactRoom_args{getCompactRoom_args_roomId=arg_roomId})
recv_getCompactRoom ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetCompactRoom_result ip
    P.maybe (P.return ()) X.throw (getCompactRoom_result_e res)
    P.return $ getCompactRoom_result_success res
getContact (ip,op) arg_id = do
  send_getContact op arg_id
  recv_getContact ip
send_getContact op arg_id = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getContact", T.M_CALL, seqn) $
    write_GetContact_args op (GetContact_args{getContact_args_id=arg_id})
recv_getContact ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetContact_result ip
    P.maybe (P.return ()) X.throw (getContact_result_e res)
    P.return $ getContact_result_success res
getContacts (ip,op) arg_ids = do
  send_getContacts op arg_ids
  recv_getContacts ip
send_getContacts op arg_ids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getContacts", T.M_CALL, seqn) $
    write_GetContacts_args op (GetContacts_args{getContacts_args_ids=arg_ids})
recv_getContacts ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetContacts_result ip
    P.maybe (P.return ()) X.throw (getContacts_result_e res)
    P.return $ getContacts_result_success res
getContactWithFriendRequestStatus (ip,op) arg_id = do
  send_getContactWithFriendRequestStatus op arg_id
  recv_getContactWithFriendRequestStatus ip
send_getContactWithFriendRequestStatus op arg_id = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getContactWithFriendRequestStatus", T.M_CALL, seqn) $
    write_GetContactWithFriendRequestStatus_args op (GetContactWithFriendRequestStatus_args{getContactWithFriendRequestStatus_args_id=arg_id})
recv_getContactWithFriendRequestStatus ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetContactWithFriendRequestStatus_result ip
    P.maybe (P.return ()) X.throw (getContactWithFriendRequestStatus_result_e res)
    P.return $ getContactWithFriendRequestStatus_result_success res
getCountryWithRequestIp (ip,op) = do
  send_getCountryWithRequestIp op
  recv_getCountryWithRequestIp ip
send_getCountryWithRequestIp op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getCountryWithRequestIp", T.M_CALL, seqn) $
    write_GetCountryWithRequestIp_args op (GetCountryWithRequestIp_args{})
recv_getCountryWithRequestIp ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetCountryWithRequestIp_result ip
    P.maybe (P.return ()) X.throw (getCountryWithRequestIp_result_e res)
    P.return $ getCountryWithRequestIp_result_success res
getFavoriteMids (ip,op) = do
  send_getFavoriteMids op
  recv_getFavoriteMids ip
send_getFavoriteMids op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getFavoriteMids", T.M_CALL, seqn) $
    write_GetFavoriteMids_args op (GetFavoriteMids_args{})
recv_getFavoriteMids ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetFavoriteMids_result ip
    P.maybe (P.return ()) X.throw (getFavoriteMids_result_e res)
    P.return $ getFavoriteMids_result_success res
getGroup (ip,op) arg_groupId = do
  send_getGroup op arg_groupId
  recv_getGroup ip
send_getGroup op arg_groupId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getGroup", T.M_CALL, seqn) $
    write_GetGroup_args op (GetGroup_args{getGroup_args_groupId=arg_groupId})
recv_getGroup ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetGroup_result ip
    P.maybe (P.return ()) X.throw (getGroup_result_e res)
    P.return $ getGroup_result_success res
getGroupIdsInvited (ip,op) = do
  send_getGroupIdsInvited op
  recv_getGroupIdsInvited ip
send_getGroupIdsInvited op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getGroupIdsInvited", T.M_CALL, seqn) $
    write_GetGroupIdsInvited_args op (GetGroupIdsInvited_args{})
recv_getGroupIdsInvited ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetGroupIdsInvited_result ip
    P.maybe (P.return ()) X.throw (getGroupIdsInvited_result_e res)
    P.return $ getGroupIdsInvited_result_success res
getGroupIdsJoined (ip,op) = do
  send_getGroupIdsJoined op
  recv_getGroupIdsJoined ip
send_getGroupIdsJoined op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getGroupIdsJoined", T.M_CALL, seqn) $
    write_GetGroupIdsJoined_args op (GetGroupIdsJoined_args{})
recv_getGroupIdsJoined ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetGroupIdsJoined_result ip
    P.maybe (P.return ()) X.throw (getGroupIdsJoined_result_e res)
    P.return $ getGroupIdsJoined_result_success res
getGroups (ip,op) arg_groupIds = do
  send_getGroups op arg_groupIds
  recv_getGroups ip
send_getGroups op arg_groupIds = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getGroups", T.M_CALL, seqn) $
    write_GetGroups_args op (GetGroups_args{getGroups_args_groupIds=arg_groupIds})
recv_getGroups ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetGroups_result ip
    P.maybe (P.return ()) X.throw (getGroups_result_e res)
    P.return $ getGroups_result_success res
getHiddenContactMids (ip,op) = do
  send_getHiddenContactMids op
  recv_getHiddenContactMids ip
send_getHiddenContactMids op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getHiddenContactMids", T.M_CALL, seqn) $
    write_GetHiddenContactMids_args op (GetHiddenContactMids_args{})
recv_getHiddenContactMids ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetHiddenContactMids_result ip
    P.maybe (P.return ()) X.throw (getHiddenContactMids_result_e res)
    P.return $ getHiddenContactMids_result_success res
getIdentityIdentifier (ip,op) = do
  send_getIdentityIdentifier op
  recv_getIdentityIdentifier ip
send_getIdentityIdentifier op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getIdentityIdentifier", T.M_CALL, seqn) $
    write_GetIdentityIdentifier_args op (GetIdentityIdentifier_args{})
recv_getIdentityIdentifier ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetIdentityIdentifier_result ip
    P.maybe (P.return ()) X.throw (getIdentityIdentifier_result_e res)
    P.return $ getIdentityIdentifier_result_success res
getLastAnnouncementIndex (ip,op) = do
  send_getLastAnnouncementIndex op
  recv_getLastAnnouncementIndex ip
send_getLastAnnouncementIndex op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getLastAnnouncementIndex", T.M_CALL, seqn) $
    write_GetLastAnnouncementIndex_args op (GetLastAnnouncementIndex_args{})
recv_getLastAnnouncementIndex ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetLastAnnouncementIndex_result ip
    P.maybe (P.return ()) X.throw (getLastAnnouncementIndex_result_e res)
    P.return $ getLastAnnouncementIndex_result_success res
getLastOpRevision (ip,op) = do
  send_getLastOpRevision op
  recv_getLastOpRevision ip
send_getLastOpRevision op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getLastOpRevision", T.M_CALL, seqn) $
    write_GetLastOpRevision_args op (GetLastOpRevision_args{})
recv_getLastOpRevision ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetLastOpRevision_result ip
    P.maybe (P.return ()) X.throw (getLastOpRevision_result_e res)
    P.return $ getLastOpRevision_result_success res
getSuggestRevisions (ip,op) = do
  send_getSuggestRevisions op
  recv_getSuggestRevisions ip
send_getSuggestRevisions op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSuggestRevisions", T.M_CALL, seqn) $
    write_GetSuggestRevisions_args op (GetSuggestRevisions_args{})
recv_getSuggestRevisions ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSuggestRevisions_result ip
    P.maybe (P.return ()) X.throw (getSuggestRevisions_result_e res)
    P.return $ getSuggestRevisions_result_success res
getPreviousMessagesV2WithReadCount (ip,op) arg_messageBoxId arg_endMessageId arg_messagesCount = do
  send_getPreviousMessagesV2WithReadCount op arg_messageBoxId arg_endMessageId arg_messagesCount
  recv_getPreviousMessagesV2WithReadCount ip
send_getPreviousMessagesV2WithReadCount op arg_messageBoxId arg_endMessageId arg_messagesCount = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getPreviousMessagesV2WithReadCount", T.M_CALL, seqn) $
    write_GetPreviousMessagesV2WithReadCount_args op (GetPreviousMessagesV2WithReadCount_args{getPreviousMessagesV2WithReadCount_args_messageBoxId=arg_messageBoxId,getPreviousMessagesV2WithReadCount_args_endMessageId=arg_endMessageId,getPreviousMessagesV2WithReadCount_args_messagesCount=arg_messagesCount})
recv_getPreviousMessagesV2WithReadCount ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetPreviousMessagesV2WithReadCount_result ip
    P.maybe (P.return ()) X.throw (getPreviousMessagesV2WithReadCount_result_e res)
    P.return $ getPreviousMessagesV2WithReadCount_result_success res
getMessageBox (ip,op) arg_channelId arg_messageBoxId arg_lastMessagesCount = do
  send_getMessageBox op arg_channelId arg_messageBoxId arg_lastMessagesCount
  recv_getMessageBox ip
send_getMessageBox op arg_channelId arg_messageBoxId arg_lastMessagesCount = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getMessageBox", T.M_CALL, seqn) $
    write_GetMessageBox_args op (GetMessageBox_args{getMessageBox_args_channelId=arg_channelId,getMessageBox_args_messageBoxId=arg_messageBoxId,getMessageBox_args_lastMessagesCount=arg_lastMessagesCount})
recv_getMessageBox ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetMessageBox_result ip
    P.maybe (P.return ()) X.throw (getMessageBox_result_e res)
    P.return $ getMessageBox_result_success res
getMessageBoxCompactWrapUp (ip,op) arg_mid = do
  send_getMessageBoxCompactWrapUp op arg_mid
  recv_getMessageBoxCompactWrapUp ip
send_getMessageBoxCompactWrapUp op arg_mid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getMessageBoxCompactWrapUp", T.M_CALL, seqn) $
    write_GetMessageBoxCompactWrapUp_args op (GetMessageBoxCompactWrapUp_args{getMessageBoxCompactWrapUp_args_mid=arg_mid})
recv_getMessageBoxCompactWrapUp ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetMessageBoxCompactWrapUp_result ip
    P.maybe (P.return ()) X.throw (getMessageBoxCompactWrapUp_result_e res)
    P.return $ getMessageBoxCompactWrapUp_result_success res
getMessageBoxCompactWrapUpList (ip,op) arg_start arg_messageBoxCount = do
  send_getMessageBoxCompactWrapUpList op arg_start arg_messageBoxCount
  recv_getMessageBoxCompactWrapUpList ip
send_getMessageBoxCompactWrapUpList op arg_start arg_messageBoxCount = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getMessageBoxCompactWrapUpList", T.M_CALL, seqn) $
    write_GetMessageBoxCompactWrapUpList_args op (GetMessageBoxCompactWrapUpList_args{getMessageBoxCompactWrapUpList_args_start=arg_start,getMessageBoxCompactWrapUpList_args_messageBoxCount=arg_messageBoxCount})
recv_getMessageBoxCompactWrapUpList ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetMessageBoxCompactWrapUpList_result ip
    P.maybe (P.return ()) X.throw (getMessageBoxCompactWrapUpList_result_e res)
    P.return $ getMessageBoxCompactWrapUpList_result_success res
getMessageBoxList (ip,op) arg_channelId arg_lastMessagesCount = do
  send_getMessageBoxList op arg_channelId arg_lastMessagesCount
  recv_getMessageBoxList ip
send_getMessageBoxList op arg_channelId arg_lastMessagesCount = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getMessageBoxList", T.M_CALL, seqn) $
    write_GetMessageBoxList_args op (GetMessageBoxList_args{getMessageBoxList_args_channelId=arg_channelId,getMessageBoxList_args_lastMessagesCount=arg_lastMessagesCount})
recv_getMessageBoxList ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetMessageBoxList_result ip
    P.maybe (P.return ()) X.throw (getMessageBoxList_result_e res)
    P.return $ getMessageBoxList_result_success res
getMessageBoxListByStatus (ip,op) arg_channelId arg_lastMessagesCount arg_status = do
  send_getMessageBoxListByStatus op arg_channelId arg_lastMessagesCount arg_status
  recv_getMessageBoxListByStatus ip
send_getMessageBoxListByStatus op arg_channelId arg_lastMessagesCount arg_status = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getMessageBoxListByStatus", T.M_CALL, seqn) $
    write_GetMessageBoxListByStatus_args op (GetMessageBoxListByStatus_args{getMessageBoxListByStatus_args_channelId=arg_channelId,getMessageBoxListByStatus_args_lastMessagesCount=arg_lastMessagesCount,getMessageBoxListByStatus_args_status=arg_status})
recv_getMessageBoxListByStatus ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetMessageBoxListByStatus_result ip
    P.maybe (P.return ()) X.throw (getMessageBoxListByStatus_result_e res)
    P.return $ getMessageBoxListByStatus_result_success res
getMessageBoxWrapUp (ip,op) arg_mid = do
  send_getMessageBoxWrapUp op arg_mid
  recv_getMessageBoxWrapUp ip
send_getMessageBoxWrapUp op arg_mid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getMessageBoxWrapUp", T.M_CALL, seqn) $
    write_GetMessageBoxWrapUp_args op (GetMessageBoxWrapUp_args{getMessageBoxWrapUp_args_mid=arg_mid})
recv_getMessageBoxWrapUp ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetMessageBoxWrapUp_result ip
    P.maybe (P.return ()) X.throw (getMessageBoxWrapUp_result_e res)
    P.return $ getMessageBoxWrapUp_result_success res
getMessageBoxWrapUpList (ip,op) arg_start arg_messageBoxCount = do
  send_getMessageBoxWrapUpList op arg_start arg_messageBoxCount
  recv_getMessageBoxWrapUpList ip
send_getMessageBoxWrapUpList op arg_start arg_messageBoxCount = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getMessageBoxWrapUpList", T.M_CALL, seqn) $
    write_GetMessageBoxWrapUpList_args op (GetMessageBoxWrapUpList_args{getMessageBoxWrapUpList_args_start=arg_start,getMessageBoxWrapUpList_args_messageBoxCount=arg_messageBoxCount})
recv_getMessageBoxWrapUpList ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetMessageBoxWrapUpList_result ip
    P.maybe (P.return ()) X.throw (getMessageBoxWrapUpList_result_e res)
    P.return $ getMessageBoxWrapUpList_result_success res
getMessagesBySequenceNumber (ip,op) arg_channelId arg_messageBoxId arg_startSeq arg_endSeq = do
  send_getMessagesBySequenceNumber op arg_channelId arg_messageBoxId arg_startSeq arg_endSeq
  recv_getMessagesBySequenceNumber ip
send_getMessagesBySequenceNumber op arg_channelId arg_messageBoxId arg_startSeq arg_endSeq = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getMessagesBySequenceNumber", T.M_CALL, seqn) $
    write_GetMessagesBySequenceNumber_args op (GetMessagesBySequenceNumber_args{getMessagesBySequenceNumber_args_channelId=arg_channelId,getMessagesBySequenceNumber_args_messageBoxId=arg_messageBoxId,getMessagesBySequenceNumber_args_startSeq=arg_startSeq,getMessagesBySequenceNumber_args_endSeq=arg_endSeq})
recv_getMessagesBySequenceNumber ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetMessagesBySequenceNumber_result ip
    P.maybe (P.return ()) X.throw (getMessagesBySequenceNumber_result_e res)
    P.return $ getMessagesBySequenceNumber_result_success res
getNextMessages (ip,op) arg_messageBoxId arg_startSeq arg_messagesCount = do
  send_getNextMessages op arg_messageBoxId arg_startSeq arg_messagesCount
  recv_getNextMessages ip
send_getNextMessages op arg_messageBoxId arg_startSeq arg_messagesCount = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getNextMessages", T.M_CALL, seqn) $
    write_GetNextMessages_args op (GetNextMessages_args{getNextMessages_args_messageBoxId=arg_messageBoxId,getNextMessages_args_startSeq=arg_startSeq,getNextMessages_args_messagesCount=arg_messagesCount})
recv_getNextMessages ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetNextMessages_result ip
    P.maybe (P.return ()) X.throw (getNextMessages_result_e res)
    P.return $ getNextMessages_result_success res
getNotificationPolicy (ip,op) arg_carrier = do
  send_getNotificationPolicy op arg_carrier
  recv_getNotificationPolicy ip
send_getNotificationPolicy op arg_carrier = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getNotificationPolicy", T.M_CALL, seqn) $
    write_GetNotificationPolicy_args op (GetNotificationPolicy_args{getNotificationPolicy_args_carrier=arg_carrier})
recv_getNotificationPolicy ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetNotificationPolicy_result ip
    P.maybe (P.return ()) X.throw (getNotificationPolicy_result_e res)
    P.return $ getNotificationPolicy_result_success res
getPreviousMessages (ip,op) arg_messageBoxId arg_endSeq arg_messagesCount = do
  send_getPreviousMessages op arg_messageBoxId arg_endSeq arg_messagesCount
  recv_getPreviousMessages ip
send_getPreviousMessages op arg_messageBoxId arg_endSeq arg_messagesCount = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getPreviousMessages", T.M_CALL, seqn) $
    write_GetPreviousMessages_args op (GetPreviousMessages_args{getPreviousMessages_args_messageBoxId=arg_messageBoxId,getPreviousMessages_args_endSeq=arg_endSeq,getPreviousMessages_args_messagesCount=arg_messagesCount})
recv_getPreviousMessages ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetPreviousMessages_result ip
    P.maybe (P.return ()) X.throw (getPreviousMessages_result_e res)
    P.return $ getPreviousMessages_result_success res
getProfile (ip,op) = do
  send_getProfile op
  recv_getProfile ip
send_getProfile op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getProfile", T.M_CALL, seqn) $
    write_GetProfile_args op (GetProfile_args{})
recv_getProfile ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetProfile_result ip
    P.maybe (P.return ()) X.throw (getProfile_result_e res)
    P.return $ getProfile_result_success res
getProximityMatchCandidateList (ip,op) arg_sessionId = do
  send_getProximityMatchCandidateList op arg_sessionId
  recv_getProximityMatchCandidateList ip
send_getProximityMatchCandidateList op arg_sessionId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getProximityMatchCandidateList", T.M_CALL, seqn) $
    write_GetProximityMatchCandidateList_args op (GetProximityMatchCandidateList_args{getProximityMatchCandidateList_args_sessionId=arg_sessionId})
recv_getProximityMatchCandidateList ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetProximityMatchCandidateList_result ip
    P.maybe (P.return ()) X.throw (getProximityMatchCandidateList_result_e res)
    P.return $ getProximityMatchCandidateList_result_success res
getProximityMatchCandidates (ip,op) arg_sessionId = do
  send_getProximityMatchCandidates op arg_sessionId
  recv_getProximityMatchCandidates ip
send_getProximityMatchCandidates op arg_sessionId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getProximityMatchCandidates", T.M_CALL, seqn) $
    write_GetProximityMatchCandidates_args op (GetProximityMatchCandidates_args{getProximityMatchCandidates_args_sessionId=arg_sessionId})
recv_getProximityMatchCandidates ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetProximityMatchCandidates_result ip
    P.maybe (P.return ()) X.throw (getProximityMatchCandidates_result_e res)
    P.return $ getProximityMatchCandidates_result_success res
getRecentMessages (ip,op) arg_messageBoxId arg_messagesCount = do
  send_getRecentMessages op arg_messageBoxId arg_messagesCount
  recv_getRecentMessages ip
send_getRecentMessages op arg_messageBoxId arg_messagesCount = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getRecentMessages", T.M_CALL, seqn) $
    write_GetRecentMessages_args op (GetRecentMessages_args{getRecentMessages_args_messageBoxId=arg_messageBoxId,getRecentMessages_args_messagesCount=arg_messagesCount})
recv_getRecentMessages ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetRecentMessages_result ip
    P.maybe (P.return ()) X.throw (getRecentMessages_result_e res)
    P.return $ getRecentMessages_result_success res
getRecommendationIds (ip,op) = do
  send_getRecommendationIds op
  recv_getRecommendationIds ip
send_getRecommendationIds op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getRecommendationIds", T.M_CALL, seqn) $
    write_GetRecommendationIds_args op (GetRecommendationIds_args{})
recv_getRecommendationIds ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetRecommendationIds_result ip
    P.maybe (P.return ()) X.throw (getRecommendationIds_result_e res)
    P.return $ getRecommendationIds_result_success res
getRoom (ip,op) arg_roomId = do
  send_getRoom op arg_roomId
  recv_getRoom ip
send_getRoom op arg_roomId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getRoom", T.M_CALL, seqn) $
    write_GetRoom_args op (GetRoom_args{getRoom_args_roomId=arg_roomId})
recv_getRoom ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetRoom_result ip
    P.maybe (P.return ()) X.throw (getRoom_result_e res)
    P.return $ getRoom_result_success res
getRSAKeyInfo (ip,op) arg_provider = do
  send_getRSAKeyInfo op arg_provider
  recv_getRSAKeyInfo ip
send_getRSAKeyInfo op arg_provider = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getRSAKeyInfo", T.M_CALL, seqn) $
    write_GetRSAKeyInfo_args op (GetRSAKeyInfo_args{getRSAKeyInfo_args_provider=arg_provider})
recv_getRSAKeyInfo ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetRSAKeyInfo_result ip
    P.maybe (P.return ()) X.throw (getRSAKeyInfo_result_e res)
    P.return $ getRSAKeyInfo_result_success res
getServerTime (ip,op) = do
  send_getServerTime op
  recv_getServerTime ip
send_getServerTime op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getServerTime", T.M_CALL, seqn) $
    write_GetServerTime_args op (GetServerTime_args{})
recv_getServerTime ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetServerTime_result ip
    P.maybe (P.return ()) X.throw (getServerTime_result_e res)
    P.return $ getServerTime_result_success res
getSessions (ip,op) = do
  send_getSessions op
  recv_getSessions ip
send_getSessions op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSessions", T.M_CALL, seqn) $
    write_GetSessions_args op (GetSessions_args{})
recv_getSessions ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSessions_result ip
    P.maybe (P.return ()) X.throw (getSessions_result_e res)
    P.return $ getSessions_result_success res
getSettings (ip,op) = do
  send_getSettings op
  recv_getSettings ip
send_getSettings op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSettings", T.M_CALL, seqn) $
    write_GetSettings_args op (GetSettings_args{})
recv_getSettings ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSettings_result ip
    P.maybe (P.return ()) X.throw (getSettings_result_e res)
    P.return $ getSettings_result_success res
getGroupsV2 (ip,op) arg_groupIds = do
  send_getGroupsV2 op arg_groupIds
  recv_getGroupsV2 ip
send_getGroupsV2 op arg_groupIds = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getGroupsV2", T.M_CALL, seqn) $
    write_GetGroupsV2_args op (GetGroupsV2_args{getGroupsV2_args_groupIds=arg_groupIds})
recv_getGroupsV2 ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetGroupsV2_result ip
    P.maybe (P.return ()) X.throw (getGroupsV2_result_e res)
    P.return $ getGroupsV2_result_success res
getSettingsAttributes (ip,op) arg_attrBitset = do
  send_getSettingsAttributes op arg_attrBitset
  recv_getSettingsAttributes ip
send_getSettingsAttributes op arg_attrBitset = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSettingsAttributes", T.M_CALL, seqn) $
    write_GetSettingsAttributes_args op (GetSettingsAttributes_args{getSettingsAttributes_args_attrBitset=arg_attrBitset})
recv_getSettingsAttributes ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSettingsAttributes_result ip
    P.maybe (P.return ()) X.throw (getSettingsAttributes_result_e res)
    P.return $ getSettingsAttributes_result_success res
getSystemConfiguration (ip,op) = do
  send_getSystemConfiguration op
  recv_getSystemConfiguration ip
send_getSystemConfiguration op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSystemConfiguration", T.M_CALL, seqn) $
    write_GetSystemConfiguration_args op (GetSystemConfiguration_args{})
recv_getSystemConfiguration ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSystemConfiguration_result ip
    P.maybe (P.return ()) X.throw (getSystemConfiguration_result_e res)
    P.return $ getSystemConfiguration_result_success res
getUserTicket (ip,op) = do
  send_getUserTicket op
  recv_getUserTicket ip
send_getUserTicket op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getUserTicket", T.M_CALL, seqn) $
    write_GetUserTicket_args op (GetUserTicket_args{})
recv_getUserTicket ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetUserTicket_result ip
    P.maybe (P.return ()) X.throw (getUserTicket_result_e res)
    P.return $ getUserTicket_result_success res
getWapInvitation (ip,op) arg_invitationHash = do
  send_getWapInvitation op arg_invitationHash
  recv_getWapInvitation ip
send_getWapInvitation op arg_invitationHash = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getWapInvitation", T.M_CALL, seqn) $
    write_GetWapInvitation_args op (GetWapInvitation_args{getWapInvitation_args_invitationHash=arg_invitationHash})
recv_getWapInvitation ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetWapInvitation_result ip
    P.maybe (P.return ()) X.throw (getWapInvitation_result_e res)
    P.return $ getWapInvitation_result_success res
invalidateUserTicket (ip,op) = do
  send_invalidateUserTicket op
  recv_invalidateUserTicket ip
send_invalidateUserTicket op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("invalidateUserTicket", T.M_CALL, seqn) $
    write_InvalidateUserTicket_args op (InvalidateUserTicket_args{})
recv_invalidateUserTicket ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_InvalidateUserTicket_result ip
    P.maybe (P.return ()) X.throw (invalidateUserTicket_result_e res)
    P.return ()
inviteFriendsBySms (ip,op) arg_phoneNumberList = do
  send_inviteFriendsBySms op arg_phoneNumberList
  recv_inviteFriendsBySms ip
send_inviteFriendsBySms op arg_phoneNumberList = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("inviteFriendsBySms", T.M_CALL, seqn) $
    write_InviteFriendsBySms_args op (InviteFriendsBySms_args{inviteFriendsBySms_args_phoneNumberList=arg_phoneNumberList})
recv_inviteFriendsBySms ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_InviteFriendsBySms_result ip
    P.maybe (P.return ()) X.throw (inviteFriendsBySms_result_e res)
    P.return ()
inviteIntoGroup (ip,op) arg_reqSeq arg_groupId arg_contactIds = do
  send_inviteIntoGroup op arg_reqSeq arg_groupId arg_contactIds
  recv_inviteIntoGroup ip
send_inviteIntoGroup op arg_reqSeq arg_groupId arg_contactIds = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("inviteIntoGroup", T.M_CALL, seqn) $
    write_InviteIntoGroup_args op (InviteIntoGroup_args{inviteIntoGroup_args_reqSeq=arg_reqSeq,inviteIntoGroup_args_groupId=arg_groupId,inviteIntoGroup_args_contactIds=arg_contactIds})
recv_inviteIntoGroup ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_InviteIntoGroup_result ip
    P.maybe (P.return ()) X.throw (inviteIntoGroup_result_e res)
    P.return ()
inviteIntoRoom (ip,op) arg_reqSeq arg_roomId arg_contactIds = do
  send_inviteIntoRoom op arg_reqSeq arg_roomId arg_contactIds
  recv_inviteIntoRoom ip
send_inviteIntoRoom op arg_reqSeq arg_roomId arg_contactIds = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("inviteIntoRoom", T.M_CALL, seqn) $
    write_InviteIntoRoom_args op (InviteIntoRoom_args{inviteIntoRoom_args_reqSeq=arg_reqSeq,inviteIntoRoom_args_roomId=arg_roomId,inviteIntoRoom_args_contactIds=arg_contactIds})
recv_inviteIntoRoom ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_InviteIntoRoom_result ip
    P.maybe (P.return ()) X.throw (inviteIntoRoom_result_e res)
    P.return ()
inviteViaEmail (ip,op) arg_reqSeq arg_email arg_name = do
  send_inviteViaEmail op arg_reqSeq arg_email arg_name
  recv_inviteViaEmail ip
send_inviteViaEmail op arg_reqSeq arg_email arg_name = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("inviteViaEmail", T.M_CALL, seqn) $
    write_InviteViaEmail_args op (InviteViaEmail_args{inviteViaEmail_args_reqSeq=arg_reqSeq,inviteViaEmail_args_email=arg_email,inviteViaEmail_args_name=arg_name})
recv_inviteViaEmail ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_InviteViaEmail_result ip
    P.maybe (P.return ()) X.throw (inviteViaEmail_result_e res)
    P.return ()
isIdentityIdentifierAvailable (ip,op) arg_provider arg_identifier = do
  send_isIdentityIdentifierAvailable op arg_provider arg_identifier
  recv_isIdentityIdentifierAvailable ip
send_isIdentityIdentifierAvailable op arg_provider arg_identifier = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("isIdentityIdentifierAvailable", T.M_CALL, seqn) $
    write_IsIdentityIdentifierAvailable_args op (IsIdentityIdentifierAvailable_args{isIdentityIdentifierAvailable_args_provider=arg_provider,isIdentityIdentifierAvailable_args_identifier=arg_identifier})
recv_isIdentityIdentifierAvailable ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_IsIdentityIdentifierAvailable_result ip
    P.maybe (P.return ()) X.throw (isIdentityIdentifierAvailable_result_e res)
    P.return $ isIdentityIdentifierAvailable_result_success res
isUseridAvailable (ip,op) arg_userid = do
  send_isUseridAvailable op arg_userid
  recv_isUseridAvailable ip
send_isUseridAvailable op arg_userid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("isUseridAvailable", T.M_CALL, seqn) $
    write_IsUseridAvailable_args op (IsUseridAvailable_args{isUseridAvailable_args_userid=arg_userid})
recv_isUseridAvailable ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_IsUseridAvailable_result ip
    P.maybe (P.return ()) X.throw (isUseridAvailable_result_e res)
    P.return $ isUseridAvailable_result_success res
kickoutFromGroup (ip,op) arg_reqSeq arg_groupId arg_contactIds = do
  send_kickoutFromGroup op arg_reqSeq arg_groupId arg_contactIds
  recv_kickoutFromGroup ip
send_kickoutFromGroup op arg_reqSeq arg_groupId arg_contactIds = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("kickoutFromGroup", T.M_CALL, seqn) $
    write_KickoutFromGroup_args op (KickoutFromGroup_args{kickoutFromGroup_args_reqSeq=arg_reqSeq,kickoutFromGroup_args_groupId=arg_groupId,kickoutFromGroup_args_contactIds=arg_contactIds})
recv_kickoutFromGroup ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_KickoutFromGroup_result ip
    P.maybe (P.return ()) X.throw (kickoutFromGroup_result_e res)
    P.return ()
reissueGroupTicket (ip,op) arg_groupMid = do
  send_reissueGroupTicket op arg_groupMid
  recv_reissueGroupTicket ip
send_reissueGroupTicket op arg_groupMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("reissueGroupTicket", T.M_CALL, seqn) $
    write_ReissueGroupTicket_args op (ReissueGroupTicket_args{reissueGroupTicket_args_groupMid=arg_groupMid})
recv_reissueGroupTicket ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ReissueGroupTicket_result ip
    P.maybe (P.return ()) X.throw (reissueGroupTicket_result_e res)
    P.return $ reissueGroupTicket_result_success res
findGroupByTicket (ip,op) arg_ticketId = do
  send_findGroupByTicket op arg_ticketId
  recv_findGroupByTicket ip
send_findGroupByTicket op arg_ticketId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("findGroupByTicket", T.M_CALL, seqn) $
    write_FindGroupByTicket_args op (FindGroupByTicket_args{findGroupByTicket_args_ticketId=arg_ticketId})
recv_findGroupByTicket ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FindGroupByTicket_result ip
    P.maybe (P.return ()) X.throw (findGroupByTicket_result_e res)
    P.return $ findGroupByTicket_result_success res
leaveGroup (ip,op) arg_reqSeq arg_groupId = do
  send_leaveGroup op arg_reqSeq arg_groupId
  recv_leaveGroup ip
send_leaveGroup op arg_reqSeq arg_groupId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("leaveGroup", T.M_CALL, seqn) $
    write_LeaveGroup_args op (LeaveGroup_args{leaveGroup_args_reqSeq=arg_reqSeq,leaveGroup_args_groupId=arg_groupId})
recv_leaveGroup ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_LeaveGroup_result ip
    P.maybe (P.return ()) X.throw (leaveGroup_result_e res)
    P.return ()
leaveRoom (ip,op) arg_reqSeq arg_roomId = do
  send_leaveRoom op arg_reqSeq arg_roomId
  recv_leaveRoom ip
send_leaveRoom op arg_reqSeq arg_roomId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("leaveRoom", T.M_CALL, seqn) $
    write_LeaveRoom_args op (LeaveRoom_args{leaveRoom_args_reqSeq=arg_reqSeq,leaveRoom_args_roomId=arg_roomId})
recv_leaveRoom ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_LeaveRoom_result ip
    P.maybe (P.return ()) X.throw (leaveRoom_result_e res)
    P.return ()
loginWithIdentityCredential (ip,op) arg_identityProvider arg_identifier arg_password arg_keepLoggedIn arg_accessLocation arg_systemName arg_certificate = do
  send_loginWithIdentityCredential op arg_identityProvider arg_identifier arg_password arg_keepLoggedIn arg_accessLocation arg_systemName arg_certificate
  recv_loginWithIdentityCredential ip
send_loginWithIdentityCredential op arg_identityProvider arg_identifier arg_password arg_keepLoggedIn arg_accessLocation arg_systemName arg_certificate = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("loginWithIdentityCredential", T.M_CALL, seqn) $
    write_LoginWithIdentityCredential_args op (LoginWithIdentityCredential_args{loginWithIdentityCredential_args_identityProvider=arg_identityProvider,loginWithIdentityCredential_args_identifier=arg_identifier,loginWithIdentityCredential_args_password=arg_password,loginWithIdentityCredential_args_keepLoggedIn=arg_keepLoggedIn,loginWithIdentityCredential_args_accessLocation=arg_accessLocation,loginWithIdentityCredential_args_systemName=arg_systemName,loginWithIdentityCredential_args_certificate=arg_certificate})
recv_loginWithIdentityCredential ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_LoginWithIdentityCredential_result ip
    P.maybe (P.return ()) X.throw (loginWithIdentityCredential_result_e res)
    P.return $ loginWithIdentityCredential_result_success res
loginWithIdentityCredentialForCertificate (ip,op) arg_identityProvider arg_identifier arg_password arg_keepLoggedIn arg_accessLocation arg_systemName arg_certificate = do
  send_loginWithIdentityCredentialForCertificate op arg_identityProvider arg_identifier arg_password arg_keepLoggedIn arg_accessLocation arg_systemName arg_certificate
  recv_loginWithIdentityCredentialForCertificate ip
send_loginWithIdentityCredentialForCertificate op arg_identityProvider arg_identifier arg_password arg_keepLoggedIn arg_accessLocation arg_systemName arg_certificate = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("loginWithIdentityCredentialForCertificate", T.M_CALL, seqn) $
    write_LoginWithIdentityCredentialForCertificate_args op (LoginWithIdentityCredentialForCertificate_args{loginWithIdentityCredentialForCertificate_args_identityProvider=arg_identityProvider,loginWithIdentityCredentialForCertificate_args_identifier=arg_identifier,loginWithIdentityCredentialForCertificate_args_password=arg_password,loginWithIdentityCredentialForCertificate_args_keepLoggedIn=arg_keepLoggedIn,loginWithIdentityCredentialForCertificate_args_accessLocation=arg_accessLocation,loginWithIdentityCredentialForCertificate_args_systemName=arg_systemName,loginWithIdentityCredentialForCertificate_args_certificate=arg_certificate})
recv_loginWithIdentityCredentialForCertificate ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_LoginWithIdentityCredentialForCertificate_result ip
    P.maybe (P.return ()) X.throw (loginWithIdentityCredentialForCertificate_result_e res)
    P.return $ loginWithIdentityCredentialForCertificate_result_success res
loginWithVerifier (ip,op) arg_verifier = do
  send_loginWithVerifier op arg_verifier
  recv_loginWithVerifier ip
send_loginWithVerifier op arg_verifier = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("loginWithVerifier", T.M_CALL, seqn) $
    write_LoginWithVerifier_args op (LoginWithVerifier_args{loginWithVerifier_args_verifier=arg_verifier})
recv_loginWithVerifier ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_LoginWithVerifier_result ip
    P.maybe (P.return ()) X.throw (loginWithVerifier_result_e res)
    P.return $ loginWithVerifier_result_success res
loginWithVerifierForCerificate (ip,op) arg_verifier = do
  send_loginWithVerifierForCerificate op arg_verifier
  recv_loginWithVerifierForCerificate ip
send_loginWithVerifierForCerificate op arg_verifier = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("loginWithVerifierForCerificate", T.M_CALL, seqn) $
    write_LoginWithVerifierForCerificate_args op (LoginWithVerifierForCerificate_args{loginWithVerifierForCerificate_args_verifier=arg_verifier})
recv_loginWithVerifierForCerificate ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_LoginWithVerifierForCerificate_result ip
    P.maybe (P.return ()) X.throw (loginWithVerifierForCerificate_result_e res)
    P.return $ loginWithVerifierForCerificate_result_success res
loginWithVerifierForCertificate (ip,op) arg_verifier = do
  send_loginWithVerifierForCertificate op arg_verifier
  recv_loginWithVerifierForCertificate ip
send_loginWithVerifierForCertificate op arg_verifier = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("loginWithVerifierForCertificate", T.M_CALL, seqn) $
    write_LoginWithVerifierForCertificate_args op (LoginWithVerifierForCertificate_args{loginWithVerifierForCertificate_args_verifier=arg_verifier})
recv_loginWithVerifierForCertificate ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_LoginWithVerifierForCertificate_result ip
    P.maybe (P.return ()) X.throw (loginWithVerifierForCertificate_result_e res)
    P.return $ loginWithVerifierForCertificate_result_success res
logout (ip,op) = do
  send_logout op
  recv_logout ip
send_logout op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("logout", T.M_CALL, seqn) $
    write_Logout_args op (Logout_args{})
recv_logout ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_Logout_result ip
    P.maybe (P.return ()) X.throw (logout_result_e res)
    P.return ()
logoutSession (ip,op) arg_tokenKey = do
  send_logoutSession op arg_tokenKey
  recv_logoutSession ip
send_logoutSession op arg_tokenKey = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("logoutSession", T.M_CALL, seqn) $
    write_LogoutSession_args op (LogoutSession_args{logoutSession_args_tokenKey=arg_tokenKey})
recv_logoutSession ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_LogoutSession_result ip
    P.maybe (P.return ()) X.throw (logoutSession_result_e res)
    P.return ()
noop (ip,op) = do
  send_noop op
  recv_noop ip
send_noop op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("noop", T.M_CALL, seqn) $
    write_Noop_args op (Noop_args{})
recv_noop ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_Noop_result ip
    P.maybe (P.return ()) X.throw (noop_result_e res)
    P.return ()
notifiedRedirect (ip,op) arg_paramMap = do
  send_notifiedRedirect op arg_paramMap
  recv_notifiedRedirect ip
send_notifiedRedirect op arg_paramMap = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("notifiedRedirect", T.M_CALL, seqn) $
    write_NotifiedRedirect_args op (NotifiedRedirect_args{notifiedRedirect_args_paramMap=arg_paramMap})
recv_notifiedRedirect ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_NotifiedRedirect_result ip
    P.maybe (P.return ()) X.throw (notifiedRedirect_result_e res)
    P.return ()
notifyBuddyOnAir (ip,op) arg_seq arg_receiverMids = do
  send_notifyBuddyOnAir op arg_seq arg_receiverMids
  recv_notifyBuddyOnAir ip
send_notifyBuddyOnAir op arg_seq arg_receiverMids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("notifyBuddyOnAir", T.M_CALL, seqn) $
    write_NotifyBuddyOnAir_args op (NotifyBuddyOnAir_args{notifyBuddyOnAir_args_seq=arg_seq,notifyBuddyOnAir_args_receiverMids=arg_receiverMids})
recv_notifyBuddyOnAir ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_NotifyBuddyOnAir_result ip
    P.maybe (P.return ()) X.throw (notifyBuddyOnAir_result_e res)
    P.return $ notifyBuddyOnAir_result_success res
notifyIndividualEvent (ip,op) arg_notificationStatus arg_receiverMids = do
  send_notifyIndividualEvent op arg_notificationStatus arg_receiverMids
  recv_notifyIndividualEvent ip
send_notifyIndividualEvent op arg_notificationStatus arg_receiverMids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("notifyIndividualEvent", T.M_CALL, seqn) $
    write_NotifyIndividualEvent_args op (NotifyIndividualEvent_args{notifyIndividualEvent_args_notificationStatus=arg_notificationStatus,notifyIndividualEvent_args_receiverMids=arg_receiverMids})
recv_notifyIndividualEvent ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_NotifyIndividualEvent_result ip
    P.maybe (P.return ()) X.throw (notifyIndividualEvent_result_e res)
    P.return ()
notifyInstalled (ip,op) arg_udidHash arg_applicationTypeWithExtensions = do
  send_notifyInstalled op arg_udidHash arg_applicationTypeWithExtensions
  recv_notifyInstalled ip
send_notifyInstalled op arg_udidHash arg_applicationTypeWithExtensions = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("notifyInstalled", T.M_CALL, seqn) $
    write_NotifyInstalled_args op (NotifyInstalled_args{notifyInstalled_args_udidHash=arg_udidHash,notifyInstalled_args_applicationTypeWithExtensions=arg_applicationTypeWithExtensions})
recv_notifyInstalled ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_NotifyInstalled_result ip
    P.maybe (P.return ()) X.throw (notifyInstalled_result_e res)
    P.return ()
notifyRegistrationComplete (ip,op) arg_udidHash arg_applicationTypeWithExtensions = do
  send_notifyRegistrationComplete op arg_udidHash arg_applicationTypeWithExtensions
  recv_notifyRegistrationComplete ip
send_notifyRegistrationComplete op arg_udidHash arg_applicationTypeWithExtensions = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("notifyRegistrationComplete", T.M_CALL, seqn) $
    write_NotifyRegistrationComplete_args op (NotifyRegistrationComplete_args{notifyRegistrationComplete_args_udidHash=arg_udidHash,notifyRegistrationComplete_args_applicationTypeWithExtensions=arg_applicationTypeWithExtensions})
recv_notifyRegistrationComplete ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_NotifyRegistrationComplete_result ip
    P.maybe (P.return ()) X.throw (notifyRegistrationComplete_result_e res)
    P.return ()
notifySleep (ip,op) arg_lastRev arg_badge = do
  send_notifySleep op arg_lastRev arg_badge
  recv_notifySleep ip
send_notifySleep op arg_lastRev arg_badge = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("notifySleep", T.M_CALL, seqn) $
    write_NotifySleep_args op (NotifySleep_args{notifySleep_args_lastRev=arg_lastRev,notifySleep_args_badge=arg_badge})
recv_notifySleep ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_NotifySleep_result ip
    P.maybe (P.return ()) X.throw (notifySleep_result_e res)
    P.return ()
notifyUpdated (ip,op) arg_lastRev arg_deviceInfo = do
  send_notifyUpdated op arg_lastRev arg_deviceInfo
  recv_notifyUpdated ip
send_notifyUpdated op arg_lastRev arg_deviceInfo = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("notifyUpdated", T.M_CALL, seqn) $
    write_NotifyUpdated_args op (NotifyUpdated_args{notifyUpdated_args_lastRev=arg_lastRev,notifyUpdated_args_deviceInfo=arg_deviceInfo})
recv_notifyUpdated ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_NotifyUpdated_result ip
    P.maybe (P.return ()) X.throw (notifyUpdated_result_e res)
    P.return ()
openProximityMatch (ip,op) arg_location = do
  send_openProximityMatch op arg_location
  recv_openProximityMatch ip
send_openProximityMatch op arg_location = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("openProximityMatch", T.M_CALL, seqn) $
    write_OpenProximityMatch_args op (OpenProximityMatch_args{openProximityMatch_args_location=arg_location})
recv_openProximityMatch ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_OpenProximityMatch_result ip
    P.maybe (P.return ()) X.throw (openProximityMatch_result_e res)
    P.return $ openProximityMatch_result_success res
registerBuddyUser (ip,op) arg_buddyId arg_registrarPassword = do
  send_registerBuddyUser op arg_buddyId arg_registrarPassword
  recv_registerBuddyUser ip
send_registerBuddyUser op arg_buddyId arg_registrarPassword = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("registerBuddyUser", T.M_CALL, seqn) $
    write_RegisterBuddyUser_args op (RegisterBuddyUser_args{registerBuddyUser_args_buddyId=arg_buddyId,registerBuddyUser_args_registrarPassword=arg_registrarPassword})
recv_registerBuddyUser ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RegisterBuddyUser_result ip
    P.maybe (P.return ()) X.throw (registerBuddyUser_result_e res)
    P.return $ registerBuddyUser_result_success res
registerBuddyUserid (ip,op) arg_seq arg_userid = do
  send_registerBuddyUserid op arg_seq arg_userid
  recv_registerBuddyUserid ip
send_registerBuddyUserid op arg_seq arg_userid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("registerBuddyUserid", T.M_CALL, seqn) $
    write_RegisterBuddyUserid_args op (RegisterBuddyUserid_args{registerBuddyUserid_args_seq=arg_seq,registerBuddyUserid_args_userid=arg_userid})
recv_registerBuddyUserid ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RegisterBuddyUserid_result ip
    P.maybe (P.return ()) X.throw (registerBuddyUserid_result_e res)
    P.return ()
registerDevice (ip,op) arg_sessionId = do
  send_registerDevice op arg_sessionId
  recv_registerDevice ip
send_registerDevice op arg_sessionId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("registerDevice", T.M_CALL, seqn) $
    write_RegisterDevice_args op (RegisterDevice_args{registerDevice_args_sessionId=arg_sessionId})
recv_registerDevice ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RegisterDevice_result ip
    P.maybe (P.return ()) X.throw (registerDevice_result_e res)
    P.return $ registerDevice_result_success res
registerDeviceWithIdentityCredential (ip,op) arg_sessionId arg_provider arg_identifier arg_verifier = do
  send_registerDeviceWithIdentityCredential op arg_sessionId arg_provider arg_identifier arg_verifier
  recv_registerDeviceWithIdentityCredential ip
send_registerDeviceWithIdentityCredential op arg_sessionId arg_provider arg_identifier arg_verifier = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("registerDeviceWithIdentityCredential", T.M_CALL, seqn) $
    write_RegisterDeviceWithIdentityCredential_args op (RegisterDeviceWithIdentityCredential_args{registerDeviceWithIdentityCredential_args_sessionId=arg_sessionId,registerDeviceWithIdentityCredential_args_provider=arg_provider,registerDeviceWithIdentityCredential_args_identifier=arg_identifier,registerDeviceWithIdentityCredential_args_verifier=arg_verifier})
recv_registerDeviceWithIdentityCredential ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RegisterDeviceWithIdentityCredential_result ip
    P.maybe (P.return ()) X.throw (registerDeviceWithIdentityCredential_result_e res)
    P.return $ registerDeviceWithIdentityCredential_result_success res
registerDeviceWithoutPhoneNumber (ip,op) arg_region arg_udidHash arg_deviceInfo = do
  send_registerDeviceWithoutPhoneNumber op arg_region arg_udidHash arg_deviceInfo
  recv_registerDeviceWithoutPhoneNumber ip
send_registerDeviceWithoutPhoneNumber op arg_region arg_udidHash arg_deviceInfo = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("registerDeviceWithoutPhoneNumber", T.M_CALL, seqn) $
    write_RegisterDeviceWithoutPhoneNumber_args op (RegisterDeviceWithoutPhoneNumber_args{registerDeviceWithoutPhoneNumber_args_region=arg_region,registerDeviceWithoutPhoneNumber_args_udidHash=arg_udidHash,registerDeviceWithoutPhoneNumber_args_deviceInfo=arg_deviceInfo})
recv_registerDeviceWithoutPhoneNumber ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RegisterDeviceWithoutPhoneNumber_result ip
    P.maybe (P.return ()) X.throw (registerDeviceWithoutPhoneNumber_result_e res)
    P.return $ registerDeviceWithoutPhoneNumber_result_success res
registerDeviceWithoutPhoneNumberWithIdentityCredential (ip,op) arg_region arg_udidHash arg_deviceInfo arg_provider arg_identifier arg_verifier arg_mid arg_migrationPincodeSessionId = do
  send_registerDeviceWithoutPhoneNumberWithIdentityCredential op arg_region arg_udidHash arg_deviceInfo arg_provider arg_identifier arg_verifier arg_mid arg_migrationPincodeSessionId
  recv_registerDeviceWithoutPhoneNumberWithIdentityCredential ip
send_registerDeviceWithoutPhoneNumberWithIdentityCredential op arg_region arg_udidHash arg_deviceInfo arg_provider arg_identifier arg_verifier arg_mid arg_migrationPincodeSessionId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("registerDeviceWithoutPhoneNumberWithIdentityCredential", T.M_CALL, seqn) $
    write_RegisterDeviceWithoutPhoneNumberWithIdentityCredential_args op (RegisterDeviceWithoutPhoneNumberWithIdentityCredential_args{registerDeviceWithoutPhoneNumberWithIdentityCredential_args_region=arg_region,registerDeviceWithoutPhoneNumberWithIdentityCredential_args_udidHash=arg_udidHash,registerDeviceWithoutPhoneNumberWithIdentityCredential_args_deviceInfo=arg_deviceInfo,registerDeviceWithoutPhoneNumberWithIdentityCredential_args_provider=arg_provider,registerDeviceWithoutPhoneNumberWithIdentityCredential_args_identifier=arg_identifier,registerDeviceWithoutPhoneNumberWithIdentityCredential_args_verifier=arg_verifier,registerDeviceWithoutPhoneNumberWithIdentityCredential_args_mid=arg_mid,registerDeviceWithoutPhoneNumberWithIdentityCredential_args_migrationPincodeSessionId=arg_migrationPincodeSessionId})
recv_registerDeviceWithoutPhoneNumberWithIdentityCredential ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RegisterDeviceWithoutPhoneNumberWithIdentityCredential_result ip
    P.maybe (P.return ()) X.throw (registerDeviceWithoutPhoneNumberWithIdentityCredential_result_e res)
    P.return $ registerDeviceWithoutPhoneNumberWithIdentityCredential_result_success res
registerUserid (ip,op) arg_reqSeq arg_userid = do
  send_registerUserid op arg_reqSeq arg_userid
  recv_registerUserid ip
send_registerUserid op arg_reqSeq arg_userid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("registerUserid", T.M_CALL, seqn) $
    write_RegisterUserid_args op (RegisterUserid_args{registerUserid_args_reqSeq=arg_reqSeq,registerUserid_args_userid=arg_userid})
recv_registerUserid ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RegisterUserid_result ip
    P.maybe (P.return ()) X.throw (registerUserid_result_e res)
    P.return $ registerUserid_result_success res
registerWapDevice (ip,op) arg_invitationHash arg_guidHash arg_email arg_deviceInfo = do
  send_registerWapDevice op arg_invitationHash arg_guidHash arg_email arg_deviceInfo
  recv_registerWapDevice ip
send_registerWapDevice op arg_invitationHash arg_guidHash arg_email arg_deviceInfo = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("registerWapDevice", T.M_CALL, seqn) $
    write_RegisterWapDevice_args op (RegisterWapDevice_args{registerWapDevice_args_invitationHash=arg_invitationHash,registerWapDevice_args_guidHash=arg_guidHash,registerWapDevice_args_email=arg_email,registerWapDevice_args_deviceInfo=arg_deviceInfo})
recv_registerWapDevice ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RegisterWapDevice_result ip
    P.maybe (P.return ()) X.throw (registerWapDevice_result_e res)
    P.return $ registerWapDevice_result_success res
registerWithExistingSnsIdAndIdentityCredential (ip,op) arg_identityCredential arg_region arg_udidHash arg_deviceInfo = do
  send_registerWithExistingSnsIdAndIdentityCredential op arg_identityCredential arg_region arg_udidHash arg_deviceInfo
  recv_registerWithExistingSnsIdAndIdentityCredential ip
send_registerWithExistingSnsIdAndIdentityCredential op arg_identityCredential arg_region arg_udidHash arg_deviceInfo = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("registerWithExistingSnsIdAndIdentityCredential", T.M_CALL, seqn) $
    write_RegisterWithExistingSnsIdAndIdentityCredential_args op (RegisterWithExistingSnsIdAndIdentityCredential_args{registerWithExistingSnsIdAndIdentityCredential_args_identityCredential=arg_identityCredential,registerWithExistingSnsIdAndIdentityCredential_args_region=arg_region,registerWithExistingSnsIdAndIdentityCredential_args_udidHash=arg_udidHash,registerWithExistingSnsIdAndIdentityCredential_args_deviceInfo=arg_deviceInfo})
recv_registerWithExistingSnsIdAndIdentityCredential ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RegisterWithExistingSnsIdAndIdentityCredential_result ip
    P.maybe (P.return ()) X.throw (registerWithExistingSnsIdAndIdentityCredential_result_e res)
    P.return $ registerWithExistingSnsIdAndIdentityCredential_result_success res
registerWithSnsId (ip,op) arg_snsIdType arg_snsAccessToken arg_region arg_udidHash arg_deviceInfo arg_mid = do
  send_registerWithSnsId op arg_snsIdType arg_snsAccessToken arg_region arg_udidHash arg_deviceInfo arg_mid
  recv_registerWithSnsId ip
send_registerWithSnsId op arg_snsIdType arg_snsAccessToken arg_region arg_udidHash arg_deviceInfo arg_mid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("registerWithSnsId", T.M_CALL, seqn) $
    write_RegisterWithSnsId_args op (RegisterWithSnsId_args{registerWithSnsId_args_snsIdType=arg_snsIdType,registerWithSnsId_args_snsAccessToken=arg_snsAccessToken,registerWithSnsId_args_region=arg_region,registerWithSnsId_args_udidHash=arg_udidHash,registerWithSnsId_args_deviceInfo=arg_deviceInfo,registerWithSnsId_args_mid=arg_mid})
recv_registerWithSnsId ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RegisterWithSnsId_result ip
    P.maybe (P.return ()) X.throw (registerWithSnsId_result_e res)
    P.return $ registerWithSnsId_result_success res
registerWithSnsIdAndIdentityCredential (ip,op) arg_snsIdType arg_snsAccessToken arg_identityCredential arg_region arg_udidHash arg_deviceInfo = do
  send_registerWithSnsIdAndIdentityCredential op arg_snsIdType arg_snsAccessToken arg_identityCredential arg_region arg_udidHash arg_deviceInfo
  recv_registerWithSnsIdAndIdentityCredential ip
send_registerWithSnsIdAndIdentityCredential op arg_snsIdType arg_snsAccessToken arg_identityCredential arg_region arg_udidHash arg_deviceInfo = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("registerWithSnsIdAndIdentityCredential", T.M_CALL, seqn) $
    write_RegisterWithSnsIdAndIdentityCredential_args op (RegisterWithSnsIdAndIdentityCredential_args{registerWithSnsIdAndIdentityCredential_args_snsIdType=arg_snsIdType,registerWithSnsIdAndIdentityCredential_args_snsAccessToken=arg_snsAccessToken,registerWithSnsIdAndIdentityCredential_args_identityCredential=arg_identityCredential,registerWithSnsIdAndIdentityCredential_args_region=arg_region,registerWithSnsIdAndIdentityCredential_args_udidHash=arg_udidHash,registerWithSnsIdAndIdentityCredential_args_deviceInfo=arg_deviceInfo})
recv_registerWithSnsIdAndIdentityCredential ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RegisterWithSnsIdAndIdentityCredential_result ip
    P.maybe (P.return ()) X.throw (registerWithSnsIdAndIdentityCredential_result_e res)
    P.return $ registerWithSnsIdAndIdentityCredential_result_success res
reissueDeviceCredential (ip,op) = do
  send_reissueDeviceCredential op
  recv_reissueDeviceCredential ip
send_reissueDeviceCredential op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("reissueDeviceCredential", T.M_CALL, seqn) $
    write_ReissueDeviceCredential_args op (ReissueDeviceCredential_args{})
recv_reissueDeviceCredential ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ReissueDeviceCredential_result ip
    P.maybe (P.return ()) X.throw (reissueDeviceCredential_result_e res)
    P.return $ reissueDeviceCredential_result_success res
reissueUserTicket (ip,op) arg_expirationTime arg_maxUseCount = do
  send_reissueUserTicket op arg_expirationTime arg_maxUseCount
  recv_reissueUserTicket ip
send_reissueUserTicket op arg_expirationTime arg_maxUseCount = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("reissueUserTicket", T.M_CALL, seqn) $
    write_ReissueUserTicket_args op (ReissueUserTicket_args{reissueUserTicket_args_expirationTime=arg_expirationTime,reissueUserTicket_args_maxUseCount=arg_maxUseCount})
recv_reissueUserTicket ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ReissueUserTicket_result ip
    P.maybe (P.return ()) X.throw (reissueUserTicket_result_e res)
    P.return $ reissueUserTicket_result_success res
getMessageReadRange (ip,op) arg_chatIds = do
  send_getMessageReadRange op arg_chatIds
  recv_getMessageReadRange ip
send_getMessageReadRange op arg_chatIds = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getMessageReadRange", T.M_CALL, seqn) $
    write_GetMessageReadRange_args op (GetMessageReadRange_args{getMessageReadRange_args_chatIds=arg_chatIds})
recv_getMessageReadRange ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetMessageReadRange_result ip
    P.maybe (P.return ()) X.throw (getMessageReadRange_result_e res)
    P.return $ getMessageReadRange_result_success res
rejectGroupInvitation (ip,op) arg_reqSeq arg_groupId = do
  send_rejectGroupInvitation op arg_reqSeq arg_groupId
  recv_rejectGroupInvitation ip
send_rejectGroupInvitation op arg_reqSeq arg_groupId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("rejectGroupInvitation", T.M_CALL, seqn) $
    write_RejectGroupInvitation_args op (RejectGroupInvitation_args{rejectGroupInvitation_args_reqSeq=arg_reqSeq,rejectGroupInvitation_args_groupId=arg_groupId})
recv_rejectGroupInvitation ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RejectGroupInvitation_result ip
    P.maybe (P.return ()) X.throw (rejectGroupInvitation_result_e res)
    P.return ()
releaseSession (ip,op) = do
  send_releaseSession op
  recv_releaseSession ip
send_releaseSession op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("releaseSession", T.M_CALL, seqn) $
    write_ReleaseSession_args op (ReleaseSession_args{})
recv_releaseSession ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ReleaseSession_result ip
    P.maybe (P.return ()) X.throw (releaseSession_result_e res)
    P.return ()
removeAllMessages (ip,op) arg_seq arg_lastMessageId = do
  send_removeAllMessages op arg_seq arg_lastMessageId
  recv_removeAllMessages ip
send_removeAllMessages op arg_seq arg_lastMessageId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("removeAllMessages", T.M_CALL, seqn) $
    write_RemoveAllMessages_args op (RemoveAllMessages_args{removeAllMessages_args_seq=arg_seq,removeAllMessages_args_lastMessageId=arg_lastMessageId})
recv_removeAllMessages ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RemoveAllMessages_result ip
    P.maybe (P.return ()) X.throw (removeAllMessages_result_e res)
    P.return ()
removeBuddyLocation (ip,op) arg_mid arg_index = do
  send_removeBuddyLocation op arg_mid arg_index
  recv_removeBuddyLocation ip
send_removeBuddyLocation op arg_mid arg_index = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("removeBuddyLocation", T.M_CALL, seqn) $
    write_RemoveBuddyLocation_args op (RemoveBuddyLocation_args{removeBuddyLocation_args_mid=arg_mid,removeBuddyLocation_args_index=arg_index})
recv_removeBuddyLocation ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RemoveBuddyLocation_result ip
    P.maybe (P.return ()) X.throw (removeBuddyLocation_result_e res)
    P.return ()
removeMessage (ip,op) arg_messageId = do
  send_removeMessage op arg_messageId
  recv_removeMessage ip
send_removeMessage op arg_messageId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("removeMessage", T.M_CALL, seqn) $
    write_RemoveMessage_args op (RemoveMessage_args{removeMessage_args_messageId=arg_messageId})
recv_removeMessage ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RemoveMessage_result ip
    P.maybe (P.return ()) X.throw (removeMessage_result_e res)
    P.return $ removeMessage_result_success res
makeUserAddMyselfAsContact (ip,op) arg_contactOwnerMid = do
  send_makeUserAddMyselfAsContact op arg_contactOwnerMid
  recv_makeUserAddMyselfAsContact ip
send_makeUserAddMyselfAsContact op arg_contactOwnerMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("makeUserAddMyselfAsContact", T.M_CALL, seqn) $
    write_MakeUserAddMyselfAsContact_args op (MakeUserAddMyselfAsContact_args{makeUserAddMyselfAsContact_args_contactOwnerMid=arg_contactOwnerMid})
recv_makeUserAddMyselfAsContact ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_MakeUserAddMyselfAsContact_result ip
    P.maybe (P.return ()) X.throw (makeUserAddMyselfAsContact_result_e res)
    P.return $ makeUserAddMyselfAsContact_result_success res
removeMessageFromMyHome (ip,op) arg_messageId = do
  send_removeMessageFromMyHome op arg_messageId
  recv_removeMessageFromMyHome ip
send_removeMessageFromMyHome op arg_messageId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("removeMessageFromMyHome", T.M_CALL, seqn) $
    write_RemoveMessageFromMyHome_args op (RemoveMessageFromMyHome_args{removeMessageFromMyHome_args_messageId=arg_messageId})
recv_removeMessageFromMyHome ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RemoveMessageFromMyHome_result ip
    P.maybe (P.return ()) X.throw (removeMessageFromMyHome_result_e res)
    P.return $ removeMessageFromMyHome_result_success res
removeSnsId (ip,op) arg_snsIdType = do
  send_removeSnsId op arg_snsIdType
  recv_removeSnsId ip
send_removeSnsId op arg_snsIdType = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("removeSnsId", T.M_CALL, seqn) $
    write_RemoveSnsId_args op (RemoveSnsId_args{removeSnsId_args_snsIdType=arg_snsIdType})
recv_removeSnsId ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RemoveSnsId_result ip
    P.maybe (P.return ()) X.throw (removeSnsId_result_e res)
    P.return $ removeSnsId_result_success res
report (ip,op) arg_syncOpRevision arg_category arg_report = do
  send_report op arg_syncOpRevision arg_category arg_report
  recv_report ip
send_report op arg_syncOpRevision arg_category arg_report = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("report", T.M_CALL, seqn) $
    write_Report_args op (Report_args{report_args_syncOpRevision=arg_syncOpRevision,report_args_category=arg_category,report_args_report=arg_report})
recv_report ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_Report_result ip
    P.maybe (P.return ()) X.throw (report_result_e res)
    P.return ()
reportContacts (ip,op) arg_syncOpRevision arg_category arg_contactReports arg_actionType = do
  send_reportContacts op arg_syncOpRevision arg_category arg_contactReports arg_actionType
  recv_reportContacts ip
send_reportContacts op arg_syncOpRevision arg_category arg_contactReports arg_actionType = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("reportContacts", T.M_CALL, seqn) $
    write_ReportContacts_args op (ReportContacts_args{reportContacts_args_syncOpRevision=arg_syncOpRevision,reportContacts_args_category=arg_category,reportContacts_args_contactReports=arg_contactReports,reportContacts_args_actionType=arg_actionType})
recv_reportContacts ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ReportContacts_result ip
    P.maybe (P.return ()) X.throw (reportContacts_result_e res)
    P.return $ reportContacts_result_success res
reportGroups (ip,op) arg_syncOpRevision arg_groups = do
  send_reportGroups op arg_syncOpRevision arg_groups
  recv_reportGroups ip
send_reportGroups op arg_syncOpRevision arg_groups = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("reportGroups", T.M_CALL, seqn) $
    write_ReportGroups_args op (ReportGroups_args{reportGroups_args_syncOpRevision=arg_syncOpRevision,reportGroups_args_groups=arg_groups})
recv_reportGroups ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ReportGroups_result ip
    P.maybe (P.return ()) X.throw (reportGroups_result_e res)
    P.return ()
reportProfile (ip,op) arg_syncOpRevision arg_profile = do
  send_reportProfile op arg_syncOpRevision arg_profile
  recv_reportProfile ip
send_reportProfile op arg_syncOpRevision arg_profile = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("reportProfile", T.M_CALL, seqn) $
    write_ReportProfile_args op (ReportProfile_args{reportProfile_args_syncOpRevision=arg_syncOpRevision,reportProfile_args_profile=arg_profile})
recv_reportProfile ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ReportProfile_result ip
    P.maybe (P.return ()) X.throw (reportProfile_result_e res)
    P.return ()
reportRooms (ip,op) arg_syncOpRevision arg_rooms = do
  send_reportRooms op arg_syncOpRevision arg_rooms
  recv_reportRooms ip
send_reportRooms op arg_syncOpRevision arg_rooms = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("reportRooms", T.M_CALL, seqn) $
    write_ReportRooms_args op (ReportRooms_args{reportRooms_args_syncOpRevision=arg_syncOpRevision,reportRooms_args_rooms=arg_rooms})
recv_reportRooms ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ReportRooms_result ip
    P.maybe (P.return ()) X.throw (reportRooms_result_e res)
    P.return ()
findAndAddContactByMetaTag (ip,op) arg_reqSeq arg_userid arg_reference = do
  send_findAndAddContactByMetaTag op arg_reqSeq arg_userid arg_reference
  recv_findAndAddContactByMetaTag ip
send_findAndAddContactByMetaTag op arg_reqSeq arg_userid arg_reference = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("findAndAddContactByMetaTag", T.M_CALL, seqn) $
    write_FindAndAddContactByMetaTag_args op (FindAndAddContactByMetaTag_args{findAndAddContactByMetaTag_args_reqSeq=arg_reqSeq,findAndAddContactByMetaTag_args_userid=arg_userid,findAndAddContactByMetaTag_args_reference=arg_reference})
recv_findAndAddContactByMetaTag ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FindAndAddContactByMetaTag_result ip
    P.maybe (P.return ()) X.throw (findAndAddContactByMetaTag_result_e res)
    P.return $ findAndAddContactByMetaTag_result_success res
reportSettings (ip,op) arg_syncOpRevision arg_settings = do
  send_reportSettings op arg_syncOpRevision arg_settings
  recv_reportSettings ip
send_reportSettings op arg_syncOpRevision arg_settings = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("reportSettings", T.M_CALL, seqn) $
    write_ReportSettings_args op (ReportSettings_args{reportSettings_args_syncOpRevision=arg_syncOpRevision,reportSettings_args_settings=arg_settings})
recv_reportSettings ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ReportSettings_result ip
    P.maybe (P.return ()) X.throw (reportSettings_result_e res)
    P.return ()
reportSpam (ip,op) arg_chatMid arg_memberMids arg_spammerReasons arg_senderMids arg_spamMessageIds arg_spamMessages = do
  send_reportSpam op arg_chatMid arg_memberMids arg_spammerReasons arg_senderMids arg_spamMessageIds arg_spamMessages
  recv_reportSpam ip
send_reportSpam op arg_chatMid arg_memberMids arg_spammerReasons arg_senderMids arg_spamMessageIds arg_spamMessages = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("reportSpam", T.M_CALL, seqn) $
    write_ReportSpam_args op (ReportSpam_args{reportSpam_args_chatMid=arg_chatMid,reportSpam_args_memberMids=arg_memberMids,reportSpam_args_spammerReasons=arg_spammerReasons,reportSpam_args_senderMids=arg_senderMids,reportSpam_args_spamMessageIds=arg_spamMessageIds,reportSpam_args_spamMessages=arg_spamMessages})
recv_reportSpam ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ReportSpam_result ip
    P.maybe (P.return ()) X.throw (reportSpam_result_e res)
    P.return ()
reportSpammer (ip,op) arg_spammerMid arg_spammerReasons arg_spamMessageIds = do
  send_reportSpammer op arg_spammerMid arg_spammerReasons arg_spamMessageIds
  recv_reportSpammer ip
send_reportSpammer op arg_spammerMid arg_spammerReasons arg_spamMessageIds = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("reportSpammer", T.M_CALL, seqn) $
    write_ReportSpammer_args op (ReportSpammer_args{reportSpammer_args_spammerMid=arg_spammerMid,reportSpammer_args_spammerReasons=arg_spammerReasons,reportSpammer_args_spamMessageIds=arg_spamMessageIds})
recv_reportSpammer ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ReportSpammer_result ip
    P.maybe (P.return ()) X.throw (reportSpammer_result_e res)
    P.return ()
requestAccountPasswordReset (ip,op) arg_provider arg_identifier arg_locale = do
  send_requestAccountPasswordReset op arg_provider arg_identifier arg_locale
  recv_requestAccountPasswordReset ip
send_requestAccountPasswordReset op arg_provider arg_identifier arg_locale = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("requestAccountPasswordReset", T.M_CALL, seqn) $
    write_RequestAccountPasswordReset_args op (RequestAccountPasswordReset_args{requestAccountPasswordReset_args_provider=arg_provider,requestAccountPasswordReset_args_identifier=arg_identifier,requestAccountPasswordReset_args_locale=arg_locale})
recv_requestAccountPasswordReset ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RequestAccountPasswordReset_result ip
    P.maybe (P.return ()) X.throw (requestAccountPasswordReset_result_e res)
    P.return ()
requestEmailConfirmation (ip,op) arg_emailConfirmation = do
  send_requestEmailConfirmation op arg_emailConfirmation
  recv_requestEmailConfirmation ip
send_requestEmailConfirmation op arg_emailConfirmation = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("requestEmailConfirmation", T.M_CALL, seqn) $
    write_RequestEmailConfirmation_args op (RequestEmailConfirmation_args{requestEmailConfirmation_args_emailConfirmation=arg_emailConfirmation})
recv_requestEmailConfirmation ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RequestEmailConfirmation_result ip
    P.maybe (P.return ()) X.throw (requestEmailConfirmation_result_e res)
    P.return $ requestEmailConfirmation_result_success res
requestIdentityUnbind (ip,op) arg_provider arg_identifier = do
  send_requestIdentityUnbind op arg_provider arg_identifier
  recv_requestIdentityUnbind ip
send_requestIdentityUnbind op arg_provider arg_identifier = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("requestIdentityUnbind", T.M_CALL, seqn) $
    write_RequestIdentityUnbind_args op (RequestIdentityUnbind_args{requestIdentityUnbind_args_provider=arg_provider,requestIdentityUnbind_args_identifier=arg_identifier})
recv_requestIdentityUnbind ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RequestIdentityUnbind_result ip
    P.maybe (P.return ()) X.throw (requestIdentityUnbind_result_e res)
    P.return ()
resendEmailConfirmation (ip,op) arg_verifier = do
  send_resendEmailConfirmation op arg_verifier
  recv_resendEmailConfirmation ip
send_resendEmailConfirmation op arg_verifier = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("resendEmailConfirmation", T.M_CALL, seqn) $
    write_ResendEmailConfirmation_args op (ResendEmailConfirmation_args{resendEmailConfirmation_args_verifier=arg_verifier})
recv_resendEmailConfirmation ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ResendEmailConfirmation_result ip
    P.maybe (P.return ()) X.throw (resendEmailConfirmation_result_e res)
    P.return $ resendEmailConfirmation_result_success res
resendPinCode (ip,op) arg_sessionId = do
  send_resendPinCode op arg_sessionId
  recv_resendPinCode ip
send_resendPinCode op arg_sessionId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("resendPinCode", T.M_CALL, seqn) $
    write_ResendPinCode_args op (ResendPinCode_args{resendPinCode_args_sessionId=arg_sessionId})
recv_resendPinCode ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ResendPinCode_result ip
    P.maybe (P.return ()) X.throw (resendPinCode_result_e res)
    P.return ()
resendPinCodeBySMS (ip,op) arg_sessionId = do
  send_resendPinCodeBySMS op arg_sessionId
  recv_resendPinCodeBySMS ip
send_resendPinCodeBySMS op arg_sessionId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("resendPinCodeBySMS", T.M_CALL, seqn) $
    write_ResendPinCodeBySMS_args op (ResendPinCodeBySMS_args{resendPinCodeBySMS_args_sessionId=arg_sessionId})
recv_resendPinCodeBySMS ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ResendPinCodeBySMS_result ip
    P.maybe (P.return ()) X.throw (resendPinCodeBySMS_result_e res)
    P.return ()
sendChatChecked (ip,op) arg_seq arg_consumer arg_lastMessageId = do
  send_sendChatChecked op arg_seq arg_consumer arg_lastMessageId
  recv_sendChatChecked ip
send_sendChatChecked op arg_seq arg_consumer arg_lastMessageId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendChatChecked", T.M_CALL, seqn) $
    write_SendChatChecked_args op (SendChatChecked_args{sendChatChecked_args_seq=arg_seq,sendChatChecked_args_consumer=arg_consumer,sendChatChecked_args_lastMessageId=arg_lastMessageId})
recv_sendChatChecked ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendChatChecked_result ip
    P.maybe (P.return ()) X.throw (sendChatChecked_result_e res)
    P.return ()
sendMessageAwaitCommit (ip,op) arg_seq arg_message = do
  send_sendMessageAwaitCommit op arg_seq arg_message
  recv_sendMessageAwaitCommit ip
send_sendMessageAwaitCommit op arg_seq arg_message = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendMessageAwaitCommit", T.M_CALL, seqn) $
    write_SendMessageAwaitCommit_args op (SendMessageAwaitCommit_args{sendMessageAwaitCommit_args_seq=arg_seq,sendMessageAwaitCommit_args_message=arg_message})
recv_sendMessageAwaitCommit ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendMessageAwaitCommit_result ip
    P.maybe (P.return ()) X.throw (sendMessageAwaitCommit_result_e res)
    P.return $ sendMessageAwaitCommit_result_success res
sendChatRemoved (ip,op) arg_seq arg_consumer arg_lastMessageId = do
  send_sendChatRemoved op arg_seq arg_consumer arg_lastMessageId
  recv_sendChatRemoved ip
send_sendChatRemoved op arg_seq arg_consumer arg_lastMessageId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendChatRemoved", T.M_CALL, seqn) $
    write_SendChatRemoved_args op (SendChatRemoved_args{sendChatRemoved_args_seq=arg_seq,sendChatRemoved_args_consumer=arg_consumer,sendChatRemoved_args_lastMessageId=arg_lastMessageId})
recv_sendChatRemoved ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendChatRemoved_result ip
    P.maybe (P.return ()) X.throw (sendChatRemoved_result_e res)
    P.return ()
sendContentPreviewUpdated (ip,op) arg_esq arg_messageId arg_receiverMids = do
  send_sendContentPreviewUpdated op arg_esq arg_messageId arg_receiverMids
  recv_sendContentPreviewUpdated ip
send_sendContentPreviewUpdated op arg_esq arg_messageId arg_receiverMids = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendContentPreviewUpdated", T.M_CALL, seqn) $
    write_SendContentPreviewUpdated_args op (SendContentPreviewUpdated_args{sendContentPreviewUpdated_args_esq=arg_esq,sendContentPreviewUpdated_args_messageId=arg_messageId,sendContentPreviewUpdated_args_receiverMids=arg_receiverMids})
recv_sendContentPreviewUpdated ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendContentPreviewUpdated_result ip
    P.maybe (P.return ()) X.throw (sendContentPreviewUpdated_result_e res)
    P.return $ sendContentPreviewUpdated_result_success res
sendContentReceipt (ip,op) arg_seq arg_consumer arg_messageId = do
  send_sendContentReceipt op arg_seq arg_consumer arg_messageId
  recv_sendContentReceipt ip
send_sendContentReceipt op arg_seq arg_consumer arg_messageId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendContentReceipt", T.M_CALL, seqn) $
    write_SendContentReceipt_args op (SendContentReceipt_args{sendContentReceipt_args_seq=arg_seq,sendContentReceipt_args_consumer=arg_consumer,sendContentReceipt_args_messageId=arg_messageId})
recv_sendContentReceipt ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendContentReceipt_result ip
    P.maybe (P.return ()) X.throw (sendContentReceipt_result_e res)
    P.return ()
sendDummyPush (ip,op) = do
  send_sendDummyPush op
  recv_sendDummyPush ip
send_sendDummyPush op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendDummyPush", T.M_CALL, seqn) $
    write_SendDummyPush_args op (SendDummyPush_args{})
recv_sendDummyPush ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendDummyPush_result ip
    P.maybe (P.return ()) X.throw (sendDummyPush_result_e res)
    P.return ()
removeE2EEPublicKey (ip,op) arg_publicKey = do
  send_removeE2EEPublicKey op arg_publicKey
  recv_removeE2EEPublicKey ip
send_removeE2EEPublicKey op arg_publicKey = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("removeE2EEPublicKey", T.M_CALL, seqn) $
    write_RemoveE2EEPublicKey_args op (RemoveE2EEPublicKey_args{removeE2EEPublicKey_args_publicKey=arg_publicKey})
recv_removeE2EEPublicKey ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RemoveE2EEPublicKey_result ip
    P.maybe (P.return ()) X.throw (removeE2EEPublicKey_result_e res)
    P.return ()
negotiateE2EEPublicKey (ip,op) arg_mid = do
  send_negotiateE2EEPublicKey op arg_mid
  recv_negotiateE2EEPublicKey ip
send_negotiateE2EEPublicKey op arg_mid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("negotiateE2EEPublicKey", T.M_CALL, seqn) $
    write_NegotiateE2EEPublicKey_args op (NegotiateE2EEPublicKey_args{negotiateE2EEPublicKey_args_mid=arg_mid})
recv_negotiateE2EEPublicKey ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_NegotiateE2EEPublicKey_result ip
    P.maybe (P.return ()) X.throw (negotiateE2EEPublicKey_result_e res)
    P.return $ negotiateE2EEPublicKey_result_success res
getE2EEPublicKey (ip,op) arg_mid arg_version arg_keyId = do
  send_getE2EEPublicKey op arg_mid arg_version arg_keyId
  recv_getE2EEPublicKey ip
send_getE2EEPublicKey op arg_mid arg_version arg_keyId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getE2EEPublicKey", T.M_CALL, seqn) $
    write_GetE2EEPublicKey_args op (GetE2EEPublicKey_args{getE2EEPublicKey_args_mid=arg_mid,getE2EEPublicKey_args_version=arg_version,getE2EEPublicKey_args_keyId=arg_keyId})
recv_getE2EEPublicKey ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetE2EEPublicKey_result ip
    P.maybe (P.return ()) X.throw (getE2EEPublicKey_result_e res)
    P.return $ getE2EEPublicKey_result_success res
requestE2EEKeyExchange (ip,op) arg_reqSeq arg_temporalPublicKey arg_publicKey arg_verifier = do
  send_requestE2EEKeyExchange op arg_reqSeq arg_temporalPublicKey arg_publicKey arg_verifier
  recv_requestE2EEKeyExchange ip
send_requestE2EEKeyExchange op arg_reqSeq arg_temporalPublicKey arg_publicKey arg_verifier = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("requestE2EEKeyExchange", T.M_CALL, seqn) $
    write_RequestE2EEKeyExchange_args op (RequestE2EEKeyExchange_args{requestE2EEKeyExchange_args_reqSeq=arg_reqSeq,requestE2EEKeyExchange_args_temporalPublicKey=arg_temporalPublicKey,requestE2EEKeyExchange_args_publicKey=arg_publicKey,requestE2EEKeyExchange_args_verifier=arg_verifier})
recv_requestE2EEKeyExchange ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RequestE2EEKeyExchange_result ip
    P.maybe (P.return ()) X.throw (requestE2EEKeyExchange_result_e res)
    P.return ()
getLastE2EEPublicKeys (ip,op) arg_chatMid = do
  send_getLastE2EEPublicKeys op arg_chatMid
  recv_getLastE2EEPublicKeys ip
send_getLastE2EEPublicKeys op arg_chatMid = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getLastE2EEPublicKeys", T.M_CALL, seqn) $
    write_GetLastE2EEPublicKeys_args op (GetLastE2EEPublicKeys_args{getLastE2EEPublicKeys_args_chatMid=arg_chatMid})
recv_getLastE2EEPublicKeys ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetLastE2EEPublicKeys_result ip
    P.maybe (P.return ()) X.throw (getLastE2EEPublicKeys_result_e res)
    P.return $ getLastE2EEPublicKeys_result_success res
registerE2EEPublicKey (ip,op) arg_reqSeq arg_publicKey = do
  send_registerE2EEPublicKey op arg_reqSeq arg_publicKey
  recv_registerE2EEPublicKey ip
send_registerE2EEPublicKey op arg_reqSeq arg_publicKey = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("registerE2EEPublicKey", T.M_CALL, seqn) $
    write_RegisterE2EEPublicKey_args op (RegisterE2EEPublicKey_args{registerE2EEPublicKey_args_reqSeq=arg_reqSeq,registerE2EEPublicKey_args_publicKey=arg_publicKey})
recv_registerE2EEPublicKey ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RegisterE2EEPublicKey_result ip
    P.maybe (P.return ()) X.throw (registerE2EEPublicKey_result_e res)
    P.return $ registerE2EEPublicKey_result_success res
getE2EEPublicKeys (ip,op) = do
  send_getE2EEPublicKeys op
  recv_getE2EEPublicKeys ip
send_getE2EEPublicKeys op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getE2EEPublicKeys", T.M_CALL, seqn) $
    write_GetE2EEPublicKeys_args op (GetE2EEPublicKeys_args{})
recv_getE2EEPublicKeys ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetE2EEPublicKeys_result ip
    P.maybe (P.return ()) X.throw (getE2EEPublicKeys_result_e res)
    P.return $ getE2EEPublicKeys_result_success res
getE2EEPublicKeysEx (ip,op) arg_ignoreE2EEStatus = do
  send_getE2EEPublicKeysEx op arg_ignoreE2EEStatus
  recv_getE2EEPublicKeysEx ip
send_getE2EEPublicKeysEx op arg_ignoreE2EEStatus = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getE2EEPublicKeysEx", T.M_CALL, seqn) $
    write_GetE2EEPublicKeysEx_args op (GetE2EEPublicKeysEx_args{getE2EEPublicKeysEx_args_ignoreE2EEStatus=arg_ignoreE2EEStatus})
recv_getE2EEPublicKeysEx ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetE2EEPublicKeysEx_result ip
    P.maybe (P.return ()) X.throw (getE2EEPublicKeysEx_result_e res)
    P.return $ getE2EEPublicKeysEx_result_success res
getReadMessageOpsInBulk (ip,op) arg_chatIds = do
  send_getReadMessageOpsInBulk op arg_chatIds
  recv_getReadMessageOpsInBulk ip
send_getReadMessageOpsInBulk op arg_chatIds = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getReadMessageOpsInBulk", T.M_CALL, seqn) $
    write_GetReadMessageOpsInBulk_args op (GetReadMessageOpsInBulk_args{getReadMessageOpsInBulk_args_chatIds=arg_chatIds})
recv_getReadMessageOpsInBulk ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetReadMessageOpsInBulk_result ip
    P.maybe (P.return ()) X.throw (getReadMessageOpsInBulk_result_e res)
    P.return $ getReadMessageOpsInBulk_result_success res
sendEvent (ip,op) arg_seq arg_message = do
  send_sendEvent op arg_seq arg_message
  recv_sendEvent ip
send_sendEvent op arg_seq arg_message = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendEvent", T.M_CALL, seqn) $
    write_SendEvent_args op (SendEvent_args{sendEvent_args_seq=arg_seq,sendEvent_args_message=arg_message})
recv_sendEvent ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendEvent_result ip
    P.maybe (P.return ()) X.throw (sendEvent_result_e res)
    P.return $ sendEvent_result_success res
sendMessage (ip,op) arg_seq arg_message = do
  send_sendMessage op arg_seq arg_message
  recv_sendMessage ip
send_sendMessage op arg_seq arg_message = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendMessage", T.M_CALL, seqn) $
    write_SendMessage_args op (SendMessage_args{sendMessage_args_seq=arg_seq,sendMessage_args_message=arg_message})
recv_sendMessage ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendMessage_result ip
    P.maybe (P.return ()) X.throw (sendMessage_result_e res)
    P.return $ sendMessage_result_success res
sendMessageIgnored (ip,op) arg_seq arg_consumer arg_messageIds = do
  send_sendMessageIgnored op arg_seq arg_consumer arg_messageIds
  recv_sendMessageIgnored ip
send_sendMessageIgnored op arg_seq arg_consumer arg_messageIds = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendMessageIgnored", T.M_CALL, seqn) $
    write_SendMessageIgnored_args op (SendMessageIgnored_args{sendMessageIgnored_args_seq=arg_seq,sendMessageIgnored_args_consumer=arg_consumer,sendMessageIgnored_args_messageIds=arg_messageIds})
recv_sendMessageIgnored ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendMessageIgnored_result ip
    P.maybe (P.return ()) X.throw (sendMessageIgnored_result_e res)
    P.return ()
sendMessageReceipt (ip,op) arg_seq arg_consumer arg_messageIds = do
  send_sendMessageReceipt op arg_seq arg_consumer arg_messageIds
  recv_sendMessageReceipt ip
send_sendMessageReceipt op arg_seq arg_consumer arg_messageIds = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendMessageReceipt", T.M_CALL, seqn) $
    write_SendMessageReceipt_args op (SendMessageReceipt_args{sendMessageReceipt_args_seq=arg_seq,sendMessageReceipt_args_consumer=arg_consumer,sendMessageReceipt_args_messageIds=arg_messageIds})
recv_sendMessageReceipt ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendMessageReceipt_result ip
    P.maybe (P.return ()) X.throw (sendMessageReceipt_result_e res)
    P.return ()
findContactByMetaTag (ip,op) arg_userid arg_reference = do
  send_findContactByMetaTag op arg_userid arg_reference
  recv_findContactByMetaTag ip
send_findContactByMetaTag op arg_userid arg_reference = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("findContactByMetaTag", T.M_CALL, seqn) $
    write_FindContactByMetaTag_args op (FindContactByMetaTag_args{findContactByMetaTag_args_userid=arg_userid,findContactByMetaTag_args_reference=arg_reference})
recv_findContactByMetaTag ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_FindContactByMetaTag_result ip
    P.maybe (P.return ()) X.throw (findContactByMetaTag_result_e res)
    P.return $ findContactByMetaTag_result_success res
sendMessageToMyHome (ip,op) arg_seq arg_message = do
  send_sendMessageToMyHome op arg_seq arg_message
  recv_sendMessageToMyHome ip
send_sendMessageToMyHome op arg_seq arg_message = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendMessageToMyHome", T.M_CALL, seqn) $
    write_SendMessageToMyHome_args op (SendMessageToMyHome_args{sendMessageToMyHome_args_seq=arg_seq,sendMessageToMyHome_args_message=arg_message})
recv_sendMessageToMyHome ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendMessageToMyHome_result ip
    P.maybe (P.return ()) X.throw (sendMessageToMyHome_result_e res)
    P.return $ sendMessageToMyHome_result_success res
setBuddyLocation (ip,op) arg_mid arg_index arg_location = do
  send_setBuddyLocation op arg_mid arg_index arg_location
  recv_setBuddyLocation ip
send_setBuddyLocation op arg_mid arg_index arg_location = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("setBuddyLocation", T.M_CALL, seqn) $
    write_SetBuddyLocation_args op (SetBuddyLocation_args{setBuddyLocation_args_mid=arg_mid,setBuddyLocation_args_index=arg_index,setBuddyLocation_args_location=arg_location})
recv_setBuddyLocation ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SetBuddyLocation_result ip
    P.maybe (P.return ()) X.throw (setBuddyLocation_result_e res)
    P.return ()
setIdentityCredential (ip,op) arg_identifier arg_verifier arg_provider = do
  send_setIdentityCredential op arg_identifier arg_verifier arg_provider
  recv_setIdentityCredential ip
send_setIdentityCredential op arg_identifier arg_verifier arg_provider = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("setIdentityCredential", T.M_CALL, seqn) $
    write_SetIdentityCredential_args op (SetIdentityCredential_args{setIdentityCredential_args_identifier=arg_identifier,setIdentityCredential_args_verifier=arg_verifier,setIdentityCredential_args_provider=arg_provider})
recv_setIdentityCredential ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SetIdentityCredential_result ip
    P.maybe (P.return ()) X.throw (setIdentityCredential_result_e res)
    P.return ()
setNotificationsEnabled (ip,op) arg_reqSeq arg_type arg_target arg_enablement = do
  send_setNotificationsEnabled op arg_reqSeq arg_type arg_target arg_enablement
  recv_setNotificationsEnabled ip
send_setNotificationsEnabled op arg_reqSeq arg_type arg_target arg_enablement = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("setNotificationsEnabled", T.M_CALL, seqn) $
    write_SetNotificationsEnabled_args op (SetNotificationsEnabled_args{setNotificationsEnabled_args_reqSeq=arg_reqSeq,setNotificationsEnabled_args_type=arg_type,setNotificationsEnabled_args_target=arg_target,setNotificationsEnabled_args_enablement=arg_enablement})
recv_setNotificationsEnabled ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SetNotificationsEnabled_result ip
    P.maybe (P.return ()) X.throw (setNotificationsEnabled_result_e res)
    P.return ()
startUpdateVerification (ip,op) arg_region arg_carrier arg_phone arg_udidHash arg_deviceInfo arg_networkCode arg_locale = do
  send_startUpdateVerification op arg_region arg_carrier arg_phone arg_udidHash arg_deviceInfo arg_networkCode arg_locale
  recv_startUpdateVerification ip
send_startUpdateVerification op arg_region arg_carrier arg_phone arg_udidHash arg_deviceInfo arg_networkCode arg_locale = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("startUpdateVerification", T.M_CALL, seqn) $
    write_StartUpdateVerification_args op (StartUpdateVerification_args{startUpdateVerification_args_region=arg_region,startUpdateVerification_args_carrier=arg_carrier,startUpdateVerification_args_phone=arg_phone,startUpdateVerification_args_udidHash=arg_udidHash,startUpdateVerification_args_deviceInfo=arg_deviceInfo,startUpdateVerification_args_networkCode=arg_networkCode,startUpdateVerification_args_locale=arg_locale})
recv_startUpdateVerification ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_StartUpdateVerification_result ip
    P.maybe (P.return ()) X.throw (startUpdateVerification_result_e res)
    P.return $ startUpdateVerification_result_success res
startVerification (ip,op) arg_region arg_carrier arg_phone arg_udidHash arg_deviceInfo arg_networkCode arg_mid arg_locale arg_simInfo arg_oldUdidHash = do
  send_startVerification op arg_region arg_carrier arg_phone arg_udidHash arg_deviceInfo arg_networkCode arg_mid arg_locale arg_simInfo arg_oldUdidHash
  recv_startVerification ip
send_startVerification op arg_region arg_carrier arg_phone arg_udidHash arg_deviceInfo arg_networkCode arg_mid arg_locale arg_simInfo arg_oldUdidHash = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("startVerification", T.M_CALL, seqn) $
    write_StartVerification_args op (StartVerification_args{startVerification_args_region=arg_region,startVerification_args_carrier=arg_carrier,startVerification_args_phone=arg_phone,startVerification_args_udidHash=arg_udidHash,startVerification_args_deviceInfo=arg_deviceInfo,startVerification_args_networkCode=arg_networkCode,startVerification_args_mid=arg_mid,startVerification_args_locale=arg_locale,startVerification_args_simInfo=arg_simInfo,startVerification_args_oldUdidHash=arg_oldUdidHash})
recv_startVerification ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_StartVerification_result ip
    P.maybe (P.return ()) X.throw (startVerification_result_e res)
    P.return $ startVerification_result_success res
updateGroupPreferenceAttribute (ip,op) arg_reqSeq arg_groupMid arg_updatedAttrs = do
  send_updateGroupPreferenceAttribute op arg_reqSeq arg_groupMid arg_updatedAttrs
  recv_updateGroupPreferenceAttribute ip
send_updateGroupPreferenceAttribute op arg_reqSeq arg_groupMid arg_updatedAttrs = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateGroupPreferenceAttribute", T.M_CALL, seqn) $
    write_UpdateGroupPreferenceAttribute_args op (UpdateGroupPreferenceAttribute_args{updateGroupPreferenceAttribute_args_reqSeq=arg_reqSeq,updateGroupPreferenceAttribute_args_groupMid=arg_groupMid,updateGroupPreferenceAttribute_args_updatedAttrs=arg_updatedAttrs})
recv_updateGroupPreferenceAttribute ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateGroupPreferenceAttribute_result ip
    P.maybe (P.return ()) X.throw (updateGroupPreferenceAttribute_result_e res)
    P.return ()
createRoomV2 (ip,op) arg_reqSeq arg_contactIds = do
  send_createRoomV2 op arg_reqSeq arg_contactIds
  recv_createRoomV2 ip
send_createRoomV2 op arg_reqSeq arg_contactIds = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("createRoomV2", T.M_CALL, seqn) $
    write_CreateRoomV2_args op (CreateRoomV2_args{createRoomV2_args_reqSeq=arg_reqSeq,createRoomV2_args_contactIds=arg_contactIds})
recv_createRoomV2 ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CreateRoomV2_result ip
    P.maybe (P.return ()) X.throw (createRoomV2_result_e res)
    P.return $ createRoomV2_result_success res
storeUpdateProfileAttribute (ip,op) arg_seq arg_profileAttribute arg_value = do
  send_storeUpdateProfileAttribute op arg_seq arg_profileAttribute arg_value
  recv_storeUpdateProfileAttribute ip
send_storeUpdateProfileAttribute op arg_seq arg_profileAttribute arg_value = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("storeUpdateProfileAttribute", T.M_CALL, seqn) $
    write_StoreUpdateProfileAttribute_args op (StoreUpdateProfileAttribute_args{storeUpdateProfileAttribute_args_seq=arg_seq,storeUpdateProfileAttribute_args_profileAttribute=arg_profileAttribute,storeUpdateProfileAttribute_args_value=arg_value})
recv_storeUpdateProfileAttribute ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_StoreUpdateProfileAttribute_result ip
    P.maybe (P.return ()) X.throw (storeUpdateProfileAttribute_result_e res)
    P.return ()
syncContactBySnsIds (ip,op) arg_reqSeq arg_modifications = do
  send_syncContactBySnsIds op arg_reqSeq arg_modifications
  recv_syncContactBySnsIds ip
send_syncContactBySnsIds op arg_reqSeq arg_modifications = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("syncContactBySnsIds", T.M_CALL, seqn) $
    write_SyncContactBySnsIds_args op (SyncContactBySnsIds_args{syncContactBySnsIds_args_reqSeq=arg_reqSeq,syncContactBySnsIds_args_modifications=arg_modifications})
recv_syncContactBySnsIds ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SyncContactBySnsIds_result ip
    P.maybe (P.return ()) X.throw (syncContactBySnsIds_result_e res)
    P.return $ syncContactBySnsIds_result_success res
syncContacts (ip,op) arg_reqSeq arg_localContacts = do
  send_syncContacts op arg_reqSeq arg_localContacts
  recv_syncContacts ip
send_syncContacts op arg_reqSeq arg_localContacts = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("syncContacts", T.M_CALL, seqn) $
    write_SyncContacts_args op (SyncContacts_args{syncContacts_args_reqSeq=arg_reqSeq,syncContacts_args_localContacts=arg_localContacts})
recv_syncContacts ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SyncContacts_result ip
    P.maybe (P.return ()) X.throw (syncContacts_result_e res)
    P.return $ syncContacts_result_success res
trySendMessage (ip,op) arg_seq arg_message = do
  send_trySendMessage op arg_seq arg_message
  recv_trySendMessage ip
send_trySendMessage op arg_seq arg_message = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("trySendMessage", T.M_CALL, seqn) $
    write_TrySendMessage_args op (TrySendMessage_args{trySendMessage_args_seq=arg_seq,trySendMessage_args_message=arg_message})
recv_trySendMessage ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_TrySendMessage_result ip
    P.maybe (P.return ()) X.throw (trySendMessage_result_e res)
    P.return $ trySendMessage_result_success res
getNextMessagesV2 (ip,op) arg_messageBoxId arg_startMessageId arg_messagesCount = do
  send_getNextMessagesV2 op arg_messageBoxId arg_startMessageId arg_messagesCount
  recv_getNextMessagesV2 ip
send_getNextMessagesV2 op arg_messageBoxId arg_startMessageId arg_messagesCount = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getNextMessagesV2", T.M_CALL, seqn) $
    write_GetNextMessagesV2_args op (GetNextMessagesV2_args{getNextMessagesV2_args_messageBoxId=arg_messageBoxId,getNextMessagesV2_args_startMessageId=arg_startMessageId,getNextMessagesV2_args_messagesCount=arg_messagesCount})
recv_getNextMessagesV2 ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetNextMessagesV2_result ip
    P.maybe (P.return ()) X.throw (getNextMessagesV2_result_e res)
    P.return $ getNextMessagesV2_result_success res
getMessageBoxCompactWrapUpV2 (ip,op) arg_messageBoxId = do
  send_getMessageBoxCompactWrapUpV2 op arg_messageBoxId
  recv_getMessageBoxCompactWrapUpV2 ip
send_getMessageBoxCompactWrapUpV2 op arg_messageBoxId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getMessageBoxCompactWrapUpV2", T.M_CALL, seqn) $
    write_GetMessageBoxCompactWrapUpV2_args op (GetMessageBoxCompactWrapUpV2_args{getMessageBoxCompactWrapUpV2_args_messageBoxId=arg_messageBoxId})
recv_getMessageBoxCompactWrapUpV2 ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetMessageBoxCompactWrapUpV2_result ip
    P.maybe (P.return ()) X.throw (getMessageBoxCompactWrapUpV2_result_e res)
    P.return $ getMessageBoxCompactWrapUpV2_result_success res
getRecentMessagesV2 (ip,op) arg_messageBoxId arg_messagesCount = do
  send_getRecentMessagesV2 op arg_messageBoxId arg_messagesCount
  recv_getRecentMessagesV2 ip
send_getRecentMessagesV2 op arg_messageBoxId arg_messagesCount = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getRecentMessagesV2", T.M_CALL, seqn) $
    write_GetRecentMessagesV2_args op (GetRecentMessagesV2_args{getRecentMessagesV2_args_messageBoxId=arg_messageBoxId,getRecentMessagesV2_args_messagesCount=arg_messagesCount})
recv_getRecentMessagesV2 ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetRecentMessagesV2_result ip
    P.maybe (P.return ()) X.throw (getRecentMessagesV2_result_e res)
    P.return $ getRecentMessagesV2_result_success res
validateContactsOnBot (ip,op) arg_contacts = do
  send_validateContactsOnBot op arg_contacts
  recv_validateContactsOnBot ip
send_validateContactsOnBot op arg_contacts = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("validateContactsOnBot", T.M_CALL, seqn) $
    write_ValidateContactsOnBot_args op (ValidateContactsOnBot_args{validateContactsOnBot_args_contacts=arg_contacts})
recv_validateContactsOnBot ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_ValidateContactsOnBot_result ip
    P.maybe (P.return ()) X.throw (validateContactsOnBot_result_e res)
    P.return $ validateContactsOnBot_result_success res
tryFriendRequest (ip,op) arg_midOrEMid arg_method arg_friendRequestParams = do
  send_tryFriendRequest op arg_midOrEMid arg_method arg_friendRequestParams
  recv_tryFriendRequest ip
send_tryFriendRequest op arg_midOrEMid arg_method arg_friendRequestParams = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("tryFriendRequest", T.M_CALL, seqn) $
    write_TryFriendRequest_args op (TryFriendRequest_args{tryFriendRequest_args_midOrEMid=arg_midOrEMid,tryFriendRequest_args_method=arg_method,tryFriendRequest_args_friendRequestParams=arg_friendRequestParams})
recv_tryFriendRequest ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_TryFriendRequest_result ip
    P.maybe (P.return ()) X.throw (tryFriendRequest_result_e res)
    P.return ()
unblockContact (ip,op) arg_reqSeq arg_id = do
  send_unblockContact op arg_reqSeq arg_id
  recv_unblockContact ip
send_unblockContact op arg_reqSeq arg_id = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("unblockContact", T.M_CALL, seqn) $
    write_UnblockContact_args op (UnblockContact_args{unblockContact_args_reqSeq=arg_reqSeq,unblockContact_args_id=arg_id})
recv_unblockContact ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UnblockContact_result ip
    P.maybe (P.return ()) X.throw (unblockContact_result_e res)
    P.return ()
unblockRecommendation (ip,op) arg_reqSeq arg_id = do
  send_unblockRecommendation op arg_reqSeq arg_id
  recv_unblockRecommendation ip
send_unblockRecommendation op arg_reqSeq arg_id = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("unblockRecommendation", T.M_CALL, seqn) $
    write_UnblockRecommendation_args op (UnblockRecommendation_args{unblockRecommendation_args_reqSeq=arg_reqSeq,unblockRecommendation_args_id=arg_id})
recv_unblockRecommendation ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UnblockRecommendation_result ip
    P.maybe (P.return ()) X.throw (unblockRecommendation_result_e res)
    P.return ()
unregisterUserAndDevice (ip,op) = do
  send_unregisterUserAndDevice op
  recv_unregisterUserAndDevice ip
send_unregisterUserAndDevice op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("unregisterUserAndDevice", T.M_CALL, seqn) $
    write_UnregisterUserAndDevice_args op (UnregisterUserAndDevice_args{})
recv_unregisterUserAndDevice ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UnregisterUserAndDevice_result ip
    P.maybe (P.return ()) X.throw (unregisterUserAndDevice_result_e res)
    P.return $ unregisterUserAndDevice_result_success res
updateApnsDeviceToken (ip,op) arg_apnsDeviceToken = do
  send_updateApnsDeviceToken op arg_apnsDeviceToken
  recv_updateApnsDeviceToken ip
send_updateApnsDeviceToken op arg_apnsDeviceToken = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateApnsDeviceToken", T.M_CALL, seqn) $
    write_UpdateApnsDeviceToken_args op (UpdateApnsDeviceToken_args{updateApnsDeviceToken_args_apnsDeviceToken=arg_apnsDeviceToken})
recv_updateApnsDeviceToken ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateApnsDeviceToken_result ip
    P.maybe (P.return ()) X.throw (updateApnsDeviceToken_result_e res)
    P.return ()
updateBuddySetting (ip,op) arg_key arg_value = do
  send_updateBuddySetting op arg_key arg_value
  recv_updateBuddySetting ip
send_updateBuddySetting op arg_key arg_value = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateBuddySetting", T.M_CALL, seqn) $
    write_UpdateBuddySetting_args op (UpdateBuddySetting_args{updateBuddySetting_args_key=arg_key,updateBuddySetting_args_value=arg_value})
recv_updateBuddySetting ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateBuddySetting_result ip
    P.maybe (P.return ()) X.throw (updateBuddySetting_result_e res)
    P.return ()
updateC2DMRegistrationId (ip,op) arg_registrationId = do
  send_updateC2DMRegistrationId op arg_registrationId
  recv_updateC2DMRegistrationId ip
send_updateC2DMRegistrationId op arg_registrationId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateC2DMRegistrationId", T.M_CALL, seqn) $
    write_UpdateC2DMRegistrationId_args op (UpdateC2DMRegistrationId_args{updateC2DMRegistrationId_args_registrationId=arg_registrationId})
recv_updateC2DMRegistrationId ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateC2DMRegistrationId_result ip
    P.maybe (P.return ()) X.throw (updateC2DMRegistrationId_result_e res)
    P.return ()
updateContactSetting (ip,op) arg_reqSeq arg_mid arg_flag arg_value = do
  send_updateContactSetting op arg_reqSeq arg_mid arg_flag arg_value
  recv_updateContactSetting ip
send_updateContactSetting op arg_reqSeq arg_mid arg_flag arg_value = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateContactSetting", T.M_CALL, seqn) $
    write_UpdateContactSetting_args op (UpdateContactSetting_args{updateContactSetting_args_reqSeq=arg_reqSeq,updateContactSetting_args_mid=arg_mid,updateContactSetting_args_flag=arg_flag,updateContactSetting_args_value=arg_value})
recv_updateContactSetting ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateContactSetting_result ip
    P.maybe (P.return ()) X.throw (updateContactSetting_result_e res)
    P.return ()
updateCustomModeSettings (ip,op) arg_customMode arg_paramMap = do
  send_updateCustomModeSettings op arg_customMode arg_paramMap
  recv_updateCustomModeSettings ip
send_updateCustomModeSettings op arg_customMode arg_paramMap = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateCustomModeSettings", T.M_CALL, seqn) $
    write_UpdateCustomModeSettings_args op (UpdateCustomModeSettings_args{updateCustomModeSettings_args_customMode=arg_customMode,updateCustomModeSettings_args_paramMap=arg_paramMap})
recv_updateCustomModeSettings ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateCustomModeSettings_result ip
    P.maybe (P.return ()) X.throw (updateCustomModeSettings_result_e res)
    P.return ()
updateDeviceInfo (ip,op) arg_deviceUid arg_deviceInfo = do
  send_updateDeviceInfo op arg_deviceUid arg_deviceInfo
  recv_updateDeviceInfo ip
send_updateDeviceInfo op arg_deviceUid arg_deviceInfo = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateDeviceInfo", T.M_CALL, seqn) $
    write_UpdateDeviceInfo_args op (UpdateDeviceInfo_args{updateDeviceInfo_args_deviceUid=arg_deviceUid,updateDeviceInfo_args_deviceInfo=arg_deviceInfo})
recv_updateDeviceInfo ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateDeviceInfo_result ip
    P.maybe (P.return ()) X.throw (updateDeviceInfo_result_e res)
    P.return ()
updateGroup (ip,op) arg_reqSeq arg_group = do
  send_updateGroup op arg_reqSeq arg_group
  recv_updateGroup ip
send_updateGroup op arg_reqSeq arg_group = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateGroup", T.M_CALL, seqn) $
    write_UpdateGroup_args op (UpdateGroup_args{updateGroup_args_reqSeq=arg_reqSeq,updateGroup_args_group=arg_group})
recv_updateGroup ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateGroup_result ip
    P.maybe (P.return ()) X.throw (updateGroup_result_e res)
    P.return ()
updateNotificationToken (ip,op) arg_type arg_token = do
  send_updateNotificationToken op arg_type arg_token
  recv_updateNotificationToken ip
send_updateNotificationToken op arg_type arg_token = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateNotificationToken", T.M_CALL, seqn) $
    write_UpdateNotificationToken_args op (UpdateNotificationToken_args{updateNotificationToken_args_type=arg_type,updateNotificationToken_args_token=arg_token})
recv_updateNotificationToken ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateNotificationToken_result ip
    P.maybe (P.return ()) X.throw (updateNotificationToken_result_e res)
    P.return ()
updateNotificationTokenWithBytes (ip,op) arg_type arg_token = do
  send_updateNotificationTokenWithBytes op arg_type arg_token
  recv_updateNotificationTokenWithBytes ip
send_updateNotificationTokenWithBytes op arg_type arg_token = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateNotificationTokenWithBytes", T.M_CALL, seqn) $
    write_UpdateNotificationTokenWithBytes_args op (UpdateNotificationTokenWithBytes_args{updateNotificationTokenWithBytes_args_type=arg_type,updateNotificationTokenWithBytes_args_token=arg_token})
recv_updateNotificationTokenWithBytes ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateNotificationTokenWithBytes_result ip
    P.maybe (P.return ()) X.throw (updateNotificationTokenWithBytes_result_e res)
    P.return ()
updateProfile (ip,op) arg_reqSeq arg_profile = do
  send_updateProfile op arg_reqSeq arg_profile
  recv_updateProfile ip
send_updateProfile op arg_reqSeq arg_profile = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateProfile", T.M_CALL, seqn) $
    write_UpdateProfile_args op (UpdateProfile_args{updateProfile_args_reqSeq=arg_reqSeq,updateProfile_args_profile=arg_profile})
recv_updateProfile ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateProfile_result ip
    P.maybe (P.return ()) X.throw (updateProfile_result_e res)
    P.return ()
updateProfileAttribute (ip,op) arg_reqSeq arg_attr arg_value = do
  send_updateProfileAttribute op arg_reqSeq arg_attr arg_value
  recv_updateProfileAttribute ip
send_updateProfileAttribute op arg_reqSeq arg_attr arg_value = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateProfileAttribute", T.M_CALL, seqn) $
    write_UpdateProfileAttribute_args op (UpdateProfileAttribute_args{updateProfileAttribute_args_reqSeq=arg_reqSeq,updateProfileAttribute_args_attr=arg_attr,updateProfileAttribute_args_value=arg_value})
recv_updateProfileAttribute ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateProfileAttribute_result ip
    P.maybe (P.return ()) X.throw (updateProfileAttribute_result_e res)
    P.return ()
updateRegion (ip,op) arg_region = do
  send_updateRegion op arg_region
  recv_updateRegion ip
send_updateRegion op arg_region = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateRegion", T.M_CALL, seqn) $
    write_UpdateRegion_args op (UpdateRegion_args{updateRegion_args_region=arg_region})
recv_updateRegion ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateRegion_result ip
    P.maybe (P.return ()) X.throw (updateRegion_result_e res)
    P.return ()
updateSettings (ip,op) arg_reqSeq arg_settings = do
  send_updateSettings op arg_reqSeq arg_settings
  recv_updateSettings ip
send_updateSettings op arg_reqSeq arg_settings = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateSettings", T.M_CALL, seqn) $
    write_UpdateSettings_args op (UpdateSettings_args{updateSettings_args_reqSeq=arg_reqSeq,updateSettings_args_settings=arg_settings})
recv_updateSettings ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateSettings_result ip
    P.maybe (P.return ()) X.throw (updateSettings_result_e res)
    P.return ()
updateSettings2 (ip,op) arg_reqSeq arg_settings = do
  send_updateSettings2 op arg_reqSeq arg_settings
  recv_updateSettings2 ip
send_updateSettings2 op arg_reqSeq arg_settings = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateSettings2", T.M_CALL, seqn) $
    write_UpdateSettings2_args op (UpdateSettings2_args{updateSettings2_args_reqSeq=arg_reqSeq,updateSettings2_args_settings=arg_settings})
recv_updateSettings2 ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateSettings2_result ip
    P.maybe (P.return ()) X.throw (updateSettings2_result_e res)
    P.return $ updateSettings2_result_success res
updateSettingsAttribute (ip,op) arg_reqSeq arg_attr arg_value = do
  send_updateSettingsAttribute op arg_reqSeq arg_attr arg_value
  recv_updateSettingsAttribute ip
send_updateSettingsAttribute op arg_reqSeq arg_attr arg_value = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateSettingsAttribute", T.M_CALL, seqn) $
    write_UpdateSettingsAttribute_args op (UpdateSettingsAttribute_args{updateSettingsAttribute_args_reqSeq=arg_reqSeq,updateSettingsAttribute_args_attr=arg_attr,updateSettingsAttribute_args_value=arg_value})
recv_updateSettingsAttribute ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateSettingsAttribute_result ip
    P.maybe (P.return ()) X.throw (updateSettingsAttribute_result_e res)
    P.return ()
updateSettingsAttributes (ip,op) arg_reqSeq arg_attrBitset arg_settings = do
  send_updateSettingsAttributes op arg_reqSeq arg_attrBitset arg_settings
  recv_updateSettingsAttributes ip
send_updateSettingsAttributes op arg_reqSeq arg_attrBitset arg_settings = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("updateSettingsAttributes", T.M_CALL, seqn) $
    write_UpdateSettingsAttributes_args op (UpdateSettingsAttributes_args{updateSettingsAttributes_args_reqSeq=arg_reqSeq,updateSettingsAttributes_args_attrBitset=arg_attrBitset,updateSettingsAttributes_args_settings=arg_settings})
recv_updateSettingsAttributes ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_UpdateSettingsAttributes_result ip
    P.maybe (P.return ()) X.throw (updateSettingsAttributes_result_e res)
    P.return $ updateSettingsAttributes_result_success res
verifyIdentityCredential (ip,op) arg_identityProvider arg_identifier arg_password = do
  send_verifyIdentityCredential op arg_identityProvider arg_identifier arg_password
  recv_verifyIdentityCredential ip
send_verifyIdentityCredential op arg_identityProvider arg_identifier arg_password = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("verifyIdentityCredential", T.M_CALL, seqn) $
    write_VerifyIdentityCredential_args op (VerifyIdentityCredential_args{verifyIdentityCredential_args_identityProvider=arg_identityProvider,verifyIdentityCredential_args_identifier=arg_identifier,verifyIdentityCredential_args_password=arg_password})
recv_verifyIdentityCredential ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_VerifyIdentityCredential_result ip
    P.maybe (P.return ()) X.throw (verifyIdentityCredential_result_e res)
    P.return ()
verifyIdentityCredentialWithResult (ip,op) arg_identityCredential = do
  send_verifyIdentityCredentialWithResult op arg_identityCredential
  recv_verifyIdentityCredentialWithResult ip
send_verifyIdentityCredentialWithResult op arg_identityCredential = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("verifyIdentityCredentialWithResult", T.M_CALL, seqn) $
    write_VerifyIdentityCredentialWithResult_args op (VerifyIdentityCredentialWithResult_args{verifyIdentityCredentialWithResult_args_identityCredential=arg_identityCredential})
recv_verifyIdentityCredentialWithResult ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_VerifyIdentityCredentialWithResult_result ip
    P.maybe (P.return ()) X.throw (verifyIdentityCredentialWithResult_result_e res)
    P.return $ verifyIdentityCredentialWithResult_result_success res
verifyPhone (ip,op) arg_sessionId arg_pinCode arg_udidHash = do
  send_verifyPhone op arg_sessionId arg_pinCode arg_udidHash
  recv_verifyPhone ip
send_verifyPhone op arg_sessionId arg_pinCode arg_udidHash = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("verifyPhone", T.M_CALL, seqn) $
    write_VerifyPhone_args op (VerifyPhone_args{verifyPhone_args_sessionId=arg_sessionId,verifyPhone_args_pinCode=arg_pinCode,verifyPhone_args_udidHash=arg_udidHash})
recv_verifyPhone ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_VerifyPhone_result ip
    P.maybe (P.return ()) X.throw (verifyPhone_result_e res)
    P.return $ verifyPhone_result_success res
verifyQrcode (ip,op) arg_verifier arg_pinCode = do
  send_verifyQrcode op arg_verifier arg_pinCode
  recv_verifyQrcode ip
send_verifyQrcode op arg_verifier arg_pinCode = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("verifyQrcode", T.M_CALL, seqn) $
    write_VerifyQrcode_args op (VerifyQrcode_args{verifyQrcode_args_verifier=arg_verifier,verifyQrcode_args_pinCode=arg_pinCode})
recv_verifyQrcode ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_VerifyQrcode_result ip
    P.maybe (P.return ()) X.throw (verifyQrcode_result_e res)
    P.return $ verifyQrcode_result_success res
