{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.13.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module UniversalNotificationService where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Line_Types
import qualified UniversalNotificationService_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data Notify_args = Notify_args  { notify_args_event :: GlobalEvent
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Notify_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` notify_args_event record  
instance QC.Arbitrary Notify_args where 
  arbitrary = M.liftM Notify_args (QC.arbitrary)
  shrink obj | obj == default_Notify_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Notify_args{notify_args_event = notify_args_event obj} then P.Nothing else P.Just $ default_Notify_args{notify_args_event = notify_args_event obj}
    ]
from_Notify_args :: Notify_args -> T.ThriftVal
from_Notify_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v9561 -> P.Just (2, ("event",from_GlobalEvent _v9561))) $ notify_args_event record
  ]
write_Notify_args :: T.Protocol p => p -> Notify_args -> P.IO ()
write_Notify_args oprot record = T.writeVal oprot $ from_Notify_args record
encode_Notify_args :: T.StatelessProtocol p => p -> Notify_args -> LBS.ByteString
encode_Notify_args oprot record = T.serializeVal oprot $ from_Notify_args record
to_Notify_args :: T.ThriftVal -> Notify_args
to_Notify_args (T.TStruct fields) = Notify_args{
  notify_args_event = P.maybe (notify_args_event default_Notify_args) (\(_,_val9563) -> (case _val9563 of {T.TStruct _val9564 -> (to_GlobalEvent (T.TStruct _val9564)); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_Notify_args _ = P.error "not a struct"
read_Notify_args :: T.Protocol p => p -> P.IO Notify_args
read_Notify_args iprot = to_Notify_args <$> T.readVal iprot (T.T_STRUCT typemap_Notify_args)
decode_Notify_args :: T.StatelessProtocol p => p -> LBS.ByteString -> Notify_args
decode_Notify_args iprot bs = to_Notify_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Notify_args) bs
typemap_Notify_args :: T.TypeMap
typemap_Notify_args = Map.fromList [(2,("event",(T.T_STRUCT typemap_GlobalEvent)))]
default_Notify_args :: Notify_args
default_Notify_args = Notify_args{
  notify_args_event = default_GlobalEvent}
data Notify_result = Notify_result  { notify_result_e :: P.Maybe UniversalNotificationServiceException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Notify_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` notify_result_e record  
instance QC.Arbitrary Notify_result where 
  arbitrary = M.liftM Notify_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_Notify_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Notify_result{notify_result_e = notify_result_e obj} then P.Nothing else P.Just $ default_Notify_result{notify_result_e = notify_result_e obj}
    ]
from_Notify_result :: Notify_result -> T.ThriftVal
from_Notify_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v9567 -> (1, ("e",from_UniversalNotificationServiceException _v9567))) <$> notify_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v9567 -> (1, ("e",from_UniversalNotificationServiceException _v9567))) <$> notify_result_e record
    ]
    )
write_Notify_result :: T.Protocol p => p -> Notify_result -> P.IO ()
write_Notify_result oprot record = T.writeVal oprot $ from_Notify_result record
encode_Notify_result :: T.StatelessProtocol p => p -> Notify_result -> LBS.ByteString
encode_Notify_result oprot record = T.serializeVal oprot $ from_Notify_result record
to_Notify_result :: T.ThriftVal -> Notify_result
to_Notify_result (T.TStruct fields) = Notify_result{
  notify_result_e = P.maybe (P.Nothing) (\(_,_val9569) -> P.Just (case _val9569 of {T.TStruct _val9570 -> (to_UniversalNotificationServiceException (T.TStruct _val9570)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_Notify_result _ = P.error "not a struct"
read_Notify_result :: T.Protocol p => p -> P.IO Notify_result
read_Notify_result iprot = to_Notify_result <$> T.readVal iprot (T.T_STRUCT typemap_Notify_result)
decode_Notify_result :: T.StatelessProtocol p => p -> LBS.ByteString -> Notify_result
decode_Notify_result iprot bs = to_Notify_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Notify_result) bs
typemap_Notify_result :: T.TypeMap
typemap_Notify_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_UniversalNotificationServiceException)))]
default_Notify_result :: Notify_result
default_Notify_result = Notify_result{
  notify_result_e = P.Nothing}
process_notify (seqid, iprot, oprot, handler) = do
  args <- read_Notify_args iprot
  (X.catch
    (X.catch
      (do
        Iface.notify handler (notify_args_event args)
        let res = default_Notify_result
        T.writeMessage oprot ("notify", T.M_REPLY, seqid) $
          write_Notify_result oprot res)
      (\e  -> do
        let res = default_Notify_result{notify_result_e = P.Just e}
        T.writeMessage oprot ("notify", T.M_REPLY, seqid) $
          write_Notify_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("notify", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "notify" -> process_notify (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessage oprot (name,T.M_EXCEPTION,seqid) $
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
process handler (iprot, oprot) = do
  T.readMessage iprot (
    proc_ handler (iprot,oprot))
  P.return P.True
