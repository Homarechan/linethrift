{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.13.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module BuddyManagementService where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Line_Types
import qualified BuddyManagementService_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data AddBuddyMember_args = AddBuddyMember_args  { addBuddyMember_args_requestId :: LT.Text
  , addBuddyMember_args_userMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable AddBuddyMember_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` addBuddyMember_args_requestId record   `H.hashWithSalt` addBuddyMember_args_userMid record  
instance QC.Arbitrary AddBuddyMember_args where 
  arbitrary = M.liftM AddBuddyMember_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_AddBuddyMember_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_AddBuddyMember_args{addBuddyMember_args_requestId = addBuddyMember_args_requestId obj} then P.Nothing else P.Just $ default_AddBuddyMember_args{addBuddyMember_args_requestId = addBuddyMember_args_requestId obj}
    , if obj == default_AddBuddyMember_args{addBuddyMember_args_userMid = addBuddyMember_args_userMid obj} then P.Nothing else P.Just $ default_AddBuddyMember_args{addBuddyMember_args_userMid = addBuddyMember_args_userMid obj}
    ]
from_AddBuddyMember_args :: AddBuddyMember_args -> T.ThriftVal
from_AddBuddyMember_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3665 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v3665))) $ addBuddyMember_args_requestId record
  , (\_v3665 -> P.Just (2, ("userMid",T.TString $ E.encodeUtf8 _v3665))) $ addBuddyMember_args_userMid record
  ]
write_AddBuddyMember_args :: T.Protocol p => p -> AddBuddyMember_args -> P.IO ()
write_AddBuddyMember_args oprot record = T.writeVal oprot $ from_AddBuddyMember_args record
encode_AddBuddyMember_args :: T.StatelessProtocol p => p -> AddBuddyMember_args -> LBS.ByteString
encode_AddBuddyMember_args oprot record = T.serializeVal oprot $ from_AddBuddyMember_args record
to_AddBuddyMember_args :: T.ThriftVal -> AddBuddyMember_args
to_AddBuddyMember_args (T.TStruct fields) = AddBuddyMember_args{
  addBuddyMember_args_requestId = P.maybe (addBuddyMember_args_requestId default_AddBuddyMember_args) (\(_,_val3667) -> (case _val3667 of {T.TString _val3668 -> E.decodeUtf8 _val3668; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  addBuddyMember_args_userMid = P.maybe (addBuddyMember_args_userMid default_AddBuddyMember_args) (\(_,_val3667) -> (case _val3667 of {T.TString _val3669 -> E.decodeUtf8 _val3669; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_AddBuddyMember_args _ = P.error "not a struct"
read_AddBuddyMember_args :: T.Protocol p => p -> P.IO AddBuddyMember_args
read_AddBuddyMember_args iprot = to_AddBuddyMember_args <$> T.readVal iprot (T.T_STRUCT typemap_AddBuddyMember_args)
decode_AddBuddyMember_args :: T.StatelessProtocol p => p -> LBS.ByteString -> AddBuddyMember_args
decode_AddBuddyMember_args iprot bs = to_AddBuddyMember_args $ T.deserializeVal iprot (T.T_STRUCT typemap_AddBuddyMember_args) bs
typemap_AddBuddyMember_args :: T.TypeMap
typemap_AddBuddyMember_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("userMid",T.T_STRING))]
default_AddBuddyMember_args :: AddBuddyMember_args
default_AddBuddyMember_args = AddBuddyMember_args{
  addBuddyMember_args_requestId = "",
  addBuddyMember_args_userMid = ""}
data AddBuddyMember_result = AddBuddyMember_result  { addBuddyMember_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable AddBuddyMember_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` addBuddyMember_result_e record  
instance QC.Arbitrary AddBuddyMember_result where 
  arbitrary = M.liftM AddBuddyMember_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_AddBuddyMember_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_AddBuddyMember_result{addBuddyMember_result_e = addBuddyMember_result_e obj} then P.Nothing else P.Just $ default_AddBuddyMember_result{addBuddyMember_result_e = addBuddyMember_result_e obj}
    ]
from_AddBuddyMember_result :: AddBuddyMember_result -> T.ThriftVal
from_AddBuddyMember_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3672 -> (1, ("e",from_TalkException _v3672))) <$> addBuddyMember_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3672 -> (1, ("e",from_TalkException _v3672))) <$> addBuddyMember_result_e record
    ]
    )
write_AddBuddyMember_result :: T.Protocol p => p -> AddBuddyMember_result -> P.IO ()
write_AddBuddyMember_result oprot record = T.writeVal oprot $ from_AddBuddyMember_result record
encode_AddBuddyMember_result :: T.StatelessProtocol p => p -> AddBuddyMember_result -> LBS.ByteString
encode_AddBuddyMember_result oprot record = T.serializeVal oprot $ from_AddBuddyMember_result record
to_AddBuddyMember_result :: T.ThriftVal -> AddBuddyMember_result
to_AddBuddyMember_result (T.TStruct fields) = AddBuddyMember_result{
  addBuddyMember_result_e = P.maybe (P.Nothing) (\(_,_val3674) -> P.Just (case _val3674 of {T.TStruct _val3675 -> (to_TalkException (T.TStruct _val3675)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_AddBuddyMember_result _ = P.error "not a struct"
read_AddBuddyMember_result :: T.Protocol p => p -> P.IO AddBuddyMember_result
read_AddBuddyMember_result iprot = to_AddBuddyMember_result <$> T.readVal iprot (T.T_STRUCT typemap_AddBuddyMember_result)
decode_AddBuddyMember_result :: T.StatelessProtocol p => p -> LBS.ByteString -> AddBuddyMember_result
decode_AddBuddyMember_result iprot bs = to_AddBuddyMember_result $ T.deserializeVal iprot (T.T_STRUCT typemap_AddBuddyMember_result) bs
typemap_AddBuddyMember_result :: T.TypeMap
typemap_AddBuddyMember_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_AddBuddyMember_result :: AddBuddyMember_result
default_AddBuddyMember_result = AddBuddyMember_result{
  addBuddyMember_result_e = P.Nothing}
data AddBuddyMembers_args = AddBuddyMembers_args  { addBuddyMembers_args_requestId :: LT.Text
  , addBuddyMembers_args_userMids :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable AddBuddyMembers_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` addBuddyMembers_args_requestId record   `H.hashWithSalt` addBuddyMembers_args_userMids record  
instance QC.Arbitrary AddBuddyMembers_args where 
  arbitrary = M.liftM AddBuddyMembers_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_AddBuddyMembers_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_AddBuddyMembers_args{addBuddyMembers_args_requestId = addBuddyMembers_args_requestId obj} then P.Nothing else P.Just $ default_AddBuddyMembers_args{addBuddyMembers_args_requestId = addBuddyMembers_args_requestId obj}
    , if obj == default_AddBuddyMembers_args{addBuddyMembers_args_userMids = addBuddyMembers_args_userMids obj} then P.Nothing else P.Just $ default_AddBuddyMembers_args{addBuddyMembers_args_userMids = addBuddyMembers_args_userMids obj}
    ]
from_AddBuddyMembers_args :: AddBuddyMembers_args -> T.ThriftVal
from_AddBuddyMembers_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3678 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v3678))) $ addBuddyMembers_args_requestId record
  , (\_v3678 -> P.Just (2, ("userMids",T.TList T.T_STRING $ P.map (\_v3680 -> T.TString $ E.encodeUtf8 _v3680) $ Vector.toList _v3678))) $ addBuddyMembers_args_userMids record
  ]
write_AddBuddyMembers_args :: T.Protocol p => p -> AddBuddyMembers_args -> P.IO ()
write_AddBuddyMembers_args oprot record = T.writeVal oprot $ from_AddBuddyMembers_args record
encode_AddBuddyMembers_args :: T.StatelessProtocol p => p -> AddBuddyMembers_args -> LBS.ByteString
encode_AddBuddyMembers_args oprot record = T.serializeVal oprot $ from_AddBuddyMembers_args record
to_AddBuddyMembers_args :: T.ThriftVal -> AddBuddyMembers_args
to_AddBuddyMembers_args (T.TStruct fields) = AddBuddyMembers_args{
  addBuddyMembers_args_requestId = P.maybe (addBuddyMembers_args_requestId default_AddBuddyMembers_args) (\(_,_val3682) -> (case _val3682 of {T.TString _val3683 -> E.decodeUtf8 _val3683; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  addBuddyMembers_args_userMids = P.maybe (addBuddyMembers_args_userMids default_AddBuddyMembers_args) (\(_,_val3682) -> (case _val3682 of {T.TList _ _val3684 -> (Vector.fromList $ P.map (\_v3685 -> (case _v3685 of {T.TString _val3686 -> E.decodeUtf8 _val3686; _ -> P.error "wrong type"})) _val3684); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_AddBuddyMembers_args _ = P.error "not a struct"
read_AddBuddyMembers_args :: T.Protocol p => p -> P.IO AddBuddyMembers_args
read_AddBuddyMembers_args iprot = to_AddBuddyMembers_args <$> T.readVal iprot (T.T_STRUCT typemap_AddBuddyMembers_args)
decode_AddBuddyMembers_args :: T.StatelessProtocol p => p -> LBS.ByteString -> AddBuddyMembers_args
decode_AddBuddyMembers_args iprot bs = to_AddBuddyMembers_args $ T.deserializeVal iprot (T.T_STRUCT typemap_AddBuddyMembers_args) bs
typemap_AddBuddyMembers_args :: T.TypeMap
typemap_AddBuddyMembers_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("userMids",(T.T_LIST T.T_STRING)))]
default_AddBuddyMembers_args :: AddBuddyMembers_args
default_AddBuddyMembers_args = AddBuddyMembers_args{
  addBuddyMembers_args_requestId = "",
  addBuddyMembers_args_userMids = Vector.empty}
data AddBuddyMembers_result = AddBuddyMembers_result  { addBuddyMembers_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable AddBuddyMembers_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` addBuddyMembers_result_e record  
instance QC.Arbitrary AddBuddyMembers_result where 
  arbitrary = M.liftM AddBuddyMembers_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_AddBuddyMembers_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_AddBuddyMembers_result{addBuddyMembers_result_e = addBuddyMembers_result_e obj} then P.Nothing else P.Just $ default_AddBuddyMembers_result{addBuddyMembers_result_e = addBuddyMembers_result_e obj}
    ]
from_AddBuddyMembers_result :: AddBuddyMembers_result -> T.ThriftVal
from_AddBuddyMembers_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3689 -> (1, ("e",from_TalkException _v3689))) <$> addBuddyMembers_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3689 -> (1, ("e",from_TalkException _v3689))) <$> addBuddyMembers_result_e record
    ]
    )
write_AddBuddyMembers_result :: T.Protocol p => p -> AddBuddyMembers_result -> P.IO ()
write_AddBuddyMembers_result oprot record = T.writeVal oprot $ from_AddBuddyMembers_result record
encode_AddBuddyMembers_result :: T.StatelessProtocol p => p -> AddBuddyMembers_result -> LBS.ByteString
encode_AddBuddyMembers_result oprot record = T.serializeVal oprot $ from_AddBuddyMembers_result record
to_AddBuddyMembers_result :: T.ThriftVal -> AddBuddyMembers_result
to_AddBuddyMembers_result (T.TStruct fields) = AddBuddyMembers_result{
  addBuddyMembers_result_e = P.maybe (P.Nothing) (\(_,_val3691) -> P.Just (case _val3691 of {T.TStruct _val3692 -> (to_TalkException (T.TStruct _val3692)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_AddBuddyMembers_result _ = P.error "not a struct"
read_AddBuddyMembers_result :: T.Protocol p => p -> P.IO AddBuddyMembers_result
read_AddBuddyMembers_result iprot = to_AddBuddyMembers_result <$> T.readVal iprot (T.T_STRUCT typemap_AddBuddyMembers_result)
decode_AddBuddyMembers_result :: T.StatelessProtocol p => p -> LBS.ByteString -> AddBuddyMembers_result
decode_AddBuddyMembers_result iprot bs = to_AddBuddyMembers_result $ T.deserializeVal iprot (T.T_STRUCT typemap_AddBuddyMembers_result) bs
typemap_AddBuddyMembers_result :: T.TypeMap
typemap_AddBuddyMembers_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_AddBuddyMembers_result :: AddBuddyMembers_result
default_AddBuddyMembers_result = AddBuddyMembers_result{
  addBuddyMembers_result_e = P.Nothing}
data BlockBuddyMember_args = BlockBuddyMember_args  { blockBuddyMember_args_requestId :: LT.Text
  , blockBuddyMember_args_mid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable BlockBuddyMember_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` blockBuddyMember_args_requestId record   `H.hashWithSalt` blockBuddyMember_args_mid record  
instance QC.Arbitrary BlockBuddyMember_args where 
  arbitrary = M.liftM BlockBuddyMember_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_BlockBuddyMember_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_BlockBuddyMember_args{blockBuddyMember_args_requestId = blockBuddyMember_args_requestId obj} then P.Nothing else P.Just $ default_BlockBuddyMember_args{blockBuddyMember_args_requestId = blockBuddyMember_args_requestId obj}
    , if obj == default_BlockBuddyMember_args{blockBuddyMember_args_mid = blockBuddyMember_args_mid obj} then P.Nothing else P.Just $ default_BlockBuddyMember_args{blockBuddyMember_args_mid = blockBuddyMember_args_mid obj}
    ]
from_BlockBuddyMember_args :: BlockBuddyMember_args -> T.ThriftVal
from_BlockBuddyMember_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3695 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v3695))) $ blockBuddyMember_args_requestId record
  , (\_v3695 -> P.Just (2, ("mid",T.TString $ E.encodeUtf8 _v3695))) $ blockBuddyMember_args_mid record
  ]
write_BlockBuddyMember_args :: T.Protocol p => p -> BlockBuddyMember_args -> P.IO ()
write_BlockBuddyMember_args oprot record = T.writeVal oprot $ from_BlockBuddyMember_args record
encode_BlockBuddyMember_args :: T.StatelessProtocol p => p -> BlockBuddyMember_args -> LBS.ByteString
encode_BlockBuddyMember_args oprot record = T.serializeVal oprot $ from_BlockBuddyMember_args record
to_BlockBuddyMember_args :: T.ThriftVal -> BlockBuddyMember_args
to_BlockBuddyMember_args (T.TStruct fields) = BlockBuddyMember_args{
  blockBuddyMember_args_requestId = P.maybe (blockBuddyMember_args_requestId default_BlockBuddyMember_args) (\(_,_val3697) -> (case _val3697 of {T.TString _val3698 -> E.decodeUtf8 _val3698; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  blockBuddyMember_args_mid = P.maybe (blockBuddyMember_args_mid default_BlockBuddyMember_args) (\(_,_val3697) -> (case _val3697 of {T.TString _val3699 -> E.decodeUtf8 _val3699; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_BlockBuddyMember_args _ = P.error "not a struct"
read_BlockBuddyMember_args :: T.Protocol p => p -> P.IO BlockBuddyMember_args
read_BlockBuddyMember_args iprot = to_BlockBuddyMember_args <$> T.readVal iprot (T.T_STRUCT typemap_BlockBuddyMember_args)
decode_BlockBuddyMember_args :: T.StatelessProtocol p => p -> LBS.ByteString -> BlockBuddyMember_args
decode_BlockBuddyMember_args iprot bs = to_BlockBuddyMember_args $ T.deserializeVal iprot (T.T_STRUCT typemap_BlockBuddyMember_args) bs
typemap_BlockBuddyMember_args :: T.TypeMap
typemap_BlockBuddyMember_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("mid",T.T_STRING))]
default_BlockBuddyMember_args :: BlockBuddyMember_args
default_BlockBuddyMember_args = BlockBuddyMember_args{
  blockBuddyMember_args_requestId = "",
  blockBuddyMember_args_mid = ""}
data BlockBuddyMember_result = BlockBuddyMember_result  { blockBuddyMember_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable BlockBuddyMember_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` blockBuddyMember_result_e record  
instance QC.Arbitrary BlockBuddyMember_result where 
  arbitrary = M.liftM BlockBuddyMember_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_BlockBuddyMember_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_BlockBuddyMember_result{blockBuddyMember_result_e = blockBuddyMember_result_e obj} then P.Nothing else P.Just $ default_BlockBuddyMember_result{blockBuddyMember_result_e = blockBuddyMember_result_e obj}
    ]
from_BlockBuddyMember_result :: BlockBuddyMember_result -> T.ThriftVal
from_BlockBuddyMember_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3702 -> (1, ("e",from_TalkException _v3702))) <$> blockBuddyMember_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3702 -> (1, ("e",from_TalkException _v3702))) <$> blockBuddyMember_result_e record
    ]
    )
write_BlockBuddyMember_result :: T.Protocol p => p -> BlockBuddyMember_result -> P.IO ()
write_BlockBuddyMember_result oprot record = T.writeVal oprot $ from_BlockBuddyMember_result record
encode_BlockBuddyMember_result :: T.StatelessProtocol p => p -> BlockBuddyMember_result -> LBS.ByteString
encode_BlockBuddyMember_result oprot record = T.serializeVal oprot $ from_BlockBuddyMember_result record
to_BlockBuddyMember_result :: T.ThriftVal -> BlockBuddyMember_result
to_BlockBuddyMember_result (T.TStruct fields) = BlockBuddyMember_result{
  blockBuddyMember_result_e = P.maybe (P.Nothing) (\(_,_val3704) -> P.Just (case _val3704 of {T.TStruct _val3705 -> (to_TalkException (T.TStruct _val3705)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_BlockBuddyMember_result _ = P.error "not a struct"
read_BlockBuddyMember_result :: T.Protocol p => p -> P.IO BlockBuddyMember_result
read_BlockBuddyMember_result iprot = to_BlockBuddyMember_result <$> T.readVal iprot (T.T_STRUCT typemap_BlockBuddyMember_result)
decode_BlockBuddyMember_result :: T.StatelessProtocol p => p -> LBS.ByteString -> BlockBuddyMember_result
decode_BlockBuddyMember_result iprot bs = to_BlockBuddyMember_result $ T.deserializeVal iprot (T.T_STRUCT typemap_BlockBuddyMember_result) bs
typemap_BlockBuddyMember_result :: T.TypeMap
typemap_BlockBuddyMember_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_BlockBuddyMember_result :: BlockBuddyMember_result
default_BlockBuddyMember_result = BlockBuddyMember_result{
  blockBuddyMember_result_e = P.Nothing}
data CommitSendMessagesToAll_args = CommitSendMessagesToAll_args  { commitSendMessagesToAll_args_requestIdList :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable CommitSendMessagesToAll_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` commitSendMessagesToAll_args_requestIdList record  
instance QC.Arbitrary CommitSendMessagesToAll_args where 
  arbitrary = M.liftM CommitSendMessagesToAll_args (QC.arbitrary)
  shrink obj | obj == default_CommitSendMessagesToAll_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_CommitSendMessagesToAll_args{commitSendMessagesToAll_args_requestIdList = commitSendMessagesToAll_args_requestIdList obj} then P.Nothing else P.Just $ default_CommitSendMessagesToAll_args{commitSendMessagesToAll_args_requestIdList = commitSendMessagesToAll_args_requestIdList obj}
    ]
from_CommitSendMessagesToAll_args :: CommitSendMessagesToAll_args -> T.ThriftVal
from_CommitSendMessagesToAll_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3708 -> P.Just (1, ("requestIdList",T.TList T.T_STRING $ P.map (\_v3710 -> T.TString $ E.encodeUtf8 _v3710) $ Vector.toList _v3708))) $ commitSendMessagesToAll_args_requestIdList record
  ]
write_CommitSendMessagesToAll_args :: T.Protocol p => p -> CommitSendMessagesToAll_args -> P.IO ()
write_CommitSendMessagesToAll_args oprot record = T.writeVal oprot $ from_CommitSendMessagesToAll_args record
encode_CommitSendMessagesToAll_args :: T.StatelessProtocol p => p -> CommitSendMessagesToAll_args -> LBS.ByteString
encode_CommitSendMessagesToAll_args oprot record = T.serializeVal oprot $ from_CommitSendMessagesToAll_args record
to_CommitSendMessagesToAll_args :: T.ThriftVal -> CommitSendMessagesToAll_args
to_CommitSendMessagesToAll_args (T.TStruct fields) = CommitSendMessagesToAll_args{
  commitSendMessagesToAll_args_requestIdList = P.maybe (commitSendMessagesToAll_args_requestIdList default_CommitSendMessagesToAll_args) (\(_,_val3712) -> (case _val3712 of {T.TList _ _val3713 -> (Vector.fromList $ P.map (\_v3714 -> (case _v3714 of {T.TString _val3715 -> E.decodeUtf8 _val3715; _ -> P.error "wrong type"})) _val3713); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_CommitSendMessagesToAll_args _ = P.error "not a struct"
read_CommitSendMessagesToAll_args :: T.Protocol p => p -> P.IO CommitSendMessagesToAll_args
read_CommitSendMessagesToAll_args iprot = to_CommitSendMessagesToAll_args <$> T.readVal iprot (T.T_STRUCT typemap_CommitSendMessagesToAll_args)
decode_CommitSendMessagesToAll_args :: T.StatelessProtocol p => p -> LBS.ByteString -> CommitSendMessagesToAll_args
decode_CommitSendMessagesToAll_args iprot bs = to_CommitSendMessagesToAll_args $ T.deserializeVal iprot (T.T_STRUCT typemap_CommitSendMessagesToAll_args) bs
typemap_CommitSendMessagesToAll_args :: T.TypeMap
typemap_CommitSendMessagesToAll_args = Map.fromList [(1,("requestIdList",(T.T_LIST T.T_STRING)))]
default_CommitSendMessagesToAll_args :: CommitSendMessagesToAll_args
default_CommitSendMessagesToAll_args = CommitSendMessagesToAll_args{
  commitSendMessagesToAll_args_requestIdList = Vector.empty}
data CommitSendMessagesToAll_result = CommitSendMessagesToAll_result  { commitSendMessagesToAll_result_success :: (Vector.Vector SendBuddyMessageResult)
  , commitSendMessagesToAll_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable CommitSendMessagesToAll_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` commitSendMessagesToAll_result_success record   `H.hashWithSalt` commitSendMessagesToAll_result_e record  
instance QC.Arbitrary CommitSendMessagesToAll_result where 
  arbitrary = M.liftM CommitSendMessagesToAll_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_CommitSendMessagesToAll_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_CommitSendMessagesToAll_result{commitSendMessagesToAll_result_success = commitSendMessagesToAll_result_success obj} then P.Nothing else P.Just $ default_CommitSendMessagesToAll_result{commitSendMessagesToAll_result_success = commitSendMessagesToAll_result_success obj}
    , if obj == default_CommitSendMessagesToAll_result{commitSendMessagesToAll_result_e = commitSendMessagesToAll_result_e obj} then P.Nothing else P.Just $ default_CommitSendMessagesToAll_result{commitSendMessagesToAll_result_e = commitSendMessagesToAll_result_e obj}
    ]
from_CommitSendMessagesToAll_result :: CommitSendMessagesToAll_result -> T.ThriftVal
from_CommitSendMessagesToAll_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3718 -> (1, ("e",from_TalkException _v3718))) <$> commitSendMessagesToAll_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3718 -> P.Just (0, ("success",T.TList (T.T_STRUCT typemap_SendBuddyMessageResult) $ P.map (\_v3720 -> from_SendBuddyMessageResult _v3720) $ Vector.toList _v3718))) $ commitSendMessagesToAll_result_success record
    , (\_v3718 -> (1, ("e",from_TalkException _v3718))) <$> commitSendMessagesToAll_result_e record
    ]
    )
write_CommitSendMessagesToAll_result :: T.Protocol p => p -> CommitSendMessagesToAll_result -> P.IO ()
write_CommitSendMessagesToAll_result oprot record = T.writeVal oprot $ from_CommitSendMessagesToAll_result record
encode_CommitSendMessagesToAll_result :: T.StatelessProtocol p => p -> CommitSendMessagesToAll_result -> LBS.ByteString
encode_CommitSendMessagesToAll_result oprot record = T.serializeVal oprot $ from_CommitSendMessagesToAll_result record
to_CommitSendMessagesToAll_result :: T.ThriftVal -> CommitSendMessagesToAll_result
to_CommitSendMessagesToAll_result (T.TStruct fields) = CommitSendMessagesToAll_result{
  commitSendMessagesToAll_result_success = P.maybe (commitSendMessagesToAll_result_success default_CommitSendMessagesToAll_result) (\(_,_val3722) -> (case _val3722 of {T.TList _ _val3723 -> (Vector.fromList $ P.map (\_v3724 -> (case _v3724 of {T.TStruct _val3725 -> (to_SendBuddyMessageResult (T.TStruct _val3725)); _ -> P.error "wrong type"})) _val3723); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  commitSendMessagesToAll_result_e = P.maybe (P.Nothing) (\(_,_val3722) -> P.Just (case _val3722 of {T.TStruct _val3726 -> (to_TalkException (T.TStruct _val3726)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_CommitSendMessagesToAll_result _ = P.error "not a struct"
read_CommitSendMessagesToAll_result :: T.Protocol p => p -> P.IO CommitSendMessagesToAll_result
read_CommitSendMessagesToAll_result iprot = to_CommitSendMessagesToAll_result <$> T.readVal iprot (T.T_STRUCT typemap_CommitSendMessagesToAll_result)
decode_CommitSendMessagesToAll_result :: T.StatelessProtocol p => p -> LBS.ByteString -> CommitSendMessagesToAll_result
decode_CommitSendMessagesToAll_result iprot bs = to_CommitSendMessagesToAll_result $ T.deserializeVal iprot (T.T_STRUCT typemap_CommitSendMessagesToAll_result) bs
typemap_CommitSendMessagesToAll_result :: T.TypeMap
typemap_CommitSendMessagesToAll_result = Map.fromList [(0,("success",(T.T_LIST (T.T_STRUCT typemap_SendBuddyMessageResult)))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_CommitSendMessagesToAll_result :: CommitSendMessagesToAll_result
default_CommitSendMessagesToAll_result = CommitSendMessagesToAll_result{
  commitSendMessagesToAll_result_success = Vector.empty,
  commitSendMessagesToAll_result_e = P.Nothing}
data CommitSendMessagesToMids_args = CommitSendMessagesToMids_args  { commitSendMessagesToMids_args_requestIdList :: (Vector.Vector LT.Text)
  , commitSendMessagesToMids_args_mids :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable CommitSendMessagesToMids_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` commitSendMessagesToMids_args_requestIdList record   `H.hashWithSalt` commitSendMessagesToMids_args_mids record  
instance QC.Arbitrary CommitSendMessagesToMids_args where 
  arbitrary = M.liftM CommitSendMessagesToMids_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_CommitSendMessagesToMids_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_CommitSendMessagesToMids_args{commitSendMessagesToMids_args_requestIdList = commitSendMessagesToMids_args_requestIdList obj} then P.Nothing else P.Just $ default_CommitSendMessagesToMids_args{commitSendMessagesToMids_args_requestIdList = commitSendMessagesToMids_args_requestIdList obj}
    , if obj == default_CommitSendMessagesToMids_args{commitSendMessagesToMids_args_mids = commitSendMessagesToMids_args_mids obj} then P.Nothing else P.Just $ default_CommitSendMessagesToMids_args{commitSendMessagesToMids_args_mids = commitSendMessagesToMids_args_mids obj}
    ]
from_CommitSendMessagesToMids_args :: CommitSendMessagesToMids_args -> T.ThriftVal
from_CommitSendMessagesToMids_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3729 -> P.Just (1, ("requestIdList",T.TList T.T_STRING $ P.map (\_v3731 -> T.TString $ E.encodeUtf8 _v3731) $ Vector.toList _v3729))) $ commitSendMessagesToMids_args_requestIdList record
  , (\_v3729 -> P.Just (2, ("mids",T.TList T.T_STRING $ P.map (\_v3733 -> T.TString $ E.encodeUtf8 _v3733) $ Vector.toList _v3729))) $ commitSendMessagesToMids_args_mids record
  ]
write_CommitSendMessagesToMids_args :: T.Protocol p => p -> CommitSendMessagesToMids_args -> P.IO ()
write_CommitSendMessagesToMids_args oprot record = T.writeVal oprot $ from_CommitSendMessagesToMids_args record
encode_CommitSendMessagesToMids_args :: T.StatelessProtocol p => p -> CommitSendMessagesToMids_args -> LBS.ByteString
encode_CommitSendMessagesToMids_args oprot record = T.serializeVal oprot $ from_CommitSendMessagesToMids_args record
to_CommitSendMessagesToMids_args :: T.ThriftVal -> CommitSendMessagesToMids_args
to_CommitSendMessagesToMids_args (T.TStruct fields) = CommitSendMessagesToMids_args{
  commitSendMessagesToMids_args_requestIdList = P.maybe (commitSendMessagesToMids_args_requestIdList default_CommitSendMessagesToMids_args) (\(_,_val3735) -> (case _val3735 of {T.TList _ _val3736 -> (Vector.fromList $ P.map (\_v3737 -> (case _v3737 of {T.TString _val3738 -> E.decodeUtf8 _val3738; _ -> P.error "wrong type"})) _val3736); _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  commitSendMessagesToMids_args_mids = P.maybe (commitSendMessagesToMids_args_mids default_CommitSendMessagesToMids_args) (\(_,_val3735) -> (case _val3735 of {T.TList _ _val3739 -> (Vector.fromList $ P.map (\_v3740 -> (case _v3740 of {T.TString _val3741 -> E.decodeUtf8 _val3741; _ -> P.error "wrong type"})) _val3739); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_CommitSendMessagesToMids_args _ = P.error "not a struct"
read_CommitSendMessagesToMids_args :: T.Protocol p => p -> P.IO CommitSendMessagesToMids_args
read_CommitSendMessagesToMids_args iprot = to_CommitSendMessagesToMids_args <$> T.readVal iprot (T.T_STRUCT typemap_CommitSendMessagesToMids_args)
decode_CommitSendMessagesToMids_args :: T.StatelessProtocol p => p -> LBS.ByteString -> CommitSendMessagesToMids_args
decode_CommitSendMessagesToMids_args iprot bs = to_CommitSendMessagesToMids_args $ T.deserializeVal iprot (T.T_STRUCT typemap_CommitSendMessagesToMids_args) bs
typemap_CommitSendMessagesToMids_args :: T.TypeMap
typemap_CommitSendMessagesToMids_args = Map.fromList [(1,("requestIdList",(T.T_LIST T.T_STRING))),(2,("mids",(T.T_LIST T.T_STRING)))]
default_CommitSendMessagesToMids_args :: CommitSendMessagesToMids_args
default_CommitSendMessagesToMids_args = CommitSendMessagesToMids_args{
  commitSendMessagesToMids_args_requestIdList = Vector.empty,
  commitSendMessagesToMids_args_mids = Vector.empty}
data CommitSendMessagesToMids_result = CommitSendMessagesToMids_result  { commitSendMessagesToMids_result_success :: (Vector.Vector SendBuddyMessageResult)
  , commitSendMessagesToMids_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable CommitSendMessagesToMids_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` commitSendMessagesToMids_result_success record   `H.hashWithSalt` commitSendMessagesToMids_result_e record  
instance QC.Arbitrary CommitSendMessagesToMids_result where 
  arbitrary = M.liftM CommitSendMessagesToMids_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_CommitSendMessagesToMids_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_CommitSendMessagesToMids_result{commitSendMessagesToMids_result_success = commitSendMessagesToMids_result_success obj} then P.Nothing else P.Just $ default_CommitSendMessagesToMids_result{commitSendMessagesToMids_result_success = commitSendMessagesToMids_result_success obj}
    , if obj == default_CommitSendMessagesToMids_result{commitSendMessagesToMids_result_e = commitSendMessagesToMids_result_e obj} then P.Nothing else P.Just $ default_CommitSendMessagesToMids_result{commitSendMessagesToMids_result_e = commitSendMessagesToMids_result_e obj}
    ]
from_CommitSendMessagesToMids_result :: CommitSendMessagesToMids_result -> T.ThriftVal
from_CommitSendMessagesToMids_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3744 -> (1, ("e",from_TalkException _v3744))) <$> commitSendMessagesToMids_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3744 -> P.Just (0, ("success",T.TList (T.T_STRUCT typemap_SendBuddyMessageResult) $ P.map (\_v3746 -> from_SendBuddyMessageResult _v3746) $ Vector.toList _v3744))) $ commitSendMessagesToMids_result_success record
    , (\_v3744 -> (1, ("e",from_TalkException _v3744))) <$> commitSendMessagesToMids_result_e record
    ]
    )
write_CommitSendMessagesToMids_result :: T.Protocol p => p -> CommitSendMessagesToMids_result -> P.IO ()
write_CommitSendMessagesToMids_result oprot record = T.writeVal oprot $ from_CommitSendMessagesToMids_result record
encode_CommitSendMessagesToMids_result :: T.StatelessProtocol p => p -> CommitSendMessagesToMids_result -> LBS.ByteString
encode_CommitSendMessagesToMids_result oprot record = T.serializeVal oprot $ from_CommitSendMessagesToMids_result record
to_CommitSendMessagesToMids_result :: T.ThriftVal -> CommitSendMessagesToMids_result
to_CommitSendMessagesToMids_result (T.TStruct fields) = CommitSendMessagesToMids_result{
  commitSendMessagesToMids_result_success = P.maybe (commitSendMessagesToMids_result_success default_CommitSendMessagesToMids_result) (\(_,_val3748) -> (case _val3748 of {T.TList _ _val3749 -> (Vector.fromList $ P.map (\_v3750 -> (case _v3750 of {T.TStruct _val3751 -> (to_SendBuddyMessageResult (T.TStruct _val3751)); _ -> P.error "wrong type"})) _val3749); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  commitSendMessagesToMids_result_e = P.maybe (P.Nothing) (\(_,_val3748) -> P.Just (case _val3748 of {T.TStruct _val3752 -> (to_TalkException (T.TStruct _val3752)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_CommitSendMessagesToMids_result _ = P.error "not a struct"
read_CommitSendMessagesToMids_result :: T.Protocol p => p -> P.IO CommitSendMessagesToMids_result
read_CommitSendMessagesToMids_result iprot = to_CommitSendMessagesToMids_result <$> T.readVal iprot (T.T_STRUCT typemap_CommitSendMessagesToMids_result)
decode_CommitSendMessagesToMids_result :: T.StatelessProtocol p => p -> LBS.ByteString -> CommitSendMessagesToMids_result
decode_CommitSendMessagesToMids_result iprot bs = to_CommitSendMessagesToMids_result $ T.deserializeVal iprot (T.T_STRUCT typemap_CommitSendMessagesToMids_result) bs
typemap_CommitSendMessagesToMids_result :: T.TypeMap
typemap_CommitSendMessagesToMids_result = Map.fromList [(0,("success",(T.T_LIST (T.T_STRUCT typemap_SendBuddyMessageResult)))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_CommitSendMessagesToMids_result :: CommitSendMessagesToMids_result
default_CommitSendMessagesToMids_result = CommitSendMessagesToMids_result{
  commitSendMessagesToMids_result_success = Vector.empty,
  commitSendMessagesToMids_result_e = P.Nothing}
data ContainsBuddyMember_args = ContainsBuddyMember_args  { containsBuddyMember_args_requestId :: LT.Text
  , containsBuddyMember_args_userMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable ContainsBuddyMember_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` containsBuddyMember_args_requestId record   `H.hashWithSalt` containsBuddyMember_args_userMid record  
instance QC.Arbitrary ContainsBuddyMember_args where 
  arbitrary = M.liftM ContainsBuddyMember_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_ContainsBuddyMember_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_ContainsBuddyMember_args{containsBuddyMember_args_requestId = containsBuddyMember_args_requestId obj} then P.Nothing else P.Just $ default_ContainsBuddyMember_args{containsBuddyMember_args_requestId = containsBuddyMember_args_requestId obj}
    , if obj == default_ContainsBuddyMember_args{containsBuddyMember_args_userMid = containsBuddyMember_args_userMid obj} then P.Nothing else P.Just $ default_ContainsBuddyMember_args{containsBuddyMember_args_userMid = containsBuddyMember_args_userMid obj}
    ]
from_ContainsBuddyMember_args :: ContainsBuddyMember_args -> T.ThriftVal
from_ContainsBuddyMember_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3755 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v3755))) $ containsBuddyMember_args_requestId record
  , (\_v3755 -> P.Just (2, ("userMid",T.TString $ E.encodeUtf8 _v3755))) $ containsBuddyMember_args_userMid record
  ]
write_ContainsBuddyMember_args :: T.Protocol p => p -> ContainsBuddyMember_args -> P.IO ()
write_ContainsBuddyMember_args oprot record = T.writeVal oprot $ from_ContainsBuddyMember_args record
encode_ContainsBuddyMember_args :: T.StatelessProtocol p => p -> ContainsBuddyMember_args -> LBS.ByteString
encode_ContainsBuddyMember_args oprot record = T.serializeVal oprot $ from_ContainsBuddyMember_args record
to_ContainsBuddyMember_args :: T.ThriftVal -> ContainsBuddyMember_args
to_ContainsBuddyMember_args (T.TStruct fields) = ContainsBuddyMember_args{
  containsBuddyMember_args_requestId = P.maybe (containsBuddyMember_args_requestId default_ContainsBuddyMember_args) (\(_,_val3757) -> (case _val3757 of {T.TString _val3758 -> E.decodeUtf8 _val3758; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  containsBuddyMember_args_userMid = P.maybe (containsBuddyMember_args_userMid default_ContainsBuddyMember_args) (\(_,_val3757) -> (case _val3757 of {T.TString _val3759 -> E.decodeUtf8 _val3759; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_ContainsBuddyMember_args _ = P.error "not a struct"
read_ContainsBuddyMember_args :: T.Protocol p => p -> P.IO ContainsBuddyMember_args
read_ContainsBuddyMember_args iprot = to_ContainsBuddyMember_args <$> T.readVal iprot (T.T_STRUCT typemap_ContainsBuddyMember_args)
decode_ContainsBuddyMember_args :: T.StatelessProtocol p => p -> LBS.ByteString -> ContainsBuddyMember_args
decode_ContainsBuddyMember_args iprot bs = to_ContainsBuddyMember_args $ T.deserializeVal iprot (T.T_STRUCT typemap_ContainsBuddyMember_args) bs
typemap_ContainsBuddyMember_args :: T.TypeMap
typemap_ContainsBuddyMember_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("userMid",T.T_STRING))]
default_ContainsBuddyMember_args :: ContainsBuddyMember_args
default_ContainsBuddyMember_args = ContainsBuddyMember_args{
  containsBuddyMember_args_requestId = "",
  containsBuddyMember_args_userMid = ""}
data ContainsBuddyMember_result = ContainsBuddyMember_result  { containsBuddyMember_result_success :: P.Bool
  , containsBuddyMember_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable ContainsBuddyMember_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` containsBuddyMember_result_success record   `H.hashWithSalt` containsBuddyMember_result_e record  
instance QC.Arbitrary ContainsBuddyMember_result where 
  arbitrary = M.liftM ContainsBuddyMember_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_ContainsBuddyMember_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_ContainsBuddyMember_result{containsBuddyMember_result_success = containsBuddyMember_result_success obj} then P.Nothing else P.Just $ default_ContainsBuddyMember_result{containsBuddyMember_result_success = containsBuddyMember_result_success obj}
    , if obj == default_ContainsBuddyMember_result{containsBuddyMember_result_e = containsBuddyMember_result_e obj} then P.Nothing else P.Just $ default_ContainsBuddyMember_result{containsBuddyMember_result_e = containsBuddyMember_result_e obj}
    ]
from_ContainsBuddyMember_result :: ContainsBuddyMember_result -> T.ThriftVal
from_ContainsBuddyMember_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3762 -> (1, ("e",from_TalkException _v3762))) <$> containsBuddyMember_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3762 -> P.Just (0, ("success",T.TBool _v3762))) $ containsBuddyMember_result_success record
    , (\_v3762 -> (1, ("e",from_TalkException _v3762))) <$> containsBuddyMember_result_e record
    ]
    )
write_ContainsBuddyMember_result :: T.Protocol p => p -> ContainsBuddyMember_result -> P.IO ()
write_ContainsBuddyMember_result oprot record = T.writeVal oprot $ from_ContainsBuddyMember_result record
encode_ContainsBuddyMember_result :: T.StatelessProtocol p => p -> ContainsBuddyMember_result -> LBS.ByteString
encode_ContainsBuddyMember_result oprot record = T.serializeVal oprot $ from_ContainsBuddyMember_result record
to_ContainsBuddyMember_result :: T.ThriftVal -> ContainsBuddyMember_result
to_ContainsBuddyMember_result (T.TStruct fields) = ContainsBuddyMember_result{
  containsBuddyMember_result_success = P.maybe (containsBuddyMember_result_success default_ContainsBuddyMember_result) (\(_,_val3764) -> (case _val3764 of {T.TBool _val3765 -> _val3765; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  containsBuddyMember_result_e = P.maybe (P.Nothing) (\(_,_val3764) -> P.Just (case _val3764 of {T.TStruct _val3766 -> (to_TalkException (T.TStruct _val3766)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_ContainsBuddyMember_result _ = P.error "not a struct"
read_ContainsBuddyMember_result :: T.Protocol p => p -> P.IO ContainsBuddyMember_result
read_ContainsBuddyMember_result iprot = to_ContainsBuddyMember_result <$> T.readVal iprot (T.T_STRUCT typemap_ContainsBuddyMember_result)
decode_ContainsBuddyMember_result :: T.StatelessProtocol p => p -> LBS.ByteString -> ContainsBuddyMember_result
decode_ContainsBuddyMember_result iprot bs = to_ContainsBuddyMember_result $ T.deserializeVal iprot (T.T_STRUCT typemap_ContainsBuddyMember_result) bs
typemap_ContainsBuddyMember_result :: T.TypeMap
typemap_ContainsBuddyMember_result = Map.fromList [(0,("success",T.T_BOOL)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_ContainsBuddyMember_result :: ContainsBuddyMember_result
default_ContainsBuddyMember_result = ContainsBuddyMember_result{
  containsBuddyMember_result_success = P.False,
  containsBuddyMember_result_e = P.Nothing}
data DownloadMessageContent_args = DownloadMessageContent_args  { downloadMessageContent_args_requestId :: LT.Text
  , downloadMessageContent_args_messageId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable DownloadMessageContent_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` downloadMessageContent_args_requestId record   `H.hashWithSalt` downloadMessageContent_args_messageId record  
instance QC.Arbitrary DownloadMessageContent_args where 
  arbitrary = M.liftM DownloadMessageContent_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_DownloadMessageContent_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_DownloadMessageContent_args{downloadMessageContent_args_requestId = downloadMessageContent_args_requestId obj} then P.Nothing else P.Just $ default_DownloadMessageContent_args{downloadMessageContent_args_requestId = downloadMessageContent_args_requestId obj}
    , if obj == default_DownloadMessageContent_args{downloadMessageContent_args_messageId = downloadMessageContent_args_messageId obj} then P.Nothing else P.Just $ default_DownloadMessageContent_args{downloadMessageContent_args_messageId = downloadMessageContent_args_messageId obj}
    ]
from_DownloadMessageContent_args :: DownloadMessageContent_args -> T.ThriftVal
from_DownloadMessageContent_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3769 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v3769))) $ downloadMessageContent_args_requestId record
  , (\_v3769 -> P.Just (2, ("messageId",T.TString $ E.encodeUtf8 _v3769))) $ downloadMessageContent_args_messageId record
  ]
write_DownloadMessageContent_args :: T.Protocol p => p -> DownloadMessageContent_args -> P.IO ()
write_DownloadMessageContent_args oprot record = T.writeVal oprot $ from_DownloadMessageContent_args record
encode_DownloadMessageContent_args :: T.StatelessProtocol p => p -> DownloadMessageContent_args -> LBS.ByteString
encode_DownloadMessageContent_args oprot record = T.serializeVal oprot $ from_DownloadMessageContent_args record
to_DownloadMessageContent_args :: T.ThriftVal -> DownloadMessageContent_args
to_DownloadMessageContent_args (T.TStruct fields) = DownloadMessageContent_args{
  downloadMessageContent_args_requestId = P.maybe (downloadMessageContent_args_requestId default_DownloadMessageContent_args) (\(_,_val3771) -> (case _val3771 of {T.TString _val3772 -> E.decodeUtf8 _val3772; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  downloadMessageContent_args_messageId = P.maybe (downloadMessageContent_args_messageId default_DownloadMessageContent_args) (\(_,_val3771) -> (case _val3771 of {T.TString _val3773 -> E.decodeUtf8 _val3773; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_DownloadMessageContent_args _ = P.error "not a struct"
read_DownloadMessageContent_args :: T.Protocol p => p -> P.IO DownloadMessageContent_args
read_DownloadMessageContent_args iprot = to_DownloadMessageContent_args <$> T.readVal iprot (T.T_STRUCT typemap_DownloadMessageContent_args)
decode_DownloadMessageContent_args :: T.StatelessProtocol p => p -> LBS.ByteString -> DownloadMessageContent_args
decode_DownloadMessageContent_args iprot bs = to_DownloadMessageContent_args $ T.deserializeVal iprot (T.T_STRUCT typemap_DownloadMessageContent_args) bs
typemap_DownloadMessageContent_args :: T.TypeMap
typemap_DownloadMessageContent_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("messageId",T.T_STRING))]
default_DownloadMessageContent_args :: DownloadMessageContent_args
default_DownloadMessageContent_args = DownloadMessageContent_args{
  downloadMessageContent_args_requestId = "",
  downloadMessageContent_args_messageId = ""}
data DownloadMessageContent_result = DownloadMessageContent_result  { downloadMessageContent_result_success :: LBS.ByteString
  , downloadMessageContent_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable DownloadMessageContent_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` downloadMessageContent_result_success record   `H.hashWithSalt` downloadMessageContent_result_e record  
instance QC.Arbitrary DownloadMessageContent_result where 
  arbitrary = M.liftM DownloadMessageContent_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_DownloadMessageContent_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_DownloadMessageContent_result{downloadMessageContent_result_success = downloadMessageContent_result_success obj} then P.Nothing else P.Just $ default_DownloadMessageContent_result{downloadMessageContent_result_success = downloadMessageContent_result_success obj}
    , if obj == default_DownloadMessageContent_result{downloadMessageContent_result_e = downloadMessageContent_result_e obj} then P.Nothing else P.Just $ default_DownloadMessageContent_result{downloadMessageContent_result_e = downloadMessageContent_result_e obj}
    ]
from_DownloadMessageContent_result :: DownloadMessageContent_result -> T.ThriftVal
from_DownloadMessageContent_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3776 -> (1, ("e",from_TalkException _v3776))) <$> downloadMessageContent_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3776 -> P.Just (0, ("success",T.TBinary _v3776))) $ downloadMessageContent_result_success record
    , (\_v3776 -> (1, ("e",from_TalkException _v3776))) <$> downloadMessageContent_result_e record
    ]
    )
write_DownloadMessageContent_result :: T.Protocol p => p -> DownloadMessageContent_result -> P.IO ()
write_DownloadMessageContent_result oprot record = T.writeVal oprot $ from_DownloadMessageContent_result record
encode_DownloadMessageContent_result :: T.StatelessProtocol p => p -> DownloadMessageContent_result -> LBS.ByteString
encode_DownloadMessageContent_result oprot record = T.serializeVal oprot $ from_DownloadMessageContent_result record
to_DownloadMessageContent_result :: T.ThriftVal -> DownloadMessageContent_result
to_DownloadMessageContent_result (T.TStruct fields) = DownloadMessageContent_result{
  downloadMessageContent_result_success = P.maybe (downloadMessageContent_result_success default_DownloadMessageContent_result) (\(_,_val3778) -> (case _val3778 of {T.TBinary _val3779 -> _val3779; T.TString _val3779 -> _val3779; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  downloadMessageContent_result_e = P.maybe (P.Nothing) (\(_,_val3778) -> P.Just (case _val3778 of {T.TStruct _val3780 -> (to_TalkException (T.TStruct _val3780)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_DownloadMessageContent_result _ = P.error "not a struct"
read_DownloadMessageContent_result :: T.Protocol p => p -> P.IO DownloadMessageContent_result
read_DownloadMessageContent_result iprot = to_DownloadMessageContent_result <$> T.readVal iprot (T.T_STRUCT typemap_DownloadMessageContent_result)
decode_DownloadMessageContent_result :: T.StatelessProtocol p => p -> LBS.ByteString -> DownloadMessageContent_result
decode_DownloadMessageContent_result iprot bs = to_DownloadMessageContent_result $ T.deserializeVal iprot (T.T_STRUCT typemap_DownloadMessageContent_result) bs
typemap_DownloadMessageContent_result :: T.TypeMap
typemap_DownloadMessageContent_result = Map.fromList [(0,("success",T.T_BINARY)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_DownloadMessageContent_result :: DownloadMessageContent_result
default_DownloadMessageContent_result = DownloadMessageContent_result{
  downloadMessageContent_result_success = "",
  downloadMessageContent_result_e = P.Nothing}
data DownloadMessageContentPreview_args = DownloadMessageContentPreview_args  { downloadMessageContentPreview_args_requestId :: LT.Text
  , downloadMessageContentPreview_args_messageId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable DownloadMessageContentPreview_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` downloadMessageContentPreview_args_requestId record   `H.hashWithSalt` downloadMessageContentPreview_args_messageId record  
instance QC.Arbitrary DownloadMessageContentPreview_args where 
  arbitrary = M.liftM DownloadMessageContentPreview_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_DownloadMessageContentPreview_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_DownloadMessageContentPreview_args{downloadMessageContentPreview_args_requestId = downloadMessageContentPreview_args_requestId obj} then P.Nothing else P.Just $ default_DownloadMessageContentPreview_args{downloadMessageContentPreview_args_requestId = downloadMessageContentPreview_args_requestId obj}
    , if obj == default_DownloadMessageContentPreview_args{downloadMessageContentPreview_args_messageId = downloadMessageContentPreview_args_messageId obj} then P.Nothing else P.Just $ default_DownloadMessageContentPreview_args{downloadMessageContentPreview_args_messageId = downloadMessageContentPreview_args_messageId obj}
    ]
from_DownloadMessageContentPreview_args :: DownloadMessageContentPreview_args -> T.ThriftVal
from_DownloadMessageContentPreview_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3783 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v3783))) $ downloadMessageContentPreview_args_requestId record
  , (\_v3783 -> P.Just (2, ("messageId",T.TString $ E.encodeUtf8 _v3783))) $ downloadMessageContentPreview_args_messageId record
  ]
write_DownloadMessageContentPreview_args :: T.Protocol p => p -> DownloadMessageContentPreview_args -> P.IO ()
write_DownloadMessageContentPreview_args oprot record = T.writeVal oprot $ from_DownloadMessageContentPreview_args record
encode_DownloadMessageContentPreview_args :: T.StatelessProtocol p => p -> DownloadMessageContentPreview_args -> LBS.ByteString
encode_DownloadMessageContentPreview_args oprot record = T.serializeVal oprot $ from_DownloadMessageContentPreview_args record
to_DownloadMessageContentPreview_args :: T.ThriftVal -> DownloadMessageContentPreview_args
to_DownloadMessageContentPreview_args (T.TStruct fields) = DownloadMessageContentPreview_args{
  downloadMessageContentPreview_args_requestId = P.maybe (downloadMessageContentPreview_args_requestId default_DownloadMessageContentPreview_args) (\(_,_val3785) -> (case _val3785 of {T.TString _val3786 -> E.decodeUtf8 _val3786; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  downloadMessageContentPreview_args_messageId = P.maybe (downloadMessageContentPreview_args_messageId default_DownloadMessageContentPreview_args) (\(_,_val3785) -> (case _val3785 of {T.TString _val3787 -> E.decodeUtf8 _val3787; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_DownloadMessageContentPreview_args _ = P.error "not a struct"
read_DownloadMessageContentPreview_args :: T.Protocol p => p -> P.IO DownloadMessageContentPreview_args
read_DownloadMessageContentPreview_args iprot = to_DownloadMessageContentPreview_args <$> T.readVal iprot (T.T_STRUCT typemap_DownloadMessageContentPreview_args)
decode_DownloadMessageContentPreview_args :: T.StatelessProtocol p => p -> LBS.ByteString -> DownloadMessageContentPreview_args
decode_DownloadMessageContentPreview_args iprot bs = to_DownloadMessageContentPreview_args $ T.deserializeVal iprot (T.T_STRUCT typemap_DownloadMessageContentPreview_args) bs
typemap_DownloadMessageContentPreview_args :: T.TypeMap
typemap_DownloadMessageContentPreview_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("messageId",T.T_STRING))]
default_DownloadMessageContentPreview_args :: DownloadMessageContentPreview_args
default_DownloadMessageContentPreview_args = DownloadMessageContentPreview_args{
  downloadMessageContentPreview_args_requestId = "",
  downloadMessageContentPreview_args_messageId = ""}
data DownloadMessageContentPreview_result = DownloadMessageContentPreview_result  { downloadMessageContentPreview_result_success :: LBS.ByteString
  , downloadMessageContentPreview_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable DownloadMessageContentPreview_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` downloadMessageContentPreview_result_success record   `H.hashWithSalt` downloadMessageContentPreview_result_e record  
instance QC.Arbitrary DownloadMessageContentPreview_result where 
  arbitrary = M.liftM DownloadMessageContentPreview_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_DownloadMessageContentPreview_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_DownloadMessageContentPreview_result{downloadMessageContentPreview_result_success = downloadMessageContentPreview_result_success obj} then P.Nothing else P.Just $ default_DownloadMessageContentPreview_result{downloadMessageContentPreview_result_success = downloadMessageContentPreview_result_success obj}
    , if obj == default_DownloadMessageContentPreview_result{downloadMessageContentPreview_result_e = downloadMessageContentPreview_result_e obj} then P.Nothing else P.Just $ default_DownloadMessageContentPreview_result{downloadMessageContentPreview_result_e = downloadMessageContentPreview_result_e obj}
    ]
from_DownloadMessageContentPreview_result :: DownloadMessageContentPreview_result -> T.ThriftVal
from_DownloadMessageContentPreview_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3790 -> (1, ("e",from_TalkException _v3790))) <$> downloadMessageContentPreview_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3790 -> P.Just (0, ("success",T.TBinary _v3790))) $ downloadMessageContentPreview_result_success record
    , (\_v3790 -> (1, ("e",from_TalkException _v3790))) <$> downloadMessageContentPreview_result_e record
    ]
    )
write_DownloadMessageContentPreview_result :: T.Protocol p => p -> DownloadMessageContentPreview_result -> P.IO ()
write_DownloadMessageContentPreview_result oprot record = T.writeVal oprot $ from_DownloadMessageContentPreview_result record
encode_DownloadMessageContentPreview_result :: T.StatelessProtocol p => p -> DownloadMessageContentPreview_result -> LBS.ByteString
encode_DownloadMessageContentPreview_result oprot record = T.serializeVal oprot $ from_DownloadMessageContentPreview_result record
to_DownloadMessageContentPreview_result :: T.ThriftVal -> DownloadMessageContentPreview_result
to_DownloadMessageContentPreview_result (T.TStruct fields) = DownloadMessageContentPreview_result{
  downloadMessageContentPreview_result_success = P.maybe (downloadMessageContentPreview_result_success default_DownloadMessageContentPreview_result) (\(_,_val3792) -> (case _val3792 of {T.TBinary _val3793 -> _val3793; T.TString _val3793 -> _val3793; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  downloadMessageContentPreview_result_e = P.maybe (P.Nothing) (\(_,_val3792) -> P.Just (case _val3792 of {T.TStruct _val3794 -> (to_TalkException (T.TStruct _val3794)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_DownloadMessageContentPreview_result _ = P.error "not a struct"
read_DownloadMessageContentPreview_result :: T.Protocol p => p -> P.IO DownloadMessageContentPreview_result
read_DownloadMessageContentPreview_result iprot = to_DownloadMessageContentPreview_result <$> T.readVal iprot (T.T_STRUCT typemap_DownloadMessageContentPreview_result)
decode_DownloadMessageContentPreview_result :: T.StatelessProtocol p => p -> LBS.ByteString -> DownloadMessageContentPreview_result
decode_DownloadMessageContentPreview_result iprot bs = to_DownloadMessageContentPreview_result $ T.deserializeVal iprot (T.T_STRUCT typemap_DownloadMessageContentPreview_result) bs
typemap_DownloadMessageContentPreview_result :: T.TypeMap
typemap_DownloadMessageContentPreview_result = Map.fromList [(0,("success",T.T_BINARY)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_DownloadMessageContentPreview_result :: DownloadMessageContentPreview_result
default_DownloadMessageContentPreview_result = DownloadMessageContentPreview_result{
  downloadMessageContentPreview_result_success = "",
  downloadMessageContentPreview_result_e = P.Nothing}
data DownloadProfileImage_args = DownloadProfileImage_args  { downloadProfileImage_args_requestId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable DownloadProfileImage_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` downloadProfileImage_args_requestId record  
instance QC.Arbitrary DownloadProfileImage_args where 
  arbitrary = M.liftM DownloadProfileImage_args (QC.arbitrary)
  shrink obj | obj == default_DownloadProfileImage_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_DownloadProfileImage_args{downloadProfileImage_args_requestId = downloadProfileImage_args_requestId obj} then P.Nothing else P.Just $ default_DownloadProfileImage_args{downloadProfileImage_args_requestId = downloadProfileImage_args_requestId obj}
    ]
from_DownloadProfileImage_args :: DownloadProfileImage_args -> T.ThriftVal
from_DownloadProfileImage_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3797 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v3797))) $ downloadProfileImage_args_requestId record
  ]
write_DownloadProfileImage_args :: T.Protocol p => p -> DownloadProfileImage_args -> P.IO ()
write_DownloadProfileImage_args oprot record = T.writeVal oprot $ from_DownloadProfileImage_args record
encode_DownloadProfileImage_args :: T.StatelessProtocol p => p -> DownloadProfileImage_args -> LBS.ByteString
encode_DownloadProfileImage_args oprot record = T.serializeVal oprot $ from_DownloadProfileImage_args record
to_DownloadProfileImage_args :: T.ThriftVal -> DownloadProfileImage_args
to_DownloadProfileImage_args (T.TStruct fields) = DownloadProfileImage_args{
  downloadProfileImage_args_requestId = P.maybe (downloadProfileImage_args_requestId default_DownloadProfileImage_args) (\(_,_val3799) -> (case _val3799 of {T.TString _val3800 -> E.decodeUtf8 _val3800; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_DownloadProfileImage_args _ = P.error "not a struct"
read_DownloadProfileImage_args :: T.Protocol p => p -> P.IO DownloadProfileImage_args
read_DownloadProfileImage_args iprot = to_DownloadProfileImage_args <$> T.readVal iprot (T.T_STRUCT typemap_DownloadProfileImage_args)
decode_DownloadProfileImage_args :: T.StatelessProtocol p => p -> LBS.ByteString -> DownloadProfileImage_args
decode_DownloadProfileImage_args iprot bs = to_DownloadProfileImage_args $ T.deserializeVal iprot (T.T_STRUCT typemap_DownloadProfileImage_args) bs
typemap_DownloadProfileImage_args :: T.TypeMap
typemap_DownloadProfileImage_args = Map.fromList [(1,("requestId",T.T_STRING))]
default_DownloadProfileImage_args :: DownloadProfileImage_args
default_DownloadProfileImage_args = DownloadProfileImage_args{
  downloadProfileImage_args_requestId = ""}
data DownloadProfileImage_result = DownloadProfileImage_result  { downloadProfileImage_result_success :: LBS.ByteString
  , downloadProfileImage_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable DownloadProfileImage_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` downloadProfileImage_result_success record   `H.hashWithSalt` downloadProfileImage_result_e record  
instance QC.Arbitrary DownloadProfileImage_result where 
  arbitrary = M.liftM DownloadProfileImage_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_DownloadProfileImage_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_DownloadProfileImage_result{downloadProfileImage_result_success = downloadProfileImage_result_success obj} then P.Nothing else P.Just $ default_DownloadProfileImage_result{downloadProfileImage_result_success = downloadProfileImage_result_success obj}
    , if obj == default_DownloadProfileImage_result{downloadProfileImage_result_e = downloadProfileImage_result_e obj} then P.Nothing else P.Just $ default_DownloadProfileImage_result{downloadProfileImage_result_e = downloadProfileImage_result_e obj}
    ]
from_DownloadProfileImage_result :: DownloadProfileImage_result -> T.ThriftVal
from_DownloadProfileImage_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3803 -> (1, ("e",from_TalkException _v3803))) <$> downloadProfileImage_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3803 -> P.Just (0, ("success",T.TBinary _v3803))) $ downloadProfileImage_result_success record
    , (\_v3803 -> (1, ("e",from_TalkException _v3803))) <$> downloadProfileImage_result_e record
    ]
    )
write_DownloadProfileImage_result :: T.Protocol p => p -> DownloadProfileImage_result -> P.IO ()
write_DownloadProfileImage_result oprot record = T.writeVal oprot $ from_DownloadProfileImage_result record
encode_DownloadProfileImage_result :: T.StatelessProtocol p => p -> DownloadProfileImage_result -> LBS.ByteString
encode_DownloadProfileImage_result oprot record = T.serializeVal oprot $ from_DownloadProfileImage_result record
to_DownloadProfileImage_result :: T.ThriftVal -> DownloadProfileImage_result
to_DownloadProfileImage_result (T.TStruct fields) = DownloadProfileImage_result{
  downloadProfileImage_result_success = P.maybe (downloadProfileImage_result_success default_DownloadProfileImage_result) (\(_,_val3805) -> (case _val3805 of {T.TBinary _val3806 -> _val3806; T.TString _val3806 -> _val3806; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  downloadProfileImage_result_e = P.maybe (P.Nothing) (\(_,_val3805) -> P.Just (case _val3805 of {T.TStruct _val3807 -> (to_TalkException (T.TStruct _val3807)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_DownloadProfileImage_result _ = P.error "not a struct"
read_DownloadProfileImage_result :: T.Protocol p => p -> P.IO DownloadProfileImage_result
read_DownloadProfileImage_result iprot = to_DownloadProfileImage_result <$> T.readVal iprot (T.T_STRUCT typemap_DownloadProfileImage_result)
decode_DownloadProfileImage_result :: T.StatelessProtocol p => p -> LBS.ByteString -> DownloadProfileImage_result
decode_DownloadProfileImage_result iprot bs = to_DownloadProfileImage_result $ T.deserializeVal iprot (T.T_STRUCT typemap_DownloadProfileImage_result) bs
typemap_DownloadProfileImage_result :: T.TypeMap
typemap_DownloadProfileImage_result = Map.fromList [(0,("success",T.T_BINARY)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_DownloadProfileImage_result :: DownloadProfileImage_result
default_DownloadProfileImage_result = DownloadProfileImage_result{
  downloadProfileImage_result_success = "",
  downloadProfileImage_result_e = P.Nothing}
data DownloadProfileImagePreview_args = DownloadProfileImagePreview_args  { downloadProfileImagePreview_args_requestId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable DownloadProfileImagePreview_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` downloadProfileImagePreview_args_requestId record  
instance QC.Arbitrary DownloadProfileImagePreview_args where 
  arbitrary = M.liftM DownloadProfileImagePreview_args (QC.arbitrary)
  shrink obj | obj == default_DownloadProfileImagePreview_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_DownloadProfileImagePreview_args{downloadProfileImagePreview_args_requestId = downloadProfileImagePreview_args_requestId obj} then P.Nothing else P.Just $ default_DownloadProfileImagePreview_args{downloadProfileImagePreview_args_requestId = downloadProfileImagePreview_args_requestId obj}
    ]
from_DownloadProfileImagePreview_args :: DownloadProfileImagePreview_args -> T.ThriftVal
from_DownloadProfileImagePreview_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3810 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v3810))) $ downloadProfileImagePreview_args_requestId record
  ]
write_DownloadProfileImagePreview_args :: T.Protocol p => p -> DownloadProfileImagePreview_args -> P.IO ()
write_DownloadProfileImagePreview_args oprot record = T.writeVal oprot $ from_DownloadProfileImagePreview_args record
encode_DownloadProfileImagePreview_args :: T.StatelessProtocol p => p -> DownloadProfileImagePreview_args -> LBS.ByteString
encode_DownloadProfileImagePreview_args oprot record = T.serializeVal oprot $ from_DownloadProfileImagePreview_args record
to_DownloadProfileImagePreview_args :: T.ThriftVal -> DownloadProfileImagePreview_args
to_DownloadProfileImagePreview_args (T.TStruct fields) = DownloadProfileImagePreview_args{
  downloadProfileImagePreview_args_requestId = P.maybe (downloadProfileImagePreview_args_requestId default_DownloadProfileImagePreview_args) (\(_,_val3812) -> (case _val3812 of {T.TString _val3813 -> E.decodeUtf8 _val3813; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_DownloadProfileImagePreview_args _ = P.error "not a struct"
read_DownloadProfileImagePreview_args :: T.Protocol p => p -> P.IO DownloadProfileImagePreview_args
read_DownloadProfileImagePreview_args iprot = to_DownloadProfileImagePreview_args <$> T.readVal iprot (T.T_STRUCT typemap_DownloadProfileImagePreview_args)
decode_DownloadProfileImagePreview_args :: T.StatelessProtocol p => p -> LBS.ByteString -> DownloadProfileImagePreview_args
decode_DownloadProfileImagePreview_args iprot bs = to_DownloadProfileImagePreview_args $ T.deserializeVal iprot (T.T_STRUCT typemap_DownloadProfileImagePreview_args) bs
typemap_DownloadProfileImagePreview_args :: T.TypeMap
typemap_DownloadProfileImagePreview_args = Map.fromList [(1,("requestId",T.T_STRING))]
default_DownloadProfileImagePreview_args :: DownloadProfileImagePreview_args
default_DownloadProfileImagePreview_args = DownloadProfileImagePreview_args{
  downloadProfileImagePreview_args_requestId = ""}
data DownloadProfileImagePreview_result = DownloadProfileImagePreview_result  { downloadProfileImagePreview_result_success :: LBS.ByteString
  , downloadProfileImagePreview_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable DownloadProfileImagePreview_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` downloadProfileImagePreview_result_success record   `H.hashWithSalt` downloadProfileImagePreview_result_e record  
instance QC.Arbitrary DownloadProfileImagePreview_result where 
  arbitrary = M.liftM DownloadProfileImagePreview_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_DownloadProfileImagePreview_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_DownloadProfileImagePreview_result{downloadProfileImagePreview_result_success = downloadProfileImagePreview_result_success obj} then P.Nothing else P.Just $ default_DownloadProfileImagePreview_result{downloadProfileImagePreview_result_success = downloadProfileImagePreview_result_success obj}
    , if obj == default_DownloadProfileImagePreview_result{downloadProfileImagePreview_result_e = downloadProfileImagePreview_result_e obj} then P.Nothing else P.Just $ default_DownloadProfileImagePreview_result{downloadProfileImagePreview_result_e = downloadProfileImagePreview_result_e obj}
    ]
from_DownloadProfileImagePreview_result :: DownloadProfileImagePreview_result -> T.ThriftVal
from_DownloadProfileImagePreview_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3816 -> (1, ("e",from_TalkException _v3816))) <$> downloadProfileImagePreview_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3816 -> P.Just (0, ("success",T.TBinary _v3816))) $ downloadProfileImagePreview_result_success record
    , (\_v3816 -> (1, ("e",from_TalkException _v3816))) <$> downloadProfileImagePreview_result_e record
    ]
    )
write_DownloadProfileImagePreview_result :: T.Protocol p => p -> DownloadProfileImagePreview_result -> P.IO ()
write_DownloadProfileImagePreview_result oprot record = T.writeVal oprot $ from_DownloadProfileImagePreview_result record
encode_DownloadProfileImagePreview_result :: T.StatelessProtocol p => p -> DownloadProfileImagePreview_result -> LBS.ByteString
encode_DownloadProfileImagePreview_result oprot record = T.serializeVal oprot $ from_DownloadProfileImagePreview_result record
to_DownloadProfileImagePreview_result :: T.ThriftVal -> DownloadProfileImagePreview_result
to_DownloadProfileImagePreview_result (T.TStruct fields) = DownloadProfileImagePreview_result{
  downloadProfileImagePreview_result_success = P.maybe (downloadProfileImagePreview_result_success default_DownloadProfileImagePreview_result) (\(_,_val3818) -> (case _val3818 of {T.TBinary _val3819 -> _val3819; T.TString _val3819 -> _val3819; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  downloadProfileImagePreview_result_e = P.maybe (P.Nothing) (\(_,_val3818) -> P.Just (case _val3818 of {T.TStruct _val3820 -> (to_TalkException (T.TStruct _val3820)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_DownloadProfileImagePreview_result _ = P.error "not a struct"
read_DownloadProfileImagePreview_result :: T.Protocol p => p -> P.IO DownloadProfileImagePreview_result
read_DownloadProfileImagePreview_result iprot = to_DownloadProfileImagePreview_result <$> T.readVal iprot (T.T_STRUCT typemap_DownloadProfileImagePreview_result)
decode_DownloadProfileImagePreview_result :: T.StatelessProtocol p => p -> LBS.ByteString -> DownloadProfileImagePreview_result
decode_DownloadProfileImagePreview_result iprot bs = to_DownloadProfileImagePreview_result $ T.deserializeVal iprot (T.T_STRUCT typemap_DownloadProfileImagePreview_result) bs
typemap_DownloadProfileImagePreview_result :: T.TypeMap
typemap_DownloadProfileImagePreview_result = Map.fromList [(0,("success",T.T_BINARY)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_DownloadProfileImagePreview_result :: DownloadProfileImagePreview_result
default_DownloadProfileImagePreview_result = DownloadProfileImagePreview_result{
  downloadProfileImagePreview_result_success = "",
  downloadProfileImagePreview_result_e = P.Nothing}
data GetActiveMemberCountByBuddyMid_args = GetActiveMemberCountByBuddyMid_args  { getActiveMemberCountByBuddyMid_args_buddyMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetActiveMemberCountByBuddyMid_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getActiveMemberCountByBuddyMid_args_buddyMid record  
instance QC.Arbitrary GetActiveMemberCountByBuddyMid_args where 
  arbitrary = M.liftM GetActiveMemberCountByBuddyMid_args (QC.arbitrary)
  shrink obj | obj == default_GetActiveMemberCountByBuddyMid_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetActiveMemberCountByBuddyMid_args{getActiveMemberCountByBuddyMid_args_buddyMid = getActiveMemberCountByBuddyMid_args_buddyMid obj} then P.Nothing else P.Just $ default_GetActiveMemberCountByBuddyMid_args{getActiveMemberCountByBuddyMid_args_buddyMid = getActiveMemberCountByBuddyMid_args_buddyMid obj}
    ]
from_GetActiveMemberCountByBuddyMid_args :: GetActiveMemberCountByBuddyMid_args -> T.ThriftVal
from_GetActiveMemberCountByBuddyMid_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3823 -> P.Just (2, ("buddyMid",T.TString $ E.encodeUtf8 _v3823))) $ getActiveMemberCountByBuddyMid_args_buddyMid record
  ]
write_GetActiveMemberCountByBuddyMid_args :: T.Protocol p => p -> GetActiveMemberCountByBuddyMid_args -> P.IO ()
write_GetActiveMemberCountByBuddyMid_args oprot record = T.writeVal oprot $ from_GetActiveMemberCountByBuddyMid_args record
encode_GetActiveMemberCountByBuddyMid_args :: T.StatelessProtocol p => p -> GetActiveMemberCountByBuddyMid_args -> LBS.ByteString
encode_GetActiveMemberCountByBuddyMid_args oprot record = T.serializeVal oprot $ from_GetActiveMemberCountByBuddyMid_args record
to_GetActiveMemberCountByBuddyMid_args :: T.ThriftVal -> GetActiveMemberCountByBuddyMid_args
to_GetActiveMemberCountByBuddyMid_args (T.TStruct fields) = GetActiveMemberCountByBuddyMid_args{
  getActiveMemberCountByBuddyMid_args_buddyMid = P.maybe (getActiveMemberCountByBuddyMid_args_buddyMid default_GetActiveMemberCountByBuddyMid_args) (\(_,_val3825) -> (case _val3825 of {T.TString _val3826 -> E.decodeUtf8 _val3826; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_GetActiveMemberCountByBuddyMid_args _ = P.error "not a struct"
read_GetActiveMemberCountByBuddyMid_args :: T.Protocol p => p -> P.IO GetActiveMemberCountByBuddyMid_args
read_GetActiveMemberCountByBuddyMid_args iprot = to_GetActiveMemberCountByBuddyMid_args <$> T.readVal iprot (T.T_STRUCT typemap_GetActiveMemberCountByBuddyMid_args)
decode_GetActiveMemberCountByBuddyMid_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetActiveMemberCountByBuddyMid_args
decode_GetActiveMemberCountByBuddyMid_args iprot bs = to_GetActiveMemberCountByBuddyMid_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetActiveMemberCountByBuddyMid_args) bs
typemap_GetActiveMemberCountByBuddyMid_args :: T.TypeMap
typemap_GetActiveMemberCountByBuddyMid_args = Map.fromList [(2,("buddyMid",T.T_STRING))]
default_GetActiveMemberCountByBuddyMid_args :: GetActiveMemberCountByBuddyMid_args
default_GetActiveMemberCountByBuddyMid_args = GetActiveMemberCountByBuddyMid_args{
  getActiveMemberCountByBuddyMid_args_buddyMid = ""}
data GetActiveMemberCountByBuddyMid_result = GetActiveMemberCountByBuddyMid_result  { getActiveMemberCountByBuddyMid_result_success :: I.Int64
  , getActiveMemberCountByBuddyMid_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetActiveMemberCountByBuddyMid_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getActiveMemberCountByBuddyMid_result_success record   `H.hashWithSalt` getActiveMemberCountByBuddyMid_result_e record  
instance QC.Arbitrary GetActiveMemberCountByBuddyMid_result where 
  arbitrary = M.liftM GetActiveMemberCountByBuddyMid_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetActiveMemberCountByBuddyMid_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetActiveMemberCountByBuddyMid_result{getActiveMemberCountByBuddyMid_result_success = getActiveMemberCountByBuddyMid_result_success obj} then P.Nothing else P.Just $ default_GetActiveMemberCountByBuddyMid_result{getActiveMemberCountByBuddyMid_result_success = getActiveMemberCountByBuddyMid_result_success obj}
    , if obj == default_GetActiveMemberCountByBuddyMid_result{getActiveMemberCountByBuddyMid_result_e = getActiveMemberCountByBuddyMid_result_e obj} then P.Nothing else P.Just $ default_GetActiveMemberCountByBuddyMid_result{getActiveMemberCountByBuddyMid_result_e = getActiveMemberCountByBuddyMid_result_e obj}
    ]
from_GetActiveMemberCountByBuddyMid_result :: GetActiveMemberCountByBuddyMid_result -> T.ThriftVal
from_GetActiveMemberCountByBuddyMid_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3829 -> (1, ("e",from_TalkException _v3829))) <$> getActiveMemberCountByBuddyMid_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3829 -> P.Just (0, ("success",T.TI64 _v3829))) $ getActiveMemberCountByBuddyMid_result_success record
    , (\_v3829 -> (1, ("e",from_TalkException _v3829))) <$> getActiveMemberCountByBuddyMid_result_e record
    ]
    )
write_GetActiveMemberCountByBuddyMid_result :: T.Protocol p => p -> GetActiveMemberCountByBuddyMid_result -> P.IO ()
write_GetActiveMemberCountByBuddyMid_result oprot record = T.writeVal oprot $ from_GetActiveMemberCountByBuddyMid_result record
encode_GetActiveMemberCountByBuddyMid_result :: T.StatelessProtocol p => p -> GetActiveMemberCountByBuddyMid_result -> LBS.ByteString
encode_GetActiveMemberCountByBuddyMid_result oprot record = T.serializeVal oprot $ from_GetActiveMemberCountByBuddyMid_result record
to_GetActiveMemberCountByBuddyMid_result :: T.ThriftVal -> GetActiveMemberCountByBuddyMid_result
to_GetActiveMemberCountByBuddyMid_result (T.TStruct fields) = GetActiveMemberCountByBuddyMid_result{
  getActiveMemberCountByBuddyMid_result_success = P.maybe (getActiveMemberCountByBuddyMid_result_success default_GetActiveMemberCountByBuddyMid_result) (\(_,_val3831) -> (case _val3831 of {T.TI64 _val3832 -> _val3832; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getActiveMemberCountByBuddyMid_result_e = P.maybe (P.Nothing) (\(_,_val3831) -> P.Just (case _val3831 of {T.TStruct _val3833 -> (to_TalkException (T.TStruct _val3833)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetActiveMemberCountByBuddyMid_result _ = P.error "not a struct"
read_GetActiveMemberCountByBuddyMid_result :: T.Protocol p => p -> P.IO GetActiveMemberCountByBuddyMid_result
read_GetActiveMemberCountByBuddyMid_result iprot = to_GetActiveMemberCountByBuddyMid_result <$> T.readVal iprot (T.T_STRUCT typemap_GetActiveMemberCountByBuddyMid_result)
decode_GetActiveMemberCountByBuddyMid_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetActiveMemberCountByBuddyMid_result
decode_GetActiveMemberCountByBuddyMid_result iprot bs = to_GetActiveMemberCountByBuddyMid_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetActiveMemberCountByBuddyMid_result) bs
typemap_GetActiveMemberCountByBuddyMid_result :: T.TypeMap
typemap_GetActiveMemberCountByBuddyMid_result = Map.fromList [(0,("success",T.T_I64)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetActiveMemberCountByBuddyMid_result :: GetActiveMemberCountByBuddyMid_result
default_GetActiveMemberCountByBuddyMid_result = GetActiveMemberCountByBuddyMid_result{
  getActiveMemberCountByBuddyMid_result_success = 0,
  getActiveMemberCountByBuddyMid_result_e = P.Nothing}
data GetActiveMemberMidsByBuddyMid_args = GetActiveMemberMidsByBuddyMid_args  { getActiveMemberMidsByBuddyMid_args_buddyMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetActiveMemberMidsByBuddyMid_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getActiveMemberMidsByBuddyMid_args_buddyMid record  
instance QC.Arbitrary GetActiveMemberMidsByBuddyMid_args where 
  arbitrary = M.liftM GetActiveMemberMidsByBuddyMid_args (QC.arbitrary)
  shrink obj | obj == default_GetActiveMemberMidsByBuddyMid_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetActiveMemberMidsByBuddyMid_args{getActiveMemberMidsByBuddyMid_args_buddyMid = getActiveMemberMidsByBuddyMid_args_buddyMid obj} then P.Nothing else P.Just $ default_GetActiveMemberMidsByBuddyMid_args{getActiveMemberMidsByBuddyMid_args_buddyMid = getActiveMemberMidsByBuddyMid_args_buddyMid obj}
    ]
from_GetActiveMemberMidsByBuddyMid_args :: GetActiveMemberMidsByBuddyMid_args -> T.ThriftVal
from_GetActiveMemberMidsByBuddyMid_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3836 -> P.Just (2, ("buddyMid",T.TString $ E.encodeUtf8 _v3836))) $ getActiveMemberMidsByBuddyMid_args_buddyMid record
  ]
write_GetActiveMemberMidsByBuddyMid_args :: T.Protocol p => p -> GetActiveMemberMidsByBuddyMid_args -> P.IO ()
write_GetActiveMemberMidsByBuddyMid_args oprot record = T.writeVal oprot $ from_GetActiveMemberMidsByBuddyMid_args record
encode_GetActiveMemberMidsByBuddyMid_args :: T.StatelessProtocol p => p -> GetActiveMemberMidsByBuddyMid_args -> LBS.ByteString
encode_GetActiveMemberMidsByBuddyMid_args oprot record = T.serializeVal oprot $ from_GetActiveMemberMidsByBuddyMid_args record
to_GetActiveMemberMidsByBuddyMid_args :: T.ThriftVal -> GetActiveMemberMidsByBuddyMid_args
to_GetActiveMemberMidsByBuddyMid_args (T.TStruct fields) = GetActiveMemberMidsByBuddyMid_args{
  getActiveMemberMidsByBuddyMid_args_buddyMid = P.maybe (getActiveMemberMidsByBuddyMid_args_buddyMid default_GetActiveMemberMidsByBuddyMid_args) (\(_,_val3838) -> (case _val3838 of {T.TString _val3839 -> E.decodeUtf8 _val3839; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_GetActiveMemberMidsByBuddyMid_args _ = P.error "not a struct"
read_GetActiveMemberMidsByBuddyMid_args :: T.Protocol p => p -> P.IO GetActiveMemberMidsByBuddyMid_args
read_GetActiveMemberMidsByBuddyMid_args iprot = to_GetActiveMemberMidsByBuddyMid_args <$> T.readVal iprot (T.T_STRUCT typemap_GetActiveMemberMidsByBuddyMid_args)
decode_GetActiveMemberMidsByBuddyMid_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetActiveMemberMidsByBuddyMid_args
decode_GetActiveMemberMidsByBuddyMid_args iprot bs = to_GetActiveMemberMidsByBuddyMid_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetActiveMemberMidsByBuddyMid_args) bs
typemap_GetActiveMemberMidsByBuddyMid_args :: T.TypeMap
typemap_GetActiveMemberMidsByBuddyMid_args = Map.fromList [(2,("buddyMid",T.T_STRING))]
default_GetActiveMemberMidsByBuddyMid_args :: GetActiveMemberMidsByBuddyMid_args
default_GetActiveMemberMidsByBuddyMid_args = GetActiveMemberMidsByBuddyMid_args{
  getActiveMemberMidsByBuddyMid_args_buddyMid = ""}
data GetActiveMemberMidsByBuddyMid_result = GetActiveMemberMidsByBuddyMid_result  { getActiveMemberMidsByBuddyMid_result_success :: (Vector.Vector LT.Text)
  , getActiveMemberMidsByBuddyMid_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetActiveMemberMidsByBuddyMid_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getActiveMemberMidsByBuddyMid_result_success record   `H.hashWithSalt` getActiveMemberMidsByBuddyMid_result_e record  
instance QC.Arbitrary GetActiveMemberMidsByBuddyMid_result where 
  arbitrary = M.liftM GetActiveMemberMidsByBuddyMid_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetActiveMemberMidsByBuddyMid_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetActiveMemberMidsByBuddyMid_result{getActiveMemberMidsByBuddyMid_result_success = getActiveMemberMidsByBuddyMid_result_success obj} then P.Nothing else P.Just $ default_GetActiveMemberMidsByBuddyMid_result{getActiveMemberMidsByBuddyMid_result_success = getActiveMemberMidsByBuddyMid_result_success obj}
    , if obj == default_GetActiveMemberMidsByBuddyMid_result{getActiveMemberMidsByBuddyMid_result_e = getActiveMemberMidsByBuddyMid_result_e obj} then P.Nothing else P.Just $ default_GetActiveMemberMidsByBuddyMid_result{getActiveMemberMidsByBuddyMid_result_e = getActiveMemberMidsByBuddyMid_result_e obj}
    ]
from_GetActiveMemberMidsByBuddyMid_result :: GetActiveMemberMidsByBuddyMid_result -> T.ThriftVal
from_GetActiveMemberMidsByBuddyMid_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3842 -> (1, ("e",from_TalkException _v3842))) <$> getActiveMemberMidsByBuddyMid_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3842 -> P.Just (0, ("success",T.TList T.T_STRING $ P.map (\_v3844 -> T.TString $ E.encodeUtf8 _v3844) $ Vector.toList _v3842))) $ getActiveMemberMidsByBuddyMid_result_success record
    , (\_v3842 -> (1, ("e",from_TalkException _v3842))) <$> getActiveMemberMidsByBuddyMid_result_e record
    ]
    )
write_GetActiveMemberMidsByBuddyMid_result :: T.Protocol p => p -> GetActiveMemberMidsByBuddyMid_result -> P.IO ()
write_GetActiveMemberMidsByBuddyMid_result oprot record = T.writeVal oprot $ from_GetActiveMemberMidsByBuddyMid_result record
encode_GetActiveMemberMidsByBuddyMid_result :: T.StatelessProtocol p => p -> GetActiveMemberMidsByBuddyMid_result -> LBS.ByteString
encode_GetActiveMemberMidsByBuddyMid_result oprot record = T.serializeVal oprot $ from_GetActiveMemberMidsByBuddyMid_result record
to_GetActiveMemberMidsByBuddyMid_result :: T.ThriftVal -> GetActiveMemberMidsByBuddyMid_result
to_GetActiveMemberMidsByBuddyMid_result (T.TStruct fields) = GetActiveMemberMidsByBuddyMid_result{
  getActiveMemberMidsByBuddyMid_result_success = P.maybe (getActiveMemberMidsByBuddyMid_result_success default_GetActiveMemberMidsByBuddyMid_result) (\(_,_val3846) -> (case _val3846 of {T.TList _ _val3847 -> (Vector.fromList $ P.map (\_v3848 -> (case _v3848 of {T.TString _val3849 -> E.decodeUtf8 _val3849; _ -> P.error "wrong type"})) _val3847); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getActiveMemberMidsByBuddyMid_result_e = P.maybe (P.Nothing) (\(_,_val3846) -> P.Just (case _val3846 of {T.TStruct _val3850 -> (to_TalkException (T.TStruct _val3850)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetActiveMemberMidsByBuddyMid_result _ = P.error "not a struct"
read_GetActiveMemberMidsByBuddyMid_result :: T.Protocol p => p -> P.IO GetActiveMemberMidsByBuddyMid_result
read_GetActiveMemberMidsByBuddyMid_result iprot = to_GetActiveMemberMidsByBuddyMid_result <$> T.readVal iprot (T.T_STRUCT typemap_GetActiveMemberMidsByBuddyMid_result)
decode_GetActiveMemberMidsByBuddyMid_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetActiveMemberMidsByBuddyMid_result
decode_GetActiveMemberMidsByBuddyMid_result iprot bs = to_GetActiveMemberMidsByBuddyMid_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetActiveMemberMidsByBuddyMid_result) bs
typemap_GetActiveMemberMidsByBuddyMid_result :: T.TypeMap
typemap_GetActiveMemberMidsByBuddyMid_result = Map.fromList [(0,("success",(T.T_LIST T.T_STRING))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetActiveMemberMidsByBuddyMid_result :: GetActiveMemberMidsByBuddyMid_result
default_GetActiveMemberMidsByBuddyMid_result = GetActiveMemberMidsByBuddyMid_result{
  getActiveMemberMidsByBuddyMid_result_success = Vector.empty,
  getActiveMemberMidsByBuddyMid_result_e = P.Nothing}
data GetAllBuddyMembers_args = GetAllBuddyMembers_args deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetAllBuddyMembers_args where
  hashWithSalt salt record = salt  
instance QC.Arbitrary GetAllBuddyMembers_args where 
  arbitrary = QC.elements [GetAllBuddyMembers_args]
from_GetAllBuddyMembers_args :: GetAllBuddyMembers_args -> T.ThriftVal
from_GetAllBuddyMembers_args record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_GetAllBuddyMembers_args :: T.Protocol p => p -> GetAllBuddyMembers_args -> P.IO ()
write_GetAllBuddyMembers_args oprot record = T.writeVal oprot $ from_GetAllBuddyMembers_args record
encode_GetAllBuddyMembers_args :: T.StatelessProtocol p => p -> GetAllBuddyMembers_args -> LBS.ByteString
encode_GetAllBuddyMembers_args oprot record = T.serializeVal oprot $ from_GetAllBuddyMembers_args record
to_GetAllBuddyMembers_args :: T.ThriftVal -> GetAllBuddyMembers_args
to_GetAllBuddyMembers_args (T.TStruct fields) = GetAllBuddyMembers_args{

  }
to_GetAllBuddyMembers_args _ = P.error "not a struct"
read_GetAllBuddyMembers_args :: T.Protocol p => p -> P.IO GetAllBuddyMembers_args
read_GetAllBuddyMembers_args iprot = to_GetAllBuddyMembers_args <$> T.readVal iprot (T.T_STRUCT typemap_GetAllBuddyMembers_args)
decode_GetAllBuddyMembers_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetAllBuddyMembers_args
decode_GetAllBuddyMembers_args iprot bs = to_GetAllBuddyMembers_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetAllBuddyMembers_args) bs
typemap_GetAllBuddyMembers_args :: T.TypeMap
typemap_GetAllBuddyMembers_args = Map.fromList []
default_GetAllBuddyMembers_args :: GetAllBuddyMembers_args
default_GetAllBuddyMembers_args = GetAllBuddyMembers_args{
}
data GetAllBuddyMembers_result = GetAllBuddyMembers_result  { getAllBuddyMembers_result_success :: (Vector.Vector LT.Text)
  , getAllBuddyMembers_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetAllBuddyMembers_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getAllBuddyMembers_result_success record   `H.hashWithSalt` getAllBuddyMembers_result_e record  
instance QC.Arbitrary GetAllBuddyMembers_result where 
  arbitrary = M.liftM GetAllBuddyMembers_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetAllBuddyMembers_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetAllBuddyMembers_result{getAllBuddyMembers_result_success = getAllBuddyMembers_result_success obj} then P.Nothing else P.Just $ default_GetAllBuddyMembers_result{getAllBuddyMembers_result_success = getAllBuddyMembers_result_success obj}
    , if obj == default_GetAllBuddyMembers_result{getAllBuddyMembers_result_e = getAllBuddyMembers_result_e obj} then P.Nothing else P.Just $ default_GetAllBuddyMembers_result{getAllBuddyMembers_result_e = getAllBuddyMembers_result_e obj}
    ]
from_GetAllBuddyMembers_result :: GetAllBuddyMembers_result -> T.ThriftVal
from_GetAllBuddyMembers_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3858 -> (1, ("e",from_TalkException _v3858))) <$> getAllBuddyMembers_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3858 -> P.Just (0, ("success",T.TList T.T_STRING $ P.map (\_v3860 -> T.TString $ E.encodeUtf8 _v3860) $ Vector.toList _v3858))) $ getAllBuddyMembers_result_success record
    , (\_v3858 -> (1, ("e",from_TalkException _v3858))) <$> getAllBuddyMembers_result_e record
    ]
    )
write_GetAllBuddyMembers_result :: T.Protocol p => p -> GetAllBuddyMembers_result -> P.IO ()
write_GetAllBuddyMembers_result oprot record = T.writeVal oprot $ from_GetAllBuddyMembers_result record
encode_GetAllBuddyMembers_result :: T.StatelessProtocol p => p -> GetAllBuddyMembers_result -> LBS.ByteString
encode_GetAllBuddyMembers_result oprot record = T.serializeVal oprot $ from_GetAllBuddyMembers_result record
to_GetAllBuddyMembers_result :: T.ThriftVal -> GetAllBuddyMembers_result
to_GetAllBuddyMembers_result (T.TStruct fields) = GetAllBuddyMembers_result{
  getAllBuddyMembers_result_success = P.maybe (getAllBuddyMembers_result_success default_GetAllBuddyMembers_result) (\(_,_val3862) -> (case _val3862 of {T.TList _ _val3863 -> (Vector.fromList $ P.map (\_v3864 -> (case _v3864 of {T.TString _val3865 -> E.decodeUtf8 _val3865; _ -> P.error "wrong type"})) _val3863); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getAllBuddyMembers_result_e = P.maybe (P.Nothing) (\(_,_val3862) -> P.Just (case _val3862 of {T.TStruct _val3866 -> (to_TalkException (T.TStruct _val3866)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetAllBuddyMembers_result _ = P.error "not a struct"
read_GetAllBuddyMembers_result :: T.Protocol p => p -> P.IO GetAllBuddyMembers_result
read_GetAllBuddyMembers_result iprot = to_GetAllBuddyMembers_result <$> T.readVal iprot (T.T_STRUCT typemap_GetAllBuddyMembers_result)
decode_GetAllBuddyMembers_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetAllBuddyMembers_result
decode_GetAllBuddyMembers_result iprot bs = to_GetAllBuddyMembers_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetAllBuddyMembers_result) bs
typemap_GetAllBuddyMembers_result :: T.TypeMap
typemap_GetAllBuddyMembers_result = Map.fromList [(0,("success",(T.T_LIST T.T_STRING))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetAllBuddyMembers_result :: GetAllBuddyMembers_result
default_GetAllBuddyMembers_result = GetAllBuddyMembers_result{
  getAllBuddyMembers_result_success = Vector.empty,
  getAllBuddyMembers_result_e = P.Nothing}
data GetBlockedBuddyMembers_args = GetBlockedBuddyMembers_args deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBlockedBuddyMembers_args where
  hashWithSalt salt record = salt  
instance QC.Arbitrary GetBlockedBuddyMembers_args where 
  arbitrary = QC.elements [GetBlockedBuddyMembers_args]
from_GetBlockedBuddyMembers_args :: GetBlockedBuddyMembers_args -> T.ThriftVal
from_GetBlockedBuddyMembers_args record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_GetBlockedBuddyMembers_args :: T.Protocol p => p -> GetBlockedBuddyMembers_args -> P.IO ()
write_GetBlockedBuddyMembers_args oprot record = T.writeVal oprot $ from_GetBlockedBuddyMembers_args record
encode_GetBlockedBuddyMembers_args :: T.StatelessProtocol p => p -> GetBlockedBuddyMembers_args -> LBS.ByteString
encode_GetBlockedBuddyMembers_args oprot record = T.serializeVal oprot $ from_GetBlockedBuddyMembers_args record
to_GetBlockedBuddyMembers_args :: T.ThriftVal -> GetBlockedBuddyMembers_args
to_GetBlockedBuddyMembers_args (T.TStruct fields) = GetBlockedBuddyMembers_args{

  }
to_GetBlockedBuddyMembers_args _ = P.error "not a struct"
read_GetBlockedBuddyMembers_args :: T.Protocol p => p -> P.IO GetBlockedBuddyMembers_args
read_GetBlockedBuddyMembers_args iprot = to_GetBlockedBuddyMembers_args <$> T.readVal iprot (T.T_STRUCT typemap_GetBlockedBuddyMembers_args)
decode_GetBlockedBuddyMembers_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBlockedBuddyMembers_args
decode_GetBlockedBuddyMembers_args iprot bs = to_GetBlockedBuddyMembers_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBlockedBuddyMembers_args) bs
typemap_GetBlockedBuddyMembers_args :: T.TypeMap
typemap_GetBlockedBuddyMembers_args = Map.fromList []
default_GetBlockedBuddyMembers_args :: GetBlockedBuddyMembers_args
default_GetBlockedBuddyMembers_args = GetBlockedBuddyMembers_args{
}
data GetBlockedBuddyMembers_result = GetBlockedBuddyMembers_result  { getBlockedBuddyMembers_result_success :: (Vector.Vector LT.Text)
  , getBlockedBuddyMembers_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBlockedBuddyMembers_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getBlockedBuddyMembers_result_success record   `H.hashWithSalt` getBlockedBuddyMembers_result_e record  
instance QC.Arbitrary GetBlockedBuddyMembers_result where 
  arbitrary = M.liftM GetBlockedBuddyMembers_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetBlockedBuddyMembers_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetBlockedBuddyMembers_result{getBlockedBuddyMembers_result_success = getBlockedBuddyMembers_result_success obj} then P.Nothing else P.Just $ default_GetBlockedBuddyMembers_result{getBlockedBuddyMembers_result_success = getBlockedBuddyMembers_result_success obj}
    , if obj == default_GetBlockedBuddyMembers_result{getBlockedBuddyMembers_result_e = getBlockedBuddyMembers_result_e obj} then P.Nothing else P.Just $ default_GetBlockedBuddyMembers_result{getBlockedBuddyMembers_result_e = getBlockedBuddyMembers_result_e obj}
    ]
from_GetBlockedBuddyMembers_result :: GetBlockedBuddyMembers_result -> T.ThriftVal
from_GetBlockedBuddyMembers_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3874 -> (1, ("e",from_TalkException _v3874))) <$> getBlockedBuddyMembers_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3874 -> P.Just (0, ("success",T.TList T.T_STRING $ P.map (\_v3876 -> T.TString $ E.encodeUtf8 _v3876) $ Vector.toList _v3874))) $ getBlockedBuddyMembers_result_success record
    , (\_v3874 -> (1, ("e",from_TalkException _v3874))) <$> getBlockedBuddyMembers_result_e record
    ]
    )
write_GetBlockedBuddyMembers_result :: T.Protocol p => p -> GetBlockedBuddyMembers_result -> P.IO ()
write_GetBlockedBuddyMembers_result oprot record = T.writeVal oprot $ from_GetBlockedBuddyMembers_result record
encode_GetBlockedBuddyMembers_result :: T.StatelessProtocol p => p -> GetBlockedBuddyMembers_result -> LBS.ByteString
encode_GetBlockedBuddyMembers_result oprot record = T.serializeVal oprot $ from_GetBlockedBuddyMembers_result record
to_GetBlockedBuddyMembers_result :: T.ThriftVal -> GetBlockedBuddyMembers_result
to_GetBlockedBuddyMembers_result (T.TStruct fields) = GetBlockedBuddyMembers_result{
  getBlockedBuddyMembers_result_success = P.maybe (getBlockedBuddyMembers_result_success default_GetBlockedBuddyMembers_result) (\(_,_val3878) -> (case _val3878 of {T.TList _ _val3879 -> (Vector.fromList $ P.map (\_v3880 -> (case _v3880 of {T.TString _val3881 -> E.decodeUtf8 _val3881; _ -> P.error "wrong type"})) _val3879); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getBlockedBuddyMembers_result_e = P.maybe (P.Nothing) (\(_,_val3878) -> P.Just (case _val3878 of {T.TStruct _val3882 -> (to_TalkException (T.TStruct _val3882)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetBlockedBuddyMembers_result _ = P.error "not a struct"
read_GetBlockedBuddyMembers_result :: T.Protocol p => p -> P.IO GetBlockedBuddyMembers_result
read_GetBlockedBuddyMembers_result iprot = to_GetBlockedBuddyMembers_result <$> T.readVal iprot (T.T_STRUCT typemap_GetBlockedBuddyMembers_result)
decode_GetBlockedBuddyMembers_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBlockedBuddyMembers_result
decode_GetBlockedBuddyMembers_result iprot bs = to_GetBlockedBuddyMembers_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBlockedBuddyMembers_result) bs
typemap_GetBlockedBuddyMembers_result :: T.TypeMap
typemap_GetBlockedBuddyMembers_result = Map.fromList [(0,("success",(T.T_LIST T.T_STRING))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetBlockedBuddyMembers_result :: GetBlockedBuddyMembers_result
default_GetBlockedBuddyMembers_result = GetBlockedBuddyMembers_result{
  getBlockedBuddyMembers_result_success = Vector.empty,
  getBlockedBuddyMembers_result_e = P.Nothing}
data GetBlockerCountByBuddyMid_args = GetBlockerCountByBuddyMid_args  { getBlockerCountByBuddyMid_args_buddyMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBlockerCountByBuddyMid_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getBlockerCountByBuddyMid_args_buddyMid record  
instance QC.Arbitrary GetBlockerCountByBuddyMid_args where 
  arbitrary = M.liftM GetBlockerCountByBuddyMid_args (QC.arbitrary)
  shrink obj | obj == default_GetBlockerCountByBuddyMid_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetBlockerCountByBuddyMid_args{getBlockerCountByBuddyMid_args_buddyMid = getBlockerCountByBuddyMid_args_buddyMid obj} then P.Nothing else P.Just $ default_GetBlockerCountByBuddyMid_args{getBlockerCountByBuddyMid_args_buddyMid = getBlockerCountByBuddyMid_args_buddyMid obj}
    ]
from_GetBlockerCountByBuddyMid_args :: GetBlockerCountByBuddyMid_args -> T.ThriftVal
from_GetBlockerCountByBuddyMid_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3885 -> P.Just (2, ("buddyMid",T.TString $ E.encodeUtf8 _v3885))) $ getBlockerCountByBuddyMid_args_buddyMid record
  ]
write_GetBlockerCountByBuddyMid_args :: T.Protocol p => p -> GetBlockerCountByBuddyMid_args -> P.IO ()
write_GetBlockerCountByBuddyMid_args oprot record = T.writeVal oprot $ from_GetBlockerCountByBuddyMid_args record
encode_GetBlockerCountByBuddyMid_args :: T.StatelessProtocol p => p -> GetBlockerCountByBuddyMid_args -> LBS.ByteString
encode_GetBlockerCountByBuddyMid_args oprot record = T.serializeVal oprot $ from_GetBlockerCountByBuddyMid_args record
to_GetBlockerCountByBuddyMid_args :: T.ThriftVal -> GetBlockerCountByBuddyMid_args
to_GetBlockerCountByBuddyMid_args (T.TStruct fields) = GetBlockerCountByBuddyMid_args{
  getBlockerCountByBuddyMid_args_buddyMid = P.maybe (getBlockerCountByBuddyMid_args_buddyMid default_GetBlockerCountByBuddyMid_args) (\(_,_val3887) -> (case _val3887 of {T.TString _val3888 -> E.decodeUtf8 _val3888; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_GetBlockerCountByBuddyMid_args _ = P.error "not a struct"
read_GetBlockerCountByBuddyMid_args :: T.Protocol p => p -> P.IO GetBlockerCountByBuddyMid_args
read_GetBlockerCountByBuddyMid_args iprot = to_GetBlockerCountByBuddyMid_args <$> T.readVal iprot (T.T_STRUCT typemap_GetBlockerCountByBuddyMid_args)
decode_GetBlockerCountByBuddyMid_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBlockerCountByBuddyMid_args
decode_GetBlockerCountByBuddyMid_args iprot bs = to_GetBlockerCountByBuddyMid_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBlockerCountByBuddyMid_args) bs
typemap_GetBlockerCountByBuddyMid_args :: T.TypeMap
typemap_GetBlockerCountByBuddyMid_args = Map.fromList [(2,("buddyMid",T.T_STRING))]
default_GetBlockerCountByBuddyMid_args :: GetBlockerCountByBuddyMid_args
default_GetBlockerCountByBuddyMid_args = GetBlockerCountByBuddyMid_args{
  getBlockerCountByBuddyMid_args_buddyMid = ""}
data GetBlockerCountByBuddyMid_result = GetBlockerCountByBuddyMid_result  { getBlockerCountByBuddyMid_result_success :: I.Int64
  , getBlockerCountByBuddyMid_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBlockerCountByBuddyMid_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getBlockerCountByBuddyMid_result_success record   `H.hashWithSalt` getBlockerCountByBuddyMid_result_e record  
instance QC.Arbitrary GetBlockerCountByBuddyMid_result where 
  arbitrary = M.liftM GetBlockerCountByBuddyMid_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetBlockerCountByBuddyMid_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetBlockerCountByBuddyMid_result{getBlockerCountByBuddyMid_result_success = getBlockerCountByBuddyMid_result_success obj} then P.Nothing else P.Just $ default_GetBlockerCountByBuddyMid_result{getBlockerCountByBuddyMid_result_success = getBlockerCountByBuddyMid_result_success obj}
    , if obj == default_GetBlockerCountByBuddyMid_result{getBlockerCountByBuddyMid_result_e = getBlockerCountByBuddyMid_result_e obj} then P.Nothing else P.Just $ default_GetBlockerCountByBuddyMid_result{getBlockerCountByBuddyMid_result_e = getBlockerCountByBuddyMid_result_e obj}
    ]
from_GetBlockerCountByBuddyMid_result :: GetBlockerCountByBuddyMid_result -> T.ThriftVal
from_GetBlockerCountByBuddyMid_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3891 -> (1, ("e",from_TalkException _v3891))) <$> getBlockerCountByBuddyMid_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3891 -> P.Just (0, ("success",T.TI64 _v3891))) $ getBlockerCountByBuddyMid_result_success record
    , (\_v3891 -> (1, ("e",from_TalkException _v3891))) <$> getBlockerCountByBuddyMid_result_e record
    ]
    )
write_GetBlockerCountByBuddyMid_result :: T.Protocol p => p -> GetBlockerCountByBuddyMid_result -> P.IO ()
write_GetBlockerCountByBuddyMid_result oprot record = T.writeVal oprot $ from_GetBlockerCountByBuddyMid_result record
encode_GetBlockerCountByBuddyMid_result :: T.StatelessProtocol p => p -> GetBlockerCountByBuddyMid_result -> LBS.ByteString
encode_GetBlockerCountByBuddyMid_result oprot record = T.serializeVal oprot $ from_GetBlockerCountByBuddyMid_result record
to_GetBlockerCountByBuddyMid_result :: T.ThriftVal -> GetBlockerCountByBuddyMid_result
to_GetBlockerCountByBuddyMid_result (T.TStruct fields) = GetBlockerCountByBuddyMid_result{
  getBlockerCountByBuddyMid_result_success = P.maybe (getBlockerCountByBuddyMid_result_success default_GetBlockerCountByBuddyMid_result) (\(_,_val3893) -> (case _val3893 of {T.TI64 _val3894 -> _val3894; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getBlockerCountByBuddyMid_result_e = P.maybe (P.Nothing) (\(_,_val3893) -> P.Just (case _val3893 of {T.TStruct _val3895 -> (to_TalkException (T.TStruct _val3895)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetBlockerCountByBuddyMid_result _ = P.error "not a struct"
read_GetBlockerCountByBuddyMid_result :: T.Protocol p => p -> P.IO GetBlockerCountByBuddyMid_result
read_GetBlockerCountByBuddyMid_result iprot = to_GetBlockerCountByBuddyMid_result <$> T.readVal iprot (T.T_STRUCT typemap_GetBlockerCountByBuddyMid_result)
decode_GetBlockerCountByBuddyMid_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBlockerCountByBuddyMid_result
decode_GetBlockerCountByBuddyMid_result iprot bs = to_GetBlockerCountByBuddyMid_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBlockerCountByBuddyMid_result) bs
typemap_GetBlockerCountByBuddyMid_result :: T.TypeMap
typemap_GetBlockerCountByBuddyMid_result = Map.fromList [(0,("success",T.T_I64)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetBlockerCountByBuddyMid_result :: GetBlockerCountByBuddyMid_result
default_GetBlockerCountByBuddyMid_result = GetBlockerCountByBuddyMid_result{
  getBlockerCountByBuddyMid_result_success = 0,
  getBlockerCountByBuddyMid_result_e = P.Nothing}
data GetBuddyDetailByMid_args = GetBuddyDetailByMid_args  { getBuddyDetailByMid_args_buddyMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBuddyDetailByMid_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getBuddyDetailByMid_args_buddyMid record  
instance QC.Arbitrary GetBuddyDetailByMid_args where 
  arbitrary = M.liftM GetBuddyDetailByMid_args (QC.arbitrary)
  shrink obj | obj == default_GetBuddyDetailByMid_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetBuddyDetailByMid_args{getBuddyDetailByMid_args_buddyMid = getBuddyDetailByMid_args_buddyMid obj} then P.Nothing else P.Just $ default_GetBuddyDetailByMid_args{getBuddyDetailByMid_args_buddyMid = getBuddyDetailByMid_args_buddyMid obj}
    ]
from_GetBuddyDetailByMid_args :: GetBuddyDetailByMid_args -> T.ThriftVal
from_GetBuddyDetailByMid_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3898 -> P.Just (2, ("buddyMid",T.TString $ E.encodeUtf8 _v3898))) $ getBuddyDetailByMid_args_buddyMid record
  ]
write_GetBuddyDetailByMid_args :: T.Protocol p => p -> GetBuddyDetailByMid_args -> P.IO ()
write_GetBuddyDetailByMid_args oprot record = T.writeVal oprot $ from_GetBuddyDetailByMid_args record
encode_GetBuddyDetailByMid_args :: T.StatelessProtocol p => p -> GetBuddyDetailByMid_args -> LBS.ByteString
encode_GetBuddyDetailByMid_args oprot record = T.serializeVal oprot $ from_GetBuddyDetailByMid_args record
to_GetBuddyDetailByMid_args :: T.ThriftVal -> GetBuddyDetailByMid_args
to_GetBuddyDetailByMid_args (T.TStruct fields) = GetBuddyDetailByMid_args{
  getBuddyDetailByMid_args_buddyMid = P.maybe (getBuddyDetailByMid_args_buddyMid default_GetBuddyDetailByMid_args) (\(_,_val3900) -> (case _val3900 of {T.TString _val3901 -> E.decodeUtf8 _val3901; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_GetBuddyDetailByMid_args _ = P.error "not a struct"
read_GetBuddyDetailByMid_args :: T.Protocol p => p -> P.IO GetBuddyDetailByMid_args
read_GetBuddyDetailByMid_args iprot = to_GetBuddyDetailByMid_args <$> T.readVal iprot (T.T_STRUCT typemap_GetBuddyDetailByMid_args)
decode_GetBuddyDetailByMid_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBuddyDetailByMid_args
decode_GetBuddyDetailByMid_args iprot bs = to_GetBuddyDetailByMid_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBuddyDetailByMid_args) bs
typemap_GetBuddyDetailByMid_args :: T.TypeMap
typemap_GetBuddyDetailByMid_args = Map.fromList [(2,("buddyMid",T.T_STRING))]
default_GetBuddyDetailByMid_args :: GetBuddyDetailByMid_args
default_GetBuddyDetailByMid_args = GetBuddyDetailByMid_args{
  getBuddyDetailByMid_args_buddyMid = ""}
data GetBuddyDetailByMid_result = GetBuddyDetailByMid_result  { getBuddyDetailByMid_result_success :: BuddyDetail
  , getBuddyDetailByMid_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBuddyDetailByMid_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getBuddyDetailByMid_result_success record   `H.hashWithSalt` getBuddyDetailByMid_result_e record  
instance QC.Arbitrary GetBuddyDetailByMid_result where 
  arbitrary = M.liftM GetBuddyDetailByMid_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetBuddyDetailByMid_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetBuddyDetailByMid_result{getBuddyDetailByMid_result_success = getBuddyDetailByMid_result_success obj} then P.Nothing else P.Just $ default_GetBuddyDetailByMid_result{getBuddyDetailByMid_result_success = getBuddyDetailByMid_result_success obj}
    , if obj == default_GetBuddyDetailByMid_result{getBuddyDetailByMid_result_e = getBuddyDetailByMid_result_e obj} then P.Nothing else P.Just $ default_GetBuddyDetailByMid_result{getBuddyDetailByMid_result_e = getBuddyDetailByMid_result_e obj}
    ]
from_GetBuddyDetailByMid_result :: GetBuddyDetailByMid_result -> T.ThriftVal
from_GetBuddyDetailByMid_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3904 -> (1, ("e",from_TalkException _v3904))) <$> getBuddyDetailByMid_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3904 -> P.Just (0, ("success",from_BuddyDetail _v3904))) $ getBuddyDetailByMid_result_success record
    , (\_v3904 -> (1, ("e",from_TalkException _v3904))) <$> getBuddyDetailByMid_result_e record
    ]
    )
write_GetBuddyDetailByMid_result :: T.Protocol p => p -> GetBuddyDetailByMid_result -> P.IO ()
write_GetBuddyDetailByMid_result oprot record = T.writeVal oprot $ from_GetBuddyDetailByMid_result record
encode_GetBuddyDetailByMid_result :: T.StatelessProtocol p => p -> GetBuddyDetailByMid_result -> LBS.ByteString
encode_GetBuddyDetailByMid_result oprot record = T.serializeVal oprot $ from_GetBuddyDetailByMid_result record
to_GetBuddyDetailByMid_result :: T.ThriftVal -> GetBuddyDetailByMid_result
to_GetBuddyDetailByMid_result (T.TStruct fields) = GetBuddyDetailByMid_result{
  getBuddyDetailByMid_result_success = P.maybe (getBuddyDetailByMid_result_success default_GetBuddyDetailByMid_result) (\(_,_val3906) -> (case _val3906 of {T.TStruct _val3907 -> (to_BuddyDetail (T.TStruct _val3907)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getBuddyDetailByMid_result_e = P.maybe (P.Nothing) (\(_,_val3906) -> P.Just (case _val3906 of {T.TStruct _val3908 -> (to_TalkException (T.TStruct _val3908)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetBuddyDetailByMid_result _ = P.error "not a struct"
read_GetBuddyDetailByMid_result :: T.Protocol p => p -> P.IO GetBuddyDetailByMid_result
read_GetBuddyDetailByMid_result iprot = to_GetBuddyDetailByMid_result <$> T.readVal iprot (T.T_STRUCT typemap_GetBuddyDetailByMid_result)
decode_GetBuddyDetailByMid_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBuddyDetailByMid_result
decode_GetBuddyDetailByMid_result iprot bs = to_GetBuddyDetailByMid_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBuddyDetailByMid_result) bs
typemap_GetBuddyDetailByMid_result :: T.TypeMap
typemap_GetBuddyDetailByMid_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_BuddyDetail))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetBuddyDetailByMid_result :: GetBuddyDetailByMid_result
default_GetBuddyDetailByMid_result = GetBuddyDetailByMid_result{
  getBuddyDetailByMid_result_success = default_BuddyDetail,
  getBuddyDetailByMid_result_e = P.Nothing}
data GetBuddyProfile_args = GetBuddyProfile_args deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBuddyProfile_args where
  hashWithSalt salt record = salt  
instance QC.Arbitrary GetBuddyProfile_args where 
  arbitrary = QC.elements [GetBuddyProfile_args]
from_GetBuddyProfile_args :: GetBuddyProfile_args -> T.ThriftVal
from_GetBuddyProfile_args record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_GetBuddyProfile_args :: T.Protocol p => p -> GetBuddyProfile_args -> P.IO ()
write_GetBuddyProfile_args oprot record = T.writeVal oprot $ from_GetBuddyProfile_args record
encode_GetBuddyProfile_args :: T.StatelessProtocol p => p -> GetBuddyProfile_args -> LBS.ByteString
encode_GetBuddyProfile_args oprot record = T.serializeVal oprot $ from_GetBuddyProfile_args record
to_GetBuddyProfile_args :: T.ThriftVal -> GetBuddyProfile_args
to_GetBuddyProfile_args (T.TStruct fields) = GetBuddyProfile_args{

  }
to_GetBuddyProfile_args _ = P.error "not a struct"
read_GetBuddyProfile_args :: T.Protocol p => p -> P.IO GetBuddyProfile_args
read_GetBuddyProfile_args iprot = to_GetBuddyProfile_args <$> T.readVal iprot (T.T_STRUCT typemap_GetBuddyProfile_args)
decode_GetBuddyProfile_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBuddyProfile_args
decode_GetBuddyProfile_args iprot bs = to_GetBuddyProfile_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBuddyProfile_args) bs
typemap_GetBuddyProfile_args :: T.TypeMap
typemap_GetBuddyProfile_args = Map.fromList []
default_GetBuddyProfile_args :: GetBuddyProfile_args
default_GetBuddyProfile_args = GetBuddyProfile_args{
}
data GetBuddyProfile_result = GetBuddyProfile_result  { getBuddyProfile_result_success :: BuddyProfile
  , getBuddyProfile_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBuddyProfile_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getBuddyProfile_result_success record   `H.hashWithSalt` getBuddyProfile_result_e record  
instance QC.Arbitrary GetBuddyProfile_result where 
  arbitrary = M.liftM GetBuddyProfile_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetBuddyProfile_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetBuddyProfile_result{getBuddyProfile_result_success = getBuddyProfile_result_success obj} then P.Nothing else P.Just $ default_GetBuddyProfile_result{getBuddyProfile_result_success = getBuddyProfile_result_success obj}
    , if obj == default_GetBuddyProfile_result{getBuddyProfile_result_e = getBuddyProfile_result_e obj} then P.Nothing else P.Just $ default_GetBuddyProfile_result{getBuddyProfile_result_e = getBuddyProfile_result_e obj}
    ]
from_GetBuddyProfile_result :: GetBuddyProfile_result -> T.ThriftVal
from_GetBuddyProfile_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3916 -> (1, ("e",from_TalkException _v3916))) <$> getBuddyProfile_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3916 -> P.Just (0, ("success",from_BuddyProfile _v3916))) $ getBuddyProfile_result_success record
    , (\_v3916 -> (1, ("e",from_TalkException _v3916))) <$> getBuddyProfile_result_e record
    ]
    )
write_GetBuddyProfile_result :: T.Protocol p => p -> GetBuddyProfile_result -> P.IO ()
write_GetBuddyProfile_result oprot record = T.writeVal oprot $ from_GetBuddyProfile_result record
encode_GetBuddyProfile_result :: T.StatelessProtocol p => p -> GetBuddyProfile_result -> LBS.ByteString
encode_GetBuddyProfile_result oprot record = T.serializeVal oprot $ from_GetBuddyProfile_result record
to_GetBuddyProfile_result :: T.ThriftVal -> GetBuddyProfile_result
to_GetBuddyProfile_result (T.TStruct fields) = GetBuddyProfile_result{
  getBuddyProfile_result_success = P.maybe (getBuddyProfile_result_success default_GetBuddyProfile_result) (\(_,_val3918) -> (case _val3918 of {T.TStruct _val3919 -> (to_BuddyProfile (T.TStruct _val3919)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getBuddyProfile_result_e = P.maybe (P.Nothing) (\(_,_val3918) -> P.Just (case _val3918 of {T.TStruct _val3920 -> (to_TalkException (T.TStruct _val3920)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetBuddyProfile_result _ = P.error "not a struct"
read_GetBuddyProfile_result :: T.Protocol p => p -> P.IO GetBuddyProfile_result
read_GetBuddyProfile_result iprot = to_GetBuddyProfile_result <$> T.readVal iprot (T.T_STRUCT typemap_GetBuddyProfile_result)
decode_GetBuddyProfile_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBuddyProfile_result
decode_GetBuddyProfile_result iprot bs = to_GetBuddyProfile_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBuddyProfile_result) bs
typemap_GetBuddyProfile_result :: T.TypeMap
typemap_GetBuddyProfile_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_BuddyProfile))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetBuddyProfile_result :: GetBuddyProfile_result
default_GetBuddyProfile_result = GetBuddyProfile_result{
  getBuddyProfile_result_success = default_BuddyProfile,
  getBuddyProfile_result_e = P.Nothing}
data GetContactTicket_args = GetContactTicket_args deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetContactTicket_args where
  hashWithSalt salt record = salt  
instance QC.Arbitrary GetContactTicket_args where 
  arbitrary = QC.elements [GetContactTicket_args]
from_GetContactTicket_args :: GetContactTicket_args -> T.ThriftVal
from_GetContactTicket_args record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_GetContactTicket_args :: T.Protocol p => p -> GetContactTicket_args -> P.IO ()
write_GetContactTicket_args oprot record = T.writeVal oprot $ from_GetContactTicket_args record
encode_GetContactTicket_args :: T.StatelessProtocol p => p -> GetContactTicket_args -> LBS.ByteString
encode_GetContactTicket_args oprot record = T.serializeVal oprot $ from_GetContactTicket_args record
to_GetContactTicket_args :: T.ThriftVal -> GetContactTicket_args
to_GetContactTicket_args (T.TStruct fields) = GetContactTicket_args{

  }
to_GetContactTicket_args _ = P.error "not a struct"
read_GetContactTicket_args :: T.Protocol p => p -> P.IO GetContactTicket_args
read_GetContactTicket_args iprot = to_GetContactTicket_args <$> T.readVal iprot (T.T_STRUCT typemap_GetContactTicket_args)
decode_GetContactTicket_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetContactTicket_args
decode_GetContactTicket_args iprot bs = to_GetContactTicket_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetContactTicket_args) bs
typemap_GetContactTicket_args :: T.TypeMap
typemap_GetContactTicket_args = Map.fromList []
default_GetContactTicket_args :: GetContactTicket_args
default_GetContactTicket_args = GetContactTicket_args{
}
data GetContactTicket_result = GetContactTicket_result  { getContactTicket_result_success :: Ticket
  , getContactTicket_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetContactTicket_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getContactTicket_result_success record   `H.hashWithSalt` getContactTicket_result_e record  
instance QC.Arbitrary GetContactTicket_result where 
  arbitrary = M.liftM GetContactTicket_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetContactTicket_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetContactTicket_result{getContactTicket_result_success = getContactTicket_result_success obj} then P.Nothing else P.Just $ default_GetContactTicket_result{getContactTicket_result_success = getContactTicket_result_success obj}
    , if obj == default_GetContactTicket_result{getContactTicket_result_e = getContactTicket_result_e obj} then P.Nothing else P.Just $ default_GetContactTicket_result{getContactTicket_result_e = getContactTicket_result_e obj}
    ]
from_GetContactTicket_result :: GetContactTicket_result -> T.ThriftVal
from_GetContactTicket_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3928 -> (1, ("e",from_TalkException _v3928))) <$> getContactTicket_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3928 -> P.Just (0, ("success",from_Ticket _v3928))) $ getContactTicket_result_success record
    , (\_v3928 -> (1, ("e",from_TalkException _v3928))) <$> getContactTicket_result_e record
    ]
    )
write_GetContactTicket_result :: T.Protocol p => p -> GetContactTicket_result -> P.IO ()
write_GetContactTicket_result oprot record = T.writeVal oprot $ from_GetContactTicket_result record
encode_GetContactTicket_result :: T.StatelessProtocol p => p -> GetContactTicket_result -> LBS.ByteString
encode_GetContactTicket_result oprot record = T.serializeVal oprot $ from_GetContactTicket_result record
to_GetContactTicket_result :: T.ThriftVal -> GetContactTicket_result
to_GetContactTicket_result (T.TStruct fields) = GetContactTicket_result{
  getContactTicket_result_success = P.maybe (getContactTicket_result_success default_GetContactTicket_result) (\(_,_val3930) -> (case _val3930 of {T.TStruct _val3931 -> (to_Ticket (T.TStruct _val3931)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getContactTicket_result_e = P.maybe (P.Nothing) (\(_,_val3930) -> P.Just (case _val3930 of {T.TStruct _val3932 -> (to_TalkException (T.TStruct _val3932)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetContactTicket_result _ = P.error "not a struct"
read_GetContactTicket_result :: T.Protocol p => p -> P.IO GetContactTicket_result
read_GetContactTicket_result iprot = to_GetContactTicket_result <$> T.readVal iprot (T.T_STRUCT typemap_GetContactTicket_result)
decode_GetContactTicket_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetContactTicket_result
decode_GetContactTicket_result iprot bs = to_GetContactTicket_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetContactTicket_result) bs
typemap_GetContactTicket_result :: T.TypeMap
typemap_GetContactTicket_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_Ticket))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetContactTicket_result :: GetContactTicket_result
default_GetContactTicket_result = GetContactTicket_result{
  getContactTicket_result_success = default_Ticket,
  getContactTicket_result_e = P.Nothing}
data GetMemberCountByBuddyMid_args = GetMemberCountByBuddyMid_args  { getMemberCountByBuddyMid_args_buddyMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetMemberCountByBuddyMid_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getMemberCountByBuddyMid_args_buddyMid record  
instance QC.Arbitrary GetMemberCountByBuddyMid_args where 
  arbitrary = M.liftM GetMemberCountByBuddyMid_args (QC.arbitrary)
  shrink obj | obj == default_GetMemberCountByBuddyMid_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetMemberCountByBuddyMid_args{getMemberCountByBuddyMid_args_buddyMid = getMemberCountByBuddyMid_args_buddyMid obj} then P.Nothing else P.Just $ default_GetMemberCountByBuddyMid_args{getMemberCountByBuddyMid_args_buddyMid = getMemberCountByBuddyMid_args_buddyMid obj}
    ]
from_GetMemberCountByBuddyMid_args :: GetMemberCountByBuddyMid_args -> T.ThriftVal
from_GetMemberCountByBuddyMid_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3935 -> P.Just (2, ("buddyMid",T.TString $ E.encodeUtf8 _v3935))) $ getMemberCountByBuddyMid_args_buddyMid record
  ]
write_GetMemberCountByBuddyMid_args :: T.Protocol p => p -> GetMemberCountByBuddyMid_args -> P.IO ()
write_GetMemberCountByBuddyMid_args oprot record = T.writeVal oprot $ from_GetMemberCountByBuddyMid_args record
encode_GetMemberCountByBuddyMid_args :: T.StatelessProtocol p => p -> GetMemberCountByBuddyMid_args -> LBS.ByteString
encode_GetMemberCountByBuddyMid_args oprot record = T.serializeVal oprot $ from_GetMemberCountByBuddyMid_args record
to_GetMemberCountByBuddyMid_args :: T.ThriftVal -> GetMemberCountByBuddyMid_args
to_GetMemberCountByBuddyMid_args (T.TStruct fields) = GetMemberCountByBuddyMid_args{
  getMemberCountByBuddyMid_args_buddyMid = P.maybe (getMemberCountByBuddyMid_args_buddyMid default_GetMemberCountByBuddyMid_args) (\(_,_val3937) -> (case _val3937 of {T.TString _val3938 -> E.decodeUtf8 _val3938; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_GetMemberCountByBuddyMid_args _ = P.error "not a struct"
read_GetMemberCountByBuddyMid_args :: T.Protocol p => p -> P.IO GetMemberCountByBuddyMid_args
read_GetMemberCountByBuddyMid_args iprot = to_GetMemberCountByBuddyMid_args <$> T.readVal iprot (T.T_STRUCT typemap_GetMemberCountByBuddyMid_args)
decode_GetMemberCountByBuddyMid_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetMemberCountByBuddyMid_args
decode_GetMemberCountByBuddyMid_args iprot bs = to_GetMemberCountByBuddyMid_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetMemberCountByBuddyMid_args) bs
typemap_GetMemberCountByBuddyMid_args :: T.TypeMap
typemap_GetMemberCountByBuddyMid_args = Map.fromList [(2,("buddyMid",T.T_STRING))]
default_GetMemberCountByBuddyMid_args :: GetMemberCountByBuddyMid_args
default_GetMemberCountByBuddyMid_args = GetMemberCountByBuddyMid_args{
  getMemberCountByBuddyMid_args_buddyMid = ""}
data GetMemberCountByBuddyMid_result = GetMemberCountByBuddyMid_result  { getMemberCountByBuddyMid_result_success :: I.Int64
  , getMemberCountByBuddyMid_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetMemberCountByBuddyMid_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getMemberCountByBuddyMid_result_success record   `H.hashWithSalt` getMemberCountByBuddyMid_result_e record  
instance QC.Arbitrary GetMemberCountByBuddyMid_result where 
  arbitrary = M.liftM GetMemberCountByBuddyMid_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetMemberCountByBuddyMid_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetMemberCountByBuddyMid_result{getMemberCountByBuddyMid_result_success = getMemberCountByBuddyMid_result_success obj} then P.Nothing else P.Just $ default_GetMemberCountByBuddyMid_result{getMemberCountByBuddyMid_result_success = getMemberCountByBuddyMid_result_success obj}
    , if obj == default_GetMemberCountByBuddyMid_result{getMemberCountByBuddyMid_result_e = getMemberCountByBuddyMid_result_e obj} then P.Nothing else P.Just $ default_GetMemberCountByBuddyMid_result{getMemberCountByBuddyMid_result_e = getMemberCountByBuddyMid_result_e obj}
    ]
from_GetMemberCountByBuddyMid_result :: GetMemberCountByBuddyMid_result -> T.ThriftVal
from_GetMemberCountByBuddyMid_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3941 -> (1, ("e",from_TalkException _v3941))) <$> getMemberCountByBuddyMid_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3941 -> P.Just (0, ("success",T.TI64 _v3941))) $ getMemberCountByBuddyMid_result_success record
    , (\_v3941 -> (1, ("e",from_TalkException _v3941))) <$> getMemberCountByBuddyMid_result_e record
    ]
    )
write_GetMemberCountByBuddyMid_result :: T.Protocol p => p -> GetMemberCountByBuddyMid_result -> P.IO ()
write_GetMemberCountByBuddyMid_result oprot record = T.writeVal oprot $ from_GetMemberCountByBuddyMid_result record
encode_GetMemberCountByBuddyMid_result :: T.StatelessProtocol p => p -> GetMemberCountByBuddyMid_result -> LBS.ByteString
encode_GetMemberCountByBuddyMid_result oprot record = T.serializeVal oprot $ from_GetMemberCountByBuddyMid_result record
to_GetMemberCountByBuddyMid_result :: T.ThriftVal -> GetMemberCountByBuddyMid_result
to_GetMemberCountByBuddyMid_result (T.TStruct fields) = GetMemberCountByBuddyMid_result{
  getMemberCountByBuddyMid_result_success = P.maybe (getMemberCountByBuddyMid_result_success default_GetMemberCountByBuddyMid_result) (\(_,_val3943) -> (case _val3943 of {T.TI64 _val3944 -> _val3944; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getMemberCountByBuddyMid_result_e = P.maybe (P.Nothing) (\(_,_val3943) -> P.Just (case _val3943 of {T.TStruct _val3945 -> (to_TalkException (T.TStruct _val3945)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetMemberCountByBuddyMid_result _ = P.error "not a struct"
read_GetMemberCountByBuddyMid_result :: T.Protocol p => p -> P.IO GetMemberCountByBuddyMid_result
read_GetMemberCountByBuddyMid_result iprot = to_GetMemberCountByBuddyMid_result <$> T.readVal iprot (T.T_STRUCT typemap_GetMemberCountByBuddyMid_result)
decode_GetMemberCountByBuddyMid_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetMemberCountByBuddyMid_result
decode_GetMemberCountByBuddyMid_result iprot bs = to_GetMemberCountByBuddyMid_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetMemberCountByBuddyMid_result) bs
typemap_GetMemberCountByBuddyMid_result :: T.TypeMap
typemap_GetMemberCountByBuddyMid_result = Map.fromList [(0,("success",T.T_I64)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetMemberCountByBuddyMid_result :: GetMemberCountByBuddyMid_result
default_GetMemberCountByBuddyMid_result = GetMemberCountByBuddyMid_result{
  getMemberCountByBuddyMid_result_success = 0,
  getMemberCountByBuddyMid_result_e = P.Nothing}
data GetSendBuddyMessageResult_args = GetSendBuddyMessageResult_args  { getSendBuddyMessageResult_args_sendBuddyMessageRequestId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetSendBuddyMessageResult_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getSendBuddyMessageResult_args_sendBuddyMessageRequestId record  
instance QC.Arbitrary GetSendBuddyMessageResult_args where 
  arbitrary = M.liftM GetSendBuddyMessageResult_args (QC.arbitrary)
  shrink obj | obj == default_GetSendBuddyMessageResult_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetSendBuddyMessageResult_args{getSendBuddyMessageResult_args_sendBuddyMessageRequestId = getSendBuddyMessageResult_args_sendBuddyMessageRequestId obj} then P.Nothing else P.Just $ default_GetSendBuddyMessageResult_args{getSendBuddyMessageResult_args_sendBuddyMessageRequestId = getSendBuddyMessageResult_args_sendBuddyMessageRequestId obj}
    ]
from_GetSendBuddyMessageResult_args :: GetSendBuddyMessageResult_args -> T.ThriftVal
from_GetSendBuddyMessageResult_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3948 -> P.Just (1, ("sendBuddyMessageRequestId",T.TString $ E.encodeUtf8 _v3948))) $ getSendBuddyMessageResult_args_sendBuddyMessageRequestId record
  ]
write_GetSendBuddyMessageResult_args :: T.Protocol p => p -> GetSendBuddyMessageResult_args -> P.IO ()
write_GetSendBuddyMessageResult_args oprot record = T.writeVal oprot $ from_GetSendBuddyMessageResult_args record
encode_GetSendBuddyMessageResult_args :: T.StatelessProtocol p => p -> GetSendBuddyMessageResult_args -> LBS.ByteString
encode_GetSendBuddyMessageResult_args oprot record = T.serializeVal oprot $ from_GetSendBuddyMessageResult_args record
to_GetSendBuddyMessageResult_args :: T.ThriftVal -> GetSendBuddyMessageResult_args
to_GetSendBuddyMessageResult_args (T.TStruct fields) = GetSendBuddyMessageResult_args{
  getSendBuddyMessageResult_args_sendBuddyMessageRequestId = P.maybe (getSendBuddyMessageResult_args_sendBuddyMessageRequestId default_GetSendBuddyMessageResult_args) (\(_,_val3950) -> (case _val3950 of {T.TString _val3951 -> E.decodeUtf8 _val3951; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetSendBuddyMessageResult_args _ = P.error "not a struct"
read_GetSendBuddyMessageResult_args :: T.Protocol p => p -> P.IO GetSendBuddyMessageResult_args
read_GetSendBuddyMessageResult_args iprot = to_GetSendBuddyMessageResult_args <$> T.readVal iprot (T.T_STRUCT typemap_GetSendBuddyMessageResult_args)
decode_GetSendBuddyMessageResult_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetSendBuddyMessageResult_args
decode_GetSendBuddyMessageResult_args iprot bs = to_GetSendBuddyMessageResult_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetSendBuddyMessageResult_args) bs
typemap_GetSendBuddyMessageResult_args :: T.TypeMap
typemap_GetSendBuddyMessageResult_args = Map.fromList [(1,("sendBuddyMessageRequestId",T.T_STRING))]
default_GetSendBuddyMessageResult_args :: GetSendBuddyMessageResult_args
default_GetSendBuddyMessageResult_args = GetSendBuddyMessageResult_args{
  getSendBuddyMessageResult_args_sendBuddyMessageRequestId = ""}
data GetSendBuddyMessageResult_result = GetSendBuddyMessageResult_result  { getSendBuddyMessageResult_result_success :: SendBuddyMessageResult
  , getSendBuddyMessageResult_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetSendBuddyMessageResult_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getSendBuddyMessageResult_result_success record   `H.hashWithSalt` getSendBuddyMessageResult_result_e record  
instance QC.Arbitrary GetSendBuddyMessageResult_result where 
  arbitrary = M.liftM GetSendBuddyMessageResult_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetSendBuddyMessageResult_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetSendBuddyMessageResult_result{getSendBuddyMessageResult_result_success = getSendBuddyMessageResult_result_success obj} then P.Nothing else P.Just $ default_GetSendBuddyMessageResult_result{getSendBuddyMessageResult_result_success = getSendBuddyMessageResult_result_success obj}
    , if obj == default_GetSendBuddyMessageResult_result{getSendBuddyMessageResult_result_e = getSendBuddyMessageResult_result_e obj} then P.Nothing else P.Just $ default_GetSendBuddyMessageResult_result{getSendBuddyMessageResult_result_e = getSendBuddyMessageResult_result_e obj}
    ]
from_GetSendBuddyMessageResult_result :: GetSendBuddyMessageResult_result -> T.ThriftVal
from_GetSendBuddyMessageResult_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3954 -> (1, ("e",from_TalkException _v3954))) <$> getSendBuddyMessageResult_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3954 -> P.Just (0, ("success",from_SendBuddyMessageResult _v3954))) $ getSendBuddyMessageResult_result_success record
    , (\_v3954 -> (1, ("e",from_TalkException _v3954))) <$> getSendBuddyMessageResult_result_e record
    ]
    )
write_GetSendBuddyMessageResult_result :: T.Protocol p => p -> GetSendBuddyMessageResult_result -> P.IO ()
write_GetSendBuddyMessageResult_result oprot record = T.writeVal oprot $ from_GetSendBuddyMessageResult_result record
encode_GetSendBuddyMessageResult_result :: T.StatelessProtocol p => p -> GetSendBuddyMessageResult_result -> LBS.ByteString
encode_GetSendBuddyMessageResult_result oprot record = T.serializeVal oprot $ from_GetSendBuddyMessageResult_result record
to_GetSendBuddyMessageResult_result :: T.ThriftVal -> GetSendBuddyMessageResult_result
to_GetSendBuddyMessageResult_result (T.TStruct fields) = GetSendBuddyMessageResult_result{
  getSendBuddyMessageResult_result_success = P.maybe (getSendBuddyMessageResult_result_success default_GetSendBuddyMessageResult_result) (\(_,_val3956) -> (case _val3956 of {T.TStruct _val3957 -> (to_SendBuddyMessageResult (T.TStruct _val3957)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getSendBuddyMessageResult_result_e = P.maybe (P.Nothing) (\(_,_val3956) -> P.Just (case _val3956 of {T.TStruct _val3958 -> (to_TalkException (T.TStruct _val3958)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetSendBuddyMessageResult_result _ = P.error "not a struct"
read_GetSendBuddyMessageResult_result :: T.Protocol p => p -> P.IO GetSendBuddyMessageResult_result
read_GetSendBuddyMessageResult_result iprot = to_GetSendBuddyMessageResult_result <$> T.readVal iprot (T.T_STRUCT typemap_GetSendBuddyMessageResult_result)
decode_GetSendBuddyMessageResult_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetSendBuddyMessageResult_result
decode_GetSendBuddyMessageResult_result iprot bs = to_GetSendBuddyMessageResult_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetSendBuddyMessageResult_result) bs
typemap_GetSendBuddyMessageResult_result :: T.TypeMap
typemap_GetSendBuddyMessageResult_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SendBuddyMessageResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetSendBuddyMessageResult_result :: GetSendBuddyMessageResult_result
default_GetSendBuddyMessageResult_result = GetSendBuddyMessageResult_result{
  getSendBuddyMessageResult_result_success = default_SendBuddyMessageResult,
  getSendBuddyMessageResult_result_e = P.Nothing}
data GetSetBuddyOnAirResult_args = GetSetBuddyOnAirResult_args  { getSetBuddyOnAirResult_args_setBuddyOnAirRequestId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetSetBuddyOnAirResult_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getSetBuddyOnAirResult_args_setBuddyOnAirRequestId record  
instance QC.Arbitrary GetSetBuddyOnAirResult_args where 
  arbitrary = M.liftM GetSetBuddyOnAirResult_args (QC.arbitrary)
  shrink obj | obj == default_GetSetBuddyOnAirResult_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetSetBuddyOnAirResult_args{getSetBuddyOnAirResult_args_setBuddyOnAirRequestId = getSetBuddyOnAirResult_args_setBuddyOnAirRequestId obj} then P.Nothing else P.Just $ default_GetSetBuddyOnAirResult_args{getSetBuddyOnAirResult_args_setBuddyOnAirRequestId = getSetBuddyOnAirResult_args_setBuddyOnAirRequestId obj}
    ]
from_GetSetBuddyOnAirResult_args :: GetSetBuddyOnAirResult_args -> T.ThriftVal
from_GetSetBuddyOnAirResult_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3961 -> P.Just (1, ("setBuddyOnAirRequestId",T.TString $ E.encodeUtf8 _v3961))) $ getSetBuddyOnAirResult_args_setBuddyOnAirRequestId record
  ]
write_GetSetBuddyOnAirResult_args :: T.Protocol p => p -> GetSetBuddyOnAirResult_args -> P.IO ()
write_GetSetBuddyOnAirResult_args oprot record = T.writeVal oprot $ from_GetSetBuddyOnAirResult_args record
encode_GetSetBuddyOnAirResult_args :: T.StatelessProtocol p => p -> GetSetBuddyOnAirResult_args -> LBS.ByteString
encode_GetSetBuddyOnAirResult_args oprot record = T.serializeVal oprot $ from_GetSetBuddyOnAirResult_args record
to_GetSetBuddyOnAirResult_args :: T.ThriftVal -> GetSetBuddyOnAirResult_args
to_GetSetBuddyOnAirResult_args (T.TStruct fields) = GetSetBuddyOnAirResult_args{
  getSetBuddyOnAirResult_args_setBuddyOnAirRequestId = P.maybe (getSetBuddyOnAirResult_args_setBuddyOnAirRequestId default_GetSetBuddyOnAirResult_args) (\(_,_val3963) -> (case _val3963 of {T.TString _val3964 -> E.decodeUtf8 _val3964; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetSetBuddyOnAirResult_args _ = P.error "not a struct"
read_GetSetBuddyOnAirResult_args :: T.Protocol p => p -> P.IO GetSetBuddyOnAirResult_args
read_GetSetBuddyOnAirResult_args iprot = to_GetSetBuddyOnAirResult_args <$> T.readVal iprot (T.T_STRUCT typemap_GetSetBuddyOnAirResult_args)
decode_GetSetBuddyOnAirResult_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetSetBuddyOnAirResult_args
decode_GetSetBuddyOnAirResult_args iprot bs = to_GetSetBuddyOnAirResult_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetSetBuddyOnAirResult_args) bs
typemap_GetSetBuddyOnAirResult_args :: T.TypeMap
typemap_GetSetBuddyOnAirResult_args = Map.fromList [(1,("setBuddyOnAirRequestId",T.T_STRING))]
default_GetSetBuddyOnAirResult_args :: GetSetBuddyOnAirResult_args
default_GetSetBuddyOnAirResult_args = GetSetBuddyOnAirResult_args{
  getSetBuddyOnAirResult_args_setBuddyOnAirRequestId = ""}
data GetSetBuddyOnAirResult_result = GetSetBuddyOnAirResult_result  { getSetBuddyOnAirResult_result_success :: SetBuddyOnAirResult
  , getSetBuddyOnAirResult_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetSetBuddyOnAirResult_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getSetBuddyOnAirResult_result_success record   `H.hashWithSalt` getSetBuddyOnAirResult_result_e record  
instance QC.Arbitrary GetSetBuddyOnAirResult_result where 
  arbitrary = M.liftM GetSetBuddyOnAirResult_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetSetBuddyOnAirResult_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetSetBuddyOnAirResult_result{getSetBuddyOnAirResult_result_success = getSetBuddyOnAirResult_result_success obj} then P.Nothing else P.Just $ default_GetSetBuddyOnAirResult_result{getSetBuddyOnAirResult_result_success = getSetBuddyOnAirResult_result_success obj}
    , if obj == default_GetSetBuddyOnAirResult_result{getSetBuddyOnAirResult_result_e = getSetBuddyOnAirResult_result_e obj} then P.Nothing else P.Just $ default_GetSetBuddyOnAirResult_result{getSetBuddyOnAirResult_result_e = getSetBuddyOnAirResult_result_e obj}
    ]
from_GetSetBuddyOnAirResult_result :: GetSetBuddyOnAirResult_result -> T.ThriftVal
from_GetSetBuddyOnAirResult_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3967 -> (1, ("e",from_TalkException _v3967))) <$> getSetBuddyOnAirResult_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3967 -> P.Just (0, ("success",from_SetBuddyOnAirResult _v3967))) $ getSetBuddyOnAirResult_result_success record
    , (\_v3967 -> (1, ("e",from_TalkException _v3967))) <$> getSetBuddyOnAirResult_result_e record
    ]
    )
write_GetSetBuddyOnAirResult_result :: T.Protocol p => p -> GetSetBuddyOnAirResult_result -> P.IO ()
write_GetSetBuddyOnAirResult_result oprot record = T.writeVal oprot $ from_GetSetBuddyOnAirResult_result record
encode_GetSetBuddyOnAirResult_result :: T.StatelessProtocol p => p -> GetSetBuddyOnAirResult_result -> LBS.ByteString
encode_GetSetBuddyOnAirResult_result oprot record = T.serializeVal oprot $ from_GetSetBuddyOnAirResult_result record
to_GetSetBuddyOnAirResult_result :: T.ThriftVal -> GetSetBuddyOnAirResult_result
to_GetSetBuddyOnAirResult_result (T.TStruct fields) = GetSetBuddyOnAirResult_result{
  getSetBuddyOnAirResult_result_success = P.maybe (getSetBuddyOnAirResult_result_success default_GetSetBuddyOnAirResult_result) (\(_,_val3969) -> (case _val3969 of {T.TStruct _val3970 -> (to_SetBuddyOnAirResult (T.TStruct _val3970)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getSetBuddyOnAirResult_result_e = P.maybe (P.Nothing) (\(_,_val3969) -> P.Just (case _val3969 of {T.TStruct _val3971 -> (to_TalkException (T.TStruct _val3971)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetSetBuddyOnAirResult_result _ = P.error "not a struct"
read_GetSetBuddyOnAirResult_result :: T.Protocol p => p -> P.IO GetSetBuddyOnAirResult_result
read_GetSetBuddyOnAirResult_result iprot = to_GetSetBuddyOnAirResult_result <$> T.readVal iprot (T.T_STRUCT typemap_GetSetBuddyOnAirResult_result)
decode_GetSetBuddyOnAirResult_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetSetBuddyOnAirResult_result
decode_GetSetBuddyOnAirResult_result iprot bs = to_GetSetBuddyOnAirResult_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetSetBuddyOnAirResult_result) bs
typemap_GetSetBuddyOnAirResult_result :: T.TypeMap
typemap_GetSetBuddyOnAirResult_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SetBuddyOnAirResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetSetBuddyOnAirResult_result :: GetSetBuddyOnAirResult_result
default_GetSetBuddyOnAirResult_result = GetSetBuddyOnAirResult_result{
  getSetBuddyOnAirResult_result_success = default_SetBuddyOnAirResult,
  getSetBuddyOnAirResult_result_e = P.Nothing}
data GetUpdateBuddyProfileResult_args = GetUpdateBuddyProfileResult_args  { getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetUpdateBuddyProfileResult_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId record  
instance QC.Arbitrary GetUpdateBuddyProfileResult_args where 
  arbitrary = M.liftM GetUpdateBuddyProfileResult_args (QC.arbitrary)
  shrink obj | obj == default_GetUpdateBuddyProfileResult_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetUpdateBuddyProfileResult_args{getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId = getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId obj} then P.Nothing else P.Just $ default_GetUpdateBuddyProfileResult_args{getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId = getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId obj}
    ]
from_GetUpdateBuddyProfileResult_args :: GetUpdateBuddyProfileResult_args -> T.ThriftVal
from_GetUpdateBuddyProfileResult_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3974 -> P.Just (1, ("updateBuddyProfileRequestId",T.TString $ E.encodeUtf8 _v3974))) $ getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId record
  ]
write_GetUpdateBuddyProfileResult_args :: T.Protocol p => p -> GetUpdateBuddyProfileResult_args -> P.IO ()
write_GetUpdateBuddyProfileResult_args oprot record = T.writeVal oprot $ from_GetUpdateBuddyProfileResult_args record
encode_GetUpdateBuddyProfileResult_args :: T.StatelessProtocol p => p -> GetUpdateBuddyProfileResult_args -> LBS.ByteString
encode_GetUpdateBuddyProfileResult_args oprot record = T.serializeVal oprot $ from_GetUpdateBuddyProfileResult_args record
to_GetUpdateBuddyProfileResult_args :: T.ThriftVal -> GetUpdateBuddyProfileResult_args
to_GetUpdateBuddyProfileResult_args (T.TStruct fields) = GetUpdateBuddyProfileResult_args{
  getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId = P.maybe (getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId default_GetUpdateBuddyProfileResult_args) (\(_,_val3976) -> (case _val3976 of {T.TString _val3977 -> E.decodeUtf8 _val3977; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetUpdateBuddyProfileResult_args _ = P.error "not a struct"
read_GetUpdateBuddyProfileResult_args :: T.Protocol p => p -> P.IO GetUpdateBuddyProfileResult_args
read_GetUpdateBuddyProfileResult_args iprot = to_GetUpdateBuddyProfileResult_args <$> T.readVal iprot (T.T_STRUCT typemap_GetUpdateBuddyProfileResult_args)
decode_GetUpdateBuddyProfileResult_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetUpdateBuddyProfileResult_args
decode_GetUpdateBuddyProfileResult_args iprot bs = to_GetUpdateBuddyProfileResult_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetUpdateBuddyProfileResult_args) bs
typemap_GetUpdateBuddyProfileResult_args :: T.TypeMap
typemap_GetUpdateBuddyProfileResult_args = Map.fromList [(1,("updateBuddyProfileRequestId",T.T_STRING))]
default_GetUpdateBuddyProfileResult_args :: GetUpdateBuddyProfileResult_args
default_GetUpdateBuddyProfileResult_args = GetUpdateBuddyProfileResult_args{
  getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId = ""}
data GetUpdateBuddyProfileResult_result = GetUpdateBuddyProfileResult_result  { getUpdateBuddyProfileResult_result_success :: UpdateBuddyProfileResult
  , getUpdateBuddyProfileResult_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetUpdateBuddyProfileResult_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getUpdateBuddyProfileResult_result_success record   `H.hashWithSalt` getUpdateBuddyProfileResult_result_e record  
instance QC.Arbitrary GetUpdateBuddyProfileResult_result where 
  arbitrary = M.liftM GetUpdateBuddyProfileResult_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetUpdateBuddyProfileResult_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetUpdateBuddyProfileResult_result{getUpdateBuddyProfileResult_result_success = getUpdateBuddyProfileResult_result_success obj} then P.Nothing else P.Just $ default_GetUpdateBuddyProfileResult_result{getUpdateBuddyProfileResult_result_success = getUpdateBuddyProfileResult_result_success obj}
    , if obj == default_GetUpdateBuddyProfileResult_result{getUpdateBuddyProfileResult_result_e = getUpdateBuddyProfileResult_result_e obj} then P.Nothing else P.Just $ default_GetUpdateBuddyProfileResult_result{getUpdateBuddyProfileResult_result_e = getUpdateBuddyProfileResult_result_e obj}
    ]
from_GetUpdateBuddyProfileResult_result :: GetUpdateBuddyProfileResult_result -> T.ThriftVal
from_GetUpdateBuddyProfileResult_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3980 -> (1, ("e",from_TalkException _v3980))) <$> getUpdateBuddyProfileResult_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3980 -> P.Just (0, ("success",from_UpdateBuddyProfileResult _v3980))) $ getUpdateBuddyProfileResult_result_success record
    , (\_v3980 -> (1, ("e",from_TalkException _v3980))) <$> getUpdateBuddyProfileResult_result_e record
    ]
    )
write_GetUpdateBuddyProfileResult_result :: T.Protocol p => p -> GetUpdateBuddyProfileResult_result -> P.IO ()
write_GetUpdateBuddyProfileResult_result oprot record = T.writeVal oprot $ from_GetUpdateBuddyProfileResult_result record
encode_GetUpdateBuddyProfileResult_result :: T.StatelessProtocol p => p -> GetUpdateBuddyProfileResult_result -> LBS.ByteString
encode_GetUpdateBuddyProfileResult_result oprot record = T.serializeVal oprot $ from_GetUpdateBuddyProfileResult_result record
to_GetUpdateBuddyProfileResult_result :: T.ThriftVal -> GetUpdateBuddyProfileResult_result
to_GetUpdateBuddyProfileResult_result (T.TStruct fields) = GetUpdateBuddyProfileResult_result{
  getUpdateBuddyProfileResult_result_success = P.maybe (getUpdateBuddyProfileResult_result_success default_GetUpdateBuddyProfileResult_result) (\(_,_val3982) -> (case _val3982 of {T.TStruct _val3983 -> (to_UpdateBuddyProfileResult (T.TStruct _val3983)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getUpdateBuddyProfileResult_result_e = P.maybe (P.Nothing) (\(_,_val3982) -> P.Just (case _val3982 of {T.TStruct _val3984 -> (to_TalkException (T.TStruct _val3984)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetUpdateBuddyProfileResult_result _ = P.error "not a struct"
read_GetUpdateBuddyProfileResult_result :: T.Protocol p => p -> P.IO GetUpdateBuddyProfileResult_result
read_GetUpdateBuddyProfileResult_result iprot = to_GetUpdateBuddyProfileResult_result <$> T.readVal iprot (T.T_STRUCT typemap_GetUpdateBuddyProfileResult_result)
decode_GetUpdateBuddyProfileResult_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetUpdateBuddyProfileResult_result
decode_GetUpdateBuddyProfileResult_result iprot bs = to_GetUpdateBuddyProfileResult_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetUpdateBuddyProfileResult_result) bs
typemap_GetUpdateBuddyProfileResult_result :: T.TypeMap
typemap_GetUpdateBuddyProfileResult_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_UpdateBuddyProfileResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetUpdateBuddyProfileResult_result :: GetUpdateBuddyProfileResult_result
default_GetUpdateBuddyProfileResult_result = GetUpdateBuddyProfileResult_result{
  getUpdateBuddyProfileResult_result_success = default_UpdateBuddyProfileResult,
  getUpdateBuddyProfileResult_result_e = P.Nothing}
data IsBuddyOnAirByMid_args = IsBuddyOnAirByMid_args  { isBuddyOnAirByMid_args_buddyMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable IsBuddyOnAirByMid_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` isBuddyOnAirByMid_args_buddyMid record  
instance QC.Arbitrary IsBuddyOnAirByMid_args where 
  arbitrary = M.liftM IsBuddyOnAirByMid_args (QC.arbitrary)
  shrink obj | obj == default_IsBuddyOnAirByMid_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_IsBuddyOnAirByMid_args{isBuddyOnAirByMid_args_buddyMid = isBuddyOnAirByMid_args_buddyMid obj} then P.Nothing else P.Just $ default_IsBuddyOnAirByMid_args{isBuddyOnAirByMid_args_buddyMid = isBuddyOnAirByMid_args_buddyMid obj}
    ]
from_IsBuddyOnAirByMid_args :: IsBuddyOnAirByMid_args -> T.ThriftVal
from_IsBuddyOnAirByMid_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v3987 -> P.Just (2, ("buddyMid",T.TString $ E.encodeUtf8 _v3987))) $ isBuddyOnAirByMid_args_buddyMid record
  ]
write_IsBuddyOnAirByMid_args :: T.Protocol p => p -> IsBuddyOnAirByMid_args -> P.IO ()
write_IsBuddyOnAirByMid_args oprot record = T.writeVal oprot $ from_IsBuddyOnAirByMid_args record
encode_IsBuddyOnAirByMid_args :: T.StatelessProtocol p => p -> IsBuddyOnAirByMid_args -> LBS.ByteString
encode_IsBuddyOnAirByMid_args oprot record = T.serializeVal oprot $ from_IsBuddyOnAirByMid_args record
to_IsBuddyOnAirByMid_args :: T.ThriftVal -> IsBuddyOnAirByMid_args
to_IsBuddyOnAirByMid_args (T.TStruct fields) = IsBuddyOnAirByMid_args{
  isBuddyOnAirByMid_args_buddyMid = P.maybe (isBuddyOnAirByMid_args_buddyMid default_IsBuddyOnAirByMid_args) (\(_,_val3989) -> (case _val3989 of {T.TString _val3990 -> E.decodeUtf8 _val3990; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_IsBuddyOnAirByMid_args _ = P.error "not a struct"
read_IsBuddyOnAirByMid_args :: T.Protocol p => p -> P.IO IsBuddyOnAirByMid_args
read_IsBuddyOnAirByMid_args iprot = to_IsBuddyOnAirByMid_args <$> T.readVal iprot (T.T_STRUCT typemap_IsBuddyOnAirByMid_args)
decode_IsBuddyOnAirByMid_args :: T.StatelessProtocol p => p -> LBS.ByteString -> IsBuddyOnAirByMid_args
decode_IsBuddyOnAirByMid_args iprot bs = to_IsBuddyOnAirByMid_args $ T.deserializeVal iprot (T.T_STRUCT typemap_IsBuddyOnAirByMid_args) bs
typemap_IsBuddyOnAirByMid_args :: T.TypeMap
typemap_IsBuddyOnAirByMid_args = Map.fromList [(2,("buddyMid",T.T_STRING))]
default_IsBuddyOnAirByMid_args :: IsBuddyOnAirByMid_args
default_IsBuddyOnAirByMid_args = IsBuddyOnAirByMid_args{
  isBuddyOnAirByMid_args_buddyMid = ""}
data IsBuddyOnAirByMid_result = IsBuddyOnAirByMid_result  { isBuddyOnAirByMid_result_success :: P.Bool
  , isBuddyOnAirByMid_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable IsBuddyOnAirByMid_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` isBuddyOnAirByMid_result_success record   `H.hashWithSalt` isBuddyOnAirByMid_result_e record  
instance QC.Arbitrary IsBuddyOnAirByMid_result where 
  arbitrary = M.liftM IsBuddyOnAirByMid_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_IsBuddyOnAirByMid_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_IsBuddyOnAirByMid_result{isBuddyOnAirByMid_result_success = isBuddyOnAirByMid_result_success obj} then P.Nothing else P.Just $ default_IsBuddyOnAirByMid_result{isBuddyOnAirByMid_result_success = isBuddyOnAirByMid_result_success obj}
    , if obj == default_IsBuddyOnAirByMid_result{isBuddyOnAirByMid_result_e = isBuddyOnAirByMid_result_e obj} then P.Nothing else P.Just $ default_IsBuddyOnAirByMid_result{isBuddyOnAirByMid_result_e = isBuddyOnAirByMid_result_e obj}
    ]
from_IsBuddyOnAirByMid_result :: IsBuddyOnAirByMid_result -> T.ThriftVal
from_IsBuddyOnAirByMid_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v3993 -> (1, ("e",from_TalkException _v3993))) <$> isBuddyOnAirByMid_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v3993 -> P.Just (0, ("success",T.TBool _v3993))) $ isBuddyOnAirByMid_result_success record
    , (\_v3993 -> (1, ("e",from_TalkException _v3993))) <$> isBuddyOnAirByMid_result_e record
    ]
    )
write_IsBuddyOnAirByMid_result :: T.Protocol p => p -> IsBuddyOnAirByMid_result -> P.IO ()
write_IsBuddyOnAirByMid_result oprot record = T.writeVal oprot $ from_IsBuddyOnAirByMid_result record
encode_IsBuddyOnAirByMid_result :: T.StatelessProtocol p => p -> IsBuddyOnAirByMid_result -> LBS.ByteString
encode_IsBuddyOnAirByMid_result oprot record = T.serializeVal oprot $ from_IsBuddyOnAirByMid_result record
to_IsBuddyOnAirByMid_result :: T.ThriftVal -> IsBuddyOnAirByMid_result
to_IsBuddyOnAirByMid_result (T.TStruct fields) = IsBuddyOnAirByMid_result{
  isBuddyOnAirByMid_result_success = P.maybe (isBuddyOnAirByMid_result_success default_IsBuddyOnAirByMid_result) (\(_,_val3995) -> (case _val3995 of {T.TBool _val3996 -> _val3996; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  isBuddyOnAirByMid_result_e = P.maybe (P.Nothing) (\(_,_val3995) -> P.Just (case _val3995 of {T.TStruct _val3997 -> (to_TalkException (T.TStruct _val3997)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_IsBuddyOnAirByMid_result _ = P.error "not a struct"
read_IsBuddyOnAirByMid_result :: T.Protocol p => p -> P.IO IsBuddyOnAirByMid_result
read_IsBuddyOnAirByMid_result iprot = to_IsBuddyOnAirByMid_result <$> T.readVal iprot (T.T_STRUCT typemap_IsBuddyOnAirByMid_result)
decode_IsBuddyOnAirByMid_result :: T.StatelessProtocol p => p -> LBS.ByteString -> IsBuddyOnAirByMid_result
decode_IsBuddyOnAirByMid_result iprot bs = to_IsBuddyOnAirByMid_result $ T.deserializeVal iprot (T.T_STRUCT typemap_IsBuddyOnAirByMid_result) bs
typemap_IsBuddyOnAirByMid_result :: T.TypeMap
typemap_IsBuddyOnAirByMid_result = Map.fromList [(0,("success",T.T_BOOL)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_IsBuddyOnAirByMid_result :: IsBuddyOnAirByMid_result
default_IsBuddyOnAirByMid_result = IsBuddyOnAirByMid_result{
  isBuddyOnAirByMid_result_success = P.False,
  isBuddyOnAirByMid_result_e = P.Nothing}
data LinkAndSendBuddyContentMessageToAllAsync_args = LinkAndSendBuddyContentMessageToAllAsync_args  { linkAndSendBuddyContentMessageToAllAsync_args_requestId :: LT.Text
  , linkAndSendBuddyContentMessageToAllAsync_args_msg :: Message
  , linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable LinkAndSendBuddyContentMessageToAllAsync_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` linkAndSendBuddyContentMessageToAllAsync_args_requestId record   `H.hashWithSalt` linkAndSendBuddyContentMessageToAllAsync_args_msg record   `H.hashWithSalt` linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId record  
instance QC.Arbitrary LinkAndSendBuddyContentMessageToAllAsync_args where 
  arbitrary = M.liftM LinkAndSendBuddyContentMessageToAllAsync_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_LinkAndSendBuddyContentMessageToAllAsync_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_LinkAndSendBuddyContentMessageToAllAsync_args{linkAndSendBuddyContentMessageToAllAsync_args_requestId = linkAndSendBuddyContentMessageToAllAsync_args_requestId obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToAllAsync_args{linkAndSendBuddyContentMessageToAllAsync_args_requestId = linkAndSendBuddyContentMessageToAllAsync_args_requestId obj}
    , if obj == default_LinkAndSendBuddyContentMessageToAllAsync_args{linkAndSendBuddyContentMessageToAllAsync_args_msg = linkAndSendBuddyContentMessageToAllAsync_args_msg obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToAllAsync_args{linkAndSendBuddyContentMessageToAllAsync_args_msg = linkAndSendBuddyContentMessageToAllAsync_args_msg obj}
    , if obj == default_LinkAndSendBuddyContentMessageToAllAsync_args{linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId = linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToAllAsync_args{linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId = linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId obj}
    ]
from_LinkAndSendBuddyContentMessageToAllAsync_args :: LinkAndSendBuddyContentMessageToAllAsync_args -> T.ThriftVal
from_LinkAndSendBuddyContentMessageToAllAsync_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4000 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4000))) $ linkAndSendBuddyContentMessageToAllAsync_args_requestId record
  , (\_v4000 -> P.Just (2, ("msg",from_Message _v4000))) $ linkAndSendBuddyContentMessageToAllAsync_args_msg record
  , (\_v4000 -> P.Just (3, ("sourceContentId",T.TString $ E.encodeUtf8 _v4000))) $ linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId record
  ]
write_LinkAndSendBuddyContentMessageToAllAsync_args :: T.Protocol p => p -> LinkAndSendBuddyContentMessageToAllAsync_args -> P.IO ()
write_LinkAndSendBuddyContentMessageToAllAsync_args oprot record = T.writeVal oprot $ from_LinkAndSendBuddyContentMessageToAllAsync_args record
encode_LinkAndSendBuddyContentMessageToAllAsync_args :: T.StatelessProtocol p => p -> LinkAndSendBuddyContentMessageToAllAsync_args -> LBS.ByteString
encode_LinkAndSendBuddyContentMessageToAllAsync_args oprot record = T.serializeVal oprot $ from_LinkAndSendBuddyContentMessageToAllAsync_args record
to_LinkAndSendBuddyContentMessageToAllAsync_args :: T.ThriftVal -> LinkAndSendBuddyContentMessageToAllAsync_args
to_LinkAndSendBuddyContentMessageToAllAsync_args (T.TStruct fields) = LinkAndSendBuddyContentMessageToAllAsync_args{
  linkAndSendBuddyContentMessageToAllAsync_args_requestId = P.maybe (linkAndSendBuddyContentMessageToAllAsync_args_requestId default_LinkAndSendBuddyContentMessageToAllAsync_args) (\(_,_val4002) -> (case _val4002 of {T.TString _val4003 -> E.decodeUtf8 _val4003; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  linkAndSendBuddyContentMessageToAllAsync_args_msg = P.maybe (linkAndSendBuddyContentMessageToAllAsync_args_msg default_LinkAndSendBuddyContentMessageToAllAsync_args) (\(_,_val4002) -> (case _val4002 of {T.TStruct _val4004 -> (to_Message (T.TStruct _val4004)); _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId = P.maybe (linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId default_LinkAndSendBuddyContentMessageToAllAsync_args) (\(_,_val4002) -> (case _val4002 of {T.TString _val4005 -> E.decodeUtf8 _val4005; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_LinkAndSendBuddyContentMessageToAllAsync_args _ = P.error "not a struct"
read_LinkAndSendBuddyContentMessageToAllAsync_args :: T.Protocol p => p -> P.IO LinkAndSendBuddyContentMessageToAllAsync_args
read_LinkAndSendBuddyContentMessageToAllAsync_args iprot = to_LinkAndSendBuddyContentMessageToAllAsync_args <$> T.readVal iprot (T.T_STRUCT typemap_LinkAndSendBuddyContentMessageToAllAsync_args)
decode_LinkAndSendBuddyContentMessageToAllAsync_args :: T.StatelessProtocol p => p -> LBS.ByteString -> LinkAndSendBuddyContentMessageToAllAsync_args
decode_LinkAndSendBuddyContentMessageToAllAsync_args iprot bs = to_LinkAndSendBuddyContentMessageToAllAsync_args $ T.deserializeVal iprot (T.T_STRUCT typemap_LinkAndSendBuddyContentMessageToAllAsync_args) bs
typemap_LinkAndSendBuddyContentMessageToAllAsync_args :: T.TypeMap
typemap_LinkAndSendBuddyContentMessageToAllAsync_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message))),(3,("sourceContentId",T.T_STRING))]
default_LinkAndSendBuddyContentMessageToAllAsync_args :: LinkAndSendBuddyContentMessageToAllAsync_args
default_LinkAndSendBuddyContentMessageToAllAsync_args = LinkAndSendBuddyContentMessageToAllAsync_args{
  linkAndSendBuddyContentMessageToAllAsync_args_requestId = "",
  linkAndSendBuddyContentMessageToAllAsync_args_msg = default_Message,
  linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId = ""}
data LinkAndSendBuddyContentMessageToAllAsync_result = LinkAndSendBuddyContentMessageToAllAsync_result  { linkAndSendBuddyContentMessageToAllAsync_result_success :: LT.Text
  , linkAndSendBuddyContentMessageToAllAsync_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable LinkAndSendBuddyContentMessageToAllAsync_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` linkAndSendBuddyContentMessageToAllAsync_result_success record   `H.hashWithSalt` linkAndSendBuddyContentMessageToAllAsync_result_e record  
instance QC.Arbitrary LinkAndSendBuddyContentMessageToAllAsync_result where 
  arbitrary = M.liftM LinkAndSendBuddyContentMessageToAllAsync_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_LinkAndSendBuddyContentMessageToAllAsync_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_LinkAndSendBuddyContentMessageToAllAsync_result{linkAndSendBuddyContentMessageToAllAsync_result_success = linkAndSendBuddyContentMessageToAllAsync_result_success obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToAllAsync_result{linkAndSendBuddyContentMessageToAllAsync_result_success = linkAndSendBuddyContentMessageToAllAsync_result_success obj}
    , if obj == default_LinkAndSendBuddyContentMessageToAllAsync_result{linkAndSendBuddyContentMessageToAllAsync_result_e = linkAndSendBuddyContentMessageToAllAsync_result_e obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToAllAsync_result{linkAndSendBuddyContentMessageToAllAsync_result_e = linkAndSendBuddyContentMessageToAllAsync_result_e obj}
    ]
from_LinkAndSendBuddyContentMessageToAllAsync_result :: LinkAndSendBuddyContentMessageToAllAsync_result -> T.ThriftVal
from_LinkAndSendBuddyContentMessageToAllAsync_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4008 -> (1, ("e",from_TalkException _v4008))) <$> linkAndSendBuddyContentMessageToAllAsync_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4008 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v4008))) $ linkAndSendBuddyContentMessageToAllAsync_result_success record
    , (\_v4008 -> (1, ("e",from_TalkException _v4008))) <$> linkAndSendBuddyContentMessageToAllAsync_result_e record
    ]
    )
write_LinkAndSendBuddyContentMessageToAllAsync_result :: T.Protocol p => p -> LinkAndSendBuddyContentMessageToAllAsync_result -> P.IO ()
write_LinkAndSendBuddyContentMessageToAllAsync_result oprot record = T.writeVal oprot $ from_LinkAndSendBuddyContentMessageToAllAsync_result record
encode_LinkAndSendBuddyContentMessageToAllAsync_result :: T.StatelessProtocol p => p -> LinkAndSendBuddyContentMessageToAllAsync_result -> LBS.ByteString
encode_LinkAndSendBuddyContentMessageToAllAsync_result oprot record = T.serializeVal oprot $ from_LinkAndSendBuddyContentMessageToAllAsync_result record
to_LinkAndSendBuddyContentMessageToAllAsync_result :: T.ThriftVal -> LinkAndSendBuddyContentMessageToAllAsync_result
to_LinkAndSendBuddyContentMessageToAllAsync_result (T.TStruct fields) = LinkAndSendBuddyContentMessageToAllAsync_result{
  linkAndSendBuddyContentMessageToAllAsync_result_success = P.maybe (linkAndSendBuddyContentMessageToAllAsync_result_success default_LinkAndSendBuddyContentMessageToAllAsync_result) (\(_,_val4010) -> (case _val4010 of {T.TString _val4011 -> E.decodeUtf8 _val4011; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  linkAndSendBuddyContentMessageToAllAsync_result_e = P.maybe (P.Nothing) (\(_,_val4010) -> P.Just (case _val4010 of {T.TStruct _val4012 -> (to_TalkException (T.TStruct _val4012)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_LinkAndSendBuddyContentMessageToAllAsync_result _ = P.error "not a struct"
read_LinkAndSendBuddyContentMessageToAllAsync_result :: T.Protocol p => p -> P.IO LinkAndSendBuddyContentMessageToAllAsync_result
read_LinkAndSendBuddyContentMessageToAllAsync_result iprot = to_LinkAndSendBuddyContentMessageToAllAsync_result <$> T.readVal iprot (T.T_STRUCT typemap_LinkAndSendBuddyContentMessageToAllAsync_result)
decode_LinkAndSendBuddyContentMessageToAllAsync_result :: T.StatelessProtocol p => p -> LBS.ByteString -> LinkAndSendBuddyContentMessageToAllAsync_result
decode_LinkAndSendBuddyContentMessageToAllAsync_result iprot bs = to_LinkAndSendBuddyContentMessageToAllAsync_result $ T.deserializeVal iprot (T.T_STRUCT typemap_LinkAndSendBuddyContentMessageToAllAsync_result) bs
typemap_LinkAndSendBuddyContentMessageToAllAsync_result :: T.TypeMap
typemap_LinkAndSendBuddyContentMessageToAllAsync_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_LinkAndSendBuddyContentMessageToAllAsync_result :: LinkAndSendBuddyContentMessageToAllAsync_result
default_LinkAndSendBuddyContentMessageToAllAsync_result = LinkAndSendBuddyContentMessageToAllAsync_result{
  linkAndSendBuddyContentMessageToAllAsync_result_success = "",
  linkAndSendBuddyContentMessageToAllAsync_result_e = P.Nothing}
data LinkAndSendBuddyContentMessageToMids_args = LinkAndSendBuddyContentMessageToMids_args  { linkAndSendBuddyContentMessageToMids_args_requestId :: LT.Text
  , linkAndSendBuddyContentMessageToMids_args_msg :: Message
  , linkAndSendBuddyContentMessageToMids_args_sourceContentId :: LT.Text
  , linkAndSendBuddyContentMessageToMids_args_mids :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable LinkAndSendBuddyContentMessageToMids_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` linkAndSendBuddyContentMessageToMids_args_requestId record   `H.hashWithSalt` linkAndSendBuddyContentMessageToMids_args_msg record   `H.hashWithSalt` linkAndSendBuddyContentMessageToMids_args_sourceContentId record   `H.hashWithSalt` linkAndSendBuddyContentMessageToMids_args_mids record  
instance QC.Arbitrary LinkAndSendBuddyContentMessageToMids_args where 
  arbitrary = M.liftM LinkAndSendBuddyContentMessageToMids_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_LinkAndSendBuddyContentMessageToMids_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_LinkAndSendBuddyContentMessageToMids_args{linkAndSendBuddyContentMessageToMids_args_requestId = linkAndSendBuddyContentMessageToMids_args_requestId obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToMids_args{linkAndSendBuddyContentMessageToMids_args_requestId = linkAndSendBuddyContentMessageToMids_args_requestId obj}
    , if obj == default_LinkAndSendBuddyContentMessageToMids_args{linkAndSendBuddyContentMessageToMids_args_msg = linkAndSendBuddyContentMessageToMids_args_msg obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToMids_args{linkAndSendBuddyContentMessageToMids_args_msg = linkAndSendBuddyContentMessageToMids_args_msg obj}
    , if obj == default_LinkAndSendBuddyContentMessageToMids_args{linkAndSendBuddyContentMessageToMids_args_sourceContentId = linkAndSendBuddyContentMessageToMids_args_sourceContentId obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToMids_args{linkAndSendBuddyContentMessageToMids_args_sourceContentId = linkAndSendBuddyContentMessageToMids_args_sourceContentId obj}
    , if obj == default_LinkAndSendBuddyContentMessageToMids_args{linkAndSendBuddyContentMessageToMids_args_mids = linkAndSendBuddyContentMessageToMids_args_mids obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToMids_args{linkAndSendBuddyContentMessageToMids_args_mids = linkAndSendBuddyContentMessageToMids_args_mids obj}
    ]
from_LinkAndSendBuddyContentMessageToMids_args :: LinkAndSendBuddyContentMessageToMids_args -> T.ThriftVal
from_LinkAndSendBuddyContentMessageToMids_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4015 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4015))) $ linkAndSendBuddyContentMessageToMids_args_requestId record
  , (\_v4015 -> P.Just (2, ("msg",from_Message _v4015))) $ linkAndSendBuddyContentMessageToMids_args_msg record
  , (\_v4015 -> P.Just (3, ("sourceContentId",T.TString $ E.encodeUtf8 _v4015))) $ linkAndSendBuddyContentMessageToMids_args_sourceContentId record
  , (\_v4015 -> P.Just (4, ("mids",T.TList T.T_STRING $ P.map (\_v4017 -> T.TString $ E.encodeUtf8 _v4017) $ Vector.toList _v4015))) $ linkAndSendBuddyContentMessageToMids_args_mids record
  ]
write_LinkAndSendBuddyContentMessageToMids_args :: T.Protocol p => p -> LinkAndSendBuddyContentMessageToMids_args -> P.IO ()
write_LinkAndSendBuddyContentMessageToMids_args oprot record = T.writeVal oprot $ from_LinkAndSendBuddyContentMessageToMids_args record
encode_LinkAndSendBuddyContentMessageToMids_args :: T.StatelessProtocol p => p -> LinkAndSendBuddyContentMessageToMids_args -> LBS.ByteString
encode_LinkAndSendBuddyContentMessageToMids_args oprot record = T.serializeVal oprot $ from_LinkAndSendBuddyContentMessageToMids_args record
to_LinkAndSendBuddyContentMessageToMids_args :: T.ThriftVal -> LinkAndSendBuddyContentMessageToMids_args
to_LinkAndSendBuddyContentMessageToMids_args (T.TStruct fields) = LinkAndSendBuddyContentMessageToMids_args{
  linkAndSendBuddyContentMessageToMids_args_requestId = P.maybe (linkAndSendBuddyContentMessageToMids_args_requestId default_LinkAndSendBuddyContentMessageToMids_args) (\(_,_val4019) -> (case _val4019 of {T.TString _val4020 -> E.decodeUtf8 _val4020; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  linkAndSendBuddyContentMessageToMids_args_msg = P.maybe (linkAndSendBuddyContentMessageToMids_args_msg default_LinkAndSendBuddyContentMessageToMids_args) (\(_,_val4019) -> (case _val4019 of {T.TStruct _val4021 -> (to_Message (T.TStruct _val4021)); _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  linkAndSendBuddyContentMessageToMids_args_sourceContentId = P.maybe (linkAndSendBuddyContentMessageToMids_args_sourceContentId default_LinkAndSendBuddyContentMessageToMids_args) (\(_,_val4019) -> (case _val4019 of {T.TString _val4022 -> E.decodeUtf8 _val4022; _ -> P.error "wrong type"})) (Map.lookup (3) fields),
  linkAndSendBuddyContentMessageToMids_args_mids = P.maybe (linkAndSendBuddyContentMessageToMids_args_mids default_LinkAndSendBuddyContentMessageToMids_args) (\(_,_val4019) -> (case _val4019 of {T.TList _ _val4023 -> (Vector.fromList $ P.map (\_v4024 -> (case _v4024 of {T.TString _val4025 -> E.decodeUtf8 _val4025; _ -> P.error "wrong type"})) _val4023); _ -> P.error "wrong type"})) (Map.lookup (4) fields)
  }
to_LinkAndSendBuddyContentMessageToMids_args _ = P.error "not a struct"
read_LinkAndSendBuddyContentMessageToMids_args :: T.Protocol p => p -> P.IO LinkAndSendBuddyContentMessageToMids_args
read_LinkAndSendBuddyContentMessageToMids_args iprot = to_LinkAndSendBuddyContentMessageToMids_args <$> T.readVal iprot (T.T_STRUCT typemap_LinkAndSendBuddyContentMessageToMids_args)
decode_LinkAndSendBuddyContentMessageToMids_args :: T.StatelessProtocol p => p -> LBS.ByteString -> LinkAndSendBuddyContentMessageToMids_args
decode_LinkAndSendBuddyContentMessageToMids_args iprot bs = to_LinkAndSendBuddyContentMessageToMids_args $ T.deserializeVal iprot (T.T_STRUCT typemap_LinkAndSendBuddyContentMessageToMids_args) bs
typemap_LinkAndSendBuddyContentMessageToMids_args :: T.TypeMap
typemap_LinkAndSendBuddyContentMessageToMids_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message))),(3,("sourceContentId",T.T_STRING)),(4,("mids",(T.T_LIST T.T_STRING)))]
default_LinkAndSendBuddyContentMessageToMids_args :: LinkAndSendBuddyContentMessageToMids_args
default_LinkAndSendBuddyContentMessageToMids_args = LinkAndSendBuddyContentMessageToMids_args{
  linkAndSendBuddyContentMessageToMids_args_requestId = "",
  linkAndSendBuddyContentMessageToMids_args_msg = default_Message,
  linkAndSendBuddyContentMessageToMids_args_sourceContentId = "",
  linkAndSendBuddyContentMessageToMids_args_mids = Vector.empty}
data LinkAndSendBuddyContentMessageToMids_result = LinkAndSendBuddyContentMessageToMids_result  { linkAndSendBuddyContentMessageToMids_result_success :: SendBuddyMessageResult
  , linkAndSendBuddyContentMessageToMids_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable LinkAndSendBuddyContentMessageToMids_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` linkAndSendBuddyContentMessageToMids_result_success record   `H.hashWithSalt` linkAndSendBuddyContentMessageToMids_result_e record  
instance QC.Arbitrary LinkAndSendBuddyContentMessageToMids_result where 
  arbitrary = M.liftM LinkAndSendBuddyContentMessageToMids_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_LinkAndSendBuddyContentMessageToMids_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_LinkAndSendBuddyContentMessageToMids_result{linkAndSendBuddyContentMessageToMids_result_success = linkAndSendBuddyContentMessageToMids_result_success obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToMids_result{linkAndSendBuddyContentMessageToMids_result_success = linkAndSendBuddyContentMessageToMids_result_success obj}
    , if obj == default_LinkAndSendBuddyContentMessageToMids_result{linkAndSendBuddyContentMessageToMids_result_e = linkAndSendBuddyContentMessageToMids_result_e obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToMids_result{linkAndSendBuddyContentMessageToMids_result_e = linkAndSendBuddyContentMessageToMids_result_e obj}
    ]
from_LinkAndSendBuddyContentMessageToMids_result :: LinkAndSendBuddyContentMessageToMids_result -> T.ThriftVal
from_LinkAndSendBuddyContentMessageToMids_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4028 -> (1, ("e",from_TalkException _v4028))) <$> linkAndSendBuddyContentMessageToMids_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4028 -> P.Just (0, ("success",from_SendBuddyMessageResult _v4028))) $ linkAndSendBuddyContentMessageToMids_result_success record
    , (\_v4028 -> (1, ("e",from_TalkException _v4028))) <$> linkAndSendBuddyContentMessageToMids_result_e record
    ]
    )
write_LinkAndSendBuddyContentMessageToMids_result :: T.Protocol p => p -> LinkAndSendBuddyContentMessageToMids_result -> P.IO ()
write_LinkAndSendBuddyContentMessageToMids_result oprot record = T.writeVal oprot $ from_LinkAndSendBuddyContentMessageToMids_result record
encode_LinkAndSendBuddyContentMessageToMids_result :: T.StatelessProtocol p => p -> LinkAndSendBuddyContentMessageToMids_result -> LBS.ByteString
encode_LinkAndSendBuddyContentMessageToMids_result oprot record = T.serializeVal oprot $ from_LinkAndSendBuddyContentMessageToMids_result record
to_LinkAndSendBuddyContentMessageToMids_result :: T.ThriftVal -> LinkAndSendBuddyContentMessageToMids_result
to_LinkAndSendBuddyContentMessageToMids_result (T.TStruct fields) = LinkAndSendBuddyContentMessageToMids_result{
  linkAndSendBuddyContentMessageToMids_result_success = P.maybe (linkAndSendBuddyContentMessageToMids_result_success default_LinkAndSendBuddyContentMessageToMids_result) (\(_,_val4030) -> (case _val4030 of {T.TStruct _val4031 -> (to_SendBuddyMessageResult (T.TStruct _val4031)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  linkAndSendBuddyContentMessageToMids_result_e = P.maybe (P.Nothing) (\(_,_val4030) -> P.Just (case _val4030 of {T.TStruct _val4032 -> (to_TalkException (T.TStruct _val4032)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_LinkAndSendBuddyContentMessageToMids_result _ = P.error "not a struct"
read_LinkAndSendBuddyContentMessageToMids_result :: T.Protocol p => p -> P.IO LinkAndSendBuddyContentMessageToMids_result
read_LinkAndSendBuddyContentMessageToMids_result iprot = to_LinkAndSendBuddyContentMessageToMids_result <$> T.readVal iprot (T.T_STRUCT typemap_LinkAndSendBuddyContentMessageToMids_result)
decode_LinkAndSendBuddyContentMessageToMids_result :: T.StatelessProtocol p => p -> LBS.ByteString -> LinkAndSendBuddyContentMessageToMids_result
decode_LinkAndSendBuddyContentMessageToMids_result iprot bs = to_LinkAndSendBuddyContentMessageToMids_result $ T.deserializeVal iprot (T.T_STRUCT typemap_LinkAndSendBuddyContentMessageToMids_result) bs
typemap_LinkAndSendBuddyContentMessageToMids_result :: T.TypeMap
typemap_LinkAndSendBuddyContentMessageToMids_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SendBuddyMessageResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_LinkAndSendBuddyContentMessageToMids_result :: LinkAndSendBuddyContentMessageToMids_result
default_LinkAndSendBuddyContentMessageToMids_result = LinkAndSendBuddyContentMessageToMids_result{
  linkAndSendBuddyContentMessageToMids_result_success = default_SendBuddyMessageResult,
  linkAndSendBuddyContentMessageToMids_result_e = P.Nothing}
data NotifyBuddyBlocked_args = NotifyBuddyBlocked_args  { notifyBuddyBlocked_args_buddyMid :: LT.Text
  , notifyBuddyBlocked_args_blockerMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable NotifyBuddyBlocked_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` notifyBuddyBlocked_args_buddyMid record   `H.hashWithSalt` notifyBuddyBlocked_args_blockerMid record  
instance QC.Arbitrary NotifyBuddyBlocked_args where 
  arbitrary = M.liftM NotifyBuddyBlocked_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_NotifyBuddyBlocked_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_NotifyBuddyBlocked_args{notifyBuddyBlocked_args_buddyMid = notifyBuddyBlocked_args_buddyMid obj} then P.Nothing else P.Just $ default_NotifyBuddyBlocked_args{notifyBuddyBlocked_args_buddyMid = notifyBuddyBlocked_args_buddyMid obj}
    , if obj == default_NotifyBuddyBlocked_args{notifyBuddyBlocked_args_blockerMid = notifyBuddyBlocked_args_blockerMid obj} then P.Nothing else P.Just $ default_NotifyBuddyBlocked_args{notifyBuddyBlocked_args_blockerMid = notifyBuddyBlocked_args_blockerMid obj}
    ]
from_NotifyBuddyBlocked_args :: NotifyBuddyBlocked_args -> T.ThriftVal
from_NotifyBuddyBlocked_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4035 -> P.Just (1, ("buddyMid",T.TString $ E.encodeUtf8 _v4035))) $ notifyBuddyBlocked_args_buddyMid record
  , (\_v4035 -> P.Just (2, ("blockerMid",T.TString $ E.encodeUtf8 _v4035))) $ notifyBuddyBlocked_args_blockerMid record
  ]
write_NotifyBuddyBlocked_args :: T.Protocol p => p -> NotifyBuddyBlocked_args -> P.IO ()
write_NotifyBuddyBlocked_args oprot record = T.writeVal oprot $ from_NotifyBuddyBlocked_args record
encode_NotifyBuddyBlocked_args :: T.StatelessProtocol p => p -> NotifyBuddyBlocked_args -> LBS.ByteString
encode_NotifyBuddyBlocked_args oprot record = T.serializeVal oprot $ from_NotifyBuddyBlocked_args record
to_NotifyBuddyBlocked_args :: T.ThriftVal -> NotifyBuddyBlocked_args
to_NotifyBuddyBlocked_args (T.TStruct fields) = NotifyBuddyBlocked_args{
  notifyBuddyBlocked_args_buddyMid = P.maybe (notifyBuddyBlocked_args_buddyMid default_NotifyBuddyBlocked_args) (\(_,_val4037) -> (case _val4037 of {T.TString _val4038 -> E.decodeUtf8 _val4038; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  notifyBuddyBlocked_args_blockerMid = P.maybe (notifyBuddyBlocked_args_blockerMid default_NotifyBuddyBlocked_args) (\(_,_val4037) -> (case _val4037 of {T.TString _val4039 -> E.decodeUtf8 _val4039; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_NotifyBuddyBlocked_args _ = P.error "not a struct"
read_NotifyBuddyBlocked_args :: T.Protocol p => p -> P.IO NotifyBuddyBlocked_args
read_NotifyBuddyBlocked_args iprot = to_NotifyBuddyBlocked_args <$> T.readVal iprot (T.T_STRUCT typemap_NotifyBuddyBlocked_args)
decode_NotifyBuddyBlocked_args :: T.StatelessProtocol p => p -> LBS.ByteString -> NotifyBuddyBlocked_args
decode_NotifyBuddyBlocked_args iprot bs = to_NotifyBuddyBlocked_args $ T.deserializeVal iprot (T.T_STRUCT typemap_NotifyBuddyBlocked_args) bs
typemap_NotifyBuddyBlocked_args :: T.TypeMap
typemap_NotifyBuddyBlocked_args = Map.fromList [(1,("buddyMid",T.T_STRING)),(2,("blockerMid",T.T_STRING))]
default_NotifyBuddyBlocked_args :: NotifyBuddyBlocked_args
default_NotifyBuddyBlocked_args = NotifyBuddyBlocked_args{
  notifyBuddyBlocked_args_buddyMid = "",
  notifyBuddyBlocked_args_blockerMid = ""}
data NotifyBuddyBlocked_result = NotifyBuddyBlocked_result  { notifyBuddyBlocked_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable NotifyBuddyBlocked_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` notifyBuddyBlocked_result_e record  
instance QC.Arbitrary NotifyBuddyBlocked_result where 
  arbitrary = M.liftM NotifyBuddyBlocked_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_NotifyBuddyBlocked_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_NotifyBuddyBlocked_result{notifyBuddyBlocked_result_e = notifyBuddyBlocked_result_e obj} then P.Nothing else P.Just $ default_NotifyBuddyBlocked_result{notifyBuddyBlocked_result_e = notifyBuddyBlocked_result_e obj}
    ]
from_NotifyBuddyBlocked_result :: NotifyBuddyBlocked_result -> T.ThriftVal
from_NotifyBuddyBlocked_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4042 -> (1, ("e",from_TalkException _v4042))) <$> notifyBuddyBlocked_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4042 -> (1, ("e",from_TalkException _v4042))) <$> notifyBuddyBlocked_result_e record
    ]
    )
write_NotifyBuddyBlocked_result :: T.Protocol p => p -> NotifyBuddyBlocked_result -> P.IO ()
write_NotifyBuddyBlocked_result oprot record = T.writeVal oprot $ from_NotifyBuddyBlocked_result record
encode_NotifyBuddyBlocked_result :: T.StatelessProtocol p => p -> NotifyBuddyBlocked_result -> LBS.ByteString
encode_NotifyBuddyBlocked_result oprot record = T.serializeVal oprot $ from_NotifyBuddyBlocked_result record
to_NotifyBuddyBlocked_result :: T.ThriftVal -> NotifyBuddyBlocked_result
to_NotifyBuddyBlocked_result (T.TStruct fields) = NotifyBuddyBlocked_result{
  notifyBuddyBlocked_result_e = P.maybe (P.Nothing) (\(_,_val4044) -> P.Just (case _val4044 of {T.TStruct _val4045 -> (to_TalkException (T.TStruct _val4045)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_NotifyBuddyBlocked_result _ = P.error "not a struct"
read_NotifyBuddyBlocked_result :: T.Protocol p => p -> P.IO NotifyBuddyBlocked_result
read_NotifyBuddyBlocked_result iprot = to_NotifyBuddyBlocked_result <$> T.readVal iprot (T.T_STRUCT typemap_NotifyBuddyBlocked_result)
decode_NotifyBuddyBlocked_result :: T.StatelessProtocol p => p -> LBS.ByteString -> NotifyBuddyBlocked_result
decode_NotifyBuddyBlocked_result iprot bs = to_NotifyBuddyBlocked_result $ T.deserializeVal iprot (T.T_STRUCT typemap_NotifyBuddyBlocked_result) bs
typemap_NotifyBuddyBlocked_result :: T.TypeMap
typemap_NotifyBuddyBlocked_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_NotifyBuddyBlocked_result :: NotifyBuddyBlocked_result
default_NotifyBuddyBlocked_result = NotifyBuddyBlocked_result{
  notifyBuddyBlocked_result_e = P.Nothing}
data NotifyBuddyUnblocked_args = NotifyBuddyUnblocked_args  { notifyBuddyUnblocked_args_buddyMid :: LT.Text
  , notifyBuddyUnblocked_args_blockerMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable NotifyBuddyUnblocked_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` notifyBuddyUnblocked_args_buddyMid record   `H.hashWithSalt` notifyBuddyUnblocked_args_blockerMid record  
instance QC.Arbitrary NotifyBuddyUnblocked_args where 
  arbitrary = M.liftM NotifyBuddyUnblocked_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_NotifyBuddyUnblocked_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_NotifyBuddyUnblocked_args{notifyBuddyUnblocked_args_buddyMid = notifyBuddyUnblocked_args_buddyMid obj} then P.Nothing else P.Just $ default_NotifyBuddyUnblocked_args{notifyBuddyUnblocked_args_buddyMid = notifyBuddyUnblocked_args_buddyMid obj}
    , if obj == default_NotifyBuddyUnblocked_args{notifyBuddyUnblocked_args_blockerMid = notifyBuddyUnblocked_args_blockerMid obj} then P.Nothing else P.Just $ default_NotifyBuddyUnblocked_args{notifyBuddyUnblocked_args_blockerMid = notifyBuddyUnblocked_args_blockerMid obj}
    ]
from_NotifyBuddyUnblocked_args :: NotifyBuddyUnblocked_args -> T.ThriftVal
from_NotifyBuddyUnblocked_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4048 -> P.Just (1, ("buddyMid",T.TString $ E.encodeUtf8 _v4048))) $ notifyBuddyUnblocked_args_buddyMid record
  , (\_v4048 -> P.Just (2, ("blockerMid",T.TString $ E.encodeUtf8 _v4048))) $ notifyBuddyUnblocked_args_blockerMid record
  ]
write_NotifyBuddyUnblocked_args :: T.Protocol p => p -> NotifyBuddyUnblocked_args -> P.IO ()
write_NotifyBuddyUnblocked_args oprot record = T.writeVal oprot $ from_NotifyBuddyUnblocked_args record
encode_NotifyBuddyUnblocked_args :: T.StatelessProtocol p => p -> NotifyBuddyUnblocked_args -> LBS.ByteString
encode_NotifyBuddyUnblocked_args oprot record = T.serializeVal oprot $ from_NotifyBuddyUnblocked_args record
to_NotifyBuddyUnblocked_args :: T.ThriftVal -> NotifyBuddyUnblocked_args
to_NotifyBuddyUnblocked_args (T.TStruct fields) = NotifyBuddyUnblocked_args{
  notifyBuddyUnblocked_args_buddyMid = P.maybe (notifyBuddyUnblocked_args_buddyMid default_NotifyBuddyUnblocked_args) (\(_,_val4050) -> (case _val4050 of {T.TString _val4051 -> E.decodeUtf8 _val4051; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  notifyBuddyUnblocked_args_blockerMid = P.maybe (notifyBuddyUnblocked_args_blockerMid default_NotifyBuddyUnblocked_args) (\(_,_val4050) -> (case _val4050 of {T.TString _val4052 -> E.decodeUtf8 _val4052; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_NotifyBuddyUnblocked_args _ = P.error "not a struct"
read_NotifyBuddyUnblocked_args :: T.Protocol p => p -> P.IO NotifyBuddyUnblocked_args
read_NotifyBuddyUnblocked_args iprot = to_NotifyBuddyUnblocked_args <$> T.readVal iprot (T.T_STRUCT typemap_NotifyBuddyUnblocked_args)
decode_NotifyBuddyUnblocked_args :: T.StatelessProtocol p => p -> LBS.ByteString -> NotifyBuddyUnblocked_args
decode_NotifyBuddyUnblocked_args iprot bs = to_NotifyBuddyUnblocked_args $ T.deserializeVal iprot (T.T_STRUCT typemap_NotifyBuddyUnblocked_args) bs
typemap_NotifyBuddyUnblocked_args :: T.TypeMap
typemap_NotifyBuddyUnblocked_args = Map.fromList [(1,("buddyMid",T.T_STRING)),(2,("blockerMid",T.T_STRING))]
default_NotifyBuddyUnblocked_args :: NotifyBuddyUnblocked_args
default_NotifyBuddyUnblocked_args = NotifyBuddyUnblocked_args{
  notifyBuddyUnblocked_args_buddyMid = "",
  notifyBuddyUnblocked_args_blockerMid = ""}
data NotifyBuddyUnblocked_result = NotifyBuddyUnblocked_result  { notifyBuddyUnblocked_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable NotifyBuddyUnblocked_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` notifyBuddyUnblocked_result_e record  
instance QC.Arbitrary NotifyBuddyUnblocked_result where 
  arbitrary = M.liftM NotifyBuddyUnblocked_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_NotifyBuddyUnblocked_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_NotifyBuddyUnblocked_result{notifyBuddyUnblocked_result_e = notifyBuddyUnblocked_result_e obj} then P.Nothing else P.Just $ default_NotifyBuddyUnblocked_result{notifyBuddyUnblocked_result_e = notifyBuddyUnblocked_result_e obj}
    ]
from_NotifyBuddyUnblocked_result :: NotifyBuddyUnblocked_result -> T.ThriftVal
from_NotifyBuddyUnblocked_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4055 -> (1, ("e",from_TalkException _v4055))) <$> notifyBuddyUnblocked_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4055 -> (1, ("e",from_TalkException _v4055))) <$> notifyBuddyUnblocked_result_e record
    ]
    )
write_NotifyBuddyUnblocked_result :: T.Protocol p => p -> NotifyBuddyUnblocked_result -> P.IO ()
write_NotifyBuddyUnblocked_result oprot record = T.writeVal oprot $ from_NotifyBuddyUnblocked_result record
encode_NotifyBuddyUnblocked_result :: T.StatelessProtocol p => p -> NotifyBuddyUnblocked_result -> LBS.ByteString
encode_NotifyBuddyUnblocked_result oprot record = T.serializeVal oprot $ from_NotifyBuddyUnblocked_result record
to_NotifyBuddyUnblocked_result :: T.ThriftVal -> NotifyBuddyUnblocked_result
to_NotifyBuddyUnblocked_result (T.TStruct fields) = NotifyBuddyUnblocked_result{
  notifyBuddyUnblocked_result_e = P.maybe (P.Nothing) (\(_,_val4057) -> P.Just (case _val4057 of {T.TStruct _val4058 -> (to_TalkException (T.TStruct _val4058)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_NotifyBuddyUnblocked_result _ = P.error "not a struct"
read_NotifyBuddyUnblocked_result :: T.Protocol p => p -> P.IO NotifyBuddyUnblocked_result
read_NotifyBuddyUnblocked_result iprot = to_NotifyBuddyUnblocked_result <$> T.readVal iprot (T.T_STRUCT typemap_NotifyBuddyUnblocked_result)
decode_NotifyBuddyUnblocked_result :: T.StatelessProtocol p => p -> LBS.ByteString -> NotifyBuddyUnblocked_result
decode_NotifyBuddyUnblocked_result iprot bs = to_NotifyBuddyUnblocked_result $ T.deserializeVal iprot (T.T_STRUCT typemap_NotifyBuddyUnblocked_result) bs
typemap_NotifyBuddyUnblocked_result :: T.TypeMap
typemap_NotifyBuddyUnblocked_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_NotifyBuddyUnblocked_result :: NotifyBuddyUnblocked_result
default_NotifyBuddyUnblocked_result = NotifyBuddyUnblocked_result{
  notifyBuddyUnblocked_result_e = P.Nothing}
data RegisterBuddy_args = RegisterBuddy_args  { registerBuddy_args_buddyId :: LT.Text
  , registerBuddy_args_searchId :: LT.Text
  , registerBuddy_args_displayName :: LT.Text
  , registerBuddy_args_statusMeessage :: LT.Text
  , registerBuddy_args_picture :: LBS.ByteString
  , registerBuddy_args_settings :: (Map.HashMap LT.Text LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RegisterBuddy_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` registerBuddy_args_buddyId record   `H.hashWithSalt` registerBuddy_args_searchId record   `H.hashWithSalt` registerBuddy_args_displayName record   `H.hashWithSalt` registerBuddy_args_statusMeessage record   `H.hashWithSalt` registerBuddy_args_picture record   `H.hashWithSalt` registerBuddy_args_settings record  
instance QC.Arbitrary RegisterBuddy_args where 
  arbitrary = M.liftM RegisterBuddy_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_RegisterBuddy_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RegisterBuddy_args{registerBuddy_args_buddyId = registerBuddy_args_buddyId obj} then P.Nothing else P.Just $ default_RegisterBuddy_args{registerBuddy_args_buddyId = registerBuddy_args_buddyId obj}
    , if obj == default_RegisterBuddy_args{registerBuddy_args_searchId = registerBuddy_args_searchId obj} then P.Nothing else P.Just $ default_RegisterBuddy_args{registerBuddy_args_searchId = registerBuddy_args_searchId obj}
    , if obj == default_RegisterBuddy_args{registerBuddy_args_displayName = registerBuddy_args_displayName obj} then P.Nothing else P.Just $ default_RegisterBuddy_args{registerBuddy_args_displayName = registerBuddy_args_displayName obj}
    , if obj == default_RegisterBuddy_args{registerBuddy_args_statusMeessage = registerBuddy_args_statusMeessage obj} then P.Nothing else P.Just $ default_RegisterBuddy_args{registerBuddy_args_statusMeessage = registerBuddy_args_statusMeessage obj}
    , if obj == default_RegisterBuddy_args{registerBuddy_args_picture = registerBuddy_args_picture obj} then P.Nothing else P.Just $ default_RegisterBuddy_args{registerBuddy_args_picture = registerBuddy_args_picture obj}
    , if obj == default_RegisterBuddy_args{registerBuddy_args_settings = registerBuddy_args_settings obj} then P.Nothing else P.Just $ default_RegisterBuddy_args{registerBuddy_args_settings = registerBuddy_args_settings obj}
    ]
from_RegisterBuddy_args :: RegisterBuddy_args -> T.ThriftVal
from_RegisterBuddy_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4061 -> P.Just (2, ("buddyId",T.TString $ E.encodeUtf8 _v4061))) $ registerBuddy_args_buddyId record
  , (\_v4061 -> P.Just (3, ("searchId",T.TString $ E.encodeUtf8 _v4061))) $ registerBuddy_args_searchId record
  , (\_v4061 -> P.Just (4, ("displayName",T.TString $ E.encodeUtf8 _v4061))) $ registerBuddy_args_displayName record
  , (\_v4061 -> P.Just (5, ("statusMeessage",T.TString $ E.encodeUtf8 _v4061))) $ registerBuddy_args_statusMeessage record
  , (\_v4061 -> P.Just (6, ("picture",T.TBinary _v4061))) $ registerBuddy_args_picture record
  , (\_v4061 -> P.Just (7, ("settings",T.TMap T.T_STRING T.T_STRING $ P.map (\(_k4062,_v4063) -> (T.TString $ E.encodeUtf8 _k4062, T.TString $ E.encodeUtf8 _v4063)) $ Map.toList _v4061))) $ registerBuddy_args_settings record
  ]
write_RegisterBuddy_args :: T.Protocol p => p -> RegisterBuddy_args -> P.IO ()
write_RegisterBuddy_args oprot record = T.writeVal oprot $ from_RegisterBuddy_args record
encode_RegisterBuddy_args :: T.StatelessProtocol p => p -> RegisterBuddy_args -> LBS.ByteString
encode_RegisterBuddy_args oprot record = T.serializeVal oprot $ from_RegisterBuddy_args record
to_RegisterBuddy_args :: T.ThriftVal -> RegisterBuddy_args
to_RegisterBuddy_args (T.TStruct fields) = RegisterBuddy_args{
  registerBuddy_args_buddyId = P.maybe (registerBuddy_args_buddyId default_RegisterBuddy_args) (\(_,_val4065) -> (case _val4065 of {T.TString _val4066 -> E.decodeUtf8 _val4066; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  registerBuddy_args_searchId = P.maybe (registerBuddy_args_searchId default_RegisterBuddy_args) (\(_,_val4065) -> (case _val4065 of {T.TString _val4067 -> E.decodeUtf8 _val4067; _ -> P.error "wrong type"})) (Map.lookup (3) fields),
  registerBuddy_args_displayName = P.maybe (registerBuddy_args_displayName default_RegisterBuddy_args) (\(_,_val4065) -> (case _val4065 of {T.TString _val4068 -> E.decodeUtf8 _val4068; _ -> P.error "wrong type"})) (Map.lookup (4) fields),
  registerBuddy_args_statusMeessage = P.maybe (registerBuddy_args_statusMeessage default_RegisterBuddy_args) (\(_,_val4065) -> (case _val4065 of {T.TString _val4069 -> E.decodeUtf8 _val4069; _ -> P.error "wrong type"})) (Map.lookup (5) fields),
  registerBuddy_args_picture = P.maybe (registerBuddy_args_picture default_RegisterBuddy_args) (\(_,_val4065) -> (case _val4065 of {T.TBinary _val4070 -> _val4070; T.TString _val4070 -> _val4070; _ -> P.error "wrong type"})) (Map.lookup (6) fields),
  registerBuddy_args_settings = P.maybe (registerBuddy_args_settings default_RegisterBuddy_args) (\(_,_val4065) -> (case _val4065 of {T.TMap _ _ _val4071 -> (Map.fromList $ P.map (\(_k4073,_v4072) -> ((case _k4073 of {T.TString _val4074 -> E.decodeUtf8 _val4074; _ -> P.error "wrong type"}),(case _v4072 of {T.TString _val4075 -> E.decodeUtf8 _val4075; _ -> P.error "wrong type"}))) _val4071); _ -> P.error "wrong type"})) (Map.lookup (7) fields)
  }
to_RegisterBuddy_args _ = P.error "not a struct"
read_RegisterBuddy_args :: T.Protocol p => p -> P.IO RegisterBuddy_args
read_RegisterBuddy_args iprot = to_RegisterBuddy_args <$> T.readVal iprot (T.T_STRUCT typemap_RegisterBuddy_args)
decode_RegisterBuddy_args :: T.StatelessProtocol p => p -> LBS.ByteString -> RegisterBuddy_args
decode_RegisterBuddy_args iprot bs = to_RegisterBuddy_args $ T.deserializeVal iprot (T.T_STRUCT typemap_RegisterBuddy_args) bs
typemap_RegisterBuddy_args :: T.TypeMap
typemap_RegisterBuddy_args = Map.fromList [(2,("buddyId",T.T_STRING)),(3,("searchId",T.T_STRING)),(4,("displayName",T.T_STRING)),(5,("statusMeessage",T.T_STRING)),(6,("picture",T.T_BINARY)),(7,("settings",(T.T_MAP T.T_STRING T.T_STRING)))]
default_RegisterBuddy_args :: RegisterBuddy_args
default_RegisterBuddy_args = RegisterBuddy_args{
  registerBuddy_args_buddyId = "",
  registerBuddy_args_searchId = "",
  registerBuddy_args_displayName = "",
  registerBuddy_args_statusMeessage = "",
  registerBuddy_args_picture = "",
  registerBuddy_args_settings = Map.empty}
data RegisterBuddy_result = RegisterBuddy_result  { registerBuddy_result_success :: LT.Text
  , registerBuddy_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RegisterBuddy_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` registerBuddy_result_success record   `H.hashWithSalt` registerBuddy_result_e record  
instance QC.Arbitrary RegisterBuddy_result where 
  arbitrary = M.liftM RegisterBuddy_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_RegisterBuddy_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RegisterBuddy_result{registerBuddy_result_success = registerBuddy_result_success obj} then P.Nothing else P.Just $ default_RegisterBuddy_result{registerBuddy_result_success = registerBuddy_result_success obj}
    , if obj == default_RegisterBuddy_result{registerBuddy_result_e = registerBuddy_result_e obj} then P.Nothing else P.Just $ default_RegisterBuddy_result{registerBuddy_result_e = registerBuddy_result_e obj}
    ]
from_RegisterBuddy_result :: RegisterBuddy_result -> T.ThriftVal
from_RegisterBuddy_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4078 -> (1, ("e",from_TalkException _v4078))) <$> registerBuddy_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4078 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v4078))) $ registerBuddy_result_success record
    , (\_v4078 -> (1, ("e",from_TalkException _v4078))) <$> registerBuddy_result_e record
    ]
    )
write_RegisterBuddy_result :: T.Protocol p => p -> RegisterBuddy_result -> P.IO ()
write_RegisterBuddy_result oprot record = T.writeVal oprot $ from_RegisterBuddy_result record
encode_RegisterBuddy_result :: T.StatelessProtocol p => p -> RegisterBuddy_result -> LBS.ByteString
encode_RegisterBuddy_result oprot record = T.serializeVal oprot $ from_RegisterBuddy_result record
to_RegisterBuddy_result :: T.ThriftVal -> RegisterBuddy_result
to_RegisterBuddy_result (T.TStruct fields) = RegisterBuddy_result{
  registerBuddy_result_success = P.maybe (registerBuddy_result_success default_RegisterBuddy_result) (\(_,_val4080) -> (case _val4080 of {T.TString _val4081 -> E.decodeUtf8 _val4081; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  registerBuddy_result_e = P.maybe (P.Nothing) (\(_,_val4080) -> P.Just (case _val4080 of {T.TStruct _val4082 -> (to_TalkException (T.TStruct _val4082)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_RegisterBuddy_result _ = P.error "not a struct"
read_RegisterBuddy_result :: T.Protocol p => p -> P.IO RegisterBuddy_result
read_RegisterBuddy_result iprot = to_RegisterBuddy_result <$> T.readVal iprot (T.T_STRUCT typemap_RegisterBuddy_result)
decode_RegisterBuddy_result :: T.StatelessProtocol p => p -> LBS.ByteString -> RegisterBuddy_result
decode_RegisterBuddy_result iprot bs = to_RegisterBuddy_result $ T.deserializeVal iprot (T.T_STRUCT typemap_RegisterBuddy_result) bs
typemap_RegisterBuddy_result :: T.TypeMap
typemap_RegisterBuddy_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_RegisterBuddy_result :: RegisterBuddy_result
default_RegisterBuddy_result = RegisterBuddy_result{
  registerBuddy_result_success = "",
  registerBuddy_result_e = P.Nothing}
data RegisterBuddyAdmin_args = RegisterBuddyAdmin_args  { registerBuddyAdmin_args_buddyId :: LT.Text
  , registerBuddyAdmin_args_searchId :: LT.Text
  , registerBuddyAdmin_args_displayName :: LT.Text
  , registerBuddyAdmin_args_statusMessage :: LT.Text
  , registerBuddyAdmin_args_picture :: LBS.ByteString
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RegisterBuddyAdmin_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` registerBuddyAdmin_args_buddyId record   `H.hashWithSalt` registerBuddyAdmin_args_searchId record   `H.hashWithSalt` registerBuddyAdmin_args_displayName record   `H.hashWithSalt` registerBuddyAdmin_args_statusMessage record   `H.hashWithSalt` registerBuddyAdmin_args_picture record  
instance QC.Arbitrary RegisterBuddyAdmin_args where 
  arbitrary = M.liftM RegisterBuddyAdmin_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_RegisterBuddyAdmin_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_buddyId = registerBuddyAdmin_args_buddyId obj} then P.Nothing else P.Just $ default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_buddyId = registerBuddyAdmin_args_buddyId obj}
    , if obj == default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_searchId = registerBuddyAdmin_args_searchId obj} then P.Nothing else P.Just $ default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_searchId = registerBuddyAdmin_args_searchId obj}
    , if obj == default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_displayName = registerBuddyAdmin_args_displayName obj} then P.Nothing else P.Just $ default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_displayName = registerBuddyAdmin_args_displayName obj}
    , if obj == default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_statusMessage = registerBuddyAdmin_args_statusMessage obj} then P.Nothing else P.Just $ default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_statusMessage = registerBuddyAdmin_args_statusMessage obj}
    , if obj == default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_picture = registerBuddyAdmin_args_picture obj} then P.Nothing else P.Just $ default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_picture = registerBuddyAdmin_args_picture obj}
    ]
from_RegisterBuddyAdmin_args :: RegisterBuddyAdmin_args -> T.ThriftVal
from_RegisterBuddyAdmin_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4085 -> P.Just (2, ("buddyId",T.TString $ E.encodeUtf8 _v4085))) $ registerBuddyAdmin_args_buddyId record
  , (\_v4085 -> P.Just (3, ("searchId",T.TString $ E.encodeUtf8 _v4085))) $ registerBuddyAdmin_args_searchId record
  , (\_v4085 -> P.Just (4, ("displayName",T.TString $ E.encodeUtf8 _v4085))) $ registerBuddyAdmin_args_displayName record
  , (\_v4085 -> P.Just (5, ("statusMessage",T.TString $ E.encodeUtf8 _v4085))) $ registerBuddyAdmin_args_statusMessage record
  , (\_v4085 -> P.Just (6, ("picture",T.TBinary _v4085))) $ registerBuddyAdmin_args_picture record
  ]
write_RegisterBuddyAdmin_args :: T.Protocol p => p -> RegisterBuddyAdmin_args -> P.IO ()
write_RegisterBuddyAdmin_args oprot record = T.writeVal oprot $ from_RegisterBuddyAdmin_args record
encode_RegisterBuddyAdmin_args :: T.StatelessProtocol p => p -> RegisterBuddyAdmin_args -> LBS.ByteString
encode_RegisterBuddyAdmin_args oprot record = T.serializeVal oprot $ from_RegisterBuddyAdmin_args record
to_RegisterBuddyAdmin_args :: T.ThriftVal -> RegisterBuddyAdmin_args
to_RegisterBuddyAdmin_args (T.TStruct fields) = RegisterBuddyAdmin_args{
  registerBuddyAdmin_args_buddyId = P.maybe (registerBuddyAdmin_args_buddyId default_RegisterBuddyAdmin_args) (\(_,_val4087) -> (case _val4087 of {T.TString _val4088 -> E.decodeUtf8 _val4088; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  registerBuddyAdmin_args_searchId = P.maybe (registerBuddyAdmin_args_searchId default_RegisterBuddyAdmin_args) (\(_,_val4087) -> (case _val4087 of {T.TString _val4089 -> E.decodeUtf8 _val4089; _ -> P.error "wrong type"})) (Map.lookup (3) fields),
  registerBuddyAdmin_args_displayName = P.maybe (registerBuddyAdmin_args_displayName default_RegisterBuddyAdmin_args) (\(_,_val4087) -> (case _val4087 of {T.TString _val4090 -> E.decodeUtf8 _val4090; _ -> P.error "wrong type"})) (Map.lookup (4) fields),
  registerBuddyAdmin_args_statusMessage = P.maybe (registerBuddyAdmin_args_statusMessage default_RegisterBuddyAdmin_args) (\(_,_val4087) -> (case _val4087 of {T.TString _val4091 -> E.decodeUtf8 _val4091; _ -> P.error "wrong type"})) (Map.lookup (5) fields),
  registerBuddyAdmin_args_picture = P.maybe (registerBuddyAdmin_args_picture default_RegisterBuddyAdmin_args) (\(_,_val4087) -> (case _val4087 of {T.TBinary _val4092 -> _val4092; T.TString _val4092 -> _val4092; _ -> P.error "wrong type"})) (Map.lookup (6) fields)
  }
to_RegisterBuddyAdmin_args _ = P.error "not a struct"
read_RegisterBuddyAdmin_args :: T.Protocol p => p -> P.IO RegisterBuddyAdmin_args
read_RegisterBuddyAdmin_args iprot = to_RegisterBuddyAdmin_args <$> T.readVal iprot (T.T_STRUCT typemap_RegisterBuddyAdmin_args)
decode_RegisterBuddyAdmin_args :: T.StatelessProtocol p => p -> LBS.ByteString -> RegisterBuddyAdmin_args
decode_RegisterBuddyAdmin_args iprot bs = to_RegisterBuddyAdmin_args $ T.deserializeVal iprot (T.T_STRUCT typemap_RegisterBuddyAdmin_args) bs
typemap_RegisterBuddyAdmin_args :: T.TypeMap
typemap_RegisterBuddyAdmin_args = Map.fromList [(2,("buddyId",T.T_STRING)),(3,("searchId",T.T_STRING)),(4,("displayName",T.T_STRING)),(5,("statusMessage",T.T_STRING)),(6,("picture",T.T_BINARY))]
default_RegisterBuddyAdmin_args :: RegisterBuddyAdmin_args
default_RegisterBuddyAdmin_args = RegisterBuddyAdmin_args{
  registerBuddyAdmin_args_buddyId = "",
  registerBuddyAdmin_args_searchId = "",
  registerBuddyAdmin_args_displayName = "",
  registerBuddyAdmin_args_statusMessage = "",
  registerBuddyAdmin_args_picture = ""}
data RegisterBuddyAdmin_result = RegisterBuddyAdmin_result  { registerBuddyAdmin_result_success :: LT.Text
  , registerBuddyAdmin_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RegisterBuddyAdmin_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` registerBuddyAdmin_result_success record   `H.hashWithSalt` registerBuddyAdmin_result_e record  
instance QC.Arbitrary RegisterBuddyAdmin_result where 
  arbitrary = M.liftM RegisterBuddyAdmin_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_RegisterBuddyAdmin_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RegisterBuddyAdmin_result{registerBuddyAdmin_result_success = registerBuddyAdmin_result_success obj} then P.Nothing else P.Just $ default_RegisterBuddyAdmin_result{registerBuddyAdmin_result_success = registerBuddyAdmin_result_success obj}
    , if obj == default_RegisterBuddyAdmin_result{registerBuddyAdmin_result_e = registerBuddyAdmin_result_e obj} then P.Nothing else P.Just $ default_RegisterBuddyAdmin_result{registerBuddyAdmin_result_e = registerBuddyAdmin_result_e obj}
    ]
from_RegisterBuddyAdmin_result :: RegisterBuddyAdmin_result -> T.ThriftVal
from_RegisterBuddyAdmin_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4095 -> (1, ("e",from_TalkException _v4095))) <$> registerBuddyAdmin_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4095 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v4095))) $ registerBuddyAdmin_result_success record
    , (\_v4095 -> (1, ("e",from_TalkException _v4095))) <$> registerBuddyAdmin_result_e record
    ]
    )
write_RegisterBuddyAdmin_result :: T.Protocol p => p -> RegisterBuddyAdmin_result -> P.IO ()
write_RegisterBuddyAdmin_result oprot record = T.writeVal oprot $ from_RegisterBuddyAdmin_result record
encode_RegisterBuddyAdmin_result :: T.StatelessProtocol p => p -> RegisterBuddyAdmin_result -> LBS.ByteString
encode_RegisterBuddyAdmin_result oprot record = T.serializeVal oprot $ from_RegisterBuddyAdmin_result record
to_RegisterBuddyAdmin_result :: T.ThriftVal -> RegisterBuddyAdmin_result
to_RegisterBuddyAdmin_result (T.TStruct fields) = RegisterBuddyAdmin_result{
  registerBuddyAdmin_result_success = P.maybe (registerBuddyAdmin_result_success default_RegisterBuddyAdmin_result) (\(_,_val4097) -> (case _val4097 of {T.TString _val4098 -> E.decodeUtf8 _val4098; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  registerBuddyAdmin_result_e = P.maybe (P.Nothing) (\(_,_val4097) -> P.Just (case _val4097 of {T.TStruct _val4099 -> (to_TalkException (T.TStruct _val4099)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_RegisterBuddyAdmin_result _ = P.error "not a struct"
read_RegisterBuddyAdmin_result :: T.Protocol p => p -> P.IO RegisterBuddyAdmin_result
read_RegisterBuddyAdmin_result iprot = to_RegisterBuddyAdmin_result <$> T.readVal iprot (T.T_STRUCT typemap_RegisterBuddyAdmin_result)
decode_RegisterBuddyAdmin_result :: T.StatelessProtocol p => p -> LBS.ByteString -> RegisterBuddyAdmin_result
decode_RegisterBuddyAdmin_result iprot bs = to_RegisterBuddyAdmin_result $ T.deserializeVal iprot (T.T_STRUCT typemap_RegisterBuddyAdmin_result) bs
typemap_RegisterBuddyAdmin_result :: T.TypeMap
typemap_RegisterBuddyAdmin_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_RegisterBuddyAdmin_result :: RegisterBuddyAdmin_result
default_RegisterBuddyAdmin_result = RegisterBuddyAdmin_result{
  registerBuddyAdmin_result_success = "",
  registerBuddyAdmin_result_e = P.Nothing}
data ReissueContactTicket_args = ReissueContactTicket_args  { reissueContactTicket_args_expirationTime :: I.Int64
  , reissueContactTicket_args_maxUseCount :: I.Int32
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable ReissueContactTicket_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` reissueContactTicket_args_expirationTime record   `H.hashWithSalt` reissueContactTicket_args_maxUseCount record  
instance QC.Arbitrary ReissueContactTicket_args where 
  arbitrary = M.liftM ReissueContactTicket_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_ReissueContactTicket_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_ReissueContactTicket_args{reissueContactTicket_args_expirationTime = reissueContactTicket_args_expirationTime obj} then P.Nothing else P.Just $ default_ReissueContactTicket_args{reissueContactTicket_args_expirationTime = reissueContactTicket_args_expirationTime obj}
    , if obj == default_ReissueContactTicket_args{reissueContactTicket_args_maxUseCount = reissueContactTicket_args_maxUseCount obj} then P.Nothing else P.Just $ default_ReissueContactTicket_args{reissueContactTicket_args_maxUseCount = reissueContactTicket_args_maxUseCount obj}
    ]
from_ReissueContactTicket_args :: ReissueContactTicket_args -> T.ThriftVal
from_ReissueContactTicket_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4102 -> P.Just (3, ("expirationTime",T.TI64 _v4102))) $ reissueContactTicket_args_expirationTime record
  , (\_v4102 -> P.Just (4, ("maxUseCount",T.TI32 _v4102))) $ reissueContactTicket_args_maxUseCount record
  ]
write_ReissueContactTicket_args :: T.Protocol p => p -> ReissueContactTicket_args -> P.IO ()
write_ReissueContactTicket_args oprot record = T.writeVal oprot $ from_ReissueContactTicket_args record
encode_ReissueContactTicket_args :: T.StatelessProtocol p => p -> ReissueContactTicket_args -> LBS.ByteString
encode_ReissueContactTicket_args oprot record = T.serializeVal oprot $ from_ReissueContactTicket_args record
to_ReissueContactTicket_args :: T.ThriftVal -> ReissueContactTicket_args
to_ReissueContactTicket_args (T.TStruct fields) = ReissueContactTicket_args{
  reissueContactTicket_args_expirationTime = P.maybe (reissueContactTicket_args_expirationTime default_ReissueContactTicket_args) (\(_,_val4104) -> (case _val4104 of {T.TI64 _val4105 -> _val4105; _ -> P.error "wrong type"})) (Map.lookup (3) fields),
  reissueContactTicket_args_maxUseCount = P.maybe (reissueContactTicket_args_maxUseCount default_ReissueContactTicket_args) (\(_,_val4104) -> (case _val4104 of {T.TI32 _val4106 -> _val4106; _ -> P.error "wrong type"})) (Map.lookup (4) fields)
  }
to_ReissueContactTicket_args _ = P.error "not a struct"
read_ReissueContactTicket_args :: T.Protocol p => p -> P.IO ReissueContactTicket_args
read_ReissueContactTicket_args iprot = to_ReissueContactTicket_args <$> T.readVal iprot (T.T_STRUCT typemap_ReissueContactTicket_args)
decode_ReissueContactTicket_args :: T.StatelessProtocol p => p -> LBS.ByteString -> ReissueContactTicket_args
decode_ReissueContactTicket_args iprot bs = to_ReissueContactTicket_args $ T.deserializeVal iprot (T.T_STRUCT typemap_ReissueContactTicket_args) bs
typemap_ReissueContactTicket_args :: T.TypeMap
typemap_ReissueContactTicket_args = Map.fromList [(3,("expirationTime",T.T_I64)),(4,("maxUseCount",T.T_I32))]
default_ReissueContactTicket_args :: ReissueContactTicket_args
default_ReissueContactTicket_args = ReissueContactTicket_args{
  reissueContactTicket_args_expirationTime = 0,
  reissueContactTicket_args_maxUseCount = 0}
data ReissueContactTicket_result = ReissueContactTicket_result  { reissueContactTicket_result_success :: LT.Text
  , reissueContactTicket_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable ReissueContactTicket_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` reissueContactTicket_result_success record   `H.hashWithSalt` reissueContactTicket_result_e record  
instance QC.Arbitrary ReissueContactTicket_result where 
  arbitrary = M.liftM ReissueContactTicket_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_ReissueContactTicket_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_ReissueContactTicket_result{reissueContactTicket_result_success = reissueContactTicket_result_success obj} then P.Nothing else P.Just $ default_ReissueContactTicket_result{reissueContactTicket_result_success = reissueContactTicket_result_success obj}
    , if obj == default_ReissueContactTicket_result{reissueContactTicket_result_e = reissueContactTicket_result_e obj} then P.Nothing else P.Just $ default_ReissueContactTicket_result{reissueContactTicket_result_e = reissueContactTicket_result_e obj}
    ]
from_ReissueContactTicket_result :: ReissueContactTicket_result -> T.ThriftVal
from_ReissueContactTicket_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4109 -> (1, ("e",from_TalkException _v4109))) <$> reissueContactTicket_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4109 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v4109))) $ reissueContactTicket_result_success record
    , (\_v4109 -> (1, ("e",from_TalkException _v4109))) <$> reissueContactTicket_result_e record
    ]
    )
write_ReissueContactTicket_result :: T.Protocol p => p -> ReissueContactTicket_result -> P.IO ()
write_ReissueContactTicket_result oprot record = T.writeVal oprot $ from_ReissueContactTicket_result record
encode_ReissueContactTicket_result :: T.StatelessProtocol p => p -> ReissueContactTicket_result -> LBS.ByteString
encode_ReissueContactTicket_result oprot record = T.serializeVal oprot $ from_ReissueContactTicket_result record
to_ReissueContactTicket_result :: T.ThriftVal -> ReissueContactTicket_result
to_ReissueContactTicket_result (T.TStruct fields) = ReissueContactTicket_result{
  reissueContactTicket_result_success = P.maybe (reissueContactTicket_result_success default_ReissueContactTicket_result) (\(_,_val4111) -> (case _val4111 of {T.TString _val4112 -> E.decodeUtf8 _val4112; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  reissueContactTicket_result_e = P.maybe (P.Nothing) (\(_,_val4111) -> P.Just (case _val4111 of {T.TStruct _val4113 -> (to_TalkException (T.TStruct _val4113)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_ReissueContactTicket_result _ = P.error "not a struct"
read_ReissueContactTicket_result :: T.Protocol p => p -> P.IO ReissueContactTicket_result
read_ReissueContactTicket_result iprot = to_ReissueContactTicket_result <$> T.readVal iprot (T.T_STRUCT typemap_ReissueContactTicket_result)
decode_ReissueContactTicket_result :: T.StatelessProtocol p => p -> LBS.ByteString -> ReissueContactTicket_result
decode_ReissueContactTicket_result iprot bs = to_ReissueContactTicket_result $ T.deserializeVal iprot (T.T_STRUCT typemap_ReissueContactTicket_result) bs
typemap_ReissueContactTicket_result :: T.TypeMap
typemap_ReissueContactTicket_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_ReissueContactTicket_result :: ReissueContactTicket_result
default_ReissueContactTicket_result = ReissueContactTicket_result{
  reissueContactTicket_result_success = "",
  reissueContactTicket_result_e = P.Nothing}
data RemoveBuddyMember_args = RemoveBuddyMember_args  { removeBuddyMember_args_requestId :: LT.Text
  , removeBuddyMember_args_userMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RemoveBuddyMember_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` removeBuddyMember_args_requestId record   `H.hashWithSalt` removeBuddyMember_args_userMid record  
instance QC.Arbitrary RemoveBuddyMember_args where 
  arbitrary = M.liftM RemoveBuddyMember_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_RemoveBuddyMember_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RemoveBuddyMember_args{removeBuddyMember_args_requestId = removeBuddyMember_args_requestId obj} then P.Nothing else P.Just $ default_RemoveBuddyMember_args{removeBuddyMember_args_requestId = removeBuddyMember_args_requestId obj}
    , if obj == default_RemoveBuddyMember_args{removeBuddyMember_args_userMid = removeBuddyMember_args_userMid obj} then P.Nothing else P.Just $ default_RemoveBuddyMember_args{removeBuddyMember_args_userMid = removeBuddyMember_args_userMid obj}
    ]
from_RemoveBuddyMember_args :: RemoveBuddyMember_args -> T.ThriftVal
from_RemoveBuddyMember_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4116 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4116))) $ removeBuddyMember_args_requestId record
  , (\_v4116 -> P.Just (2, ("userMid",T.TString $ E.encodeUtf8 _v4116))) $ removeBuddyMember_args_userMid record
  ]
write_RemoveBuddyMember_args :: T.Protocol p => p -> RemoveBuddyMember_args -> P.IO ()
write_RemoveBuddyMember_args oprot record = T.writeVal oprot $ from_RemoveBuddyMember_args record
encode_RemoveBuddyMember_args :: T.StatelessProtocol p => p -> RemoveBuddyMember_args -> LBS.ByteString
encode_RemoveBuddyMember_args oprot record = T.serializeVal oprot $ from_RemoveBuddyMember_args record
to_RemoveBuddyMember_args :: T.ThriftVal -> RemoveBuddyMember_args
to_RemoveBuddyMember_args (T.TStruct fields) = RemoveBuddyMember_args{
  removeBuddyMember_args_requestId = P.maybe (removeBuddyMember_args_requestId default_RemoveBuddyMember_args) (\(_,_val4118) -> (case _val4118 of {T.TString _val4119 -> E.decodeUtf8 _val4119; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  removeBuddyMember_args_userMid = P.maybe (removeBuddyMember_args_userMid default_RemoveBuddyMember_args) (\(_,_val4118) -> (case _val4118 of {T.TString _val4120 -> E.decodeUtf8 _val4120; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_RemoveBuddyMember_args _ = P.error "not a struct"
read_RemoveBuddyMember_args :: T.Protocol p => p -> P.IO RemoveBuddyMember_args
read_RemoveBuddyMember_args iprot = to_RemoveBuddyMember_args <$> T.readVal iprot (T.T_STRUCT typemap_RemoveBuddyMember_args)
decode_RemoveBuddyMember_args :: T.StatelessProtocol p => p -> LBS.ByteString -> RemoveBuddyMember_args
decode_RemoveBuddyMember_args iprot bs = to_RemoveBuddyMember_args $ T.deserializeVal iprot (T.T_STRUCT typemap_RemoveBuddyMember_args) bs
typemap_RemoveBuddyMember_args :: T.TypeMap
typemap_RemoveBuddyMember_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("userMid",T.T_STRING))]
default_RemoveBuddyMember_args :: RemoveBuddyMember_args
default_RemoveBuddyMember_args = RemoveBuddyMember_args{
  removeBuddyMember_args_requestId = "",
  removeBuddyMember_args_userMid = ""}
data RemoveBuddyMember_result = RemoveBuddyMember_result  { removeBuddyMember_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RemoveBuddyMember_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` removeBuddyMember_result_e record  
instance QC.Arbitrary RemoveBuddyMember_result where 
  arbitrary = M.liftM RemoveBuddyMember_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_RemoveBuddyMember_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RemoveBuddyMember_result{removeBuddyMember_result_e = removeBuddyMember_result_e obj} then P.Nothing else P.Just $ default_RemoveBuddyMember_result{removeBuddyMember_result_e = removeBuddyMember_result_e obj}
    ]
from_RemoveBuddyMember_result :: RemoveBuddyMember_result -> T.ThriftVal
from_RemoveBuddyMember_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4123 -> (1, ("e",from_TalkException _v4123))) <$> removeBuddyMember_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4123 -> (1, ("e",from_TalkException _v4123))) <$> removeBuddyMember_result_e record
    ]
    )
write_RemoveBuddyMember_result :: T.Protocol p => p -> RemoveBuddyMember_result -> P.IO ()
write_RemoveBuddyMember_result oprot record = T.writeVal oprot $ from_RemoveBuddyMember_result record
encode_RemoveBuddyMember_result :: T.StatelessProtocol p => p -> RemoveBuddyMember_result -> LBS.ByteString
encode_RemoveBuddyMember_result oprot record = T.serializeVal oprot $ from_RemoveBuddyMember_result record
to_RemoveBuddyMember_result :: T.ThriftVal -> RemoveBuddyMember_result
to_RemoveBuddyMember_result (T.TStruct fields) = RemoveBuddyMember_result{
  removeBuddyMember_result_e = P.maybe (P.Nothing) (\(_,_val4125) -> P.Just (case _val4125 of {T.TStruct _val4126 -> (to_TalkException (T.TStruct _val4126)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_RemoveBuddyMember_result _ = P.error "not a struct"
read_RemoveBuddyMember_result :: T.Protocol p => p -> P.IO RemoveBuddyMember_result
read_RemoveBuddyMember_result iprot = to_RemoveBuddyMember_result <$> T.readVal iprot (T.T_STRUCT typemap_RemoveBuddyMember_result)
decode_RemoveBuddyMember_result :: T.StatelessProtocol p => p -> LBS.ByteString -> RemoveBuddyMember_result
decode_RemoveBuddyMember_result iprot bs = to_RemoveBuddyMember_result $ T.deserializeVal iprot (T.T_STRUCT typemap_RemoveBuddyMember_result) bs
typemap_RemoveBuddyMember_result :: T.TypeMap
typemap_RemoveBuddyMember_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_RemoveBuddyMember_result :: RemoveBuddyMember_result
default_RemoveBuddyMember_result = RemoveBuddyMember_result{
  removeBuddyMember_result_e = P.Nothing}
data RemoveBuddyMembers_args = RemoveBuddyMembers_args  { removeBuddyMembers_args_requestId :: LT.Text
  , removeBuddyMembers_args_userMids :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RemoveBuddyMembers_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` removeBuddyMembers_args_requestId record   `H.hashWithSalt` removeBuddyMembers_args_userMids record  
instance QC.Arbitrary RemoveBuddyMembers_args where 
  arbitrary = M.liftM RemoveBuddyMembers_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_RemoveBuddyMembers_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RemoveBuddyMembers_args{removeBuddyMembers_args_requestId = removeBuddyMembers_args_requestId obj} then P.Nothing else P.Just $ default_RemoveBuddyMembers_args{removeBuddyMembers_args_requestId = removeBuddyMembers_args_requestId obj}
    , if obj == default_RemoveBuddyMembers_args{removeBuddyMembers_args_userMids = removeBuddyMembers_args_userMids obj} then P.Nothing else P.Just $ default_RemoveBuddyMembers_args{removeBuddyMembers_args_userMids = removeBuddyMembers_args_userMids obj}
    ]
from_RemoveBuddyMembers_args :: RemoveBuddyMembers_args -> T.ThriftVal
from_RemoveBuddyMembers_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4129 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4129))) $ removeBuddyMembers_args_requestId record
  , (\_v4129 -> P.Just (2, ("userMids",T.TList T.T_STRING $ P.map (\_v4131 -> T.TString $ E.encodeUtf8 _v4131) $ Vector.toList _v4129))) $ removeBuddyMembers_args_userMids record
  ]
write_RemoveBuddyMembers_args :: T.Protocol p => p -> RemoveBuddyMembers_args -> P.IO ()
write_RemoveBuddyMembers_args oprot record = T.writeVal oprot $ from_RemoveBuddyMembers_args record
encode_RemoveBuddyMembers_args :: T.StatelessProtocol p => p -> RemoveBuddyMembers_args -> LBS.ByteString
encode_RemoveBuddyMembers_args oprot record = T.serializeVal oprot $ from_RemoveBuddyMembers_args record
to_RemoveBuddyMembers_args :: T.ThriftVal -> RemoveBuddyMembers_args
to_RemoveBuddyMembers_args (T.TStruct fields) = RemoveBuddyMembers_args{
  removeBuddyMembers_args_requestId = P.maybe (removeBuddyMembers_args_requestId default_RemoveBuddyMembers_args) (\(_,_val4133) -> (case _val4133 of {T.TString _val4134 -> E.decodeUtf8 _val4134; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  removeBuddyMembers_args_userMids = P.maybe (removeBuddyMembers_args_userMids default_RemoveBuddyMembers_args) (\(_,_val4133) -> (case _val4133 of {T.TList _ _val4135 -> (Vector.fromList $ P.map (\_v4136 -> (case _v4136 of {T.TString _val4137 -> E.decodeUtf8 _val4137; _ -> P.error "wrong type"})) _val4135); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_RemoveBuddyMembers_args _ = P.error "not a struct"
read_RemoveBuddyMembers_args :: T.Protocol p => p -> P.IO RemoveBuddyMembers_args
read_RemoveBuddyMembers_args iprot = to_RemoveBuddyMembers_args <$> T.readVal iprot (T.T_STRUCT typemap_RemoveBuddyMembers_args)
decode_RemoveBuddyMembers_args :: T.StatelessProtocol p => p -> LBS.ByteString -> RemoveBuddyMembers_args
decode_RemoveBuddyMembers_args iprot bs = to_RemoveBuddyMembers_args $ T.deserializeVal iprot (T.T_STRUCT typemap_RemoveBuddyMembers_args) bs
typemap_RemoveBuddyMembers_args :: T.TypeMap
typemap_RemoveBuddyMembers_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("userMids",(T.T_LIST T.T_STRING)))]
default_RemoveBuddyMembers_args :: RemoveBuddyMembers_args
default_RemoveBuddyMembers_args = RemoveBuddyMembers_args{
  removeBuddyMembers_args_requestId = "",
  removeBuddyMembers_args_userMids = Vector.empty}
data RemoveBuddyMembers_result = RemoveBuddyMembers_result  { removeBuddyMembers_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RemoveBuddyMembers_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` removeBuddyMembers_result_e record  
instance QC.Arbitrary RemoveBuddyMembers_result where 
  arbitrary = M.liftM RemoveBuddyMembers_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_RemoveBuddyMembers_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RemoveBuddyMembers_result{removeBuddyMembers_result_e = removeBuddyMembers_result_e obj} then P.Nothing else P.Just $ default_RemoveBuddyMembers_result{removeBuddyMembers_result_e = removeBuddyMembers_result_e obj}
    ]
from_RemoveBuddyMembers_result :: RemoveBuddyMembers_result -> T.ThriftVal
from_RemoveBuddyMembers_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4140 -> (1, ("e",from_TalkException _v4140))) <$> removeBuddyMembers_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4140 -> (1, ("e",from_TalkException _v4140))) <$> removeBuddyMembers_result_e record
    ]
    )
write_RemoveBuddyMembers_result :: T.Protocol p => p -> RemoveBuddyMembers_result -> P.IO ()
write_RemoveBuddyMembers_result oprot record = T.writeVal oprot $ from_RemoveBuddyMembers_result record
encode_RemoveBuddyMembers_result :: T.StatelessProtocol p => p -> RemoveBuddyMembers_result -> LBS.ByteString
encode_RemoveBuddyMembers_result oprot record = T.serializeVal oprot $ from_RemoveBuddyMembers_result record
to_RemoveBuddyMembers_result :: T.ThriftVal -> RemoveBuddyMembers_result
to_RemoveBuddyMembers_result (T.TStruct fields) = RemoveBuddyMembers_result{
  removeBuddyMembers_result_e = P.maybe (P.Nothing) (\(_,_val4142) -> P.Just (case _val4142 of {T.TStruct _val4143 -> (to_TalkException (T.TStruct _val4143)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_RemoveBuddyMembers_result _ = P.error "not a struct"
read_RemoveBuddyMembers_result :: T.Protocol p => p -> P.IO RemoveBuddyMembers_result
read_RemoveBuddyMembers_result iprot = to_RemoveBuddyMembers_result <$> T.readVal iprot (T.T_STRUCT typemap_RemoveBuddyMembers_result)
decode_RemoveBuddyMembers_result :: T.StatelessProtocol p => p -> LBS.ByteString -> RemoveBuddyMembers_result
decode_RemoveBuddyMembers_result iprot bs = to_RemoveBuddyMembers_result $ T.deserializeVal iprot (T.T_STRUCT typemap_RemoveBuddyMembers_result) bs
typemap_RemoveBuddyMembers_result :: T.TypeMap
typemap_RemoveBuddyMembers_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_RemoveBuddyMembers_result :: RemoveBuddyMembers_result
default_RemoveBuddyMembers_result = RemoveBuddyMembers_result{
  removeBuddyMembers_result_e = P.Nothing}
data SendBuddyContentMessageToAll_args = SendBuddyContentMessageToAll_args  { sendBuddyContentMessageToAll_args_requestId :: LT.Text
  , sendBuddyContentMessageToAll_args_msg :: Message
  , sendBuddyContentMessageToAll_args_content :: LBS.ByteString
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyContentMessageToAll_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyContentMessageToAll_args_requestId record   `H.hashWithSalt` sendBuddyContentMessageToAll_args_msg record   `H.hashWithSalt` sendBuddyContentMessageToAll_args_content record  
instance QC.Arbitrary SendBuddyContentMessageToAll_args where 
  arbitrary = M.liftM SendBuddyContentMessageToAll_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendBuddyContentMessageToAll_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyContentMessageToAll_args{sendBuddyContentMessageToAll_args_requestId = sendBuddyContentMessageToAll_args_requestId obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAll_args{sendBuddyContentMessageToAll_args_requestId = sendBuddyContentMessageToAll_args_requestId obj}
    , if obj == default_SendBuddyContentMessageToAll_args{sendBuddyContentMessageToAll_args_msg = sendBuddyContentMessageToAll_args_msg obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAll_args{sendBuddyContentMessageToAll_args_msg = sendBuddyContentMessageToAll_args_msg obj}
    , if obj == default_SendBuddyContentMessageToAll_args{sendBuddyContentMessageToAll_args_content = sendBuddyContentMessageToAll_args_content obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAll_args{sendBuddyContentMessageToAll_args_content = sendBuddyContentMessageToAll_args_content obj}
    ]
from_SendBuddyContentMessageToAll_args :: SendBuddyContentMessageToAll_args -> T.ThriftVal
from_SendBuddyContentMessageToAll_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4146 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4146))) $ sendBuddyContentMessageToAll_args_requestId record
  , (\_v4146 -> P.Just (2, ("msg",from_Message _v4146))) $ sendBuddyContentMessageToAll_args_msg record
  , (\_v4146 -> P.Just (3, ("content",T.TBinary _v4146))) $ sendBuddyContentMessageToAll_args_content record
  ]
write_SendBuddyContentMessageToAll_args :: T.Protocol p => p -> SendBuddyContentMessageToAll_args -> P.IO ()
write_SendBuddyContentMessageToAll_args oprot record = T.writeVal oprot $ from_SendBuddyContentMessageToAll_args record
encode_SendBuddyContentMessageToAll_args :: T.StatelessProtocol p => p -> SendBuddyContentMessageToAll_args -> LBS.ByteString
encode_SendBuddyContentMessageToAll_args oprot record = T.serializeVal oprot $ from_SendBuddyContentMessageToAll_args record
to_SendBuddyContentMessageToAll_args :: T.ThriftVal -> SendBuddyContentMessageToAll_args
to_SendBuddyContentMessageToAll_args (T.TStruct fields) = SendBuddyContentMessageToAll_args{
  sendBuddyContentMessageToAll_args_requestId = P.maybe (sendBuddyContentMessageToAll_args_requestId default_SendBuddyContentMessageToAll_args) (\(_,_val4148) -> (case _val4148 of {T.TString _val4149 -> E.decodeUtf8 _val4149; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendBuddyContentMessageToAll_args_msg = P.maybe (sendBuddyContentMessageToAll_args_msg default_SendBuddyContentMessageToAll_args) (\(_,_val4148) -> (case _val4148 of {T.TStruct _val4150 -> (to_Message (T.TStruct _val4150)); _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  sendBuddyContentMessageToAll_args_content = P.maybe (sendBuddyContentMessageToAll_args_content default_SendBuddyContentMessageToAll_args) (\(_,_val4148) -> (case _val4148 of {T.TBinary _val4151 -> _val4151; T.TString _val4151 -> _val4151; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_SendBuddyContentMessageToAll_args _ = P.error "not a struct"
read_SendBuddyContentMessageToAll_args :: T.Protocol p => p -> P.IO SendBuddyContentMessageToAll_args
read_SendBuddyContentMessageToAll_args iprot = to_SendBuddyContentMessageToAll_args <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToAll_args)
decode_SendBuddyContentMessageToAll_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyContentMessageToAll_args
decode_SendBuddyContentMessageToAll_args iprot bs = to_SendBuddyContentMessageToAll_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToAll_args) bs
typemap_SendBuddyContentMessageToAll_args :: T.TypeMap
typemap_SendBuddyContentMessageToAll_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message))),(3,("content",T.T_BINARY))]
default_SendBuddyContentMessageToAll_args :: SendBuddyContentMessageToAll_args
default_SendBuddyContentMessageToAll_args = SendBuddyContentMessageToAll_args{
  sendBuddyContentMessageToAll_args_requestId = "",
  sendBuddyContentMessageToAll_args_msg = default_Message,
  sendBuddyContentMessageToAll_args_content = ""}
data SendBuddyContentMessageToAll_result = SendBuddyContentMessageToAll_result  { sendBuddyContentMessageToAll_result_success :: SendBuddyMessageResult
  , sendBuddyContentMessageToAll_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyContentMessageToAll_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyContentMessageToAll_result_success record   `H.hashWithSalt` sendBuddyContentMessageToAll_result_e record  
instance QC.Arbitrary SendBuddyContentMessageToAll_result where 
  arbitrary = M.liftM SendBuddyContentMessageToAll_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendBuddyContentMessageToAll_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyContentMessageToAll_result{sendBuddyContentMessageToAll_result_success = sendBuddyContentMessageToAll_result_success obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAll_result{sendBuddyContentMessageToAll_result_success = sendBuddyContentMessageToAll_result_success obj}
    , if obj == default_SendBuddyContentMessageToAll_result{sendBuddyContentMessageToAll_result_e = sendBuddyContentMessageToAll_result_e obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAll_result{sendBuddyContentMessageToAll_result_e = sendBuddyContentMessageToAll_result_e obj}
    ]
from_SendBuddyContentMessageToAll_result :: SendBuddyContentMessageToAll_result -> T.ThriftVal
from_SendBuddyContentMessageToAll_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4154 -> (1, ("e",from_TalkException _v4154))) <$> sendBuddyContentMessageToAll_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4154 -> P.Just (0, ("success",from_SendBuddyMessageResult _v4154))) $ sendBuddyContentMessageToAll_result_success record
    , (\_v4154 -> (1, ("e",from_TalkException _v4154))) <$> sendBuddyContentMessageToAll_result_e record
    ]
    )
write_SendBuddyContentMessageToAll_result :: T.Protocol p => p -> SendBuddyContentMessageToAll_result -> P.IO ()
write_SendBuddyContentMessageToAll_result oprot record = T.writeVal oprot $ from_SendBuddyContentMessageToAll_result record
encode_SendBuddyContentMessageToAll_result :: T.StatelessProtocol p => p -> SendBuddyContentMessageToAll_result -> LBS.ByteString
encode_SendBuddyContentMessageToAll_result oprot record = T.serializeVal oprot $ from_SendBuddyContentMessageToAll_result record
to_SendBuddyContentMessageToAll_result :: T.ThriftVal -> SendBuddyContentMessageToAll_result
to_SendBuddyContentMessageToAll_result (T.TStruct fields) = SendBuddyContentMessageToAll_result{
  sendBuddyContentMessageToAll_result_success = P.maybe (sendBuddyContentMessageToAll_result_success default_SendBuddyContentMessageToAll_result) (\(_,_val4156) -> (case _val4156 of {T.TStruct _val4157 -> (to_SendBuddyMessageResult (T.TStruct _val4157)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  sendBuddyContentMessageToAll_result_e = P.maybe (P.Nothing) (\(_,_val4156) -> P.Just (case _val4156 of {T.TStruct _val4158 -> (to_TalkException (T.TStruct _val4158)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendBuddyContentMessageToAll_result _ = P.error "not a struct"
read_SendBuddyContentMessageToAll_result :: T.Protocol p => p -> P.IO SendBuddyContentMessageToAll_result
read_SendBuddyContentMessageToAll_result iprot = to_SendBuddyContentMessageToAll_result <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToAll_result)
decode_SendBuddyContentMessageToAll_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyContentMessageToAll_result
decode_SendBuddyContentMessageToAll_result iprot bs = to_SendBuddyContentMessageToAll_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToAll_result) bs
typemap_SendBuddyContentMessageToAll_result :: T.TypeMap
typemap_SendBuddyContentMessageToAll_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SendBuddyMessageResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SendBuddyContentMessageToAll_result :: SendBuddyContentMessageToAll_result
default_SendBuddyContentMessageToAll_result = SendBuddyContentMessageToAll_result{
  sendBuddyContentMessageToAll_result_success = default_SendBuddyMessageResult,
  sendBuddyContentMessageToAll_result_e = P.Nothing}
data SendBuddyContentMessageToAllAsync_args = SendBuddyContentMessageToAllAsync_args  { sendBuddyContentMessageToAllAsync_args_requestId :: LT.Text
  , sendBuddyContentMessageToAllAsync_args_msg :: Message
  , sendBuddyContentMessageToAllAsync_args_content :: LBS.ByteString
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyContentMessageToAllAsync_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyContentMessageToAllAsync_args_requestId record   `H.hashWithSalt` sendBuddyContentMessageToAllAsync_args_msg record   `H.hashWithSalt` sendBuddyContentMessageToAllAsync_args_content record  
instance QC.Arbitrary SendBuddyContentMessageToAllAsync_args where 
  arbitrary = M.liftM SendBuddyContentMessageToAllAsync_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendBuddyContentMessageToAllAsync_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyContentMessageToAllAsync_args{sendBuddyContentMessageToAllAsync_args_requestId = sendBuddyContentMessageToAllAsync_args_requestId obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAllAsync_args{sendBuddyContentMessageToAllAsync_args_requestId = sendBuddyContentMessageToAllAsync_args_requestId obj}
    , if obj == default_SendBuddyContentMessageToAllAsync_args{sendBuddyContentMessageToAllAsync_args_msg = sendBuddyContentMessageToAllAsync_args_msg obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAllAsync_args{sendBuddyContentMessageToAllAsync_args_msg = sendBuddyContentMessageToAllAsync_args_msg obj}
    , if obj == default_SendBuddyContentMessageToAllAsync_args{sendBuddyContentMessageToAllAsync_args_content = sendBuddyContentMessageToAllAsync_args_content obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAllAsync_args{sendBuddyContentMessageToAllAsync_args_content = sendBuddyContentMessageToAllAsync_args_content obj}
    ]
from_SendBuddyContentMessageToAllAsync_args :: SendBuddyContentMessageToAllAsync_args -> T.ThriftVal
from_SendBuddyContentMessageToAllAsync_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4161 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4161))) $ sendBuddyContentMessageToAllAsync_args_requestId record
  , (\_v4161 -> P.Just (2, ("msg",from_Message _v4161))) $ sendBuddyContentMessageToAllAsync_args_msg record
  , (\_v4161 -> P.Just (3, ("content",T.TBinary _v4161))) $ sendBuddyContentMessageToAllAsync_args_content record
  ]
write_SendBuddyContentMessageToAllAsync_args :: T.Protocol p => p -> SendBuddyContentMessageToAllAsync_args -> P.IO ()
write_SendBuddyContentMessageToAllAsync_args oprot record = T.writeVal oprot $ from_SendBuddyContentMessageToAllAsync_args record
encode_SendBuddyContentMessageToAllAsync_args :: T.StatelessProtocol p => p -> SendBuddyContentMessageToAllAsync_args -> LBS.ByteString
encode_SendBuddyContentMessageToAllAsync_args oprot record = T.serializeVal oprot $ from_SendBuddyContentMessageToAllAsync_args record
to_SendBuddyContentMessageToAllAsync_args :: T.ThriftVal -> SendBuddyContentMessageToAllAsync_args
to_SendBuddyContentMessageToAllAsync_args (T.TStruct fields) = SendBuddyContentMessageToAllAsync_args{
  sendBuddyContentMessageToAllAsync_args_requestId = P.maybe (sendBuddyContentMessageToAllAsync_args_requestId default_SendBuddyContentMessageToAllAsync_args) (\(_,_val4163) -> (case _val4163 of {T.TString _val4164 -> E.decodeUtf8 _val4164; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendBuddyContentMessageToAllAsync_args_msg = P.maybe (sendBuddyContentMessageToAllAsync_args_msg default_SendBuddyContentMessageToAllAsync_args) (\(_,_val4163) -> (case _val4163 of {T.TStruct _val4165 -> (to_Message (T.TStruct _val4165)); _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  sendBuddyContentMessageToAllAsync_args_content = P.maybe (sendBuddyContentMessageToAllAsync_args_content default_SendBuddyContentMessageToAllAsync_args) (\(_,_val4163) -> (case _val4163 of {T.TBinary _val4166 -> _val4166; T.TString _val4166 -> _val4166; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_SendBuddyContentMessageToAllAsync_args _ = P.error "not a struct"
read_SendBuddyContentMessageToAllAsync_args :: T.Protocol p => p -> P.IO SendBuddyContentMessageToAllAsync_args
read_SendBuddyContentMessageToAllAsync_args iprot = to_SendBuddyContentMessageToAllAsync_args <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToAllAsync_args)
decode_SendBuddyContentMessageToAllAsync_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyContentMessageToAllAsync_args
decode_SendBuddyContentMessageToAllAsync_args iprot bs = to_SendBuddyContentMessageToAllAsync_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToAllAsync_args) bs
typemap_SendBuddyContentMessageToAllAsync_args :: T.TypeMap
typemap_SendBuddyContentMessageToAllAsync_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message))),(3,("content",T.T_BINARY))]
default_SendBuddyContentMessageToAllAsync_args :: SendBuddyContentMessageToAllAsync_args
default_SendBuddyContentMessageToAllAsync_args = SendBuddyContentMessageToAllAsync_args{
  sendBuddyContentMessageToAllAsync_args_requestId = "",
  sendBuddyContentMessageToAllAsync_args_msg = default_Message,
  sendBuddyContentMessageToAllAsync_args_content = ""}
data SendBuddyContentMessageToAllAsync_result = SendBuddyContentMessageToAllAsync_result  { sendBuddyContentMessageToAllAsync_result_success :: LT.Text
  , sendBuddyContentMessageToAllAsync_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyContentMessageToAllAsync_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyContentMessageToAllAsync_result_success record   `H.hashWithSalt` sendBuddyContentMessageToAllAsync_result_e record  
instance QC.Arbitrary SendBuddyContentMessageToAllAsync_result where 
  arbitrary = M.liftM SendBuddyContentMessageToAllAsync_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendBuddyContentMessageToAllAsync_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyContentMessageToAllAsync_result{sendBuddyContentMessageToAllAsync_result_success = sendBuddyContentMessageToAllAsync_result_success obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAllAsync_result{sendBuddyContentMessageToAllAsync_result_success = sendBuddyContentMessageToAllAsync_result_success obj}
    , if obj == default_SendBuddyContentMessageToAllAsync_result{sendBuddyContentMessageToAllAsync_result_e = sendBuddyContentMessageToAllAsync_result_e obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAllAsync_result{sendBuddyContentMessageToAllAsync_result_e = sendBuddyContentMessageToAllAsync_result_e obj}
    ]
from_SendBuddyContentMessageToAllAsync_result :: SendBuddyContentMessageToAllAsync_result -> T.ThriftVal
from_SendBuddyContentMessageToAllAsync_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4169 -> (1, ("e",from_TalkException _v4169))) <$> sendBuddyContentMessageToAllAsync_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4169 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v4169))) $ sendBuddyContentMessageToAllAsync_result_success record
    , (\_v4169 -> (1, ("e",from_TalkException _v4169))) <$> sendBuddyContentMessageToAllAsync_result_e record
    ]
    )
write_SendBuddyContentMessageToAllAsync_result :: T.Protocol p => p -> SendBuddyContentMessageToAllAsync_result -> P.IO ()
write_SendBuddyContentMessageToAllAsync_result oprot record = T.writeVal oprot $ from_SendBuddyContentMessageToAllAsync_result record
encode_SendBuddyContentMessageToAllAsync_result :: T.StatelessProtocol p => p -> SendBuddyContentMessageToAllAsync_result -> LBS.ByteString
encode_SendBuddyContentMessageToAllAsync_result oprot record = T.serializeVal oprot $ from_SendBuddyContentMessageToAllAsync_result record
to_SendBuddyContentMessageToAllAsync_result :: T.ThriftVal -> SendBuddyContentMessageToAllAsync_result
to_SendBuddyContentMessageToAllAsync_result (T.TStruct fields) = SendBuddyContentMessageToAllAsync_result{
  sendBuddyContentMessageToAllAsync_result_success = P.maybe (sendBuddyContentMessageToAllAsync_result_success default_SendBuddyContentMessageToAllAsync_result) (\(_,_val4171) -> (case _val4171 of {T.TString _val4172 -> E.decodeUtf8 _val4172; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  sendBuddyContentMessageToAllAsync_result_e = P.maybe (P.Nothing) (\(_,_val4171) -> P.Just (case _val4171 of {T.TStruct _val4173 -> (to_TalkException (T.TStruct _val4173)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendBuddyContentMessageToAllAsync_result _ = P.error "not a struct"
read_SendBuddyContentMessageToAllAsync_result :: T.Protocol p => p -> P.IO SendBuddyContentMessageToAllAsync_result
read_SendBuddyContentMessageToAllAsync_result iprot = to_SendBuddyContentMessageToAllAsync_result <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToAllAsync_result)
decode_SendBuddyContentMessageToAllAsync_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyContentMessageToAllAsync_result
decode_SendBuddyContentMessageToAllAsync_result iprot bs = to_SendBuddyContentMessageToAllAsync_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToAllAsync_result) bs
typemap_SendBuddyContentMessageToAllAsync_result :: T.TypeMap
typemap_SendBuddyContentMessageToAllAsync_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SendBuddyContentMessageToAllAsync_result :: SendBuddyContentMessageToAllAsync_result
default_SendBuddyContentMessageToAllAsync_result = SendBuddyContentMessageToAllAsync_result{
  sendBuddyContentMessageToAllAsync_result_success = "",
  sendBuddyContentMessageToAllAsync_result_e = P.Nothing}
data SendBuddyContentMessageToMids_args = SendBuddyContentMessageToMids_args  { sendBuddyContentMessageToMids_args_requestId :: LT.Text
  , sendBuddyContentMessageToMids_args_msg :: Message
  , sendBuddyContentMessageToMids_args_content :: LBS.ByteString
  , sendBuddyContentMessageToMids_args_mids :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyContentMessageToMids_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyContentMessageToMids_args_requestId record   `H.hashWithSalt` sendBuddyContentMessageToMids_args_msg record   `H.hashWithSalt` sendBuddyContentMessageToMids_args_content record   `H.hashWithSalt` sendBuddyContentMessageToMids_args_mids record  
instance QC.Arbitrary SendBuddyContentMessageToMids_args where 
  arbitrary = M.liftM SendBuddyContentMessageToMids_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendBuddyContentMessageToMids_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyContentMessageToMids_args{sendBuddyContentMessageToMids_args_requestId = sendBuddyContentMessageToMids_args_requestId obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMids_args{sendBuddyContentMessageToMids_args_requestId = sendBuddyContentMessageToMids_args_requestId obj}
    , if obj == default_SendBuddyContentMessageToMids_args{sendBuddyContentMessageToMids_args_msg = sendBuddyContentMessageToMids_args_msg obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMids_args{sendBuddyContentMessageToMids_args_msg = sendBuddyContentMessageToMids_args_msg obj}
    , if obj == default_SendBuddyContentMessageToMids_args{sendBuddyContentMessageToMids_args_content = sendBuddyContentMessageToMids_args_content obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMids_args{sendBuddyContentMessageToMids_args_content = sendBuddyContentMessageToMids_args_content obj}
    , if obj == default_SendBuddyContentMessageToMids_args{sendBuddyContentMessageToMids_args_mids = sendBuddyContentMessageToMids_args_mids obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMids_args{sendBuddyContentMessageToMids_args_mids = sendBuddyContentMessageToMids_args_mids obj}
    ]
from_SendBuddyContentMessageToMids_args :: SendBuddyContentMessageToMids_args -> T.ThriftVal
from_SendBuddyContentMessageToMids_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4176 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4176))) $ sendBuddyContentMessageToMids_args_requestId record
  , (\_v4176 -> P.Just (2, ("msg",from_Message _v4176))) $ sendBuddyContentMessageToMids_args_msg record
  , (\_v4176 -> P.Just (3, ("content",T.TBinary _v4176))) $ sendBuddyContentMessageToMids_args_content record
  , (\_v4176 -> P.Just (4, ("mids",T.TList T.T_STRING $ P.map (\_v4178 -> T.TString $ E.encodeUtf8 _v4178) $ Vector.toList _v4176))) $ sendBuddyContentMessageToMids_args_mids record
  ]
write_SendBuddyContentMessageToMids_args :: T.Protocol p => p -> SendBuddyContentMessageToMids_args -> P.IO ()
write_SendBuddyContentMessageToMids_args oprot record = T.writeVal oprot $ from_SendBuddyContentMessageToMids_args record
encode_SendBuddyContentMessageToMids_args :: T.StatelessProtocol p => p -> SendBuddyContentMessageToMids_args -> LBS.ByteString
encode_SendBuddyContentMessageToMids_args oprot record = T.serializeVal oprot $ from_SendBuddyContentMessageToMids_args record
to_SendBuddyContentMessageToMids_args :: T.ThriftVal -> SendBuddyContentMessageToMids_args
to_SendBuddyContentMessageToMids_args (T.TStruct fields) = SendBuddyContentMessageToMids_args{
  sendBuddyContentMessageToMids_args_requestId = P.maybe (sendBuddyContentMessageToMids_args_requestId default_SendBuddyContentMessageToMids_args) (\(_,_val4180) -> (case _val4180 of {T.TString _val4181 -> E.decodeUtf8 _val4181; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendBuddyContentMessageToMids_args_msg = P.maybe (sendBuddyContentMessageToMids_args_msg default_SendBuddyContentMessageToMids_args) (\(_,_val4180) -> (case _val4180 of {T.TStruct _val4182 -> (to_Message (T.TStruct _val4182)); _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  sendBuddyContentMessageToMids_args_content = P.maybe (sendBuddyContentMessageToMids_args_content default_SendBuddyContentMessageToMids_args) (\(_,_val4180) -> (case _val4180 of {T.TBinary _val4183 -> _val4183; T.TString _val4183 -> _val4183; _ -> P.error "wrong type"})) (Map.lookup (3) fields),
  sendBuddyContentMessageToMids_args_mids = P.maybe (sendBuddyContentMessageToMids_args_mids default_SendBuddyContentMessageToMids_args) (\(_,_val4180) -> (case _val4180 of {T.TList _ _val4184 -> (Vector.fromList $ P.map (\_v4185 -> (case _v4185 of {T.TString _val4186 -> E.decodeUtf8 _val4186; _ -> P.error "wrong type"})) _val4184); _ -> P.error "wrong type"})) (Map.lookup (4) fields)
  }
to_SendBuddyContentMessageToMids_args _ = P.error "not a struct"
read_SendBuddyContentMessageToMids_args :: T.Protocol p => p -> P.IO SendBuddyContentMessageToMids_args
read_SendBuddyContentMessageToMids_args iprot = to_SendBuddyContentMessageToMids_args <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToMids_args)
decode_SendBuddyContentMessageToMids_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyContentMessageToMids_args
decode_SendBuddyContentMessageToMids_args iprot bs = to_SendBuddyContentMessageToMids_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToMids_args) bs
typemap_SendBuddyContentMessageToMids_args :: T.TypeMap
typemap_SendBuddyContentMessageToMids_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message))),(3,("content",T.T_BINARY)),(4,("mids",(T.T_LIST T.T_STRING)))]
default_SendBuddyContentMessageToMids_args :: SendBuddyContentMessageToMids_args
default_SendBuddyContentMessageToMids_args = SendBuddyContentMessageToMids_args{
  sendBuddyContentMessageToMids_args_requestId = "",
  sendBuddyContentMessageToMids_args_msg = default_Message,
  sendBuddyContentMessageToMids_args_content = "",
  sendBuddyContentMessageToMids_args_mids = Vector.empty}
data SendBuddyContentMessageToMids_result = SendBuddyContentMessageToMids_result  { sendBuddyContentMessageToMids_result_success :: SendBuddyMessageResult
  , sendBuddyContentMessageToMids_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyContentMessageToMids_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyContentMessageToMids_result_success record   `H.hashWithSalt` sendBuddyContentMessageToMids_result_e record  
instance QC.Arbitrary SendBuddyContentMessageToMids_result where 
  arbitrary = M.liftM SendBuddyContentMessageToMids_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendBuddyContentMessageToMids_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyContentMessageToMids_result{sendBuddyContentMessageToMids_result_success = sendBuddyContentMessageToMids_result_success obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMids_result{sendBuddyContentMessageToMids_result_success = sendBuddyContentMessageToMids_result_success obj}
    , if obj == default_SendBuddyContentMessageToMids_result{sendBuddyContentMessageToMids_result_e = sendBuddyContentMessageToMids_result_e obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMids_result{sendBuddyContentMessageToMids_result_e = sendBuddyContentMessageToMids_result_e obj}
    ]
from_SendBuddyContentMessageToMids_result :: SendBuddyContentMessageToMids_result -> T.ThriftVal
from_SendBuddyContentMessageToMids_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4189 -> (1, ("e",from_TalkException _v4189))) <$> sendBuddyContentMessageToMids_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4189 -> P.Just (0, ("success",from_SendBuddyMessageResult _v4189))) $ sendBuddyContentMessageToMids_result_success record
    , (\_v4189 -> (1, ("e",from_TalkException _v4189))) <$> sendBuddyContentMessageToMids_result_e record
    ]
    )
write_SendBuddyContentMessageToMids_result :: T.Protocol p => p -> SendBuddyContentMessageToMids_result -> P.IO ()
write_SendBuddyContentMessageToMids_result oprot record = T.writeVal oprot $ from_SendBuddyContentMessageToMids_result record
encode_SendBuddyContentMessageToMids_result :: T.StatelessProtocol p => p -> SendBuddyContentMessageToMids_result -> LBS.ByteString
encode_SendBuddyContentMessageToMids_result oprot record = T.serializeVal oprot $ from_SendBuddyContentMessageToMids_result record
to_SendBuddyContentMessageToMids_result :: T.ThriftVal -> SendBuddyContentMessageToMids_result
to_SendBuddyContentMessageToMids_result (T.TStruct fields) = SendBuddyContentMessageToMids_result{
  sendBuddyContentMessageToMids_result_success = P.maybe (sendBuddyContentMessageToMids_result_success default_SendBuddyContentMessageToMids_result) (\(_,_val4191) -> (case _val4191 of {T.TStruct _val4192 -> (to_SendBuddyMessageResult (T.TStruct _val4192)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  sendBuddyContentMessageToMids_result_e = P.maybe (P.Nothing) (\(_,_val4191) -> P.Just (case _val4191 of {T.TStruct _val4193 -> (to_TalkException (T.TStruct _val4193)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendBuddyContentMessageToMids_result _ = P.error "not a struct"
read_SendBuddyContentMessageToMids_result :: T.Protocol p => p -> P.IO SendBuddyContentMessageToMids_result
read_SendBuddyContentMessageToMids_result iprot = to_SendBuddyContentMessageToMids_result <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToMids_result)
decode_SendBuddyContentMessageToMids_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyContentMessageToMids_result
decode_SendBuddyContentMessageToMids_result iprot bs = to_SendBuddyContentMessageToMids_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToMids_result) bs
typemap_SendBuddyContentMessageToMids_result :: T.TypeMap
typemap_SendBuddyContentMessageToMids_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SendBuddyMessageResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SendBuddyContentMessageToMids_result :: SendBuddyContentMessageToMids_result
default_SendBuddyContentMessageToMids_result = SendBuddyContentMessageToMids_result{
  sendBuddyContentMessageToMids_result_success = default_SendBuddyMessageResult,
  sendBuddyContentMessageToMids_result_e = P.Nothing}
data SendBuddyContentMessageToMidsAsync_args = SendBuddyContentMessageToMidsAsync_args  { sendBuddyContentMessageToMidsAsync_args_requestId :: LT.Text
  , sendBuddyContentMessageToMidsAsync_args_msg :: Message
  , sendBuddyContentMessageToMidsAsync_args_content :: LBS.ByteString
  , sendBuddyContentMessageToMidsAsync_args_mids :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyContentMessageToMidsAsync_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyContentMessageToMidsAsync_args_requestId record   `H.hashWithSalt` sendBuddyContentMessageToMidsAsync_args_msg record   `H.hashWithSalt` sendBuddyContentMessageToMidsAsync_args_content record   `H.hashWithSalt` sendBuddyContentMessageToMidsAsync_args_mids record  
instance QC.Arbitrary SendBuddyContentMessageToMidsAsync_args where 
  arbitrary = M.liftM SendBuddyContentMessageToMidsAsync_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendBuddyContentMessageToMidsAsync_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyContentMessageToMidsAsync_args{sendBuddyContentMessageToMidsAsync_args_requestId = sendBuddyContentMessageToMidsAsync_args_requestId obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMidsAsync_args{sendBuddyContentMessageToMidsAsync_args_requestId = sendBuddyContentMessageToMidsAsync_args_requestId obj}
    , if obj == default_SendBuddyContentMessageToMidsAsync_args{sendBuddyContentMessageToMidsAsync_args_msg = sendBuddyContentMessageToMidsAsync_args_msg obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMidsAsync_args{sendBuddyContentMessageToMidsAsync_args_msg = sendBuddyContentMessageToMidsAsync_args_msg obj}
    , if obj == default_SendBuddyContentMessageToMidsAsync_args{sendBuddyContentMessageToMidsAsync_args_content = sendBuddyContentMessageToMidsAsync_args_content obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMidsAsync_args{sendBuddyContentMessageToMidsAsync_args_content = sendBuddyContentMessageToMidsAsync_args_content obj}
    , if obj == default_SendBuddyContentMessageToMidsAsync_args{sendBuddyContentMessageToMidsAsync_args_mids = sendBuddyContentMessageToMidsAsync_args_mids obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMidsAsync_args{sendBuddyContentMessageToMidsAsync_args_mids = sendBuddyContentMessageToMidsAsync_args_mids obj}
    ]
from_SendBuddyContentMessageToMidsAsync_args :: SendBuddyContentMessageToMidsAsync_args -> T.ThriftVal
from_SendBuddyContentMessageToMidsAsync_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4196 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4196))) $ sendBuddyContentMessageToMidsAsync_args_requestId record
  , (\_v4196 -> P.Just (2, ("msg",from_Message _v4196))) $ sendBuddyContentMessageToMidsAsync_args_msg record
  , (\_v4196 -> P.Just (3, ("content",T.TBinary _v4196))) $ sendBuddyContentMessageToMidsAsync_args_content record
  , (\_v4196 -> P.Just (4, ("mids",T.TList T.T_STRING $ P.map (\_v4198 -> T.TString $ E.encodeUtf8 _v4198) $ Vector.toList _v4196))) $ sendBuddyContentMessageToMidsAsync_args_mids record
  ]
write_SendBuddyContentMessageToMidsAsync_args :: T.Protocol p => p -> SendBuddyContentMessageToMidsAsync_args -> P.IO ()
write_SendBuddyContentMessageToMidsAsync_args oprot record = T.writeVal oprot $ from_SendBuddyContentMessageToMidsAsync_args record
encode_SendBuddyContentMessageToMidsAsync_args :: T.StatelessProtocol p => p -> SendBuddyContentMessageToMidsAsync_args -> LBS.ByteString
encode_SendBuddyContentMessageToMidsAsync_args oprot record = T.serializeVal oprot $ from_SendBuddyContentMessageToMidsAsync_args record
to_SendBuddyContentMessageToMidsAsync_args :: T.ThriftVal -> SendBuddyContentMessageToMidsAsync_args
to_SendBuddyContentMessageToMidsAsync_args (T.TStruct fields) = SendBuddyContentMessageToMidsAsync_args{
  sendBuddyContentMessageToMidsAsync_args_requestId = P.maybe (sendBuddyContentMessageToMidsAsync_args_requestId default_SendBuddyContentMessageToMidsAsync_args) (\(_,_val4200) -> (case _val4200 of {T.TString _val4201 -> E.decodeUtf8 _val4201; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendBuddyContentMessageToMidsAsync_args_msg = P.maybe (sendBuddyContentMessageToMidsAsync_args_msg default_SendBuddyContentMessageToMidsAsync_args) (\(_,_val4200) -> (case _val4200 of {T.TStruct _val4202 -> (to_Message (T.TStruct _val4202)); _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  sendBuddyContentMessageToMidsAsync_args_content = P.maybe (sendBuddyContentMessageToMidsAsync_args_content default_SendBuddyContentMessageToMidsAsync_args) (\(_,_val4200) -> (case _val4200 of {T.TBinary _val4203 -> _val4203; T.TString _val4203 -> _val4203; _ -> P.error "wrong type"})) (Map.lookup (3) fields),
  sendBuddyContentMessageToMidsAsync_args_mids = P.maybe (sendBuddyContentMessageToMidsAsync_args_mids default_SendBuddyContentMessageToMidsAsync_args) (\(_,_val4200) -> (case _val4200 of {T.TList _ _val4204 -> (Vector.fromList $ P.map (\_v4205 -> (case _v4205 of {T.TString _val4206 -> E.decodeUtf8 _val4206; _ -> P.error "wrong type"})) _val4204); _ -> P.error "wrong type"})) (Map.lookup (4) fields)
  }
to_SendBuddyContentMessageToMidsAsync_args _ = P.error "not a struct"
read_SendBuddyContentMessageToMidsAsync_args :: T.Protocol p => p -> P.IO SendBuddyContentMessageToMidsAsync_args
read_SendBuddyContentMessageToMidsAsync_args iprot = to_SendBuddyContentMessageToMidsAsync_args <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToMidsAsync_args)
decode_SendBuddyContentMessageToMidsAsync_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyContentMessageToMidsAsync_args
decode_SendBuddyContentMessageToMidsAsync_args iprot bs = to_SendBuddyContentMessageToMidsAsync_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToMidsAsync_args) bs
typemap_SendBuddyContentMessageToMidsAsync_args :: T.TypeMap
typemap_SendBuddyContentMessageToMidsAsync_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message))),(3,("content",T.T_BINARY)),(4,("mids",(T.T_LIST T.T_STRING)))]
default_SendBuddyContentMessageToMidsAsync_args :: SendBuddyContentMessageToMidsAsync_args
default_SendBuddyContentMessageToMidsAsync_args = SendBuddyContentMessageToMidsAsync_args{
  sendBuddyContentMessageToMidsAsync_args_requestId = "",
  sendBuddyContentMessageToMidsAsync_args_msg = default_Message,
  sendBuddyContentMessageToMidsAsync_args_content = "",
  sendBuddyContentMessageToMidsAsync_args_mids = Vector.empty}
data SendBuddyContentMessageToMidsAsync_result = SendBuddyContentMessageToMidsAsync_result  { sendBuddyContentMessageToMidsAsync_result_success :: LT.Text
  , sendBuddyContentMessageToMidsAsync_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyContentMessageToMidsAsync_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyContentMessageToMidsAsync_result_success record   `H.hashWithSalt` sendBuddyContentMessageToMidsAsync_result_e record  
instance QC.Arbitrary SendBuddyContentMessageToMidsAsync_result where 
  arbitrary = M.liftM SendBuddyContentMessageToMidsAsync_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendBuddyContentMessageToMidsAsync_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyContentMessageToMidsAsync_result{sendBuddyContentMessageToMidsAsync_result_success = sendBuddyContentMessageToMidsAsync_result_success obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMidsAsync_result{sendBuddyContentMessageToMidsAsync_result_success = sendBuddyContentMessageToMidsAsync_result_success obj}
    , if obj == default_SendBuddyContentMessageToMidsAsync_result{sendBuddyContentMessageToMidsAsync_result_e = sendBuddyContentMessageToMidsAsync_result_e obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMidsAsync_result{sendBuddyContentMessageToMidsAsync_result_e = sendBuddyContentMessageToMidsAsync_result_e obj}
    ]
from_SendBuddyContentMessageToMidsAsync_result :: SendBuddyContentMessageToMidsAsync_result -> T.ThriftVal
from_SendBuddyContentMessageToMidsAsync_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4209 -> (1, ("e",from_TalkException _v4209))) <$> sendBuddyContentMessageToMidsAsync_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4209 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v4209))) $ sendBuddyContentMessageToMidsAsync_result_success record
    , (\_v4209 -> (1, ("e",from_TalkException _v4209))) <$> sendBuddyContentMessageToMidsAsync_result_e record
    ]
    )
write_SendBuddyContentMessageToMidsAsync_result :: T.Protocol p => p -> SendBuddyContentMessageToMidsAsync_result -> P.IO ()
write_SendBuddyContentMessageToMidsAsync_result oprot record = T.writeVal oprot $ from_SendBuddyContentMessageToMidsAsync_result record
encode_SendBuddyContentMessageToMidsAsync_result :: T.StatelessProtocol p => p -> SendBuddyContentMessageToMidsAsync_result -> LBS.ByteString
encode_SendBuddyContentMessageToMidsAsync_result oprot record = T.serializeVal oprot $ from_SendBuddyContentMessageToMidsAsync_result record
to_SendBuddyContentMessageToMidsAsync_result :: T.ThriftVal -> SendBuddyContentMessageToMidsAsync_result
to_SendBuddyContentMessageToMidsAsync_result (T.TStruct fields) = SendBuddyContentMessageToMidsAsync_result{
  sendBuddyContentMessageToMidsAsync_result_success = P.maybe (sendBuddyContentMessageToMidsAsync_result_success default_SendBuddyContentMessageToMidsAsync_result) (\(_,_val4211) -> (case _val4211 of {T.TString _val4212 -> E.decodeUtf8 _val4212; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  sendBuddyContentMessageToMidsAsync_result_e = P.maybe (P.Nothing) (\(_,_val4211) -> P.Just (case _val4211 of {T.TStruct _val4213 -> (to_TalkException (T.TStruct _val4213)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendBuddyContentMessageToMidsAsync_result _ = P.error "not a struct"
read_SendBuddyContentMessageToMidsAsync_result :: T.Protocol p => p -> P.IO SendBuddyContentMessageToMidsAsync_result
read_SendBuddyContentMessageToMidsAsync_result iprot = to_SendBuddyContentMessageToMidsAsync_result <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToMidsAsync_result)
decode_SendBuddyContentMessageToMidsAsync_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyContentMessageToMidsAsync_result
decode_SendBuddyContentMessageToMidsAsync_result iprot bs = to_SendBuddyContentMessageToMidsAsync_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToMidsAsync_result) bs
typemap_SendBuddyContentMessageToMidsAsync_result :: T.TypeMap
typemap_SendBuddyContentMessageToMidsAsync_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SendBuddyContentMessageToMidsAsync_result :: SendBuddyContentMessageToMidsAsync_result
default_SendBuddyContentMessageToMidsAsync_result = SendBuddyContentMessageToMidsAsync_result{
  sendBuddyContentMessageToMidsAsync_result_success = "",
  sendBuddyContentMessageToMidsAsync_result_e = P.Nothing}
data SendBuddyMessageToAll_args = SendBuddyMessageToAll_args  { sendBuddyMessageToAll_args_requestId :: LT.Text
  , sendBuddyMessageToAll_args_msg :: Message
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyMessageToAll_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyMessageToAll_args_requestId record   `H.hashWithSalt` sendBuddyMessageToAll_args_msg record  
instance QC.Arbitrary SendBuddyMessageToAll_args where 
  arbitrary = M.liftM SendBuddyMessageToAll_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendBuddyMessageToAll_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyMessageToAll_args{sendBuddyMessageToAll_args_requestId = sendBuddyMessageToAll_args_requestId obj} then P.Nothing else P.Just $ default_SendBuddyMessageToAll_args{sendBuddyMessageToAll_args_requestId = sendBuddyMessageToAll_args_requestId obj}
    , if obj == default_SendBuddyMessageToAll_args{sendBuddyMessageToAll_args_msg = sendBuddyMessageToAll_args_msg obj} then P.Nothing else P.Just $ default_SendBuddyMessageToAll_args{sendBuddyMessageToAll_args_msg = sendBuddyMessageToAll_args_msg obj}
    ]
from_SendBuddyMessageToAll_args :: SendBuddyMessageToAll_args -> T.ThriftVal
from_SendBuddyMessageToAll_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4216 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4216))) $ sendBuddyMessageToAll_args_requestId record
  , (\_v4216 -> P.Just (2, ("msg",from_Message _v4216))) $ sendBuddyMessageToAll_args_msg record
  ]
write_SendBuddyMessageToAll_args :: T.Protocol p => p -> SendBuddyMessageToAll_args -> P.IO ()
write_SendBuddyMessageToAll_args oprot record = T.writeVal oprot $ from_SendBuddyMessageToAll_args record
encode_SendBuddyMessageToAll_args :: T.StatelessProtocol p => p -> SendBuddyMessageToAll_args -> LBS.ByteString
encode_SendBuddyMessageToAll_args oprot record = T.serializeVal oprot $ from_SendBuddyMessageToAll_args record
to_SendBuddyMessageToAll_args :: T.ThriftVal -> SendBuddyMessageToAll_args
to_SendBuddyMessageToAll_args (T.TStruct fields) = SendBuddyMessageToAll_args{
  sendBuddyMessageToAll_args_requestId = P.maybe (sendBuddyMessageToAll_args_requestId default_SendBuddyMessageToAll_args) (\(_,_val4218) -> (case _val4218 of {T.TString _val4219 -> E.decodeUtf8 _val4219; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendBuddyMessageToAll_args_msg = P.maybe (sendBuddyMessageToAll_args_msg default_SendBuddyMessageToAll_args) (\(_,_val4218) -> (case _val4218 of {T.TStruct _val4220 -> (to_Message (T.TStruct _val4220)); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_SendBuddyMessageToAll_args _ = P.error "not a struct"
read_SendBuddyMessageToAll_args :: T.Protocol p => p -> P.IO SendBuddyMessageToAll_args
read_SendBuddyMessageToAll_args iprot = to_SendBuddyMessageToAll_args <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyMessageToAll_args)
decode_SendBuddyMessageToAll_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyMessageToAll_args
decode_SendBuddyMessageToAll_args iprot bs = to_SendBuddyMessageToAll_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyMessageToAll_args) bs
typemap_SendBuddyMessageToAll_args :: T.TypeMap
typemap_SendBuddyMessageToAll_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message)))]
default_SendBuddyMessageToAll_args :: SendBuddyMessageToAll_args
default_SendBuddyMessageToAll_args = SendBuddyMessageToAll_args{
  sendBuddyMessageToAll_args_requestId = "",
  sendBuddyMessageToAll_args_msg = default_Message}
data SendBuddyMessageToAll_result = SendBuddyMessageToAll_result  { sendBuddyMessageToAll_result_success :: SendBuddyMessageResult
  , sendBuddyMessageToAll_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyMessageToAll_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyMessageToAll_result_success record   `H.hashWithSalt` sendBuddyMessageToAll_result_e record  
instance QC.Arbitrary SendBuddyMessageToAll_result where 
  arbitrary = M.liftM SendBuddyMessageToAll_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendBuddyMessageToAll_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyMessageToAll_result{sendBuddyMessageToAll_result_success = sendBuddyMessageToAll_result_success obj} then P.Nothing else P.Just $ default_SendBuddyMessageToAll_result{sendBuddyMessageToAll_result_success = sendBuddyMessageToAll_result_success obj}
    , if obj == default_SendBuddyMessageToAll_result{sendBuddyMessageToAll_result_e = sendBuddyMessageToAll_result_e obj} then P.Nothing else P.Just $ default_SendBuddyMessageToAll_result{sendBuddyMessageToAll_result_e = sendBuddyMessageToAll_result_e obj}
    ]
from_SendBuddyMessageToAll_result :: SendBuddyMessageToAll_result -> T.ThriftVal
from_SendBuddyMessageToAll_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4223 -> (1, ("e",from_TalkException _v4223))) <$> sendBuddyMessageToAll_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4223 -> P.Just (0, ("success",from_SendBuddyMessageResult _v4223))) $ sendBuddyMessageToAll_result_success record
    , (\_v4223 -> (1, ("e",from_TalkException _v4223))) <$> sendBuddyMessageToAll_result_e record
    ]
    )
write_SendBuddyMessageToAll_result :: T.Protocol p => p -> SendBuddyMessageToAll_result -> P.IO ()
write_SendBuddyMessageToAll_result oprot record = T.writeVal oprot $ from_SendBuddyMessageToAll_result record
encode_SendBuddyMessageToAll_result :: T.StatelessProtocol p => p -> SendBuddyMessageToAll_result -> LBS.ByteString
encode_SendBuddyMessageToAll_result oprot record = T.serializeVal oprot $ from_SendBuddyMessageToAll_result record
to_SendBuddyMessageToAll_result :: T.ThriftVal -> SendBuddyMessageToAll_result
to_SendBuddyMessageToAll_result (T.TStruct fields) = SendBuddyMessageToAll_result{
  sendBuddyMessageToAll_result_success = P.maybe (sendBuddyMessageToAll_result_success default_SendBuddyMessageToAll_result) (\(_,_val4225) -> (case _val4225 of {T.TStruct _val4226 -> (to_SendBuddyMessageResult (T.TStruct _val4226)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  sendBuddyMessageToAll_result_e = P.maybe (P.Nothing) (\(_,_val4225) -> P.Just (case _val4225 of {T.TStruct _val4227 -> (to_TalkException (T.TStruct _val4227)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendBuddyMessageToAll_result _ = P.error "not a struct"
read_SendBuddyMessageToAll_result :: T.Protocol p => p -> P.IO SendBuddyMessageToAll_result
read_SendBuddyMessageToAll_result iprot = to_SendBuddyMessageToAll_result <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyMessageToAll_result)
decode_SendBuddyMessageToAll_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyMessageToAll_result
decode_SendBuddyMessageToAll_result iprot bs = to_SendBuddyMessageToAll_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyMessageToAll_result) bs
typemap_SendBuddyMessageToAll_result :: T.TypeMap
typemap_SendBuddyMessageToAll_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SendBuddyMessageResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SendBuddyMessageToAll_result :: SendBuddyMessageToAll_result
default_SendBuddyMessageToAll_result = SendBuddyMessageToAll_result{
  sendBuddyMessageToAll_result_success = default_SendBuddyMessageResult,
  sendBuddyMessageToAll_result_e = P.Nothing}
data SendBuddyMessageToAllAsync_args = SendBuddyMessageToAllAsync_args  { sendBuddyMessageToAllAsync_args_requestId :: LT.Text
  , sendBuddyMessageToAllAsync_args_msg :: Message
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyMessageToAllAsync_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyMessageToAllAsync_args_requestId record   `H.hashWithSalt` sendBuddyMessageToAllAsync_args_msg record  
instance QC.Arbitrary SendBuddyMessageToAllAsync_args where 
  arbitrary = M.liftM SendBuddyMessageToAllAsync_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendBuddyMessageToAllAsync_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyMessageToAllAsync_args{sendBuddyMessageToAllAsync_args_requestId = sendBuddyMessageToAllAsync_args_requestId obj} then P.Nothing else P.Just $ default_SendBuddyMessageToAllAsync_args{sendBuddyMessageToAllAsync_args_requestId = sendBuddyMessageToAllAsync_args_requestId obj}
    , if obj == default_SendBuddyMessageToAllAsync_args{sendBuddyMessageToAllAsync_args_msg = sendBuddyMessageToAllAsync_args_msg obj} then P.Nothing else P.Just $ default_SendBuddyMessageToAllAsync_args{sendBuddyMessageToAllAsync_args_msg = sendBuddyMessageToAllAsync_args_msg obj}
    ]
from_SendBuddyMessageToAllAsync_args :: SendBuddyMessageToAllAsync_args -> T.ThriftVal
from_SendBuddyMessageToAllAsync_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4230 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4230))) $ sendBuddyMessageToAllAsync_args_requestId record
  , (\_v4230 -> P.Just (2, ("msg",from_Message _v4230))) $ sendBuddyMessageToAllAsync_args_msg record
  ]
write_SendBuddyMessageToAllAsync_args :: T.Protocol p => p -> SendBuddyMessageToAllAsync_args -> P.IO ()
write_SendBuddyMessageToAllAsync_args oprot record = T.writeVal oprot $ from_SendBuddyMessageToAllAsync_args record
encode_SendBuddyMessageToAllAsync_args :: T.StatelessProtocol p => p -> SendBuddyMessageToAllAsync_args -> LBS.ByteString
encode_SendBuddyMessageToAllAsync_args oprot record = T.serializeVal oprot $ from_SendBuddyMessageToAllAsync_args record
to_SendBuddyMessageToAllAsync_args :: T.ThriftVal -> SendBuddyMessageToAllAsync_args
to_SendBuddyMessageToAllAsync_args (T.TStruct fields) = SendBuddyMessageToAllAsync_args{
  sendBuddyMessageToAllAsync_args_requestId = P.maybe (sendBuddyMessageToAllAsync_args_requestId default_SendBuddyMessageToAllAsync_args) (\(_,_val4232) -> (case _val4232 of {T.TString _val4233 -> E.decodeUtf8 _val4233; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendBuddyMessageToAllAsync_args_msg = P.maybe (sendBuddyMessageToAllAsync_args_msg default_SendBuddyMessageToAllAsync_args) (\(_,_val4232) -> (case _val4232 of {T.TStruct _val4234 -> (to_Message (T.TStruct _val4234)); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_SendBuddyMessageToAllAsync_args _ = P.error "not a struct"
read_SendBuddyMessageToAllAsync_args :: T.Protocol p => p -> P.IO SendBuddyMessageToAllAsync_args
read_SendBuddyMessageToAllAsync_args iprot = to_SendBuddyMessageToAllAsync_args <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyMessageToAllAsync_args)
decode_SendBuddyMessageToAllAsync_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyMessageToAllAsync_args
decode_SendBuddyMessageToAllAsync_args iprot bs = to_SendBuddyMessageToAllAsync_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyMessageToAllAsync_args) bs
typemap_SendBuddyMessageToAllAsync_args :: T.TypeMap
typemap_SendBuddyMessageToAllAsync_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message)))]
default_SendBuddyMessageToAllAsync_args :: SendBuddyMessageToAllAsync_args
default_SendBuddyMessageToAllAsync_args = SendBuddyMessageToAllAsync_args{
  sendBuddyMessageToAllAsync_args_requestId = "",
  sendBuddyMessageToAllAsync_args_msg = default_Message}
data SendBuddyMessageToAllAsync_result = SendBuddyMessageToAllAsync_result  { sendBuddyMessageToAllAsync_result_success :: LT.Text
  , sendBuddyMessageToAllAsync_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyMessageToAllAsync_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyMessageToAllAsync_result_success record   `H.hashWithSalt` sendBuddyMessageToAllAsync_result_e record  
instance QC.Arbitrary SendBuddyMessageToAllAsync_result where 
  arbitrary = M.liftM SendBuddyMessageToAllAsync_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendBuddyMessageToAllAsync_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyMessageToAllAsync_result{sendBuddyMessageToAllAsync_result_success = sendBuddyMessageToAllAsync_result_success obj} then P.Nothing else P.Just $ default_SendBuddyMessageToAllAsync_result{sendBuddyMessageToAllAsync_result_success = sendBuddyMessageToAllAsync_result_success obj}
    , if obj == default_SendBuddyMessageToAllAsync_result{sendBuddyMessageToAllAsync_result_e = sendBuddyMessageToAllAsync_result_e obj} then P.Nothing else P.Just $ default_SendBuddyMessageToAllAsync_result{sendBuddyMessageToAllAsync_result_e = sendBuddyMessageToAllAsync_result_e obj}
    ]
from_SendBuddyMessageToAllAsync_result :: SendBuddyMessageToAllAsync_result -> T.ThriftVal
from_SendBuddyMessageToAllAsync_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4237 -> (1, ("e",from_TalkException _v4237))) <$> sendBuddyMessageToAllAsync_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4237 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v4237))) $ sendBuddyMessageToAllAsync_result_success record
    , (\_v4237 -> (1, ("e",from_TalkException _v4237))) <$> sendBuddyMessageToAllAsync_result_e record
    ]
    )
write_SendBuddyMessageToAllAsync_result :: T.Protocol p => p -> SendBuddyMessageToAllAsync_result -> P.IO ()
write_SendBuddyMessageToAllAsync_result oprot record = T.writeVal oprot $ from_SendBuddyMessageToAllAsync_result record
encode_SendBuddyMessageToAllAsync_result :: T.StatelessProtocol p => p -> SendBuddyMessageToAllAsync_result -> LBS.ByteString
encode_SendBuddyMessageToAllAsync_result oprot record = T.serializeVal oprot $ from_SendBuddyMessageToAllAsync_result record
to_SendBuddyMessageToAllAsync_result :: T.ThriftVal -> SendBuddyMessageToAllAsync_result
to_SendBuddyMessageToAllAsync_result (T.TStruct fields) = SendBuddyMessageToAllAsync_result{
  sendBuddyMessageToAllAsync_result_success = P.maybe (sendBuddyMessageToAllAsync_result_success default_SendBuddyMessageToAllAsync_result) (\(_,_val4239) -> (case _val4239 of {T.TString _val4240 -> E.decodeUtf8 _val4240; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  sendBuddyMessageToAllAsync_result_e = P.maybe (P.Nothing) (\(_,_val4239) -> P.Just (case _val4239 of {T.TStruct _val4241 -> (to_TalkException (T.TStruct _val4241)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendBuddyMessageToAllAsync_result _ = P.error "not a struct"
read_SendBuddyMessageToAllAsync_result :: T.Protocol p => p -> P.IO SendBuddyMessageToAllAsync_result
read_SendBuddyMessageToAllAsync_result iprot = to_SendBuddyMessageToAllAsync_result <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyMessageToAllAsync_result)
decode_SendBuddyMessageToAllAsync_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyMessageToAllAsync_result
decode_SendBuddyMessageToAllAsync_result iprot bs = to_SendBuddyMessageToAllAsync_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyMessageToAllAsync_result) bs
typemap_SendBuddyMessageToAllAsync_result :: T.TypeMap
typemap_SendBuddyMessageToAllAsync_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SendBuddyMessageToAllAsync_result :: SendBuddyMessageToAllAsync_result
default_SendBuddyMessageToAllAsync_result = SendBuddyMessageToAllAsync_result{
  sendBuddyMessageToAllAsync_result_success = "",
  sendBuddyMessageToAllAsync_result_e = P.Nothing}
data SendBuddyMessageToMids_args = SendBuddyMessageToMids_args  { sendBuddyMessageToMids_args_requestId :: LT.Text
  , sendBuddyMessageToMids_args_msg :: Message
  , sendBuddyMessageToMids_args_mids :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyMessageToMids_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyMessageToMids_args_requestId record   `H.hashWithSalt` sendBuddyMessageToMids_args_msg record   `H.hashWithSalt` sendBuddyMessageToMids_args_mids record  
instance QC.Arbitrary SendBuddyMessageToMids_args where 
  arbitrary = M.liftM SendBuddyMessageToMids_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendBuddyMessageToMids_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyMessageToMids_args{sendBuddyMessageToMids_args_requestId = sendBuddyMessageToMids_args_requestId obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMids_args{sendBuddyMessageToMids_args_requestId = sendBuddyMessageToMids_args_requestId obj}
    , if obj == default_SendBuddyMessageToMids_args{sendBuddyMessageToMids_args_msg = sendBuddyMessageToMids_args_msg obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMids_args{sendBuddyMessageToMids_args_msg = sendBuddyMessageToMids_args_msg obj}
    , if obj == default_SendBuddyMessageToMids_args{sendBuddyMessageToMids_args_mids = sendBuddyMessageToMids_args_mids obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMids_args{sendBuddyMessageToMids_args_mids = sendBuddyMessageToMids_args_mids obj}
    ]
from_SendBuddyMessageToMids_args :: SendBuddyMessageToMids_args -> T.ThriftVal
from_SendBuddyMessageToMids_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4244 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4244))) $ sendBuddyMessageToMids_args_requestId record
  , (\_v4244 -> P.Just (2, ("msg",from_Message _v4244))) $ sendBuddyMessageToMids_args_msg record
  , (\_v4244 -> P.Just (3, ("mids",T.TList T.T_STRING $ P.map (\_v4246 -> T.TString $ E.encodeUtf8 _v4246) $ Vector.toList _v4244))) $ sendBuddyMessageToMids_args_mids record
  ]
write_SendBuddyMessageToMids_args :: T.Protocol p => p -> SendBuddyMessageToMids_args -> P.IO ()
write_SendBuddyMessageToMids_args oprot record = T.writeVal oprot $ from_SendBuddyMessageToMids_args record
encode_SendBuddyMessageToMids_args :: T.StatelessProtocol p => p -> SendBuddyMessageToMids_args -> LBS.ByteString
encode_SendBuddyMessageToMids_args oprot record = T.serializeVal oprot $ from_SendBuddyMessageToMids_args record
to_SendBuddyMessageToMids_args :: T.ThriftVal -> SendBuddyMessageToMids_args
to_SendBuddyMessageToMids_args (T.TStruct fields) = SendBuddyMessageToMids_args{
  sendBuddyMessageToMids_args_requestId = P.maybe (sendBuddyMessageToMids_args_requestId default_SendBuddyMessageToMids_args) (\(_,_val4248) -> (case _val4248 of {T.TString _val4249 -> E.decodeUtf8 _val4249; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendBuddyMessageToMids_args_msg = P.maybe (sendBuddyMessageToMids_args_msg default_SendBuddyMessageToMids_args) (\(_,_val4248) -> (case _val4248 of {T.TStruct _val4250 -> (to_Message (T.TStruct _val4250)); _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  sendBuddyMessageToMids_args_mids = P.maybe (sendBuddyMessageToMids_args_mids default_SendBuddyMessageToMids_args) (\(_,_val4248) -> (case _val4248 of {T.TList _ _val4251 -> (Vector.fromList $ P.map (\_v4252 -> (case _v4252 of {T.TString _val4253 -> E.decodeUtf8 _val4253; _ -> P.error "wrong type"})) _val4251); _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_SendBuddyMessageToMids_args _ = P.error "not a struct"
read_SendBuddyMessageToMids_args :: T.Protocol p => p -> P.IO SendBuddyMessageToMids_args
read_SendBuddyMessageToMids_args iprot = to_SendBuddyMessageToMids_args <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyMessageToMids_args)
decode_SendBuddyMessageToMids_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyMessageToMids_args
decode_SendBuddyMessageToMids_args iprot bs = to_SendBuddyMessageToMids_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyMessageToMids_args) bs
typemap_SendBuddyMessageToMids_args :: T.TypeMap
typemap_SendBuddyMessageToMids_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message))),(3,("mids",(T.T_LIST T.T_STRING)))]
default_SendBuddyMessageToMids_args :: SendBuddyMessageToMids_args
default_SendBuddyMessageToMids_args = SendBuddyMessageToMids_args{
  sendBuddyMessageToMids_args_requestId = "",
  sendBuddyMessageToMids_args_msg = default_Message,
  sendBuddyMessageToMids_args_mids = Vector.empty}
data SendBuddyMessageToMids_result = SendBuddyMessageToMids_result  { sendBuddyMessageToMids_result_success :: SendBuddyMessageResult
  , sendBuddyMessageToMids_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyMessageToMids_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyMessageToMids_result_success record   `H.hashWithSalt` sendBuddyMessageToMids_result_e record  
instance QC.Arbitrary SendBuddyMessageToMids_result where 
  arbitrary = M.liftM SendBuddyMessageToMids_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendBuddyMessageToMids_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyMessageToMids_result{sendBuddyMessageToMids_result_success = sendBuddyMessageToMids_result_success obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMids_result{sendBuddyMessageToMids_result_success = sendBuddyMessageToMids_result_success obj}
    , if obj == default_SendBuddyMessageToMids_result{sendBuddyMessageToMids_result_e = sendBuddyMessageToMids_result_e obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMids_result{sendBuddyMessageToMids_result_e = sendBuddyMessageToMids_result_e obj}
    ]
from_SendBuddyMessageToMids_result :: SendBuddyMessageToMids_result -> T.ThriftVal
from_SendBuddyMessageToMids_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4256 -> (1, ("e",from_TalkException _v4256))) <$> sendBuddyMessageToMids_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4256 -> P.Just (0, ("success",from_SendBuddyMessageResult _v4256))) $ sendBuddyMessageToMids_result_success record
    , (\_v4256 -> (1, ("e",from_TalkException _v4256))) <$> sendBuddyMessageToMids_result_e record
    ]
    )
write_SendBuddyMessageToMids_result :: T.Protocol p => p -> SendBuddyMessageToMids_result -> P.IO ()
write_SendBuddyMessageToMids_result oprot record = T.writeVal oprot $ from_SendBuddyMessageToMids_result record
encode_SendBuddyMessageToMids_result :: T.StatelessProtocol p => p -> SendBuddyMessageToMids_result -> LBS.ByteString
encode_SendBuddyMessageToMids_result oprot record = T.serializeVal oprot $ from_SendBuddyMessageToMids_result record
to_SendBuddyMessageToMids_result :: T.ThriftVal -> SendBuddyMessageToMids_result
to_SendBuddyMessageToMids_result (T.TStruct fields) = SendBuddyMessageToMids_result{
  sendBuddyMessageToMids_result_success = P.maybe (sendBuddyMessageToMids_result_success default_SendBuddyMessageToMids_result) (\(_,_val4258) -> (case _val4258 of {T.TStruct _val4259 -> (to_SendBuddyMessageResult (T.TStruct _val4259)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  sendBuddyMessageToMids_result_e = P.maybe (P.Nothing) (\(_,_val4258) -> P.Just (case _val4258 of {T.TStruct _val4260 -> (to_TalkException (T.TStruct _val4260)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendBuddyMessageToMids_result _ = P.error "not a struct"
read_SendBuddyMessageToMids_result :: T.Protocol p => p -> P.IO SendBuddyMessageToMids_result
read_SendBuddyMessageToMids_result iprot = to_SendBuddyMessageToMids_result <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyMessageToMids_result)
decode_SendBuddyMessageToMids_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyMessageToMids_result
decode_SendBuddyMessageToMids_result iprot bs = to_SendBuddyMessageToMids_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyMessageToMids_result) bs
typemap_SendBuddyMessageToMids_result :: T.TypeMap
typemap_SendBuddyMessageToMids_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SendBuddyMessageResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SendBuddyMessageToMids_result :: SendBuddyMessageToMids_result
default_SendBuddyMessageToMids_result = SendBuddyMessageToMids_result{
  sendBuddyMessageToMids_result_success = default_SendBuddyMessageResult,
  sendBuddyMessageToMids_result_e = P.Nothing}
data SendBuddyMessageToMidsAsync_args = SendBuddyMessageToMidsAsync_args  { sendBuddyMessageToMidsAsync_args_requestId :: LT.Text
  , sendBuddyMessageToMidsAsync_args_msg :: Message
  , sendBuddyMessageToMidsAsync_args_mids :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyMessageToMidsAsync_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyMessageToMidsAsync_args_requestId record   `H.hashWithSalt` sendBuddyMessageToMidsAsync_args_msg record   `H.hashWithSalt` sendBuddyMessageToMidsAsync_args_mids record  
instance QC.Arbitrary SendBuddyMessageToMidsAsync_args where 
  arbitrary = M.liftM SendBuddyMessageToMidsAsync_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendBuddyMessageToMidsAsync_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyMessageToMidsAsync_args{sendBuddyMessageToMidsAsync_args_requestId = sendBuddyMessageToMidsAsync_args_requestId obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMidsAsync_args{sendBuddyMessageToMidsAsync_args_requestId = sendBuddyMessageToMidsAsync_args_requestId obj}
    , if obj == default_SendBuddyMessageToMidsAsync_args{sendBuddyMessageToMidsAsync_args_msg = sendBuddyMessageToMidsAsync_args_msg obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMidsAsync_args{sendBuddyMessageToMidsAsync_args_msg = sendBuddyMessageToMidsAsync_args_msg obj}
    , if obj == default_SendBuddyMessageToMidsAsync_args{sendBuddyMessageToMidsAsync_args_mids = sendBuddyMessageToMidsAsync_args_mids obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMidsAsync_args{sendBuddyMessageToMidsAsync_args_mids = sendBuddyMessageToMidsAsync_args_mids obj}
    ]
from_SendBuddyMessageToMidsAsync_args :: SendBuddyMessageToMidsAsync_args -> T.ThriftVal
from_SendBuddyMessageToMidsAsync_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4263 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4263))) $ sendBuddyMessageToMidsAsync_args_requestId record
  , (\_v4263 -> P.Just (2, ("msg",from_Message _v4263))) $ sendBuddyMessageToMidsAsync_args_msg record
  , (\_v4263 -> P.Just (3, ("mids",T.TList T.T_STRING $ P.map (\_v4265 -> T.TString $ E.encodeUtf8 _v4265) $ Vector.toList _v4263))) $ sendBuddyMessageToMidsAsync_args_mids record
  ]
write_SendBuddyMessageToMidsAsync_args :: T.Protocol p => p -> SendBuddyMessageToMidsAsync_args -> P.IO ()
write_SendBuddyMessageToMidsAsync_args oprot record = T.writeVal oprot $ from_SendBuddyMessageToMidsAsync_args record
encode_SendBuddyMessageToMidsAsync_args :: T.StatelessProtocol p => p -> SendBuddyMessageToMidsAsync_args -> LBS.ByteString
encode_SendBuddyMessageToMidsAsync_args oprot record = T.serializeVal oprot $ from_SendBuddyMessageToMidsAsync_args record
to_SendBuddyMessageToMidsAsync_args :: T.ThriftVal -> SendBuddyMessageToMidsAsync_args
to_SendBuddyMessageToMidsAsync_args (T.TStruct fields) = SendBuddyMessageToMidsAsync_args{
  sendBuddyMessageToMidsAsync_args_requestId = P.maybe (sendBuddyMessageToMidsAsync_args_requestId default_SendBuddyMessageToMidsAsync_args) (\(_,_val4267) -> (case _val4267 of {T.TString _val4268 -> E.decodeUtf8 _val4268; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendBuddyMessageToMidsAsync_args_msg = P.maybe (sendBuddyMessageToMidsAsync_args_msg default_SendBuddyMessageToMidsAsync_args) (\(_,_val4267) -> (case _val4267 of {T.TStruct _val4269 -> (to_Message (T.TStruct _val4269)); _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  sendBuddyMessageToMidsAsync_args_mids = P.maybe (sendBuddyMessageToMidsAsync_args_mids default_SendBuddyMessageToMidsAsync_args) (\(_,_val4267) -> (case _val4267 of {T.TList _ _val4270 -> (Vector.fromList $ P.map (\_v4271 -> (case _v4271 of {T.TString _val4272 -> E.decodeUtf8 _val4272; _ -> P.error "wrong type"})) _val4270); _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_SendBuddyMessageToMidsAsync_args _ = P.error "not a struct"
read_SendBuddyMessageToMidsAsync_args :: T.Protocol p => p -> P.IO SendBuddyMessageToMidsAsync_args
read_SendBuddyMessageToMidsAsync_args iprot = to_SendBuddyMessageToMidsAsync_args <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyMessageToMidsAsync_args)
decode_SendBuddyMessageToMidsAsync_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyMessageToMidsAsync_args
decode_SendBuddyMessageToMidsAsync_args iprot bs = to_SendBuddyMessageToMidsAsync_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyMessageToMidsAsync_args) bs
typemap_SendBuddyMessageToMidsAsync_args :: T.TypeMap
typemap_SendBuddyMessageToMidsAsync_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message))),(3,("mids",(T.T_LIST T.T_STRING)))]
default_SendBuddyMessageToMidsAsync_args :: SendBuddyMessageToMidsAsync_args
default_SendBuddyMessageToMidsAsync_args = SendBuddyMessageToMidsAsync_args{
  sendBuddyMessageToMidsAsync_args_requestId = "",
  sendBuddyMessageToMidsAsync_args_msg = default_Message,
  sendBuddyMessageToMidsAsync_args_mids = Vector.empty}
data SendBuddyMessageToMidsAsync_result = SendBuddyMessageToMidsAsync_result  { sendBuddyMessageToMidsAsync_result_success :: LT.Text
  , sendBuddyMessageToMidsAsync_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyMessageToMidsAsync_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyMessageToMidsAsync_result_success record   `H.hashWithSalt` sendBuddyMessageToMidsAsync_result_e record  
instance QC.Arbitrary SendBuddyMessageToMidsAsync_result where 
  arbitrary = M.liftM SendBuddyMessageToMidsAsync_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendBuddyMessageToMidsAsync_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyMessageToMidsAsync_result{sendBuddyMessageToMidsAsync_result_success = sendBuddyMessageToMidsAsync_result_success obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMidsAsync_result{sendBuddyMessageToMidsAsync_result_success = sendBuddyMessageToMidsAsync_result_success obj}
    , if obj == default_SendBuddyMessageToMidsAsync_result{sendBuddyMessageToMidsAsync_result_e = sendBuddyMessageToMidsAsync_result_e obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMidsAsync_result{sendBuddyMessageToMidsAsync_result_e = sendBuddyMessageToMidsAsync_result_e obj}
    ]
from_SendBuddyMessageToMidsAsync_result :: SendBuddyMessageToMidsAsync_result -> T.ThriftVal
from_SendBuddyMessageToMidsAsync_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4275 -> (1, ("e",from_TalkException _v4275))) <$> sendBuddyMessageToMidsAsync_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4275 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v4275))) $ sendBuddyMessageToMidsAsync_result_success record
    , (\_v4275 -> (1, ("e",from_TalkException _v4275))) <$> sendBuddyMessageToMidsAsync_result_e record
    ]
    )
write_SendBuddyMessageToMidsAsync_result :: T.Protocol p => p -> SendBuddyMessageToMidsAsync_result -> P.IO ()
write_SendBuddyMessageToMidsAsync_result oprot record = T.writeVal oprot $ from_SendBuddyMessageToMidsAsync_result record
encode_SendBuddyMessageToMidsAsync_result :: T.StatelessProtocol p => p -> SendBuddyMessageToMidsAsync_result -> LBS.ByteString
encode_SendBuddyMessageToMidsAsync_result oprot record = T.serializeVal oprot $ from_SendBuddyMessageToMidsAsync_result record
to_SendBuddyMessageToMidsAsync_result :: T.ThriftVal -> SendBuddyMessageToMidsAsync_result
to_SendBuddyMessageToMidsAsync_result (T.TStruct fields) = SendBuddyMessageToMidsAsync_result{
  sendBuddyMessageToMidsAsync_result_success = P.maybe (sendBuddyMessageToMidsAsync_result_success default_SendBuddyMessageToMidsAsync_result) (\(_,_val4277) -> (case _val4277 of {T.TString _val4278 -> E.decodeUtf8 _val4278; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  sendBuddyMessageToMidsAsync_result_e = P.maybe (P.Nothing) (\(_,_val4277) -> P.Just (case _val4277 of {T.TStruct _val4279 -> (to_TalkException (T.TStruct _val4279)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendBuddyMessageToMidsAsync_result _ = P.error "not a struct"
read_SendBuddyMessageToMidsAsync_result :: T.Protocol p => p -> P.IO SendBuddyMessageToMidsAsync_result
read_SendBuddyMessageToMidsAsync_result iprot = to_SendBuddyMessageToMidsAsync_result <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyMessageToMidsAsync_result)
decode_SendBuddyMessageToMidsAsync_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyMessageToMidsAsync_result
decode_SendBuddyMessageToMidsAsync_result iprot bs = to_SendBuddyMessageToMidsAsync_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyMessageToMidsAsync_result) bs
typemap_SendBuddyMessageToMidsAsync_result :: T.TypeMap
typemap_SendBuddyMessageToMidsAsync_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SendBuddyMessageToMidsAsync_result :: SendBuddyMessageToMidsAsync_result
default_SendBuddyMessageToMidsAsync_result = SendBuddyMessageToMidsAsync_result{
  sendBuddyMessageToMidsAsync_result_success = "",
  sendBuddyMessageToMidsAsync_result_e = P.Nothing}
data SendIndividualEventToAllAsync_args = SendIndividualEventToAllAsync_args  { sendIndividualEventToAllAsync_args_requestId :: LT.Text
  , sendIndividualEventToAllAsync_args_buddyMid :: LT.Text
  , sendIndividualEventToAllAsync_args_notificationStatus :: NotificationStatus
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendIndividualEventToAllAsync_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendIndividualEventToAllAsync_args_requestId record   `H.hashWithSalt` sendIndividualEventToAllAsync_args_buddyMid record   `H.hashWithSalt` sendIndividualEventToAllAsync_args_notificationStatus record  
instance QC.Arbitrary SendIndividualEventToAllAsync_args where 
  arbitrary = M.liftM SendIndividualEventToAllAsync_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendIndividualEventToAllAsync_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendIndividualEventToAllAsync_args{sendIndividualEventToAllAsync_args_requestId = sendIndividualEventToAllAsync_args_requestId obj} then P.Nothing else P.Just $ default_SendIndividualEventToAllAsync_args{sendIndividualEventToAllAsync_args_requestId = sendIndividualEventToAllAsync_args_requestId obj}
    , if obj == default_SendIndividualEventToAllAsync_args{sendIndividualEventToAllAsync_args_buddyMid = sendIndividualEventToAllAsync_args_buddyMid obj} then P.Nothing else P.Just $ default_SendIndividualEventToAllAsync_args{sendIndividualEventToAllAsync_args_buddyMid = sendIndividualEventToAllAsync_args_buddyMid obj}
    , if obj == default_SendIndividualEventToAllAsync_args{sendIndividualEventToAllAsync_args_notificationStatus = sendIndividualEventToAllAsync_args_notificationStatus obj} then P.Nothing else P.Just $ default_SendIndividualEventToAllAsync_args{sendIndividualEventToAllAsync_args_notificationStatus = sendIndividualEventToAllAsync_args_notificationStatus obj}
    ]
from_SendIndividualEventToAllAsync_args :: SendIndividualEventToAllAsync_args -> T.ThriftVal
from_SendIndividualEventToAllAsync_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4282 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4282))) $ sendIndividualEventToAllAsync_args_requestId record
  , (\_v4282 -> P.Just (2, ("buddyMid",T.TString $ E.encodeUtf8 _v4282))) $ sendIndividualEventToAllAsync_args_buddyMid record
  , (\_v4282 -> P.Just (3, ("notificationStatus",T.TI32 $ P.fromIntegral $ P.fromEnum _v4282))) $ sendIndividualEventToAllAsync_args_notificationStatus record
  ]
write_SendIndividualEventToAllAsync_args :: T.Protocol p => p -> SendIndividualEventToAllAsync_args -> P.IO ()
write_SendIndividualEventToAllAsync_args oprot record = T.writeVal oprot $ from_SendIndividualEventToAllAsync_args record
encode_SendIndividualEventToAllAsync_args :: T.StatelessProtocol p => p -> SendIndividualEventToAllAsync_args -> LBS.ByteString
encode_SendIndividualEventToAllAsync_args oprot record = T.serializeVal oprot $ from_SendIndividualEventToAllAsync_args record
to_SendIndividualEventToAllAsync_args :: T.ThriftVal -> SendIndividualEventToAllAsync_args
to_SendIndividualEventToAllAsync_args (T.TStruct fields) = SendIndividualEventToAllAsync_args{
  sendIndividualEventToAllAsync_args_requestId = P.maybe (sendIndividualEventToAllAsync_args_requestId default_SendIndividualEventToAllAsync_args) (\(_,_val4284) -> (case _val4284 of {T.TString _val4285 -> E.decodeUtf8 _val4285; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendIndividualEventToAllAsync_args_buddyMid = P.maybe (sendIndividualEventToAllAsync_args_buddyMid default_SendIndividualEventToAllAsync_args) (\(_,_val4284) -> (case _val4284 of {T.TString _val4286 -> E.decodeUtf8 _val4286; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  sendIndividualEventToAllAsync_args_notificationStatus = P.maybe (sendIndividualEventToAllAsync_args_notificationStatus default_SendIndividualEventToAllAsync_args) (\(_,_val4284) -> (case _val4284 of {T.TI32 _val4287 -> P.toEnum $ P.fromIntegral _val4287; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_SendIndividualEventToAllAsync_args _ = P.error "not a struct"
read_SendIndividualEventToAllAsync_args :: T.Protocol p => p -> P.IO SendIndividualEventToAllAsync_args
read_SendIndividualEventToAllAsync_args iprot = to_SendIndividualEventToAllAsync_args <$> T.readVal iprot (T.T_STRUCT typemap_SendIndividualEventToAllAsync_args)
decode_SendIndividualEventToAllAsync_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendIndividualEventToAllAsync_args
decode_SendIndividualEventToAllAsync_args iprot bs = to_SendIndividualEventToAllAsync_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendIndividualEventToAllAsync_args) bs
typemap_SendIndividualEventToAllAsync_args :: T.TypeMap
typemap_SendIndividualEventToAllAsync_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("buddyMid",T.T_STRING)),(3,("notificationStatus",T.T_I32))]
default_SendIndividualEventToAllAsync_args :: SendIndividualEventToAllAsync_args
default_SendIndividualEventToAllAsync_args = SendIndividualEventToAllAsync_args{
  sendIndividualEventToAllAsync_args_requestId = "",
  sendIndividualEventToAllAsync_args_buddyMid = "",
  sendIndividualEventToAllAsync_args_notificationStatus = (P.toEnum 0)}
data SendIndividualEventToAllAsync_result = SendIndividualEventToAllAsync_result  { sendIndividualEventToAllAsync_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendIndividualEventToAllAsync_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendIndividualEventToAllAsync_result_e record  
instance QC.Arbitrary SendIndividualEventToAllAsync_result where 
  arbitrary = M.liftM SendIndividualEventToAllAsync_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendIndividualEventToAllAsync_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendIndividualEventToAllAsync_result{sendIndividualEventToAllAsync_result_e = sendIndividualEventToAllAsync_result_e obj} then P.Nothing else P.Just $ default_SendIndividualEventToAllAsync_result{sendIndividualEventToAllAsync_result_e = sendIndividualEventToAllAsync_result_e obj}
    ]
from_SendIndividualEventToAllAsync_result :: SendIndividualEventToAllAsync_result -> T.ThriftVal
from_SendIndividualEventToAllAsync_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4290 -> (1, ("e",from_TalkException _v4290))) <$> sendIndividualEventToAllAsync_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4290 -> (1, ("e",from_TalkException _v4290))) <$> sendIndividualEventToAllAsync_result_e record
    ]
    )
write_SendIndividualEventToAllAsync_result :: T.Protocol p => p -> SendIndividualEventToAllAsync_result -> P.IO ()
write_SendIndividualEventToAllAsync_result oprot record = T.writeVal oprot $ from_SendIndividualEventToAllAsync_result record
encode_SendIndividualEventToAllAsync_result :: T.StatelessProtocol p => p -> SendIndividualEventToAllAsync_result -> LBS.ByteString
encode_SendIndividualEventToAllAsync_result oprot record = T.serializeVal oprot $ from_SendIndividualEventToAllAsync_result record
to_SendIndividualEventToAllAsync_result :: T.ThriftVal -> SendIndividualEventToAllAsync_result
to_SendIndividualEventToAllAsync_result (T.TStruct fields) = SendIndividualEventToAllAsync_result{
  sendIndividualEventToAllAsync_result_e = P.maybe (P.Nothing) (\(_,_val4292) -> P.Just (case _val4292 of {T.TStruct _val4293 -> (to_TalkException (T.TStruct _val4293)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendIndividualEventToAllAsync_result _ = P.error "not a struct"
read_SendIndividualEventToAllAsync_result :: T.Protocol p => p -> P.IO SendIndividualEventToAllAsync_result
read_SendIndividualEventToAllAsync_result iprot = to_SendIndividualEventToAllAsync_result <$> T.readVal iprot (T.T_STRUCT typemap_SendIndividualEventToAllAsync_result)
decode_SendIndividualEventToAllAsync_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendIndividualEventToAllAsync_result
decode_SendIndividualEventToAllAsync_result iprot bs = to_SendIndividualEventToAllAsync_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendIndividualEventToAllAsync_result) bs
typemap_SendIndividualEventToAllAsync_result :: T.TypeMap
typemap_SendIndividualEventToAllAsync_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SendIndividualEventToAllAsync_result :: SendIndividualEventToAllAsync_result
default_SendIndividualEventToAllAsync_result = SendIndividualEventToAllAsync_result{
  sendIndividualEventToAllAsync_result_e = P.Nothing}
data SetBuddyOnAir_args = SetBuddyOnAir_args  { setBuddyOnAir_args_requestId :: LT.Text
  , setBuddyOnAir_args_onAir :: P.Bool
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SetBuddyOnAir_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` setBuddyOnAir_args_requestId record   `H.hashWithSalt` setBuddyOnAir_args_onAir record  
instance QC.Arbitrary SetBuddyOnAir_args where 
  arbitrary = M.liftM SetBuddyOnAir_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SetBuddyOnAir_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SetBuddyOnAir_args{setBuddyOnAir_args_requestId = setBuddyOnAir_args_requestId obj} then P.Nothing else P.Just $ default_SetBuddyOnAir_args{setBuddyOnAir_args_requestId = setBuddyOnAir_args_requestId obj}
    , if obj == default_SetBuddyOnAir_args{setBuddyOnAir_args_onAir = setBuddyOnAir_args_onAir obj} then P.Nothing else P.Just $ default_SetBuddyOnAir_args{setBuddyOnAir_args_onAir = setBuddyOnAir_args_onAir obj}
    ]
from_SetBuddyOnAir_args :: SetBuddyOnAir_args -> T.ThriftVal
from_SetBuddyOnAir_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4296 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4296))) $ setBuddyOnAir_args_requestId record
  , (\_v4296 -> P.Just (2, ("onAir",T.TBool _v4296))) $ setBuddyOnAir_args_onAir record
  ]
write_SetBuddyOnAir_args :: T.Protocol p => p -> SetBuddyOnAir_args -> P.IO ()
write_SetBuddyOnAir_args oprot record = T.writeVal oprot $ from_SetBuddyOnAir_args record
encode_SetBuddyOnAir_args :: T.StatelessProtocol p => p -> SetBuddyOnAir_args -> LBS.ByteString
encode_SetBuddyOnAir_args oprot record = T.serializeVal oprot $ from_SetBuddyOnAir_args record
to_SetBuddyOnAir_args :: T.ThriftVal -> SetBuddyOnAir_args
to_SetBuddyOnAir_args (T.TStruct fields) = SetBuddyOnAir_args{
  setBuddyOnAir_args_requestId = P.maybe (setBuddyOnAir_args_requestId default_SetBuddyOnAir_args) (\(_,_val4298) -> (case _val4298 of {T.TString _val4299 -> E.decodeUtf8 _val4299; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  setBuddyOnAir_args_onAir = P.maybe (setBuddyOnAir_args_onAir default_SetBuddyOnAir_args) (\(_,_val4298) -> (case _val4298 of {T.TBool _val4300 -> _val4300; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_SetBuddyOnAir_args _ = P.error "not a struct"
read_SetBuddyOnAir_args :: T.Protocol p => p -> P.IO SetBuddyOnAir_args
read_SetBuddyOnAir_args iprot = to_SetBuddyOnAir_args <$> T.readVal iprot (T.T_STRUCT typemap_SetBuddyOnAir_args)
decode_SetBuddyOnAir_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SetBuddyOnAir_args
decode_SetBuddyOnAir_args iprot bs = to_SetBuddyOnAir_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SetBuddyOnAir_args) bs
typemap_SetBuddyOnAir_args :: T.TypeMap
typemap_SetBuddyOnAir_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("onAir",T.T_BOOL))]
default_SetBuddyOnAir_args :: SetBuddyOnAir_args
default_SetBuddyOnAir_args = SetBuddyOnAir_args{
  setBuddyOnAir_args_requestId = "",
  setBuddyOnAir_args_onAir = P.False}
data SetBuddyOnAir_result = SetBuddyOnAir_result  { setBuddyOnAir_result_success :: SetBuddyOnAirResult
  , setBuddyOnAir_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SetBuddyOnAir_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` setBuddyOnAir_result_success record   `H.hashWithSalt` setBuddyOnAir_result_e record  
instance QC.Arbitrary SetBuddyOnAir_result where 
  arbitrary = M.liftM SetBuddyOnAir_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SetBuddyOnAir_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SetBuddyOnAir_result{setBuddyOnAir_result_success = setBuddyOnAir_result_success obj} then P.Nothing else P.Just $ default_SetBuddyOnAir_result{setBuddyOnAir_result_success = setBuddyOnAir_result_success obj}
    , if obj == default_SetBuddyOnAir_result{setBuddyOnAir_result_e = setBuddyOnAir_result_e obj} then P.Nothing else P.Just $ default_SetBuddyOnAir_result{setBuddyOnAir_result_e = setBuddyOnAir_result_e obj}
    ]
from_SetBuddyOnAir_result :: SetBuddyOnAir_result -> T.ThriftVal
from_SetBuddyOnAir_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4303 -> (1, ("e",from_TalkException _v4303))) <$> setBuddyOnAir_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4303 -> P.Just (0, ("success",from_SetBuddyOnAirResult _v4303))) $ setBuddyOnAir_result_success record
    , (\_v4303 -> (1, ("e",from_TalkException _v4303))) <$> setBuddyOnAir_result_e record
    ]
    )
write_SetBuddyOnAir_result :: T.Protocol p => p -> SetBuddyOnAir_result -> P.IO ()
write_SetBuddyOnAir_result oprot record = T.writeVal oprot $ from_SetBuddyOnAir_result record
encode_SetBuddyOnAir_result :: T.StatelessProtocol p => p -> SetBuddyOnAir_result -> LBS.ByteString
encode_SetBuddyOnAir_result oprot record = T.serializeVal oprot $ from_SetBuddyOnAir_result record
to_SetBuddyOnAir_result :: T.ThriftVal -> SetBuddyOnAir_result
to_SetBuddyOnAir_result (T.TStruct fields) = SetBuddyOnAir_result{
  setBuddyOnAir_result_success = P.maybe (setBuddyOnAir_result_success default_SetBuddyOnAir_result) (\(_,_val4305) -> (case _val4305 of {T.TStruct _val4306 -> (to_SetBuddyOnAirResult (T.TStruct _val4306)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  setBuddyOnAir_result_e = P.maybe (P.Nothing) (\(_,_val4305) -> P.Just (case _val4305 of {T.TStruct _val4307 -> (to_TalkException (T.TStruct _val4307)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SetBuddyOnAir_result _ = P.error "not a struct"
read_SetBuddyOnAir_result :: T.Protocol p => p -> P.IO SetBuddyOnAir_result
read_SetBuddyOnAir_result iprot = to_SetBuddyOnAir_result <$> T.readVal iprot (T.T_STRUCT typemap_SetBuddyOnAir_result)
decode_SetBuddyOnAir_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SetBuddyOnAir_result
decode_SetBuddyOnAir_result iprot bs = to_SetBuddyOnAir_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SetBuddyOnAir_result) bs
typemap_SetBuddyOnAir_result :: T.TypeMap
typemap_SetBuddyOnAir_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SetBuddyOnAirResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SetBuddyOnAir_result :: SetBuddyOnAir_result
default_SetBuddyOnAir_result = SetBuddyOnAir_result{
  setBuddyOnAir_result_success = default_SetBuddyOnAirResult,
  setBuddyOnAir_result_e = P.Nothing}
data SetBuddyOnAirAsync_args = SetBuddyOnAirAsync_args  { setBuddyOnAirAsync_args_requestId :: LT.Text
  , setBuddyOnAirAsync_args_onAir :: P.Bool
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SetBuddyOnAirAsync_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` setBuddyOnAirAsync_args_requestId record   `H.hashWithSalt` setBuddyOnAirAsync_args_onAir record  
instance QC.Arbitrary SetBuddyOnAirAsync_args where 
  arbitrary = M.liftM SetBuddyOnAirAsync_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SetBuddyOnAirAsync_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SetBuddyOnAirAsync_args{setBuddyOnAirAsync_args_requestId = setBuddyOnAirAsync_args_requestId obj} then P.Nothing else P.Just $ default_SetBuddyOnAirAsync_args{setBuddyOnAirAsync_args_requestId = setBuddyOnAirAsync_args_requestId obj}
    , if obj == default_SetBuddyOnAirAsync_args{setBuddyOnAirAsync_args_onAir = setBuddyOnAirAsync_args_onAir obj} then P.Nothing else P.Just $ default_SetBuddyOnAirAsync_args{setBuddyOnAirAsync_args_onAir = setBuddyOnAirAsync_args_onAir obj}
    ]
from_SetBuddyOnAirAsync_args :: SetBuddyOnAirAsync_args -> T.ThriftVal
from_SetBuddyOnAirAsync_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4310 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4310))) $ setBuddyOnAirAsync_args_requestId record
  , (\_v4310 -> P.Just (2, ("onAir",T.TBool _v4310))) $ setBuddyOnAirAsync_args_onAir record
  ]
write_SetBuddyOnAirAsync_args :: T.Protocol p => p -> SetBuddyOnAirAsync_args -> P.IO ()
write_SetBuddyOnAirAsync_args oprot record = T.writeVal oprot $ from_SetBuddyOnAirAsync_args record
encode_SetBuddyOnAirAsync_args :: T.StatelessProtocol p => p -> SetBuddyOnAirAsync_args -> LBS.ByteString
encode_SetBuddyOnAirAsync_args oprot record = T.serializeVal oprot $ from_SetBuddyOnAirAsync_args record
to_SetBuddyOnAirAsync_args :: T.ThriftVal -> SetBuddyOnAirAsync_args
to_SetBuddyOnAirAsync_args (T.TStruct fields) = SetBuddyOnAirAsync_args{
  setBuddyOnAirAsync_args_requestId = P.maybe (setBuddyOnAirAsync_args_requestId default_SetBuddyOnAirAsync_args) (\(_,_val4312) -> (case _val4312 of {T.TString _val4313 -> E.decodeUtf8 _val4313; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  setBuddyOnAirAsync_args_onAir = P.maybe (setBuddyOnAirAsync_args_onAir default_SetBuddyOnAirAsync_args) (\(_,_val4312) -> (case _val4312 of {T.TBool _val4314 -> _val4314; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_SetBuddyOnAirAsync_args _ = P.error "not a struct"
read_SetBuddyOnAirAsync_args :: T.Protocol p => p -> P.IO SetBuddyOnAirAsync_args
read_SetBuddyOnAirAsync_args iprot = to_SetBuddyOnAirAsync_args <$> T.readVal iprot (T.T_STRUCT typemap_SetBuddyOnAirAsync_args)
decode_SetBuddyOnAirAsync_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SetBuddyOnAirAsync_args
decode_SetBuddyOnAirAsync_args iprot bs = to_SetBuddyOnAirAsync_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SetBuddyOnAirAsync_args) bs
typemap_SetBuddyOnAirAsync_args :: T.TypeMap
typemap_SetBuddyOnAirAsync_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("onAir",T.T_BOOL))]
default_SetBuddyOnAirAsync_args :: SetBuddyOnAirAsync_args
default_SetBuddyOnAirAsync_args = SetBuddyOnAirAsync_args{
  setBuddyOnAirAsync_args_requestId = "",
  setBuddyOnAirAsync_args_onAir = P.False}
data SetBuddyOnAirAsync_result = SetBuddyOnAirAsync_result  { setBuddyOnAirAsync_result_success :: LT.Text
  , setBuddyOnAirAsync_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SetBuddyOnAirAsync_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` setBuddyOnAirAsync_result_success record   `H.hashWithSalt` setBuddyOnAirAsync_result_e record  
instance QC.Arbitrary SetBuddyOnAirAsync_result where 
  arbitrary = M.liftM SetBuddyOnAirAsync_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SetBuddyOnAirAsync_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SetBuddyOnAirAsync_result{setBuddyOnAirAsync_result_success = setBuddyOnAirAsync_result_success obj} then P.Nothing else P.Just $ default_SetBuddyOnAirAsync_result{setBuddyOnAirAsync_result_success = setBuddyOnAirAsync_result_success obj}
    , if obj == default_SetBuddyOnAirAsync_result{setBuddyOnAirAsync_result_e = setBuddyOnAirAsync_result_e obj} then P.Nothing else P.Just $ default_SetBuddyOnAirAsync_result{setBuddyOnAirAsync_result_e = setBuddyOnAirAsync_result_e obj}
    ]
from_SetBuddyOnAirAsync_result :: SetBuddyOnAirAsync_result -> T.ThriftVal
from_SetBuddyOnAirAsync_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4317 -> (1, ("e",from_TalkException _v4317))) <$> setBuddyOnAirAsync_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4317 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v4317))) $ setBuddyOnAirAsync_result_success record
    , (\_v4317 -> (1, ("e",from_TalkException _v4317))) <$> setBuddyOnAirAsync_result_e record
    ]
    )
write_SetBuddyOnAirAsync_result :: T.Protocol p => p -> SetBuddyOnAirAsync_result -> P.IO ()
write_SetBuddyOnAirAsync_result oprot record = T.writeVal oprot $ from_SetBuddyOnAirAsync_result record
encode_SetBuddyOnAirAsync_result :: T.StatelessProtocol p => p -> SetBuddyOnAirAsync_result -> LBS.ByteString
encode_SetBuddyOnAirAsync_result oprot record = T.serializeVal oprot $ from_SetBuddyOnAirAsync_result record
to_SetBuddyOnAirAsync_result :: T.ThriftVal -> SetBuddyOnAirAsync_result
to_SetBuddyOnAirAsync_result (T.TStruct fields) = SetBuddyOnAirAsync_result{
  setBuddyOnAirAsync_result_success = P.maybe (setBuddyOnAirAsync_result_success default_SetBuddyOnAirAsync_result) (\(_,_val4319) -> (case _val4319 of {T.TString _val4320 -> E.decodeUtf8 _val4320; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  setBuddyOnAirAsync_result_e = P.maybe (P.Nothing) (\(_,_val4319) -> P.Just (case _val4319 of {T.TStruct _val4321 -> (to_TalkException (T.TStruct _val4321)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SetBuddyOnAirAsync_result _ = P.error "not a struct"
read_SetBuddyOnAirAsync_result :: T.Protocol p => p -> P.IO SetBuddyOnAirAsync_result
read_SetBuddyOnAirAsync_result iprot = to_SetBuddyOnAirAsync_result <$> T.readVal iprot (T.T_STRUCT typemap_SetBuddyOnAirAsync_result)
decode_SetBuddyOnAirAsync_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SetBuddyOnAirAsync_result
decode_SetBuddyOnAirAsync_result iprot bs = to_SetBuddyOnAirAsync_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SetBuddyOnAirAsync_result) bs
typemap_SetBuddyOnAirAsync_result :: T.TypeMap
typemap_SetBuddyOnAirAsync_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SetBuddyOnAirAsync_result :: SetBuddyOnAirAsync_result
default_SetBuddyOnAirAsync_result = SetBuddyOnAirAsync_result{
  setBuddyOnAirAsync_result_success = "",
  setBuddyOnAirAsync_result_e = P.Nothing}
data StoreMessage_args = StoreMessage_args  { storeMessage_args_requestId :: LT.Text
  , storeMessage_args_messageRequest :: BuddyMessageRequest
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable StoreMessage_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` storeMessage_args_requestId record   `H.hashWithSalt` storeMessage_args_messageRequest record  
instance QC.Arbitrary StoreMessage_args where 
  arbitrary = M.liftM StoreMessage_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_StoreMessage_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_StoreMessage_args{storeMessage_args_requestId = storeMessage_args_requestId obj} then P.Nothing else P.Just $ default_StoreMessage_args{storeMessage_args_requestId = storeMessage_args_requestId obj}
    , if obj == default_StoreMessage_args{storeMessage_args_messageRequest = storeMessage_args_messageRequest obj} then P.Nothing else P.Just $ default_StoreMessage_args{storeMessage_args_messageRequest = storeMessage_args_messageRequest obj}
    ]
from_StoreMessage_args :: StoreMessage_args -> T.ThriftVal
from_StoreMessage_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4324 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4324))) $ storeMessage_args_requestId record
  , (\_v4324 -> P.Just (2, ("messageRequest",from_BuddyMessageRequest _v4324))) $ storeMessage_args_messageRequest record
  ]
write_StoreMessage_args :: T.Protocol p => p -> StoreMessage_args -> P.IO ()
write_StoreMessage_args oprot record = T.writeVal oprot $ from_StoreMessage_args record
encode_StoreMessage_args :: T.StatelessProtocol p => p -> StoreMessage_args -> LBS.ByteString
encode_StoreMessage_args oprot record = T.serializeVal oprot $ from_StoreMessage_args record
to_StoreMessage_args :: T.ThriftVal -> StoreMessage_args
to_StoreMessage_args (T.TStruct fields) = StoreMessage_args{
  storeMessage_args_requestId = P.maybe (storeMessage_args_requestId default_StoreMessage_args) (\(_,_val4326) -> (case _val4326 of {T.TString _val4327 -> E.decodeUtf8 _val4327; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  storeMessage_args_messageRequest = P.maybe (storeMessage_args_messageRequest default_StoreMessage_args) (\(_,_val4326) -> (case _val4326 of {T.TStruct _val4328 -> (to_BuddyMessageRequest (T.TStruct _val4328)); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_StoreMessage_args _ = P.error "not a struct"
read_StoreMessage_args :: T.Protocol p => p -> P.IO StoreMessage_args
read_StoreMessage_args iprot = to_StoreMessage_args <$> T.readVal iprot (T.T_STRUCT typemap_StoreMessage_args)
decode_StoreMessage_args :: T.StatelessProtocol p => p -> LBS.ByteString -> StoreMessage_args
decode_StoreMessage_args iprot bs = to_StoreMessage_args $ T.deserializeVal iprot (T.T_STRUCT typemap_StoreMessage_args) bs
typemap_StoreMessage_args :: T.TypeMap
typemap_StoreMessage_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("messageRequest",(T.T_STRUCT typemap_BuddyMessageRequest)))]
default_StoreMessage_args :: StoreMessage_args
default_StoreMessage_args = StoreMessage_args{
  storeMessage_args_requestId = "",
  storeMessage_args_messageRequest = default_BuddyMessageRequest}
data StoreMessage_result = StoreMessage_result  { storeMessage_result_success :: SendBuddyMessageResult
  , storeMessage_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable StoreMessage_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` storeMessage_result_success record   `H.hashWithSalt` storeMessage_result_e record  
instance QC.Arbitrary StoreMessage_result where 
  arbitrary = M.liftM StoreMessage_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_StoreMessage_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_StoreMessage_result{storeMessage_result_success = storeMessage_result_success obj} then P.Nothing else P.Just $ default_StoreMessage_result{storeMessage_result_success = storeMessage_result_success obj}
    , if obj == default_StoreMessage_result{storeMessage_result_e = storeMessage_result_e obj} then P.Nothing else P.Just $ default_StoreMessage_result{storeMessage_result_e = storeMessage_result_e obj}
    ]
from_StoreMessage_result :: StoreMessage_result -> T.ThriftVal
from_StoreMessage_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4331 -> (1, ("e",from_TalkException _v4331))) <$> storeMessage_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4331 -> P.Just (0, ("success",from_SendBuddyMessageResult _v4331))) $ storeMessage_result_success record
    , (\_v4331 -> (1, ("e",from_TalkException _v4331))) <$> storeMessage_result_e record
    ]
    )
write_StoreMessage_result :: T.Protocol p => p -> StoreMessage_result -> P.IO ()
write_StoreMessage_result oprot record = T.writeVal oprot $ from_StoreMessage_result record
encode_StoreMessage_result :: T.StatelessProtocol p => p -> StoreMessage_result -> LBS.ByteString
encode_StoreMessage_result oprot record = T.serializeVal oprot $ from_StoreMessage_result record
to_StoreMessage_result :: T.ThriftVal -> StoreMessage_result
to_StoreMessage_result (T.TStruct fields) = StoreMessage_result{
  storeMessage_result_success = P.maybe (storeMessage_result_success default_StoreMessage_result) (\(_,_val4333) -> (case _val4333 of {T.TStruct _val4334 -> (to_SendBuddyMessageResult (T.TStruct _val4334)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  storeMessage_result_e = P.maybe (P.Nothing) (\(_,_val4333) -> P.Just (case _val4333 of {T.TStruct _val4335 -> (to_TalkException (T.TStruct _val4335)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_StoreMessage_result _ = P.error "not a struct"
read_StoreMessage_result :: T.Protocol p => p -> P.IO StoreMessage_result
read_StoreMessage_result iprot = to_StoreMessage_result <$> T.readVal iprot (T.T_STRUCT typemap_StoreMessage_result)
decode_StoreMessage_result :: T.StatelessProtocol p => p -> LBS.ByteString -> StoreMessage_result
decode_StoreMessage_result iprot bs = to_StoreMessage_result $ T.deserializeVal iprot (T.T_STRUCT typemap_StoreMessage_result) bs
typemap_StoreMessage_result :: T.TypeMap
typemap_StoreMessage_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SendBuddyMessageResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_StoreMessage_result :: StoreMessage_result
default_StoreMessage_result = StoreMessage_result{
  storeMessage_result_success = default_SendBuddyMessageResult,
  storeMessage_result_e = P.Nothing}
data UnblockBuddyMember_args = UnblockBuddyMember_args  { unblockBuddyMember_args_requestId :: LT.Text
  , unblockBuddyMember_args_mid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UnblockBuddyMember_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` unblockBuddyMember_args_requestId record   `H.hashWithSalt` unblockBuddyMember_args_mid record  
instance QC.Arbitrary UnblockBuddyMember_args where 
  arbitrary = M.liftM UnblockBuddyMember_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_UnblockBuddyMember_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UnblockBuddyMember_args{unblockBuddyMember_args_requestId = unblockBuddyMember_args_requestId obj} then P.Nothing else P.Just $ default_UnblockBuddyMember_args{unblockBuddyMember_args_requestId = unblockBuddyMember_args_requestId obj}
    , if obj == default_UnblockBuddyMember_args{unblockBuddyMember_args_mid = unblockBuddyMember_args_mid obj} then P.Nothing else P.Just $ default_UnblockBuddyMember_args{unblockBuddyMember_args_mid = unblockBuddyMember_args_mid obj}
    ]
from_UnblockBuddyMember_args :: UnblockBuddyMember_args -> T.ThriftVal
from_UnblockBuddyMember_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4338 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4338))) $ unblockBuddyMember_args_requestId record
  , (\_v4338 -> P.Just (2, ("mid",T.TString $ E.encodeUtf8 _v4338))) $ unblockBuddyMember_args_mid record
  ]
write_UnblockBuddyMember_args :: T.Protocol p => p -> UnblockBuddyMember_args -> P.IO ()
write_UnblockBuddyMember_args oprot record = T.writeVal oprot $ from_UnblockBuddyMember_args record
encode_UnblockBuddyMember_args :: T.StatelessProtocol p => p -> UnblockBuddyMember_args -> LBS.ByteString
encode_UnblockBuddyMember_args oprot record = T.serializeVal oprot $ from_UnblockBuddyMember_args record
to_UnblockBuddyMember_args :: T.ThriftVal -> UnblockBuddyMember_args
to_UnblockBuddyMember_args (T.TStruct fields) = UnblockBuddyMember_args{
  unblockBuddyMember_args_requestId = P.maybe (unblockBuddyMember_args_requestId default_UnblockBuddyMember_args) (\(_,_val4340) -> (case _val4340 of {T.TString _val4341 -> E.decodeUtf8 _val4341; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  unblockBuddyMember_args_mid = P.maybe (unblockBuddyMember_args_mid default_UnblockBuddyMember_args) (\(_,_val4340) -> (case _val4340 of {T.TString _val4342 -> E.decodeUtf8 _val4342; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_UnblockBuddyMember_args _ = P.error "not a struct"
read_UnblockBuddyMember_args :: T.Protocol p => p -> P.IO UnblockBuddyMember_args
read_UnblockBuddyMember_args iprot = to_UnblockBuddyMember_args <$> T.readVal iprot (T.T_STRUCT typemap_UnblockBuddyMember_args)
decode_UnblockBuddyMember_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UnblockBuddyMember_args
decode_UnblockBuddyMember_args iprot bs = to_UnblockBuddyMember_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UnblockBuddyMember_args) bs
typemap_UnblockBuddyMember_args :: T.TypeMap
typemap_UnblockBuddyMember_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("mid",T.T_STRING))]
default_UnblockBuddyMember_args :: UnblockBuddyMember_args
default_UnblockBuddyMember_args = UnblockBuddyMember_args{
  unblockBuddyMember_args_requestId = "",
  unblockBuddyMember_args_mid = ""}
data UnblockBuddyMember_result = UnblockBuddyMember_result  { unblockBuddyMember_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UnblockBuddyMember_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` unblockBuddyMember_result_e record  
instance QC.Arbitrary UnblockBuddyMember_result where 
  arbitrary = M.liftM UnblockBuddyMember_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UnblockBuddyMember_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UnblockBuddyMember_result{unblockBuddyMember_result_e = unblockBuddyMember_result_e obj} then P.Nothing else P.Just $ default_UnblockBuddyMember_result{unblockBuddyMember_result_e = unblockBuddyMember_result_e obj}
    ]
from_UnblockBuddyMember_result :: UnblockBuddyMember_result -> T.ThriftVal
from_UnblockBuddyMember_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4345 -> (1, ("e",from_TalkException _v4345))) <$> unblockBuddyMember_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4345 -> (1, ("e",from_TalkException _v4345))) <$> unblockBuddyMember_result_e record
    ]
    )
write_UnblockBuddyMember_result :: T.Protocol p => p -> UnblockBuddyMember_result -> P.IO ()
write_UnblockBuddyMember_result oprot record = T.writeVal oprot $ from_UnblockBuddyMember_result record
encode_UnblockBuddyMember_result :: T.StatelessProtocol p => p -> UnblockBuddyMember_result -> LBS.ByteString
encode_UnblockBuddyMember_result oprot record = T.serializeVal oprot $ from_UnblockBuddyMember_result record
to_UnblockBuddyMember_result :: T.ThriftVal -> UnblockBuddyMember_result
to_UnblockBuddyMember_result (T.TStruct fields) = UnblockBuddyMember_result{
  unblockBuddyMember_result_e = P.maybe (P.Nothing) (\(_,_val4347) -> P.Just (case _val4347 of {T.TStruct _val4348 -> (to_TalkException (T.TStruct _val4348)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UnblockBuddyMember_result _ = P.error "not a struct"
read_UnblockBuddyMember_result :: T.Protocol p => p -> P.IO UnblockBuddyMember_result
read_UnblockBuddyMember_result iprot = to_UnblockBuddyMember_result <$> T.readVal iprot (T.T_STRUCT typemap_UnblockBuddyMember_result)
decode_UnblockBuddyMember_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UnblockBuddyMember_result
decode_UnblockBuddyMember_result iprot bs = to_UnblockBuddyMember_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UnblockBuddyMember_result) bs
typemap_UnblockBuddyMember_result :: T.TypeMap
typemap_UnblockBuddyMember_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UnblockBuddyMember_result :: UnblockBuddyMember_result
default_UnblockBuddyMember_result = UnblockBuddyMember_result{
  unblockBuddyMember_result_e = P.Nothing}
data UnregisterBuddy_args = UnregisterBuddy_args  { unregisterBuddy_args_requestId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UnregisterBuddy_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` unregisterBuddy_args_requestId record  
instance QC.Arbitrary UnregisterBuddy_args where 
  arbitrary = M.liftM UnregisterBuddy_args (QC.arbitrary)
  shrink obj | obj == default_UnregisterBuddy_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UnregisterBuddy_args{unregisterBuddy_args_requestId = unregisterBuddy_args_requestId obj} then P.Nothing else P.Just $ default_UnregisterBuddy_args{unregisterBuddy_args_requestId = unregisterBuddy_args_requestId obj}
    ]
from_UnregisterBuddy_args :: UnregisterBuddy_args -> T.ThriftVal
from_UnregisterBuddy_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4351 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4351))) $ unregisterBuddy_args_requestId record
  ]
write_UnregisterBuddy_args :: T.Protocol p => p -> UnregisterBuddy_args -> P.IO ()
write_UnregisterBuddy_args oprot record = T.writeVal oprot $ from_UnregisterBuddy_args record
encode_UnregisterBuddy_args :: T.StatelessProtocol p => p -> UnregisterBuddy_args -> LBS.ByteString
encode_UnregisterBuddy_args oprot record = T.serializeVal oprot $ from_UnregisterBuddy_args record
to_UnregisterBuddy_args :: T.ThriftVal -> UnregisterBuddy_args
to_UnregisterBuddy_args (T.TStruct fields) = UnregisterBuddy_args{
  unregisterBuddy_args_requestId = P.maybe (unregisterBuddy_args_requestId default_UnregisterBuddy_args) (\(_,_val4353) -> (case _val4353 of {T.TString _val4354 -> E.decodeUtf8 _val4354; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UnregisterBuddy_args _ = P.error "not a struct"
read_UnregisterBuddy_args :: T.Protocol p => p -> P.IO UnregisterBuddy_args
read_UnregisterBuddy_args iprot = to_UnregisterBuddy_args <$> T.readVal iprot (T.T_STRUCT typemap_UnregisterBuddy_args)
decode_UnregisterBuddy_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UnregisterBuddy_args
decode_UnregisterBuddy_args iprot bs = to_UnregisterBuddy_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UnregisterBuddy_args) bs
typemap_UnregisterBuddy_args :: T.TypeMap
typemap_UnregisterBuddy_args = Map.fromList [(1,("requestId",T.T_STRING))]
default_UnregisterBuddy_args :: UnregisterBuddy_args
default_UnregisterBuddy_args = UnregisterBuddy_args{
  unregisterBuddy_args_requestId = ""}
data UnregisterBuddy_result = UnregisterBuddy_result  { unregisterBuddy_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UnregisterBuddy_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` unregisterBuddy_result_e record  
instance QC.Arbitrary UnregisterBuddy_result where 
  arbitrary = M.liftM UnregisterBuddy_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UnregisterBuddy_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UnregisterBuddy_result{unregisterBuddy_result_e = unregisterBuddy_result_e obj} then P.Nothing else P.Just $ default_UnregisterBuddy_result{unregisterBuddy_result_e = unregisterBuddy_result_e obj}
    ]
from_UnregisterBuddy_result :: UnregisterBuddy_result -> T.ThriftVal
from_UnregisterBuddy_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4357 -> (1, ("e",from_TalkException _v4357))) <$> unregisterBuddy_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4357 -> (1, ("e",from_TalkException _v4357))) <$> unregisterBuddy_result_e record
    ]
    )
write_UnregisterBuddy_result :: T.Protocol p => p -> UnregisterBuddy_result -> P.IO ()
write_UnregisterBuddy_result oprot record = T.writeVal oprot $ from_UnregisterBuddy_result record
encode_UnregisterBuddy_result :: T.StatelessProtocol p => p -> UnregisterBuddy_result -> LBS.ByteString
encode_UnregisterBuddy_result oprot record = T.serializeVal oprot $ from_UnregisterBuddy_result record
to_UnregisterBuddy_result :: T.ThriftVal -> UnregisterBuddy_result
to_UnregisterBuddy_result (T.TStruct fields) = UnregisterBuddy_result{
  unregisterBuddy_result_e = P.maybe (P.Nothing) (\(_,_val4359) -> P.Just (case _val4359 of {T.TStruct _val4360 -> (to_TalkException (T.TStruct _val4360)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UnregisterBuddy_result _ = P.error "not a struct"
read_UnregisterBuddy_result :: T.Protocol p => p -> P.IO UnregisterBuddy_result
read_UnregisterBuddy_result iprot = to_UnregisterBuddy_result <$> T.readVal iprot (T.T_STRUCT typemap_UnregisterBuddy_result)
decode_UnregisterBuddy_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UnregisterBuddy_result
decode_UnregisterBuddy_result iprot bs = to_UnregisterBuddy_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UnregisterBuddy_result) bs
typemap_UnregisterBuddy_result :: T.TypeMap
typemap_UnregisterBuddy_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UnregisterBuddy_result :: UnregisterBuddy_result
default_UnregisterBuddy_result = UnregisterBuddy_result{
  unregisterBuddy_result_e = P.Nothing}
data UnregisterBuddyAdmin_args = UnregisterBuddyAdmin_args  { unregisterBuddyAdmin_args_requestId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UnregisterBuddyAdmin_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` unregisterBuddyAdmin_args_requestId record  
instance QC.Arbitrary UnregisterBuddyAdmin_args where 
  arbitrary = M.liftM UnregisterBuddyAdmin_args (QC.arbitrary)
  shrink obj | obj == default_UnregisterBuddyAdmin_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UnregisterBuddyAdmin_args{unregisterBuddyAdmin_args_requestId = unregisterBuddyAdmin_args_requestId obj} then P.Nothing else P.Just $ default_UnregisterBuddyAdmin_args{unregisterBuddyAdmin_args_requestId = unregisterBuddyAdmin_args_requestId obj}
    ]
from_UnregisterBuddyAdmin_args :: UnregisterBuddyAdmin_args -> T.ThriftVal
from_UnregisterBuddyAdmin_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4363 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4363))) $ unregisterBuddyAdmin_args_requestId record
  ]
write_UnregisterBuddyAdmin_args :: T.Protocol p => p -> UnregisterBuddyAdmin_args -> P.IO ()
write_UnregisterBuddyAdmin_args oprot record = T.writeVal oprot $ from_UnregisterBuddyAdmin_args record
encode_UnregisterBuddyAdmin_args :: T.StatelessProtocol p => p -> UnregisterBuddyAdmin_args -> LBS.ByteString
encode_UnregisterBuddyAdmin_args oprot record = T.serializeVal oprot $ from_UnregisterBuddyAdmin_args record
to_UnregisterBuddyAdmin_args :: T.ThriftVal -> UnregisterBuddyAdmin_args
to_UnregisterBuddyAdmin_args (T.TStruct fields) = UnregisterBuddyAdmin_args{
  unregisterBuddyAdmin_args_requestId = P.maybe (unregisterBuddyAdmin_args_requestId default_UnregisterBuddyAdmin_args) (\(_,_val4365) -> (case _val4365 of {T.TString _val4366 -> E.decodeUtf8 _val4366; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UnregisterBuddyAdmin_args _ = P.error "not a struct"
read_UnregisterBuddyAdmin_args :: T.Protocol p => p -> P.IO UnregisterBuddyAdmin_args
read_UnregisterBuddyAdmin_args iprot = to_UnregisterBuddyAdmin_args <$> T.readVal iprot (T.T_STRUCT typemap_UnregisterBuddyAdmin_args)
decode_UnregisterBuddyAdmin_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UnregisterBuddyAdmin_args
decode_UnregisterBuddyAdmin_args iprot bs = to_UnregisterBuddyAdmin_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UnregisterBuddyAdmin_args) bs
typemap_UnregisterBuddyAdmin_args :: T.TypeMap
typemap_UnregisterBuddyAdmin_args = Map.fromList [(1,("requestId",T.T_STRING))]
default_UnregisterBuddyAdmin_args :: UnregisterBuddyAdmin_args
default_UnregisterBuddyAdmin_args = UnregisterBuddyAdmin_args{
  unregisterBuddyAdmin_args_requestId = ""}
data UnregisterBuddyAdmin_result = UnregisterBuddyAdmin_result  { unregisterBuddyAdmin_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UnregisterBuddyAdmin_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` unregisterBuddyAdmin_result_e record  
instance QC.Arbitrary UnregisterBuddyAdmin_result where 
  arbitrary = M.liftM UnregisterBuddyAdmin_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UnregisterBuddyAdmin_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UnregisterBuddyAdmin_result{unregisterBuddyAdmin_result_e = unregisterBuddyAdmin_result_e obj} then P.Nothing else P.Just $ default_UnregisterBuddyAdmin_result{unregisterBuddyAdmin_result_e = unregisterBuddyAdmin_result_e obj}
    ]
from_UnregisterBuddyAdmin_result :: UnregisterBuddyAdmin_result -> T.ThriftVal
from_UnregisterBuddyAdmin_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4369 -> (1, ("e",from_TalkException _v4369))) <$> unregisterBuddyAdmin_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4369 -> (1, ("e",from_TalkException _v4369))) <$> unregisterBuddyAdmin_result_e record
    ]
    )
write_UnregisterBuddyAdmin_result :: T.Protocol p => p -> UnregisterBuddyAdmin_result -> P.IO ()
write_UnregisterBuddyAdmin_result oprot record = T.writeVal oprot $ from_UnregisterBuddyAdmin_result record
encode_UnregisterBuddyAdmin_result :: T.StatelessProtocol p => p -> UnregisterBuddyAdmin_result -> LBS.ByteString
encode_UnregisterBuddyAdmin_result oprot record = T.serializeVal oprot $ from_UnregisterBuddyAdmin_result record
to_UnregisterBuddyAdmin_result :: T.ThriftVal -> UnregisterBuddyAdmin_result
to_UnregisterBuddyAdmin_result (T.TStruct fields) = UnregisterBuddyAdmin_result{
  unregisterBuddyAdmin_result_e = P.maybe (P.Nothing) (\(_,_val4371) -> P.Just (case _val4371 of {T.TStruct _val4372 -> (to_TalkException (T.TStruct _val4372)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UnregisterBuddyAdmin_result _ = P.error "not a struct"
read_UnregisterBuddyAdmin_result :: T.Protocol p => p -> P.IO UnregisterBuddyAdmin_result
read_UnregisterBuddyAdmin_result iprot = to_UnregisterBuddyAdmin_result <$> T.readVal iprot (T.T_STRUCT typemap_UnregisterBuddyAdmin_result)
decode_UnregisterBuddyAdmin_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UnregisterBuddyAdmin_result
decode_UnregisterBuddyAdmin_result iprot bs = to_UnregisterBuddyAdmin_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UnregisterBuddyAdmin_result) bs
typemap_UnregisterBuddyAdmin_result :: T.TypeMap
typemap_UnregisterBuddyAdmin_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UnregisterBuddyAdmin_result :: UnregisterBuddyAdmin_result
default_UnregisterBuddyAdmin_result = UnregisterBuddyAdmin_result{
  unregisterBuddyAdmin_result_e = P.Nothing}
data UpdateBuddyAdminProfileAttribute_args = UpdateBuddyAdminProfileAttribute_args  { updateBuddyAdminProfileAttribute_args_requestId :: LT.Text
  , updateBuddyAdminProfileAttribute_args_attributes :: (Map.HashMap LT.Text LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyAdminProfileAttribute_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyAdminProfileAttribute_args_requestId record   `H.hashWithSalt` updateBuddyAdminProfileAttribute_args_attributes record  
instance QC.Arbitrary UpdateBuddyAdminProfileAttribute_args where 
  arbitrary = M.liftM UpdateBuddyAdminProfileAttribute_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyAdminProfileAttribute_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyAdminProfileAttribute_args{updateBuddyAdminProfileAttribute_args_requestId = updateBuddyAdminProfileAttribute_args_requestId obj} then P.Nothing else P.Just $ default_UpdateBuddyAdminProfileAttribute_args{updateBuddyAdminProfileAttribute_args_requestId = updateBuddyAdminProfileAttribute_args_requestId obj}
    , if obj == default_UpdateBuddyAdminProfileAttribute_args{updateBuddyAdminProfileAttribute_args_attributes = updateBuddyAdminProfileAttribute_args_attributes obj} then P.Nothing else P.Just $ default_UpdateBuddyAdminProfileAttribute_args{updateBuddyAdminProfileAttribute_args_attributes = updateBuddyAdminProfileAttribute_args_attributes obj}
    ]
from_UpdateBuddyAdminProfileAttribute_args :: UpdateBuddyAdminProfileAttribute_args -> T.ThriftVal
from_UpdateBuddyAdminProfileAttribute_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4375 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4375))) $ updateBuddyAdminProfileAttribute_args_requestId record
  , (\_v4375 -> P.Just (2, ("attributes",T.TMap T.T_STRING T.T_STRING $ P.map (\(_k4376,_v4377) -> (T.TString $ E.encodeUtf8 _k4376, T.TString $ E.encodeUtf8 _v4377)) $ Map.toList _v4375))) $ updateBuddyAdminProfileAttribute_args_attributes record
  ]
write_UpdateBuddyAdminProfileAttribute_args :: T.Protocol p => p -> UpdateBuddyAdminProfileAttribute_args -> P.IO ()
write_UpdateBuddyAdminProfileAttribute_args oprot record = T.writeVal oprot $ from_UpdateBuddyAdminProfileAttribute_args record
encode_UpdateBuddyAdminProfileAttribute_args :: T.StatelessProtocol p => p -> UpdateBuddyAdminProfileAttribute_args -> LBS.ByteString
encode_UpdateBuddyAdminProfileAttribute_args oprot record = T.serializeVal oprot $ from_UpdateBuddyAdminProfileAttribute_args record
to_UpdateBuddyAdminProfileAttribute_args :: T.ThriftVal -> UpdateBuddyAdminProfileAttribute_args
to_UpdateBuddyAdminProfileAttribute_args (T.TStruct fields) = UpdateBuddyAdminProfileAttribute_args{
  updateBuddyAdminProfileAttribute_args_requestId = P.maybe (updateBuddyAdminProfileAttribute_args_requestId default_UpdateBuddyAdminProfileAttribute_args) (\(_,_val4379) -> (case _val4379 of {T.TString _val4380 -> E.decodeUtf8 _val4380; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  updateBuddyAdminProfileAttribute_args_attributes = P.maybe (updateBuddyAdminProfileAttribute_args_attributes default_UpdateBuddyAdminProfileAttribute_args) (\(_,_val4379) -> (case _val4379 of {T.TMap _ _ _val4381 -> (Map.fromList $ P.map (\(_k4383,_v4382) -> ((case _k4383 of {T.TString _val4384 -> E.decodeUtf8 _val4384; _ -> P.error "wrong type"}),(case _v4382 of {T.TString _val4385 -> E.decodeUtf8 _val4385; _ -> P.error "wrong type"}))) _val4381); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_UpdateBuddyAdminProfileAttribute_args _ = P.error "not a struct"
read_UpdateBuddyAdminProfileAttribute_args :: T.Protocol p => p -> P.IO UpdateBuddyAdminProfileAttribute_args
read_UpdateBuddyAdminProfileAttribute_args iprot = to_UpdateBuddyAdminProfileAttribute_args <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyAdminProfileAttribute_args)
decode_UpdateBuddyAdminProfileAttribute_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyAdminProfileAttribute_args
decode_UpdateBuddyAdminProfileAttribute_args iprot bs = to_UpdateBuddyAdminProfileAttribute_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyAdminProfileAttribute_args) bs
typemap_UpdateBuddyAdminProfileAttribute_args :: T.TypeMap
typemap_UpdateBuddyAdminProfileAttribute_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("attributes",(T.T_MAP T.T_STRING T.T_STRING)))]
default_UpdateBuddyAdminProfileAttribute_args :: UpdateBuddyAdminProfileAttribute_args
default_UpdateBuddyAdminProfileAttribute_args = UpdateBuddyAdminProfileAttribute_args{
  updateBuddyAdminProfileAttribute_args_requestId = "",
  updateBuddyAdminProfileAttribute_args_attributes = Map.empty}
data UpdateBuddyAdminProfileAttribute_result = UpdateBuddyAdminProfileAttribute_result  { updateBuddyAdminProfileAttribute_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyAdminProfileAttribute_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyAdminProfileAttribute_result_e record  
instance QC.Arbitrary UpdateBuddyAdminProfileAttribute_result where 
  arbitrary = M.liftM UpdateBuddyAdminProfileAttribute_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyAdminProfileAttribute_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyAdminProfileAttribute_result{updateBuddyAdminProfileAttribute_result_e = updateBuddyAdminProfileAttribute_result_e obj} then P.Nothing else P.Just $ default_UpdateBuddyAdminProfileAttribute_result{updateBuddyAdminProfileAttribute_result_e = updateBuddyAdminProfileAttribute_result_e obj}
    ]
from_UpdateBuddyAdminProfileAttribute_result :: UpdateBuddyAdminProfileAttribute_result -> T.ThriftVal
from_UpdateBuddyAdminProfileAttribute_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4388 -> (1, ("e",from_TalkException _v4388))) <$> updateBuddyAdminProfileAttribute_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4388 -> (1, ("e",from_TalkException _v4388))) <$> updateBuddyAdminProfileAttribute_result_e record
    ]
    )
write_UpdateBuddyAdminProfileAttribute_result :: T.Protocol p => p -> UpdateBuddyAdminProfileAttribute_result -> P.IO ()
write_UpdateBuddyAdminProfileAttribute_result oprot record = T.writeVal oprot $ from_UpdateBuddyAdminProfileAttribute_result record
encode_UpdateBuddyAdminProfileAttribute_result :: T.StatelessProtocol p => p -> UpdateBuddyAdminProfileAttribute_result -> LBS.ByteString
encode_UpdateBuddyAdminProfileAttribute_result oprot record = T.serializeVal oprot $ from_UpdateBuddyAdminProfileAttribute_result record
to_UpdateBuddyAdminProfileAttribute_result :: T.ThriftVal -> UpdateBuddyAdminProfileAttribute_result
to_UpdateBuddyAdminProfileAttribute_result (T.TStruct fields) = UpdateBuddyAdminProfileAttribute_result{
  updateBuddyAdminProfileAttribute_result_e = P.maybe (P.Nothing) (\(_,_val4390) -> P.Just (case _val4390 of {T.TStruct _val4391 -> (to_TalkException (T.TStruct _val4391)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UpdateBuddyAdminProfileAttribute_result _ = P.error "not a struct"
read_UpdateBuddyAdminProfileAttribute_result :: T.Protocol p => p -> P.IO UpdateBuddyAdminProfileAttribute_result
read_UpdateBuddyAdminProfileAttribute_result iprot = to_UpdateBuddyAdminProfileAttribute_result <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyAdminProfileAttribute_result)
decode_UpdateBuddyAdminProfileAttribute_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyAdminProfileAttribute_result
decode_UpdateBuddyAdminProfileAttribute_result iprot bs = to_UpdateBuddyAdminProfileAttribute_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyAdminProfileAttribute_result) bs
typemap_UpdateBuddyAdminProfileAttribute_result :: T.TypeMap
typemap_UpdateBuddyAdminProfileAttribute_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UpdateBuddyAdminProfileAttribute_result :: UpdateBuddyAdminProfileAttribute_result
default_UpdateBuddyAdminProfileAttribute_result = UpdateBuddyAdminProfileAttribute_result{
  updateBuddyAdminProfileAttribute_result_e = P.Nothing}
data UpdateBuddyAdminProfileImage_args = UpdateBuddyAdminProfileImage_args  { updateBuddyAdminProfileImage_args_requestId :: LT.Text
  , updateBuddyAdminProfileImage_args_picture :: LBS.ByteString
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyAdminProfileImage_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyAdminProfileImage_args_requestId record   `H.hashWithSalt` updateBuddyAdminProfileImage_args_picture record  
instance QC.Arbitrary UpdateBuddyAdminProfileImage_args where 
  arbitrary = M.liftM UpdateBuddyAdminProfileImage_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyAdminProfileImage_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyAdminProfileImage_args{updateBuddyAdminProfileImage_args_requestId = updateBuddyAdminProfileImage_args_requestId obj} then P.Nothing else P.Just $ default_UpdateBuddyAdminProfileImage_args{updateBuddyAdminProfileImage_args_requestId = updateBuddyAdminProfileImage_args_requestId obj}
    , if obj == default_UpdateBuddyAdminProfileImage_args{updateBuddyAdminProfileImage_args_picture = updateBuddyAdminProfileImage_args_picture obj} then P.Nothing else P.Just $ default_UpdateBuddyAdminProfileImage_args{updateBuddyAdminProfileImage_args_picture = updateBuddyAdminProfileImage_args_picture obj}
    ]
from_UpdateBuddyAdminProfileImage_args :: UpdateBuddyAdminProfileImage_args -> T.ThriftVal
from_UpdateBuddyAdminProfileImage_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4394 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4394))) $ updateBuddyAdminProfileImage_args_requestId record
  , (\_v4394 -> P.Just (2, ("picture",T.TBinary _v4394))) $ updateBuddyAdminProfileImage_args_picture record
  ]
write_UpdateBuddyAdminProfileImage_args :: T.Protocol p => p -> UpdateBuddyAdminProfileImage_args -> P.IO ()
write_UpdateBuddyAdminProfileImage_args oprot record = T.writeVal oprot $ from_UpdateBuddyAdminProfileImage_args record
encode_UpdateBuddyAdminProfileImage_args :: T.StatelessProtocol p => p -> UpdateBuddyAdminProfileImage_args -> LBS.ByteString
encode_UpdateBuddyAdminProfileImage_args oprot record = T.serializeVal oprot $ from_UpdateBuddyAdminProfileImage_args record
to_UpdateBuddyAdminProfileImage_args :: T.ThriftVal -> UpdateBuddyAdminProfileImage_args
to_UpdateBuddyAdminProfileImage_args (T.TStruct fields) = UpdateBuddyAdminProfileImage_args{
  updateBuddyAdminProfileImage_args_requestId = P.maybe (updateBuddyAdminProfileImage_args_requestId default_UpdateBuddyAdminProfileImage_args) (\(_,_val4396) -> (case _val4396 of {T.TString _val4397 -> E.decodeUtf8 _val4397; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  updateBuddyAdminProfileImage_args_picture = P.maybe (updateBuddyAdminProfileImage_args_picture default_UpdateBuddyAdminProfileImage_args) (\(_,_val4396) -> (case _val4396 of {T.TBinary _val4398 -> _val4398; T.TString _val4398 -> _val4398; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_UpdateBuddyAdminProfileImage_args _ = P.error "not a struct"
read_UpdateBuddyAdminProfileImage_args :: T.Protocol p => p -> P.IO UpdateBuddyAdminProfileImage_args
read_UpdateBuddyAdminProfileImage_args iprot = to_UpdateBuddyAdminProfileImage_args <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyAdminProfileImage_args)
decode_UpdateBuddyAdminProfileImage_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyAdminProfileImage_args
decode_UpdateBuddyAdminProfileImage_args iprot bs = to_UpdateBuddyAdminProfileImage_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyAdminProfileImage_args) bs
typemap_UpdateBuddyAdminProfileImage_args :: T.TypeMap
typemap_UpdateBuddyAdminProfileImage_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("picture",T.T_BINARY))]
default_UpdateBuddyAdminProfileImage_args :: UpdateBuddyAdminProfileImage_args
default_UpdateBuddyAdminProfileImage_args = UpdateBuddyAdminProfileImage_args{
  updateBuddyAdminProfileImage_args_requestId = "",
  updateBuddyAdminProfileImage_args_picture = ""}
data UpdateBuddyAdminProfileImage_result = UpdateBuddyAdminProfileImage_result  { updateBuddyAdminProfileImage_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyAdminProfileImage_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyAdminProfileImage_result_e record  
instance QC.Arbitrary UpdateBuddyAdminProfileImage_result where 
  arbitrary = M.liftM UpdateBuddyAdminProfileImage_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyAdminProfileImage_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyAdminProfileImage_result{updateBuddyAdminProfileImage_result_e = updateBuddyAdminProfileImage_result_e obj} then P.Nothing else P.Just $ default_UpdateBuddyAdminProfileImage_result{updateBuddyAdminProfileImage_result_e = updateBuddyAdminProfileImage_result_e obj}
    ]
from_UpdateBuddyAdminProfileImage_result :: UpdateBuddyAdminProfileImage_result -> T.ThriftVal
from_UpdateBuddyAdminProfileImage_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4401 -> (1, ("e",from_TalkException _v4401))) <$> updateBuddyAdminProfileImage_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4401 -> (1, ("e",from_TalkException _v4401))) <$> updateBuddyAdminProfileImage_result_e record
    ]
    )
write_UpdateBuddyAdminProfileImage_result :: T.Protocol p => p -> UpdateBuddyAdminProfileImage_result -> P.IO ()
write_UpdateBuddyAdminProfileImage_result oprot record = T.writeVal oprot $ from_UpdateBuddyAdminProfileImage_result record
encode_UpdateBuddyAdminProfileImage_result :: T.StatelessProtocol p => p -> UpdateBuddyAdminProfileImage_result -> LBS.ByteString
encode_UpdateBuddyAdminProfileImage_result oprot record = T.serializeVal oprot $ from_UpdateBuddyAdminProfileImage_result record
to_UpdateBuddyAdminProfileImage_result :: T.ThriftVal -> UpdateBuddyAdminProfileImage_result
to_UpdateBuddyAdminProfileImage_result (T.TStruct fields) = UpdateBuddyAdminProfileImage_result{
  updateBuddyAdminProfileImage_result_e = P.maybe (P.Nothing) (\(_,_val4403) -> P.Just (case _val4403 of {T.TStruct _val4404 -> (to_TalkException (T.TStruct _val4404)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UpdateBuddyAdminProfileImage_result _ = P.error "not a struct"
read_UpdateBuddyAdminProfileImage_result :: T.Protocol p => p -> P.IO UpdateBuddyAdminProfileImage_result
read_UpdateBuddyAdminProfileImage_result iprot = to_UpdateBuddyAdminProfileImage_result <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyAdminProfileImage_result)
decode_UpdateBuddyAdminProfileImage_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyAdminProfileImage_result
decode_UpdateBuddyAdminProfileImage_result iprot bs = to_UpdateBuddyAdminProfileImage_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyAdminProfileImage_result) bs
typemap_UpdateBuddyAdminProfileImage_result :: T.TypeMap
typemap_UpdateBuddyAdminProfileImage_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UpdateBuddyAdminProfileImage_result :: UpdateBuddyAdminProfileImage_result
default_UpdateBuddyAdminProfileImage_result = UpdateBuddyAdminProfileImage_result{
  updateBuddyAdminProfileImage_result_e = P.Nothing}
data UpdateBuddyProfileAttributes_args = UpdateBuddyProfileAttributes_args  { updateBuddyProfileAttributes_args_requestId :: LT.Text
  , updateBuddyProfileAttributes_args_attributes :: (Map.HashMap LT.Text LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyProfileAttributes_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyProfileAttributes_args_requestId record   `H.hashWithSalt` updateBuddyProfileAttributes_args_attributes record  
instance QC.Arbitrary UpdateBuddyProfileAttributes_args where 
  arbitrary = M.liftM UpdateBuddyProfileAttributes_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyProfileAttributes_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyProfileAttributes_args{updateBuddyProfileAttributes_args_requestId = updateBuddyProfileAttributes_args_requestId obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileAttributes_args{updateBuddyProfileAttributes_args_requestId = updateBuddyProfileAttributes_args_requestId obj}
    , if obj == default_UpdateBuddyProfileAttributes_args{updateBuddyProfileAttributes_args_attributes = updateBuddyProfileAttributes_args_attributes obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileAttributes_args{updateBuddyProfileAttributes_args_attributes = updateBuddyProfileAttributes_args_attributes obj}
    ]
from_UpdateBuddyProfileAttributes_args :: UpdateBuddyProfileAttributes_args -> T.ThriftVal
from_UpdateBuddyProfileAttributes_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4407 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4407))) $ updateBuddyProfileAttributes_args_requestId record
  , (\_v4407 -> P.Just (2, ("attributes",T.TMap T.T_STRING T.T_STRING $ P.map (\(_k4408,_v4409) -> (T.TString $ E.encodeUtf8 _k4408, T.TString $ E.encodeUtf8 _v4409)) $ Map.toList _v4407))) $ updateBuddyProfileAttributes_args_attributes record
  ]
write_UpdateBuddyProfileAttributes_args :: T.Protocol p => p -> UpdateBuddyProfileAttributes_args -> P.IO ()
write_UpdateBuddyProfileAttributes_args oprot record = T.writeVal oprot $ from_UpdateBuddyProfileAttributes_args record
encode_UpdateBuddyProfileAttributes_args :: T.StatelessProtocol p => p -> UpdateBuddyProfileAttributes_args -> LBS.ByteString
encode_UpdateBuddyProfileAttributes_args oprot record = T.serializeVal oprot $ from_UpdateBuddyProfileAttributes_args record
to_UpdateBuddyProfileAttributes_args :: T.ThriftVal -> UpdateBuddyProfileAttributes_args
to_UpdateBuddyProfileAttributes_args (T.TStruct fields) = UpdateBuddyProfileAttributes_args{
  updateBuddyProfileAttributes_args_requestId = P.maybe (updateBuddyProfileAttributes_args_requestId default_UpdateBuddyProfileAttributes_args) (\(_,_val4411) -> (case _val4411 of {T.TString _val4412 -> E.decodeUtf8 _val4412; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  updateBuddyProfileAttributes_args_attributes = P.maybe (updateBuddyProfileAttributes_args_attributes default_UpdateBuddyProfileAttributes_args) (\(_,_val4411) -> (case _val4411 of {T.TMap _ _ _val4413 -> (Map.fromList $ P.map (\(_k4415,_v4414) -> ((case _k4415 of {T.TString _val4416 -> E.decodeUtf8 _val4416; _ -> P.error "wrong type"}),(case _v4414 of {T.TString _val4417 -> E.decodeUtf8 _val4417; _ -> P.error "wrong type"}))) _val4413); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_UpdateBuddyProfileAttributes_args _ = P.error "not a struct"
read_UpdateBuddyProfileAttributes_args :: T.Protocol p => p -> P.IO UpdateBuddyProfileAttributes_args
read_UpdateBuddyProfileAttributes_args iprot = to_UpdateBuddyProfileAttributes_args <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileAttributes_args)
decode_UpdateBuddyProfileAttributes_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyProfileAttributes_args
decode_UpdateBuddyProfileAttributes_args iprot bs = to_UpdateBuddyProfileAttributes_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileAttributes_args) bs
typemap_UpdateBuddyProfileAttributes_args :: T.TypeMap
typemap_UpdateBuddyProfileAttributes_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("attributes",(T.T_MAP T.T_STRING T.T_STRING)))]
default_UpdateBuddyProfileAttributes_args :: UpdateBuddyProfileAttributes_args
default_UpdateBuddyProfileAttributes_args = UpdateBuddyProfileAttributes_args{
  updateBuddyProfileAttributes_args_requestId = "",
  updateBuddyProfileAttributes_args_attributes = Map.empty}
data UpdateBuddyProfileAttributes_result = UpdateBuddyProfileAttributes_result  { updateBuddyProfileAttributes_result_success :: UpdateBuddyProfileResult
  , updateBuddyProfileAttributes_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyProfileAttributes_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyProfileAttributes_result_success record   `H.hashWithSalt` updateBuddyProfileAttributes_result_e record  
instance QC.Arbitrary UpdateBuddyProfileAttributes_result where 
  arbitrary = M.liftM UpdateBuddyProfileAttributes_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyProfileAttributes_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyProfileAttributes_result{updateBuddyProfileAttributes_result_success = updateBuddyProfileAttributes_result_success obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileAttributes_result{updateBuddyProfileAttributes_result_success = updateBuddyProfileAttributes_result_success obj}
    , if obj == default_UpdateBuddyProfileAttributes_result{updateBuddyProfileAttributes_result_e = updateBuddyProfileAttributes_result_e obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileAttributes_result{updateBuddyProfileAttributes_result_e = updateBuddyProfileAttributes_result_e obj}
    ]
from_UpdateBuddyProfileAttributes_result :: UpdateBuddyProfileAttributes_result -> T.ThriftVal
from_UpdateBuddyProfileAttributes_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4420 -> (1, ("e",from_TalkException _v4420))) <$> updateBuddyProfileAttributes_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4420 -> P.Just (0, ("success",from_UpdateBuddyProfileResult _v4420))) $ updateBuddyProfileAttributes_result_success record
    , (\_v4420 -> (1, ("e",from_TalkException _v4420))) <$> updateBuddyProfileAttributes_result_e record
    ]
    )
write_UpdateBuddyProfileAttributes_result :: T.Protocol p => p -> UpdateBuddyProfileAttributes_result -> P.IO ()
write_UpdateBuddyProfileAttributes_result oprot record = T.writeVal oprot $ from_UpdateBuddyProfileAttributes_result record
encode_UpdateBuddyProfileAttributes_result :: T.StatelessProtocol p => p -> UpdateBuddyProfileAttributes_result -> LBS.ByteString
encode_UpdateBuddyProfileAttributes_result oprot record = T.serializeVal oprot $ from_UpdateBuddyProfileAttributes_result record
to_UpdateBuddyProfileAttributes_result :: T.ThriftVal -> UpdateBuddyProfileAttributes_result
to_UpdateBuddyProfileAttributes_result (T.TStruct fields) = UpdateBuddyProfileAttributes_result{
  updateBuddyProfileAttributes_result_success = P.maybe (updateBuddyProfileAttributes_result_success default_UpdateBuddyProfileAttributes_result) (\(_,_val4422) -> (case _val4422 of {T.TStruct _val4423 -> (to_UpdateBuddyProfileResult (T.TStruct _val4423)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  updateBuddyProfileAttributes_result_e = P.maybe (P.Nothing) (\(_,_val4422) -> P.Just (case _val4422 of {T.TStruct _val4424 -> (to_TalkException (T.TStruct _val4424)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UpdateBuddyProfileAttributes_result _ = P.error "not a struct"
read_UpdateBuddyProfileAttributes_result :: T.Protocol p => p -> P.IO UpdateBuddyProfileAttributes_result
read_UpdateBuddyProfileAttributes_result iprot = to_UpdateBuddyProfileAttributes_result <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileAttributes_result)
decode_UpdateBuddyProfileAttributes_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyProfileAttributes_result
decode_UpdateBuddyProfileAttributes_result iprot bs = to_UpdateBuddyProfileAttributes_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileAttributes_result) bs
typemap_UpdateBuddyProfileAttributes_result :: T.TypeMap
typemap_UpdateBuddyProfileAttributes_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_UpdateBuddyProfileResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UpdateBuddyProfileAttributes_result :: UpdateBuddyProfileAttributes_result
default_UpdateBuddyProfileAttributes_result = UpdateBuddyProfileAttributes_result{
  updateBuddyProfileAttributes_result_success = default_UpdateBuddyProfileResult,
  updateBuddyProfileAttributes_result_e = P.Nothing}
data UpdateBuddyProfileAttributesAsync_args = UpdateBuddyProfileAttributesAsync_args  { updateBuddyProfileAttributesAsync_args_requestId :: LT.Text
  , updateBuddyProfileAttributesAsync_args_attributes :: (Map.HashMap LT.Text LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyProfileAttributesAsync_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyProfileAttributesAsync_args_requestId record   `H.hashWithSalt` updateBuddyProfileAttributesAsync_args_attributes record  
instance QC.Arbitrary UpdateBuddyProfileAttributesAsync_args where 
  arbitrary = M.liftM UpdateBuddyProfileAttributesAsync_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyProfileAttributesAsync_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyProfileAttributesAsync_args{updateBuddyProfileAttributesAsync_args_requestId = updateBuddyProfileAttributesAsync_args_requestId obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileAttributesAsync_args{updateBuddyProfileAttributesAsync_args_requestId = updateBuddyProfileAttributesAsync_args_requestId obj}
    , if obj == default_UpdateBuddyProfileAttributesAsync_args{updateBuddyProfileAttributesAsync_args_attributes = updateBuddyProfileAttributesAsync_args_attributes obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileAttributesAsync_args{updateBuddyProfileAttributesAsync_args_attributes = updateBuddyProfileAttributesAsync_args_attributes obj}
    ]
from_UpdateBuddyProfileAttributesAsync_args :: UpdateBuddyProfileAttributesAsync_args -> T.ThriftVal
from_UpdateBuddyProfileAttributesAsync_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4427 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4427))) $ updateBuddyProfileAttributesAsync_args_requestId record
  , (\_v4427 -> P.Just (2, ("attributes",T.TMap T.T_STRING T.T_STRING $ P.map (\(_k4428,_v4429) -> (T.TString $ E.encodeUtf8 _k4428, T.TString $ E.encodeUtf8 _v4429)) $ Map.toList _v4427))) $ updateBuddyProfileAttributesAsync_args_attributes record
  ]
write_UpdateBuddyProfileAttributesAsync_args :: T.Protocol p => p -> UpdateBuddyProfileAttributesAsync_args -> P.IO ()
write_UpdateBuddyProfileAttributesAsync_args oprot record = T.writeVal oprot $ from_UpdateBuddyProfileAttributesAsync_args record
encode_UpdateBuddyProfileAttributesAsync_args :: T.StatelessProtocol p => p -> UpdateBuddyProfileAttributesAsync_args -> LBS.ByteString
encode_UpdateBuddyProfileAttributesAsync_args oprot record = T.serializeVal oprot $ from_UpdateBuddyProfileAttributesAsync_args record
to_UpdateBuddyProfileAttributesAsync_args :: T.ThriftVal -> UpdateBuddyProfileAttributesAsync_args
to_UpdateBuddyProfileAttributesAsync_args (T.TStruct fields) = UpdateBuddyProfileAttributesAsync_args{
  updateBuddyProfileAttributesAsync_args_requestId = P.maybe (updateBuddyProfileAttributesAsync_args_requestId default_UpdateBuddyProfileAttributesAsync_args) (\(_,_val4431) -> (case _val4431 of {T.TString _val4432 -> E.decodeUtf8 _val4432; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  updateBuddyProfileAttributesAsync_args_attributes = P.maybe (updateBuddyProfileAttributesAsync_args_attributes default_UpdateBuddyProfileAttributesAsync_args) (\(_,_val4431) -> (case _val4431 of {T.TMap _ _ _val4433 -> (Map.fromList $ P.map (\(_k4435,_v4434) -> ((case _k4435 of {T.TString _val4436 -> E.decodeUtf8 _val4436; _ -> P.error "wrong type"}),(case _v4434 of {T.TString _val4437 -> E.decodeUtf8 _val4437; _ -> P.error "wrong type"}))) _val4433); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_UpdateBuddyProfileAttributesAsync_args _ = P.error "not a struct"
read_UpdateBuddyProfileAttributesAsync_args :: T.Protocol p => p -> P.IO UpdateBuddyProfileAttributesAsync_args
read_UpdateBuddyProfileAttributesAsync_args iprot = to_UpdateBuddyProfileAttributesAsync_args <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileAttributesAsync_args)
decode_UpdateBuddyProfileAttributesAsync_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyProfileAttributesAsync_args
decode_UpdateBuddyProfileAttributesAsync_args iprot bs = to_UpdateBuddyProfileAttributesAsync_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileAttributesAsync_args) bs
typemap_UpdateBuddyProfileAttributesAsync_args :: T.TypeMap
typemap_UpdateBuddyProfileAttributesAsync_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("attributes",(T.T_MAP T.T_STRING T.T_STRING)))]
default_UpdateBuddyProfileAttributesAsync_args :: UpdateBuddyProfileAttributesAsync_args
default_UpdateBuddyProfileAttributesAsync_args = UpdateBuddyProfileAttributesAsync_args{
  updateBuddyProfileAttributesAsync_args_requestId = "",
  updateBuddyProfileAttributesAsync_args_attributes = Map.empty}
data UpdateBuddyProfileAttributesAsync_result = UpdateBuddyProfileAttributesAsync_result  { updateBuddyProfileAttributesAsync_result_success :: LT.Text
  , updateBuddyProfileAttributesAsync_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyProfileAttributesAsync_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyProfileAttributesAsync_result_success record   `H.hashWithSalt` updateBuddyProfileAttributesAsync_result_e record  
instance QC.Arbitrary UpdateBuddyProfileAttributesAsync_result where 
  arbitrary = M.liftM UpdateBuddyProfileAttributesAsync_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyProfileAttributesAsync_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyProfileAttributesAsync_result{updateBuddyProfileAttributesAsync_result_success = updateBuddyProfileAttributesAsync_result_success obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileAttributesAsync_result{updateBuddyProfileAttributesAsync_result_success = updateBuddyProfileAttributesAsync_result_success obj}
    , if obj == default_UpdateBuddyProfileAttributesAsync_result{updateBuddyProfileAttributesAsync_result_e = updateBuddyProfileAttributesAsync_result_e obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileAttributesAsync_result{updateBuddyProfileAttributesAsync_result_e = updateBuddyProfileAttributesAsync_result_e obj}
    ]
from_UpdateBuddyProfileAttributesAsync_result :: UpdateBuddyProfileAttributesAsync_result -> T.ThriftVal
from_UpdateBuddyProfileAttributesAsync_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4440 -> (1, ("e",from_TalkException _v4440))) <$> updateBuddyProfileAttributesAsync_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4440 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v4440))) $ updateBuddyProfileAttributesAsync_result_success record
    , (\_v4440 -> (1, ("e",from_TalkException _v4440))) <$> updateBuddyProfileAttributesAsync_result_e record
    ]
    )
write_UpdateBuddyProfileAttributesAsync_result :: T.Protocol p => p -> UpdateBuddyProfileAttributesAsync_result -> P.IO ()
write_UpdateBuddyProfileAttributesAsync_result oprot record = T.writeVal oprot $ from_UpdateBuddyProfileAttributesAsync_result record
encode_UpdateBuddyProfileAttributesAsync_result :: T.StatelessProtocol p => p -> UpdateBuddyProfileAttributesAsync_result -> LBS.ByteString
encode_UpdateBuddyProfileAttributesAsync_result oprot record = T.serializeVal oprot $ from_UpdateBuddyProfileAttributesAsync_result record
to_UpdateBuddyProfileAttributesAsync_result :: T.ThriftVal -> UpdateBuddyProfileAttributesAsync_result
to_UpdateBuddyProfileAttributesAsync_result (T.TStruct fields) = UpdateBuddyProfileAttributesAsync_result{
  updateBuddyProfileAttributesAsync_result_success = P.maybe (updateBuddyProfileAttributesAsync_result_success default_UpdateBuddyProfileAttributesAsync_result) (\(_,_val4442) -> (case _val4442 of {T.TString _val4443 -> E.decodeUtf8 _val4443; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  updateBuddyProfileAttributesAsync_result_e = P.maybe (P.Nothing) (\(_,_val4442) -> P.Just (case _val4442 of {T.TStruct _val4444 -> (to_TalkException (T.TStruct _val4444)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UpdateBuddyProfileAttributesAsync_result _ = P.error "not a struct"
read_UpdateBuddyProfileAttributesAsync_result :: T.Protocol p => p -> P.IO UpdateBuddyProfileAttributesAsync_result
read_UpdateBuddyProfileAttributesAsync_result iprot = to_UpdateBuddyProfileAttributesAsync_result <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileAttributesAsync_result)
decode_UpdateBuddyProfileAttributesAsync_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyProfileAttributesAsync_result
decode_UpdateBuddyProfileAttributesAsync_result iprot bs = to_UpdateBuddyProfileAttributesAsync_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileAttributesAsync_result) bs
typemap_UpdateBuddyProfileAttributesAsync_result :: T.TypeMap
typemap_UpdateBuddyProfileAttributesAsync_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UpdateBuddyProfileAttributesAsync_result :: UpdateBuddyProfileAttributesAsync_result
default_UpdateBuddyProfileAttributesAsync_result = UpdateBuddyProfileAttributesAsync_result{
  updateBuddyProfileAttributesAsync_result_success = "",
  updateBuddyProfileAttributesAsync_result_e = P.Nothing}
data UpdateBuddyProfileImage_args = UpdateBuddyProfileImage_args  { updateBuddyProfileImage_args_requestId :: LT.Text
  , updateBuddyProfileImage_args_image :: LBS.ByteString
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyProfileImage_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyProfileImage_args_requestId record   `H.hashWithSalt` updateBuddyProfileImage_args_image record  
instance QC.Arbitrary UpdateBuddyProfileImage_args where 
  arbitrary = M.liftM UpdateBuddyProfileImage_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyProfileImage_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyProfileImage_args{updateBuddyProfileImage_args_requestId = updateBuddyProfileImage_args_requestId obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileImage_args{updateBuddyProfileImage_args_requestId = updateBuddyProfileImage_args_requestId obj}
    , if obj == default_UpdateBuddyProfileImage_args{updateBuddyProfileImage_args_image = updateBuddyProfileImage_args_image obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileImage_args{updateBuddyProfileImage_args_image = updateBuddyProfileImage_args_image obj}
    ]
from_UpdateBuddyProfileImage_args :: UpdateBuddyProfileImage_args -> T.ThriftVal
from_UpdateBuddyProfileImage_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4447 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4447))) $ updateBuddyProfileImage_args_requestId record
  , (\_v4447 -> P.Just (2, ("image",T.TBinary _v4447))) $ updateBuddyProfileImage_args_image record
  ]
write_UpdateBuddyProfileImage_args :: T.Protocol p => p -> UpdateBuddyProfileImage_args -> P.IO ()
write_UpdateBuddyProfileImage_args oprot record = T.writeVal oprot $ from_UpdateBuddyProfileImage_args record
encode_UpdateBuddyProfileImage_args :: T.StatelessProtocol p => p -> UpdateBuddyProfileImage_args -> LBS.ByteString
encode_UpdateBuddyProfileImage_args oprot record = T.serializeVal oprot $ from_UpdateBuddyProfileImage_args record
to_UpdateBuddyProfileImage_args :: T.ThriftVal -> UpdateBuddyProfileImage_args
to_UpdateBuddyProfileImage_args (T.TStruct fields) = UpdateBuddyProfileImage_args{
  updateBuddyProfileImage_args_requestId = P.maybe (updateBuddyProfileImage_args_requestId default_UpdateBuddyProfileImage_args) (\(_,_val4449) -> (case _val4449 of {T.TString _val4450 -> E.decodeUtf8 _val4450; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  updateBuddyProfileImage_args_image = P.maybe (updateBuddyProfileImage_args_image default_UpdateBuddyProfileImage_args) (\(_,_val4449) -> (case _val4449 of {T.TBinary _val4451 -> _val4451; T.TString _val4451 -> _val4451; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_UpdateBuddyProfileImage_args _ = P.error "not a struct"
read_UpdateBuddyProfileImage_args :: T.Protocol p => p -> P.IO UpdateBuddyProfileImage_args
read_UpdateBuddyProfileImage_args iprot = to_UpdateBuddyProfileImage_args <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileImage_args)
decode_UpdateBuddyProfileImage_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyProfileImage_args
decode_UpdateBuddyProfileImage_args iprot bs = to_UpdateBuddyProfileImage_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileImage_args) bs
typemap_UpdateBuddyProfileImage_args :: T.TypeMap
typemap_UpdateBuddyProfileImage_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("image",T.T_BINARY))]
default_UpdateBuddyProfileImage_args :: UpdateBuddyProfileImage_args
default_UpdateBuddyProfileImage_args = UpdateBuddyProfileImage_args{
  updateBuddyProfileImage_args_requestId = "",
  updateBuddyProfileImage_args_image = ""}
data UpdateBuddyProfileImage_result = UpdateBuddyProfileImage_result  { updateBuddyProfileImage_result_success :: UpdateBuddyProfileResult
  , updateBuddyProfileImage_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyProfileImage_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyProfileImage_result_success record   `H.hashWithSalt` updateBuddyProfileImage_result_e record  
instance QC.Arbitrary UpdateBuddyProfileImage_result where 
  arbitrary = M.liftM UpdateBuddyProfileImage_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyProfileImage_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyProfileImage_result{updateBuddyProfileImage_result_success = updateBuddyProfileImage_result_success obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileImage_result{updateBuddyProfileImage_result_success = updateBuddyProfileImage_result_success obj}
    , if obj == default_UpdateBuddyProfileImage_result{updateBuddyProfileImage_result_e = updateBuddyProfileImage_result_e obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileImage_result{updateBuddyProfileImage_result_e = updateBuddyProfileImage_result_e obj}
    ]
from_UpdateBuddyProfileImage_result :: UpdateBuddyProfileImage_result -> T.ThriftVal
from_UpdateBuddyProfileImage_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4454 -> (1, ("e",from_TalkException _v4454))) <$> updateBuddyProfileImage_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4454 -> P.Just (0, ("success",from_UpdateBuddyProfileResult _v4454))) $ updateBuddyProfileImage_result_success record
    , (\_v4454 -> (1, ("e",from_TalkException _v4454))) <$> updateBuddyProfileImage_result_e record
    ]
    )
write_UpdateBuddyProfileImage_result :: T.Protocol p => p -> UpdateBuddyProfileImage_result -> P.IO ()
write_UpdateBuddyProfileImage_result oprot record = T.writeVal oprot $ from_UpdateBuddyProfileImage_result record
encode_UpdateBuddyProfileImage_result :: T.StatelessProtocol p => p -> UpdateBuddyProfileImage_result -> LBS.ByteString
encode_UpdateBuddyProfileImage_result oprot record = T.serializeVal oprot $ from_UpdateBuddyProfileImage_result record
to_UpdateBuddyProfileImage_result :: T.ThriftVal -> UpdateBuddyProfileImage_result
to_UpdateBuddyProfileImage_result (T.TStruct fields) = UpdateBuddyProfileImage_result{
  updateBuddyProfileImage_result_success = P.maybe (updateBuddyProfileImage_result_success default_UpdateBuddyProfileImage_result) (\(_,_val4456) -> (case _val4456 of {T.TStruct _val4457 -> (to_UpdateBuddyProfileResult (T.TStruct _val4457)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  updateBuddyProfileImage_result_e = P.maybe (P.Nothing) (\(_,_val4456) -> P.Just (case _val4456 of {T.TStruct _val4458 -> (to_TalkException (T.TStruct _val4458)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UpdateBuddyProfileImage_result _ = P.error "not a struct"
read_UpdateBuddyProfileImage_result :: T.Protocol p => p -> P.IO UpdateBuddyProfileImage_result
read_UpdateBuddyProfileImage_result iprot = to_UpdateBuddyProfileImage_result <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileImage_result)
decode_UpdateBuddyProfileImage_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyProfileImage_result
decode_UpdateBuddyProfileImage_result iprot bs = to_UpdateBuddyProfileImage_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileImage_result) bs
typemap_UpdateBuddyProfileImage_result :: T.TypeMap
typemap_UpdateBuddyProfileImage_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_UpdateBuddyProfileResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UpdateBuddyProfileImage_result :: UpdateBuddyProfileImage_result
default_UpdateBuddyProfileImage_result = UpdateBuddyProfileImage_result{
  updateBuddyProfileImage_result_success = default_UpdateBuddyProfileResult,
  updateBuddyProfileImage_result_e = P.Nothing}
data UpdateBuddyProfileImageAsync_args = UpdateBuddyProfileImageAsync_args  { updateBuddyProfileImageAsync_args_requestId :: LT.Text
  , updateBuddyProfileImageAsync_args_image :: LBS.ByteString
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyProfileImageAsync_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyProfileImageAsync_args_requestId record   `H.hashWithSalt` updateBuddyProfileImageAsync_args_image record  
instance QC.Arbitrary UpdateBuddyProfileImageAsync_args where 
  arbitrary = M.liftM UpdateBuddyProfileImageAsync_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyProfileImageAsync_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyProfileImageAsync_args{updateBuddyProfileImageAsync_args_requestId = updateBuddyProfileImageAsync_args_requestId obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileImageAsync_args{updateBuddyProfileImageAsync_args_requestId = updateBuddyProfileImageAsync_args_requestId obj}
    , if obj == default_UpdateBuddyProfileImageAsync_args{updateBuddyProfileImageAsync_args_image = updateBuddyProfileImageAsync_args_image obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileImageAsync_args{updateBuddyProfileImageAsync_args_image = updateBuddyProfileImageAsync_args_image obj}
    ]
from_UpdateBuddyProfileImageAsync_args :: UpdateBuddyProfileImageAsync_args -> T.ThriftVal
from_UpdateBuddyProfileImageAsync_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4461 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4461))) $ updateBuddyProfileImageAsync_args_requestId record
  , (\_v4461 -> P.Just (2, ("image",T.TBinary _v4461))) $ updateBuddyProfileImageAsync_args_image record
  ]
write_UpdateBuddyProfileImageAsync_args :: T.Protocol p => p -> UpdateBuddyProfileImageAsync_args -> P.IO ()
write_UpdateBuddyProfileImageAsync_args oprot record = T.writeVal oprot $ from_UpdateBuddyProfileImageAsync_args record
encode_UpdateBuddyProfileImageAsync_args :: T.StatelessProtocol p => p -> UpdateBuddyProfileImageAsync_args -> LBS.ByteString
encode_UpdateBuddyProfileImageAsync_args oprot record = T.serializeVal oprot $ from_UpdateBuddyProfileImageAsync_args record
to_UpdateBuddyProfileImageAsync_args :: T.ThriftVal -> UpdateBuddyProfileImageAsync_args
to_UpdateBuddyProfileImageAsync_args (T.TStruct fields) = UpdateBuddyProfileImageAsync_args{
  updateBuddyProfileImageAsync_args_requestId = P.maybe (updateBuddyProfileImageAsync_args_requestId default_UpdateBuddyProfileImageAsync_args) (\(_,_val4463) -> (case _val4463 of {T.TString _val4464 -> E.decodeUtf8 _val4464; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  updateBuddyProfileImageAsync_args_image = P.maybe (updateBuddyProfileImageAsync_args_image default_UpdateBuddyProfileImageAsync_args) (\(_,_val4463) -> (case _val4463 of {T.TBinary _val4465 -> _val4465; T.TString _val4465 -> _val4465; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_UpdateBuddyProfileImageAsync_args _ = P.error "not a struct"
read_UpdateBuddyProfileImageAsync_args :: T.Protocol p => p -> P.IO UpdateBuddyProfileImageAsync_args
read_UpdateBuddyProfileImageAsync_args iprot = to_UpdateBuddyProfileImageAsync_args <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileImageAsync_args)
decode_UpdateBuddyProfileImageAsync_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyProfileImageAsync_args
decode_UpdateBuddyProfileImageAsync_args iprot bs = to_UpdateBuddyProfileImageAsync_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileImageAsync_args) bs
typemap_UpdateBuddyProfileImageAsync_args :: T.TypeMap
typemap_UpdateBuddyProfileImageAsync_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("image",T.T_BINARY))]
default_UpdateBuddyProfileImageAsync_args :: UpdateBuddyProfileImageAsync_args
default_UpdateBuddyProfileImageAsync_args = UpdateBuddyProfileImageAsync_args{
  updateBuddyProfileImageAsync_args_requestId = "",
  updateBuddyProfileImageAsync_args_image = ""}
data UpdateBuddyProfileImageAsync_result = UpdateBuddyProfileImageAsync_result  { updateBuddyProfileImageAsync_result_success :: LT.Text
  , updateBuddyProfileImageAsync_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyProfileImageAsync_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyProfileImageAsync_result_success record   `H.hashWithSalt` updateBuddyProfileImageAsync_result_e record  
instance QC.Arbitrary UpdateBuddyProfileImageAsync_result where 
  arbitrary = M.liftM UpdateBuddyProfileImageAsync_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyProfileImageAsync_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyProfileImageAsync_result{updateBuddyProfileImageAsync_result_success = updateBuddyProfileImageAsync_result_success obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileImageAsync_result{updateBuddyProfileImageAsync_result_success = updateBuddyProfileImageAsync_result_success obj}
    , if obj == default_UpdateBuddyProfileImageAsync_result{updateBuddyProfileImageAsync_result_e = updateBuddyProfileImageAsync_result_e obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileImageAsync_result{updateBuddyProfileImageAsync_result_e = updateBuddyProfileImageAsync_result_e obj}
    ]
from_UpdateBuddyProfileImageAsync_result :: UpdateBuddyProfileImageAsync_result -> T.ThriftVal
from_UpdateBuddyProfileImageAsync_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4468 -> (1, ("e",from_TalkException _v4468))) <$> updateBuddyProfileImageAsync_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4468 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v4468))) $ updateBuddyProfileImageAsync_result_success record
    , (\_v4468 -> (1, ("e",from_TalkException _v4468))) <$> updateBuddyProfileImageAsync_result_e record
    ]
    )
write_UpdateBuddyProfileImageAsync_result :: T.Protocol p => p -> UpdateBuddyProfileImageAsync_result -> P.IO ()
write_UpdateBuddyProfileImageAsync_result oprot record = T.writeVal oprot $ from_UpdateBuddyProfileImageAsync_result record
encode_UpdateBuddyProfileImageAsync_result :: T.StatelessProtocol p => p -> UpdateBuddyProfileImageAsync_result -> LBS.ByteString
encode_UpdateBuddyProfileImageAsync_result oprot record = T.serializeVal oprot $ from_UpdateBuddyProfileImageAsync_result record
to_UpdateBuddyProfileImageAsync_result :: T.ThriftVal -> UpdateBuddyProfileImageAsync_result
to_UpdateBuddyProfileImageAsync_result (T.TStruct fields) = UpdateBuddyProfileImageAsync_result{
  updateBuddyProfileImageAsync_result_success = P.maybe (updateBuddyProfileImageAsync_result_success default_UpdateBuddyProfileImageAsync_result) (\(_,_val4470) -> (case _val4470 of {T.TString _val4471 -> E.decodeUtf8 _val4471; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  updateBuddyProfileImageAsync_result_e = P.maybe (P.Nothing) (\(_,_val4470) -> P.Just (case _val4470 of {T.TStruct _val4472 -> (to_TalkException (T.TStruct _val4472)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UpdateBuddyProfileImageAsync_result _ = P.error "not a struct"
read_UpdateBuddyProfileImageAsync_result :: T.Protocol p => p -> P.IO UpdateBuddyProfileImageAsync_result
read_UpdateBuddyProfileImageAsync_result iprot = to_UpdateBuddyProfileImageAsync_result <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileImageAsync_result)
decode_UpdateBuddyProfileImageAsync_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyProfileImageAsync_result
decode_UpdateBuddyProfileImageAsync_result iprot bs = to_UpdateBuddyProfileImageAsync_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileImageAsync_result) bs
typemap_UpdateBuddyProfileImageAsync_result :: T.TypeMap
typemap_UpdateBuddyProfileImageAsync_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UpdateBuddyProfileImageAsync_result :: UpdateBuddyProfileImageAsync_result
default_UpdateBuddyProfileImageAsync_result = UpdateBuddyProfileImageAsync_result{
  updateBuddyProfileImageAsync_result_success = "",
  updateBuddyProfileImageAsync_result_e = P.Nothing}
data UpdateBuddySearchId_args = UpdateBuddySearchId_args  { updateBuddySearchId_args_requestId :: LT.Text
  , updateBuddySearchId_args_searchId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddySearchId_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddySearchId_args_requestId record   `H.hashWithSalt` updateBuddySearchId_args_searchId record  
instance QC.Arbitrary UpdateBuddySearchId_args where 
  arbitrary = M.liftM UpdateBuddySearchId_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_UpdateBuddySearchId_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddySearchId_args{updateBuddySearchId_args_requestId = updateBuddySearchId_args_requestId obj} then P.Nothing else P.Just $ default_UpdateBuddySearchId_args{updateBuddySearchId_args_requestId = updateBuddySearchId_args_requestId obj}
    , if obj == default_UpdateBuddySearchId_args{updateBuddySearchId_args_searchId = updateBuddySearchId_args_searchId obj} then P.Nothing else P.Just $ default_UpdateBuddySearchId_args{updateBuddySearchId_args_searchId = updateBuddySearchId_args_searchId obj}
    ]
from_UpdateBuddySearchId_args :: UpdateBuddySearchId_args -> T.ThriftVal
from_UpdateBuddySearchId_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4475 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v4475))) $ updateBuddySearchId_args_requestId record
  , (\_v4475 -> P.Just (2, ("searchId",T.TString $ E.encodeUtf8 _v4475))) $ updateBuddySearchId_args_searchId record
  ]
write_UpdateBuddySearchId_args :: T.Protocol p => p -> UpdateBuddySearchId_args -> P.IO ()
write_UpdateBuddySearchId_args oprot record = T.writeVal oprot $ from_UpdateBuddySearchId_args record
encode_UpdateBuddySearchId_args :: T.StatelessProtocol p => p -> UpdateBuddySearchId_args -> LBS.ByteString
encode_UpdateBuddySearchId_args oprot record = T.serializeVal oprot $ from_UpdateBuddySearchId_args record
to_UpdateBuddySearchId_args :: T.ThriftVal -> UpdateBuddySearchId_args
to_UpdateBuddySearchId_args (T.TStruct fields) = UpdateBuddySearchId_args{
  updateBuddySearchId_args_requestId = P.maybe (updateBuddySearchId_args_requestId default_UpdateBuddySearchId_args) (\(_,_val4477) -> (case _val4477 of {T.TString _val4478 -> E.decodeUtf8 _val4478; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  updateBuddySearchId_args_searchId = P.maybe (updateBuddySearchId_args_searchId default_UpdateBuddySearchId_args) (\(_,_val4477) -> (case _val4477 of {T.TString _val4479 -> E.decodeUtf8 _val4479; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_UpdateBuddySearchId_args _ = P.error "not a struct"
read_UpdateBuddySearchId_args :: T.Protocol p => p -> P.IO UpdateBuddySearchId_args
read_UpdateBuddySearchId_args iprot = to_UpdateBuddySearchId_args <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddySearchId_args)
decode_UpdateBuddySearchId_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddySearchId_args
decode_UpdateBuddySearchId_args iprot bs = to_UpdateBuddySearchId_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddySearchId_args) bs
typemap_UpdateBuddySearchId_args :: T.TypeMap
typemap_UpdateBuddySearchId_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("searchId",T.T_STRING))]
default_UpdateBuddySearchId_args :: UpdateBuddySearchId_args
default_UpdateBuddySearchId_args = UpdateBuddySearchId_args{
  updateBuddySearchId_args_requestId = "",
  updateBuddySearchId_args_searchId = ""}
data UpdateBuddySearchId_result = UpdateBuddySearchId_result  { updateBuddySearchId_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddySearchId_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddySearchId_result_e record  
instance QC.Arbitrary UpdateBuddySearchId_result where 
  arbitrary = M.liftM UpdateBuddySearchId_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UpdateBuddySearchId_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddySearchId_result{updateBuddySearchId_result_e = updateBuddySearchId_result_e obj} then P.Nothing else P.Just $ default_UpdateBuddySearchId_result{updateBuddySearchId_result_e = updateBuddySearchId_result_e obj}
    ]
from_UpdateBuddySearchId_result :: UpdateBuddySearchId_result -> T.ThriftVal
from_UpdateBuddySearchId_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4482 -> (1, ("e",from_TalkException _v4482))) <$> updateBuddySearchId_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4482 -> (1, ("e",from_TalkException _v4482))) <$> updateBuddySearchId_result_e record
    ]
    )
write_UpdateBuddySearchId_result :: T.Protocol p => p -> UpdateBuddySearchId_result -> P.IO ()
write_UpdateBuddySearchId_result oprot record = T.writeVal oprot $ from_UpdateBuddySearchId_result record
encode_UpdateBuddySearchId_result :: T.StatelessProtocol p => p -> UpdateBuddySearchId_result -> LBS.ByteString
encode_UpdateBuddySearchId_result oprot record = T.serializeVal oprot $ from_UpdateBuddySearchId_result record
to_UpdateBuddySearchId_result :: T.ThriftVal -> UpdateBuddySearchId_result
to_UpdateBuddySearchId_result (T.TStruct fields) = UpdateBuddySearchId_result{
  updateBuddySearchId_result_e = P.maybe (P.Nothing) (\(_,_val4484) -> P.Just (case _val4484 of {T.TStruct _val4485 -> (to_TalkException (T.TStruct _val4485)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UpdateBuddySearchId_result _ = P.error "not a struct"
read_UpdateBuddySearchId_result :: T.Protocol p => p -> P.IO UpdateBuddySearchId_result
read_UpdateBuddySearchId_result iprot = to_UpdateBuddySearchId_result <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddySearchId_result)
decode_UpdateBuddySearchId_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddySearchId_result
decode_UpdateBuddySearchId_result iprot bs = to_UpdateBuddySearchId_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddySearchId_result) bs
typemap_UpdateBuddySearchId_result :: T.TypeMap
typemap_UpdateBuddySearchId_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UpdateBuddySearchId_result :: UpdateBuddySearchId_result
default_UpdateBuddySearchId_result = UpdateBuddySearchId_result{
  updateBuddySearchId_result_e = P.Nothing}
data UpdateBuddySettings_args = UpdateBuddySettings_args  { updateBuddySettings_args_settings :: (Map.HashMap LT.Text LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddySettings_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddySettings_args_settings record  
instance QC.Arbitrary UpdateBuddySettings_args where 
  arbitrary = M.liftM UpdateBuddySettings_args (QC.arbitrary)
  shrink obj | obj == default_UpdateBuddySettings_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddySettings_args{updateBuddySettings_args_settings = updateBuddySettings_args_settings obj} then P.Nothing else P.Just $ default_UpdateBuddySettings_args{updateBuddySettings_args_settings = updateBuddySettings_args_settings obj}
    ]
from_UpdateBuddySettings_args :: UpdateBuddySettings_args -> T.ThriftVal
from_UpdateBuddySettings_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4488 -> P.Just (2, ("settings",T.TMap T.T_STRING T.T_STRING $ P.map (\(_k4489,_v4490) -> (T.TString $ E.encodeUtf8 _k4489, T.TString $ E.encodeUtf8 _v4490)) $ Map.toList _v4488))) $ updateBuddySettings_args_settings record
  ]
write_UpdateBuddySettings_args :: T.Protocol p => p -> UpdateBuddySettings_args -> P.IO ()
write_UpdateBuddySettings_args oprot record = T.writeVal oprot $ from_UpdateBuddySettings_args record
encode_UpdateBuddySettings_args :: T.StatelessProtocol p => p -> UpdateBuddySettings_args -> LBS.ByteString
encode_UpdateBuddySettings_args oprot record = T.serializeVal oprot $ from_UpdateBuddySettings_args record
to_UpdateBuddySettings_args :: T.ThriftVal -> UpdateBuddySettings_args
to_UpdateBuddySettings_args (T.TStruct fields) = UpdateBuddySettings_args{
  updateBuddySettings_args_settings = P.maybe (updateBuddySettings_args_settings default_UpdateBuddySettings_args) (\(_,_val4492) -> (case _val4492 of {T.TMap _ _ _val4493 -> (Map.fromList $ P.map (\(_k4495,_v4494) -> ((case _k4495 of {T.TString _val4496 -> E.decodeUtf8 _val4496; _ -> P.error "wrong type"}),(case _v4494 of {T.TString _val4497 -> E.decodeUtf8 _val4497; _ -> P.error "wrong type"}))) _val4493); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_UpdateBuddySettings_args _ = P.error "not a struct"
read_UpdateBuddySettings_args :: T.Protocol p => p -> P.IO UpdateBuddySettings_args
read_UpdateBuddySettings_args iprot = to_UpdateBuddySettings_args <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddySettings_args)
decode_UpdateBuddySettings_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddySettings_args
decode_UpdateBuddySettings_args iprot bs = to_UpdateBuddySettings_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddySettings_args) bs
typemap_UpdateBuddySettings_args :: T.TypeMap
typemap_UpdateBuddySettings_args = Map.fromList [(2,("settings",(T.T_MAP T.T_STRING T.T_STRING)))]
default_UpdateBuddySettings_args :: UpdateBuddySettings_args
default_UpdateBuddySettings_args = UpdateBuddySettings_args{
  updateBuddySettings_args_settings = Map.empty}
data UpdateBuddySettings_result = UpdateBuddySettings_result  { updateBuddySettings_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddySettings_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddySettings_result_e record  
instance QC.Arbitrary UpdateBuddySettings_result where 
  arbitrary = M.liftM UpdateBuddySettings_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UpdateBuddySettings_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddySettings_result{updateBuddySettings_result_e = updateBuddySettings_result_e obj} then P.Nothing else P.Just $ default_UpdateBuddySettings_result{updateBuddySettings_result_e = updateBuddySettings_result_e obj}
    ]
from_UpdateBuddySettings_result :: UpdateBuddySettings_result -> T.ThriftVal
from_UpdateBuddySettings_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4500 -> (1, ("e",from_TalkException _v4500))) <$> updateBuddySettings_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4500 -> (1, ("e",from_TalkException _v4500))) <$> updateBuddySettings_result_e record
    ]
    )
write_UpdateBuddySettings_result :: T.Protocol p => p -> UpdateBuddySettings_result -> P.IO ()
write_UpdateBuddySettings_result oprot record = T.writeVal oprot $ from_UpdateBuddySettings_result record
encode_UpdateBuddySettings_result :: T.StatelessProtocol p => p -> UpdateBuddySettings_result -> LBS.ByteString
encode_UpdateBuddySettings_result oprot record = T.serializeVal oprot $ from_UpdateBuddySettings_result record
to_UpdateBuddySettings_result :: T.ThriftVal -> UpdateBuddySettings_result
to_UpdateBuddySettings_result (T.TStruct fields) = UpdateBuddySettings_result{
  updateBuddySettings_result_e = P.maybe (P.Nothing) (\(_,_val4502) -> P.Just (case _val4502 of {T.TStruct _val4503 -> (to_TalkException (T.TStruct _val4503)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UpdateBuddySettings_result _ = P.error "not a struct"
read_UpdateBuddySettings_result :: T.Protocol p => p -> P.IO UpdateBuddySettings_result
read_UpdateBuddySettings_result iprot = to_UpdateBuddySettings_result <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddySettings_result)
decode_UpdateBuddySettings_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddySettings_result
decode_UpdateBuddySettings_result iprot bs = to_UpdateBuddySettings_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddySettings_result) bs
typemap_UpdateBuddySettings_result :: T.TypeMap
typemap_UpdateBuddySettings_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UpdateBuddySettings_result :: UpdateBuddySettings_result
default_UpdateBuddySettings_result = UpdateBuddySettings_result{
  updateBuddySettings_result_e = P.Nothing}
data UploadBuddyContent_args = UploadBuddyContent_args  { uploadBuddyContent_args_contentType :: ContentType
  , uploadBuddyContent_args_content :: LBS.ByteString
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UploadBuddyContent_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` uploadBuddyContent_args_contentType record   `H.hashWithSalt` uploadBuddyContent_args_content record  
instance QC.Arbitrary UploadBuddyContent_args where 
  arbitrary = M.liftM UploadBuddyContent_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_UploadBuddyContent_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UploadBuddyContent_args{uploadBuddyContent_args_contentType = uploadBuddyContent_args_contentType obj} then P.Nothing else P.Just $ default_UploadBuddyContent_args{uploadBuddyContent_args_contentType = uploadBuddyContent_args_contentType obj}
    , if obj == default_UploadBuddyContent_args{uploadBuddyContent_args_content = uploadBuddyContent_args_content obj} then P.Nothing else P.Just $ default_UploadBuddyContent_args{uploadBuddyContent_args_content = uploadBuddyContent_args_content obj}
    ]
from_UploadBuddyContent_args :: UploadBuddyContent_args -> T.ThriftVal
from_UploadBuddyContent_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v4506 -> P.Just (2, ("contentType",T.TI32 $ P.fromIntegral $ P.fromEnum _v4506))) $ uploadBuddyContent_args_contentType record
  , (\_v4506 -> P.Just (3, ("content",T.TBinary _v4506))) $ uploadBuddyContent_args_content record
  ]
write_UploadBuddyContent_args :: T.Protocol p => p -> UploadBuddyContent_args -> P.IO ()
write_UploadBuddyContent_args oprot record = T.writeVal oprot $ from_UploadBuddyContent_args record
encode_UploadBuddyContent_args :: T.StatelessProtocol p => p -> UploadBuddyContent_args -> LBS.ByteString
encode_UploadBuddyContent_args oprot record = T.serializeVal oprot $ from_UploadBuddyContent_args record
to_UploadBuddyContent_args :: T.ThriftVal -> UploadBuddyContent_args
to_UploadBuddyContent_args (T.TStruct fields) = UploadBuddyContent_args{
  uploadBuddyContent_args_contentType = P.maybe (uploadBuddyContent_args_contentType default_UploadBuddyContent_args) (\(_,_val4508) -> (case _val4508 of {T.TI32 _val4509 -> P.toEnum $ P.fromIntegral _val4509; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  uploadBuddyContent_args_content = P.maybe (uploadBuddyContent_args_content default_UploadBuddyContent_args) (\(_,_val4508) -> (case _val4508 of {T.TBinary _val4510 -> _val4510; T.TString _val4510 -> _val4510; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_UploadBuddyContent_args _ = P.error "not a struct"
read_UploadBuddyContent_args :: T.Protocol p => p -> P.IO UploadBuddyContent_args
read_UploadBuddyContent_args iprot = to_UploadBuddyContent_args <$> T.readVal iprot (T.T_STRUCT typemap_UploadBuddyContent_args)
decode_UploadBuddyContent_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UploadBuddyContent_args
decode_UploadBuddyContent_args iprot bs = to_UploadBuddyContent_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UploadBuddyContent_args) bs
typemap_UploadBuddyContent_args :: T.TypeMap
typemap_UploadBuddyContent_args = Map.fromList [(2,("contentType",T.T_I32)),(3,("content",T.T_BINARY))]
default_UploadBuddyContent_args :: UploadBuddyContent_args
default_UploadBuddyContent_args = UploadBuddyContent_args{
  uploadBuddyContent_args_contentType = (P.toEnum 0),
  uploadBuddyContent_args_content = ""}
data UploadBuddyContent_result = UploadBuddyContent_result  { uploadBuddyContent_result_success :: LT.Text
  , uploadBuddyContent_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UploadBuddyContent_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` uploadBuddyContent_result_success record   `H.hashWithSalt` uploadBuddyContent_result_e record  
instance QC.Arbitrary UploadBuddyContent_result where 
  arbitrary = M.liftM UploadBuddyContent_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UploadBuddyContent_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UploadBuddyContent_result{uploadBuddyContent_result_success = uploadBuddyContent_result_success obj} then P.Nothing else P.Just $ default_UploadBuddyContent_result{uploadBuddyContent_result_success = uploadBuddyContent_result_success obj}
    , if obj == default_UploadBuddyContent_result{uploadBuddyContent_result_e = uploadBuddyContent_result_e obj} then P.Nothing else P.Just $ default_UploadBuddyContent_result{uploadBuddyContent_result_e = uploadBuddyContent_result_e obj}
    ]
from_UploadBuddyContent_result :: UploadBuddyContent_result -> T.ThriftVal
from_UploadBuddyContent_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v4513 -> (1, ("e",from_TalkException _v4513))) <$> uploadBuddyContent_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v4513 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v4513))) $ uploadBuddyContent_result_success record
    , (\_v4513 -> (1, ("e",from_TalkException _v4513))) <$> uploadBuddyContent_result_e record
    ]
    )
write_UploadBuddyContent_result :: T.Protocol p => p -> UploadBuddyContent_result -> P.IO ()
write_UploadBuddyContent_result oprot record = T.writeVal oprot $ from_UploadBuddyContent_result record
encode_UploadBuddyContent_result :: T.StatelessProtocol p => p -> UploadBuddyContent_result -> LBS.ByteString
encode_UploadBuddyContent_result oprot record = T.serializeVal oprot $ from_UploadBuddyContent_result record
to_UploadBuddyContent_result :: T.ThriftVal -> UploadBuddyContent_result
to_UploadBuddyContent_result (T.TStruct fields) = UploadBuddyContent_result{
  uploadBuddyContent_result_success = P.maybe (uploadBuddyContent_result_success default_UploadBuddyContent_result) (\(_,_val4515) -> (case _val4515 of {T.TString _val4516 -> E.decodeUtf8 _val4516; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  uploadBuddyContent_result_e = P.maybe (P.Nothing) (\(_,_val4515) -> P.Just (case _val4515 of {T.TStruct _val4517 -> (to_TalkException (T.TStruct _val4517)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UploadBuddyContent_result _ = P.error "not a struct"
read_UploadBuddyContent_result :: T.Protocol p => p -> P.IO UploadBuddyContent_result
read_UploadBuddyContent_result iprot = to_UploadBuddyContent_result <$> T.readVal iprot (T.T_STRUCT typemap_UploadBuddyContent_result)
decode_UploadBuddyContent_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UploadBuddyContent_result
decode_UploadBuddyContent_result iprot bs = to_UploadBuddyContent_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UploadBuddyContent_result) bs
typemap_UploadBuddyContent_result :: T.TypeMap
typemap_UploadBuddyContent_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UploadBuddyContent_result :: UploadBuddyContent_result
default_UploadBuddyContent_result = UploadBuddyContent_result{
  uploadBuddyContent_result_success = "",
  uploadBuddyContent_result_e = P.Nothing}
process_addBuddyMember (seqid, iprot, oprot, handler) = do
  args <- read_AddBuddyMember_args iprot
  (X.catch
    (X.catch
      (do
        Iface.addBuddyMember handler (addBuddyMember_args_requestId args) (addBuddyMember_args_userMid args)
        let res = default_AddBuddyMember_result
        T.writeMessage oprot ("addBuddyMember", T.M_REPLY, seqid) $
          write_AddBuddyMember_result oprot res)
      (\e  -> do
        let res = default_AddBuddyMember_result{addBuddyMember_result_e = P.Just e}
        T.writeMessage oprot ("addBuddyMember", T.M_REPLY, seqid) $
          write_AddBuddyMember_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("addBuddyMember", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_addBuddyMembers (seqid, iprot, oprot, handler) = do
  args <- read_AddBuddyMembers_args iprot
  (X.catch
    (X.catch
      (do
        Iface.addBuddyMembers handler (addBuddyMembers_args_requestId args) (addBuddyMembers_args_userMids args)
        let res = default_AddBuddyMembers_result
        T.writeMessage oprot ("addBuddyMembers", T.M_REPLY, seqid) $
          write_AddBuddyMembers_result oprot res)
      (\e  -> do
        let res = default_AddBuddyMembers_result{addBuddyMembers_result_e = P.Just e}
        T.writeMessage oprot ("addBuddyMembers", T.M_REPLY, seqid) $
          write_AddBuddyMembers_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("addBuddyMembers", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_blockBuddyMember (seqid, iprot, oprot, handler) = do
  args <- read_BlockBuddyMember_args iprot
  (X.catch
    (X.catch
      (do
        Iface.blockBuddyMember handler (blockBuddyMember_args_requestId args) (blockBuddyMember_args_mid args)
        let res = default_BlockBuddyMember_result
        T.writeMessage oprot ("blockBuddyMember", T.M_REPLY, seqid) $
          write_BlockBuddyMember_result oprot res)
      (\e  -> do
        let res = default_BlockBuddyMember_result{blockBuddyMember_result_e = P.Just e}
        T.writeMessage oprot ("blockBuddyMember", T.M_REPLY, seqid) $
          write_BlockBuddyMember_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("blockBuddyMember", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_commitSendMessagesToAll (seqid, iprot, oprot, handler) = do
  args <- read_CommitSendMessagesToAll_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.commitSendMessagesToAll handler (commitSendMessagesToAll_args_requestIdList args)
        let res = default_CommitSendMessagesToAll_result{commitSendMessagesToAll_result_success = val}
        T.writeMessage oprot ("commitSendMessagesToAll", T.M_REPLY, seqid) $
          write_CommitSendMessagesToAll_result oprot res)
      (\e  -> do
        let res = default_CommitSendMessagesToAll_result{commitSendMessagesToAll_result_e = P.Just e}
        T.writeMessage oprot ("commitSendMessagesToAll", T.M_REPLY, seqid) $
          write_CommitSendMessagesToAll_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("commitSendMessagesToAll", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_commitSendMessagesToMids (seqid, iprot, oprot, handler) = do
  args <- read_CommitSendMessagesToMids_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.commitSendMessagesToMids handler (commitSendMessagesToMids_args_requestIdList args) (commitSendMessagesToMids_args_mids args)
        let res = default_CommitSendMessagesToMids_result{commitSendMessagesToMids_result_success = val}
        T.writeMessage oprot ("commitSendMessagesToMids", T.M_REPLY, seqid) $
          write_CommitSendMessagesToMids_result oprot res)
      (\e  -> do
        let res = default_CommitSendMessagesToMids_result{commitSendMessagesToMids_result_e = P.Just e}
        T.writeMessage oprot ("commitSendMessagesToMids", T.M_REPLY, seqid) $
          write_CommitSendMessagesToMids_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("commitSendMessagesToMids", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_containsBuddyMember (seqid, iprot, oprot, handler) = do
  args <- read_ContainsBuddyMember_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.containsBuddyMember handler (containsBuddyMember_args_requestId args) (containsBuddyMember_args_userMid args)
        let res = default_ContainsBuddyMember_result{containsBuddyMember_result_success = val}
        T.writeMessage oprot ("containsBuddyMember", T.M_REPLY, seqid) $
          write_ContainsBuddyMember_result oprot res)
      (\e  -> do
        let res = default_ContainsBuddyMember_result{containsBuddyMember_result_e = P.Just e}
        T.writeMessage oprot ("containsBuddyMember", T.M_REPLY, seqid) $
          write_ContainsBuddyMember_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("containsBuddyMember", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_downloadMessageContent (seqid, iprot, oprot, handler) = do
  args <- read_DownloadMessageContent_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.downloadMessageContent handler (downloadMessageContent_args_requestId args) (downloadMessageContent_args_messageId args)
        let res = default_DownloadMessageContent_result{downloadMessageContent_result_success = val}
        T.writeMessage oprot ("downloadMessageContent", T.M_REPLY, seqid) $
          write_DownloadMessageContent_result oprot res)
      (\e  -> do
        let res = default_DownloadMessageContent_result{downloadMessageContent_result_e = P.Just e}
        T.writeMessage oprot ("downloadMessageContent", T.M_REPLY, seqid) $
          write_DownloadMessageContent_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("downloadMessageContent", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_downloadMessageContentPreview (seqid, iprot, oprot, handler) = do
  args <- read_DownloadMessageContentPreview_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.downloadMessageContentPreview handler (downloadMessageContentPreview_args_requestId args) (downloadMessageContentPreview_args_messageId args)
        let res = default_DownloadMessageContentPreview_result{downloadMessageContentPreview_result_success = val}
        T.writeMessage oprot ("downloadMessageContentPreview", T.M_REPLY, seqid) $
          write_DownloadMessageContentPreview_result oprot res)
      (\e  -> do
        let res = default_DownloadMessageContentPreview_result{downloadMessageContentPreview_result_e = P.Just e}
        T.writeMessage oprot ("downloadMessageContentPreview", T.M_REPLY, seqid) $
          write_DownloadMessageContentPreview_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("downloadMessageContentPreview", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_downloadProfileImage (seqid, iprot, oprot, handler) = do
  args <- read_DownloadProfileImage_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.downloadProfileImage handler (downloadProfileImage_args_requestId args)
        let res = default_DownloadProfileImage_result{downloadProfileImage_result_success = val}
        T.writeMessage oprot ("downloadProfileImage", T.M_REPLY, seqid) $
          write_DownloadProfileImage_result oprot res)
      (\e  -> do
        let res = default_DownloadProfileImage_result{downloadProfileImage_result_e = P.Just e}
        T.writeMessage oprot ("downloadProfileImage", T.M_REPLY, seqid) $
          write_DownloadProfileImage_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("downloadProfileImage", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_downloadProfileImagePreview (seqid, iprot, oprot, handler) = do
  args <- read_DownloadProfileImagePreview_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.downloadProfileImagePreview handler (downloadProfileImagePreview_args_requestId args)
        let res = default_DownloadProfileImagePreview_result{downloadProfileImagePreview_result_success = val}
        T.writeMessage oprot ("downloadProfileImagePreview", T.M_REPLY, seqid) $
          write_DownloadProfileImagePreview_result oprot res)
      (\e  -> do
        let res = default_DownloadProfileImagePreview_result{downloadProfileImagePreview_result_e = P.Just e}
        T.writeMessage oprot ("downloadProfileImagePreview", T.M_REPLY, seqid) $
          write_DownloadProfileImagePreview_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("downloadProfileImagePreview", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getActiveMemberCountByBuddyMid (seqid, iprot, oprot, handler) = do
  args <- read_GetActiveMemberCountByBuddyMid_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getActiveMemberCountByBuddyMid handler (getActiveMemberCountByBuddyMid_args_buddyMid args)
        let res = default_GetActiveMemberCountByBuddyMid_result{getActiveMemberCountByBuddyMid_result_success = val}
        T.writeMessage oprot ("getActiveMemberCountByBuddyMid", T.M_REPLY, seqid) $
          write_GetActiveMemberCountByBuddyMid_result oprot res)
      (\e  -> do
        let res = default_GetActiveMemberCountByBuddyMid_result{getActiveMemberCountByBuddyMid_result_e = P.Just e}
        T.writeMessage oprot ("getActiveMemberCountByBuddyMid", T.M_REPLY, seqid) $
          write_GetActiveMemberCountByBuddyMid_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getActiveMemberCountByBuddyMid", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getActiveMemberMidsByBuddyMid (seqid, iprot, oprot, handler) = do
  args <- read_GetActiveMemberMidsByBuddyMid_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getActiveMemberMidsByBuddyMid handler (getActiveMemberMidsByBuddyMid_args_buddyMid args)
        let res = default_GetActiveMemberMidsByBuddyMid_result{getActiveMemberMidsByBuddyMid_result_success = val}
        T.writeMessage oprot ("getActiveMemberMidsByBuddyMid", T.M_REPLY, seqid) $
          write_GetActiveMemberMidsByBuddyMid_result oprot res)
      (\e  -> do
        let res = default_GetActiveMemberMidsByBuddyMid_result{getActiveMemberMidsByBuddyMid_result_e = P.Just e}
        T.writeMessage oprot ("getActiveMemberMidsByBuddyMid", T.M_REPLY, seqid) $
          write_GetActiveMemberMidsByBuddyMid_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getActiveMemberMidsByBuddyMid", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getAllBuddyMembers (seqid, iprot, oprot, handler) = do
  args <- read_GetAllBuddyMembers_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getAllBuddyMembers handler
        let res = default_GetAllBuddyMembers_result{getAllBuddyMembers_result_success = val}
        T.writeMessage oprot ("getAllBuddyMembers", T.M_REPLY, seqid) $
          write_GetAllBuddyMembers_result oprot res)
      (\e  -> do
        let res = default_GetAllBuddyMembers_result{getAllBuddyMembers_result_e = P.Just e}
        T.writeMessage oprot ("getAllBuddyMembers", T.M_REPLY, seqid) $
          write_GetAllBuddyMembers_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getAllBuddyMembers", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getBlockedBuddyMembers (seqid, iprot, oprot, handler) = do
  args <- read_GetBlockedBuddyMembers_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getBlockedBuddyMembers handler
        let res = default_GetBlockedBuddyMembers_result{getBlockedBuddyMembers_result_success = val}
        T.writeMessage oprot ("getBlockedBuddyMembers", T.M_REPLY, seqid) $
          write_GetBlockedBuddyMembers_result oprot res)
      (\e  -> do
        let res = default_GetBlockedBuddyMembers_result{getBlockedBuddyMembers_result_e = P.Just e}
        T.writeMessage oprot ("getBlockedBuddyMembers", T.M_REPLY, seqid) $
          write_GetBlockedBuddyMembers_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getBlockedBuddyMembers", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getBlockerCountByBuddyMid (seqid, iprot, oprot, handler) = do
  args <- read_GetBlockerCountByBuddyMid_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getBlockerCountByBuddyMid handler (getBlockerCountByBuddyMid_args_buddyMid args)
        let res = default_GetBlockerCountByBuddyMid_result{getBlockerCountByBuddyMid_result_success = val}
        T.writeMessage oprot ("getBlockerCountByBuddyMid", T.M_REPLY, seqid) $
          write_GetBlockerCountByBuddyMid_result oprot res)
      (\e  -> do
        let res = default_GetBlockerCountByBuddyMid_result{getBlockerCountByBuddyMid_result_e = P.Just e}
        T.writeMessage oprot ("getBlockerCountByBuddyMid", T.M_REPLY, seqid) $
          write_GetBlockerCountByBuddyMid_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getBlockerCountByBuddyMid", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getBuddyDetailByMid (seqid, iprot, oprot, handler) = do
  args <- read_GetBuddyDetailByMid_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getBuddyDetailByMid handler (getBuddyDetailByMid_args_buddyMid args)
        let res = default_GetBuddyDetailByMid_result{getBuddyDetailByMid_result_success = val}
        T.writeMessage oprot ("getBuddyDetailByMid", T.M_REPLY, seqid) $
          write_GetBuddyDetailByMid_result oprot res)
      (\e  -> do
        let res = default_GetBuddyDetailByMid_result{getBuddyDetailByMid_result_e = P.Just e}
        T.writeMessage oprot ("getBuddyDetailByMid", T.M_REPLY, seqid) $
          write_GetBuddyDetailByMid_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getBuddyDetailByMid", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getBuddyProfile (seqid, iprot, oprot, handler) = do
  args <- read_GetBuddyProfile_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getBuddyProfile handler
        let res = default_GetBuddyProfile_result{getBuddyProfile_result_success = val}
        T.writeMessage oprot ("getBuddyProfile", T.M_REPLY, seqid) $
          write_GetBuddyProfile_result oprot res)
      (\e  -> do
        let res = default_GetBuddyProfile_result{getBuddyProfile_result_e = P.Just e}
        T.writeMessage oprot ("getBuddyProfile", T.M_REPLY, seqid) $
          write_GetBuddyProfile_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getBuddyProfile", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getContactTicket (seqid, iprot, oprot, handler) = do
  args <- read_GetContactTicket_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getContactTicket handler
        let res = default_GetContactTicket_result{getContactTicket_result_success = val}
        T.writeMessage oprot ("getContactTicket", T.M_REPLY, seqid) $
          write_GetContactTicket_result oprot res)
      (\e  -> do
        let res = default_GetContactTicket_result{getContactTicket_result_e = P.Just e}
        T.writeMessage oprot ("getContactTicket", T.M_REPLY, seqid) $
          write_GetContactTicket_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getContactTicket", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getMemberCountByBuddyMid (seqid, iprot, oprot, handler) = do
  args <- read_GetMemberCountByBuddyMid_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getMemberCountByBuddyMid handler (getMemberCountByBuddyMid_args_buddyMid args)
        let res = default_GetMemberCountByBuddyMid_result{getMemberCountByBuddyMid_result_success = val}
        T.writeMessage oprot ("getMemberCountByBuddyMid", T.M_REPLY, seqid) $
          write_GetMemberCountByBuddyMid_result oprot res)
      (\e  -> do
        let res = default_GetMemberCountByBuddyMid_result{getMemberCountByBuddyMid_result_e = P.Just e}
        T.writeMessage oprot ("getMemberCountByBuddyMid", T.M_REPLY, seqid) $
          write_GetMemberCountByBuddyMid_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getMemberCountByBuddyMid", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getSendBuddyMessageResult (seqid, iprot, oprot, handler) = do
  args <- read_GetSendBuddyMessageResult_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getSendBuddyMessageResult handler (getSendBuddyMessageResult_args_sendBuddyMessageRequestId args)
        let res = default_GetSendBuddyMessageResult_result{getSendBuddyMessageResult_result_success = val}
        T.writeMessage oprot ("getSendBuddyMessageResult", T.M_REPLY, seqid) $
          write_GetSendBuddyMessageResult_result oprot res)
      (\e  -> do
        let res = default_GetSendBuddyMessageResult_result{getSendBuddyMessageResult_result_e = P.Just e}
        T.writeMessage oprot ("getSendBuddyMessageResult", T.M_REPLY, seqid) $
          write_GetSendBuddyMessageResult_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getSendBuddyMessageResult", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getSetBuddyOnAirResult (seqid, iprot, oprot, handler) = do
  args <- read_GetSetBuddyOnAirResult_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getSetBuddyOnAirResult handler (getSetBuddyOnAirResult_args_setBuddyOnAirRequestId args)
        let res = default_GetSetBuddyOnAirResult_result{getSetBuddyOnAirResult_result_success = val}
        T.writeMessage oprot ("getSetBuddyOnAirResult", T.M_REPLY, seqid) $
          write_GetSetBuddyOnAirResult_result oprot res)
      (\e  -> do
        let res = default_GetSetBuddyOnAirResult_result{getSetBuddyOnAirResult_result_e = P.Just e}
        T.writeMessage oprot ("getSetBuddyOnAirResult", T.M_REPLY, seqid) $
          write_GetSetBuddyOnAirResult_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getSetBuddyOnAirResult", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getUpdateBuddyProfileResult (seqid, iprot, oprot, handler) = do
  args <- read_GetUpdateBuddyProfileResult_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getUpdateBuddyProfileResult handler (getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId args)
        let res = default_GetUpdateBuddyProfileResult_result{getUpdateBuddyProfileResult_result_success = val}
        T.writeMessage oprot ("getUpdateBuddyProfileResult", T.M_REPLY, seqid) $
          write_GetUpdateBuddyProfileResult_result oprot res)
      (\e  -> do
        let res = default_GetUpdateBuddyProfileResult_result{getUpdateBuddyProfileResult_result_e = P.Just e}
        T.writeMessage oprot ("getUpdateBuddyProfileResult", T.M_REPLY, seqid) $
          write_GetUpdateBuddyProfileResult_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getUpdateBuddyProfileResult", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_isBuddyOnAirByMid (seqid, iprot, oprot, handler) = do
  args <- read_IsBuddyOnAirByMid_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.isBuddyOnAirByMid handler (isBuddyOnAirByMid_args_buddyMid args)
        let res = default_IsBuddyOnAirByMid_result{isBuddyOnAirByMid_result_success = val}
        T.writeMessage oprot ("isBuddyOnAirByMid", T.M_REPLY, seqid) $
          write_IsBuddyOnAirByMid_result oprot res)
      (\e  -> do
        let res = default_IsBuddyOnAirByMid_result{isBuddyOnAirByMid_result_e = P.Just e}
        T.writeMessage oprot ("isBuddyOnAirByMid", T.M_REPLY, seqid) $
          write_IsBuddyOnAirByMid_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("isBuddyOnAirByMid", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_linkAndSendBuddyContentMessageToAllAsync (seqid, iprot, oprot, handler) = do
  args <- read_LinkAndSendBuddyContentMessageToAllAsync_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.linkAndSendBuddyContentMessageToAllAsync handler (linkAndSendBuddyContentMessageToAllAsync_args_requestId args) (linkAndSendBuddyContentMessageToAllAsync_args_msg args) (linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId args)
        let res = default_LinkAndSendBuddyContentMessageToAllAsync_result{linkAndSendBuddyContentMessageToAllAsync_result_success = val}
        T.writeMessage oprot ("linkAndSendBuddyContentMessageToAllAsync", T.M_REPLY, seqid) $
          write_LinkAndSendBuddyContentMessageToAllAsync_result oprot res)
      (\e  -> do
        let res = default_LinkAndSendBuddyContentMessageToAllAsync_result{linkAndSendBuddyContentMessageToAllAsync_result_e = P.Just e}
        T.writeMessage oprot ("linkAndSendBuddyContentMessageToAllAsync", T.M_REPLY, seqid) $
          write_LinkAndSendBuddyContentMessageToAllAsync_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("linkAndSendBuddyContentMessageToAllAsync", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_linkAndSendBuddyContentMessageToMids (seqid, iprot, oprot, handler) = do
  args <- read_LinkAndSendBuddyContentMessageToMids_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.linkAndSendBuddyContentMessageToMids handler (linkAndSendBuddyContentMessageToMids_args_requestId args) (linkAndSendBuddyContentMessageToMids_args_msg args) (linkAndSendBuddyContentMessageToMids_args_sourceContentId args) (linkAndSendBuddyContentMessageToMids_args_mids args)
        let res = default_LinkAndSendBuddyContentMessageToMids_result{linkAndSendBuddyContentMessageToMids_result_success = val}
        T.writeMessage oprot ("linkAndSendBuddyContentMessageToMids", T.M_REPLY, seqid) $
          write_LinkAndSendBuddyContentMessageToMids_result oprot res)
      (\e  -> do
        let res = default_LinkAndSendBuddyContentMessageToMids_result{linkAndSendBuddyContentMessageToMids_result_e = P.Just e}
        T.writeMessage oprot ("linkAndSendBuddyContentMessageToMids", T.M_REPLY, seqid) $
          write_LinkAndSendBuddyContentMessageToMids_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("linkAndSendBuddyContentMessageToMids", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_notifyBuddyBlocked (seqid, iprot, oprot, handler) = do
  args <- read_NotifyBuddyBlocked_args iprot
  (X.catch
    (X.catch
      (do
        Iface.notifyBuddyBlocked handler (notifyBuddyBlocked_args_buddyMid args) (notifyBuddyBlocked_args_blockerMid args)
        let res = default_NotifyBuddyBlocked_result
        T.writeMessage oprot ("notifyBuddyBlocked", T.M_REPLY, seqid) $
          write_NotifyBuddyBlocked_result oprot res)
      (\e  -> do
        let res = default_NotifyBuddyBlocked_result{notifyBuddyBlocked_result_e = P.Just e}
        T.writeMessage oprot ("notifyBuddyBlocked", T.M_REPLY, seqid) $
          write_NotifyBuddyBlocked_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("notifyBuddyBlocked", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_notifyBuddyUnblocked (seqid, iprot, oprot, handler) = do
  args <- read_NotifyBuddyUnblocked_args iprot
  (X.catch
    (X.catch
      (do
        Iface.notifyBuddyUnblocked handler (notifyBuddyUnblocked_args_buddyMid args) (notifyBuddyUnblocked_args_blockerMid args)
        let res = default_NotifyBuddyUnblocked_result
        T.writeMessage oprot ("notifyBuddyUnblocked", T.M_REPLY, seqid) $
          write_NotifyBuddyUnblocked_result oprot res)
      (\e  -> do
        let res = default_NotifyBuddyUnblocked_result{notifyBuddyUnblocked_result_e = P.Just e}
        T.writeMessage oprot ("notifyBuddyUnblocked", T.M_REPLY, seqid) $
          write_NotifyBuddyUnblocked_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("notifyBuddyUnblocked", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_registerBuddy (seqid, iprot, oprot, handler) = do
  args <- read_RegisterBuddy_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.registerBuddy handler (registerBuddy_args_buddyId args) (registerBuddy_args_searchId args) (registerBuddy_args_displayName args) (registerBuddy_args_statusMeessage args) (registerBuddy_args_picture args) (registerBuddy_args_settings args)
        let res = default_RegisterBuddy_result{registerBuddy_result_success = val}
        T.writeMessage oprot ("registerBuddy", T.M_REPLY, seqid) $
          write_RegisterBuddy_result oprot res)
      (\e  -> do
        let res = default_RegisterBuddy_result{registerBuddy_result_e = P.Just e}
        T.writeMessage oprot ("registerBuddy", T.M_REPLY, seqid) $
          write_RegisterBuddy_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("registerBuddy", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_registerBuddyAdmin (seqid, iprot, oprot, handler) = do
  args <- read_RegisterBuddyAdmin_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.registerBuddyAdmin handler (registerBuddyAdmin_args_buddyId args) (registerBuddyAdmin_args_searchId args) (registerBuddyAdmin_args_displayName args) (registerBuddyAdmin_args_statusMessage args) (registerBuddyAdmin_args_picture args)
        let res = default_RegisterBuddyAdmin_result{registerBuddyAdmin_result_success = val}
        T.writeMessage oprot ("registerBuddyAdmin", T.M_REPLY, seqid) $
          write_RegisterBuddyAdmin_result oprot res)
      (\e  -> do
        let res = default_RegisterBuddyAdmin_result{registerBuddyAdmin_result_e = P.Just e}
        T.writeMessage oprot ("registerBuddyAdmin", T.M_REPLY, seqid) $
          write_RegisterBuddyAdmin_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("registerBuddyAdmin", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_reissueContactTicket (seqid, iprot, oprot, handler) = do
  args <- read_ReissueContactTicket_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.reissueContactTicket handler (reissueContactTicket_args_expirationTime args) (reissueContactTicket_args_maxUseCount args)
        let res = default_ReissueContactTicket_result{reissueContactTicket_result_success = val}
        T.writeMessage oprot ("reissueContactTicket", T.M_REPLY, seqid) $
          write_ReissueContactTicket_result oprot res)
      (\e  -> do
        let res = default_ReissueContactTicket_result{reissueContactTicket_result_e = P.Just e}
        T.writeMessage oprot ("reissueContactTicket", T.M_REPLY, seqid) $
          write_ReissueContactTicket_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("reissueContactTicket", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_removeBuddyMember (seqid, iprot, oprot, handler) = do
  args <- read_RemoveBuddyMember_args iprot
  (X.catch
    (X.catch
      (do
        Iface.removeBuddyMember handler (removeBuddyMember_args_requestId args) (removeBuddyMember_args_userMid args)
        let res = default_RemoveBuddyMember_result
        T.writeMessage oprot ("removeBuddyMember", T.M_REPLY, seqid) $
          write_RemoveBuddyMember_result oprot res)
      (\e  -> do
        let res = default_RemoveBuddyMember_result{removeBuddyMember_result_e = P.Just e}
        T.writeMessage oprot ("removeBuddyMember", T.M_REPLY, seqid) $
          write_RemoveBuddyMember_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("removeBuddyMember", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_removeBuddyMembers (seqid, iprot, oprot, handler) = do
  args <- read_RemoveBuddyMembers_args iprot
  (X.catch
    (X.catch
      (do
        Iface.removeBuddyMembers handler (removeBuddyMembers_args_requestId args) (removeBuddyMembers_args_userMids args)
        let res = default_RemoveBuddyMembers_result
        T.writeMessage oprot ("removeBuddyMembers", T.M_REPLY, seqid) $
          write_RemoveBuddyMembers_result oprot res)
      (\e  -> do
        let res = default_RemoveBuddyMembers_result{removeBuddyMembers_result_e = P.Just e}
        T.writeMessage oprot ("removeBuddyMembers", T.M_REPLY, seqid) $
          write_RemoveBuddyMembers_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("removeBuddyMembers", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendBuddyContentMessageToAll (seqid, iprot, oprot, handler) = do
  args <- read_SendBuddyContentMessageToAll_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.sendBuddyContentMessageToAll handler (sendBuddyContentMessageToAll_args_requestId args) (sendBuddyContentMessageToAll_args_msg args) (sendBuddyContentMessageToAll_args_content args)
        let res = default_SendBuddyContentMessageToAll_result{sendBuddyContentMessageToAll_result_success = val}
        T.writeMessage oprot ("sendBuddyContentMessageToAll", T.M_REPLY, seqid) $
          write_SendBuddyContentMessageToAll_result oprot res)
      (\e  -> do
        let res = default_SendBuddyContentMessageToAll_result{sendBuddyContentMessageToAll_result_e = P.Just e}
        T.writeMessage oprot ("sendBuddyContentMessageToAll", T.M_REPLY, seqid) $
          write_SendBuddyContentMessageToAll_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendBuddyContentMessageToAll", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendBuddyContentMessageToAllAsync (seqid, iprot, oprot, handler) = do
  args <- read_SendBuddyContentMessageToAllAsync_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.sendBuddyContentMessageToAllAsync handler (sendBuddyContentMessageToAllAsync_args_requestId args) (sendBuddyContentMessageToAllAsync_args_msg args) (sendBuddyContentMessageToAllAsync_args_content args)
        let res = default_SendBuddyContentMessageToAllAsync_result{sendBuddyContentMessageToAllAsync_result_success = val}
        T.writeMessage oprot ("sendBuddyContentMessageToAllAsync", T.M_REPLY, seqid) $
          write_SendBuddyContentMessageToAllAsync_result oprot res)
      (\e  -> do
        let res = default_SendBuddyContentMessageToAllAsync_result{sendBuddyContentMessageToAllAsync_result_e = P.Just e}
        T.writeMessage oprot ("sendBuddyContentMessageToAllAsync", T.M_REPLY, seqid) $
          write_SendBuddyContentMessageToAllAsync_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendBuddyContentMessageToAllAsync", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendBuddyContentMessageToMids (seqid, iprot, oprot, handler) = do
  args <- read_SendBuddyContentMessageToMids_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.sendBuddyContentMessageToMids handler (sendBuddyContentMessageToMids_args_requestId args) (sendBuddyContentMessageToMids_args_msg args) (sendBuddyContentMessageToMids_args_content args) (sendBuddyContentMessageToMids_args_mids args)
        let res = default_SendBuddyContentMessageToMids_result{sendBuddyContentMessageToMids_result_success = val}
        T.writeMessage oprot ("sendBuddyContentMessageToMids", T.M_REPLY, seqid) $
          write_SendBuddyContentMessageToMids_result oprot res)
      (\e  -> do
        let res = default_SendBuddyContentMessageToMids_result{sendBuddyContentMessageToMids_result_e = P.Just e}
        T.writeMessage oprot ("sendBuddyContentMessageToMids", T.M_REPLY, seqid) $
          write_SendBuddyContentMessageToMids_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendBuddyContentMessageToMids", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendBuddyContentMessageToMidsAsync (seqid, iprot, oprot, handler) = do
  args <- read_SendBuddyContentMessageToMidsAsync_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.sendBuddyContentMessageToMidsAsync handler (sendBuddyContentMessageToMidsAsync_args_requestId args) (sendBuddyContentMessageToMidsAsync_args_msg args) (sendBuddyContentMessageToMidsAsync_args_content args) (sendBuddyContentMessageToMidsAsync_args_mids args)
        let res = default_SendBuddyContentMessageToMidsAsync_result{sendBuddyContentMessageToMidsAsync_result_success = val}
        T.writeMessage oprot ("sendBuddyContentMessageToMidsAsync", T.M_REPLY, seqid) $
          write_SendBuddyContentMessageToMidsAsync_result oprot res)
      (\e  -> do
        let res = default_SendBuddyContentMessageToMidsAsync_result{sendBuddyContentMessageToMidsAsync_result_e = P.Just e}
        T.writeMessage oprot ("sendBuddyContentMessageToMidsAsync", T.M_REPLY, seqid) $
          write_SendBuddyContentMessageToMidsAsync_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendBuddyContentMessageToMidsAsync", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendBuddyMessageToAll (seqid, iprot, oprot, handler) = do
  args <- read_SendBuddyMessageToAll_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.sendBuddyMessageToAll handler (sendBuddyMessageToAll_args_requestId args) (sendBuddyMessageToAll_args_msg args)
        let res = default_SendBuddyMessageToAll_result{sendBuddyMessageToAll_result_success = val}
        T.writeMessage oprot ("sendBuddyMessageToAll", T.M_REPLY, seqid) $
          write_SendBuddyMessageToAll_result oprot res)
      (\e  -> do
        let res = default_SendBuddyMessageToAll_result{sendBuddyMessageToAll_result_e = P.Just e}
        T.writeMessage oprot ("sendBuddyMessageToAll", T.M_REPLY, seqid) $
          write_SendBuddyMessageToAll_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendBuddyMessageToAll", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendBuddyMessageToAllAsync (seqid, iprot, oprot, handler) = do
  args <- read_SendBuddyMessageToAllAsync_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.sendBuddyMessageToAllAsync handler (sendBuddyMessageToAllAsync_args_requestId args) (sendBuddyMessageToAllAsync_args_msg args)
        let res = default_SendBuddyMessageToAllAsync_result{sendBuddyMessageToAllAsync_result_success = val}
        T.writeMessage oprot ("sendBuddyMessageToAllAsync", T.M_REPLY, seqid) $
          write_SendBuddyMessageToAllAsync_result oprot res)
      (\e  -> do
        let res = default_SendBuddyMessageToAllAsync_result{sendBuddyMessageToAllAsync_result_e = P.Just e}
        T.writeMessage oprot ("sendBuddyMessageToAllAsync", T.M_REPLY, seqid) $
          write_SendBuddyMessageToAllAsync_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendBuddyMessageToAllAsync", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendBuddyMessageToMids (seqid, iprot, oprot, handler) = do
  args <- read_SendBuddyMessageToMids_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.sendBuddyMessageToMids handler (sendBuddyMessageToMids_args_requestId args) (sendBuddyMessageToMids_args_msg args) (sendBuddyMessageToMids_args_mids args)
        let res = default_SendBuddyMessageToMids_result{sendBuddyMessageToMids_result_success = val}
        T.writeMessage oprot ("sendBuddyMessageToMids", T.M_REPLY, seqid) $
          write_SendBuddyMessageToMids_result oprot res)
      (\e  -> do
        let res = default_SendBuddyMessageToMids_result{sendBuddyMessageToMids_result_e = P.Just e}
        T.writeMessage oprot ("sendBuddyMessageToMids", T.M_REPLY, seqid) $
          write_SendBuddyMessageToMids_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendBuddyMessageToMids", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendBuddyMessageToMidsAsync (seqid, iprot, oprot, handler) = do
  args <- read_SendBuddyMessageToMidsAsync_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.sendBuddyMessageToMidsAsync handler (sendBuddyMessageToMidsAsync_args_requestId args) (sendBuddyMessageToMidsAsync_args_msg args) (sendBuddyMessageToMidsAsync_args_mids args)
        let res = default_SendBuddyMessageToMidsAsync_result{sendBuddyMessageToMidsAsync_result_success = val}
        T.writeMessage oprot ("sendBuddyMessageToMidsAsync", T.M_REPLY, seqid) $
          write_SendBuddyMessageToMidsAsync_result oprot res)
      (\e  -> do
        let res = default_SendBuddyMessageToMidsAsync_result{sendBuddyMessageToMidsAsync_result_e = P.Just e}
        T.writeMessage oprot ("sendBuddyMessageToMidsAsync", T.M_REPLY, seqid) $
          write_SendBuddyMessageToMidsAsync_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendBuddyMessageToMidsAsync", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendIndividualEventToAllAsync (seqid, iprot, oprot, handler) = do
  args <- read_SendIndividualEventToAllAsync_args iprot
  (X.catch
    (X.catch
      (do
        Iface.sendIndividualEventToAllAsync handler (sendIndividualEventToAllAsync_args_requestId args) (sendIndividualEventToAllAsync_args_buddyMid args) (sendIndividualEventToAllAsync_args_notificationStatus args)
        let res = default_SendIndividualEventToAllAsync_result
        T.writeMessage oprot ("sendIndividualEventToAllAsync", T.M_REPLY, seqid) $
          write_SendIndividualEventToAllAsync_result oprot res)
      (\e  -> do
        let res = default_SendIndividualEventToAllAsync_result{sendIndividualEventToAllAsync_result_e = P.Just e}
        T.writeMessage oprot ("sendIndividualEventToAllAsync", T.M_REPLY, seqid) $
          write_SendIndividualEventToAllAsync_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendIndividualEventToAllAsync", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_setBuddyOnAir (seqid, iprot, oprot, handler) = do
  args <- read_SetBuddyOnAir_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.setBuddyOnAir handler (setBuddyOnAir_args_requestId args) (setBuddyOnAir_args_onAir args)
        let res = default_SetBuddyOnAir_result{setBuddyOnAir_result_success = val}
        T.writeMessage oprot ("setBuddyOnAir", T.M_REPLY, seqid) $
          write_SetBuddyOnAir_result oprot res)
      (\e  -> do
        let res = default_SetBuddyOnAir_result{setBuddyOnAir_result_e = P.Just e}
        T.writeMessage oprot ("setBuddyOnAir", T.M_REPLY, seqid) $
          write_SetBuddyOnAir_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("setBuddyOnAir", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_setBuddyOnAirAsync (seqid, iprot, oprot, handler) = do
  args <- read_SetBuddyOnAirAsync_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.setBuddyOnAirAsync handler (setBuddyOnAirAsync_args_requestId args) (setBuddyOnAirAsync_args_onAir args)
        let res = default_SetBuddyOnAirAsync_result{setBuddyOnAirAsync_result_success = val}
        T.writeMessage oprot ("setBuddyOnAirAsync", T.M_REPLY, seqid) $
          write_SetBuddyOnAirAsync_result oprot res)
      (\e  -> do
        let res = default_SetBuddyOnAirAsync_result{setBuddyOnAirAsync_result_e = P.Just e}
        T.writeMessage oprot ("setBuddyOnAirAsync", T.M_REPLY, seqid) $
          write_SetBuddyOnAirAsync_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("setBuddyOnAirAsync", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_storeMessage (seqid, iprot, oprot, handler) = do
  args <- read_StoreMessage_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.storeMessage handler (storeMessage_args_requestId args) (storeMessage_args_messageRequest args)
        let res = default_StoreMessage_result{storeMessage_result_success = val}
        T.writeMessage oprot ("storeMessage", T.M_REPLY, seqid) $
          write_StoreMessage_result oprot res)
      (\e  -> do
        let res = default_StoreMessage_result{storeMessage_result_e = P.Just e}
        T.writeMessage oprot ("storeMessage", T.M_REPLY, seqid) $
          write_StoreMessage_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("storeMessage", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_unblockBuddyMember (seqid, iprot, oprot, handler) = do
  args <- read_UnblockBuddyMember_args iprot
  (X.catch
    (X.catch
      (do
        Iface.unblockBuddyMember handler (unblockBuddyMember_args_requestId args) (unblockBuddyMember_args_mid args)
        let res = default_UnblockBuddyMember_result
        T.writeMessage oprot ("unblockBuddyMember", T.M_REPLY, seqid) $
          write_UnblockBuddyMember_result oprot res)
      (\e  -> do
        let res = default_UnblockBuddyMember_result{unblockBuddyMember_result_e = P.Just e}
        T.writeMessage oprot ("unblockBuddyMember", T.M_REPLY, seqid) $
          write_UnblockBuddyMember_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("unblockBuddyMember", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_unregisterBuddy (seqid, iprot, oprot, handler) = do
  args <- read_UnregisterBuddy_args iprot
  (X.catch
    (X.catch
      (do
        Iface.unregisterBuddy handler (unregisterBuddy_args_requestId args)
        let res = default_UnregisterBuddy_result
        T.writeMessage oprot ("unregisterBuddy", T.M_REPLY, seqid) $
          write_UnregisterBuddy_result oprot res)
      (\e  -> do
        let res = default_UnregisterBuddy_result{unregisterBuddy_result_e = P.Just e}
        T.writeMessage oprot ("unregisterBuddy", T.M_REPLY, seqid) $
          write_UnregisterBuddy_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("unregisterBuddy", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_unregisterBuddyAdmin (seqid, iprot, oprot, handler) = do
  args <- read_UnregisterBuddyAdmin_args iprot
  (X.catch
    (X.catch
      (do
        Iface.unregisterBuddyAdmin handler (unregisterBuddyAdmin_args_requestId args)
        let res = default_UnregisterBuddyAdmin_result
        T.writeMessage oprot ("unregisterBuddyAdmin", T.M_REPLY, seqid) $
          write_UnregisterBuddyAdmin_result oprot res)
      (\e  -> do
        let res = default_UnregisterBuddyAdmin_result{unregisterBuddyAdmin_result_e = P.Just e}
        T.writeMessage oprot ("unregisterBuddyAdmin", T.M_REPLY, seqid) $
          write_UnregisterBuddyAdmin_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("unregisterBuddyAdmin", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_updateBuddyAdminProfileAttribute (seqid, iprot, oprot, handler) = do
  args <- read_UpdateBuddyAdminProfileAttribute_args iprot
  (X.catch
    (X.catch
      (do
        Iface.updateBuddyAdminProfileAttribute handler (updateBuddyAdminProfileAttribute_args_requestId args) (updateBuddyAdminProfileAttribute_args_attributes args)
        let res = default_UpdateBuddyAdminProfileAttribute_result
        T.writeMessage oprot ("updateBuddyAdminProfileAttribute", T.M_REPLY, seqid) $
          write_UpdateBuddyAdminProfileAttribute_result oprot res)
      (\e  -> do
        let res = default_UpdateBuddyAdminProfileAttribute_result{updateBuddyAdminProfileAttribute_result_e = P.Just e}
        T.writeMessage oprot ("updateBuddyAdminProfileAttribute", T.M_REPLY, seqid) $
          write_UpdateBuddyAdminProfileAttribute_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("updateBuddyAdminProfileAttribute", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_updateBuddyAdminProfileImage (seqid, iprot, oprot, handler) = do
  args <- read_UpdateBuddyAdminProfileImage_args iprot
  (X.catch
    (X.catch
      (do
        Iface.updateBuddyAdminProfileImage handler (updateBuddyAdminProfileImage_args_requestId args) (updateBuddyAdminProfileImage_args_picture args)
        let res = default_UpdateBuddyAdminProfileImage_result
        T.writeMessage oprot ("updateBuddyAdminProfileImage", T.M_REPLY, seqid) $
          write_UpdateBuddyAdminProfileImage_result oprot res)
      (\e  -> do
        let res = default_UpdateBuddyAdminProfileImage_result{updateBuddyAdminProfileImage_result_e = P.Just e}
        T.writeMessage oprot ("updateBuddyAdminProfileImage", T.M_REPLY, seqid) $
          write_UpdateBuddyAdminProfileImage_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("updateBuddyAdminProfileImage", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_updateBuddyProfileAttributes (seqid, iprot, oprot, handler) = do
  args <- read_UpdateBuddyProfileAttributes_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.updateBuddyProfileAttributes handler (updateBuddyProfileAttributes_args_requestId args) (updateBuddyProfileAttributes_args_attributes args)
        let res = default_UpdateBuddyProfileAttributes_result{updateBuddyProfileAttributes_result_success = val}
        T.writeMessage oprot ("updateBuddyProfileAttributes", T.M_REPLY, seqid) $
          write_UpdateBuddyProfileAttributes_result oprot res)
      (\e  -> do
        let res = default_UpdateBuddyProfileAttributes_result{updateBuddyProfileAttributes_result_e = P.Just e}
        T.writeMessage oprot ("updateBuddyProfileAttributes", T.M_REPLY, seqid) $
          write_UpdateBuddyProfileAttributes_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("updateBuddyProfileAttributes", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_updateBuddyProfileAttributesAsync (seqid, iprot, oprot, handler) = do
  args <- read_UpdateBuddyProfileAttributesAsync_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.updateBuddyProfileAttributesAsync handler (updateBuddyProfileAttributesAsync_args_requestId args) (updateBuddyProfileAttributesAsync_args_attributes args)
        let res = default_UpdateBuddyProfileAttributesAsync_result{updateBuddyProfileAttributesAsync_result_success = val}
        T.writeMessage oprot ("updateBuddyProfileAttributesAsync", T.M_REPLY, seqid) $
          write_UpdateBuddyProfileAttributesAsync_result oprot res)
      (\e  -> do
        let res = default_UpdateBuddyProfileAttributesAsync_result{updateBuddyProfileAttributesAsync_result_e = P.Just e}
        T.writeMessage oprot ("updateBuddyProfileAttributesAsync", T.M_REPLY, seqid) $
          write_UpdateBuddyProfileAttributesAsync_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("updateBuddyProfileAttributesAsync", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_updateBuddyProfileImage (seqid, iprot, oprot, handler) = do
  args <- read_UpdateBuddyProfileImage_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.updateBuddyProfileImage handler (updateBuddyProfileImage_args_requestId args) (updateBuddyProfileImage_args_image args)
        let res = default_UpdateBuddyProfileImage_result{updateBuddyProfileImage_result_success = val}
        T.writeMessage oprot ("updateBuddyProfileImage", T.M_REPLY, seqid) $
          write_UpdateBuddyProfileImage_result oprot res)
      (\e  -> do
        let res = default_UpdateBuddyProfileImage_result{updateBuddyProfileImage_result_e = P.Just e}
        T.writeMessage oprot ("updateBuddyProfileImage", T.M_REPLY, seqid) $
          write_UpdateBuddyProfileImage_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("updateBuddyProfileImage", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_updateBuddyProfileImageAsync (seqid, iprot, oprot, handler) = do
  args <- read_UpdateBuddyProfileImageAsync_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.updateBuddyProfileImageAsync handler (updateBuddyProfileImageAsync_args_requestId args) (updateBuddyProfileImageAsync_args_image args)
        let res = default_UpdateBuddyProfileImageAsync_result{updateBuddyProfileImageAsync_result_success = val}
        T.writeMessage oprot ("updateBuddyProfileImageAsync", T.M_REPLY, seqid) $
          write_UpdateBuddyProfileImageAsync_result oprot res)
      (\e  -> do
        let res = default_UpdateBuddyProfileImageAsync_result{updateBuddyProfileImageAsync_result_e = P.Just e}
        T.writeMessage oprot ("updateBuddyProfileImageAsync", T.M_REPLY, seqid) $
          write_UpdateBuddyProfileImageAsync_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("updateBuddyProfileImageAsync", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_updateBuddySearchId (seqid, iprot, oprot, handler) = do
  args <- read_UpdateBuddySearchId_args iprot
  (X.catch
    (X.catch
      (do
        Iface.updateBuddySearchId handler (updateBuddySearchId_args_requestId args) (updateBuddySearchId_args_searchId args)
        let res = default_UpdateBuddySearchId_result
        T.writeMessage oprot ("updateBuddySearchId", T.M_REPLY, seqid) $
          write_UpdateBuddySearchId_result oprot res)
      (\e  -> do
        let res = default_UpdateBuddySearchId_result{updateBuddySearchId_result_e = P.Just e}
        T.writeMessage oprot ("updateBuddySearchId", T.M_REPLY, seqid) $
          write_UpdateBuddySearchId_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("updateBuddySearchId", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_updateBuddySettings (seqid, iprot, oprot, handler) = do
  args <- read_UpdateBuddySettings_args iprot
  (X.catch
    (X.catch
      (do
        Iface.updateBuddySettings handler (updateBuddySettings_args_settings args)
        let res = default_UpdateBuddySettings_result
        T.writeMessage oprot ("updateBuddySettings", T.M_REPLY, seqid) $
          write_UpdateBuddySettings_result oprot res)
      (\e  -> do
        let res = default_UpdateBuddySettings_result{updateBuddySettings_result_e = P.Just e}
        T.writeMessage oprot ("updateBuddySettings", T.M_REPLY, seqid) $
          write_UpdateBuddySettings_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("updateBuddySettings", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_uploadBuddyContent (seqid, iprot, oprot, handler) = do
  args <- read_UploadBuddyContent_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.uploadBuddyContent handler (uploadBuddyContent_args_contentType args) (uploadBuddyContent_args_content args)
        let res = default_UploadBuddyContent_result{uploadBuddyContent_result_success = val}
        T.writeMessage oprot ("uploadBuddyContent", T.M_REPLY, seqid) $
          write_UploadBuddyContent_result oprot res)
      (\e  -> do
        let res = default_UploadBuddyContent_result{uploadBuddyContent_result_e = P.Just e}
        T.writeMessage oprot ("uploadBuddyContent", T.M_REPLY, seqid) $
          write_UploadBuddyContent_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("uploadBuddyContent", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "addBuddyMember" -> process_addBuddyMember (seqid,iprot,oprot,handler)
  "addBuddyMembers" -> process_addBuddyMembers (seqid,iprot,oprot,handler)
  "blockBuddyMember" -> process_blockBuddyMember (seqid,iprot,oprot,handler)
  "commitSendMessagesToAll" -> process_commitSendMessagesToAll (seqid,iprot,oprot,handler)
  "commitSendMessagesToMids" -> process_commitSendMessagesToMids (seqid,iprot,oprot,handler)
  "containsBuddyMember" -> process_containsBuddyMember (seqid,iprot,oprot,handler)
  "downloadMessageContent" -> process_downloadMessageContent (seqid,iprot,oprot,handler)
  "downloadMessageContentPreview" -> process_downloadMessageContentPreview (seqid,iprot,oprot,handler)
  "downloadProfileImage" -> process_downloadProfileImage (seqid,iprot,oprot,handler)
  "downloadProfileImagePreview" -> process_downloadProfileImagePreview (seqid,iprot,oprot,handler)
  "getActiveMemberCountByBuddyMid" -> process_getActiveMemberCountByBuddyMid (seqid,iprot,oprot,handler)
  "getActiveMemberMidsByBuddyMid" -> process_getActiveMemberMidsByBuddyMid (seqid,iprot,oprot,handler)
  "getAllBuddyMembers" -> process_getAllBuddyMembers (seqid,iprot,oprot,handler)
  "getBlockedBuddyMembers" -> process_getBlockedBuddyMembers (seqid,iprot,oprot,handler)
  "getBlockerCountByBuddyMid" -> process_getBlockerCountByBuddyMid (seqid,iprot,oprot,handler)
  "getBuddyDetailByMid" -> process_getBuddyDetailByMid (seqid,iprot,oprot,handler)
  "getBuddyProfile" -> process_getBuddyProfile (seqid,iprot,oprot,handler)
  "getContactTicket" -> process_getContactTicket (seqid,iprot,oprot,handler)
  "getMemberCountByBuddyMid" -> process_getMemberCountByBuddyMid (seqid,iprot,oprot,handler)
  "getSendBuddyMessageResult" -> process_getSendBuddyMessageResult (seqid,iprot,oprot,handler)
  "getSetBuddyOnAirResult" -> process_getSetBuddyOnAirResult (seqid,iprot,oprot,handler)
  "getUpdateBuddyProfileResult" -> process_getUpdateBuddyProfileResult (seqid,iprot,oprot,handler)
  "isBuddyOnAirByMid" -> process_isBuddyOnAirByMid (seqid,iprot,oprot,handler)
  "linkAndSendBuddyContentMessageToAllAsync" -> process_linkAndSendBuddyContentMessageToAllAsync (seqid,iprot,oprot,handler)
  "linkAndSendBuddyContentMessageToMids" -> process_linkAndSendBuddyContentMessageToMids (seqid,iprot,oprot,handler)
  "notifyBuddyBlocked" -> process_notifyBuddyBlocked (seqid,iprot,oprot,handler)
  "notifyBuddyUnblocked" -> process_notifyBuddyUnblocked (seqid,iprot,oprot,handler)
  "registerBuddy" -> process_registerBuddy (seqid,iprot,oprot,handler)
  "registerBuddyAdmin" -> process_registerBuddyAdmin (seqid,iprot,oprot,handler)
  "reissueContactTicket" -> process_reissueContactTicket (seqid,iprot,oprot,handler)
  "removeBuddyMember" -> process_removeBuddyMember (seqid,iprot,oprot,handler)
  "removeBuddyMembers" -> process_removeBuddyMembers (seqid,iprot,oprot,handler)
  "sendBuddyContentMessageToAll" -> process_sendBuddyContentMessageToAll (seqid,iprot,oprot,handler)
  "sendBuddyContentMessageToAllAsync" -> process_sendBuddyContentMessageToAllAsync (seqid,iprot,oprot,handler)
  "sendBuddyContentMessageToMids" -> process_sendBuddyContentMessageToMids (seqid,iprot,oprot,handler)
  "sendBuddyContentMessageToMidsAsync" -> process_sendBuddyContentMessageToMidsAsync (seqid,iprot,oprot,handler)
  "sendBuddyMessageToAll" -> process_sendBuddyMessageToAll (seqid,iprot,oprot,handler)
  "sendBuddyMessageToAllAsync" -> process_sendBuddyMessageToAllAsync (seqid,iprot,oprot,handler)
  "sendBuddyMessageToMids" -> process_sendBuddyMessageToMids (seqid,iprot,oprot,handler)
  "sendBuddyMessageToMidsAsync" -> process_sendBuddyMessageToMidsAsync (seqid,iprot,oprot,handler)
  "sendIndividualEventToAllAsync" -> process_sendIndividualEventToAllAsync (seqid,iprot,oprot,handler)
  "setBuddyOnAir" -> process_setBuddyOnAir (seqid,iprot,oprot,handler)
  "setBuddyOnAirAsync" -> process_setBuddyOnAirAsync (seqid,iprot,oprot,handler)
  "storeMessage" -> process_storeMessage (seqid,iprot,oprot,handler)
  "unblockBuddyMember" -> process_unblockBuddyMember (seqid,iprot,oprot,handler)
  "unregisterBuddy" -> process_unregisterBuddy (seqid,iprot,oprot,handler)
  "unregisterBuddyAdmin" -> process_unregisterBuddyAdmin (seqid,iprot,oprot,handler)
  "updateBuddyAdminProfileAttribute" -> process_updateBuddyAdminProfileAttribute (seqid,iprot,oprot,handler)
  "updateBuddyAdminProfileImage" -> process_updateBuddyAdminProfileImage (seqid,iprot,oprot,handler)
  "updateBuddyProfileAttributes" -> process_updateBuddyProfileAttributes (seqid,iprot,oprot,handler)
  "updateBuddyProfileAttributesAsync" -> process_updateBuddyProfileAttributesAsync (seqid,iprot,oprot,handler)
  "updateBuddyProfileImage" -> process_updateBuddyProfileImage (seqid,iprot,oprot,handler)
  "updateBuddyProfileImageAsync" -> process_updateBuddyProfileImageAsync (seqid,iprot,oprot,handler)
  "updateBuddySearchId" -> process_updateBuddySearchId (seqid,iprot,oprot,handler)
  "updateBuddySettings" -> process_updateBuddySettings (seqid,iprot,oprot,handler)
  "uploadBuddyContent" -> process_uploadBuddyContent (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessage oprot (name,T.M_EXCEPTION,seqid) $
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
process handler (iprot, oprot) = do
  T.readMessage iprot (
    proc_ handler (iprot,oprot))
  P.return P.True
