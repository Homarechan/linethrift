{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.14.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module AgeCheckService_Client(checkUserAge,checkUserAgeWithDocomo,retrieveOpenIdAuthUrlWithDocomo,retrieveRequestToken) where
import qualified Data.IORef as R
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Line_Types
import AgeCheckService
seqid = R.newIORef 0
checkUserAge (ip,op) arg_carrier arg_sessionId arg_verifier arg_standardAge = do
  send_checkUserAge op arg_carrier arg_sessionId arg_verifier arg_standardAge
  recv_checkUserAge ip
send_checkUserAge op arg_carrier arg_sessionId arg_verifier arg_standardAge = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("checkUserAge", T.M_CALL, seqn) $
    write_CheckUserAge_args op (CheckUserAge_args{checkUserAge_args_carrier=arg_carrier,checkUserAge_args_sessionId=arg_sessionId,checkUserAge_args_verifier=arg_verifier,checkUserAge_args_standardAge=arg_standardAge})
recv_checkUserAge ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CheckUserAge_result ip
    P.maybe (P.return ()) X.throw (checkUserAge_result_e res)
    P.return $ checkUserAge_result_success res
checkUserAgeWithDocomo (ip,op) arg_openIdRedirectUrl arg_standardAge arg_verifier = do
  send_checkUserAgeWithDocomo op arg_openIdRedirectUrl arg_standardAge arg_verifier
  recv_checkUserAgeWithDocomo ip
send_checkUserAgeWithDocomo op arg_openIdRedirectUrl arg_standardAge arg_verifier = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("checkUserAgeWithDocomo", T.M_CALL, seqn) $
    write_CheckUserAgeWithDocomo_args op (CheckUserAgeWithDocomo_args{checkUserAgeWithDocomo_args_openIdRedirectUrl=arg_openIdRedirectUrl,checkUserAgeWithDocomo_args_standardAge=arg_standardAge,checkUserAgeWithDocomo_args_verifier=arg_verifier})
recv_checkUserAgeWithDocomo ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_CheckUserAgeWithDocomo_result ip
    P.maybe (P.return ()) X.throw (checkUserAgeWithDocomo_result_e res)
    P.return $ checkUserAgeWithDocomo_result_success res
retrieveOpenIdAuthUrlWithDocomo (ip,op) = do
  send_retrieveOpenIdAuthUrlWithDocomo op
  recv_retrieveOpenIdAuthUrlWithDocomo ip
send_retrieveOpenIdAuthUrlWithDocomo op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("retrieveOpenIdAuthUrlWithDocomo", T.M_CALL, seqn) $
    write_RetrieveOpenIdAuthUrlWithDocomo_args op (RetrieveOpenIdAuthUrlWithDocomo_args{})
recv_retrieveOpenIdAuthUrlWithDocomo ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RetrieveOpenIdAuthUrlWithDocomo_result ip
    P.maybe (P.return ()) X.throw (retrieveOpenIdAuthUrlWithDocomo_result_e res)
    P.return $ retrieveOpenIdAuthUrlWithDocomo_result_success res
retrieveRequestToken (ip,op) arg_carrier = do
  send_retrieveRequestToken op arg_carrier
  recv_retrieveRequestToken ip
send_retrieveRequestToken op arg_carrier = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("retrieveRequestToken", T.M_CALL, seqn) $
    write_RetrieveRequestToken_args op (RetrieveRequestToken_args{retrieveRequestToken_args_carrier=arg_carrier})
recv_retrieveRequestToken ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_RetrieveRequestToken_result ip
    P.maybe (P.return ()) X.throw (retrieveRequestToken_result_e res)
    P.return $ retrieveRequestToken_result_success res
