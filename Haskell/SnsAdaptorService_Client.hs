{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.14.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module SnsAdaptorService_Client(getSnsFriends,getSnsMyProfile,postSnsInvitationMessage) where
import qualified Data.IORef as R
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Line_Types
import SnsAdaptorService
seqid = R.newIORef 0
getSnsFriends (ip,op) arg_snsIdType arg_snsAccessToken arg_startIdx arg_limit = do
  send_getSnsFriends op arg_snsIdType arg_snsAccessToken arg_startIdx arg_limit
  recv_getSnsFriends ip
send_getSnsFriends op arg_snsIdType arg_snsAccessToken arg_startIdx arg_limit = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSnsFriends", T.M_CALL, seqn) $
    write_GetSnsFriends_args op (GetSnsFriends_args{getSnsFriends_args_snsIdType=arg_snsIdType,getSnsFriends_args_snsAccessToken=arg_snsAccessToken,getSnsFriends_args_startIdx=arg_startIdx,getSnsFriends_args_limit=arg_limit})
recv_getSnsFriends ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSnsFriends_result ip
    P.maybe (P.return ()) X.throw (getSnsFriends_result_e res)
    P.return $ getSnsFriends_result_success res
getSnsMyProfile (ip,op) arg_snsIdType arg_snsAccessToken = do
  send_getSnsMyProfile op arg_snsIdType arg_snsAccessToken
  recv_getSnsMyProfile ip
send_getSnsMyProfile op arg_snsIdType arg_snsAccessToken = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("getSnsMyProfile", T.M_CALL, seqn) $
    write_GetSnsMyProfile_args op (GetSnsMyProfile_args{getSnsMyProfile_args_snsIdType=arg_snsIdType,getSnsMyProfile_args_snsAccessToken=arg_snsAccessToken})
recv_getSnsMyProfile ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_GetSnsMyProfile_result ip
    P.maybe (P.return ()) X.throw (getSnsMyProfile_result_e res)
    P.return $ getSnsMyProfile_result_success res
postSnsInvitationMessage (ip,op) arg_snsIdType arg_snsAccessToken arg_toSnsUserId = do
  send_postSnsInvitationMessage op arg_snsIdType arg_snsAccessToken arg_toSnsUserId
  recv_postSnsInvitationMessage ip
send_postSnsInvitationMessage op arg_snsIdType arg_snsAccessToken arg_toSnsUserId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("postSnsInvitationMessage", T.M_CALL, seqn) $
    write_PostSnsInvitationMessage_args op (PostSnsInvitationMessage_args{postSnsInvitationMessage_args_snsIdType=arg_snsIdType,postSnsInvitationMessage_args_snsAccessToken=arg_snsAccessToken,postSnsInvitationMessage_args_toSnsUserId=arg_toSnsUserId})
recv_postSnsInvitationMessage ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_PostSnsInvitationMessage_result ip
    P.maybe (P.return ()) X.throw (postSnsInvitationMessage_result_e res)
    P.return ()
