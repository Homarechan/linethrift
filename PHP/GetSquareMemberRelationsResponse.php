<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class GetSquareMemberRelationsResponse
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'squareMembers',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\SquareMember',
                ),
        ),
        2 => array(
            'var' => 'relations',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\SquareMemberRelation',
                ),
        ),
        3 => array(
            'var' => 'continuationToken',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var \SquareMember[]
     */
    public $squareMembers = null;
    /**
     * @var array
     */
    public $relations = null;
    /**
     * @var string
     */
    public $continuationToken = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['squareMembers'])) {
                $this->squareMembers = $vals['squareMembers'];
            }
            if (isset($vals['relations'])) {
                $this->relations = $vals['relations'];
            }
            if (isset($vals['continuationToken'])) {
                $this->continuationToken = $vals['continuationToken'];
            }
        }
    }

    public function getName()
    {
        return 'GetSquareMemberRelationsResponse';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->squareMembers = array();
                        $_size655 = 0;
                        $_etype658 = 0;
                        $xfer += $input->readListBegin($_etype658, $_size655);
                        for ($_i659 = 0; $_i659 < $_size655; ++$_i659) {
                            $elem660 = null;
                            $elem660 = new \SquareMember();
                            $xfer += $elem660->read($input);
                            $this->squareMembers []= $elem660;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::MAP) {
                        $this->relations = array();
                        $_size661 = 0;
                        $_ktype662 = 0;
                        $_vtype663 = 0;
                        $xfer += $input->readMapBegin($_ktype662, $_vtype663, $_size661);
                        for ($_i665 = 0; $_i665 < $_size661; ++$_i665) {
                            $key666 = '';
                            $val667 = new \SquareMemberRelation();
                            $xfer += $input->readString($key666);
                            $val667 = new \SquareMemberRelation();
                            $xfer += $val667->read($input);
                            $this->relations[$key666] = $val667;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->continuationToken);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('GetSquareMemberRelationsResponse');
        if ($this->squareMembers !== null) {
            if (!is_array($this->squareMembers)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('squareMembers', TType::LST, 1);
            $output->writeListBegin(TType::STRUCT, count($this->squareMembers));
            foreach ($this->squareMembers as $iter668) {
                $xfer += $iter668->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->relations !== null) {
            if (!is_array($this->relations)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('relations', TType::MAP, 2);
            $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->relations));
            foreach ($this->relations as $kiter669 => $viter670) {
                $xfer += $output->writeString($kiter669);
                $xfer += $viter670->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->continuationToken !== null) {
            $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 3);
            $xfer += $output->writeString($this->continuationToken);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
