<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class ProximityMatchCandidateResult
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'users',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Contact',
                ),
        ),
        2 => array(
            'var' => 'buddies',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Contact',
                ),
        ),
    );

    /**
     * @var \Contact[]
     */
    public $users = null;
    /**
     * @var \Contact[]
     */
    public $buddies = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['users'])) {
                $this->users = $vals['users'];
            }
            if (isset($vals['buddies'])) {
                $this->buddies = $vals['buddies'];
            }
        }
    }

    public function getName()
    {
        return 'ProximityMatchCandidateResult';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->users = array();
                        $_size371 = 0;
                        $_etype374 = 0;
                        $xfer += $input->readListBegin($_etype374, $_size371);
                        for ($_i375 = 0; $_i375 < $_size371; ++$_i375) {
                            $elem376 = null;
                            $elem376 = new \Contact();
                            $xfer += $elem376->read($input);
                            $this->users []= $elem376;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->buddies = array();
                        $_size377 = 0;
                        $_etype380 = 0;
                        $xfer += $input->readListBegin($_etype380, $_size377);
                        for ($_i381 = 0; $_i381 < $_size377; ++$_i381) {
                            $elem382 = null;
                            $elem382 = new \Contact();
                            $xfer += $elem382->read($input);
                            $this->buddies []= $elem382;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ProximityMatchCandidateResult');
        if ($this->users !== null) {
            if (!is_array($this->users)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('users', TType::LST, 1);
            $output->writeListBegin(TType::STRUCT, count($this->users));
            foreach ($this->users as $iter383) {
                $xfer += $iter383->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->buddies !== null) {
            if (!is_array($this->buddies)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('buddies', TType::LST, 2);
            $output->writeListBegin(TType::STRUCT, count($this->buddies));
            foreach ($this->buddies as $iter384) {
                $xfer += $iter384->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
