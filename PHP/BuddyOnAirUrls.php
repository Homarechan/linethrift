<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class BuddyOnAirUrls
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'hls',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        2 => array(
            'var' => 'smoothStreaming',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var array
     */
    public $hls = null;
    /**
     * @var array
     */
    public $smoothStreaming = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['hls'])) {
                $this->hls = $vals['hls'];
            }
            if (isset($vals['smoothStreaming'])) {
                $this->smoothStreaming = $vals['smoothStreaming'];
            }
        }
    }

    public function getName()
    {
        return 'BuddyOnAirUrls';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::MAP) {
                        $this->hls = array();
                        $_size124 = 0;
                        $_ktype125 = 0;
                        $_vtype126 = 0;
                        $xfer += $input->readMapBegin($_ktype125, $_vtype126, $_size124);
                        for ($_i128 = 0; $_i128 < $_size124; ++$_i128) {
                            $key129 = '';
                            $val130 = '';
                            $xfer += $input->readString($key129);
                            $xfer += $input->readString($val130);
                            $this->hls[$key129] = $val130;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::MAP) {
                        $this->smoothStreaming = array();
                        $_size131 = 0;
                        $_ktype132 = 0;
                        $_vtype133 = 0;
                        $xfer += $input->readMapBegin($_ktype132, $_vtype133, $_size131);
                        for ($_i135 = 0; $_i135 < $_size131; ++$_i135) {
                            $key136 = '';
                            $val137 = '';
                            $xfer += $input->readString($key136);
                            $xfer += $input->readString($val137);
                            $this->smoothStreaming[$key136] = $val137;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('BuddyOnAirUrls');
        if ($this->hls !== null) {
            if (!is_array($this->hls)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('hls', TType::MAP, 1);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->hls));
            foreach ($this->hls as $kiter138 => $viter139) {
                $xfer += $output->writeString($kiter138);
                $xfer += $output->writeString($viter139);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->smoothStreaming !== null) {
            if (!is_array($this->smoothStreaming)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('smoothStreaming', TType::MAP, 2);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->smoothStreaming));
            foreach ($this->smoothStreaming as $kiter140 => $viter141) {
                $xfer += $output->writeString($kiter140);
                $xfer += $output->writeString($viter141);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
