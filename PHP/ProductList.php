<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class ProductList
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'hasNext',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        4 => array(
            'var' => 'bannerSequence',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        5 => array(
            'var' => 'bannerTargetType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'bannerTargetPath',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'productList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Product',
                ),
        ),
        8 => array(
            'var' => 'bannerLang',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var bool
     */
    public $hasNext = null;
    /**
     * @var int
     */
    public $bannerSequence = null;
    /**
     * @var int
     */
    public $bannerTargetType = null;
    /**
     * @var string
     */
    public $bannerTargetPath = null;
    /**
     * @var \Product[]
     */
    public $productList = null;
    /**
     * @var string
     */
    public $bannerLang = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['hasNext'])) {
                $this->hasNext = $vals['hasNext'];
            }
            if (isset($vals['bannerSequence'])) {
                $this->bannerSequence = $vals['bannerSequence'];
            }
            if (isset($vals['bannerTargetType'])) {
                $this->bannerTargetType = $vals['bannerTargetType'];
            }
            if (isset($vals['bannerTargetPath'])) {
                $this->bannerTargetPath = $vals['bannerTargetPath'];
            }
            if (isset($vals['productList'])) {
                $this->productList = $vals['productList'];
            }
            if (isset($vals['bannerLang'])) {
                $this->bannerLang = $vals['bannerLang'];
            }
        }
    }

    public function getName()
    {
        return 'ProductList';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->hasNext);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->bannerSequence);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->bannerTargetType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->bannerTargetPath);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::LST) {
                        $this->productList = array();
                        $_size350 = 0;
                        $_etype353 = 0;
                        $xfer += $input->readListBegin($_etype353, $_size350);
                        for ($_i354 = 0; $_i354 < $_size350; ++$_i354) {
                            $elem355 = null;
                            $elem355 = new \Product();
                            $xfer += $elem355->read($input);
                            $this->productList []= $elem355;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->bannerLang);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ProductList');
        if ($this->hasNext !== null) {
            $xfer += $output->writeFieldBegin('hasNext', TType::BOOL, 1);
            $xfer += $output->writeBool($this->hasNext);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bannerSequence !== null) {
            $xfer += $output->writeFieldBegin('bannerSequence', TType::I64, 4);
            $xfer += $output->writeI64($this->bannerSequence);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bannerTargetType !== null) {
            $xfer += $output->writeFieldBegin('bannerTargetType', TType::I32, 5);
            $xfer += $output->writeI32($this->bannerTargetType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bannerTargetPath !== null) {
            $xfer += $output->writeFieldBegin('bannerTargetPath', TType::STRING, 6);
            $xfer += $output->writeString($this->bannerTargetPath);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->productList !== null) {
            if (!is_array($this->productList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('productList', TType::LST, 7);
            $output->writeListBegin(TType::STRUCT, count($this->productList));
            foreach ($this->productList as $iter356) {
                $xfer += $iter356->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bannerLang !== null) {
            $xfer += $output->writeFieldBegin('bannerLang', TType::STRING, 8);
            $xfer += $output->writeString($this->bannerLang);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
