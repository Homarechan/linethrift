<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TMessageBox
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'channelId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'lastSeq',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        6 => array(
            'var' => 'unreadCount',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        7 => array(
            'var' => 'lastModifiedTime',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        8 => array(
            'var' => 'status',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        9 => array(
            'var' => 'midType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        10 => array(
            'var' => 'lastMessages',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Message',
                ),
        ),
    );

    /**
     * @var string
     */
    public $id = null;
    /**
     * @var string
     */
    public $channelId = null;
    /**
     * @var int
     */
    public $lastSeq = null;
    /**
     * @var int
     */
    public $unreadCount = null;
    /**
     * @var int
     */
    public $lastModifiedTime = null;
    /**
     * @var int
     */
    public $status = null;
    /**
     * @var int
     */
    public $midType = null;
    /**
     * @var \Message[]
     */
    public $lastMessages = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['channelId'])) {
                $this->channelId = $vals['channelId'];
            }
            if (isset($vals['lastSeq'])) {
                $this->lastSeq = $vals['lastSeq'];
            }
            if (isset($vals['unreadCount'])) {
                $this->unreadCount = $vals['unreadCount'];
            }
            if (isset($vals['lastModifiedTime'])) {
                $this->lastModifiedTime = $vals['lastModifiedTime'];
            }
            if (isset($vals['status'])) {
                $this->status = $vals['status'];
            }
            if (isset($vals['midType'])) {
                $this->midType = $vals['midType'];
            }
            if (isset($vals['lastMessages'])) {
                $this->lastMessages = $vals['lastMessages'];
            }
        }
    }

    public function getName()
    {
        return 'TMessageBox';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->channelId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->lastSeq);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->unreadCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->lastModifiedTime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->status);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->midType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::LST) {
                        $this->lastMessages = array();
                        $_size452 = 0;
                        $_etype455 = 0;
                        $xfer += $input->readListBegin($_etype455, $_size452);
                        for ($_i456 = 0; $_i456 < $_size452; ++$_i456) {
                            $elem457 = null;
                            $elem457 = new \Message();
                            $xfer += $elem457->read($input);
                            $this->lastMessages []= $elem457;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TMessageBox');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->channelId !== null) {
            $xfer += $output->writeFieldBegin('channelId', TType::STRING, 2);
            $xfer += $output->writeString($this->channelId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->lastSeq !== null) {
            $xfer += $output->writeFieldBegin('lastSeq', TType::I64, 5);
            $xfer += $output->writeI64($this->lastSeq);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->unreadCount !== null) {
            $xfer += $output->writeFieldBegin('unreadCount', TType::I64, 6);
            $xfer += $output->writeI64($this->unreadCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->lastModifiedTime !== null) {
            $xfer += $output->writeFieldBegin('lastModifiedTime', TType::I64, 7);
            $xfer += $output->writeI64($this->lastModifiedTime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->status !== null) {
            $xfer += $output->writeFieldBegin('status', TType::I32, 8);
            $xfer += $output->writeI32($this->status);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->midType !== null) {
            $xfer += $output->writeFieldBegin('midType', TType::I32, 9);
            $xfer += $output->writeI32($this->midType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->lastMessages !== null) {
            if (!is_array($this->lastMessages)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('lastMessages', TType::LST, 10);
            $output->writeListBegin(TType::STRUCT, count($this->lastMessages));
            foreach ($this->lastMessages as $iter458) {
                $xfer += $iter458->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
