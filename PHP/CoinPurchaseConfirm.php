<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class CoinPurchaseConfirm
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'orderId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'appStoreCode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'receipt',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'signature',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'seller',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'requestType',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'ignoreReceipt',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var string
     */
    public $orderId = null;
    /**
     * @var int
     */
    public $appStoreCode = null;
    /**
     * @var string
     */
    public $receipt = null;
    /**
     * @var string
     */
    public $signature = null;
    /**
     * @var string
     */
    public $seller = null;
    /**
     * @var string
     */
    public $requestType = null;
    /**
     * @var bool
     */
    public $ignoreReceipt = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['orderId'])) {
                $this->orderId = $vals['orderId'];
            }
            if (isset($vals['appStoreCode'])) {
                $this->appStoreCode = $vals['appStoreCode'];
            }
            if (isset($vals['receipt'])) {
                $this->receipt = $vals['receipt'];
            }
            if (isset($vals['signature'])) {
                $this->signature = $vals['signature'];
            }
            if (isset($vals['seller'])) {
                $this->seller = $vals['seller'];
            }
            if (isset($vals['requestType'])) {
                $this->requestType = $vals['requestType'];
            }
            if (isset($vals['ignoreReceipt'])) {
                $this->ignoreReceipt = $vals['ignoreReceipt'];
            }
        }
    }

    public function getName()
    {
        return 'CoinPurchaseConfirm';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->orderId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->appStoreCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->receipt);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->signature);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->seller);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->requestType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->ignoreReceipt);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('CoinPurchaseConfirm');
        if ($this->orderId !== null) {
            $xfer += $output->writeFieldBegin('orderId', TType::STRING, 1);
            $xfer += $output->writeString($this->orderId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->appStoreCode !== null) {
            $xfer += $output->writeFieldBegin('appStoreCode', TType::I32, 2);
            $xfer += $output->writeI32($this->appStoreCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->receipt !== null) {
            $xfer += $output->writeFieldBegin('receipt', TType::STRING, 3);
            $xfer += $output->writeString($this->receipt);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->signature !== null) {
            $xfer += $output->writeFieldBegin('signature', TType::STRING, 4);
            $xfer += $output->writeString($this->signature);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->seller !== null) {
            $xfer += $output->writeFieldBegin('seller', TType::STRING, 5);
            $xfer += $output->writeString($this->seller);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->requestType !== null) {
            $xfer += $output->writeFieldBegin('requestType', TType::STRING, 6);
            $xfer += $output->writeString($this->requestType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ignoreReceipt !== null) {
            $xfer += $output->writeFieldBegin('ignoreReceipt', TType::BOOL, 7);
            $xfer += $output->writeBool($this->ignoreReceipt);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
