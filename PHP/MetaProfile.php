<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MetaProfile
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'createTime',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'regionCode',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'identities',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::I32,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var int
     */
    public $createTime = null;
    /**
     * @var string
     */
    public $regionCode = null;
    /**
     * @var array
     */
    public $identities = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['createTime'])) {
                $this->createTime = $vals['createTime'];
            }
            if (isset($vals['regionCode'])) {
                $this->regionCode = $vals['regionCode'];
            }
            if (isset($vals['identities'])) {
                $this->identities = $vals['identities'];
            }
        }
    }

    public function getName()
    {
        return 'MetaProfile';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->createTime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->regionCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::MAP) {
                        $this->identities = array();
                        $_size309 = 0;
                        $_ktype310 = 0;
                        $_vtype311 = 0;
                        $xfer += $input->readMapBegin($_ktype310, $_vtype311, $_size309);
                        for ($_i313 = 0; $_i313 < $_size309; ++$_i313) {
                            $key314 = 0;
                            $val315 = '';
                            $xfer += $input->readI32($key314);
                            $xfer += $input->readString($val315);
                            $this->identities[$key314] = $val315;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MetaProfile');
        if ($this->createTime !== null) {
            $xfer += $output->writeFieldBegin('createTime', TType::I64, 1);
            $xfer += $output->writeI64($this->createTime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->regionCode !== null) {
            $xfer += $output->writeFieldBegin('regionCode', TType::STRING, 2);
            $xfer += $output->writeString($this->regionCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->identities !== null) {
            if (!is_array($this->identities)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('identities', TType::MAP, 3);
            $output->writeMapBegin(TType::I32, TType::STRING, count($this->identities));
            foreach ($this->identities as $kiter316 => $viter317) {
                $xfer += $output->writeI32($kiter316);
                $xfer += $output->writeString($viter317);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
