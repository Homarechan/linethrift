<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

interface CallServiceIf
{
    /**
     * @param string $mid
     * @return int
     * @throws \TalkException
     */
    public function getUserStatus($mid);
    /**
     * @param int $profileAttribute
     * @param string $value
     * @throws \TalkException
     */
    public function updateProfileAttributeForChannel($profileAttribute, $value);
    /**
     * @param int $attr
     * @param \ExtendedProfile $extendedProfile
     * @throws \TalkException
     */
    public function updateExtendedProfileAttribute($attr, \ExtendedProfile $extendedProfile);
    /**
     * @param bool $statusSticonFallbackDisabled
     * @return \SimpleChannelContact[]
     * @throws \TalkException
     */
    public function getAllSimpleChannelContacts($statusSticonFallbackDisabled);
    /**
     * @return array
     * @throws \TalkException
     */
    public function getUserIdentities();
    /**
     * @param string $dialedNumber
     * @param string $language
     * @param bool $disableCallerId
     * @return \PaidCallDialing
     * @throws \TalkException
     */
    public function markPaidCallAd($dialedNumber, $language, $disableCallerId);
    /**
     * @param string $groupId
     * @return bool
     * @throws \TalkException
     */
    public function isGroupMember($groupId);
    /**
     * @param string $region
     * @param string $phoneNumber
     * @return \PhoneInfoForChannel
     * @throws \TalkException
     */
    public function getPhoneInfoFromPhoneNumber($region, $phoneNumber);
    /**
     * @param string $serial
     * @param string $language
     * @return \PaidCallRedeemResult
     * @throws \TalkException
     */
    public function redeemPaidCallVoucher($serial, $language);
    /**
     * @param string[] $mids
     * @return array
     * @throws \TalkException
     */
    public function getPreferredDisplayName(array $mids);
    /**
     * @param string[] $ids
     * @return \Contact[]
     * @throws \TalkException
     */
    public function getContactsForChannel(array $ids);
    /**
     * @param int $appStoreCode
     * @param int $pgCode
     * @param string $country
     * @param string $language
     * @return \CoinProductItem[]
     * @throws \TalkException
     */
    public function getCallCreditProducts($appStoreCode, $pgCode, $country, $language);
    /**
     * @param int $lastModifiedTimestamp
     * @return \CompactContact[]
     * @throws \TalkException
     */
    public function getCompactContacts($lastModifiedTimestamp);
    /**
     * @param \NotiCenterEventData $event
     * @throws \TalkException
     */
    public function notifyNotiCenterEvent(\NotiCenterEventData $event);
    /**
     * @param string $mid
     * @return bool
     * @throws \TalkException
     */
    public function isInContact($mid);
    /**
     * @param string $groupId
     * @param string[] $mids
     * @return \SimpleChannelContact[]
     * @throws \TalkException
     */
    public function lookupGroupMembers($groupId, array $mids);
    /**
     * @param string $roomMid
     * @return \Room
     * @throws \TalkException
     */
    public function getRoomInformation($roomMid);
    /**
     * @param string $chatMid
     * @return \GroupCall
     * @throws \TalkException
     */
    public function getGroupCall($chatMid);
    /**
     * @return bool
     * @throws \TalkException
     */
    public function isAllowSecondaryDeviceLogin();
    /**
     * @return \SimpleChannelClient
     * @throws \TalkException
     */
    public function getPrimaryClientForChannel();
    /**
     * @param int $reqSeq
     * @param string $buddyMid
     * @param string[] $contactIds
     * @return \Room
     * @throws \TalkException
     */
    public function createRoomWithBuddy($reqSeq, $buddyMid, array $contactIds);
    /**
     * @param string $mid
     * @return string
     * @throws \TalkException
     */
    public function getDisplayName($mid);
    /**
     * @param string $language
     * @return \PaidCallMetadataResult
     * @throws \TalkException
     */
    public function getPaidCallMetadata($language);
    /**
     * @return string
     * @throws \TalkException
     */
    public function getMid();
    /**
     * @param string $country
     * @param string $remoteIp
     * @return string
     * @throws \TalkException
     */
    public function getUserCountryForBilling($country, $remoteIp);
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getFavoriteGroupIdsForChannel();
    /**
     * @param int $start
     * @param int $size
     * @param string $language
     * @return \PaidCallHistoryResult
     * @throws \TalkException
     */
    public function getPaidCallHistory($start, $size, $language);
    /**
     * @param string $verifier
     * @throws \TalkException
     */
    public function sendPinCodeOperation($verifier);
    /**
     * @param string $chatMid
     * @param string[] $memberMids
     * @param int $mediaType
     * @throws \TalkException
     */
    public function inviteIntoGroupCall($chatMid, array $memberMids, $mediaType);
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getFriendMids();
    /**
     * @return \MetaProfile
     * @throws \TalkException
     */
    public function getMetaProfile();
    /**
     * @param \Message $message
     * @return \Message
     * @throws \TalkException
     */
    public function sendMessageForChannel(\Message $message);
    /**
     * @return int
     * @throws \TalkException
     */
    public function activeBuddySubscriberCount();
    /**
     * @param \CoinHistoryCondition $request
     * @return \CoinHistoryResult
     * @throws \TalkException
     */
    public function getCallCreditPurchaseHistory(\CoinHistoryCondition $request);
    /**
     * @param string $roomId
     * @return bool
     * @throws \TalkException
     */
    public function isRoomMember($roomId);
    /**
     * @param \Message $message
     * @return \Message
     * @throws \TalkException
     */
    public function sendSystemOAMessage(\Message $message);
    /**
     * @param int $paidCallType
     * @param string $dialedNumber
     * @param string $language
     * @param string $networkCode
     * @param bool $disableCallerId
     * @param string $referer
     * @param string $adSessionId
     * @return \PaidCallResponse
     * @throws \TalkException
     */
    public function acquirePaidCallRoute($paidCallType, $dialedNumber, $language, $networkCode, $disableCallerId, $referer, $adSessionId);
    /**
     * @param string[] $groupIds
     * @return \Group[]
     * @throws \TalkException
     */
    public function getGroupsForChannel(array $groupIds);
    /**
     * @return int
     * @throws \TalkException
     */
    public function getUserCreateTime();
    /**
     * @param string $cpId
     * @param string $registerPassword
     * @return string
     * @throws \TalkException
     */
    public function registerChannelCP($cpId, $registerPassword);
    /**
     * @param \CoinPurchaseReservation $request
     * @return \PaymentReservationResult
     * @throws \TalkException
     */
    public function reserveCallCreditPurchase(\CoinPurchaseReservation $request);
    /**
     * @param string $language
     * @return \PaidCallCurrencyExchangeRate[]
     * @throws \TalkException
     */
    public function acquirePaidCallCurrencyExchangeRate($language);
    /**
     * @param string $roomId
     * @return string[]
     * @throws \TalkException
     */
    public function getRoomMemberMidsForAppPlatform($roomId);
    /**
     * @param string $language
     * @return \PaidCallBalance[]
     * @throws \TalkException
     */
    public function getPaidCallBalanceList($language);
    /**
     * @param int[] $requiredPersonalInfos
     * @return array
     * @throws \TalkException
     */
    public function getPersonalInfos(array $requiredPersonalInfos);
    /**
     * @param string[] $userMids
     * @return \SimpleChannelClient[]
     * @throws \TalkException
     */
    public function getPrimaryClientsForChannel(array $userMids);
    /**
     * @param string $buddyMid
     * @return \ContactTransition
     * @throws \TalkException
     */
    public function addBuddyToContact($buddyMid);
    /**
     * @param string $groupId
     * @return string[]
     * @throws \TalkException
     */
    public function getGroupMemberMidsForAppPlatform($groupId);
    /**
     * @return string
     * @throws \TalkException
     */
    public function getUserLanguage();
    /**
     * @param string $dialedNumber
     * @param string $language
     * @param string $referer
     * @return \PaidCallResponse
     * @throws \TalkException
     */
    public function lookupPaidCall($dialedNumber, $language, $referer);
    /**
     * @return \ExtendedProfile
     * @throws \TalkException
     */
    public function getExtendedProfile();
    /**
     * @param string[] $ids
     * @return array
     * @throws \TalkException
     */
    public function getReverseCompactContacts(array $ids);
    /**
     * @return \PaidCallAdResult
     * @throws \TalkException
     */
    public function getPaidCallAdStatus();
    /**
     * @param string $userid
     * @return \Contact
     * @throws \TalkException
     */
    public function findContactByUseridWithoutAbuseBlockForChannel($userid);
    /**
     * @param string $groupId
     * @return string[]
     * @throws \TalkException
     */
    public function getGroupMemberMids($groupId);
    /**
     * @param \Message $message
     * @return \Message
     * @throws \TalkException
     */
    public function sendMessageWithoutRelationship(\Message $message);
    /**
     * @param string[] $mids
     * @return array
     * @throws \TalkException
     */
    public function displayBuddySubscriberCountInBulk(array $mids);
    /**
     * @param string $roomId
     * @param string[] $mids
     * @return \SimpleChannelContact[]
     * @throws \TalkException
     */
    public function lookupRoomMembers($roomId, array $mids);
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getFavoriteMidsForChannel();
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getAllContactIdsForChannel();
    /**
     * @return int
     * @throws \TalkException
     */
    public function displayBuddySubscriberCount();
    /**
     * @return \Profile
     * @throws \TalkException
     */
    public function getProfileForChannel();
    /**
     * @param string[] $userMids
     * @return \UserTicketResponse[]
     * @throws \TalkException
     */
    public function getUserTickets(array $userMids);
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getOAFriendMids();
    /**
     * @param string $countryCode
     * @param string $language
     * @return \PaidCallUserRate[]
     * @throws \TalkException
     */
    public function searchPaidCallUserRate($countryCode, $language);
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getJoinedGroupIdsForChannel();
    /**
     * @param string $chatMid
     * @param int $mediaType
     * @return \GroupCallRoute
     * @throws \TalkException
     */
    public function acquireGroupCallRoute($chatMid, $mediaType);
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getUserMidsWhoAddedMe();
    /**
     * @return \IdentityCredential
     * @throws \TalkException
     */
    public function getIdentityCredential();
    /**
     * @param int $opType
     * @param string $param1
     * @param string $param2
     * @param string $param3
     * @throws \TalkException
     */
    public function addOperationForChannel($opType, $param1, $param2, $param3);
    /**
     * @param string[] $ids
     * @param bool $statusSticonFallbackDisabled
     * @return \SimpleChannelContact[]
     * @throws \TalkException
     */
    public function getSimpleChannelContacts(array $ids, $statusSticonFallbackDisabled);
    /**
     * @param string $mid
     * @return int
     * @throws \TalkException
     */
    public function getUserLastSentMessageTimeStamp($mid);
}
