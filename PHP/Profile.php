<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Profile
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'mid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'userid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'phone',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'email',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'regionCode',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        20 => array(
            'var' => 'displayName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        21 => array(
            'var' => 'phoneticName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        22 => array(
            'var' => 'pictureStatus',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        23 => array(
            'var' => 'thumbnailUrl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        24 => array(
            'var' => 'statusMessage',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        31 => array(
            'var' => 'allowSearchByUserid',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        32 => array(
            'var' => 'allowSearchByEmail',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        33 => array(
            'var' => 'picturePath',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        34 => array(
            'var' => 'musicProfile',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        35 => array(
            'var' => 'videoProfile',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $mid = null;
    /**
     * @var string
     */
    public $userid = null;
    /**
     * @var string
     */
    public $phone = null;
    /**
     * @var string
     */
    public $email = null;
    /**
     * @var string
     */
    public $regionCode = null;
    /**
     * @var string
     */
    public $displayName = null;
    /**
     * @var string
     */
    public $phoneticName = null;
    /**
     * @var string
     */
    public $pictureStatus = null;
    /**
     * @var string
     */
    public $thumbnailUrl = null;
    /**
     * @var string
     */
    public $statusMessage = null;
    /**
     * @var bool
     */
    public $allowSearchByUserid = null;
    /**
     * @var bool
     */
    public $allowSearchByEmail = null;
    /**
     * @var string
     */
    public $picturePath = null;
    /**
     * @var string
     */
    public $musicProfile = null;
    /**
     * @var string
     */
    public $videoProfile = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['mid'])) {
                $this->mid = $vals['mid'];
            }
            if (isset($vals['userid'])) {
                $this->userid = $vals['userid'];
            }
            if (isset($vals['phone'])) {
                $this->phone = $vals['phone'];
            }
            if (isset($vals['email'])) {
                $this->email = $vals['email'];
            }
            if (isset($vals['regionCode'])) {
                $this->regionCode = $vals['regionCode'];
            }
            if (isset($vals['displayName'])) {
                $this->displayName = $vals['displayName'];
            }
            if (isset($vals['phoneticName'])) {
                $this->phoneticName = $vals['phoneticName'];
            }
            if (isset($vals['pictureStatus'])) {
                $this->pictureStatus = $vals['pictureStatus'];
            }
            if (isset($vals['thumbnailUrl'])) {
                $this->thumbnailUrl = $vals['thumbnailUrl'];
            }
            if (isset($vals['statusMessage'])) {
                $this->statusMessage = $vals['statusMessage'];
            }
            if (isset($vals['allowSearchByUserid'])) {
                $this->allowSearchByUserid = $vals['allowSearchByUserid'];
            }
            if (isset($vals['allowSearchByEmail'])) {
                $this->allowSearchByEmail = $vals['allowSearchByEmail'];
            }
            if (isset($vals['picturePath'])) {
                $this->picturePath = $vals['picturePath'];
            }
            if (isset($vals['musicProfile'])) {
                $this->musicProfile = $vals['musicProfile'];
            }
            if (isset($vals['videoProfile'])) {
                $this->videoProfile = $vals['videoProfile'];
            }
        }
    }

    public function getName()
    {
        return 'Profile';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->mid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->userid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->phone);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->email);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->regionCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->displayName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->phoneticName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->pictureStatus);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->thumbnailUrl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->statusMessage);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 31:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->allowSearchByUserid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 32:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->allowSearchByEmail);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 33:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->picturePath);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 34:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->musicProfile);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 35:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->videoProfile);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Profile');
        if ($this->mid !== null) {
            $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
            $xfer += $output->writeString($this->mid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->userid !== null) {
            $xfer += $output->writeFieldBegin('userid', TType::STRING, 3);
            $xfer += $output->writeString($this->userid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->phone !== null) {
            $xfer += $output->writeFieldBegin('phone', TType::STRING, 10);
            $xfer += $output->writeString($this->phone);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->email !== null) {
            $xfer += $output->writeFieldBegin('email', TType::STRING, 11);
            $xfer += $output->writeString($this->email);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->regionCode !== null) {
            $xfer += $output->writeFieldBegin('regionCode', TType::STRING, 12);
            $xfer += $output->writeString($this->regionCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->displayName !== null) {
            $xfer += $output->writeFieldBegin('displayName', TType::STRING, 20);
            $xfer += $output->writeString($this->displayName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->phoneticName !== null) {
            $xfer += $output->writeFieldBegin('phoneticName', TType::STRING, 21);
            $xfer += $output->writeString($this->phoneticName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pictureStatus !== null) {
            $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 22);
            $xfer += $output->writeString($this->pictureStatus);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->thumbnailUrl !== null) {
            $xfer += $output->writeFieldBegin('thumbnailUrl', TType::STRING, 23);
            $xfer += $output->writeString($this->thumbnailUrl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->statusMessage !== null) {
            $xfer += $output->writeFieldBegin('statusMessage', TType::STRING, 24);
            $xfer += $output->writeString($this->statusMessage);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->allowSearchByUserid !== null) {
            $xfer += $output->writeFieldBegin('allowSearchByUserid', TType::BOOL, 31);
            $xfer += $output->writeBool($this->allowSearchByUserid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->allowSearchByEmail !== null) {
            $xfer += $output->writeFieldBegin('allowSearchByEmail', TType::BOOL, 32);
            $xfer += $output->writeBool($this->allowSearchByEmail);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->picturePath !== null) {
            $xfer += $output->writeFieldBegin('picturePath', TType::STRING, 33);
            $xfer += $output->writeString($this->picturePath);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->musicProfile !== null) {
            $xfer += $output->writeFieldBegin('musicProfile', TType::STRING, 34);
            $xfer += $output->writeString($this->musicProfile);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->videoProfile !== null) {
            $xfer += $output->writeFieldBegin('videoProfile', TType::STRING, 35);
            $xfer += $output->writeString($this->videoProfile);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
