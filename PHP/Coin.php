<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Coin
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'freeCoinBalance',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'payedCoinBalance',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'totalCoinBalance',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'rewardCoinBalance',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var int
     */
    public $freeCoinBalance = null;
    /**
     * @var int
     */
    public $payedCoinBalance = null;
    /**
     * @var int
     */
    public $totalCoinBalance = null;
    /**
     * @var int
     */
    public $rewardCoinBalance = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['freeCoinBalance'])) {
                $this->freeCoinBalance = $vals['freeCoinBalance'];
            }
            if (isset($vals['payedCoinBalance'])) {
                $this->payedCoinBalance = $vals['payedCoinBalance'];
            }
            if (isset($vals['totalCoinBalance'])) {
                $this->totalCoinBalance = $vals['totalCoinBalance'];
            }
            if (isset($vals['rewardCoinBalance'])) {
                $this->rewardCoinBalance = $vals['rewardCoinBalance'];
            }
        }
    }

    public function getName()
    {
        return 'Coin';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->freeCoinBalance);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->payedCoinBalance);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->totalCoinBalance);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->rewardCoinBalance);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Coin');
        if ($this->freeCoinBalance !== null) {
            $xfer += $output->writeFieldBegin('freeCoinBalance', TType::I32, 1);
            $xfer += $output->writeI32($this->freeCoinBalance);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->payedCoinBalance !== null) {
            $xfer += $output->writeFieldBegin('payedCoinBalance', TType::I32, 2);
            $xfer += $output->writeI32($this->payedCoinBalance);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->totalCoinBalance !== null) {
            $xfer += $output->writeFieldBegin('totalCoinBalance', TType::I32, 3);
            $xfer += $output->writeI32($this->totalCoinBalance);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->rewardCoinBalance !== null) {
            $xfer += $output->writeFieldBegin('rewardCoinBalance', TType::I32, 4);
            $xfer += $output->writeI32($this->rewardCoinBalance);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
