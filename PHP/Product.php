<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Product
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'productId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'packageId',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'version',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'authorName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'onSale',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        6 => array(
            'var' => 'validDays',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'saleType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        8 => array(
            'var' => 'copyright',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'title',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'descriptionText',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'shopOrderId',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        12 => array(
            'var' => 'fromMid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        13 => array(
            'var' => 'toMid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        14 => array(
            'var' => 'validUntil',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        15 => array(
            'var' => 'priceTier',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        16 => array(
            'var' => 'price',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        17 => array(
            'var' => 'currency',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        18 => array(
            'var' => 'currencySymbol',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        19 => array(
            'var' => 'paymentType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        20 => array(
            'var' => 'createDate',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        21 => array(
            'var' => 'ownFlag',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        22 => array(
            'var' => 'eventType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        23 => array(
            'var' => 'urlSchema',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        24 => array(
            'var' => 'downloadUrl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        25 => array(
            'var' => 'buddyMid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        26 => array(
            'var' => 'publishSince',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        27 => array(
            'var' => 'newFlag',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        28 => array(
            'var' => 'missionFlag',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        29 => array(
            'var' => 'categories',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\ProductCategory',
                ),
        ),
        30 => array(
            'var' => 'missionButtonText',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        31 => array(
            'var' => 'missionShortDescription',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        32 => array(
            'var' => 'authorId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        41 => array(
            'var' => 'grantedByDefault',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        42 => array(
            'var' => 'displayOrder',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        43 => array(
            'var' => 'availableForPresent',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        44 => array(
            'var' => 'availableForMyself',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        51 => array(
            'var' => 'hasAnimation',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        52 => array(
            'var' => 'hasSound',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        53 => array(
            'var' => 'recommendationsEnabled',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        54 => array(
            'var' => 'stickerResourceType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $productId = null;
    /**
     * @var int
     */
    public $packageId = null;
    /**
     * @var int
     */
    public $version = null;
    /**
     * @var string
     */
    public $authorName = null;
    /**
     * @var bool
     */
    public $onSale = null;
    /**
     * @var int
     */
    public $validDays = null;
    /**
     * @var int
     */
    public $saleType = null;
    /**
     * @var string
     */
    public $copyright = null;
    /**
     * @var string
     */
    public $title = null;
    /**
     * @var string
     */
    public $descriptionText = null;
    /**
     * @var int
     */
    public $shopOrderId = null;
    /**
     * @var string
     */
    public $fromMid = null;
    /**
     * @var string
     */
    public $toMid = null;
    /**
     * @var int
     */
    public $validUntil = null;
    /**
     * @var int
     */
    public $priceTier = null;
    /**
     * @var string
     */
    public $price = null;
    /**
     * @var string
     */
    public $currency = null;
    /**
     * @var string
     */
    public $currencySymbol = null;
    /**
     * @var int
     */
    public $paymentType = null;
    /**
     * @var int
     */
    public $createDate = null;
    /**
     * @var bool
     */
    public $ownFlag = null;
    /**
     * @var int
     */
    public $eventType = null;
    /**
     * @var string
     */
    public $urlSchema = null;
    /**
     * @var string
     */
    public $downloadUrl = null;
    /**
     * @var string
     */
    public $buddyMid = null;
    /**
     * @var int
     */
    public $publishSince = null;
    /**
     * @var bool
     */
    public $newFlag = null;
    /**
     * @var bool
     */
    public $missionFlag = null;
    /**
     * @var \ProductCategory[]
     */
    public $categories = null;
    /**
     * @var string
     */
    public $missionButtonText = null;
    /**
     * @var string
     */
    public $missionShortDescription = null;
    /**
     * @var string
     */
    public $authorId = null;
    /**
     * @var bool
     */
    public $grantedByDefault = null;
    /**
     * @var int
     */
    public $displayOrder = null;
    /**
     * @var bool
     */
    public $availableForPresent = null;
    /**
     * @var bool
     */
    public $availableForMyself = null;
    /**
     * @var bool
     */
    public $hasAnimation = null;
    /**
     * @var bool
     */
    public $hasSound = null;
    /**
     * @var bool
     */
    public $recommendationsEnabled = null;
    /**
     * @var int
     */
    public $stickerResourceType = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['productId'])) {
                $this->productId = $vals['productId'];
            }
            if (isset($vals['packageId'])) {
                $this->packageId = $vals['packageId'];
            }
            if (isset($vals['version'])) {
                $this->version = $vals['version'];
            }
            if (isset($vals['authorName'])) {
                $this->authorName = $vals['authorName'];
            }
            if (isset($vals['onSale'])) {
                $this->onSale = $vals['onSale'];
            }
            if (isset($vals['validDays'])) {
                $this->validDays = $vals['validDays'];
            }
            if (isset($vals['saleType'])) {
                $this->saleType = $vals['saleType'];
            }
            if (isset($vals['copyright'])) {
                $this->copyright = $vals['copyright'];
            }
            if (isset($vals['title'])) {
                $this->title = $vals['title'];
            }
            if (isset($vals['descriptionText'])) {
                $this->descriptionText = $vals['descriptionText'];
            }
            if (isset($vals['shopOrderId'])) {
                $this->shopOrderId = $vals['shopOrderId'];
            }
            if (isset($vals['fromMid'])) {
                $this->fromMid = $vals['fromMid'];
            }
            if (isset($vals['toMid'])) {
                $this->toMid = $vals['toMid'];
            }
            if (isset($vals['validUntil'])) {
                $this->validUntil = $vals['validUntil'];
            }
            if (isset($vals['priceTier'])) {
                $this->priceTier = $vals['priceTier'];
            }
            if (isset($vals['price'])) {
                $this->price = $vals['price'];
            }
            if (isset($vals['currency'])) {
                $this->currency = $vals['currency'];
            }
            if (isset($vals['currencySymbol'])) {
                $this->currencySymbol = $vals['currencySymbol'];
            }
            if (isset($vals['paymentType'])) {
                $this->paymentType = $vals['paymentType'];
            }
            if (isset($vals['createDate'])) {
                $this->createDate = $vals['createDate'];
            }
            if (isset($vals['ownFlag'])) {
                $this->ownFlag = $vals['ownFlag'];
            }
            if (isset($vals['eventType'])) {
                $this->eventType = $vals['eventType'];
            }
            if (isset($vals['urlSchema'])) {
                $this->urlSchema = $vals['urlSchema'];
            }
            if (isset($vals['downloadUrl'])) {
                $this->downloadUrl = $vals['downloadUrl'];
            }
            if (isset($vals['buddyMid'])) {
                $this->buddyMid = $vals['buddyMid'];
            }
            if (isset($vals['publishSince'])) {
                $this->publishSince = $vals['publishSince'];
            }
            if (isset($vals['newFlag'])) {
                $this->newFlag = $vals['newFlag'];
            }
            if (isset($vals['missionFlag'])) {
                $this->missionFlag = $vals['missionFlag'];
            }
            if (isset($vals['categories'])) {
                $this->categories = $vals['categories'];
            }
            if (isset($vals['missionButtonText'])) {
                $this->missionButtonText = $vals['missionButtonText'];
            }
            if (isset($vals['missionShortDescription'])) {
                $this->missionShortDescription = $vals['missionShortDescription'];
            }
            if (isset($vals['authorId'])) {
                $this->authorId = $vals['authorId'];
            }
            if (isset($vals['grantedByDefault'])) {
                $this->grantedByDefault = $vals['grantedByDefault'];
            }
            if (isset($vals['displayOrder'])) {
                $this->displayOrder = $vals['displayOrder'];
            }
            if (isset($vals['availableForPresent'])) {
                $this->availableForPresent = $vals['availableForPresent'];
            }
            if (isset($vals['availableForMyself'])) {
                $this->availableForMyself = $vals['availableForMyself'];
            }
            if (isset($vals['hasAnimation'])) {
                $this->hasAnimation = $vals['hasAnimation'];
            }
            if (isset($vals['hasSound'])) {
                $this->hasSound = $vals['hasSound'];
            }
            if (isset($vals['recommendationsEnabled'])) {
                $this->recommendationsEnabled = $vals['recommendationsEnabled'];
            }
            if (isset($vals['stickerResourceType'])) {
                $this->stickerResourceType = $vals['stickerResourceType'];
            }
        }
    }

    public function getName()
    {
        return 'Product';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->productId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->packageId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->authorName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->onSale);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->validDays);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->saleType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->copyright);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->title);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->descriptionText);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->shopOrderId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->fromMid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->toMid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->validUntil);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->priceTier);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->price);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->currency);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->currencySymbol);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->paymentType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->createDate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->ownFlag);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->eventType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->urlSchema);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->downloadUrl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 25:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->buddyMid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 26:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->publishSince);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 27:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->newFlag);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 28:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->missionFlag);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 29:
                    if ($ftype == TType::LST) {
                        $this->categories = array();
                        $_size343 = 0;
                        $_etype346 = 0;
                        $xfer += $input->readListBegin($_etype346, $_size343);
                        for ($_i347 = 0; $_i347 < $_size343; ++$_i347) {
                            $elem348 = null;
                            $elem348 = new \ProductCategory();
                            $xfer += $elem348->read($input);
                            $this->categories []= $elem348;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 30:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->missionButtonText);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 31:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->missionShortDescription);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 32:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->authorId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 41:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->grantedByDefault);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 42:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->displayOrder);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 43:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->availableForPresent);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 44:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->availableForMyself);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 51:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->hasAnimation);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 52:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->hasSound);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 53:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->recommendationsEnabled);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 54:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->stickerResourceType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Product');
        if ($this->productId !== null) {
            $xfer += $output->writeFieldBegin('productId', TType::STRING, 1);
            $xfer += $output->writeString($this->productId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->packageId !== null) {
            $xfer += $output->writeFieldBegin('packageId', TType::I64, 2);
            $xfer += $output->writeI64($this->packageId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->version !== null) {
            $xfer += $output->writeFieldBegin('version', TType::I32, 3);
            $xfer += $output->writeI32($this->version);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->authorName !== null) {
            $xfer += $output->writeFieldBegin('authorName', TType::STRING, 4);
            $xfer += $output->writeString($this->authorName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->onSale !== null) {
            $xfer += $output->writeFieldBegin('onSale', TType::BOOL, 5);
            $xfer += $output->writeBool($this->onSale);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->validDays !== null) {
            $xfer += $output->writeFieldBegin('validDays', TType::I32, 6);
            $xfer += $output->writeI32($this->validDays);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->saleType !== null) {
            $xfer += $output->writeFieldBegin('saleType', TType::I32, 7);
            $xfer += $output->writeI32($this->saleType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->copyright !== null) {
            $xfer += $output->writeFieldBegin('copyright', TType::STRING, 8);
            $xfer += $output->writeString($this->copyright);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->title !== null) {
            $xfer += $output->writeFieldBegin('title', TType::STRING, 9);
            $xfer += $output->writeString($this->title);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->descriptionText !== null) {
            $xfer += $output->writeFieldBegin('descriptionText', TType::STRING, 10);
            $xfer += $output->writeString($this->descriptionText);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->shopOrderId !== null) {
            $xfer += $output->writeFieldBegin('shopOrderId', TType::I64, 11);
            $xfer += $output->writeI64($this->shopOrderId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->fromMid !== null) {
            $xfer += $output->writeFieldBegin('fromMid', TType::STRING, 12);
            $xfer += $output->writeString($this->fromMid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->toMid !== null) {
            $xfer += $output->writeFieldBegin('toMid', TType::STRING, 13);
            $xfer += $output->writeString($this->toMid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->validUntil !== null) {
            $xfer += $output->writeFieldBegin('validUntil', TType::I64, 14);
            $xfer += $output->writeI64($this->validUntil);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->priceTier !== null) {
            $xfer += $output->writeFieldBegin('priceTier', TType::I32, 15);
            $xfer += $output->writeI32($this->priceTier);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->price !== null) {
            $xfer += $output->writeFieldBegin('price', TType::STRING, 16);
            $xfer += $output->writeString($this->price);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->currency !== null) {
            $xfer += $output->writeFieldBegin('currency', TType::STRING, 17);
            $xfer += $output->writeString($this->currency);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->currencySymbol !== null) {
            $xfer += $output->writeFieldBegin('currencySymbol', TType::STRING, 18);
            $xfer += $output->writeString($this->currencySymbol);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->paymentType !== null) {
            $xfer += $output->writeFieldBegin('paymentType', TType::I32, 19);
            $xfer += $output->writeI32($this->paymentType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->createDate !== null) {
            $xfer += $output->writeFieldBegin('createDate', TType::I64, 20);
            $xfer += $output->writeI64($this->createDate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ownFlag !== null) {
            $xfer += $output->writeFieldBegin('ownFlag', TType::BOOL, 21);
            $xfer += $output->writeBool($this->ownFlag);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->eventType !== null) {
            $xfer += $output->writeFieldBegin('eventType', TType::I32, 22);
            $xfer += $output->writeI32($this->eventType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->urlSchema !== null) {
            $xfer += $output->writeFieldBegin('urlSchema', TType::STRING, 23);
            $xfer += $output->writeString($this->urlSchema);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->downloadUrl !== null) {
            $xfer += $output->writeFieldBegin('downloadUrl', TType::STRING, 24);
            $xfer += $output->writeString($this->downloadUrl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->buddyMid !== null) {
            $xfer += $output->writeFieldBegin('buddyMid', TType::STRING, 25);
            $xfer += $output->writeString($this->buddyMid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->publishSince !== null) {
            $xfer += $output->writeFieldBegin('publishSince', TType::I64, 26);
            $xfer += $output->writeI64($this->publishSince);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->newFlag !== null) {
            $xfer += $output->writeFieldBegin('newFlag', TType::BOOL, 27);
            $xfer += $output->writeBool($this->newFlag);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->missionFlag !== null) {
            $xfer += $output->writeFieldBegin('missionFlag', TType::BOOL, 28);
            $xfer += $output->writeBool($this->missionFlag);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->categories !== null) {
            if (!is_array($this->categories)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('categories', TType::LST, 29);
            $output->writeListBegin(TType::STRUCT, count($this->categories));
            foreach ($this->categories as $iter349) {
                $xfer += $iter349->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->missionButtonText !== null) {
            $xfer += $output->writeFieldBegin('missionButtonText', TType::STRING, 30);
            $xfer += $output->writeString($this->missionButtonText);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->missionShortDescription !== null) {
            $xfer += $output->writeFieldBegin('missionShortDescription', TType::STRING, 31);
            $xfer += $output->writeString($this->missionShortDescription);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->authorId !== null) {
            $xfer += $output->writeFieldBegin('authorId', TType::STRING, 32);
            $xfer += $output->writeString($this->authorId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->grantedByDefault !== null) {
            $xfer += $output->writeFieldBegin('grantedByDefault', TType::BOOL, 41);
            $xfer += $output->writeBool($this->grantedByDefault);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->displayOrder !== null) {
            $xfer += $output->writeFieldBegin('displayOrder', TType::I32, 42);
            $xfer += $output->writeI32($this->displayOrder);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->availableForPresent !== null) {
            $xfer += $output->writeFieldBegin('availableForPresent', TType::BOOL, 43);
            $xfer += $output->writeBool($this->availableForPresent);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->availableForMyself !== null) {
            $xfer += $output->writeFieldBegin('availableForMyself', TType::BOOL, 44);
            $xfer += $output->writeBool($this->availableForMyself);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->hasAnimation !== null) {
            $xfer += $output->writeFieldBegin('hasAnimation', TType::BOOL, 51);
            $xfer += $output->writeBool($this->hasAnimation);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->hasSound !== null) {
            $xfer += $output->writeFieldBegin('hasSound', TType::BOOL, 52);
            $xfer += $output->writeBool($this->hasSound);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->recommendationsEnabled !== null) {
            $xfer += $output->writeFieldBegin('recommendationsEnabled', TType::BOOL, 53);
            $xfer += $output->writeBool($this->recommendationsEnabled);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->stickerResourceType !== null) {
            $xfer += $output->writeFieldBegin('stickerResourceType', TType::I32, 54);
            $xfer += $output->writeI32($this->stickerResourceType);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
