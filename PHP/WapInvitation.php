<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class WapInvitation
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        10 => array(
            'var' => 'inviteeEmail',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'inviterMid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'roomMid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var int
     */
    public $type = null;
    /**
     * @var string
     */
    public $inviteeEmail = null;
    /**
     * @var string
     */
    public $inviterMid = null;
    /**
     * @var string
     */
    public $roomMid = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['inviteeEmail'])) {
                $this->inviteeEmail = $vals['inviteeEmail'];
            }
            if (isset($vals['inviterMid'])) {
                $this->inviterMid = $vals['inviterMid'];
            }
            if (isset($vals['roomMid'])) {
                $this->roomMid = $vals['roomMid'];
            }
        }
    }

    public function getName()
    {
        return 'WapInvitation';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->inviteeEmail);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->inviterMid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->roomMid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WapInvitation');
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::I32, 1);
            $xfer += $output->writeI32($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->inviteeEmail !== null) {
            $xfer += $output->writeFieldBegin('inviteeEmail', TType::STRING, 10);
            $xfer += $output->writeString($this->inviteeEmail);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->inviterMid !== null) {
            $xfer += $output->writeFieldBegin('inviterMid', TType::STRING, 11);
            $xfer += $output->writeString($this->inviterMid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->roomMid !== null) {
            $xfer += $output->writeFieldBegin('roomMid', TType::STRING, 12);
            $xfer += $output->writeString($this->roomMid);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
