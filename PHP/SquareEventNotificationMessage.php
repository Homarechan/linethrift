<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class SquareEventNotificationMessage
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'squareChatMid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'squareMessage',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareMessage',
        ),
        3 => array(
            'var' => 'senderDisplayName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'unreadCount',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'requiredToFetchChatEvents',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var string
     */
    public $squareChatMid = null;
    /**
     * @var \SquareMessage
     */
    public $squareMessage = null;
    /**
     * @var string
     */
    public $senderDisplayName = null;
    /**
     * @var int
     */
    public $unreadCount = null;
    /**
     * @var bool
     */
    public $requiredToFetchChatEvents = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['squareChatMid'])) {
                $this->squareChatMid = $vals['squareChatMid'];
            }
            if (isset($vals['squareMessage'])) {
                $this->squareMessage = $vals['squareMessage'];
            }
            if (isset($vals['senderDisplayName'])) {
                $this->senderDisplayName = $vals['senderDisplayName'];
            }
            if (isset($vals['unreadCount'])) {
                $this->unreadCount = $vals['unreadCount'];
            }
            if (isset($vals['requiredToFetchChatEvents'])) {
                $this->requiredToFetchChatEvents = $vals['requiredToFetchChatEvents'];
            }
        }
    }

    public function getName()
    {
        return 'SquareEventNotificationMessage';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->squareChatMid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->squareMessage = new \SquareMessage();
                        $xfer += $this->squareMessage->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->senderDisplayName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->unreadCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->requiredToFetchChatEvents);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('SquareEventNotificationMessage');
        if ($this->squareChatMid !== null) {
            $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
            $xfer += $output->writeString($this->squareChatMid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->squareMessage !== null) {
            if (!is_object($this->squareMessage)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('squareMessage', TType::STRUCT, 2);
            $xfer += $this->squareMessage->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->senderDisplayName !== null) {
            $xfer += $output->writeFieldBegin('senderDisplayName', TType::STRING, 3);
            $xfer += $output->writeString($this->senderDisplayName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->unreadCount !== null) {
            $xfer += $output->writeFieldBegin('unreadCount', TType::I32, 4);
            $xfer += $output->writeI32($this->unreadCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->requiredToFetchChatEvents !== null) {
            $xfer += $output->writeFieldBegin('requiredToFetchChatEvents', TType::BOOL, 5);
            $xfer += $output->writeBool($this->requiredToFetchChatEvents);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
