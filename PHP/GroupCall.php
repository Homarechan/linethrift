<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class GroupCall
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'online',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        2 => array(
            'var' => 'chatMid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'hostMids',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'memberMids',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        5 => array(
            'var' => 'started',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        6 => array(
            'var' => 'mediaType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var bool
     */
    public $online = null;
    /**
     * @var string
     */
    public $chatMid = null;
    /**
     * @var string
     */
    public $hostMids = null;
    /**
     * @var string[]
     */
    public $memberMids = null;
    /**
     * @var int
     */
    public $started = null;
    /**
     * @var int
     */
    public $mediaType = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['online'])) {
                $this->online = $vals['online'];
            }
            if (isset($vals['chatMid'])) {
                $this->chatMid = $vals['chatMid'];
            }
            if (isset($vals['hostMids'])) {
                $this->hostMids = $vals['hostMids'];
            }
            if (isset($vals['memberMids'])) {
                $this->memberMids = $vals['memberMids'];
            }
            if (isset($vals['started'])) {
                $this->started = $vals['started'];
            }
            if (isset($vals['mediaType'])) {
                $this->mediaType = $vals['mediaType'];
            }
        }
    }

    public function getName()
    {
        return 'GroupCall';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->online);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->chatMid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->hostMids);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->memberMids = array();
                        $_size976 = 0;
                        $_etype979 = 0;
                        $xfer += $input->readListBegin($_etype979, $_size976);
                        for ($_i980 = 0; $_i980 < $_size976; ++$_i980) {
                            $elem981 = null;
                            $xfer += $input->readString($elem981);
                            $this->memberMids []= $elem981;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->started);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->mediaType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('GroupCall');
        if ($this->online !== null) {
            $xfer += $output->writeFieldBegin('online', TType::BOOL, 1);
            $xfer += $output->writeBool($this->online);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->chatMid !== null) {
            $xfer += $output->writeFieldBegin('chatMid', TType::STRING, 2);
            $xfer += $output->writeString($this->chatMid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->hostMids !== null) {
            $xfer += $output->writeFieldBegin('hostMids', TType::STRING, 3);
            $xfer += $output->writeString($this->hostMids);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->memberMids !== null) {
            if (!is_array($this->memberMids)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('memberMids', TType::LST, 4);
            $output->writeListBegin(TType::STRING, count($this->memberMids));
            foreach ($this->memberMids as $iter982) {
                $xfer += $output->writeString($iter982);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->started !== null) {
            $xfer += $output->writeFieldBegin('started', TType::I64, 5);
            $xfer += $output->writeI64($this->started);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mediaType !== null) {
            $xfer += $output->writeFieldBegin('mediaType', TType::I32, 6);
            $xfer += $output->writeI32($this->mediaType);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
