<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        2 => array(
            'var' => 'region',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'udidHash',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'deviceInfo',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\DeviceInfo',
        ),
        5 => array(
            'var' => 'provider',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'identifier',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'verifier',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'mid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'migrationPincodeSessionId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $region = null;
    /**
     * @var string
     */
    public $udidHash = null;
    /**
     * @var \DeviceInfo
     */
    public $deviceInfo = null;
    /**
     * @var int
     */
    public $provider = null;
    /**
     * @var string
     */
    public $identifier = null;
    /**
     * @var string
     */
    public $verifier = null;
    /**
     * @var string
     */
    public $mid = null;
    /**
     * @var string
     */
    public $migrationPincodeSessionId = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['region'])) {
                $this->region = $vals['region'];
            }
            if (isset($vals['udidHash'])) {
                $this->udidHash = $vals['udidHash'];
            }
            if (isset($vals['deviceInfo'])) {
                $this->deviceInfo = $vals['deviceInfo'];
            }
            if (isset($vals['provider'])) {
                $this->provider = $vals['provider'];
            }
            if (isset($vals['identifier'])) {
                $this->identifier = $vals['identifier'];
            }
            if (isset($vals['verifier'])) {
                $this->verifier = $vals['verifier'];
            }
            if (isset($vals['mid'])) {
                $this->mid = $vals['mid'];
            }
            if (isset($vals['migrationPincodeSessionId'])) {
                $this->migrationPincodeSessionId = $vals['migrationPincodeSessionId'];
            }
        }
    }

    public function getName()
    {
        return 'TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->region);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->udidHash);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->deviceInfo = new \DeviceInfo();
                        $xfer += $this->deviceInfo->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->provider);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->identifier);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->verifier);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->mid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->migrationPincodeSessionId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args');
        if ($this->region !== null) {
            $xfer += $output->writeFieldBegin('region', TType::STRING, 2);
            $xfer += $output->writeString($this->region);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->udidHash !== null) {
            $xfer += $output->writeFieldBegin('udidHash', TType::STRING, 3);
            $xfer += $output->writeString($this->udidHash);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->deviceInfo !== null) {
            if (!is_object($this->deviceInfo)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('deviceInfo', TType::STRUCT, 4);
            $xfer += $this->deviceInfo->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->provider !== null) {
            $xfer += $output->writeFieldBegin('provider', TType::I32, 5);
            $xfer += $output->writeI32($this->provider);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->identifier !== null) {
            $xfer += $output->writeFieldBegin('identifier', TType::STRING, 6);
            $xfer += $output->writeString($this->identifier);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->verifier !== null) {
            $xfer += $output->writeFieldBegin('verifier', TType::STRING, 7);
            $xfer += $output->writeString($this->verifier);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mid !== null) {
            $xfer += $output->writeFieldBegin('mid', TType::STRING, 8);
            $xfer += $output->writeString($this->mid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->migrationPincodeSessionId !== null) {
            $xfer += $output->writeFieldBegin('migrationPincodeSessionId', TType::STRING, 9);
            $xfer += $output->writeString($this->migrationPincodeSessionId);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
