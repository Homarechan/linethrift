<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class PaidCallHistory
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'seq',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'dialedNumber',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'calledNumber',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'toMid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'toName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'setupTime',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        8 => array(
            'var' => 'startTime',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        9 => array(
            'var' => 'endTime',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        10 => array(
            'var' => 'duration',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        11 => array(
            'var' => 'terminate',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        12 => array(
            'var' => 'productType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        13 => array(
            'var' => 'charge',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        14 => array(
            'var' => 'unit',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'result',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var int
     */
    public $seq = null;
    /**
     * @var int
     */
    public $type = null;
    /**
     * @var string
     */
    public $dialedNumber = null;
    /**
     * @var string
     */
    public $calledNumber = null;
    /**
     * @var string
     */
    public $toMid = null;
    /**
     * @var string
     */
    public $toName = null;
    /**
     * @var int
     */
    public $setupTime = null;
    /**
     * @var int
     */
    public $startTime = null;
    /**
     * @var int
     */
    public $endTime = null;
    /**
     * @var int
     */
    public $duration = null;
    /**
     * @var int
     */
    public $terminate = null;
    /**
     * @var int
     */
    public $productType = null;
    /**
     * @var int
     */
    public $charge = null;
    /**
     * @var string
     */
    public $unit = null;
    /**
     * @var string
     */
    public $result = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['seq'])) {
                $this->seq = $vals['seq'];
            }
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['dialedNumber'])) {
                $this->dialedNumber = $vals['dialedNumber'];
            }
            if (isset($vals['calledNumber'])) {
                $this->calledNumber = $vals['calledNumber'];
            }
            if (isset($vals['toMid'])) {
                $this->toMid = $vals['toMid'];
            }
            if (isset($vals['toName'])) {
                $this->toName = $vals['toName'];
            }
            if (isset($vals['setupTime'])) {
                $this->setupTime = $vals['setupTime'];
            }
            if (isset($vals['startTime'])) {
                $this->startTime = $vals['startTime'];
            }
            if (isset($vals['endTime'])) {
                $this->endTime = $vals['endTime'];
            }
            if (isset($vals['duration'])) {
                $this->duration = $vals['duration'];
            }
            if (isset($vals['terminate'])) {
                $this->terminate = $vals['terminate'];
            }
            if (isset($vals['productType'])) {
                $this->productType = $vals['productType'];
            }
            if (isset($vals['charge'])) {
                $this->charge = $vals['charge'];
            }
            if (isset($vals['unit'])) {
                $this->unit = $vals['unit'];
            }
            if (isset($vals['result'])) {
                $this->result = $vals['result'];
            }
        }
    }

    public function getName()
    {
        return 'PaidCallHistory';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->seq);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->dialedNumber);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->calledNumber);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->toMid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->toName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->setupTime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->startTime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->endTime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->duration);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->terminate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->productType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->charge);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->unit);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->result);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('PaidCallHistory');
        if ($this->seq !== null) {
            $xfer += $output->writeFieldBegin('seq', TType::I64, 1);
            $xfer += $output->writeI64($this->seq);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::I32, 2);
            $xfer += $output->writeI32($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dialedNumber !== null) {
            $xfer += $output->writeFieldBegin('dialedNumber', TType::STRING, 3);
            $xfer += $output->writeString($this->dialedNumber);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->calledNumber !== null) {
            $xfer += $output->writeFieldBegin('calledNumber', TType::STRING, 4);
            $xfer += $output->writeString($this->calledNumber);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->toMid !== null) {
            $xfer += $output->writeFieldBegin('toMid', TType::STRING, 5);
            $xfer += $output->writeString($this->toMid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->toName !== null) {
            $xfer += $output->writeFieldBegin('toName', TType::STRING, 6);
            $xfer += $output->writeString($this->toName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->setupTime !== null) {
            $xfer += $output->writeFieldBegin('setupTime', TType::I64, 7);
            $xfer += $output->writeI64($this->setupTime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->startTime !== null) {
            $xfer += $output->writeFieldBegin('startTime', TType::I64, 8);
            $xfer += $output->writeI64($this->startTime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->endTime !== null) {
            $xfer += $output->writeFieldBegin('endTime', TType::I64, 9);
            $xfer += $output->writeI64($this->endTime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->duration !== null) {
            $xfer += $output->writeFieldBegin('duration', TType::I64, 10);
            $xfer += $output->writeI64($this->duration);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->terminate !== null) {
            $xfer += $output->writeFieldBegin('terminate', TType::I32, 11);
            $xfer += $output->writeI32($this->terminate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->productType !== null) {
            $xfer += $output->writeFieldBegin('productType', TType::I32, 12);
            $xfer += $output->writeI32($this->productType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->charge !== null) {
            $xfer += $output->writeFieldBegin('charge', TType::I32, 13);
            $xfer += $output->writeI32($this->charge);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->unit !== null) {
            $xfer += $output->writeFieldBegin('unit', TType::STRING, 14);
            $xfer += $output->writeString($this->unit);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->result !== null) {
            $xfer += $output->writeFieldBegin('result', TType::STRING, 15);
            $xfer += $output->writeString($this->result);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
