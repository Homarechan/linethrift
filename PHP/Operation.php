<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Operation
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'revision',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'createdTime',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'reqSeq',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'checksum',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'status',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        10 => array(
            'var' => 'param1',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'param2',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'param3',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        20 => array(
            'var' => 'message',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Message',
        ),
    );

    /**
     * @var int
     */
    public $revision = null;
    /**
     * @var int
     */
    public $createdTime = null;
    /**
     * @var int
     */
    public $type = null;
    /**
     * @var int
     */
    public $reqSeq = null;
    /**
     * @var string
     */
    public $checksum = null;
    /**
     * @var int
     */
    public $status = null;
    /**
     * @var string
     */
    public $param1 = null;
    /**
     * @var string
     */
    public $param2 = null;
    /**
     * @var string
     */
    public $param3 = null;
    /**
     * @var \Message
     */
    public $message = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['revision'])) {
                $this->revision = $vals['revision'];
            }
            if (isset($vals['createdTime'])) {
                $this->createdTime = $vals['createdTime'];
            }
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['reqSeq'])) {
                $this->reqSeq = $vals['reqSeq'];
            }
            if (isset($vals['checksum'])) {
                $this->checksum = $vals['checksum'];
            }
            if (isset($vals['status'])) {
                $this->status = $vals['status'];
            }
            if (isset($vals['param1'])) {
                $this->param1 = $vals['param1'];
            }
            if (isset($vals['param2'])) {
                $this->param2 = $vals['param2'];
            }
            if (isset($vals['param3'])) {
                $this->param3 = $vals['param3'];
            }
            if (isset($vals['message'])) {
                $this->message = $vals['message'];
            }
        }
    }

    public function getName()
    {
        return 'Operation';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->revision);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->createdTime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->reqSeq);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->checksum);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->status);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->param1);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->param2);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->param3);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::STRUCT) {
                        $this->message = new \Message();
                        $xfer += $this->message->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Operation');
        if ($this->revision !== null) {
            $xfer += $output->writeFieldBegin('revision', TType::I64, 1);
            $xfer += $output->writeI64($this->revision);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->createdTime !== null) {
            $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
            $xfer += $output->writeI64($this->createdTime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::I32, 3);
            $xfer += $output->writeI32($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->reqSeq !== null) {
            $xfer += $output->writeFieldBegin('reqSeq', TType::I32, 4);
            $xfer += $output->writeI32($this->reqSeq);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->checksum !== null) {
            $xfer += $output->writeFieldBegin('checksum', TType::STRING, 5);
            $xfer += $output->writeString($this->checksum);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->status !== null) {
            $xfer += $output->writeFieldBegin('status', TType::I32, 7);
            $xfer += $output->writeI32($this->status);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->param1 !== null) {
            $xfer += $output->writeFieldBegin('param1', TType::STRING, 10);
            $xfer += $output->writeString($this->param1);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->param2 !== null) {
            $xfer += $output->writeFieldBegin('param2', TType::STRING, 11);
            $xfer += $output->writeString($this->param2);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->param3 !== null) {
            $xfer += $output->writeFieldBegin('param3', TType::STRING, 12);
            $xfer += $output->writeString($this->param3);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->message !== null) {
            if (!is_object($this->message)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('message', TType::STRUCT, 20);
            $xfer += $this->message->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
