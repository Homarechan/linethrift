<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class GlobalEvent
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'key',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'targets',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\NotificationTarget',
                ),
        ),
        3 => array(
            'var' => 'createdTime',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        4 => array(
            'var' => 'data',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        5 => array(
            'var' => 'maxDelay',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $key = null;
    /**
     * @var \NotificationTarget[]
     */
    public $targets = null;
    /**
     * @var int
     */
    public $createdTime = null;
    /**
     * @var int
     */
    public $data = null;
    /**
     * @var int
     */
    public $maxDelay = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['key'])) {
                $this->key = $vals['key'];
            }
            if (isset($vals['targets'])) {
                $this->targets = $vals['targets'];
            }
            if (isset($vals['createdTime'])) {
                $this->createdTime = $vals['createdTime'];
            }
            if (isset($vals['data'])) {
                $this->data = $vals['data'];
            }
            if (isset($vals['maxDelay'])) {
                $this->maxDelay = $vals['maxDelay'];
            }
        }
    }

    public function getName()
    {
        return 'GlobalEvent';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->key);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->targets = array();
                        $_size244 = 0;
                        $_etype247 = 0;
                        $xfer += $input->readListBegin($_etype247, $_size244);
                        for ($_i248 = 0; $_i248 < $_size244; ++$_i248) {
                            $elem249 = null;
                            $elem249 = new \NotificationTarget();
                            $xfer += $elem249->read($input);
                            $this->targets []= $elem249;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->createdTime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->data);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->maxDelay);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('GlobalEvent');
        if ($this->key !== null) {
            $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
            $xfer += $output->writeString($this->key);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->targets !== null) {
            if (!is_array($this->targets)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('targets', TType::LST, 2);
            $output->writeListBegin(TType::STRUCT, count($this->targets));
            foreach ($this->targets as $iter250) {
                $xfer += $iter250->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->createdTime !== null) {
            $xfer += $output->writeFieldBegin('createdTime', TType::I64, 3);
            $xfer += $output->writeI64($this->createdTime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->data !== null) {
            $xfer += $output->writeFieldBegin('data', TType::I64, 4);
            $xfer += $output->writeI64($this->data);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->maxDelay !== null) {
            $xfer += $output->writeFieldBegin('maxDelay', TType::I32, 5);
            $xfer += $output->writeI32($this->maxDelay);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
