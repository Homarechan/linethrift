<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class BuddyManagementServiceClient implements \BuddyManagementServiceIf
{
    protected $input_ = null;
    protected $output_ = null;

    protected $seqid_ = 0;

    public function __construct($input, $output = null)
    {
        $this->input_ = $input;
        $this->output_ = $output ? $output : $input;
    }


    public function addBuddyMember($requestId, $userMid)
    {
        $this->send_addBuddyMember($requestId, $userMid);
        $this->recv_addBuddyMember();
    }

    public function send_addBuddyMember($requestId, $userMid)
    {
        $args = new \BuddyManagementService_addBuddyMember_args();
        $args->requestId = $requestId;
        $args->userMid = $userMid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'addBuddyMember',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('addBuddyMember', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_addBuddyMember()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_addBuddyMember_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_addBuddyMember_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }

    public function addBuddyMembers($requestId, array $userMids)
    {
        $this->send_addBuddyMembers($requestId, $userMids);
        $this->recv_addBuddyMembers();
    }

    public function send_addBuddyMembers($requestId, array $userMids)
    {
        $args = new \BuddyManagementService_addBuddyMembers_args();
        $args->requestId = $requestId;
        $args->userMids = $userMids;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'addBuddyMembers',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('addBuddyMembers', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_addBuddyMembers()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_addBuddyMembers_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_addBuddyMembers_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }

    public function blockBuddyMember($requestId, $mid)
    {
        $this->send_blockBuddyMember($requestId, $mid);
        $this->recv_blockBuddyMember();
    }

    public function send_blockBuddyMember($requestId, $mid)
    {
        $args = new \BuddyManagementService_blockBuddyMember_args();
        $args->requestId = $requestId;
        $args->mid = $mid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'blockBuddyMember',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('blockBuddyMember', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_blockBuddyMember()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_blockBuddyMember_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_blockBuddyMember_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }

    public function commitSendMessagesToAll(array $requestIdList)
    {
        $this->send_commitSendMessagesToAll($requestIdList);
        return $this->recv_commitSendMessagesToAll();
    }

    public function send_commitSendMessagesToAll(array $requestIdList)
    {
        $args = new \BuddyManagementService_commitSendMessagesToAll_args();
        $args->requestIdList = $requestIdList;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'commitSendMessagesToAll',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('commitSendMessagesToAll', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_commitSendMessagesToAll()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_commitSendMessagesToAll_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_commitSendMessagesToAll_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("commitSendMessagesToAll failed: unknown result");
    }

    public function commitSendMessagesToMids(array $requestIdList, array $mids)
    {
        $this->send_commitSendMessagesToMids($requestIdList, $mids);
        return $this->recv_commitSendMessagesToMids();
    }

    public function send_commitSendMessagesToMids(array $requestIdList, array $mids)
    {
        $args = new \BuddyManagementService_commitSendMessagesToMids_args();
        $args->requestIdList = $requestIdList;
        $args->mids = $mids;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'commitSendMessagesToMids',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('commitSendMessagesToMids', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_commitSendMessagesToMids()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_commitSendMessagesToMids_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_commitSendMessagesToMids_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("commitSendMessagesToMids failed: unknown result");
    }

    public function containsBuddyMember($requestId, $userMid)
    {
        $this->send_containsBuddyMember($requestId, $userMid);
        return $this->recv_containsBuddyMember();
    }

    public function send_containsBuddyMember($requestId, $userMid)
    {
        $args = new \BuddyManagementService_containsBuddyMember_args();
        $args->requestId = $requestId;
        $args->userMid = $userMid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'containsBuddyMember',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('containsBuddyMember', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_containsBuddyMember()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_containsBuddyMember_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_containsBuddyMember_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("containsBuddyMember failed: unknown result");
    }

    public function downloadMessageContent($requestId, $messageId)
    {
        $this->send_downloadMessageContent($requestId, $messageId);
        return $this->recv_downloadMessageContent();
    }

    public function send_downloadMessageContent($requestId, $messageId)
    {
        $args = new \BuddyManagementService_downloadMessageContent_args();
        $args->requestId = $requestId;
        $args->messageId = $messageId;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'downloadMessageContent',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('downloadMessageContent', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_downloadMessageContent()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_downloadMessageContent_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_downloadMessageContent_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("downloadMessageContent failed: unknown result");
    }

    public function downloadMessageContentPreview($requestId, $messageId)
    {
        $this->send_downloadMessageContentPreview($requestId, $messageId);
        return $this->recv_downloadMessageContentPreview();
    }

    public function send_downloadMessageContentPreview($requestId, $messageId)
    {
        $args = new \BuddyManagementService_downloadMessageContentPreview_args();
        $args->requestId = $requestId;
        $args->messageId = $messageId;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'downloadMessageContentPreview',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('downloadMessageContentPreview', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_downloadMessageContentPreview()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_downloadMessageContentPreview_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_downloadMessageContentPreview_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("downloadMessageContentPreview failed: unknown result");
    }

    public function downloadProfileImage($requestId)
    {
        $this->send_downloadProfileImage($requestId);
        return $this->recv_downloadProfileImage();
    }

    public function send_downloadProfileImage($requestId)
    {
        $args = new \BuddyManagementService_downloadProfileImage_args();
        $args->requestId = $requestId;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'downloadProfileImage',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('downloadProfileImage', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_downloadProfileImage()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_downloadProfileImage_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_downloadProfileImage_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("downloadProfileImage failed: unknown result");
    }

    public function downloadProfileImagePreview($requestId)
    {
        $this->send_downloadProfileImagePreview($requestId);
        return $this->recv_downloadProfileImagePreview();
    }

    public function send_downloadProfileImagePreview($requestId)
    {
        $args = new \BuddyManagementService_downloadProfileImagePreview_args();
        $args->requestId = $requestId;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'downloadProfileImagePreview',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('downloadProfileImagePreview', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_downloadProfileImagePreview()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_downloadProfileImagePreview_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_downloadProfileImagePreview_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("downloadProfileImagePreview failed: unknown result");
    }

    public function getActiveMemberCountByBuddyMid($buddyMid)
    {
        $this->send_getActiveMemberCountByBuddyMid($buddyMid);
        return $this->recv_getActiveMemberCountByBuddyMid();
    }

    public function send_getActiveMemberCountByBuddyMid($buddyMid)
    {
        $args = new \BuddyManagementService_getActiveMemberCountByBuddyMid_args();
        $args->buddyMid = $buddyMid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getActiveMemberCountByBuddyMid',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getActiveMemberCountByBuddyMid', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getActiveMemberCountByBuddyMid()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_getActiveMemberCountByBuddyMid_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_getActiveMemberCountByBuddyMid_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getActiveMemberCountByBuddyMid failed: unknown result");
    }

    public function getActiveMemberMidsByBuddyMid($buddyMid)
    {
        $this->send_getActiveMemberMidsByBuddyMid($buddyMid);
        return $this->recv_getActiveMemberMidsByBuddyMid();
    }

    public function send_getActiveMemberMidsByBuddyMid($buddyMid)
    {
        $args = new \BuddyManagementService_getActiveMemberMidsByBuddyMid_args();
        $args->buddyMid = $buddyMid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getActiveMemberMidsByBuddyMid',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getActiveMemberMidsByBuddyMid', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getActiveMemberMidsByBuddyMid()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_getActiveMemberMidsByBuddyMid_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_getActiveMemberMidsByBuddyMid_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getActiveMemberMidsByBuddyMid failed: unknown result");
    }

    public function getAllBuddyMembers()
    {
        $this->send_getAllBuddyMembers();
        return $this->recv_getAllBuddyMembers();
    }

    public function send_getAllBuddyMembers()
    {
        $args = new \BuddyManagementService_getAllBuddyMembers_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getAllBuddyMembers',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getAllBuddyMembers', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getAllBuddyMembers()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_getAllBuddyMembers_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_getAllBuddyMembers_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getAllBuddyMembers failed: unknown result");
    }

    public function getBlockedBuddyMembers()
    {
        $this->send_getBlockedBuddyMembers();
        return $this->recv_getBlockedBuddyMembers();
    }

    public function send_getBlockedBuddyMembers()
    {
        $args = new \BuddyManagementService_getBlockedBuddyMembers_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getBlockedBuddyMembers',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getBlockedBuddyMembers', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getBlockedBuddyMembers()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_getBlockedBuddyMembers_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_getBlockedBuddyMembers_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getBlockedBuddyMembers failed: unknown result");
    }

    public function getBlockerCountByBuddyMid($buddyMid)
    {
        $this->send_getBlockerCountByBuddyMid($buddyMid);
        return $this->recv_getBlockerCountByBuddyMid();
    }

    public function send_getBlockerCountByBuddyMid($buddyMid)
    {
        $args = new \BuddyManagementService_getBlockerCountByBuddyMid_args();
        $args->buddyMid = $buddyMid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getBlockerCountByBuddyMid',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getBlockerCountByBuddyMid', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getBlockerCountByBuddyMid()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_getBlockerCountByBuddyMid_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_getBlockerCountByBuddyMid_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getBlockerCountByBuddyMid failed: unknown result");
    }

    public function getBuddyDetailByMid($buddyMid)
    {
        $this->send_getBuddyDetailByMid($buddyMid);
        return $this->recv_getBuddyDetailByMid();
    }

    public function send_getBuddyDetailByMid($buddyMid)
    {
        $args = new \BuddyManagementService_getBuddyDetailByMid_args();
        $args->buddyMid = $buddyMid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getBuddyDetailByMid',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getBuddyDetailByMid', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getBuddyDetailByMid()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_getBuddyDetailByMid_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_getBuddyDetailByMid_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getBuddyDetailByMid failed: unknown result");
    }

    public function getBuddyProfile()
    {
        $this->send_getBuddyProfile();
        return $this->recv_getBuddyProfile();
    }

    public function send_getBuddyProfile()
    {
        $args = new \BuddyManagementService_getBuddyProfile_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getBuddyProfile',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getBuddyProfile', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getBuddyProfile()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_getBuddyProfile_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_getBuddyProfile_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getBuddyProfile failed: unknown result");
    }

    public function getContactTicket()
    {
        $this->send_getContactTicket();
        return $this->recv_getContactTicket();
    }

    public function send_getContactTicket()
    {
        $args = new \BuddyManagementService_getContactTicket_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getContactTicket',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getContactTicket', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getContactTicket()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_getContactTicket_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_getContactTicket_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getContactTicket failed: unknown result");
    }

    public function getMemberCountByBuddyMid($buddyMid)
    {
        $this->send_getMemberCountByBuddyMid($buddyMid);
        return $this->recv_getMemberCountByBuddyMid();
    }

    public function send_getMemberCountByBuddyMid($buddyMid)
    {
        $args = new \BuddyManagementService_getMemberCountByBuddyMid_args();
        $args->buddyMid = $buddyMid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getMemberCountByBuddyMid',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getMemberCountByBuddyMid', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getMemberCountByBuddyMid()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_getMemberCountByBuddyMid_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_getMemberCountByBuddyMid_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getMemberCountByBuddyMid failed: unknown result");
    }

    public function getSendBuddyMessageResult($sendBuddyMessageRequestId)
    {
        $this->send_getSendBuddyMessageResult($sendBuddyMessageRequestId);
        return $this->recv_getSendBuddyMessageResult();
    }

    public function send_getSendBuddyMessageResult($sendBuddyMessageRequestId)
    {
        $args = new \BuddyManagementService_getSendBuddyMessageResult_args();
        $args->sendBuddyMessageRequestId = $sendBuddyMessageRequestId;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getSendBuddyMessageResult',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getSendBuddyMessageResult', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getSendBuddyMessageResult()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_getSendBuddyMessageResult_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_getSendBuddyMessageResult_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getSendBuddyMessageResult failed: unknown result");
    }

    public function getSetBuddyOnAirResult($setBuddyOnAirRequestId)
    {
        $this->send_getSetBuddyOnAirResult($setBuddyOnAirRequestId);
        return $this->recv_getSetBuddyOnAirResult();
    }

    public function send_getSetBuddyOnAirResult($setBuddyOnAirRequestId)
    {
        $args = new \BuddyManagementService_getSetBuddyOnAirResult_args();
        $args->setBuddyOnAirRequestId = $setBuddyOnAirRequestId;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getSetBuddyOnAirResult',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getSetBuddyOnAirResult', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getSetBuddyOnAirResult()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_getSetBuddyOnAirResult_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_getSetBuddyOnAirResult_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getSetBuddyOnAirResult failed: unknown result");
    }

    public function getUpdateBuddyProfileResult($updateBuddyProfileRequestId)
    {
        $this->send_getUpdateBuddyProfileResult($updateBuddyProfileRequestId);
        return $this->recv_getUpdateBuddyProfileResult();
    }

    public function send_getUpdateBuddyProfileResult($updateBuddyProfileRequestId)
    {
        $args = new \BuddyManagementService_getUpdateBuddyProfileResult_args();
        $args->updateBuddyProfileRequestId = $updateBuddyProfileRequestId;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getUpdateBuddyProfileResult',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getUpdateBuddyProfileResult', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getUpdateBuddyProfileResult()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_getUpdateBuddyProfileResult_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_getUpdateBuddyProfileResult_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getUpdateBuddyProfileResult failed: unknown result");
    }

    public function isBuddyOnAirByMid($buddyMid)
    {
        $this->send_isBuddyOnAirByMid($buddyMid);
        return $this->recv_isBuddyOnAirByMid();
    }

    public function send_isBuddyOnAirByMid($buddyMid)
    {
        $args = new \BuddyManagementService_isBuddyOnAirByMid_args();
        $args->buddyMid = $buddyMid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'isBuddyOnAirByMid',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('isBuddyOnAirByMid', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_isBuddyOnAirByMid()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_isBuddyOnAirByMid_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_isBuddyOnAirByMid_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("isBuddyOnAirByMid failed: unknown result");
    }

    public function linkAndSendBuddyContentMessageToAllAsync($requestId, \Message $msg, $sourceContentId)
    {
        $this->send_linkAndSendBuddyContentMessageToAllAsync($requestId, $msg, $sourceContentId);
        return $this->recv_linkAndSendBuddyContentMessageToAllAsync();
    }

    public function send_linkAndSendBuddyContentMessageToAllAsync($requestId, \Message $msg, $sourceContentId)
    {
        $args = new \BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_args();
        $args->requestId = $requestId;
        $args->msg = $msg;
        $args->sourceContentId = $sourceContentId;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'linkAndSendBuddyContentMessageToAllAsync',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('linkAndSendBuddyContentMessageToAllAsync', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_linkAndSendBuddyContentMessageToAllAsync()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("linkAndSendBuddyContentMessageToAllAsync failed: unknown result");
    }

    public function linkAndSendBuddyContentMessageToMids($requestId, \Message $msg, $sourceContentId, array $mids)
    {
        $this->send_linkAndSendBuddyContentMessageToMids($requestId, $msg, $sourceContentId, $mids);
        return $this->recv_linkAndSendBuddyContentMessageToMids();
    }

    public function send_linkAndSendBuddyContentMessageToMids($requestId, \Message $msg, $sourceContentId, array $mids)
    {
        $args = new \BuddyManagementService_linkAndSendBuddyContentMessageToMids_args();
        $args->requestId = $requestId;
        $args->msg = $msg;
        $args->sourceContentId = $sourceContentId;
        $args->mids = $mids;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'linkAndSendBuddyContentMessageToMids',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('linkAndSendBuddyContentMessageToMids', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_linkAndSendBuddyContentMessageToMids()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_linkAndSendBuddyContentMessageToMids_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_linkAndSendBuddyContentMessageToMids_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("linkAndSendBuddyContentMessageToMids failed: unknown result");
    }

    public function notifyBuddyBlocked($buddyMid, $blockerMid)
    {
        $this->send_notifyBuddyBlocked($buddyMid, $blockerMid);
        $this->recv_notifyBuddyBlocked();
    }

    public function send_notifyBuddyBlocked($buddyMid, $blockerMid)
    {
        $args = new \BuddyManagementService_notifyBuddyBlocked_args();
        $args->buddyMid = $buddyMid;
        $args->blockerMid = $blockerMid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'notifyBuddyBlocked',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('notifyBuddyBlocked', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_notifyBuddyBlocked()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_notifyBuddyBlocked_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_notifyBuddyBlocked_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }

    public function notifyBuddyUnblocked($buddyMid, $blockerMid)
    {
        $this->send_notifyBuddyUnblocked($buddyMid, $blockerMid);
        $this->recv_notifyBuddyUnblocked();
    }

    public function send_notifyBuddyUnblocked($buddyMid, $blockerMid)
    {
        $args = new \BuddyManagementService_notifyBuddyUnblocked_args();
        $args->buddyMid = $buddyMid;
        $args->blockerMid = $blockerMid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'notifyBuddyUnblocked',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('notifyBuddyUnblocked', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_notifyBuddyUnblocked()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_notifyBuddyUnblocked_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_notifyBuddyUnblocked_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }

    public function registerBuddy($buddyId, $searchId, $displayName, $statusMeessage, $picture, array $settings)
    {
        $this->send_registerBuddy($buddyId, $searchId, $displayName, $statusMeessage, $picture, $settings);
        return $this->recv_registerBuddy();
    }

    public function send_registerBuddy($buddyId, $searchId, $displayName, $statusMeessage, $picture, array $settings)
    {
        $args = new \BuddyManagementService_registerBuddy_args();
        $args->buddyId = $buddyId;
        $args->searchId = $searchId;
        $args->displayName = $displayName;
        $args->statusMeessage = $statusMeessage;
        $args->picture = $picture;
        $args->settings = $settings;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'registerBuddy',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('registerBuddy', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_registerBuddy()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_registerBuddy_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_registerBuddy_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("registerBuddy failed: unknown result");
    }

    public function registerBuddyAdmin($buddyId, $searchId, $displayName, $statusMessage, $picture)
    {
        $this->send_registerBuddyAdmin($buddyId, $searchId, $displayName, $statusMessage, $picture);
        return $this->recv_registerBuddyAdmin();
    }

    public function send_registerBuddyAdmin($buddyId, $searchId, $displayName, $statusMessage, $picture)
    {
        $args = new \BuddyManagementService_registerBuddyAdmin_args();
        $args->buddyId = $buddyId;
        $args->searchId = $searchId;
        $args->displayName = $displayName;
        $args->statusMessage = $statusMessage;
        $args->picture = $picture;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'registerBuddyAdmin',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('registerBuddyAdmin', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_registerBuddyAdmin()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_registerBuddyAdmin_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_registerBuddyAdmin_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("registerBuddyAdmin failed: unknown result");
    }

    public function reissueContactTicket($expirationTime, $maxUseCount)
    {
        $this->send_reissueContactTicket($expirationTime, $maxUseCount);
        return $this->recv_reissueContactTicket();
    }

    public function send_reissueContactTicket($expirationTime, $maxUseCount)
    {
        $args = new \BuddyManagementService_reissueContactTicket_args();
        $args->expirationTime = $expirationTime;
        $args->maxUseCount = $maxUseCount;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'reissueContactTicket',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('reissueContactTicket', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_reissueContactTicket()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_reissueContactTicket_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_reissueContactTicket_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("reissueContactTicket failed: unknown result");
    }

    public function removeBuddyMember($requestId, $userMid)
    {
        $this->send_removeBuddyMember($requestId, $userMid);
        $this->recv_removeBuddyMember();
    }

    public function send_removeBuddyMember($requestId, $userMid)
    {
        $args = new \BuddyManagementService_removeBuddyMember_args();
        $args->requestId = $requestId;
        $args->userMid = $userMid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'removeBuddyMember',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('removeBuddyMember', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_removeBuddyMember()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_removeBuddyMember_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_removeBuddyMember_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }

    public function removeBuddyMembers($requestId, array $userMids)
    {
        $this->send_removeBuddyMembers($requestId, $userMids);
        $this->recv_removeBuddyMembers();
    }

    public function send_removeBuddyMembers($requestId, array $userMids)
    {
        $args = new \BuddyManagementService_removeBuddyMembers_args();
        $args->requestId = $requestId;
        $args->userMids = $userMids;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'removeBuddyMembers',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('removeBuddyMembers', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_removeBuddyMembers()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_removeBuddyMembers_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_removeBuddyMembers_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }

    public function sendBuddyContentMessageToAll($requestId, \Message $msg, $content)
    {
        $this->send_sendBuddyContentMessageToAll($requestId, $msg, $content);
        return $this->recv_sendBuddyContentMessageToAll();
    }

    public function send_sendBuddyContentMessageToAll($requestId, \Message $msg, $content)
    {
        $args = new \BuddyManagementService_sendBuddyContentMessageToAll_args();
        $args->requestId = $requestId;
        $args->msg = $msg;
        $args->content = $content;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'sendBuddyContentMessageToAll',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('sendBuddyContentMessageToAll', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_sendBuddyContentMessageToAll()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_sendBuddyContentMessageToAll_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_sendBuddyContentMessageToAll_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("sendBuddyContentMessageToAll failed: unknown result");
    }

    public function sendBuddyContentMessageToAllAsync($requestId, \Message $msg, $content)
    {
        $this->send_sendBuddyContentMessageToAllAsync($requestId, $msg, $content);
        return $this->recv_sendBuddyContentMessageToAllAsync();
    }

    public function send_sendBuddyContentMessageToAllAsync($requestId, \Message $msg, $content)
    {
        $args = new \BuddyManagementService_sendBuddyContentMessageToAllAsync_args();
        $args->requestId = $requestId;
        $args->msg = $msg;
        $args->content = $content;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'sendBuddyContentMessageToAllAsync',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('sendBuddyContentMessageToAllAsync', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_sendBuddyContentMessageToAllAsync()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_sendBuddyContentMessageToAllAsync_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_sendBuddyContentMessageToAllAsync_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("sendBuddyContentMessageToAllAsync failed: unknown result");
    }

    public function sendBuddyContentMessageToMids($requestId, \Message $msg, $content, array $mids)
    {
        $this->send_sendBuddyContentMessageToMids($requestId, $msg, $content, $mids);
        return $this->recv_sendBuddyContentMessageToMids();
    }

    public function send_sendBuddyContentMessageToMids($requestId, \Message $msg, $content, array $mids)
    {
        $args = new \BuddyManagementService_sendBuddyContentMessageToMids_args();
        $args->requestId = $requestId;
        $args->msg = $msg;
        $args->content = $content;
        $args->mids = $mids;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'sendBuddyContentMessageToMids',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('sendBuddyContentMessageToMids', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_sendBuddyContentMessageToMids()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_sendBuddyContentMessageToMids_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_sendBuddyContentMessageToMids_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("sendBuddyContentMessageToMids failed: unknown result");
    }

    public function sendBuddyContentMessageToMidsAsync($requestId, \Message $msg, $content, array $mids)
    {
        $this->send_sendBuddyContentMessageToMidsAsync($requestId, $msg, $content, $mids);
        return $this->recv_sendBuddyContentMessageToMidsAsync();
    }

    public function send_sendBuddyContentMessageToMidsAsync($requestId, \Message $msg, $content, array $mids)
    {
        $args = new \BuddyManagementService_sendBuddyContentMessageToMidsAsync_args();
        $args->requestId = $requestId;
        $args->msg = $msg;
        $args->content = $content;
        $args->mids = $mids;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'sendBuddyContentMessageToMidsAsync',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('sendBuddyContentMessageToMidsAsync', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_sendBuddyContentMessageToMidsAsync()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_sendBuddyContentMessageToMidsAsync_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_sendBuddyContentMessageToMidsAsync_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("sendBuddyContentMessageToMidsAsync failed: unknown result");
    }

    public function sendBuddyMessageToAll($requestId, \Message $msg)
    {
        $this->send_sendBuddyMessageToAll($requestId, $msg);
        return $this->recv_sendBuddyMessageToAll();
    }

    public function send_sendBuddyMessageToAll($requestId, \Message $msg)
    {
        $args = new \BuddyManagementService_sendBuddyMessageToAll_args();
        $args->requestId = $requestId;
        $args->msg = $msg;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'sendBuddyMessageToAll',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('sendBuddyMessageToAll', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_sendBuddyMessageToAll()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_sendBuddyMessageToAll_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_sendBuddyMessageToAll_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("sendBuddyMessageToAll failed: unknown result");
    }

    public function sendBuddyMessageToAllAsync($requestId, \Message $msg)
    {
        $this->send_sendBuddyMessageToAllAsync($requestId, $msg);
        return $this->recv_sendBuddyMessageToAllAsync();
    }

    public function send_sendBuddyMessageToAllAsync($requestId, \Message $msg)
    {
        $args = new \BuddyManagementService_sendBuddyMessageToAllAsync_args();
        $args->requestId = $requestId;
        $args->msg = $msg;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'sendBuddyMessageToAllAsync',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('sendBuddyMessageToAllAsync', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_sendBuddyMessageToAllAsync()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_sendBuddyMessageToAllAsync_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_sendBuddyMessageToAllAsync_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("sendBuddyMessageToAllAsync failed: unknown result");
    }

    public function sendBuddyMessageToMids($requestId, \Message $msg, array $mids)
    {
        $this->send_sendBuddyMessageToMids($requestId, $msg, $mids);
        return $this->recv_sendBuddyMessageToMids();
    }

    public function send_sendBuddyMessageToMids($requestId, \Message $msg, array $mids)
    {
        $args = new \BuddyManagementService_sendBuddyMessageToMids_args();
        $args->requestId = $requestId;
        $args->msg = $msg;
        $args->mids = $mids;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'sendBuddyMessageToMids',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('sendBuddyMessageToMids', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_sendBuddyMessageToMids()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_sendBuddyMessageToMids_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_sendBuddyMessageToMids_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("sendBuddyMessageToMids failed: unknown result");
    }

    public function sendBuddyMessageToMidsAsync($requestId, \Message $msg, array $mids)
    {
        $this->send_sendBuddyMessageToMidsAsync($requestId, $msg, $mids);
        return $this->recv_sendBuddyMessageToMidsAsync();
    }

    public function send_sendBuddyMessageToMidsAsync($requestId, \Message $msg, array $mids)
    {
        $args = new \BuddyManagementService_sendBuddyMessageToMidsAsync_args();
        $args->requestId = $requestId;
        $args->msg = $msg;
        $args->mids = $mids;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'sendBuddyMessageToMidsAsync',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('sendBuddyMessageToMidsAsync', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_sendBuddyMessageToMidsAsync()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_sendBuddyMessageToMidsAsync_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_sendBuddyMessageToMidsAsync_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("sendBuddyMessageToMidsAsync failed: unknown result");
    }

    public function sendIndividualEventToAllAsync($requestId, $buddyMid, $notificationStatus)
    {
        $this->send_sendIndividualEventToAllAsync($requestId, $buddyMid, $notificationStatus);
        $this->recv_sendIndividualEventToAllAsync();
    }

    public function send_sendIndividualEventToAllAsync($requestId, $buddyMid, $notificationStatus)
    {
        $args = new \BuddyManagementService_sendIndividualEventToAllAsync_args();
        $args->requestId = $requestId;
        $args->buddyMid = $buddyMid;
        $args->notificationStatus = $notificationStatus;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'sendIndividualEventToAllAsync',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('sendIndividualEventToAllAsync', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_sendIndividualEventToAllAsync()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_sendIndividualEventToAllAsync_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_sendIndividualEventToAllAsync_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }

    public function setBuddyOnAir($requestId, $onAir)
    {
        $this->send_setBuddyOnAir($requestId, $onAir);
        return $this->recv_setBuddyOnAir();
    }

    public function send_setBuddyOnAir($requestId, $onAir)
    {
        $args = new \BuddyManagementService_setBuddyOnAir_args();
        $args->requestId = $requestId;
        $args->onAir = $onAir;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'setBuddyOnAir',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('setBuddyOnAir', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_setBuddyOnAir()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_setBuddyOnAir_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_setBuddyOnAir_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("setBuddyOnAir failed: unknown result");
    }

    public function setBuddyOnAirAsync($requestId, $onAir)
    {
        $this->send_setBuddyOnAirAsync($requestId, $onAir);
        return $this->recv_setBuddyOnAirAsync();
    }

    public function send_setBuddyOnAirAsync($requestId, $onAir)
    {
        $args = new \BuddyManagementService_setBuddyOnAirAsync_args();
        $args->requestId = $requestId;
        $args->onAir = $onAir;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'setBuddyOnAirAsync',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('setBuddyOnAirAsync', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_setBuddyOnAirAsync()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_setBuddyOnAirAsync_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_setBuddyOnAirAsync_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("setBuddyOnAirAsync failed: unknown result");
    }

    public function storeMessage($requestId, \BuddyMessageRequest $messageRequest)
    {
        $this->send_storeMessage($requestId, $messageRequest);
        return $this->recv_storeMessage();
    }

    public function send_storeMessage($requestId, \BuddyMessageRequest $messageRequest)
    {
        $args = new \BuddyManagementService_storeMessage_args();
        $args->requestId = $requestId;
        $args->messageRequest = $messageRequest;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'storeMessage',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('storeMessage', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_storeMessage()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_storeMessage_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_storeMessage_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("storeMessage failed: unknown result");
    }

    public function unblockBuddyMember($requestId, $mid)
    {
        $this->send_unblockBuddyMember($requestId, $mid);
        $this->recv_unblockBuddyMember();
    }

    public function send_unblockBuddyMember($requestId, $mid)
    {
        $args = new \BuddyManagementService_unblockBuddyMember_args();
        $args->requestId = $requestId;
        $args->mid = $mid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'unblockBuddyMember',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('unblockBuddyMember', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_unblockBuddyMember()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_unblockBuddyMember_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_unblockBuddyMember_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }

    public function unregisterBuddy($requestId)
    {
        $this->send_unregisterBuddy($requestId);
        $this->recv_unregisterBuddy();
    }

    public function send_unregisterBuddy($requestId)
    {
        $args = new \BuddyManagementService_unregisterBuddy_args();
        $args->requestId = $requestId;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'unregisterBuddy',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('unregisterBuddy', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_unregisterBuddy()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_unregisterBuddy_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_unregisterBuddy_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }

    public function unregisterBuddyAdmin($requestId)
    {
        $this->send_unregisterBuddyAdmin($requestId);
        $this->recv_unregisterBuddyAdmin();
    }

    public function send_unregisterBuddyAdmin($requestId)
    {
        $args = new \BuddyManagementService_unregisterBuddyAdmin_args();
        $args->requestId = $requestId;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'unregisterBuddyAdmin',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('unregisterBuddyAdmin', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_unregisterBuddyAdmin()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_unregisterBuddyAdmin_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_unregisterBuddyAdmin_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }

    public function updateBuddyAdminProfileAttribute($requestId, array $attributes)
    {
        $this->send_updateBuddyAdminProfileAttribute($requestId, $attributes);
        $this->recv_updateBuddyAdminProfileAttribute();
    }

    public function send_updateBuddyAdminProfileAttribute($requestId, array $attributes)
    {
        $args = new \BuddyManagementService_updateBuddyAdminProfileAttribute_args();
        $args->requestId = $requestId;
        $args->attributes = $attributes;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'updateBuddyAdminProfileAttribute',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('updateBuddyAdminProfileAttribute', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_updateBuddyAdminProfileAttribute()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_updateBuddyAdminProfileAttribute_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_updateBuddyAdminProfileAttribute_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }

    public function updateBuddyAdminProfileImage($requestId, $picture)
    {
        $this->send_updateBuddyAdminProfileImage($requestId, $picture);
        $this->recv_updateBuddyAdminProfileImage();
    }

    public function send_updateBuddyAdminProfileImage($requestId, $picture)
    {
        $args = new \BuddyManagementService_updateBuddyAdminProfileImage_args();
        $args->requestId = $requestId;
        $args->picture = $picture;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'updateBuddyAdminProfileImage',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('updateBuddyAdminProfileImage', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_updateBuddyAdminProfileImage()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_updateBuddyAdminProfileImage_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_updateBuddyAdminProfileImage_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }

    public function updateBuddyProfileAttributes($requestId, array $attributes)
    {
        $this->send_updateBuddyProfileAttributes($requestId, $attributes);
        return $this->recv_updateBuddyProfileAttributes();
    }

    public function send_updateBuddyProfileAttributes($requestId, array $attributes)
    {
        $args = new \BuddyManagementService_updateBuddyProfileAttributes_args();
        $args->requestId = $requestId;
        $args->attributes = $attributes;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'updateBuddyProfileAttributes',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('updateBuddyProfileAttributes', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_updateBuddyProfileAttributes()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_updateBuddyProfileAttributes_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_updateBuddyProfileAttributes_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("updateBuddyProfileAttributes failed: unknown result");
    }

    public function updateBuddyProfileAttributesAsync($requestId, array $attributes)
    {
        $this->send_updateBuddyProfileAttributesAsync($requestId, $attributes);
        return $this->recv_updateBuddyProfileAttributesAsync();
    }

    public function send_updateBuddyProfileAttributesAsync($requestId, array $attributes)
    {
        $args = new \BuddyManagementService_updateBuddyProfileAttributesAsync_args();
        $args->requestId = $requestId;
        $args->attributes = $attributes;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'updateBuddyProfileAttributesAsync',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('updateBuddyProfileAttributesAsync', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_updateBuddyProfileAttributesAsync()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_updateBuddyProfileAttributesAsync_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_updateBuddyProfileAttributesAsync_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("updateBuddyProfileAttributesAsync failed: unknown result");
    }

    public function updateBuddyProfileImage($requestId, $image)
    {
        $this->send_updateBuddyProfileImage($requestId, $image);
        return $this->recv_updateBuddyProfileImage();
    }

    public function send_updateBuddyProfileImage($requestId, $image)
    {
        $args = new \BuddyManagementService_updateBuddyProfileImage_args();
        $args->requestId = $requestId;
        $args->image = $image;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'updateBuddyProfileImage',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('updateBuddyProfileImage', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_updateBuddyProfileImage()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_updateBuddyProfileImage_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_updateBuddyProfileImage_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("updateBuddyProfileImage failed: unknown result");
    }

    public function updateBuddyProfileImageAsync($requestId, $image)
    {
        $this->send_updateBuddyProfileImageAsync($requestId, $image);
        return $this->recv_updateBuddyProfileImageAsync();
    }

    public function send_updateBuddyProfileImageAsync($requestId, $image)
    {
        $args = new \BuddyManagementService_updateBuddyProfileImageAsync_args();
        $args->requestId = $requestId;
        $args->image = $image;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'updateBuddyProfileImageAsync',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('updateBuddyProfileImageAsync', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_updateBuddyProfileImageAsync()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_updateBuddyProfileImageAsync_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_updateBuddyProfileImageAsync_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("updateBuddyProfileImageAsync failed: unknown result");
    }

    public function updateBuddySearchId($requestId, $searchId)
    {
        $this->send_updateBuddySearchId($requestId, $searchId);
        $this->recv_updateBuddySearchId();
    }

    public function send_updateBuddySearchId($requestId, $searchId)
    {
        $args = new \BuddyManagementService_updateBuddySearchId_args();
        $args->requestId = $requestId;
        $args->searchId = $searchId;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'updateBuddySearchId',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('updateBuddySearchId', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_updateBuddySearchId()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_updateBuddySearchId_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_updateBuddySearchId_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }

    public function updateBuddySettings(array $settings)
    {
        $this->send_updateBuddySettings($settings);
        $this->recv_updateBuddySettings();
    }

    public function send_updateBuddySettings(array $settings)
    {
        $args = new \BuddyManagementService_updateBuddySettings_args();
        $args->settings = $settings;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'updateBuddySettings',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('updateBuddySettings', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_updateBuddySettings()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_updateBuddySettings_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_updateBuddySettings_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }

    public function uploadBuddyContent($contentType, $content)
    {
        $this->send_uploadBuddyContent($contentType, $content);
        return $this->recv_uploadBuddyContent();
    }

    public function send_uploadBuddyContent($contentType, $content)
    {
        $args = new \BuddyManagementService_uploadBuddyContent_args();
        $args->contentType = $contentType;
        $args->content = $content;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'uploadBuddyContent',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('uploadBuddyContent', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_uploadBuddyContent()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\BuddyManagementService_uploadBuddyContent_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \BuddyManagementService_uploadBuddyContent_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("uploadBuddyContent failed: unknown result");
    }
}
