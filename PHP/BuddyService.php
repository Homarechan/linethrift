<?php
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface BuddyServiceIf {
  /**
   * @param string $language
   * @param string $country
   * @param string $query
   * @param int $fromIndex
   * @param int $count
   * @param int $requestSource
   * @return \BuddySearchResult[]
   * @throws \TalkException
   */
  public function findBuddyContactsByQuery($language, $country, $query, $fromIndex, $count, $requestSource);
  /**
   * @param string $language
   * @param string $country
   * @param string $classification
   * @param int $fromIndex
   * @param int $count
   * @return \Contact[]
   * @throws \TalkException
   */
  public function getBuddyContacts($language, $country, $classification, $fromIndex, $count);
  /**
   * @param string $buddyMid
   * @return \BuddyDetail
   * @throws \TalkException
   */
  public function getBuddyDetail($buddyMid);
  /**
   * @param string $buddyMid
   * @return \BuddyOnAir
   * @throws \TalkException
   */
  public function getBuddyOnAir($buddyMid);
  /**
   * @return string[]
   * @throws \TalkException
   */
  public function getCountriesHavingBuddy();
  /**
   * @param string $country
   * @return array
   * @throws \TalkException
   */
  public function getNewlyReleasedBuddyIds($country);
  /**
   * @param string $language
   * @param string $country
   * @param int $applicationType
   * @param string $resourceSpecification
   * @return \BuddyBanner
   * @throws \TalkException
   */
  public function getPopularBuddyBanner($language, $country, $applicationType, $resourceSpecification);
  /**
   * @param string $language
   * @param string $country
   * @return \BuddyList[]
   * @throws \TalkException
   */
  public function getPopularBuddyLists($language, $country);
  /**
   * @param string $language
   * @param string $country
   * @return \Contact[]
   * @throws \TalkException
   */
  public function getPromotedBuddyContacts($language, $country);
}


class BuddyServiceClient implements \BuddyServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function findBuddyContactsByQuery($language, $country, $query, $fromIndex, $count, $requestSource)
  {
    $this->send_findBuddyContactsByQuery($language, $country, $query, $fromIndex, $count, $requestSource);
    return $this->recv_findBuddyContactsByQuery();
  }

  public function send_findBuddyContactsByQuery($language, $country, $query, $fromIndex, $count, $requestSource)
  {
    $args = new \BuddyService_findBuddyContactsByQuery_args();
    $args->language = $language;
    $args->country = $country;
    $args->query = $query;
    $args->fromIndex = $fromIndex;
    $args->count = $count;
    $args->requestSource = $requestSource;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findBuddyContactsByQuery', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findBuddyContactsByQuery', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findBuddyContactsByQuery()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\BuddyService_findBuddyContactsByQuery_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \BuddyService_findBuddyContactsByQuery_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("findBuddyContactsByQuery failed: unknown result");
  }

  public function getBuddyContacts($language, $country, $classification, $fromIndex, $count)
  {
    $this->send_getBuddyContacts($language, $country, $classification, $fromIndex, $count);
    return $this->recv_getBuddyContacts();
  }

  public function send_getBuddyContacts($language, $country, $classification, $fromIndex, $count)
  {
    $args = new \BuddyService_getBuddyContacts_args();
    $args->language = $language;
    $args->country = $country;
    $args->classification = $classification;
    $args->fromIndex = $fromIndex;
    $args->count = $count;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBuddyContacts', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBuddyContacts', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBuddyContacts()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\BuddyService_getBuddyContacts_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \BuddyService_getBuddyContacts_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("getBuddyContacts failed: unknown result");
  }

  public function getBuddyDetail($buddyMid)
  {
    $this->send_getBuddyDetail($buddyMid);
    return $this->recv_getBuddyDetail();
  }

  public function send_getBuddyDetail($buddyMid)
  {
    $args = new \BuddyService_getBuddyDetail_args();
    $args->buddyMid = $buddyMid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBuddyDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBuddyDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBuddyDetail()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\BuddyService_getBuddyDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \BuddyService_getBuddyDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("getBuddyDetail failed: unknown result");
  }

  public function getBuddyOnAir($buddyMid)
  {
    $this->send_getBuddyOnAir($buddyMid);
    return $this->recv_getBuddyOnAir();
  }

  public function send_getBuddyOnAir($buddyMid)
  {
    $args = new \BuddyService_getBuddyOnAir_args();
    $args->buddyMid = $buddyMid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBuddyOnAir', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBuddyOnAir', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBuddyOnAir()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\BuddyService_getBuddyOnAir_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \BuddyService_getBuddyOnAir_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("getBuddyOnAir failed: unknown result");
  }

  public function getCountriesHavingBuddy()
  {
    $this->send_getCountriesHavingBuddy();
    return $this->recv_getCountriesHavingBuddy();
  }

  public function send_getCountriesHavingBuddy()
  {
    $args = new \BuddyService_getCountriesHavingBuddy_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCountriesHavingBuddy', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCountriesHavingBuddy', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCountriesHavingBuddy()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\BuddyService_getCountriesHavingBuddy_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \BuddyService_getCountriesHavingBuddy_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("getCountriesHavingBuddy failed: unknown result");
  }

  public function getNewlyReleasedBuddyIds($country)
  {
    $this->send_getNewlyReleasedBuddyIds($country);
    return $this->recv_getNewlyReleasedBuddyIds();
  }

  public function send_getNewlyReleasedBuddyIds($country)
  {
    $args = new \BuddyService_getNewlyReleasedBuddyIds_args();
    $args->country = $country;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getNewlyReleasedBuddyIds', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getNewlyReleasedBuddyIds', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getNewlyReleasedBuddyIds()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\BuddyService_getNewlyReleasedBuddyIds_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \BuddyService_getNewlyReleasedBuddyIds_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("getNewlyReleasedBuddyIds failed: unknown result");
  }

  public function getPopularBuddyBanner($language, $country, $applicationType, $resourceSpecification)
  {
    $this->send_getPopularBuddyBanner($language, $country, $applicationType, $resourceSpecification);
    return $this->recv_getPopularBuddyBanner();
  }

  public function send_getPopularBuddyBanner($language, $country, $applicationType, $resourceSpecification)
  {
    $args = new \BuddyService_getPopularBuddyBanner_args();
    $args->language = $language;
    $args->country = $country;
    $args->applicationType = $applicationType;
    $args->resourceSpecification = $resourceSpecification;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPopularBuddyBanner', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPopularBuddyBanner', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPopularBuddyBanner()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\BuddyService_getPopularBuddyBanner_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \BuddyService_getPopularBuddyBanner_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("getPopularBuddyBanner failed: unknown result");
  }

  public function getPopularBuddyLists($language, $country)
  {
    $this->send_getPopularBuddyLists($language, $country);
    return $this->recv_getPopularBuddyLists();
  }

  public function send_getPopularBuddyLists($language, $country)
  {
    $args = new \BuddyService_getPopularBuddyLists_args();
    $args->language = $language;
    $args->country = $country;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPopularBuddyLists', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPopularBuddyLists', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPopularBuddyLists()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\BuddyService_getPopularBuddyLists_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \BuddyService_getPopularBuddyLists_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("getPopularBuddyLists failed: unknown result");
  }

  public function getPromotedBuddyContacts($language, $country)
  {
    $this->send_getPromotedBuddyContacts($language, $country);
    return $this->recv_getPromotedBuddyContacts();
  }

  public function send_getPromotedBuddyContacts($language, $country)
  {
    $args = new \BuddyService_getPromotedBuddyContacts_args();
    $args->language = $language;
    $args->country = $country;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPromotedBuddyContacts', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPromotedBuddyContacts', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPromotedBuddyContacts()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\BuddyService_getPromotedBuddyContacts_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \BuddyService_getPromotedBuddyContacts_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("getPromotedBuddyContacts failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class BuddyService_findBuddyContactsByQuery_args {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'language',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'country',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'query',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'fromIndex',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'count',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'requestSource',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $language = null;
  /**
   * @var string
   */
  public $country = null;
  /**
   * @var string
   */
  public $query = null;
  /**
   * @var int
   */
  public $fromIndex = null;
  /**
   * @var int
   */
  public $count = null;
  /**
   * @var int
   */
  public $requestSource = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
      if (isset($vals['query'])) {
        $this->query = $vals['query'];
      }
      if (isset($vals['fromIndex'])) {
        $this->fromIndex = $vals['fromIndex'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['requestSource'])) {
        $this->requestSource = $vals['requestSource'];
      }
    }
  }

  public function getName() {
    return 'BuddyService_findBuddyContactsByQuery_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->query);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fromIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->requestSource);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyService_findBuddyContactsByQuery_args');
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 2);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 3);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->query !== null) {
      $xfer += $output->writeFieldBegin('query', TType::STRING, 4);
      $xfer += $output->writeString($this->query);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromIndex !== null) {
      $xfer += $output->writeFieldBegin('fromIndex', TType::I32, 5);
      $xfer += $output->writeI32($this->fromIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 6);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestSource !== null) {
      $xfer += $output->writeFieldBegin('requestSource', TType::I32, 7);
      $xfer += $output->writeI32($this->requestSource);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyService_findBuddyContactsByQuery_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\BuddySearchResult',
        ),
      ),
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var \BuddySearchResult[]
   */
  public $success = null;
  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BuddyService_findBuddyContactsByQuery_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1300 = 0;
            $_etype1303 = 0;
            $xfer += $input->readListBegin($_etype1303, $_size1300);
            for ($_i1304 = 0; $_i1304 < $_size1300; ++$_i1304)
            {
              $elem1305 = null;
              $elem1305 = new \BuddySearchResult();
              $xfer += $elem1305->read($input);
              $this->success []= $elem1305;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyService_findBuddyContactsByQuery_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1306)
          {
            $xfer += $iter1306->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyService_getBuddyContacts_args {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'language',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'country',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'classification',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'fromIndex',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'count',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $language = null;
  /**
   * @var string
   */
  public $country = null;
  /**
   * @var string
   */
  public $classification = null;
  /**
   * @var int
   */
  public $fromIndex = null;
  /**
   * @var int
   */
  public $count = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
      if (isset($vals['classification'])) {
        $this->classification = $vals['classification'];
      }
      if (isset($vals['fromIndex'])) {
        $this->fromIndex = $vals['fromIndex'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'BuddyService_getBuddyContacts_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->classification);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fromIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyService_getBuddyContacts_args');
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 2);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 3);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->classification !== null) {
      $xfer += $output->writeFieldBegin('classification', TType::STRING, 4);
      $xfer += $output->writeString($this->classification);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromIndex !== null) {
      $xfer += $output->writeFieldBegin('fromIndex', TType::I32, 5);
      $xfer += $output->writeI32($this->fromIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 6);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyService_getBuddyContacts_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Contact',
        ),
      ),
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var \Contact[]
   */
  public $success = null;
  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BuddyService_getBuddyContacts_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1307 = 0;
            $_etype1310 = 0;
            $xfer += $input->readListBegin($_etype1310, $_size1307);
            for ($_i1311 = 0; $_i1311 < $_size1307; ++$_i1311)
            {
              $elem1312 = null;
              $elem1312 = new \Contact();
              $xfer += $elem1312->read($input);
              $this->success []= $elem1312;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyService_getBuddyContacts_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1313)
          {
            $xfer += $iter1313->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyService_getBuddyDetail_args {
  static $isValidate = false;

  static $_TSPEC = array(
    4 => array(
      'var' => 'buddyMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $buddyMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['buddyMid'])) {
        $this->buddyMid = $vals['buddyMid'];
      }
    }
  }

  public function getName() {
    return 'BuddyService_getBuddyDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buddyMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyService_getBuddyDetail_args');
    if ($this->buddyMid !== null) {
      $xfer += $output->writeFieldBegin('buddyMid', TType::STRING, 4);
      $xfer += $output->writeString($this->buddyMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyService_getBuddyDetail_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\BuddyDetail',
      ),
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var \BuddyDetail
   */
  public $success = null;
  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BuddyService_getBuddyDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \BuddyDetail();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyService_getBuddyDetail_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyService_getBuddyOnAir_args {
  static $isValidate = false;

  static $_TSPEC = array(
    4 => array(
      'var' => 'buddyMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $buddyMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['buddyMid'])) {
        $this->buddyMid = $vals['buddyMid'];
      }
    }
  }

  public function getName() {
    return 'BuddyService_getBuddyOnAir_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buddyMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyService_getBuddyOnAir_args');
    if ($this->buddyMid !== null) {
      $xfer += $output->writeFieldBegin('buddyMid', TType::STRING, 4);
      $xfer += $output->writeString($this->buddyMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyService_getBuddyOnAir_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\BuddyOnAir',
      ),
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var \BuddyOnAir
   */
  public $success = null;
  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BuddyService_getBuddyOnAir_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \BuddyOnAir();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyService_getBuddyOnAir_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyService_getCountriesHavingBuddy_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'BuddyService_getCountriesHavingBuddy_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyService_getCountriesHavingBuddy_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyService_getCountriesHavingBuddy_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var string[]
   */
  public $success = null;
  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BuddyService_getCountriesHavingBuddy_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1314 = 0;
            $_etype1317 = 0;
            $xfer += $input->readListBegin($_etype1317, $_size1314);
            for ($_i1318 = 0; $_i1318 < $_size1314; ++$_i1318)
            {
              $elem1319 = null;
              $xfer += $input->readString($elem1319);
              $this->success []= $elem1319;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyService_getCountriesHavingBuddy_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter1320)
          {
            $xfer += $output->writeString($iter1320);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyService_getNewlyReleasedBuddyIds_args {
  static $isValidate = false;

  static $_TSPEC = array(
    3 => array(
      'var' => 'country',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $country = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
    }
  }

  public function getName() {
    return 'BuddyService_getNewlyReleasedBuddyIds_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyService_getNewlyReleasedBuddyIds_args');
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 3);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyService_getNewlyReleasedBuddyIds_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BuddyService_getNewlyReleasedBuddyIds_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1321 = 0;
            $_ktype1322 = 0;
            $_vtype1323 = 0;
            $xfer += $input->readMapBegin($_ktype1322, $_vtype1323, $_size1321);
            for ($_i1325 = 0; $_i1325 < $_size1321; ++$_i1325)
            {
              $key1326 = '';
              $val1327 = 0;
              $xfer += $input->readString($key1326);
              $xfer += $input->readI64($val1327);
              $this->success[$key1326] = $val1327;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyService_getNewlyReleasedBuddyIds_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->success));
        {
          foreach ($this->success as $kiter1328 => $viter1329)
          {
            $xfer += $output->writeString($kiter1328);
            $xfer += $output->writeI64($viter1329);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyService_getPopularBuddyBanner_args {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'language',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'country',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'applicationType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'resourceSpecification',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $language = null;
  /**
   * @var string
   */
  public $country = null;
  /**
   * @var int
   */
  public $applicationType = null;
  /**
   * @var string
   */
  public $resourceSpecification = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
      if (isset($vals['applicationType'])) {
        $this->applicationType = $vals['applicationType'];
      }
      if (isset($vals['resourceSpecification'])) {
        $this->resourceSpecification = $vals['resourceSpecification'];
      }
    }
  }

  public function getName() {
    return 'BuddyService_getPopularBuddyBanner_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->applicationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->resourceSpecification);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyService_getPopularBuddyBanner_args');
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 2);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 3);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationType !== null) {
      $xfer += $output->writeFieldBegin('applicationType', TType::I32, 4);
      $xfer += $output->writeI32($this->applicationType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resourceSpecification !== null) {
      $xfer += $output->writeFieldBegin('resourceSpecification', TType::STRING, 5);
      $xfer += $output->writeString($this->resourceSpecification);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyService_getPopularBuddyBanner_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\BuddyBanner',
      ),
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var \BuddyBanner
   */
  public $success = null;
  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BuddyService_getPopularBuddyBanner_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \BuddyBanner();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyService_getPopularBuddyBanner_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyService_getPopularBuddyLists_args {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'language',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'country',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $language = null;
  /**
   * @var string
   */
  public $country = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
    }
  }

  public function getName() {
    return 'BuddyService_getPopularBuddyLists_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyService_getPopularBuddyLists_args');
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 2);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 3);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyService_getPopularBuddyLists_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\BuddyList',
        ),
      ),
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var \BuddyList[]
   */
  public $success = null;
  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BuddyService_getPopularBuddyLists_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1330 = 0;
            $_etype1333 = 0;
            $xfer += $input->readListBegin($_etype1333, $_size1330);
            for ($_i1334 = 0; $_i1334 < $_size1330; ++$_i1334)
            {
              $elem1335 = null;
              $elem1335 = new \BuddyList();
              $xfer += $elem1335->read($input);
              $this->success []= $elem1335;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyService_getPopularBuddyLists_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1336)
          {
            $xfer += $iter1336->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyService_getPromotedBuddyContacts_args {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'language',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'country',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $language = null;
  /**
   * @var string
   */
  public $country = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
    }
  }

  public function getName() {
    return 'BuddyService_getPromotedBuddyContacts_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyService_getPromotedBuddyContacts_args');
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 2);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 3);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyService_getPromotedBuddyContacts_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Contact',
        ),
      ),
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var \Contact[]
   */
  public $success = null;
  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BuddyService_getPromotedBuddyContacts_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1337 = 0;
            $_etype1340 = 0;
            $xfer += $input->readListBegin($_etype1340, $_size1337);
            for ($_i1341 = 0; $_i1341 < $_size1337; ++$_i1341)
            {
              $elem1342 = null;
              $elem1342 = new \Contact();
              $xfer += $elem1342->read($input);
              $this->success []= $elem1342;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyService_getPromotedBuddyContacts_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1343)
          {
            $xfer += $iter1343->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


