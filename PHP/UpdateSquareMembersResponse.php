<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class UpdateSquareMembersResponse
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'updatedAttrs',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::I32,
            'elem' => array(
                'type' => TType::I32,
                ),
        ),
        2 => array(
            'var' => 'editor',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareMember',
        ),
        3 => array(
            'var' => 'members',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\SquareMember',
                ),
        ),
    );

    /**
     * @var int[]
     */
    public $updatedAttrs = null;
    /**
     * @var \SquareMember
     */
    public $editor = null;
    /**
     * @var array
     */
    public $members = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['updatedAttrs'])) {
                $this->updatedAttrs = $vals['updatedAttrs'];
            }
            if (isset($vals['editor'])) {
                $this->editor = $vals['editor'];
            }
            if (isset($vals['members'])) {
                $this->members = $vals['members'];
            }
        }
    }

    public function getName()
    {
        return 'UpdateSquareMembersResponse';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::SET) {
                        $this->updatedAttrs = array();
                        $_size791 = 0;
                        $_etype794 = 0;
                        $xfer += $input->readSetBegin($_etype794, $_size791);
                        for ($_i795 = 0; $_i795 < $_size791; ++$_i795) {
                            $elem796 = null;
                            $xfer += $input->readI32($elem796);
                            $this->updatedAttrs[$elem796] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->editor = new \SquareMember();
                        $xfer += $this->editor->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::MAP) {
                        $this->members = array();
                        $_size797 = 0;
                        $_ktype798 = 0;
                        $_vtype799 = 0;
                        $xfer += $input->readMapBegin($_ktype798, $_vtype799, $_size797);
                        for ($_i801 = 0; $_i801 < $_size797; ++$_i801) {
                            $key802 = '';
                            $val803 = new \SquareMember();
                            $xfer += $input->readString($key802);
                            $val803 = new \SquareMember();
                            $xfer += $val803->read($input);
                            $this->members[$key802] = $val803;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('UpdateSquareMembersResponse');
        if ($this->updatedAttrs !== null) {
            if (!is_array($this->updatedAttrs)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('updatedAttrs', TType::SET, 1);
            $output->writeSetBegin(TType::I32, count($this->updatedAttrs));
            foreach ($this->updatedAttrs as $iter804 => $iter805) {
                $xfer += $output->writeI32($iter804);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->editor !== null) {
            if (!is_object($this->editor)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('editor', TType::STRUCT, 2);
            $xfer += $this->editor->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->members !== null) {
            if (!is_array($this->members)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('members', TType::MAP, 3);
            $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->members));
            foreach ($this->members as $kiter806 => $viter807) {
                $xfer += $output->writeString($kiter806);
                $xfer += $viter807->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
