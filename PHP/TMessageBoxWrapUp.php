<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TMessageBoxWrapUp
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'messageBox',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\TMessageBox',
        ),
        2 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'contacts',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Contact',
                ),
        ),
        4 => array(
            'var' => 'pictureRevision',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var \TMessageBox
     */
    public $messageBox = null;
    /**
     * @var string
     */
    public $name = null;
    /**
     * @var \Contact[]
     */
    public $contacts = null;
    /**
     * @var string
     */
    public $pictureRevision = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['messageBox'])) {
                $this->messageBox = $vals['messageBox'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['contacts'])) {
                $this->contacts = $vals['contacts'];
            }
            if (isset($vals['pictureRevision'])) {
                $this->pictureRevision = $vals['pictureRevision'];
            }
        }
    }

    public function getName()
    {
        return 'TMessageBoxWrapUp';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->messageBox = new \TMessageBox();
                        $xfer += $this->messageBox->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->contacts = array();
                        $_size459 = 0;
                        $_etype462 = 0;
                        $xfer += $input->readListBegin($_etype462, $_size459);
                        for ($_i463 = 0; $_i463 < $_size459; ++$_i463) {
                            $elem464 = null;
                            $elem464 = new \Contact();
                            $xfer += $elem464->read($input);
                            $this->contacts []= $elem464;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->pictureRevision);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TMessageBoxWrapUp');
        if ($this->messageBox !== null) {
            if (!is_object($this->messageBox)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('messageBox', TType::STRUCT, 1);
            $xfer += $this->messageBox->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->contacts !== null) {
            if (!is_array($this->contacts)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('contacts', TType::LST, 3);
            $output->writeListBegin(TType::STRUCT, count($this->contacts));
            foreach ($this->contacts as $iter465) {
                $xfer += $iter465->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pictureRevision !== null) {
            $xfer += $output->writeFieldBegin('pictureRevision', TType::STRING, 4);
            $xfer += $output->writeString($this->pictureRevision);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
