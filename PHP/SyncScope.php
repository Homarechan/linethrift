<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class SyncScope
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'syncProfile',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        2 => array(
            'var' => 'syncSettings',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        3 => array(
            'var' => 'syncSticker',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        4 => array(
            'var' => 'syncThemeShop',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        10 => array(
            'var' => 'contact',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SyncRelations',
        ),
        11 => array(
            'var' => 'group',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SyncRelations',
        ),
        12 => array(
            'var' => 'room',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SyncRelations',
        ),
        13 => array(
            'var' => 'chat',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SyncRelations',
        ),
    );

    /**
     * @var bool
     */
    public $syncProfile = null;
    /**
     * @var bool
     */
    public $syncSettings = null;
    /**
     * @var bool
     */
    public $syncSticker = null;
    /**
     * @var bool
     */
    public $syncThemeShop = null;
    /**
     * @var \SyncRelations
     */
    public $contact = null;
    /**
     * @var \SyncRelations
     */
    public $group = null;
    /**
     * @var \SyncRelations
     */
    public $room = null;
    /**
     * @var \SyncRelations
     */
    public $chat = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['syncProfile'])) {
                $this->syncProfile = $vals['syncProfile'];
            }
            if (isset($vals['syncSettings'])) {
                $this->syncSettings = $vals['syncSettings'];
            }
            if (isset($vals['syncSticker'])) {
                $this->syncSticker = $vals['syncSticker'];
            }
            if (isset($vals['syncThemeShop'])) {
                $this->syncThemeShop = $vals['syncThemeShop'];
            }
            if (isset($vals['contact'])) {
                $this->contact = $vals['contact'];
            }
            if (isset($vals['group'])) {
                $this->group = $vals['group'];
            }
            if (isset($vals['room'])) {
                $this->room = $vals['room'];
            }
            if (isset($vals['chat'])) {
                $this->chat = $vals['chat'];
            }
        }
    }

    public function getName()
    {
        return 'SyncScope';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->syncProfile);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->syncSettings);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->syncSticker);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->syncThemeShop);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRUCT) {
                        $this->contact = new \SyncRelations();
                        $xfer += $this->contact->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRUCT) {
                        $this->group = new \SyncRelations();
                        $xfer += $this->group->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRUCT) {
                        $this->room = new \SyncRelations();
                        $xfer += $this->room->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRUCT) {
                        $this->chat = new \SyncRelations();
                        $xfer += $this->chat->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('SyncScope');
        if ($this->syncProfile !== null) {
            $xfer += $output->writeFieldBegin('syncProfile', TType::BOOL, 1);
            $xfer += $output->writeBool($this->syncProfile);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->syncSettings !== null) {
            $xfer += $output->writeFieldBegin('syncSettings', TType::BOOL, 2);
            $xfer += $output->writeBool($this->syncSettings);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->syncSticker !== null) {
            $xfer += $output->writeFieldBegin('syncSticker', TType::BOOL, 3);
            $xfer += $output->writeBool($this->syncSticker);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->syncThemeShop !== null) {
            $xfer += $output->writeFieldBegin('syncThemeShop', TType::BOOL, 4);
            $xfer += $output->writeBool($this->syncThemeShop);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->contact !== null) {
            if (!is_object($this->contact)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('contact', TType::STRUCT, 10);
            $xfer += $this->contact->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->group !== null) {
            if (!is_object($this->group)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('group', TType::STRUCT, 11);
            $xfer += $this->group->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->room !== null) {
            if (!is_object($this->room)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('room', TType::STRUCT, 12);
            $xfer += $this->room->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->chat !== null) {
            if (!is_object($this->chat)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('chat', TType::STRUCT, 13);
            $xfer += $this->chat->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
