<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class ChannelInfo
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'channelId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'entryPageUrl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'descriptionText',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'provider',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\ChannelProvider',
        ),
        7 => array(
            'var' => 'publicType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        8 => array(
            'var' => 'iconImage',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'permissions',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        11 => array(
            'var' => 'iconThumbnailImage',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'channelConfigurations',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::I32,
            'elem' => array(
                'type' => TType::I32,
                ),
        ),
        13 => array(
            'var' => 'lcsAllApiUsable',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        14 => array(
            'var' => 'allowedPermissions',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::I32,
            'elem' => array(
                'type' => TType::I32,
                ),
        ),
        15 => array(
            'var' => 'channelDomains',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\ChannelDomain',
                ),
        ),
        16 => array(
            'var' => 'updatedTimestamp',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var string
     */
    public $channelId = null;
    /**
     * @var string
     */
    public $name = null;
    /**
     * @var string
     */
    public $entryPageUrl = null;
    /**
     * @var string
     */
    public $descriptionText = null;
    /**
     * @var \ChannelProvider
     */
    public $provider = null;
    /**
     * @var int
     */
    public $publicType = null;
    /**
     * @var string
     */
    public $iconImage = null;
    /**
     * @var string[]
     */
    public $permissions = null;
    /**
     * @var string
     */
    public $iconThumbnailImage = null;
    /**
     * @var int[]
     */
    public $channelConfigurations = null;
    /**
     * @var bool
     */
    public $lcsAllApiUsable = null;
    /**
     * @var int[]
     */
    public $allowedPermissions = null;
    /**
     * @var \ChannelDomain[]
     */
    public $channelDomains = null;
    /**
     * @var int
     */
    public $updatedTimestamp = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['channelId'])) {
                $this->channelId = $vals['channelId'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['entryPageUrl'])) {
                $this->entryPageUrl = $vals['entryPageUrl'];
            }
            if (isset($vals['descriptionText'])) {
                $this->descriptionText = $vals['descriptionText'];
            }
            if (isset($vals['provider'])) {
                $this->provider = $vals['provider'];
            }
            if (isset($vals['publicType'])) {
                $this->publicType = $vals['publicType'];
            }
            if (isset($vals['iconImage'])) {
                $this->iconImage = $vals['iconImage'];
            }
            if (isset($vals['permissions'])) {
                $this->permissions = $vals['permissions'];
            }
            if (isset($vals['iconThumbnailImage'])) {
                $this->iconThumbnailImage = $vals['iconThumbnailImage'];
            }
            if (isset($vals['channelConfigurations'])) {
                $this->channelConfigurations = $vals['channelConfigurations'];
            }
            if (isset($vals['lcsAllApiUsable'])) {
                $this->lcsAllApiUsable = $vals['lcsAllApiUsable'];
            }
            if (isset($vals['allowedPermissions'])) {
                $this->allowedPermissions = $vals['allowedPermissions'];
            }
            if (isset($vals['channelDomains'])) {
                $this->channelDomains = $vals['channelDomains'];
            }
            if (isset($vals['updatedTimestamp'])) {
                $this->updatedTimestamp = $vals['updatedTimestamp'];
            }
        }
    }

    public function getName()
    {
        return 'ChannelInfo';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->channelId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->entryPageUrl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->descriptionText);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->provider = new \ChannelProvider();
                        $xfer += $this->provider->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->publicType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->iconImage);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::LST) {
                        $this->permissions = array();
                        $_size64 = 0;
                        $_etype67 = 0;
                        $xfer += $input->readListBegin($_etype67, $_size64);
                        for ($_i68 = 0; $_i68 < $_size64; ++$_i68) {
                            $elem69 = null;
                            $xfer += $input->readString($elem69);
                            $this->permissions []= $elem69;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->iconThumbnailImage);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::LST) {
                        $this->channelConfigurations = array();
                        $_size70 = 0;
                        $_etype73 = 0;
                        $xfer += $input->readListBegin($_etype73, $_size70);
                        for ($_i74 = 0; $_i74 < $_size70; ++$_i74) {
                            $elem75 = null;
                            $xfer += $input->readI32($elem75);
                            $this->channelConfigurations []= $elem75;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->lcsAllApiUsable);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::SET) {
                        $this->allowedPermissions = array();
                        $_size76 = 0;
                        $_etype79 = 0;
                        $xfer += $input->readSetBegin($_etype79, $_size76);
                        for ($_i80 = 0; $_i80 < $_size76; ++$_i80) {
                            $elem81 = null;
                            $xfer += $input->readI32($elem81);
                            $this->allowedPermissions[$elem81] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::LST) {
                        $this->channelDomains = array();
                        $_size82 = 0;
                        $_etype85 = 0;
                        $xfer += $input->readListBegin($_etype85, $_size82);
                        for ($_i86 = 0; $_i86 < $_size82; ++$_i86) {
                            $elem87 = null;
                            $elem87 = new \ChannelDomain();
                            $xfer += $elem87->read($input);
                            $this->channelDomains []= $elem87;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->updatedTimestamp);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ChannelInfo');
        if ($this->channelId !== null) {
            $xfer += $output->writeFieldBegin('channelId', TType::STRING, 1);
            $xfer += $output->writeString($this->channelId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->entryPageUrl !== null) {
            $xfer += $output->writeFieldBegin('entryPageUrl', TType::STRING, 4);
            $xfer += $output->writeString($this->entryPageUrl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->descriptionText !== null) {
            $xfer += $output->writeFieldBegin('descriptionText', TType::STRING, 5);
            $xfer += $output->writeString($this->descriptionText);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->provider !== null) {
            if (!is_object($this->provider)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('provider', TType::STRUCT, 6);
            $xfer += $this->provider->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->publicType !== null) {
            $xfer += $output->writeFieldBegin('publicType', TType::I32, 7);
            $xfer += $output->writeI32($this->publicType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->iconImage !== null) {
            $xfer += $output->writeFieldBegin('iconImage', TType::STRING, 8);
            $xfer += $output->writeString($this->iconImage);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->permissions !== null) {
            if (!is_array($this->permissions)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('permissions', TType::LST, 9);
            $output->writeListBegin(TType::STRING, count($this->permissions));
            foreach ($this->permissions as $iter88) {
                $xfer += $output->writeString($iter88);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->iconThumbnailImage !== null) {
            $xfer += $output->writeFieldBegin('iconThumbnailImage', TType::STRING, 11);
            $xfer += $output->writeString($this->iconThumbnailImage);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->channelConfigurations !== null) {
            if (!is_array($this->channelConfigurations)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('channelConfigurations', TType::LST, 12);
            $output->writeListBegin(TType::I32, count($this->channelConfigurations));
            foreach ($this->channelConfigurations as $iter89) {
                $xfer += $output->writeI32($iter89);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->lcsAllApiUsable !== null) {
            $xfer += $output->writeFieldBegin('lcsAllApiUsable', TType::BOOL, 13);
            $xfer += $output->writeBool($this->lcsAllApiUsable);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->allowedPermissions !== null) {
            if (!is_array($this->allowedPermissions)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('allowedPermissions', TType::SET, 14);
            $output->writeSetBegin(TType::I32, count($this->allowedPermissions));
            foreach ($this->allowedPermissions as $iter90 => $iter91) {
                $xfer += $output->writeI32($iter90);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->channelDomains !== null) {
            if (!is_array($this->channelDomains)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('channelDomains', TType::LST, 15);
            $output->writeListBegin(TType::STRUCT, count($this->channelDomains));
            foreach ($this->channelDomains as $iter92) {
                $xfer += $iter92->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->updatedTimestamp !== null) {
            $xfer += $output->writeFieldBegin('updatedTimestamp', TType::I64, 16);
            $xfer += $output->writeI64($this->updatedTimestamp);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
